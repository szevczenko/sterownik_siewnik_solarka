
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ce4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000256  00800060  00003ce4  00003d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000287  008002b6  008002b6  00003fce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000402c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005397  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ece  00000000  00000000  000099cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b08  00000000  00000000  0000b89d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d8c  00000000  00000000  0000f3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000195d  00000000  00000000  00010134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002607  00000000  00000000  00011a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00014098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_10>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__vector_13>
      38:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__vector_14>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	bc 06       	cpc	r11, r28
      56:	c3 06       	cpc	r12, r19
      58:	c6 06       	cpc	r12, r22
      5a:	cc 06       	cpc	r12, r28
      5c:	d2 06       	cpc	r13, r18
      5e:	d7 06       	cpc	r13, r23
      60:	dd 06       	cpc	r13, r29
      62:	e4 06       	cpc	r14, r20
      64:	e8 06       	cpc	r14, r24
      66:	f0 06       	cpc	r15, r16
      68:	3f 07       	cpc	r19, r31
      6a:	3f 07       	cpc	r19, r31
      6c:	3f 07       	cpc	r19, r31
      6e:	3f 07       	cpc	r19, r31
      70:	3f 07       	cpc	r19, r31
      72:	3f 07       	cpc	r19, r31
      74:	3f 07       	cpc	r19, r31
      76:	3f 07       	cpc	r19, r31
      78:	3f 07       	cpc	r19, r31
      7a:	3f 07       	cpc	r19, r31
      7c:	3f 07       	cpc	r19, r31
      7e:	3f 07       	cpc	r19, r31
      80:	3f 07       	cpc	r19, r31
      82:	3f 07       	cpc	r19, r31
      84:	3f 07       	cpc	r19, r31
      86:	3f 07       	cpc	r19, r31
      88:	3f 07       	cpc	r19, r31
      8a:	3f 07       	cpc	r19, r31
      8c:	3f 07       	cpc	r19, r31
      8e:	3f 07       	cpc	r19, r31
      90:	3f 07       	cpc	r19, r31
      92:	3f 07       	cpc	r19, r31
      94:	3f 07       	cpc	r19, r31
      96:	3f 07       	cpc	r19, r31
      98:	3f 07       	cpc	r19, r31
      9a:	3f 07       	cpc	r19, r31
      9c:	3f 07       	cpc	r19, r31
      9e:	3f 07       	cpc	r19, r31
      a0:	3f 07       	cpc	r19, r31
      a2:	3f 07       	cpc	r19, r31
      a4:	3f 07       	cpc	r19, r31
      a6:	3f 07       	cpc	r19, r31
      a8:	3f 07       	cpc	r19, r31
      aa:	3f 07       	cpc	r19, r31
      ac:	3f 07       	cpc	r19, r31
      ae:	3f 07       	cpc	r19, r31
      b0:	3f 07       	cpc	r19, r31
      b2:	3f 07       	cpc	r19, r31
      b4:	3f 07       	cpc	r19, r31
      b6:	3f 07       	cpc	r19, r31
      b8:	3f 07       	cpc	r19, r31
      ba:	3f 07       	cpc	r19, r31
      bc:	3f 07       	cpc	r19, r31
      be:	3f 07       	cpc	r19, r31
      c0:	3f 07       	cpc	r19, r31
      c2:	3f 07       	cpc	r19, r31
      c4:	3f 07       	cpc	r19, r31
      c6:	3f 07       	cpc	r19, r31
      c8:	3f 07       	cpc	r19, r31
      ca:	3f 07       	cpc	r19, r31
      cc:	3f 07       	cpc	r19, r31
      ce:	3f 07       	cpc	r19, r31
      d0:	3f 07       	cpc	r19, r31
      d2:	3f 07       	cpc	r19, r31
      d4:	3f 07       	cpc	r19, r31
      d6:	3f 07       	cpc	r19, r31
      d8:	3f 07       	cpc	r19, r31
      da:	3f 07       	cpc	r19, r31
      dc:	3f 07       	cpc	r19, r31
      de:	3f 07       	cpc	r19, r31
      e0:	3f 07       	cpc	r19, r31
      e2:	3f 07       	cpc	r19, r31
      e4:	3f 07       	cpc	r19, r31
      e6:	3f 07       	cpc	r19, r31
      e8:	3f 07       	cpc	r19, r31
      ea:	3f 07       	cpc	r19, r31
      ec:	3f 07       	cpc	r19, r31
      ee:	3f 07       	cpc	r19, r31
      f0:	3f 07       	cpc	r19, r31
      f2:	3f 07       	cpc	r19, r31
      f4:	3f 07       	cpc	r19, r31
      f6:	3f 07       	cpc	r19, r31
      f8:	3f 07       	cpc	r19, r31
      fa:	3f 07       	cpc	r19, r31
      fc:	3f 07       	cpc	r19, r31
      fe:	3f 07       	cpc	r19, r31
     100:	3f 07       	cpc	r19, r31
     102:	3f 07       	cpc	r19, r31
     104:	3f 07       	cpc	r19, r31
     106:	3f 07       	cpc	r19, r31
     108:	3f 07       	cpc	r19, r31
     10a:	3f 07       	cpc	r19, r31
     10c:	3f 07       	cpc	r19, r31
     10e:	3f 07       	cpc	r19, r31
     110:	3f 07       	cpc	r19, r31
     112:	3f 07       	cpc	r19, r31
     114:	3f 07       	cpc	r19, r31
     116:	f7 06       	cpc	r15, r23
     118:	fe 06       	cpc	r15, r30
     11a:	04 07       	cpc	r16, r20
     11c:	09 07       	cpc	r16, r25
     11e:	0f 07       	cpc	r16, r31
     120:	15 07       	cpc	r17, r21
     122:	3f 07       	cpc	r19, r31
     124:	3f 07       	cpc	r19, r31
     126:	3f 07       	cpc	r19, r31
     128:	3f 07       	cpc	r19, r31
     12a:	3f 07       	cpc	r19, r31
     12c:	2e 07       	cpc	r18, r30
     12e:	3f 07       	cpc	r19, r31
     130:	3f 07       	cpc	r19, r31
     132:	1d 07       	cpc	r17, r29
     134:	22 07       	cpc	r18, r18
     136:	3f 07       	cpc	r19, r31
     138:	1a 07       	cpc	r17, r26
     13a:	28 07       	cpc	r18, r24
     13c:	3f 07       	cpc	r19, r31
     13e:	3f 07       	cpc	r19, r31
     140:	3f 07       	cpc	r19, r31
     142:	3f 07       	cpc	r19, r31
     144:	3f 07       	cpc	r19, r31
     146:	3f 07       	cpc	r19, r31
     148:	3f 07       	cpc	r19, r31
     14a:	3f 07       	cpc	r19, r31
     14c:	3f 07       	cpc	r19, r31
     14e:	3f 07       	cpc	r19, r31
     150:	3f 07       	cpc	r19, r31
     152:	3f 07       	cpc	r19, r31
     154:	3f 07       	cpc	r19, r31
     156:	3f 07       	cpc	r19, r31
     158:	3f 07       	cpc	r19, r31
     15a:	3f 07       	cpc	r19, r31
     15c:	3f 07       	cpc	r19, r31
     15e:	3f 07       	cpc	r19, r31
     160:	3f 07       	cpc	r19, r31
     162:	3f 07       	cpc	r19, r31
     164:	3f 07       	cpc	r19, r31
     166:	3f 07       	cpc	r19, r31
     168:	3f 07       	cpc	r19, r31
     16a:	3f 07       	cpc	r19, r31
     16c:	3f 07       	cpc	r19, r31
     16e:	3f 07       	cpc	r19, r31
     170:	3f 07       	cpc	r19, r31
     172:	3f 07       	cpc	r19, r31
     174:	3f 07       	cpc	r19, r31
     176:	3f 07       	cpc	r19, r31
     178:	3f 07       	cpc	r19, r31
     17a:	3f 07       	cpc	r19, r31
     17c:	3f 07       	cpc	r19, r31
     17e:	3f 07       	cpc	r19, r31
     180:	3f 07       	cpc	r19, r31
     182:	3f 07       	cpc	r19, r31
     184:	3f 07       	cpc	r19, r31
     186:	3f 07       	cpc	r19, r31
     188:	3f 07       	cpc	r19, r31
     18a:	3f 07       	cpc	r19, r31
     18c:	3f 07       	cpc	r19, r31
     18e:	3f 07       	cpc	r19, r31
     190:	3f 07       	cpc	r19, r31
     192:	3f 07       	cpc	r19, r31
     194:	3f 07       	cpc	r19, r31
     196:	3f 07       	cpc	r19, r31
     198:	3f 07       	cpc	r19, r31
     19a:	3f 07       	cpc	r19, r31
     19c:	3f 07       	cpc	r19, r31
     19e:	3f 07       	cpc	r19, r31
     1a0:	3f 07       	cpc	r19, r31
     1a2:	3f 07       	cpc	r19, r31
     1a4:	3f 07       	cpc	r19, r31
     1a6:	3f 07       	cpc	r19, r31
     1a8:	3f 07       	cpc	r19, r31
     1aa:	3f 07       	cpc	r19, r31
     1ac:	3f 07       	cpc	r19, r31
     1ae:	3f 07       	cpc	r19, r31
     1b0:	3f 07       	cpc	r19, r31
     1b2:	3f 07       	cpc	r19, r31
     1b4:	3f 07       	cpc	r19, r31
     1b6:	3f 07       	cpc	r19, r31
     1b8:	3f 07       	cpc	r19, r31
     1ba:	3f 07       	cpc	r19, r31
     1bc:	3f 07       	cpc	r19, r31
     1be:	3f 07       	cpc	r19, r31
     1c0:	3f 07       	cpc	r19, r31
     1c2:	3f 07       	cpc	r19, r31
     1c4:	3f 07       	cpc	r19, r31
     1c6:	3f 07       	cpc	r19, r31
     1c8:	3f 07       	cpc	r19, r31
     1ca:	3f 07       	cpc	r19, r31
     1cc:	3f 07       	cpc	r19, r31
     1ce:	3f 07       	cpc	r19, r31
     1d0:	3f 07       	cpc	r19, r31
     1d2:	3f 07       	cpc	r19, r31
     1d4:	3f 07       	cpc	r19, r31
     1d6:	3f 07       	cpc	r19, r31
     1d8:	3f 07       	cpc	r19, r31
     1da:	3f 07       	cpc	r19, r31
     1dc:	3f 07       	cpc	r19, r31
     1de:	3f 07       	cpc	r19, r31
     1e0:	3f 07       	cpc	r19, r31
     1e2:	3f 07       	cpc	r19, r31
     1e4:	3f 07       	cpc	r19, r31
     1e6:	3f 07       	cpc	r19, r31
     1e8:	3f 07       	cpc	r19, r31
     1ea:	3f 07       	cpc	r19, r31
     1ec:	3f 07       	cpc	r19, r31
     1ee:	3f 07       	cpc	r19, r31
     1f0:	3f 07       	cpc	r19, r31
     1f2:	3f 07       	cpc	r19, r31
     1f4:	3f 07       	cpc	r19, r31
     1f6:	3f 07       	cpc	r19, r31
     1f8:	3f 07       	cpc	r19, r31
     1fa:	3f 07       	cpc	r19, r31
     1fc:	3f 07       	cpc	r19, r31
     1fe:	3f 07       	cpc	r19, r31
     200:	3f 07       	cpc	r19, r31
     202:	3f 07       	cpc	r19, r31
     204:	3f 07       	cpc	r19, r31
     206:	3f 07       	cpc	r19, r31
     208:	3f 07       	cpc	r19, r31
     20a:	3f 07       	cpc	r19, r31
     20c:	3f 07       	cpc	r19, r31
     20e:	3f 07       	cpc	r19, r31
     210:	3f 07       	cpc	r19, r31
     212:	3f 07       	cpc	r19, r31
     214:	3f 07       	cpc	r19, r31
     216:	3f 07       	cpc	r19, r31
     218:	3f 07       	cpc	r19, r31
     21a:	3f 07       	cpc	r19, r31
     21c:	3f 07       	cpc	r19, r31
     21e:	3f 07       	cpc	r19, r31
     220:	3f 07       	cpc	r19, r31
     222:	3f 07       	cpc	r19, r31
     224:	3f 07       	cpc	r19, r31
     226:	3f 07       	cpc	r19, r31
     228:	3f 07       	cpc	r19, r31
     22a:	3f 07       	cpc	r19, r31
     22c:	3f 07       	cpc	r19, r31
     22e:	3f 07       	cpc	r19, r31
     230:	3f 07       	cpc	r19, r31
     232:	3f 07       	cpc	r19, r31
     234:	3f 07       	cpc	r19, r31
     236:	3f 07       	cpc	r19, r31
     238:	3f 07       	cpc	r19, r31
     23a:	3f 07       	cpc	r19, r31
     23c:	3f 07       	cpc	r19, r31
     23e:	3f 07       	cpc	r19, r31
     240:	3f 07       	cpc	r19, r31
     242:	3f 07       	cpc	r19, r31
     244:	32 07       	cpc	r19, r18
     246:	3e 07       	cpc	r19, r30
     248:	3c 07       	cpc	r19, r28
     24a:	3a 07       	cpc	r19, r26
     24c:	38 07       	cpc	r19, r24
     24e:	36 07       	cpc	r19, r22
     250:	34 07       	cpc	r19, r20

00000252 <__trampolines_end>:
     252:	6e 61       	ori	r22, 0x1E	; 30
     254:	6e 00       	.word	0x006e	; ????

00000256 <__c.2332>:
     256:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     266:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     276:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     286:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     296:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     306:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     316:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     326:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     336:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     346:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e4 ee       	ldi	r30, 0xE4	; 228
     368:	fc e3       	ldi	r31, 0x3C	; 60
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__do_copy_data+0x10>
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	a6 3b       	cpi	r26, 0xB6	; 182
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <__do_copy_data+0xc>

00000376 <__do_clear_bss>:
     376:	25 e0       	ldi	r18, 0x05	; 5
     378:	a6 eb       	ldi	r26, 0xB6	; 182
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	ad 33       	cpi	r26, 0x3D	; 61
     382:	b2 07       	cpc	r27, r18
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
     38a:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	ae 01       	movw	r20, r28
     39c:	4b 5f       	subi	r20, 0xFB	; 251
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	fa 01       	movw	r30, r20
     3a2:	61 91       	ld	r22, Z+
     3a4:	71 91       	ld	r23, Z+
     3a6:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     3a8:	84 e2       	ldi	r24, 0x24	; 36
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     3b0:	84 e2       	ldi	r24, 0x24	; 36
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	0e 94 93 16 	call	0x2d26	; 0x2d26 <uart0_puts>
	#endif
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     3be:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     3c0:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     3c2:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     3c4:	89 9a       	sbi	0x11, 1	; 17
     3c6:	08 95       	ret

000003c8 <init_driver>:
}

void init_driver(void)
{
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     3c8:	62 e3       	ldi	r22, 0x32	; 50
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <timer0_init>
	init_display_drv();
     3d0:	0e 94 73 06 	call	0xce6	; 0xce6 <init_display_drv>
	init_buttons();
     3d4:	0e 94 87 04 	call	0x90e	; 0x90e <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <uart0_init>
	#endif
	init_system();
     3e0:	0e 94 3e 13 	call	0x267c	; 0x267c <init_system>
	init_measure();
     3e4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     3e8:	80 b7       	in	r24, 0x30	; 48
     3ea:	8b 7f       	andi	r24, 0xFB	; 251
     3ec:	80 bf       	out	0x30, r24	; 48
     3ee:	08 95       	ret

000003f0 <main>:
}

int main(void)
{
	init_pin();
     3f0:	0e 94 df 01 	call	0x3be	; 0x3be <init_pin>
	sei();
     3f4:	78 94       	sei
	init_driver();
     3f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     3fa:	87 e7       	ldi	r24, 0x77	; 119
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     40a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <disp_process>
		animation();
     40e:	0e 94 b6 09 	call	0x136c	; 0x136c <animation>
		process_button();
     412:	0e 94 dd 03 	call	0x7ba	; 0x7ba <process_button>
		disp_fast_process();
     416:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <disp_fast_process>
		disp_very_fast_process();
     41a:	0e 94 ab 14 	call	0x2956	; 0x2956 <disp_very_fast_process>
		dcmotor_process(motor_value);
     41e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <motor_value>
     422:	0e 94 f7 05 	call	0xbee	; 0xbee <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     426:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
     42a:	0e 94 c4 10 	call	0x2188	; 0x2188 <servo_process>
		menu_process();
     42e:	0e 94 11 05 	call	0xa22	; 0xa22 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     432:	0e 94 89 0a 	call	0x1512	; 0x1512 <error_event>
		error_led_blink();
     436:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <error_led_blink>
		measure_process();
     43a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <measure_process>
		accumulator_process();
     43e:	0e 94 42 02 	call	0x484	; 0x484 <accumulator_process>
		accum_led_process();
     442:	0e 94 8b 02 	call	0x516	; 0x516 <accum_led_process>
		buzzer_process();
     446:	0e 94 9e 04 	call	0x93c	; 0x93c <buzzer_process>
     44a:	df cf       	rjmp	.-66     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000044c <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_get_filtered_value>
	#endif
    return voltage;
     452:	bc 01       	movw	r22, r24
     454:	66 0f       	add	r22, r22
     456:	77 1f       	adc	r23, r23
     458:	66 0f       	add	r22, r22
     45a:	77 1f       	adc	r23, r23
     45c:	86 0f       	add	r24, r22
     45e:	97 1f       	adc	r25, r23
     460:	bc 01       	movw	r22, r24
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
     46a:	26 e6       	ldi	r18, 0x66	; 102
     46c:	36 e6       	ldi	r19, 0x66	; 102
     46e:	46 eb       	ldi	r20, 0xB6	; 182
     470:	50 e4       	ldi	r21, 0x40	; 64
     472:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e8       	ldi	r20, 0x80	; 128
     47c:	5a e3       	ldi	r21, 0x3A	; 58
     47e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
}
     482:	08 95       	ret

00000484 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     484:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
     488:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
     48c:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
     490:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
     494:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <accumulator_timer.1911>
     498:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <accumulator_timer.1911+0x1>
     49c:	a0 91 bd 02 	lds	r26, 0x02BD	; 0x8002bd <accumulator_timer.1911+0x2>
     4a0:	b0 91 be 02 	lds	r27, 0x02BE	; 0x8002be <accumulator_timer.1911+0x3>
     4a4:	84 17       	cp	r24, r20
     4a6:	95 07       	cpc	r25, r21
     4a8:	a6 07       	cpc	r26, r22
     4aa:	b7 07       	cpc	r27, r23
     4ac:	98 f5       	brcc	.+102    	; 0x514 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     4b4:	89 35       	cpi	r24, 0x59	; 89
     4b6:	22 e0       	ldi	r18, 0x02	; 2
     4b8:	92 07       	cpc	r25, r18
     4ba:	18 f0       	brcs	.+6      	; 0x4c2 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     4c2:	8b 38       	cpi	r24, 0x8B	; 139
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	92 07       	cpc	r25, r18
     4c8:	18 f4       	brcc	.+6      	; 0x4d0 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     4ca:	22 e0       	ldi	r18, 0x02	; 2
     4cc:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     4d0:	8e 35       	cpi	r24, 0x5E	; 94
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	92 07       	cpc	r25, r18
     4d6:	18 f4       	brcc	.+6      	; 0x4de <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     4d8:	23 e0       	ldi	r18, 0x03	; 3
     4da:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     4de:	8c 58       	subi	r24, 0x8C	; 140
     4e0:	91 40       	sbci	r25, 0x01	; 1
     4e2:	8c 3c       	cpi	r24, 0xCC	; 204
     4e4:	91 05       	cpc	r25, r1
     4e6:	10 f4       	brcc	.+4      	; 0x4ec <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     4e8:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     4ec:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
     4f0:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
     4f4:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
     4f8:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
     4fc:	8c 59       	subi	r24, 0x9C	; 156
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	af 4f       	sbci	r26, 0xFF	; 255
     502:	bf 4f       	sbci	r27, 0xFF	; 255
     504:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <accumulator_timer.1911>
     508:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <accumulator_timer.1911+0x1>
     50c:	a0 93 bd 02 	sts	0x02BD, r26	; 0x8002bd <accumulator_timer.1911+0x2>
     510:	b0 93 be 02 	sts	0x02BE, r27	; 0x8002be <accumulator_timer.1911+0x3>
     514:	08 95       	ret

00000516 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     516:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
     51a:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
     51e:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
     522:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
     526:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     52a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     52e:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     532:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     536:	84 17       	cp	r24, r20
     538:	95 07       	cpc	r25, r21
     53a:	a6 07       	cpc	r26, r22
     53c:	b7 07       	cpc	r27, r23
     53e:	08 f0       	brcs	.+2      	; 0x542 <accum_led_process+0x2c>
     540:	86 c0       	rjmp	.+268    	; 0x64e <accum_led_process+0x138>
	{
        switch (accumulator_state)
     542:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <accumulator_state>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	e9 f0       	breq	.+58     	; 0x584 <accum_led_process+0x6e>
     54a:	30 f0       	brcs	.+12     	; 0x558 <accum_led_process+0x42>
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	99 f1       	breq	.+102    	; 0x5b6 <accum_led_process+0xa0>
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	09 f4       	brne	.+2      	; 0x556 <accum_led_process+0x40>
     554:	67 c0       	rjmp	.+206    	; 0x624 <accum_led_process+0x10e>
     556:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     558:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     55a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     55e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     562:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     566:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     56a:	88 53       	subi	r24, 0x38	; 56
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	af 4f       	sbci	r26, 0xFF	; 255
     570:	bf 4f       	sbci	r27, 0xFF	; 255
     572:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <process_timer.1915>
     576:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <process_timer.1915+0x1>
     57a:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <process_timer.1915+0x2>
     57e:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <process_timer.1915+0x3>
            break;
     582:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     584:	98 b3       	in	r25, 0x18	; 24
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	89 27       	eor	r24, r25
     58a:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     58c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     590:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     594:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     598:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     59c:	86 50       	subi	r24, 0x06	; 6
     59e:	9f 4f       	sbci	r25, 0xFF	; 255
     5a0:	af 4f       	sbci	r26, 0xFF	; 255
     5a2:	bf 4f       	sbci	r27, 0xFF	; 255
     5a4:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <process_timer.1915>
     5a8:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <process_timer.1915+0x1>
     5ac:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <process_timer.1915+0x2>
     5b0:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <process_timer.1915+0x3>
            break;
     5b4:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     5b6:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
     5ba:	81 11       	cpse	r24, r1
     5bc:	19 c0       	rjmp	.+50     	; 0x5f0 <accum_led_process+0xda>
            {
                state_led = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
                LED_ACUM_ON;
     5c4:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     5c6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     5ca:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     5ce:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     5d2:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     5d6:	8c 50       	subi	r24, 0x0C	; 12
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	af 4f       	sbci	r26, 0xFF	; 255
     5dc:	bf 4f       	sbci	r27, 0xFF	; 255
     5de:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <process_timer.1915>
     5e2:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <process_timer.1915+0x1>
     5e6:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <process_timer.1915+0x2>
     5ea:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <process_timer.1915+0x3>
     5ee:	08 95       	ret
            }
            else if (state_led == 1)
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	69 f5       	brne	.+90     	; 0x64e <accum_led_process+0x138>
            {
                state_led = 0;
     5f4:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <__data_end>
                LED_ACUM_OFF;
     5f8:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     5fa:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     5fe:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     602:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     606:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     60a:	84 52       	subi	r24, 0x24	; 36
     60c:	9a 4f       	sbci	r25, 0xFA	; 250
     60e:	af 4f       	sbci	r26, 0xFF	; 255
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <process_timer.1915>
     616:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <process_timer.1915+0x1>
     61a:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <process_timer.1915+0x2>
     61e:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <process_timer.1915+0x3>
     622:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     624:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     626:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <process_timer.1915>
     62a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <process_timer.1915+0x1>
     62e:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <process_timer.1915+0x2>
     632:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <process_timer.1915+0x3>
     636:	88 51       	subi	r24, 0x18	; 24
     638:	9c 4f       	sbci	r25, 0xFC	; 252
     63a:	af 4f       	sbci	r26, 0xFF	; 255
     63c:	bf 4f       	sbci	r27, 0xFF	; 255
     63e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <process_timer.1915>
     642:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <process_timer.1915+0x1>
     646:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <process_timer.1915+0x2>
     64a:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <process_timer.1915+0x3>
     64e:	08 95       	ret

00000650 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     650:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     652:	97 b1       	in	r25, 0x07	; 7
     654:	98 7f       	andi	r25, 0xF8	; 248
     656:	87 70       	andi	r24, 0x07	; 7
     658:	89 2b       	or	r24, r25
     65a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     65c:	37 9a       	sbi	0x06, 7	; 6
     65e:	08 95       	ret

00000660 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     660:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     662:	36 99       	sbic	0x06, 6	; 6
     664:	fe cf       	rjmp	.-4      	; 0x662 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     666:	84 b1       	in	r24, 0x04	; 4
     668:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     66a:	08 95       	ret

0000066c <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     66c:	0e 94 28 03 	call	0x650	; 0x650 <adc_setchannel>
	return adc_readsel();
     670:	0e 94 30 03 	call	0x660	; 0x660 <adc_readsel>
}
     674:	08 95       	ret

00000676 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     676:	dc 01       	movw	r26, r24
     678:	16 96       	adiw	r26, 0x06	; 6
     67a:	ed 91       	ld	r30, X+
     67c:	fc 91       	ld	r31, X
     67e:	17 97       	sbiw	r26, 0x07	; 7
     680:	20 81       	ld	r18, Z
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	18 96       	adiw	r26, 0x08	; 8
     688:	0c 90       	ld	r0, X
     68a:	02 c0       	rjmp	.+4      	; 0x690 <read_button+0x1a>
     68c:	f5 95       	asr	r31
     68e:	e7 95       	ror	r30
     690:	0a 94       	dec	r0
     692:	e2 f7       	brpl	.-8      	; 0x68c <read_button+0x16>
     694:	cf 01       	movw	r24, r30
     696:	81 70       	andi	r24, 0x01	; 1
     698:	08 95       	ret

0000069a <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     69a:	e1 ed       	ldi	r30, 0xD1	; 209
     69c:	f4 e0       	ldi	r31, 0x04	; 4
     69e:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     6a4:	14 86       	std	Z+12, r1	; 0x0c
     6a6:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     6a8:	12 86       	std	Z+10, r1	; 0x0a
     6aa:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     6ac:	16 86       	std	Z+14, r1	; 0x0e
     6ae:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     6b0:	26 e3       	ldi	r18, 0x36	; 54
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	37 83       	std	Z+7, r19	; 0x07
     6b6:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     6bc:	e4 ea       	ldi	r30, 0xA4	; 164
     6be:	f4 e0       	ldi	r31, 0x04	; 4
     6c0:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     6c2:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     6c4:	14 86       	std	Z+12, r1	; 0x0c
     6c6:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     6c8:	12 86       	std	Z+10, r1	; 0x0a
     6ca:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     6cc:	16 86       	std	Z+14, r1	; 0x0e
     6ce:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     6d0:	37 83       	std	Z+7, r19	; 0x07
     6d2:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     6d4:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     6d6:	e3 eb       	ldi	r30, 0xB3	; 179
     6d8:	f4 e0       	ldi	r31, 0x04	; 4
     6da:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     6dc:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     6de:	14 86       	std	Z+12, r1	; 0x0c
     6e0:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     6e2:	12 86       	std	Z+10, r1	; 0x0a
     6e4:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     6e6:	16 86       	std	Z+14, r1	; 0x0e
     6e8:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     6ea:	37 83       	std	Z+7, r19	; 0x07
     6ec:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     6ee:	96 e0       	ldi	r25, 0x06	; 6
     6f0:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     6f2:	e1 e9       	ldi	r30, 0x91	; 145
     6f4:	f4 e0       	ldi	r31, 0x04	; 4
     6f6:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     6f8:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     6fa:	14 86       	std	Z+12, r1	; 0x0c
     6fc:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     6fe:	12 86       	std	Z+10, r1	; 0x0a
     700:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     702:	16 86       	std	Z+14, r1	; 0x0e
     704:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     706:	40 e3       	ldi	r20, 0x30	; 48
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	57 83       	std	Z+7, r21	; 0x07
     70c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     712:	e2 e8       	ldi	r30, 0x82	; 130
     714:	f4 e0       	ldi	r31, 0x04	; 4
     716:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     718:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     71a:	14 86       	std	Z+12, r1	; 0x0c
     71c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     71e:	12 86       	std	Z+10, r1	; 0x0a
     720:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     722:	16 86       	std	Z+14, r1	; 0x0e
     724:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     726:	37 83       	std	Z+7, r19	; 0x07
     728:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     72a:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     72c:	e2 ec       	ldi	r30, 0xC2	; 194
     72e:	f4 e0       	ldi	r31, 0x04	; 4
     730:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     732:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     734:	14 86       	std	Z+12, r1	; 0x0c
     736:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     738:	12 86       	std	Z+10, r1	; 0x0a
     73a:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     73c:	16 86       	std	Z+14, r1	; 0x0e
     73e:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     740:	69 e3       	ldi	r22, 0x39	; 57
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	77 83       	std	Z+7, r23	; 0x07
     746:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     748:	a4 e0       	ldi	r26, 0x04	; 4
     74a:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     74c:	e0 ee       	ldi	r30, 0xE0	; 224
     74e:	f4 e0       	ldi	r31, 0x04	; 4
     750:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     752:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     758:	12 86       	std	Z+10, r1	; 0x0a
     75a:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     75c:	16 86       	std	Z+14, r1	; 0x0e
     75e:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     760:	43 e3       	ldi	r20, 0x33	; 51
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	57 83       	std	Z+7, r21	; 0x07
     766:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     768:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     76a:	ef ee       	ldi	r30, 0xEF	; 239
     76c:	f4 e0       	ldi	r31, 0x04	; 4
     76e:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     770:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     772:	14 86       	std	Z+12, r1	; 0x0c
     774:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     776:	12 86       	std	Z+10, r1	; 0x0a
     778:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     77a:	16 86       	std	Z+14, r1	; 0x0e
     77c:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     77e:	37 83       	std	Z+7, r19	; 0x07
     780:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     782:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     784:	e4 e6       	ldi	r30, 0x64	; 100
     786:	f4 e0       	ldi	r31, 0x04	; 4
     788:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     78a:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     78c:	14 86       	std	Z+12, r1	; 0x0c
     78e:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     790:	12 86       	std	Z+10, r1	; 0x0a
     792:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     794:	16 86       	std	Z+14, r1	; 0x0e
     796:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     798:	77 83       	std	Z+7, r23	; 0x07
     79a:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     79c:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     79e:	e3 e7       	ldi	r30, 0x73	; 115
     7a0:	f4 e0       	ldi	r31, 0x04	; 4
     7a2:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     7a4:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     7a6:	14 86       	std	Z+12, r1	; 0x0c
     7a8:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     7aa:	12 86       	std	Z+10, r1	; 0x0a
     7ac:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     7ae:	16 86       	std	Z+14, r1	; 0x0e
     7b0:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     7b2:	57 83       	std	Z+7, r21	; 0x07
     7b4:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     7b6:	10 86       	std	Z+8, r1	; 0x08
     7b8:	08 95       	ret

000007ba <process_button>:
}

void process_button(void)
{
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     7c8:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
     7cc:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
     7d0:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
     7d4:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
     7d8:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <timer_button>
     7dc:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <timer_button+0x1>
     7e0:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <timer_button+0x2>
     7e4:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <timer_button+0x3>
     7e8:	84 17       	cp	r24, r20
     7ea:	95 07       	cpc	r25, r21
     7ec:	a6 07       	cpc	r26, r22
     7ee:	b7 07       	cpc	r27, r23
     7f0:	08 f0       	brcs	.+2      	; 0x7f4 <process_button+0x3a>
     7f2:	85 c0       	rjmp	.+266    	; 0x8fe <__stack+0x9f>
	{
		timer_button = mktime.ms + 20;
     7f4:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
     7f8:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
     7fc:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
     800:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
     804:	44 96       	adiw	r24, 0x14	; 20
     806:	a1 1d       	adc	r26, r1
     808:	b1 1d       	adc	r27, r1
     80a:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <timer_button>
     80e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <timer_button+0x1>
     812:	a0 93 a2 04 	sts	0x04A2, r26	; 0x8004a2 <timer_button+0x2>
     816:	b0 93 a3 04 	sts	0x04A3, r27	; 0x8004a3 <timer_button+0x3>
     81a:	c0 e6       	ldi	r28, 0x60	; 96
     81c:	d0 e0       	ldi	r29, 0x00	; 0
     81e:	0f 2e       	mov	r0, r31
     820:	f4 e7       	ldi	r31, 0x74	; 116
     822:	ef 2e       	mov	r14, r31
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	ff 2e       	mov	r15, r31
     828:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     82a:	dd 24       	eor	r13, r13
     82c:	d3 94       	inc	r13
     82e:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     830:	88 81       	ld	r24, Y
     832:	99 81       	ldd	r25, Y+1	; 0x01
     834:	0e 94 3b 03 	call	0x676	; 0x676 <read_button>
			if(red_val != but_tab[i]->value)
     838:	e8 81       	ld	r30, Y
     83a:	f9 81       	ldd	r31, Y+1	; 0x01
     83c:	95 81       	ldd	r25, Z+5	; 0x05
     83e:	89 17       	cp	r24, r25
     840:	e1 f0       	breq	.+56     	; 0x87a <__stack+0x1b>
			{
				but_tab[i]->value = red_val;
     842:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	61 f4       	brne	.+24     	; 0x860 <__stack+0x1>
     848:	88 81       	ld	r24, Y
     84a:	99 81       	ldd	r25, Y+1	; 0x01
     84c:	dc 01       	movw	r26, r24
     84e:	19 96       	adiw	r26, 0x09	; 9
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	1a 97       	sbiw	r26, 0x0a	; 10
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	09 f4       	brne	.+2      	; 0x85c <process_button+0xa2>
     85a:	41 c0       	rjmp	.+130    	; 0x8de <__stack+0x7f>
				but_tab[i]->rise_callback(but_tab[i]);
     85c:	09 95       	icall
     85e:	3f c0       	rjmp	.+126    	; 0x8de <__stack+0x7f>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     860:	81 11       	cpse	r24, r1
     862:	3d c0       	rjmp	.+122    	; 0x8de <__stack+0x7f>
     864:	88 81       	ld	r24, Y
     866:	99 81       	ldd	r25, Y+1	; 0x01
     868:	dc 01       	movw	r26, r24
     86a:	1b 96       	adiw	r26, 0x0b	; 11
     86c:	ed 91       	ld	r30, X+
     86e:	fc 91       	ld	r31, X
     870:	1c 97       	sbiw	r26, 0x0c	; 12
     872:	30 97       	sbiw	r30, 0x00	; 0
     874:	21 f0       	breq	.+8      	; 0x87e <__stack+0x1f>
				but_tab[i]->fall_callback(but_tab[i]);
     876:	09 95       	icall
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
			}
			//timer
			if (red_val == 0)
     87a:	81 11       	cpse	r24, r1
     87c:	30 c0       	rjmp	.+96     	; 0x8de <__stack+0x7f>
			{
				but_tab[i]->tim_cnt++;
     87e:	d8 01       	movw	r26, r16
     880:	ed 91       	ld	r30, X+
     882:	fc 91       	ld	r31, X
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	a2 81       	ldd	r26, Z+2	; 0x02
     88a:	b3 81       	ldd	r27, Z+3	; 0x03
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	a1 1d       	adc	r26, r1
     890:	b1 1d       	adc	r27, r1
     892:	80 83       	st	Z, r24
     894:	91 83       	std	Z+1, r25	; 0x01
     896:	a2 83       	std	Z+2, r26	; 0x02
     898:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     89a:	d8 01       	movw	r26, r16
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	a2 81       	ldd	r26, Z+2	; 0x02
     8a6:	b3 81       	ldd	r27, Z+3	; 0x03
     8a8:	88 97       	sbiw	r24, 0x28	; 40
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	10 f1       	brcs	.+68     	; 0x8f4 <__stack+0x95>
     8b0:	84 81       	ldd	r24, Z+4	; 0x04
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	f9 f0       	breq	.+62     	; 0x8f4 <__stack+0x95>
				{
					if (but_tab[i]->timer_callback != 0)
     8b6:	05 84       	ldd	r0, Z+13	; 0x0d
     8b8:	f6 85       	ldd	r31, Z+14	; 0x0e
     8ba:	e0 2d       	mov	r30, r0
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	19 f0       	breq	.+6      	; 0x8c6 <__stack+0x67>
					but_tab[i]->timer_callback(&button1);
     8c0:	81 ed       	ldi	r24, 0xD1	; 209
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     8c6:	d8 01       	movw	r26, r16
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	11 97       	sbiw	r26, 0x01	; 1
     8ce:	10 82       	st	Z, r1
     8d0:	11 82       	std	Z+1, r1	; 0x01
     8d2:	12 82       	std	Z+2, r1	; 0x02
     8d4:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     8d6:	ed 91       	ld	r30, X+
     8d8:	fc 91       	ld	r31, X
     8da:	d4 82       	std	Z+4, r13	; 0x04
     8dc:	0b c0       	rjmp	.+22     	; 0x8f4 <__stack+0x95>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     8de:	d8 01       	movw	r26, r16
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	11 97       	sbiw	r26, 0x01	; 1
     8e6:	10 82       	st	Z, r1
     8e8:	11 82       	std	Z+1, r1	; 0x01
     8ea:	12 82       	std	Z+2, r1	; 0x02
     8ec:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     8ee:	ed 91       	ld	r30, X+
     8f0:	fc 91       	ld	r31, X
     8f2:	14 82       	std	Z+4, r1	; 0x04
     8f4:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     8f6:	ce 15       	cp	r28, r14
     8f8:	df 05       	cpc	r29, r15
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__stack+0x9f>
     8fc:	98 cf       	rjmp	.-208    	; 0x82e <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	08 95       	ret

0000090e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     90e:	0e 94 4d 03 	call	0x69a	; 0x69a <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     912:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     914:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     916:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     918:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     91a:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     91c:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     91e:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     920:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     922:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     924:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     926:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     928:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     92a:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     92c:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     92e:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     930:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     932:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     934:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     936:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     938:	a8 9a       	sbi	0x15, 0	; 21
     93a:	08 95       	ret

0000093c <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     93c:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
     940:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
     944:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
     948:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
     94c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <buzzer_timer>
     950:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <buzzer_timer+0x1>
     954:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <buzzer_timer+0x2>
     958:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <buzzer_timer+0x3>
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	a6 07       	cpc	r26, r22
     962:	b7 07       	cpc	r27, r23
     964:	08 f0       	brcs	.+2      	; 0x968 <buzzer_process+0x2c>
     966:	59 c0       	rjmp	.+178    	; 0xa1a <buzzer_process+0xde>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     968:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
     96c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
     970:	95 ff       	sbrs	r25, 5
     972:	37 c0       	rjmp	.+110    	; 0x9e2 <buzzer_process+0xa6>
     974:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <buzzer_state>
     978:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <buzzer_state+0x1>
     97c:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <buzzer_state+0x2>
     980:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <buzzer_state+0x3>
     984:	89 2b       	or	r24, r25
     986:	8a 2b       	or	r24, r26
     988:	8b 2b       	or	r24, r27
     98a:	59 f5       	brne	.+86     	; 0x9e2 <buzzer_process+0xa6>
		{
			ON_BUZZER;
     98c:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     98e:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
     992:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
     996:	9f 7d       	andi	r25, 0xDF	; 223
     998:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
     99c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
			buzzer_state = 1;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <buzzer_state>
     9ac:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <buzzer_state+0x1>
     9b0:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <buzzer_state+0x2>
     9b4:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <buzzer_state+0x3>
			buzzer_timer += 100;
     9b8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <buzzer_timer>
     9bc:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <buzzer_timer+0x1>
     9c0:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <buzzer_timer+0x2>
     9c4:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <buzzer_timer+0x3>
     9c8:	8c 59       	subi	r24, 0x9C	; 156
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	af 4f       	sbci	r26, 0xFF	; 255
     9ce:	bf 4f       	sbci	r27, 0xFF	; 255
     9d0:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <buzzer_timer>
     9d4:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <buzzer_timer+0x1>
     9d8:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <buzzer_timer+0x2>
     9dc:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <buzzer_timer+0x3>
     9e0:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     9e2:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     9e4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <buzzer_state>
     9e8:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <buzzer_state+0x1>
     9ec:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <buzzer_state+0x2>
     9f0:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <buzzer_state+0x3>
			buzzer_timer += 50;
     9f4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <buzzer_timer>
     9f8:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <buzzer_timer+0x1>
     9fc:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <buzzer_timer+0x2>
     a00:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <buzzer_timer+0x3>
     a04:	c2 96       	adiw	r24, 0x32	; 50
     a06:	a1 1d       	adc	r26, r1
     a08:	b1 1d       	adc	r27, r1
     a0a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <buzzer_timer>
     a0e:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <buzzer_timer+0x1>
     a12:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <buzzer_timer+0x2>
     a16:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <buzzer_timer+0x3>
     a1a:	08 95       	ret

00000a1c <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     a1c:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     a1e:	c0 98       	cbi	0x18, 0	; 24
     a20:	08 95       	ret

00000a22 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && state_menu == 1)
     a22:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
     a26:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
     a2a:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
     a2e:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
     a32:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <menu_timer.1995>
     a36:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <menu_timer.1995+0x1>
     a3a:	a0 91 ca 02 	lds	r26, 0x02CA	; 0x8002ca <menu_timer.1995+0x2>
     a3e:	b0 91 cb 02 	lds	r27, 0x02CB	; 0x8002cb <menu_timer.1995+0x3>
     a42:	84 17       	cp	r24, r20
     a44:	95 07       	cpc	r25, r21
     a46:	a6 07       	cpc	r26, r22
     a48:	b7 07       	cpc	r27, r23
     a4a:	08 f0       	brcs	.+2      	; 0xa4e <menu_process+0x2c>
     a4c:	54 c0       	rjmp	.+168    	; 0xaf6 <menu_process+0xd4>
     a4e:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <state_menu>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	09 f0       	breq	.+2      	; 0xa58 <menu_process+0x36>
     a56:	4f c0       	rjmp	.+158    	; 0xaf6 <menu_process+0xd4>
	{
		if (segment1.state == SEG_MENU)
     a58:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
     a5c:	87 30       	cpi	r24, 0x07	; 7
     a5e:	31 f4       	brne	.+12     	; 0xa6c <menu_process+0x4a>
			disp_set_number(&segment1, menu_param.motor_add);
     a60:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <menu_param>
     a64:	81 e1       	ldi	r24, 0x11	; 17
     a66:	95 e0       	ldi	r25, 0x05	; 5
     a68:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
		if (segment2.state == SEG_MENU)
     a6c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
     a70:	87 30       	cpi	r24, 0x07	; 7
     a72:	31 f4       	brne	.+12     	; 0xa80 <menu_process+0x5e>
			disp_set_number(&segment2, menu_param.servo_add);
     a74:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <menu_param+0x1>
     a78:	8c e0       	ldi	r24, 0x0C	; 12
     a7a:	95 e0       	ldi	r25, 0x05	; 5
     a7c:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     a80:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
     a84:	88 30       	cpi	r24, 0x08	; 8
     a86:	49 f5       	brne	.+82     	; 0xada <menu_process+0xb8>
     a88:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
     a8c:	88 30       	cpi	r24, 0x08	; 8
     a8e:	29 f5       	brne	.+74     	; 0xada <menu_process+0xb8>
		{
			menu_timer = 1000 + mktime.ms;
     a90:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
     a94:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
     a98:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
     a9c:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
     aa0:	88 51       	subi	r24, 0x18	; 24
     aa2:	9c 4f       	sbci	r25, 0xFC	; 252
     aa4:	af 4f       	sbci	r26, 0xFF	; 255
     aa6:	bf 4f       	sbci	r27, 0xFF	; 255
     aa8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <menu_timer.1995>
     aac:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <menu_timer.1995+0x1>
     ab0:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <menu_timer.1995+0x2>
     ab4:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <menu_timer.1995+0x3>
			DispD2.value = 's';
     ab8:	83 e7       	ldi	r24, 0x73	; 115
     aba:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <DispD2>
			DispD1.value = 'a';
     abe:	81 e6       	ldi	r24, 0x61	; 97
     ac0:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <DispD1>
			DispD3.value = 'p';
     ac4:	80 e7       	ldi	r24, 0x70	; 112
     ac6:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <DispD3>
			DispD4.value = 0;
     aca:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <DispD4>
			segment1.state = SEG_MENU_OFF;
     ace:	8a e0       	ldi	r24, 0x0A	; 10
     ad0:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     ad4:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
			
			return;
     ad8:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     ada:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
     ade:	8a 30       	cpi	r24, 0x0A	; 10
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <menu_process+0xd4>
     ae2:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	31 f4       	brne	.+12     	; 0xaf6 <menu_process+0xd4>
		{
			segment1.state = SEG_OFF;
     aea:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <segment1+0x4>
			segment2.state = SEG_OFF;
     aee:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <segment2+0x4>
			state_menu = 0;
     af2:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <state_menu>
     af6:	08 95       	ret

00000af8 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     af8:	8e e9       	ldi	r24, 0x9E	; 158
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	95 e0       	ldi	r25, 0x05	; 5
     b08:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <evTime_init>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <motorD>
     b12:	94 98       	cbi	0x12, 4	; 18
     b14:	15 bc       	out	0x25, r1	; 37
     b16:	8f 9a       	sbi	0x11, 7	; 17
     b18:	97 9a       	sbi	0x12, 7	; 18
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	08 95       	ret

00000b20 <dcmotorpwm_deinit>:
     b20:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <motorD>
     b24:	15 bc       	out	0x25, r1	; 37
     b26:	97 9a       	sbi	0x12, 7	; 18
     b28:	94 98       	cbi	0x12, 4	; 18
     b2a:	08 95       	ret

00000b2c <dcmotor_is_on>:
     b2c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <motorD>
     b30:	92 50       	subi	r25, 0x02	; 2
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	93 30       	cpi	r25, 0x03	; 3
     b38:	10 f0       	brcs	.+4      	; 0xb3e <dcmotor_is_on+0x12>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	c9 01       	movw	r24, r18
     b40:	08 95       	ret

00000b42 <dcmotorpwm_stop>:
     b42:	0e 94 96 05 	call	0xb2c	; 0xb2c <dcmotor_is_on>
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	99 f0       	breq	.+38     	; 0xb70 <dcmotorpwm_stop+0x2e>
     b4a:	8c ea       	ldi	r24, 0xAC	; 172
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     b56:	15 bc       	out	0x25, r1	; 37
     b58:	97 9a       	sbi	0x12, 7	; 18
     b5a:	94 98       	cbi	0x12, 4	; 18
     b5c:	e2 e0       	ldi	r30, 0x02	; 2
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	80 81       	ld	r24, Z
     b62:	81 83       	std	Z+1, r24	; 0x01
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 83       	st	Z, r24
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	08 95       	ret

00000b72 <dcmotorpwm_start>:
     b72:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <motorD>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <dcmotorpwm_start+0x3e>
     b7a:	94 9a       	sbi	0x12, 4	; 18
     b7c:	85 b5       	in	r24, 0x25	; 37
     b7e:	80 63       	ori	r24, 0x30	; 48
     b80:	85 bd       	out	0x25, r24	; 37
     b82:	85 b5       	in	r24, 0x25	; 37
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	85 bd       	out	0x25, r24	; 37
     b88:	85 b5       	in	r24, 0x25	; 37
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	85 bd       	out	0x25, r24	; 37
     b8e:	e2 e0       	ldi	r30, 0x02	; 2
     b90:	f5 e0       	ldi	r31, 0x05	; 5
     b92:	80 81       	ld	r24, Z
     b94:	81 83       	std	Z+1, r24	; 0x01
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	80 83       	st	Z, r24
     b9a:	48 ee       	ldi	r20, 0xE8	; 232
     b9c:	53 e0       	ldi	r21, 0x03	; 3
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	95 e0       	ldi	r25, 0x05	; 5
     ba6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	08 95       	ret

00000bb6 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     bb6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <motorD+0x3>
}
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	08 95       	ret

00000bbe <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     bbe:	8a eb       	ldi	r24, 0xBA	; 186
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
	dcmotorpwm_stop();
     bca:	0e 94 a1 05 	call	0xb42	; 0xb42 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <motorD>
}
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	08 95       	ret

00000bda <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     bda:	0e 94 96 05 	call	0xb2c	; 0xb2c <dcmotor_is_on>
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <motorD>
		return 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     bec:	08 95       	ret

00000bee <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     bee:	cf 93       	push	r28
     bf0:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     bf2:	46 e9       	ldi	r20, 0x96	; 150
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	8c ec       	ldi	r24, 0xCC	; 204
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <evTime_process_period>
     c02:	89 2b       	or	r24, r25
     c04:	09 f4       	brne	.+2      	; 0xc08 <dcmotor_process+0x1a>
     c06:	58 c0       	rjmp	.+176    	; 0xcb8 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     c08:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <motorD>
     c0c:	93 30       	cpi	r25, 0x03	; 3
     c0e:	e9 f0       	breq	.+58     	; 0xc4a <dcmotor_process+0x5c>
     c10:	28 f4       	brcc	.+10     	; 0xc1c <dcmotor_process+0x2e>
     c12:	91 30       	cpi	r25, 0x01	; 1
     c14:	b9 f0       	breq	.+46     	; 0xc44 <dcmotor_process+0x56>
     c16:	92 30       	cpi	r25, 0x02	; 2
     c18:	41 f0       	breq	.+16     	; 0xc2a <dcmotor_process+0x3c>
     c1a:	4e c0       	rjmp	.+156    	; 0xcb8 <dcmotor_process+0xca>
     c1c:	94 30       	cpi	r25, 0x04	; 4
     c1e:	09 f4       	brne	.+2      	; 0xc22 <dcmotor_process+0x34>
     c20:	48 c0       	rjmp	.+144    	; 0xcb2 <dcmotor_process+0xc4>
     c22:	95 30       	cpi	r25, 0x05	; 5
     c24:	09 f4       	brne	.+2      	; 0xc28 <dcmotor_process+0x3a>
     c26:	42 c0       	rjmp	.+132    	; 0xcac <dcmotor_process+0xbe>
     c28:	47 c0       	rjmp	.+142    	; 0xcb8 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     c2a:	c0 93 05 05 	sts	0x0505, r28	; 0x800505 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     c2e:	2d ec       	ldi	r18, 0xCD	; 205
     c30:	c2 9f       	mul	r28, r18
     c32:	c0 01       	movw	r24, r0
     c34:	11 24       	eor	r1, r1
     c36:	63 e6       	ldi	r22, 0x63	; 99
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__divmodhi4>
     c3e:	6e 5c       	subi	r22, 0xCE	; 206
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     c40:	63 bd       	out	0x23, r22	; 35
			break;
     c42:	3a c0       	rjmp	.+116    	; 0xcb8 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     c44:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <motorD+0x3>
			break;
     c48:	37 c0       	rjmp	.+110    	; 0xcb8 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     c4a:	c3 33       	cpi	r28, 0x33	; 51
     c4c:	78 f4       	brcc	.+30     	; 0xc6c <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     c4e:	84 e1       	ldi	r24, 0x14	; 20
     c50:	8c 0f       	add	r24, r28
     c52:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     c56:	2d ec       	ldi	r18, 0xCD	; 205
     c58:	82 9f       	mul	r24, r18
     c5a:	c0 01       	movw	r24, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	63 e6       	ldi	r22, 0x63	; 99
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__divmodhi4>
     c66:	6e 5c       	subi	r22, 0xCE	; 206

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     c68:	63 bd       	out	0x23, r22	; 35
     c6a:	26 c0       	rjmp	.+76     	; 0xcb8 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     c6c:	8d ec       	ldi	r24, 0xCD	; 205
     c6e:	8c 0f       	add	r24, r28
     c70:	84 31       	cpi	r24, 0x14	; 20
     c72:	78 f4       	brcc	.+30     	; 0xc92 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     c74:	8f e0       	ldi	r24, 0x0F	; 15
     c76:	8c 0f       	add	r24, r28
     c78:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     c7c:	2d ec       	ldi	r18, 0xCD	; 205
     c7e:	82 9f       	mul	r24, r18
     c80:	c0 01       	movw	r24, r0
     c82:	11 24       	eor	r1, r1
     c84:	63 e6       	ldi	r22, 0x63	; 99
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__divmodhi4>
     c8c:	6e 5c       	subi	r22, 0xCE	; 206
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     c8e:	63 bd       	out	0x23, r22	; 35
     c90:	13 c0       	rjmp	.+38     	; 0xcb8 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     c92:	c0 93 05 05 	sts	0x0505, r28	; 0x800505 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     c96:	2d ec       	ldi	r18, 0xCD	; 205
     c98:	c2 9f       	mul	r28, r18
     c9a:	c0 01       	movw	r24, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	63 e6       	ldi	r22, 0x63	; 99
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__divmodhi4>
     ca6:	6e 5c       	subi	r22, 0xCE	; 206
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     ca8:	63 bd       	out	0x23, r22	; 35
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
     cac:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     cae:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     cbc:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     cbe:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     cc0:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     cc2:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     cc4:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     cc6:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     cc8:	af 9a       	sbi	0x15, 7	; 21
     cca:	08 95       	ret

00000ccc <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     ccc:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     cce:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     cd2:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     cd4:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     cd8:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     cda:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     cde:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     ce0:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <DispD4+0x1>
     ce4:	08 95       	ret

00000ce6 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     ce6:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
     ce8:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
     cea:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
     cec:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
     cee:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
     cf0:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
     cf2:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
     cf4:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
     cf6:	ea e1       	ldi	r30, 0x1A	; 26
     cf8:	f5 e0       	ldi	r31, 0x05	; 5
     cfa:	88 e1       	ldi	r24, 0x18	; 24
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
     d02:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
     d04:	24 e2       	ldi	r18, 0x24	; 36
     d06:	35 e0       	ldi	r19, 0x05	; 5
     d08:	33 83       	std	Z+3, r19	; 0x03
     d0a:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
     d0c:	a1 e1       	ldi	r26, 0x11	; 17
     d0e:	b5 e0       	ldi	r27, 0x05	; 5
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	3c 93       	st	X, r19
     d14:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	9c 93       	st	X, r25
     d1a:	8e 93       	st	-X, r24
     d1c:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
     d1e:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
     d20:	26 e1       	ldi	r18, 0x16	; 22
     d22:	35 e0       	ldi	r19, 0x05	; 5
     d24:	35 83       	std	Z+5, r19	; 0x05
     d26:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
     d28:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
     d2a:	82 e2       	ldi	r24, 0x22	; 34
     d2c:	95 e0       	ldi	r25, 0x05	; 5
     d2e:	97 83       	std	Z+7, r25	; 0x07
     d30:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
     d32:	ec e0       	ldi	r30, 0x0C	; 12
     d34:	f5 e0       	ldi	r31, 0x05	; 5
     d36:	31 83       	std	Z+1, r19	; 0x01
     d38:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
     d3a:	93 83       	std	Z+3, r25	; 0x03
     d3c:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
     d3e:	0e 94 66 06 	call	0xccc	; 0xccc <off_all_displays>
	clear_display();
     d42:	0e 94 5e 06 	call	0xcbc	; 0xcbc <clear_display>
     d46:	08 95       	ret

00000d48 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
	if (DispD->value != displaying_value)
     d4c:	fc 01       	movw	r30, r24
     d4e:	30 81       	ld	r19, Z
     d50:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
     d54:	32 17       	cp	r19, r18
     d56:	09 f4       	brne	.+2      	; 0xd5a <display_set_value+0x12>
     d58:	95 c0       	rjmp	.+298    	; 0xe84 <display_set_value+0x13c>
     d5a:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
     d5c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <clear_display>
		switch(DispD->value)
     d60:	e8 81       	ld	r30, Y
     d62:	8e 2f       	mov	r24, r30
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	91 05       	cpc	r25, r1
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <display_set_value+0x26>
     d6c:	88 c0       	rjmp	.+272    	; 0xe7e <display_set_value+0x136>
     d6e:	fc 01       	movw	r30, r24
     d70:	e6 5d       	subi	r30, 0xD6	; 214
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
     d78:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     d7a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     d7c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     d7e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d80:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d82:	aa 98       	cbi	0x15, 2	; 21
			break;
     d84:	7c c0       	rjmp	.+248    	; 0xe7e <display_set_value+0x136>
			case 1:
			LED_ON_B;
     d86:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     d88:	dd 98       	cbi	0x1b, 5	; 27
			break;
     d8a:	79 c0       	rjmp	.+242    	; 0xe7e <display_set_value+0x136>
			case 2:
			LED_ON_A;
     d8c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     d8e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     d90:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
     d92:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
     d94:	df 98       	cbi	0x1b, 7	; 27
			break;
     d96:	73 c0       	rjmp	.+230    	; 0xe7e <display_set_value+0x136>
			case 3:
			LED_ON_A;
     d98:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     d9a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     d9c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     d9e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     da0:	df 98       	cbi	0x1b, 7	; 27
			break;
     da2:	6d c0       	rjmp	.+218    	; 0xe7e <display_set_value+0x136>
			case 4:
			LED_ON_F;
     da4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     da6:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
     da8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     daa:	dd 98       	cbi	0x1b, 5	; 27
			break;
     dac:	68 c0       	rjmp	.+208    	; 0xe7e <display_set_value+0x136>
			case 5:
			LED_ON_A;
     dae:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     db0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     db2:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     db4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     db6:	df 98       	cbi	0x1b, 7	; 27
			break;
     db8:	62 c0       	rjmp	.+196    	; 0xe7e <display_set_value+0x136>
			case 6:
			LED_ON_A;
     dba:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     dbc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     dbe:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     dc0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     dc2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     dc4:	de 98       	cbi	0x1b, 6	; 27
			break;
     dc6:	5b c0       	rjmp	.+182    	; 0xe7e <display_set_value+0x136>
			case 7:
			LED_ON_A;
     dc8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     dca:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     dcc:	dd 98       	cbi	0x1b, 5	; 27
			break;
     dce:	57 c0       	rjmp	.+174    	; 0xe7e <display_set_value+0x136>
			case 8:
			LED_ON_A;
     dd0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     dd2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     dd4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     dd6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     dd8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     dda:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     ddc:	af 98       	cbi	0x15, 7	; 21
			break;
     dde:	4f c0       	rjmp	.+158    	; 0xe7e <display_set_value+0x136>
			case 9:
			LED_ON_A;
     de0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     de2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     de4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     de6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     de8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     dea:	af 98       	cbi	0x15, 7	; 21
			break;
     dec:	48 c0       	rjmp	.+144    	; 0xe7e <display_set_value+0x136>
			case 'a':
			LED_ON_A;
     dee:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     df0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     df2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
     df4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     df6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     df8:	af 98       	cbi	0x15, 7	; 21
			break;
     dfa:	41 c0       	rjmp	.+130    	; 0xe7e <display_set_value+0x136>
			case 'b':
			LED_ON_C;
     dfc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     dfe:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e00:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e02:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     e04:	af 98       	cbi	0x15, 7	; 21
			break;
     e06:	3b c0       	rjmp	.+118    	; 0xe7e <display_set_value+0x136>
			case 'c':
			LED_ON_A;
     e08:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     e0a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e0c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e0e:	aa 98       	cbi	0x15, 2	; 21
			break;
     e10:	36 c0       	rjmp	.+108    	; 0xe7e <display_set_value+0x136>
			case 'd':
			LED_ON_B;
     e12:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     e14:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     e16:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e18:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     e1a:	af 98       	cbi	0x15, 7	; 21
			break;
     e1c:	30 c0       	rjmp	.+96     	; 0xe7e <display_set_value+0x136>
			case 'e':
			LED_ON_A;
     e1e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     e20:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e22:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e24:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     e26:	af 98       	cbi	0x15, 7	; 21
			break;
     e28:	2a c0       	rjmp	.+84     	; 0xe7e <display_set_value+0x136>
			case 'f':
			LED_ON_A;
     e2a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
     e2c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e2e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     e30:	af 98       	cbi	0x15, 7	; 21
			break;
     e32:	25 c0       	rjmp	.+74     	; 0xe7e <display_set_value+0x136>
			case 'r':
			LED_ON_E;
     e34:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     e36:	af 98       	cbi	0x15, 7	; 21
			break;
     e38:	22 c0       	rjmp	.+68     	; 0xe7e <display_set_value+0x136>
			case 'o':
			LED_ON_C;
     e3a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     e3c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e3e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     e40:	af 98       	cbi	0x15, 7	; 21
			break;
     e42:	1d c0       	rjmp	.+58     	; 0xe7e <display_set_value+0x136>
			case 'p':
			LED_ON_A;
     e44:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     e46:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
     e48:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e4a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     e4c:	af 98       	cbi	0x15, 7	; 21
			break;
     e4e:	17 c0       	rjmp	.+46     	; 0xe7e <display_set_value+0x136>
			case 's':
			LED_ON_A;
     e50:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
     e52:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     e54:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     e56:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     e58:	af 98       	cbi	0x15, 7	; 21
			break;
     e5a:	11 c0       	rjmp	.+34     	; 0xe7e <display_set_value+0x136>
			case 'l':
			LED_ON_D;
     e5c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     e5e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     e60:	aa 98       	cbi	0x15, 2	; 21
			break;
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
     e64:	af 98       	cbi	0x15, 7	; 21
			break;
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <display_set_value+0x136>
			case 254:
			LED_ON_F;
     e68:	aa 98       	cbi	0x15, 2	; 21
			break;
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <display_set_value+0x136>
			case 253:
			LED_ON_E;
     e6c:	de 98       	cbi	0x1b, 6	; 27
			break;
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <display_set_value+0x136>
			case 252:
			LED_ON_D;
     e70:	df 98       	cbi	0x1b, 7	; 27
			break;
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <display_set_value+0x136>
			case 251:
			LED_ON_C;
     e74:	dd 98       	cbi	0x1b, 5	; 27
			break;
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <display_set_value+0x136>
			case 250:
			LED_ON_B;
     e78:	ad 98       	cbi	0x15, 5	; 21
			break;
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <display_set_value+0x136>
			case 249:
			LED_ON_A;
     e7c:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
     e7e:	88 81       	ld	r24, Y
     e80:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <on_display>:
void on_display(disp_drv *DispD)
{
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
	off_all_displays();
     e90:	0e 94 66 06 	call	0xccc	; 0xccc <off_all_displays>
	display_set_value(DispD);
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 a4 06 	call	0xd48	; 0xd48 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	c8 31       	cpi	r28, 0x18	; 24
     e9e:	d8 07       	cpc	r29, r24
     ea0:	29 f4       	brne	.+10     	; 0xeac <on_display+0x22>
	{
		LED_ON_DISP1;
     ea2:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <DispD1+0x1>
     eaa:	19 c0       	rjmp	.+50     	; 0xede <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	c4 32       	cpi	r28, 0x24	; 36
     eb0:	d8 07       	cpc	r29, r24
     eb2:	29 f4       	brne	.+10     	; 0xebe <on_display+0x34>
	{
		LED_ON_DISP2;
     eb4:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <DispD2+0x1>
     ebc:	10 c0       	rjmp	.+32     	; 0xede <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	c6 31       	cpi	r28, 0x16	; 22
     ec2:	d8 07       	cpc	r29, r24
     ec4:	29 f4       	brne	.+10     	; 0xed0 <on_display+0x46>
	{
		LED_ON_DISP3;
     ec6:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <DispD3+0x1>
     ece:	07 c0       	rjmp	.+14     	; 0xede <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
     ed0:	c2 52       	subi	r28, 0x22	; 34
     ed2:	d5 40       	sbci	r29, 0x05	; 5
     ed4:	21 f4       	brne	.+8      	; 0xede <on_display+0x54>
	{
		LED_ON_DISP4;
     ed6:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <DispD4+0x1>
	}
	#endif
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
     ef0:	c0 81       	ld	r28, Z
     ef2:	d1 81       	ldd	r29, Z+1	; 0x01
     ef4:	21 96       	adiw	r28, 0x01	; 1
     ef6:	d1 83       	std	Z+1, r29	; 0x01
     ef8:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
     efa:	9e 01       	movw	r18, r28
     efc:	ad ec       	ldi	r26, 0xCD	; 205
     efe:	bc ec       	ldi	r27, 0xCC	; 204
     f00:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__umulhisi3>
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	9c 01       	movw	r18, r24
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	82 0f       	add	r24, r18
     f24:	93 1f       	adc	r25, r19
     f26:	c8 17       	cp	r28, r24
     f28:	d9 07       	cpc	r29, r25
     f2a:	01 f5       	brne	.+64     	; 0xf6c <display_process+0x88>
     f2c:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
     f2e:	10 91 d1 02 	lds	r17, 0x02D1	; 0x8002d1 <iteration>
     f32:	14 30       	cpi	r17, 0x04	; 4
     f34:	58 f4       	brcc	.+22     	; 0xf4c <display_process+0x68>
			on_display(disp_tab[iteration]);
     f36:	e1 2f       	mov	r30, r17
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	e6 5e       	subi	r30, 0xE6	; 230
     f40:	fa 4f       	sbci	r31, 0xFA	; 250
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	0e 94 45 07 	call	0xe8a	; 0xe8a <on_display>
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <display_process+0x6c>
		else
			off_all_displays();
     f4c:	0e 94 66 06 	call	0xccc	; 0xccc <off_all_displays>
		iteration++;
     f50:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     f52:	15 30       	cpi	r17, 0x05	; 5
     f54:	19 f0       	breq	.+6      	; 0xf5c <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
     f56:	10 93 d1 02 	sts	0x02D1, r17	; 0x8002d1 <iteration>
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     f5c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
     f60:	c0 39       	cpi	r28, 0x90	; 144
     f62:	d1 40       	sbci	r29, 0x01	; 1
     f64:	19 f4       	brne	.+6      	; 0xf6c <display_process+0x88>
     f66:	f7 01       	movw	r30, r14
     f68:	11 82       	std	Z+1, r1	; 0x01
     f6a:	10 82       	st	Z, r1
	}
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
     f78:	fc 01       	movw	r30, r24
	if (number >= 100) return;
     f7a:	64 36       	cpi	r22, 0x64	; 100
     f7c:	f8 f4       	brcc	.+62     	; 0xfbc <disp_set_number+0x44>
	else if (number == 0)
     f7e:	61 11       	cpse	r22, r1
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
     f82:	a0 81       	ld	r26, Z
     f84:	b1 81       	ldd	r27, Z+1	; 0x01
     f86:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
     f88:	02 80       	ldd	r0, Z+2	; 0x02
     f8a:	f3 81       	ldd	r31, Z+3	; 0x03
     f8c:	e0 2d       	mov	r30, r0
     f8e:	10 82       	st	Z, r1
     f90:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
     f92:	a0 81       	ld	r26, Z
     f94:	b1 81       	ldd	r27, Z+1	; 0x01
     f96:	9d ec       	ldi	r25, 0xCD	; 205
     f98:	69 9f       	mul	r22, r25
     f9a:	91 2d       	mov	r25, r1
     f9c:	11 24       	eor	r1, r1
     f9e:	96 95       	lsr	r25
     fa0:	96 95       	lsr	r25
     fa2:	96 95       	lsr	r25
     fa4:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
     fa6:	02 80       	ldd	r0, Z+2	; 0x02
     fa8:	f3 81       	ldd	r31, Z+3	; 0x03
     faa:	e0 2d       	mov	r30, r0
     fac:	89 2f       	mov	r24, r25
     fae:	88 0f       	add	r24, r24
     fb0:	98 2f       	mov	r25, r24
     fb2:	99 0f       	add	r25, r25
     fb4:	99 0f       	add	r25, r25
     fb6:	89 0f       	add	r24, r25
     fb8:	68 1b       	sub	r22, r24
     fba:	60 83       	st	Z, r22
     fbc:	08 95       	ret

00000fbe <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
     fbe:	fc 01       	movw	r30, r24
     fc0:	60 83       	st	Z, r22
     fc2:	08 95       	ret

00000fc4 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <dip_set_value+0x12>
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <dip_set_value+0xc>
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	39 f0       	breq	.+14     	; 0xfdc <dip_set_value+0x18>
     fce:	08 95       	ret
     fd0:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <motor_disp_value>
     fd4:	08 95       	ret
     fd6:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <servo_disp_value>
     fda:	08 95       	ret
     fdc:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <servo_disp_value>
     fe0:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <motor_disp_value>
     fe4:	08 95       	ret

00000fe6 <disp_get_state>:
     fe6:	88 23       	and	r24, r24
     fe8:	19 f0       	breq	.+6      	; 0xff0 <disp_get_state+0xa>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	29 f0       	breq	.+10     	; 0xff8 <disp_get_state+0x12>
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <disp_get_state+0x1a>
     ff0:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	08 95       	ret
     ff8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	08 95       	ret
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	08 95       	ret

00001006 <disp_disable_voltage>:
    1006:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    100a:	86 30       	cpi	r24, 0x06	; 6
    100c:	21 f4       	brne	.+8      	; 0x1016 <disp_disable_voltage+0x10>
    100e:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <disp1_last_state>
    1012:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
    1016:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    101a:	86 30       	cpi	r24, 0x06	; 6
    101c:	21 f4       	brne	.+8      	; 0x1026 <disp_disable_voltage+0x20>
    101e:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <disp2_last_state>
    1022:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
    1026:	08 95       	ret

00001028 <disp_set_state>:
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	a1 f0       	breq	.+40     	; 0x1054 <disp_set_state+0x2c>
    102c:	18 f0       	brcs	.+6      	; 0x1034 <disp_set_state+0xc>
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	09 f1       	breq	.+66     	; 0x1074 <disp_set_state+0x4c>
    1032:	08 95       	ret
    1034:	66 30       	cpi	r22, 0x06	; 6
    1036:	21 f4       	brne	.+8      	; 0x1040 <disp_set_state+0x18>
    1038:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    103c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <disp1_last_state>
    1040:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    1044:	86 30       	cpi	r24, 0x06	; 6
    1046:	19 f4       	brne	.+6      	; 0x104e <disp_set_state+0x26>
    1048:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <disp1_last_state>
    104c:	08 95       	ret
    104e:	60 93 15 05 	sts	0x0515, r22	; 0x800515 <segment1+0x4>
    1052:	08 95       	ret
    1054:	66 30       	cpi	r22, 0x06	; 6
    1056:	21 f4       	brne	.+8      	; 0x1060 <disp_set_state+0x38>
    1058:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    105c:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <disp2_last_state>
    1060:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    1064:	86 30       	cpi	r24, 0x06	; 6
    1066:	19 f4       	brne	.+6      	; 0x106e <disp_set_state+0x46>
    1068:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <disp2_last_state>
    106c:	08 95       	ret
    106e:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <segment2+0x4>
    1072:	08 95       	ret
    1074:	66 30       	cpi	r22, 0x06	; 6
    1076:	41 f4       	brne	.+16     	; 0x1088 <disp_set_state+0x60>
    1078:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    107c:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <disp1_last_state>
    1080:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    1084:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <disp2_last_state>
    1088:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    108c:	86 30       	cpi	r24, 0x06	; 6
    108e:	29 f4       	brne	.+10     	; 0x109a <disp_set_state+0x72>
    1090:	60 93 27 05 	sts	0x0527, r22	; 0x800527 <disp2_last_state>
    1094:	60 93 26 05 	sts	0x0526, r22	; 0x800526 <disp1_last_state>
    1098:	08 95       	ret
    109a:	60 93 15 05 	sts	0x0515, r22	; 0x800515 <segment1+0x4>
    109e:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <segment2+0x4>
    10a2:	08 95       	ret

000010a4 <display_set_error>:
    10a4:	95 e0       	ldi	r25, 0x05	; 5
    10a6:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <segment1+0x4>
    10aa:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <segment2+0x4>
    10ae:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <error_reason>
    10b2:	08 95       	ret

000010b4 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    10b4:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
    10b8:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
    10bc:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
    10c0:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
    10c4:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <timer_disp_process.1974>
    10c8:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <timer_disp_process.1974+0x1>
    10cc:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <timer_disp_process.1974+0x2>
    10d0:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <timer_disp_process.1974+0x3>
    10d4:	48 17       	cp	r20, r24
    10d6:	59 07       	cpc	r21, r25
    10d8:	6a 07       	cpc	r22, r26
    10da:	7b 07       	cpc	r23, r27
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <disp_process+0x2c>
    10de:	26 c1       	rjmp	.+588    	; 0x132c <disp_process+0x278>
	{
        
        switch(segment1.state)
    10e0:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	09 f4       	brne	.+2      	; 0x10ea <disp_process+0x36>
    10e8:	59 c0       	rjmp	.+178    	; 0x119c <disp_process+0xe8>
    10ea:	30 f4       	brcc	.+12     	; 0x10f8 <disp_process+0x44>
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <disp_process+0x3e>
    10f0:	87 c0       	rjmp	.+270    	; 0x1200 <disp_process+0x14c>
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	39 f1       	breq	.+78     	; 0x1144 <disp_process+0x90>
    10f6:	8e c0       	rjmp	.+284    	; 0x1214 <disp_process+0x160>
    10f8:	85 30       	cpi	r24, 0x05	; 5
    10fa:	09 f4       	brne	.+2      	; 0x10fe <disp_process+0x4a>
    10fc:	74 c0       	rjmp	.+232    	; 0x11e6 <disp_process+0x132>
    10fe:	48 f1       	brcs	.+82     	; 0x1152 <disp_process+0x9e>
    1100:	86 30       	cpi	r24, 0x06	; 6
    1102:	09 f0       	breq	.+2      	; 0x1106 <disp_process+0x52>
    1104:	87 c0       	rjmp	.+270    	; 0x1214 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    1106:	0e 94 26 02 	call	0x44c	; 0x44c <accum_get_voltage>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	48 ec       	ldi	r20, 0xC8	; 200
    1110:	52 e4       	ldi	r21, 0x42	; 66
    1112:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    1116:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__fixsfsi>
    111a:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <voltage+0x1>
    111e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <voltage>
            disp_set_number(&segment1, voltage/100);
    1122:	9b 01       	movw	r18, r22
    1124:	36 95       	lsr	r19
    1126:	27 95       	ror	r18
    1128:	36 95       	lsr	r19
    112a:	27 95       	ror	r18
    112c:	ab e7       	ldi	r26, 0x7B	; 123
    112e:	b4 e1       	ldi	r27, 0x14	; 20
    1130:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__umulhisi3>
    1134:	96 95       	lsr	r25
    1136:	87 95       	ror	r24
    1138:	68 2f       	mov	r22, r24
    113a:	81 e1       	ldi	r24, 0x11	; 17
    113c:	95 e0       	ldi	r25, 0x05	; 5
    113e:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
            break;
    1142:	68 c0       	rjmp	.+208    	; 0x1214 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1144:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <motor_disp_value>
    1148:	81 e1       	ldi	r24, 0x11	; 17
    114a:	95 e0       	ldi	r25, 0x05	; 5
    114c:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
            break;
    1150:	61 c0       	rjmp	.+194    	; 0x1214 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1152:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	31 f0       	breq	.+12     	; 0x1166 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1160:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
                break;
    1164:	57 c0       	rjmp	.+174    	; 0x1214 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1166:	48 51       	subi	r20, 0x18	; 24
    1168:	5c 4f       	sbci	r21, 0xFC	; 252
    116a:	6f 4f       	sbci	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <timer_disp_process.1974>
    1172:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <timer_disp_process.1974+0x1>
    1176:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <timer_disp_process.1974+0x2>
    117a:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <timer_disp_process.1974+0x3>
			DispD2.value = 's';
    117e:	83 e7       	ldi	r24, 0x73	; 115
    1180:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <DispD2>
			DispD1.value = 'a';
    1184:	81 e6       	ldi	r24, 0x61	; 97
    1186:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <DispD1>
			DispD3.value = 'p';
    118a:	80 e7       	ldi	r24, 0x70	; 112
    118c:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <DispD3>
			segment1.state = SEG_VALUE;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1196:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
			return;
    119a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    119c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    11aa:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
                break;
    11ae:	32 c0       	rjmp	.+100    	; 0x1214 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    11b0:	48 51       	subi	r20, 0x18	; 24
    11b2:	5c 4f       	sbci	r21, 0xFC	; 252
    11b4:	6f 4f       	sbci	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <timer_disp_process.1974>
    11bc:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <timer_disp_process.1974+0x1>
    11c0:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <timer_disp_process.1974+0x2>
    11c4:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
    11c8:	8c e6       	ldi	r24, 0x6C	; 108
    11ca:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <DispD2>
			DispD1.value = 'o';
    11ce:	8f e6       	ldi	r24, 0x6F	; 111
    11d0:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <DispD1>
			DispD3.value = 'p';
    11d4:	80 e7       	ldi	r24, 0x70	; 112
    11d6:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <DispD3>
			segment1.state = SEG_VALUE;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <segment1+0x4>
			segment2.state = SEG_VALUE;
    11e0:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <segment2+0x4>
            break;
    11e4:	17 c0       	rjmp	.+46     	; 0x1214 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    11e6:	85 e6       	ldi	r24, 0x65	; 101
    11e8:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <DispD2>
			DispD1.value = 'r';
    11ec:	82 e7       	ldi	r24, 0x72	; 114
    11ee:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <DispD1>
			disp_set_number(&segment2, error_reason);
    11f2:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <error_reason>
    11f6:	8c e0       	ldi	r24, 0x0C	; 12
    11f8:	95 e0       	ldi	r25, 0x05	; 5
    11fa:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
            break;
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1200:	68 ef       	ldi	r22, 0xF8	; 248
    1202:	88 e1       	ldi	r24, 0x18	; 24
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    120a:	68 ef       	ldi	r22, 0xF8	; 248
    120c:	84 e2       	ldi	r24, 0x24	; 36
    120e:	95 e0       	ldi	r25, 0x05	; 5
    1210:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1214:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	19 f1       	breq	.+70     	; 0x1262 <disp_process+0x1ae>
    121c:	48 f1       	brcs	.+82     	; 0x1270 <disp_process+0x1bc>
    121e:	86 30       	cpi	r24, 0x06	; 6
    1220:	19 f0       	breq	.+6      	; 0x1228 <disp_process+0x174>
    1222:	8d 30       	cpi	r24, 0x0D	; 13
    1224:	81 f1       	breq	.+96     	; 0x1286 <disp_process+0x1d2>
    1226:	6f c0       	rjmp	.+222    	; 0x1306 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1228:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <voltage>
    122c:	50 91 e6 02 	lds	r21, 0x02E6	; 0x8002e6 <voltage+0x1>
    1230:	9a 01       	movw	r18, r20
    1232:	36 95       	lsr	r19
    1234:	27 95       	ror	r18
    1236:	36 95       	lsr	r19
    1238:	27 95       	ror	r18
    123a:	ab e7       	ldi	r26, 0x7B	; 123
    123c:	b4 e1       	ldi	r27, 0x14	; 20
    123e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__umulhisi3>
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	64 e6       	ldi	r22, 0x64	; 100
    1248:	68 9f       	mul	r22, r24
    124a:	90 01       	movw	r18, r0
    124c:	69 9f       	mul	r22, r25
    124e:	30 0d       	add	r19, r0
    1250:	11 24       	eor	r1, r1
    1252:	ba 01       	movw	r22, r20
    1254:	62 1b       	sub	r22, r18
    1256:	73 0b       	sbc	r23, r19
    1258:	8c e0       	ldi	r24, 0x0C	; 12
    125a:	95 e0       	ldi	r25, 0x05	; 5
    125c:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
            break;
    1260:	52 c0       	rjmp	.+164    	; 0x1306 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1262:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <servo_disp_value>
    1266:	8c e0       	ldi	r24, 0x0C	; 12
    1268:	95 e0       	ldi	r25, 0x05	; 5
    126a:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
            break;
    126e:	4b c0       	rjmp	.+150    	; 0x1306 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1270:	68 ef       	ldi	r22, 0xF8	; 248
    1272:	86 e1       	ldi	r24, 0x16	; 22
    1274:	95 e0       	ldi	r25, 0x05	; 5
    1276:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    127a:	68 ef       	ldi	r22, 0xF8	; 248
    127c:	82 e2       	ldi	r24, 0x22	; 34
    127e:	95 e0       	ldi	r25, 0x05	; 5
    1280:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
            break;
    1284:	40 c0       	rjmp	.+128    	; 0x1306 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1286:	44 ef       	ldi	r20, 0xF4	; 244
    1288:	51 e0       	ldi	r21, 0x01	; 1
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 ee       	ldi	r24, 0xE0	; 224
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <evTime_process_period>
    1296:	89 2b       	or	r24, r25
    1298:	b1 f1       	breq	.+108    	; 0x1306 <disp_process+0x252>
			{
				if (blink_state == 0)
    129a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <blink_state>
    129e:	81 11       	cpse	r24, r1
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <disp_process+0x20a>
				{
					blink_state = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    12a8:	67 ef       	ldi	r22, 0xF7	; 247
    12aa:	86 e1       	ldi	r24, 0x16	; 22
    12ac:	95 e0       	ldi	r25, 0x05	; 5
    12ae:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    12b2:	67 ef       	ldi	r22, 0xF7	; 247
    12b4:	82 e2       	ldi	r24, 0x22	; 34
    12b6:	95 e0       	ldi	r25, 0x05	; 5
    12b8:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
    12bc:	24 c0       	rjmp	.+72     	; 0x1306 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    12be:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <blink_state>
					if (blink_cnt == 0) 
    12c2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <blink_cnt>
    12c6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <blink_cnt+0x1>
    12ca:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <blink_cnt+0x2>
    12ce:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <blink_cnt+0x3>
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	a1 05       	cpc	r26, r1
    12d6:	b1 05       	cpc	r27, r1
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
						break;
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <disp_process+0x252>
					}
					blink_cnt--;
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	a1 09       	sbc	r26, r1
    12e8:	b1 09       	sbc	r27, r1
    12ea:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <blink_cnt>
    12ee:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <blink_cnt+0x1>
    12f2:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <blink_cnt+0x2>
    12f6:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    12fa:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <second_disp_blink_val>
    12fe:	8c e0       	ldi	r24, 0x0C	; 12
    1300:	95 e0       	ldi	r25, 0x05	; 5
    1302:	0e 94 bc 07 	call	0xf78	; 0xf78 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    1306:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <timer_disp_process.1974>
    130a:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <timer_disp_process.1974+0x1>
    130e:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <timer_disp_process.1974+0x2>
    1312:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <timer_disp_process.1974+0x3>
    1316:	c2 96       	adiw	r24, 0x32	; 50
    1318:	a1 1d       	adc	r26, r1
    131a:	b1 1d       	adc	r27, r1
    131c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <timer_disp_process.1974>
    1320:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <timer_disp_process.1974+0x1>
    1324:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <timer_disp_process.1974+0x2>
    1328:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <timer_disp_process.1974+0x3>
    132c:	08 95       	ret

0000132e <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1332:	00 91 39 05 	lds	r16, 0x0539	; 0x800539 <mktime+0x2>
    1336:	10 91 3a 05 	lds	r17, 0x053A	; 0x80053a <mktime+0x3>
    133a:	20 91 3b 05 	lds	r18, 0x053B	; 0x80053b <mktime+0x4>
    133e:	30 91 3c 05 	lds	r19, 0x053C	; 0x80053c <mktime+0x5>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	80 0f       	add	r24, r16
    1348:	91 1f       	adc	r25, r17
    134a:	a2 1f       	adc	r26, r18
    134c:	b3 1f       	adc	r27, r19
    134e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <animation_time>
    1352:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <animation_time+0x1>
    1356:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <animation_time+0x2>
    135a:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	84 2f       	mov	r24, r20
    1362:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
}
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    136c:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	29 f0       	breq	.+10     	; 0x137e <animation+0x12>
    1374:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	09 f0       	breq	.+2      	; 0x137e <animation+0x12>
    137c:	78 c0       	rjmp	.+240    	; 0x146e <animation+0x102>
    137e:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    1382:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    1386:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    138a:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    138e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <timer_anim.1994>
    1392:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <timer_anim.1994+0x1>
    1396:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <timer_anim.1994+0x2>
    139a:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <timer_anim.1994+0x3>
    139e:	84 17       	cp	r24, r20
    13a0:	95 07       	cpc	r25, r21
    13a2:	a6 07       	cpc	r26, r22
    13a4:	b7 07       	cpc	r27, r23
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <animation+0x3e>
    13a8:	62 c0       	rjmp	.+196    	; 0x146e <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    13aa:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
    13ae:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
    13b2:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
    13b6:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
    13ba:	81 55       	subi	r24, 0x51	; 81
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	af 4f       	sbci	r26, 0xFF	; 255
    13c0:	bf 4f       	sbci	r27, 0xFF	; 255
    13c2:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <timer_anim.1994>
    13c6:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <timer_anim.1994+0x1>
    13ca:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <timer_anim.1994+0x2>
    13ce:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    13d2:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <segment1+0x4>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	61 f4       	brne	.+24     	; 0x13f2 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    13da:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    13de:	88 e1       	ldi	r24, 0x18	; 24
    13e0:	95 e0       	ldi	r25, 0x05	; 5
    13e2:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    13e6:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    13ea:	84 e2       	ldi	r24, 0x24	; 36
    13ec:	95 e0       	ldi	r25, 0x05	; 5
    13ee:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    13f2:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <segment2+0x4>
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	61 f4       	brne	.+24     	; 0x1412 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    13fa:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    13fe:	86 e1       	ldi	r24, 0x16	; 22
    1400:	95 e0       	ldi	r25, 0x05	; 5
    1402:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    1406:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    140a:	82 e2       	ldi	r24, 0x22	; 34
    140c:	95 e0       	ldi	r25, 0x05	; 5
    140e:	0e 94 df 07 	call	0xfbe	; 0xfbe <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1412:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    1416:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    141a:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    141e:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    1422:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <animation_time>
    1426:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <animation_time+0x1>
    142a:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <animation_time+0x2>
    142e:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <animation_time+0x3>
    1432:	84 17       	cp	r24, r20
    1434:	95 07       	cpc	r25, r21
    1436:	a6 07       	cpc	r26, r22
    1438:	b7 07       	cpc	r27, r23
    143a:	28 f4       	brcc	.+10     	; 0x1446 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
			LED_ACUM_OFF;
    1444:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1446:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    1450:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    1454:	81 50       	subi	r24, 0x01	; 1
    1456:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    145a:	9f 3f       	cpi	r25, 0xFF	; 255
    145c:	19 f4       	brne	.+6      	; 0x1464 <animation+0xf8>
    145e:	99 ef       	ldi	r25, 0xF9	; 249
    1460:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1464:	88 3f       	cpi	r24, 0xF8	; 248
    1466:	19 f4       	brne	.+6      	; 0x146e <animation+0x102>
    1468:	8e ef       	ldi	r24, 0xFE	; 254
    146a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    146e:	08 95       	ret

00001470 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1470:	e1 99       	sbic	0x1c, 1	; 28
    1472:	fe cf       	rjmp	.-4      	; 0x1470 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1474:	9f bb       	out	0x1f, r25	; 31
    1476:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1478:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    147a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    147c:	e1 9a       	sbi	0x1c, 1	; 28
    147e:	08 95       	ret

00001480 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1480:	e1 99       	sbic	0x1c, 1	; 28
    1482:	fe cf       	rjmp	.-4      	; 0x1480 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1484:	9f bb       	out	0x1f, r25	; 31
    1486:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1488:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    148a:	8d b3       	in	r24, 0x1d	; 29
    148c:	08 95       	ret

0000148e <set_error_state>:
}

uint16_t errorGetMotorVal(void)
{
	return motor_error_value;
}
    148e:	cf 93       	push	r28
    1490:	c8 2f       	mov	r28, r24
    1492:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    1496:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    14a0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    14a4:	8c 2f       	mov	r24, r28
    14a6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <display_set_error>
    14aa:	0e 94 df 05 	call	0xbbe	; 0xbbe <dcmotor_set_error>
    14ae:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <servo_error>
    14b2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <system_error>
    14b6:	c0 93 28 05 	sts	0x0528, r28	; 0x800528 <led_blink>
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <error_init>:
    14be:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <error_motor_state>
    14c2:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <error_motor_last_state>
    14c6:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <error_motor_status>
    14ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <error_servo_status>
    14ce:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <error_servo_state>
    14d2:	85 e0       	ldi	r24, 0x05	; 5
    14d4:	93 e0       	ldi	r25, 0x03	; 3
    14d6:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <evTime_off>
    14da:	87 ef       	ldi	r24, 0xF7	; 247
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <evTime_off>
    14e2:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <led_blink>
    14e6:	08 95       	ret

000014e8 <error_deinit>:
    14e8:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <error_motor_state>
    14ec:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <error_motor_last_state>
    14f0:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <error_motor_status>
    14f4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <error_servo_status>
    14f8:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <error_servo_state>
    14fc:	85 e0       	ldi	r24, 0x05	; 5
    14fe:	93 e0       	ldi	r25, 0x03	; 3
    1500:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <evTime_off>
    1504:	87 ef       	ldi	r24, 0xF7	; 247
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <evTime_off>
    150c:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <led_blink>
    1510:	08 95       	ret

00001512 <error_event>:

void error_event(void)
{
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    151e:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    1522:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    1526:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    152a:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    152e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <error_event_timer.1931>
    1532:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <error_event_timer.1931+0x1>
    1536:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <error_event_timer.1931+0x2>
    153a:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <error_event_timer.1931+0x3>
    153e:	84 17       	cp	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	a6 07       	cpc	r26, r22
    1544:	b7 07       	cpc	r27, r23
    1546:	08 f0       	brcs	.+2      	; 0x154a <error_event+0x38>
    1548:	4b c3       	rjmp	.+1686   	; 0x1be0 <error_event+0x6ce>
    154a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    154e:	80 ff       	sbrs	r24, 0
    1550:	47 c3       	rjmp	.+1678   	; 0x1be0 <error_event+0x6ce>
	{
		error_event_timer = mktime.ms + 500;
    1552:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    1556:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    155a:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    155e:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    1562:	4c 50       	subi	r20, 0x0C	; 12
    1564:	5e 4f       	sbci	r21, 0xFE	; 254
    1566:	6f 4f       	sbci	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	40 93 f3 02 	sts	0x02F3, r20	; 0x8002f3 <error_event_timer.1931>
    156e:	50 93 f4 02 	sts	0x02F4, r21	; 0x8002f4 <error_event_timer.1931+0x1>
    1572:	60 93 f5 02 	sts	0x02F5, r22	; 0x8002f5 <error_event_timer.1931+0x2>
    1576:	70 93 f6 02 	sts	0x02F6, r23	; 0x8002f6 <error_event_timer.1931+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    157a:	81 fd       	sbrc	r24, 1
    157c:	31 c3       	rjmp	.+1634   	; 0x1be0 <error_event+0x6ce>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    157e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <dcmotor_get_pwm>
    1582:	ec 01       	movw	r28, r24


static uint16_t count_motor_error_value(uint16_t x)
{
	uint16_t error_max_voltage;
	float voltage = accum_get_voltage();
    1584:	0e 94 26 02 	call	0x44c	; 0x44c <accum_get_voltage>
    1588:	6b 01       	movw	r12, r22
    158a:	7c 01       	movw	r14, r24
	if (voltage < 9) voltage = 9;
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e1       	ldi	r20, 0x10	; 16
    1592:	51 e4       	ldi	r21, 0x41	; 65
    1594:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpsf2>
    1598:	88 23       	and	r24, r24
    159a:	44 f4       	brge	.+16     	; 0x15ac <error_event+0x9a>
    159c:	0f 2e       	mov	r0, r31
    159e:	c1 2c       	mov	r12, r1
    15a0:	d1 2c       	mov	r13, r1
    15a2:	f0 e1       	ldi	r31, 0x10	; 16
    15a4:	ef 2e       	mov	r14, r31
    15a6:	f1 e4       	ldi	r31, 0x41	; 65
    15a8:	ff 2e       	mov	r15, r31
    15aa:	f0 2d       	mov	r31, r0
	if (x >=10 && x < 15)
    15ac:	ce 01       	movw	r24, r28
    15ae:	0a 97       	sbiw	r24, 0x0a	; 10
    15b0:	05 97       	sbiw	r24, 0x05	; 5
    15b2:	78 f5       	brcc	.+94     	; 0x1612 <error_event+0x100>
	error_max_voltage = 2*x-15 + (voltage-9)*x/6;
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e1       	ldi	r20, 0x10	; 16
    15ba:	51 e4       	ldi	r21, 0x41	; 65
    15bc:	c7 01       	movw	r24, r14
    15be:	b6 01       	movw	r22, r12
    15c0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    15c4:	6b 01       	movw	r12, r22
    15c6:	7c 01       	movw	r14, r24
    15c8:	be 01       	movw	r22, r28
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 ec       	ldi	r20, 0xC0	; 192
    15e4:	50 e4       	ldi	r21, 0x40	; 64
    15e6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    15ea:	6b 01       	movw	r12, r22
    15ec:	7c 01       	movw	r14, r24
    15ee:	be 01       	movw	r22, r28
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	6f 50       	subi	r22, 0x0F	; 15
    15f6:	71 09       	sbc	r23, r1
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	c7 01       	movw	r24, r14
    1606:	b6 01       	movw	r22, r12
    1608:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    160c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    1610:	00 c1       	rjmp	.+512    	; 0x1812 <error_event+0x300>
	else if (x >=15 && x < 25)
    1612:	ce 01       	movw	r24, r28
    1614:	0f 97       	sbiw	r24, 0x0f	; 15
    1616:	0a 97       	sbiw	r24, 0x0a	; 10
    1618:	78 f5       	brcc	.+94     	; 0x1678 <error_event+0x166>
	error_max_voltage = 2*x-20 + (voltage-9)*x/6;
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e1       	ldi	r20, 0x10	; 16
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	c7 01       	movw	r24, r14
    1624:	b6 01       	movw	r22, r12
    1626:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    162a:	6b 01       	movw	r12, r22
    162c:	7c 01       	movw	r14, r24
    162e:	be 01       	movw	r22, r28
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1638:	9b 01       	movw	r18, r22
    163a:	ac 01       	movw	r20, r24
    163c:	c7 01       	movw	r24, r14
    163e:	b6 01       	movw	r22, r12
    1640:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 ec       	ldi	r20, 0xC0	; 192
    164a:	50 e4       	ldi	r21, 0x40	; 64
    164c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    1650:	6b 01       	movw	r12, r22
    1652:	7c 01       	movw	r14, r24
    1654:	be 01       	movw	r22, r28
    1656:	6a 50       	subi	r22, 0x0A	; 10
    1658:	70 48       	sbci	r23, 0x80	; 128
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	c7 01       	movw	r24, r14
    166c:	b6 01       	movw	r22, r12
    166e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    1672:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    1676:	cd c0       	rjmp	.+410    	; 0x1812 <error_event+0x300>
	else if (x >=25 && x < 40)
    1678:	ce 01       	movw	r24, r28
    167a:	49 97       	sbiw	r24, 0x19	; 25
    167c:	0f 97       	sbiw	r24, 0x0f	; 15
    167e:	78 f5       	brcc	.+94     	; 0x16de <error_event+0x1cc>
	error_max_voltage = 2*x-25 + (voltage-9)*x/6;
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e1       	ldi	r20, 0x10	; 16
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	c7 01       	movw	r24, r14
    168a:	b6 01       	movw	r22, r12
    168c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    1690:	6b 01       	movw	r12, r22
    1692:	7c 01       	movw	r14, r24
    1694:	be 01       	movw	r22, r28
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 ec       	ldi	r20, 0xC0	; 192
    16b0:	50 e4       	ldi	r21, 0x40	; 64
    16b2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    16b6:	6b 01       	movw	r12, r22
    16b8:	7c 01       	movw	r14, r24
    16ba:	be 01       	movw	r22, r28
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	69 51       	subi	r22, 0x19	; 25
    16c2:	71 09       	sbc	r23, r1
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    16d8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    16dc:	9a c0       	rjmp	.+308    	; 0x1812 <error_event+0x300>
	else if (x >=40 && x < 50)
    16de:	ce 01       	movw	r24, r28
    16e0:	88 97       	sbiw	r24, 0x28	; 40
    16e2:	0a 97       	sbiw	r24, 0x0a	; 10
    16e4:	78 f5       	brcc	.+94     	; 0x1744 <error_event+0x232>
	error_max_voltage = 2*x-10 + (voltage-9)*x/6;
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e1       	ldi	r20, 0x10	; 16
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    16f6:	6b 01       	movw	r12, r22
    16f8:	7c 01       	movw	r14, r24
    16fa:	be 01       	movw	r22, r28
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	c7 01       	movw	r24, r14
    170a:	b6 01       	movw	r22, r12
    170c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 ec       	ldi	r20, 0xC0	; 192
    1716:	50 e4       	ldi	r21, 0x40	; 64
    1718:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    171c:	6b 01       	movw	r12, r22
    171e:	7c 01       	movw	r14, r24
    1720:	be 01       	movw	r22, r28
    1722:	65 50       	subi	r22, 0x05	; 5
    1724:	70 48       	sbci	r23, 0x80	; 128
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    173e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    1742:	67 c0       	rjmp	.+206    	; 0x1812 <error_event+0x300>
	else if (x >=50 && x < 70)
    1744:	ce 01       	movw	r24, r28
    1746:	c2 97       	sbiw	r24, 0x32	; 50
    1748:	44 97       	sbiw	r24, 0x14	; 20
    174a:	78 f5       	brcc	.+94     	; 0x17aa <error_event+0x298>
	error_max_voltage = 2*x+10 + (voltage-9)*x/6;
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e1       	ldi	r20, 0x10	; 16
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	c7 01       	movw	r24, r14
    1756:	b6 01       	movw	r22, r12
    1758:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    175c:	6b 01       	movw	r12, r22
    175e:	7c 01       	movw	r14, r24
    1760:	be 01       	movw	r22, r28
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    176a:	9b 01       	movw	r18, r22
    176c:	ac 01       	movw	r20, r24
    176e:	c7 01       	movw	r24, r14
    1770:	b6 01       	movw	r22, r12
    1772:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 ec       	ldi	r20, 0xC0	; 192
    177c:	50 e4       	ldi	r21, 0x40	; 64
    177e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    1782:	6b 01       	movw	r12, r22
    1784:	7c 01       	movw	r14, r24
    1786:	be 01       	movw	r22, r28
    1788:	6b 5f       	subi	r22, 0xFB	; 251
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	66 0f       	add	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	c7 01       	movw	r24, r14
    179e:	b6 01       	movw	r22, r12
    17a0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    17a4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    17a8:	34 c0       	rjmp	.+104    	; 0x1812 <error_event+0x300>
	else if (x >= 70)
    17aa:	c6 34       	cpi	r28, 0x46	; 70
    17ac:	d1 05       	cpc	r29, r1
    17ae:	78 f1       	brcs	.+94     	; 0x180e <error_event+0x2fc>
	error_max_voltage = 2*x+20 + (voltage-9)*x/6;
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e1       	ldi	r20, 0x10	; 16
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__subsf3>
    17c0:	6b 01       	movw	r12, r22
    17c2:	7c 01       	movw	r14, r24
    17c4:	be 01       	movw	r22, r28
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	c7 01       	movw	r24, r14
    17d4:	b6 01       	movw	r22, r12
    17d6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 ec       	ldi	r20, 0xC0	; 192
    17e0:	50 e4       	ldi	r21, 0x40	; 64
    17e2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__divsf3>
    17e6:	6b 01       	movw	r12, r22
    17e8:	7c 01       	movw	r14, r24
    17ea:	be 01       	movw	r22, r28
    17ec:	66 5f       	subi	r22, 0xF6	; 246
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c7 01       	movw	r24, r14
    1802:	b6 01       	movw	r22, r12
    1804:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    1808:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <error_event+0x300>
	else
	error_max_voltage = 10;
    180e:	6a e0       	ldi	r22, 0x0A	; 10
    1810:	70 e0       	ldi	r23, 0x00	; 0
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    1812:	6c 59       	subi	r22, 0x9C	; 156
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <motor_error_value+0x1>
    181a:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <motor_error_value>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_get_filtered_value>
    1824:	ec 01       	movw	r28, r24
		float volt = accum_get_voltage();
    1826:	0e 94 26 02 	call	0x44c	; 0x44c <accum_get_voltage>
		debug_msg("MOTOR ADC: %d, ADC_max: %d, voltage: %f\n", motor_adc_filterd, motor_error_value, volt);
    182a:	9f 93       	push	r25
    182c:	8f 93       	push	r24
    182e:	7f 93       	push	r23
    1830:	6f 93       	push	r22
    1832:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <motor_error_value+0x1>
    1836:	8f 93       	push	r24
    1838:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <motor_error_value>
    183c:	8f 93       	push	r24
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	89 ec       	ldi	r24, 0xC9	; 201
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9f 93       	push	r25
    1848:	8f 93       	push	r24
    184a:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
		if (motor_adc_filterd > motor_error_value) //servo_vibro_value*5
    184e:	8d b7       	in	r24, 0x3d	; 61
    1850:	9e b7       	in	r25, 0x3e	; 62
    1852:	0a 96       	adiw	r24, 0x0a	; 10
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	9e bf       	out	0x3e, r25	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	8d bf       	out	0x3d, r24	; 61
    185e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <motor_error_value>
    1862:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <motor_error_value+0x1>
    1866:	8c 17       	cp	r24, r28
    1868:	9d 07       	cpc	r25, r29
    186a:	b0 f4       	brcc	.+44     	; 0x1898 <error_event+0x386>
		{
			error_motor_status = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <error_motor_status>
			error_motor_status = 0;
		}
		#if CONFIG_USE_ERROR_MOTOR
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
    1872:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <error_motor_state>
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	09 f4       	brne	.+2      	; 0x187c <error_event+0x36a>
    187a:	84 c0       	rjmp	.+264    	; 0x1984 <error_event+0x472>
    187c:	30 f4       	brcc	.+12     	; 0x188a <error_event+0x378>
    187e:	88 23       	and	r24, r24
    1880:	f1 f0       	breq	.+60     	; 0x18be <error_event+0x3ac>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	09 f4       	brne	.+2      	; 0x1888 <error_event+0x376>
    1886:	48 c0       	rjmp	.+144    	; 0x1918 <error_event+0x406>
    1888:	ff c0       	rjmp	.+510    	; 0x1a88 <error_event+0x576>
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	09 f4       	brne	.+2      	; 0x1890 <error_event+0x37e>
    188e:	8d c0       	rjmp	.+282    	; 0x19aa <error_event+0x498>
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	09 f4       	brne	.+2      	; 0x1896 <error_event+0x384>
    1894:	8e c0       	rjmp	.+284    	; 0x19b2 <error_event+0x4a0>
    1896:	f8 c0       	rjmp	.+496    	; 0x1a88 <error_event+0x576>
		{
			error_motor_status = 1;
		}
		else
		{
			error_motor_status = 0;
    1898:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <error_motor_status>
			}
		}
		else
		{
			//toDo
			switch(error_motor_state)
    189c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <error_motor_state>
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <error_event+0x394>
    18a4:	c0 c0       	rjmp	.+384    	; 0x1a26 <error_event+0x514>
    18a6:	20 f4       	brcc	.+8      	; 0x18b0 <error_event+0x39e>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <error_event+0x39c>
    18ac:	9e c0       	rjmp	.+316    	; 0x19ea <error_event+0x4d8>
    18ae:	ec c0       	rjmp	.+472    	; 0x1a88 <error_event+0x576>
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <error_event+0x3a4>
    18b4:	d5 c0       	rjmp	.+426    	; 0x1a60 <error_event+0x54e>
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	09 f4       	brne	.+2      	; 0x18bc <error_event+0x3aa>
    18ba:	d6 c0       	rjmp	.+428    	; 0x1a68 <error_event+0x556>
    18bc:	e5 c0       	rjmp	.+458    	; 0x1a88 <error_event+0x576>
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    18c4:	82 ef       	ldi	r24, 0xF2	; 242
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9f 93       	push	r25
    18ca:	8f 93       	push	r24
    18cc:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    18d0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <dcmotor_get_pwm>
	return error_max_voltage;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    18d4:	2e e1       	ldi	r18, 0x1E	; 30
    18d6:	ac 01       	movw	r20, r24
    18d8:	24 9f       	mul	r18, r20
    18da:	c0 01       	movw	r24, r0
    18dc:	25 9f       	mul	r18, r21
    18de:	90 0d       	add	r25, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	48 e8       	ldi	r20, 0x88	; 136
    18e4:	53 e1       	ldi	r21, 0x13	; 19
    18e6:	ea 01       	movw	r28, r20
    18e8:	c8 1b       	sub	r28, r24
    18ea:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	8d e0       	ldi	r24, 0x0D	; 13
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    18fc:	ae 01       	movw	r20, r28
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
				break;
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	b8 c0       	rjmp	.+368    	; 0x1a88 <error_event+0x576>
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1918:	85 e0       	ldi	r24, 0x05	; 5
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1920:	89 2b       	or	r24, r25
    1922:	09 f4       	brne	.+2      	; 0x1926 <error_event+0x414>
    1924:	b1 c0       	rjmp	.+354    	; 0x1a88 <error_event+0x576>
					{
						dcmotor_set_try();
    1926:	0e 94 ed 05 	call	0xbda	; 0xbda <dcmotor_set_try>
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    192a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    192e:	2e e1       	ldi	r18, 0x1E	; 30
    1930:	ac 01       	movw	r20, r24
    1932:	24 9f       	mul	r18, r20
    1934:	c0 01       	movw	r24, r0
    1936:	25 9f       	mul	r18, r21
    1938:	90 0d       	add	r25, r0
    193a:	11 24       	eor	r1, r1
    193c:	48 e8       	ldi	r20, 0x88	; 136
    193e:	53 e1       	ldi	r21, 0x13	; 19
    1940:	ea 01       	movw	r28, r20
    1942:	c8 1b       	sub	r28, r24
    1944:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	8c e2       	ldi	r24, 0x2C	; 44
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
				break;
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
					{
						dcmotor_set_try();
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1956:	ae 01       	movw	r20, r28
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	85 e0       	ldi	r24, 0x05	; 5
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
						error_motor_state = ERR_M_AXELERATE;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    196a:	80 e5       	ldi	r24, 0x50	; 80
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	82 c0       	rjmp	.+260    	; 0x1a88 <error_event+0x576>
					}
				break;
				case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1984:	85 e0       	ldi	r24, 0x05	; 5
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    198c:	89 2b       	or	r24, r25
    198e:	09 f4       	brne	.+2      	; 0x1992 <error_event+0x480>
    1990:	7b c0       	rjmp	.+246    	; 0x1a88 <error_event+0x576>
					{
						error_motor_state = ERR_M_ERROR;
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1998:	80 e7       	ldi	r24, 0x70	; 112
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	9f 93       	push	r25
    199e:	8f 93       	push	r24
    19a0:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	6f c0       	rjmp	.+222    	; 0x1a88 <error_event+0x576>
					}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	0e 94 47 0a 	call	0x148e	; 0x148e <set_error_state>
				break;
    19b0:	6b c0       	rjmp	.+214    	; 0x1a88 <error_event+0x576>
				case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    19ba:	89 2b       	or	r24, r25
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <error_event+0x4ae>
    19be:	64 c0       	rjmp	.+200    	; 0x1a88 <error_event+0x576>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    19c0:	40 ed       	ldi	r20, 0xD0	; 208
    19c2:	57 e0       	ldi	r21, 0x07	; 7
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	85 e0       	ldi	r24, 0x05	; 5
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
						error_motor_state = error_motor_last_state;
    19d0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <error_motor_last_state>
    19d4:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
						debug_msg("ERROR STATUS: go to last before wait\n\r");
    19d8:	8c e8       	ldi	r24, 0x8C	; 140
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	9f 93       	push	r25
    19de:	8f 93       	push	r24
    19e0:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	4f c0       	rjmp	.+158    	; 0x1a88 <error_event+0x576>
			switch(error_motor_state)
			{
				case ERR_M_OK:
				break;
				case ERR_M_WAIT:
				if (evTime_check(&motor_timer))
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    19f2:	89 2b       	or	r24, r25
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <error_event+0x4e6>
    19f6:	48 c0       	rjmp	.+144    	; 0x1a88 <error_event+0x576>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    19f8:	40 ed       	ldi	r20, 0xD0	; 208
    19fa:	57 e0       	ldi	r21, 0x07	; 7
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1a08:	84 e0       	ldi	r24, 0x04	; 4
    1a0a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
					error_motor_last_state = ERR_M_WAIT;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1a14:	83 eb       	ldi	r24, 0xB3	; 179
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	9f 93       	push	r25
    1a1a:	8f 93       	push	r24
    1a1c:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	31 c0       	rjmp	.+98     	; 0x1a88 <error_event+0x576>
				}
				break;
				case ERR_M_AXELERATE:
				if (evTime_check(&motor_timer))
    1a26:	85 e0       	ldi	r24, 0x05	; 5
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1a2e:	89 2b       	or	r24, r25
    1a30:	59 f1       	breq	.+86     	; 0x1a88 <error_event+0x576>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1a32:	40 ed       	ldi	r20, 0xD0	; 208
    1a34:	57 e0       	ldi	r21, 0x07	; 7
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <error_motor_state>
					error_motor_last_state = ERR_M_AXELERATE;
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1a4e:	83 eb       	ldi	r24, 0xB3	; 179
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	9f 93       	push	r25
    1a54:	8f 93       	push	r24
    1a56:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <error_event+0x576>
				}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	0e 94 47 0a 	call	0x148e	; 0x148e <set_error_state>
				break;
    1a66:	10 c0       	rjmp	.+32     	; 0x1a88 <error_event+0x576>
				case ERR_M_EXIT:
				if (evTime_check(&motor_timer))
    1a68:	85 e0       	ldi	r24, 0x05	; 5
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1a70:	89 2b       	or	r24, r25
    1a72:	51 f0       	breq	.+20     	; 0x1a88 <error_event+0x576>
				{
					debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1a74:	8e ec       	ldi	r24, 0xCE	; 206
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					error_motor_state = ERR_M_OK;
    1a80:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <error_motor_state>
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
		}
		#endif
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if CONFIG_USE_ERROR_SERVO
		servo_error_value = count_servo_error_value();
    1a88:	84 e6       	ldi	r24, 0x64	; 100
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <servo_error_value+0x1>
    1a90:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <servo_error_value>
		if (measure_get_filtered_value(MEAS_SERVO) > servo_error_value) //servo_vibro_value*5
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_get_filtered_value>
    1a9a:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <servo_error_value>
    1a9e:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <servo_error_value+0x1>
    1aa2:	28 17       	cp	r18, r24
    1aa4:	39 07       	cpc	r19, r25
    1aa6:	d8 f4       	brcc	.+54     	; 0x1ade <error_event+0x5cc>
		{
			debug_msg("servo_error_value: %d\n", servo_error_value);
    1aa8:	3f 93       	push	r19
    1aaa:	2f 93       	push	r18
    1aac:	87 ee       	ldi	r24, 0xE7	; 231
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	9f 93       	push	r25
    1ab2:	8f 93       	push	r24
    1ab4:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
			error_servo_status = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <error_servo_status>
			error_servo_status = 0;
		}
		
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <error_servo_state>
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	51 f1       	breq	.+84     	; 0x1b22 <error_event+0x610>
    1ace:	a8 f0       	brcs	.+42     	; 0x1afa <error_event+0x5e8>
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <error_event+0x5c4>
    1ad4:	4b c0       	rjmp	.+150    	; 0x1b6c <error_event+0x65a>
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <error_event+0x5ca>
    1ada:	51 c0       	rjmp	.+162    	; 0x1b7e <error_event+0x66c>
    1adc:	81 c0       	rjmp	.+258    	; 0x1be0 <error_event+0x6ce>
			debug_msg("servo_error_value: %d\n", servo_error_value);
			error_servo_status = 1;
		}
		else
		{
			error_servo_status = 0;
    1ade:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <error_servo_status>
			} //switch
		}// if (error_servo_status == 1)
		else
		{
			//toDo
			switch(error_servo_state)
    1ae2:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <error_servo_state>
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <error_event+0x5da>
    1aea:	66 c0       	rjmp	.+204    	; 0x1bb8 <error_event+0x6a6>
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <error_event+0x5e0>
    1af0:	74 c0       	rjmp	.+232    	; 0x1bda <error_event+0x6c8>
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <error_event+0x5e6>
    1af6:	74 c0       	rjmp	.+232    	; 0x1be0 <error_event+0x6ce>
    1af8:	46 c0       	rjmp	.+140    	; 0x1b86 <error_event+0x674>
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
			{
				case ERR_S_OK:
					error_servo_state = ERR_S_WAIT;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1b00:	8e ef       	ldi	r24, 0xFE	; 254
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1b0c:	44 ef       	ldi	r20, 0xF4	; 244
    1b0e:	51 e0       	ldi	r21, 0x01	; 1
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	87 ef       	ldi	r24, 0xF7	; 247
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
				break;
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	5f c0       	rjmp	.+190    	; 0x1be0 <error_event+0x6ce>
				case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1b22:	87 ef       	ldi	r24, 0xF7	; 247
    1b24:	92 e0       	ldi	r25, 0x02	; 2
    1b26:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1b2a:	89 2b       	or	r24, r25
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <error_event+0x61e>
    1b2e:	58 c0       	rjmp	.+176    	; 0x1be0 <error_event+0x6ce>
					{
						if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1b30:	0e 94 56 10 	call	0x20ac	; 0x20ac <servo_get_try_cnt>
    1b34:	04 97       	sbiw	r24, 0x04	; 4
    1b36:	24 f0       	brlt	.+8      	; 0x1b40 <error_event+0x62e>
						{
							error_servo_state = ERR_S_ERROR;
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <error_servo_state>
							break;
    1b3e:	50 c0       	rjmp	.+160    	; 0x1be0 <error_event+0x6ce>
						}
						evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1b40:	4c ed       	ldi	r20, 0xDC	; 220
    1b42:	55 e0       	ldi	r21, 0x05	; 5
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	87 ef       	ldi	r24, 0xF7	; 247
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
						error_servo_state = ERR_S_TRY;
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <error_servo_state>
						servo_enable_try();
    1b56:	0e 94 4a 10 	call	0x2094	; 0x2094 <servo_enable_try>
						debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1b5a:	89 e1       	ldi	r24, 0x19	; 25
    1b5c:	92 e0       	ldi	r25, 0x02	; 2
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	3a c0       	rjmp	.+116    	; 0x1be0 <error_event+0x6ce>
					}
				break;
				case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1b6c:	87 ef       	ldi	r24, 0xF7	; 247
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1b74:	89 2b       	or	r24, r25
    1b76:	a1 f1       	breq	.+104    	; 0x1be0 <error_event+0x6ce>
					{
						error_servo_state = ERR_S_OK;
    1b78:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <error_servo_state>
    1b7c:	31 c0       	rjmp	.+98     	; 0x1be0 <error_event+0x6ce>
					}
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	0e 94 47 0a 	call	0x148e	; 0x148e <set_error_state>
				break;
    1b84:	2d c0       	rjmp	.+90     	; 0x1be0 <error_event+0x6ce>
			switch(error_servo_state)
			{
				case ERR_S_OK:
				break;
				case ERR_S_WAIT:
				if (evTime_check(&servo_timer))
    1b86:	87 ef       	ldi	r24, 0xF7	; 247
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1b8e:	89 2b       	or	r24, r25
    1b90:	39 f1       	breq	.+78     	; 0x1be0 <error_event+0x6ce>
				{
					evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1b92:	40 ed       	ldi	r20, 0xD0	; 208
    1b94:	57 e0       	ldi	r21, 0x07	; 7
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	87 ef       	ldi	r24, 0xF7	; 247
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
    1b9e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
					error_servo_state = ERR_M_OK;
    1ba2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1ba6:	83 e3       	ldi	r24, 0x33	; 51
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <error_event+0x6ce>
				}
				break;
				case ERR_S_TRY:
				if (evTime_check(&servo_timer))
    1bb8:	87 ef       	ldi	r24, 0xF7	; 247
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    1bc0:	89 2b       	or	r24, r25
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <error_event+0x6ce>
				{
					error_servo_state = ERR_S_OK;
    1bc4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1bc8:	83 e3       	ldi	r24, 0x33	; 51
    1bca:	92 e0       	ldi	r25, 0x02	; 2
    1bcc:	9f 93       	push	r25
    1bce:	8f 93       	push	r24
    1bd0:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <error_event+0x6ce>
				}
				break;
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	0e 94 47 0a 	call	0x148e	; 0x148e <set_error_state>
				break;
			} //switch
		} //else (error_servo_status == 1)
		#endif
	} //error_event_timer
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1bee:	4e e5       	ldi	r20, 0x5E	; 94
    1bf0:	51 e0       	ldi	r21, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	8e ee       	ldi	r24, 0xEE	; 238
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <evTime_process_period>
    1bfe:	89 2b       	or	r24, r25
    1c00:	09 f1       	breq	.+66     	; 0x1c44 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1c02:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <led_blink>
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	71 f4       	brne	.+28     	; 0x1c26 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1c0a:	92 b3       	in	r25, 0x12	; 18
    1c0c:	80 e1       	ldi	r24, 0x10	; 16
    1c0e:	89 27       	eor	r24, r25
    1c10:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1c12:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    1c16:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    1c1a:	90 62       	ori	r25, 0x20	; 32
    1c1c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    1c20:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    1c24:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1c26:	82 30       	cpi	r24, 0x02	; 2
    1c28:	69 f4       	brne	.+26     	; 0x1c44 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1c2a:	92 b3       	in	r25, 0x12	; 18
    1c2c:	80 e4       	ldi	r24, 0x40	; 64
    1c2e:	89 27       	eor	r24, r25
    1c30:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1c32:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    1c36:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    1c3a:	90 62       	ori	r25, 0x20	; 32
    1c3c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    1c40:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    1c44:	08 95       	ret

00001c46 <filtered_value>:
static uint8_t s_o_t_iteration_adc_table = 0;
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 81       	ld	r18, Z
    1c4a:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
    1c4c:	62 30       	cpi	r22, 0x02	; 2
    1c4e:	58 f0       	brcs	.+22     	; 0x1c66 <filtered_value+0x20>
    1c50:	32 96       	adiw	r30, 0x02	; 2
    1c52:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
    1c54:	41 91       	ld	r20, Z+
    1c56:	51 91       	ld	r21, Z+
    1c58:	24 0f       	add	r18, r20
    1c5a:	35 1f       	adc	r19, r21
    1c5c:	36 95       	lsr	r19
    1c5e:	27 95       	ror	r18
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
    1c60:	9f 5f       	subi	r25, 0xFF	; 255
    1c62:	69 13       	cpse	r22, r25
    1c64:	f7 cf       	rjmp	.-18     	; 0x1c54 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
    1c66:	c9 01       	movw	r24, r18
    1c68:	08 95       	ret

00001c6a <init_measure>:

void init_measure(void)
{
    1c6a:	ea e4       	ldi	r30, 0x4A	; 74
    1c6c:	f3 e0       	ldi	r31, 0x03	; 3
    1c6e:	22 e7       	ldi	r18, 0x72	; 114
    1c70:	33 e0       	ldi	r19, 0x03	; 3
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
    1c72:	81 ef       	ldi	r24, 0xF1	; 241
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	81 93       	st	Z+, r24
    1c78:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
    1c7a:	2e 17       	cp	r18, r30
    1c7c:	3f 07       	cpc	r19, r31
    1c7e:	d9 f7       	brne	.-10     	; 0x1c76 <init_measure+0xc>
    1c80:	e9 e2       	ldi	r30, 0x29	; 41
    1c82:	f3 e0       	ldi	r31, 0x03	; 3
    1c84:	87 e4       	ldi	r24, 0x47	; 71
    1c86:	93 e0       	ldi	r25, 0x03	; 3
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
    1c88:	11 92       	st	Z+, r1
    1c8a:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
    1c8c:	8e 17       	cp	r24, r30
    1c8e:	9f 07       	cpc	r25, r31
    1c90:	d9 f7       	brne	.-10     	; 0x1c88 <init_measure+0x1e>
    1c92:	e1 e1       	ldi	r30, 0x11	; 17
    1c94:	f3 e0       	ldi	r31, 0x03	; 3
    1c96:	85 e2       	ldi	r24, 0x25	; 37
    1c98:	93 e0       	ldi	r25, 0x03	; 3
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
    1c9a:	11 92       	st	Z+, r1
    1c9c:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
    1c9e:	8e 17       	cp	r24, r30
    1ca0:	9f 07       	cpc	r25, r31
    1ca2:	d9 f7       	brne	.-10     	; 0x1c9a <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
    1ca4:	08 95       	ret

00001ca6 <measure_process>:
static timer_t measure_timer;
void measure_process(void)
{
    1ca6:	cf 92       	push	r12
    1ca8:	df 92       	push	r13
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
	if (measure_timer < mktime.ms)
    1cb2:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    1cb6:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    1cba:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    1cbe:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    1cc2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <measure_timer>
    1cc6:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <measure_timer+0x1>
    1cca:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <measure_timer+0x2>
    1cce:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <measure_timer+0x3>
    1cd2:	84 17       	cp	r24, r20
    1cd4:	95 07       	cpc	r25, r21
    1cd6:	a6 07       	cpc	r26, r22
    1cd8:	b7 07       	cpc	r27, r23
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <measure_process+0x38>
    1cdc:	a7 c0       	rjmp	.+334    	; 0x1e2c <measure_process+0x186>
	{
		measure_timer = mktime.ms + 50;
    1cde:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
    1ce2:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
    1ce6:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
    1cea:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
    1cee:	c2 96       	adiw	r24, 0x32	; 50
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	b1 1d       	adc	r27, r1
    1cf4:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <measure_timer>
    1cf8:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <measure_timer+0x1>
    1cfc:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <measure_timer+0x2>
    1d00:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0e 94 36 03 	call	0x66c	; 0x66c <adc_read>
    1d0a:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
    1d0c:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <motor_filter_value>
    1d10:	70 91 48 03 	lds	r23, 0x0348	; 0x800348 <motor_filter_value+0x1>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1d1c:	21 e7       	ldi	r18, 0x71	; 113
    1d1e:	3d e3       	ldi	r19, 0x3D	; 61
    1d20:	4a e8       	ldi	r20, 0x8A	; 138
    1d22:	5e e3       	ldi	r21, 0x3E	; 62
    1d24:	0e 94 6e 18 	call	0x30dc	; 0x30dc <__mulsf3>
    1d28:	6b 01       	movw	r12, r22
    1d2a:	7c 01       	movw	r14, r24
    1d2c:	be 01       	movw	r22, r28
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatunsisf>
    1d36:	9b 01       	movw	r18, r22
    1d38:	ac 01       	movw	r20, r24
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__addsf3>
    1d42:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    1d46:	70 93 75 03 	sts	0x0375, r23	; 0x800375 <accum_adc+0x1>
    1d4a:	60 93 74 03 	sts	0x0374, r22	; 0x800374 <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
    1d4e:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <iteration_adc_accum_table>
    1d52:	e2 2f       	mov	r30, r18
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	e6 5b       	subi	r30, 0xB6	; 182
    1d5c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d5e:	71 83       	std	Z+1, r23	; 0x01
    1d60:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	82 0f       	add	r24, r18
    1d66:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	0e 94 36 03 	call	0x66c	; 0x66c <adc_read>
    1d70:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <motor_adc+0x1>
    1d74:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
    1d78:	e0 91 49 03 	lds	r30, 0x0349	; 0x800349 <iteration_adc_motor_table>
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	e7 5d       	subi	r30, 0xD7	; 215
    1d84:	fc 4f       	sbci	r31, 0xFC	; 252
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 36 03 	call	0x66c	; 0x66c <adc_read>
		
		#if CONFIG_DEVICE_SIEWNIK
		if (s_o_t_adc < SERVO_CALIBRATION_VALUE) s_o_t_adc = 0;
    1d90:	88 35       	cpi	r24, 0x58	; 88
    1d92:	22 e0       	ldi	r18, 0x02	; 2
    1d94:	92 07       	cpc	r25, r18
    1d96:	28 f4       	brcc	.+10     	; 0x1da2 <measure_process+0xfc>
    1d98:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <s_o_t_adc+0x1>
    1d9c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <s_o_t_adc>
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <measure_process+0x108>
		else s_o_t_adc = s_o_t_adc - SERVO_CALIBRATION_VALUE;
    1da2:	88 55       	subi	r24, 0x58	; 88
    1da4:	92 40       	sbci	r25, 0x02	; 2
    1da6:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <s_o_t_adc+0x1>
    1daa:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <s_o_t_adc>
		#endif

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
    1dae:	c0 91 10 03 	lds	r28, 0x0310	; 0x800310 <s_o_t_iteration_adc_table>
    1db2:	ec 2f       	mov	r30, r28
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	ef 5e       	subi	r30, 0xEF	; 239
    1dbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1dbe:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <s_o_t_adc>
    1dc2:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <s_o_t_adc+0x1>
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
    1dca:	d0 91 49 03 	lds	r29, 0x0349	; 0x800349 <iteration_adc_motor_table>
    1dce:	df 5f       	subi	r29, 0xFF	; 255
    1dd0:	d0 93 49 03 	sts	0x0349, r29	; 0x800349 <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
    1dd4:	cf 5f       	subi	r28, 0xFF	; 255
    1dd6:	c0 93 10 03 	sts	0x0310, r28	; 0x800310 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
    1dda:	64 e1       	ldi	r22, 0x14	; 20
    1ddc:	8a e4       	ldi	r24, 0x4A	; 74
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <filtered_value>
    1de4:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <filtered_accum_adc_val+0x1>
    1de8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
    1dec:	6f e0       	ldi	r22, 0x0F	; 15
    1dee:	89 e2       	ldi	r24, 0x29	; 41
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <filtered_value>
    1df6:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <motor_filter_value+0x1>
    1dfa:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
    1dfe:	6a e0       	ldi	r22, 0x0A	; 10
    1e00:	81 e1       	ldi	r24, 0x11	; 17
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <filtered_value>
    1e08:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <s_o_t_filter_value+0x1>
    1e0c:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <s_o_t_filter_value>
		//debug_msg("ADC: accum %d, servo %d, motor %d\n",accum_adc, s_o_t_adc, motor_adc);
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
    1e10:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <iteration_adc_accum_table>
    1e14:	84 31       	cpi	r24, 0x14	; 20
    1e16:	11 f4       	brne	.+4      	; 0x1e1c <measure_process+0x176>
    1e18:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
    1e1c:	ca 30       	cpi	r28, 0x0A	; 10
    1e1e:	11 f4       	brne	.+4      	; 0x1e24 <measure_process+0x17e>
    1e20:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
    1e24:	df 30       	cpi	r29, 0x0F	; 15
    1e26:	11 f4       	brne	.+4      	; 0x1e2c <measure_process+0x186>
    1e28:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <iteration_adc_motor_table>
	}
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	df 90       	pop	r13
    1e36:	cf 90       	pop	r12
    1e38:	08 95       	ret

00001e3a <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
    1e3a:	83 30       	cpi	r24, 0x03	; 3
    1e3c:	18 f4       	brcc	.+6      	; 0x1e44 <measure_get_filtered_value+0xa>
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	40 f0       	brcs	.+16     	; 0x1e52 <measure_get_filtered_value+0x18>
    1e42:	0c c0       	rjmp	.+24     	; 0x1e5c <measure_get_filtered_value+0x22>
    1e44:	83 30       	cpi	r24, 0x03	; 3
    1e46:	79 f4       	brne	.+30     	; 0x1e66 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
    1e48:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <filtered_accum_adc_val>
    1e4c:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <filtered_accum_adc_val+0x1>
    1e50:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
    1e52:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <motor_filter_value>
    1e56:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <motor_filter_value+0x1>
    1e5a:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
    1e5c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <s_o_t_filter_value>
    1e60:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <s_o_t_filter_value+0x1>
    1e64:	08 95       	ret
        break;
    }
	return 0;
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
}
    1e6a:	08 95       	ret

00001e6c <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	59 f0       	breq	.+22     	; 0x1e92 <mem_save_data+0x26>
    1e7c:	28 f4       	brcc	.+10     	; 0x1e88 <mem_save_data+0x1c>
    1e7e:	88 23       	and	r24, r24
    1e80:	91 f0       	breq	.+36     	; 0x1ea6 <mem_save_data+0x3a>
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	19 f1       	breq	.+70     	; 0x1ecc <mem_save_data+0x60>
    1e86:	30 c0       	rjmp	.+96     	; 0x1ee8 <mem_save_data+0x7c>
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	29 f1       	breq	.+74     	; 0x1ed6 <mem_save_data+0x6a>
    1e8c:	84 30       	cpi	r24, 0x04	; 4
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <mem_save_data+0x30>
    1e90:	2b c0       	rjmp	.+86     	; 0x1ee8 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1e92:	22 e0       	ldi	r18, 0x02	; 2
    1e94:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	21 c0       	rjmp	.+66     	; 0x1ede <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1e9c:	23 e0       	ldi	r18, 0x03	; 3
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1ea0:	88 e0       	ldi	r24, 0x08	; 8
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1ea4:	1c c0       	rjmp	.+56     	; 0x1ede <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1ea6:	68 94       	set
    1ea8:	ee 24       	eor	r14, r14
    1eaa:	e1 f8       	bld	r14, 1
    1eac:	f1 2c       	mov	r15, r1
    1eae:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	61 91       	ld	r22, Z+
    1eb4:	8f 01       	movw	r16, r30
    1eb6:	8c 2f       	mov	r24, r28
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 38 0a 	call	0x1470	; 0x1470 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1ebe:	cf 5f       	subi	r28, 0xFF	; 255
    1ec0:	8c 2f       	mov	r24, r28
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	8e 15       	cp	r24, r14
    1ec6:	9f 05       	cpc	r25, r15
    1ec8:	9c f3       	brlt	.-26     	; 0x1eb0 <mem_save_data+0x44>
    1eca:	0e c0       	rjmp	.+28     	; 0x1ee8 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1ecc:	22 e0       	ldi	r18, 0x02	; 2
    1ece:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1ed6:	22 e0       	ldi	r18, 0x02	; 2
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1eda:	86 e0       	ldi	r24, 0x06	; 6
    1edc:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1ede:	c8 2f       	mov	r28, r24
    1ee0:	79 01       	movw	r14, r18
    1ee2:	e8 0e       	add	r14, r24
    1ee4:	f9 1e       	adc	r15, r25
    1ee6:	e4 cf       	rjmp	.-56     	; 0x1eb0 <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	08 95       	ret

00001ef4 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1f00:	82 30       	cpi	r24, 0x02	; 2
    1f02:	59 f0       	breq	.+22     	; 0x1f1a <mem_read_data+0x26>
    1f04:	28 f4       	brcc	.+10     	; 0x1f10 <mem_read_data+0x1c>
    1f06:	88 23       	and	r24, r24
    1f08:	91 f0       	breq	.+36     	; 0x1f2e <mem_read_data+0x3a>
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	19 f1       	breq	.+70     	; 0x1f54 <mem_read_data+0x60>
    1f0e:	30 c0       	rjmp	.+96     	; 0x1f70 <mem_read_data+0x7c>
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	29 f1       	breq	.+74     	; 0x1f5e <mem_read_data+0x6a>
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	31 f0       	breq	.+12     	; 0x1f24 <mem_read_data+0x30>
    1f18:	2b c0       	rjmp	.+86     	; 0x1f70 <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1f1a:	22 e0       	ldi	r18, 0x02	; 2
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1f1e:	84 e0       	ldi	r24, 0x04	; 4
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	21 c0       	rjmp	.+66     	; 0x1f66 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1f24:	23 e0       	ldi	r18, 0x03	; 3
    1f26:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1f28:	88 e0       	ldi	r24, 0x08	; 8
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1f2c:	1c c0       	rjmp	.+56     	; 0x1f66 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1f2e:	68 94       	set
    1f30:	ee 24       	eor	r14, r14
    1f32:	e1 f8       	bld	r14, 1
    1f34:	f1 2c       	mov	r15, r1
    1f36:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    1f38:	8c 2f       	mov	r24, r28
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 40 0a 	call	0x1480	; 0x1480 <EEPROM_read>
    1f40:	f8 01       	movw	r30, r16
    1f42:	81 93       	st	Z+, r24
    1f44:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1f46:	cf 5f       	subi	r28, 0xFF	; 255
    1f48:	8c 2f       	mov	r24, r28
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	8e 15       	cp	r24, r14
    1f4e:	9f 05       	cpc	r25, r15
    1f50:	9c f3       	brlt	.-26     	; 0x1f38 <mem_read_data+0x44>
    1f52:	0e c0       	rjmp	.+28     	; 0x1f70 <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1f54:	22 e0       	ldi	r18, 0x02	; 2
    1f56:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1f5e:	22 e0       	ldi	r18, 0x02	; 2
    1f60:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1f62:	86 e0       	ldi	r24, 0x06	; 6
    1f64:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1f66:	c8 2f       	mov	r28, r24
    1f68:	79 01       	movw	r14, r18
    1f6a:	e8 0e       	add	r14, r24
    1f6c:	f9 1e       	adc	r15, r25
    1f6e:	e4 cf       	rjmp	.-56     	; 0x1f38 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	08 95       	ret

00001f7c <servo_set_pwm_val>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <servo_set_pwm_val+0xe>
    1f80:	8c e6       	ldi	r24, 0x6C	; 108
    1f82:	97 e0       	ldi	r25, 0x07	; 7
    1f84:	9b bd       	out	0x2b, r25	; 43
    1f86:	8a bd       	out	0x2a, r24	; 42
    1f88:	08 95       	ret
    1f8a:	82 33       	cpi	r24, 0x32	; 50
    1f8c:	90 f4       	brcc	.+36     	; 0x1fb2 <servo_set_pwm_val+0x36>
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	22 27       	eor	r18, r18
    1f92:	33 27       	eor	r19, r19
    1f94:	28 1b       	sub	r18, r24
    1f96:	39 0b       	sbc	r19, r25
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	22 0f       	add	r18, r18
    1fa2:	33 1f       	adc	r19, r19
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	88 5f       	subi	r24, 0xF8	; 248
    1faa:	98 4f       	sbci	r25, 0xF8	; 248
    1fac:	9b bd       	out	0x2b, r25	; 43
    1fae:	8a bd       	out	0x2a, r24	; 42
    1fb0:	08 95       	ret
    1fb2:	84 36       	cpi	r24, 0x64	; 100
    1fb4:	68 f4       	brcc	.+26     	; 0x1fd0 <servo_set_pwm_val+0x54>
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	c2 97       	sbiw	r24, 0x32	; 50
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	2a ea       	ldi	r18, 0xAA	; 170
    1fc4:	35 e0       	ldi	r19, 0x05	; 5
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	48 1b       	sub	r20, r24
    1fca:	59 0b       	sbc	r21, r25
    1fcc:	5b bd       	out	0x2b, r21	; 43
    1fce:	4a bd       	out	0x2a, r20	; 42
    1fd0:	08 95       	ret

00001fd2 <servo_error>:
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
    1fd8:	96 98       	cbi	0x12, 6	; 18
    1fda:	85 e0       	ldi	r24, 0x05	; 5
    1fdc:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <servoD>
    1fe0:	08 95       	ret

00001fe2 <servo_init>:
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	2f e1       	ldi	r18, 0x1F	; 31
    1fe8:	3e e4       	ldi	r19, 0x4E	; 78
    1fea:	37 bd       	out	0x27, r19	; 39
    1fec:	26 bd       	out	0x26, r18	; 38
    1fee:	81 b3       	in	r24, 0x11	; 17
    1ff0:	80 63       	ori	r24, 0x30	; 48
    1ff2:	81 bb       	out	0x11, r24	; 17
    1ff4:	19 bc       	out	0x29, r1	; 41
    1ff6:	18 bc       	out	0x28, r1	; 40
    1ff8:	1b bc       	out	0x2b, r1	; 43
    1ffa:	1a bc       	out	0x2a, r1	; 42
    1ffc:	8f b5       	in	r24, 0x2f	; 47
    1ffe:	82 60       	ori	r24, 0x02	; 2
    2000:	8f bd       	out	0x2f, r24	; 47
    2002:	8e b5       	in	r24, 0x2e	; 46
    2004:	88 61       	ori	r24, 0x18	; 24
    2006:	8e bd       	out	0x2e, r24	; 46
    2008:	8f b5       	in	r24, 0x2f	; 47
    200a:	80 68       	ori	r24, 0x80	; 128
    200c:	8f bd       	out	0x2f, r24	; 47
    200e:	8e b5       	in	r24, 0x2e	; 46
    2010:	82 60       	ori	r24, 0x02	; 2
    2012:	8e bd       	out	0x2e, r24	; 46
    2014:	3b bd       	out	0x2b, r19	; 43
    2016:	2a bd       	out	0x2a, r18	; 42
    2018:	96 98       	cbi	0x12, 6	; 18
    201a:	c9 e2       	ldi	r28, 0x29	; 41
    201c:	d5 e0       	ldi	r29, 0x05	; 5
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	88 83       	st	Y, r24
    2022:	1b 82       	std	Y+3, r1	; 0x03
    2024:	8d e2       	ldi	r24, 0x2D	; 45
    2026:	95 e0       	ldi	r25, 0x05	; 5
    2028:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <evTime_init>
    202c:	19 86       	std	Y+9, r1	; 0x09
    202e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <try_count>
    2032:	8c e4       	ldi	r24, 0x4C	; 76
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	08 95       	ret

00002048 <servo_is_open>:
    2048:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <servoD>
    204c:	92 50       	subi	r25, 0x02	; 2
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	92 30       	cpi	r25, 0x02	; 2
    2054:	10 f0       	brcs	.+4      	; 0x205a <servo_is_open+0x12>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	c9 01       	movw	r24, r18
    205c:	08 95       	ret

0000205e <servo_delayed_open>:
    205e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <servoD>
    2062:	91 30       	cpi	r25, 0x01	; 1
    2064:	a1 f4       	brne	.+40     	; 0x208e <servo_delayed_open+0x30>
    2066:	e9 e2       	ldi	r30, 0x29	; 41
    2068:	f5 e0       	ldi	r31, 0x05	; 5
    206a:	93 e0       	ldi	r25, 0x03	; 3
    206c:	90 83       	st	Z, r25
    206e:	83 83       	std	Z+3, r24	; 0x03
    2070:	1f 92       	push	r1
    2072:	8f 93       	push	r24
    2074:	89 e5       	ldi	r24, 0x59	; 89
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	08 95       	ret
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	08 95       	ret

00002094 <servo_enable_try>:
    2094:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <servoD>
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	98 0f       	add	r25, r24
    209c:	92 30       	cpi	r25, 0x02	; 2
    209e:	28 f4       	brcc	.+10     	; 0x20aa <servo_enable_try+0x16>
    20a0:	e9 e2       	ldi	r30, 0x29	; 41
    20a2:	f5 e0       	ldi	r31, 0x05	; 5
    20a4:	81 83       	std	Z+1, r24	; 0x01
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	80 83       	st	Z, r24
    20aa:	08 95       	ret

000020ac <servo_get_try_cnt>:
    20ac:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <servoD+0x9>
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	08 95       	ret

000020b4 <servo_close>:
    20b4:	0e 94 24 10 	call	0x2048	; 0x2048 <servo_is_open>
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	c1 f0       	breq	.+48     	; 0x20ec <servo_close+0x38>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
    20c2:	e9 e2       	ldi	r30, 0x29	; 41
    20c4:	f5 e0       	ldi	r31, 0x05	; 5
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 83       	st	Z, r24
    20ca:	13 82       	std	Z+3, r1	; 0x03
    20cc:	1f 92       	push	r1
    20ce:	1f 92       	push	r1
    20d0:	80 e7       	ldi	r24, 0x70	; 112
    20d2:	92 e0       	ldi	r25, 0x02	; 2
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    20dc:	96 98       	cbi	0x12, 6	; 18
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	08 95       	ret
    20ec:	20 91 29 05 	lds	r18, 0x0529	; 0x800529 <servoD>
    20f0:	24 30       	cpi	r18, 0x04	; 4
    20f2:	21 f4       	brne	.+8      	; 0x20fc <servo_close+0x48>
    20f4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <servo_exit_try>
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	08 95       	ret

000020fe <servo_exit_try>:
    20fe:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <servoD+0x1>
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	29 f4       	brne	.+10     	; 0x2110 <servo_exit_try+0x12>
    2106:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <servoD>
    210a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <servo_close>
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <servo_exit_try+0x24>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	71 f4       	brne	.+28     	; 0x2130 <servo_exit_try+0x32>
    2114:	e9 e2       	ldi	r30, 0x29	; 41
    2116:	f5 e0       	ldi	r31, 0x05	; 5
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	80 83       	st	Z, r24
    211c:	83 81       	ldd	r24, Z+3	; 0x03
    211e:	0e 94 99 10 	call	0x2132	; 0x2132 <servo_open>
    2122:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <try_count>
    2126:	e9 e2       	ldi	r30, 0x29	; 41
    2128:	f5 e0       	ldi	r31, 0x05	; 5
    212a:	81 85       	ldd	r24, Z+9	; 0x09
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	81 87       	std	Z+9, r24	; 0x09
    2130:	08 95       	ret

00002132 <servo_open>:
    2132:	cf 93       	push	r28
    2134:	c8 2f       	mov	r28, r24
    2136:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <servoD>
    213a:	9f ef       	ldi	r25, 0xFF	; 255
    213c:	98 0f       	add	r25, r24
    213e:	93 30       	cpi	r25, 0x03	; 3
    2140:	c0 f4       	brcc	.+48     	; 0x2172 <servo_open+0x40>
    2142:	e9 e2       	ldi	r30, 0x29	; 41
    2144:	f5 e0       	ldi	r31, 0x05	; 5
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	80 83       	st	Z, r24
    214a:	c3 83       	std	Z+3, r28	; 0x03
    214c:	8c 2f       	mov	r24, r28
    214e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
    2152:	1f 92       	push	r1
    2154:	cf 93       	push	r28
    2156:	81 e8       	ldi	r24, 0x81	; 129
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	9f 93       	push	r25
    215c:	8f 93       	push	r24
    215e:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    2162:	96 9a       	sbi	0x12, 6	; 18
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	09 c0       	rjmp	.+18     	; 0x2184 <servo_open+0x52>
    2172:	84 30       	cpi	r24, 0x04	; 4
    2174:	29 f4       	brne	.+10     	; 0x2180 <servo_open+0x4e>
    2176:	0e 94 7f 10 	call	0x20fe	; 0x20fe <servo_exit_try>
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <servo_open+0x52>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    218e:	4b e4       	ldi	r20, 0x4B	; 75
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	86 e8       	ldi	r24, 0x86	; 134
    2198:	93 e0       	ldi	r25, 0x03	; 3
    219a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <evTime_process_period>
    219e:	89 2b       	or	r24, r25
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <servo_process+0x1c>
    21a2:	b6 c0       	rjmp	.+364    	; 0x2310 <servo_process+0x188>
	{
		switch(servoD.state)
    21a4:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <servoD>
    21a8:	84 30       	cpi	r24, 0x04	; 4
    21aa:	a1 f0       	breq	.+40     	; 0x21d4 <servo_process+0x4c>
    21ac:	30 f4       	brcc	.+12     	; 0x21ba <servo_process+0x32>
    21ae:	82 30       	cpi	r24, 0x02	; 2
    21b0:	59 f0       	breq	.+22     	; 0x21c8 <servo_process+0x40>
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <servo_process+0x30>
    21b6:	61 c0       	rjmp	.+194    	; 0x227a <servo_process+0xf2>
    21b8:	9b c0       	rjmp	.+310    	; 0x22f0 <servo_process+0x168>
    21ba:	85 30       	cpi	r24, 0x05	; 5
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <servo_process+0x38>
    21be:	77 c0       	rjmp	.+238    	; 0x22ae <servo_process+0x126>
    21c0:	86 30       	cpi	r24, 0x06	; 6
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <servo_process+0x3e>
    21c4:	91 c0       	rjmp	.+290    	; 0x22e8 <servo_process+0x160>
    21c6:	94 c0       	rjmp	.+296    	; 0x22f0 <servo_process+0x168>
		{
			case SERVO_OPEN:
			servoD.value = value;
    21c8:	c0 93 2c 05 	sts	0x052C, r28	; 0x80052c <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    21cc:	8c 2f       	mov	r24, r28
    21ce:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
			break;
    21d2:	8e c0       	rjmp	.+284    	; 0x22f0 <servo_process+0x168>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    21d4:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <try_count>
    21d8:	81 11       	cpse	r24, r1
    21da:	13 c0       	rjmp	.+38     	; 0x2202 <servo_process+0x7a>
	{
		evTime_start(&timeout, 100);
    21dc:	44 e6       	ldi	r20, 0x64	; 100
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	81 e8       	ldi	r24, 0x81	; 129
    21e6:	93 e0       	ldi	r25, 0x03	; 3
    21e8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
		try_count++;
    21ec:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <try_count>
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    21f6:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <servoD+0x3>
    21fa:	89 0f       	add	r24, r25
    21fc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
    2200:	28 c0       	rjmp	.+80     	; 0x2252 <servo_process+0xca>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    2202:	81 50       	subi	r24, 0x01	; 1
    2204:	89 30       	cpi	r24, 0x09	; 9
    2206:	c8 f4       	brcc	.+50     	; 0x223a <servo_process+0xb2>
	{
		if (evTime_check(&timeout) == 1)
    2208:	81 e8       	ldi	r24, 0x81	; 129
    220a:	93 e0       	ldi	r25, 0x03	; 3
    220c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f9 f4       	brne	.+62     	; 0x2252 <servo_process+0xca>
		{
			evTime_start(&timeout, 100);
    2214:	44 e6       	ldi	r20, 0x64	; 100
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	81 e8       	ldi	r24, 0x81	; 129
    221e:	93 e0       	ldi	r25, 0x03	; 3
    2220:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
			try_count++;
    2224:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <try_count>
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <try_count>
			servo_set_pwm_val(servoD.value + try_count);
    222e:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <servoD+0x3>
    2232:	89 0f       	add	r24, r25
    2234:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
    2238:	0c c0       	rjmp	.+24     	; 0x2252 <servo_process+0xca>
		}
	}
	else
	{
		try_count = 0;
    223a:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <try_count>
		servo_set_pwm_val(servoD.value);
    223e:	c9 e2       	ldi	r28, 0x29	; 41
    2240:	d5 e0       	ldi	r29, 0x05	; 5
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	88 83       	st	Y, r24
		servoD.try_cnt++;
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    2252:	20 91 2c 05 	lds	r18, 0x052C	; 0x80052c <servoD+0x3>
    2256:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <try_count>
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	82 0f       	add	r24, r18
    225e:	91 1d       	adc	r25, r1
    2260:	9f 93       	push	r25
    2262:	8f 93       	push	r24
    2264:	83 e9       	ldi	r24, 0x93	; 147
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
    226c:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	3b c0       	rjmp	.+118    	; 0x22f0 <servo_process+0x168>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    227a:	8c e7       	ldi	r24, 0x7C	; 124
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <evTime_is_stated>
    2282:	89 2b       	or	r24, r25
    2284:	59 f0       	breq	.+22     	; 0x229c <servo_process+0x114>
	{
		if (evTime_check(&timeout) == 1)
    2286:	8c e7       	ldi	r24, 0x7C	; 124
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	79 f5       	brne	.+94     	; 0x22f0 <servo_process+0x168>
		{
			servoD.state = SERVO_OPEN;
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <servoD>
			LED_SERVO_ON;
    2298:	96 9a       	sbi	0x12, 6	; 18
    229a:	2a c0       	rjmp	.+84     	; 0x22f0 <servo_process+0x168>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    229c:	40 ed       	ldi	r20, 0xD0	; 208
    229e:	57 e0       	ldi	r21, 0x07	; 7
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	8c e7       	ldi	r24, 0x7C	; 124
    22a6:	93 e0       	ldi	r25, 0x03	; 3
    22a8:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
    22ac:	21 c0       	rjmp	.+66     	; 0x22f0 <servo_process+0x168>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    22ae:	87 e7       	ldi	r24, 0x77	; 119
    22b0:	93 e0       	ldi	r25, 0x03	; 3
    22b2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <evTime_is_stated>
    22b6:	89 2b       	or	r24, r25
    22b8:	71 f0       	breq	.+28     	; 0x22d6 <servo_process+0x14e>
	{
		if (evTime_check(&timeout) == 1)
    22ba:	87 e7       	ldi	r24, 0x77	; 119
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	a9 f4       	brne	.+42     	; 0x22f0 <servo_process+0x168>
		{
			servoD.state = SERVO_ERROR;
    22c6:	86 e0       	ldi	r24, 0x06	; 6
    22c8:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    22cc:	8f e1       	ldi	r24, 0x1F	; 31
    22ce:	9e e4       	ldi	r25, 0x4E	; 78
    22d0:	9b bd       	out	0x2b, r25	; 43
    22d2:	8a bd       	out	0x2a, r24	; 42
    22d4:	0d c0       	rjmp	.+26     	; 0x22f0 <servo_process+0x168>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    22d6:	40 ed       	ldi	r20, 0xD0	; 208
    22d8:	57 e0       	ldi	r21, 0x07	; 7
    22da:	60 e0       	ldi	r22, 0x00	; 0
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	87 e7       	ldi	r24, 0x77	; 119
    22e0:	93 e0       	ldi	r25, 0x03	; 3
    22e2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <servo_process+0x168>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    22e8:	8f e1       	ldi	r24, 0x1F	; 31
    22ea:	9e e4       	ldi	r25, 0x4E	; 78
    22ec:	9b bd       	out	0x2b, r25	; 43
    22ee:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    22f0:	8d e2       	ldi	r24, 0x2D	; 45
    22f2:	95 e0       	ldi	r25, 0x05	; 5
    22f4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	51 f4       	brne	.+20     	; 0x2310 <servo_process+0x188>
		{
			servoD.try_cnt = 0;
    22fc:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    2300:	81 ea       	ldi	r24, 0xA1	; 161
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
		}
	}
}
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	08 95       	ret

00002316 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2316:	e1 ed       	ldi	r30, 0xD1	; 209
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	16 86       	std	Z+14, r1	; 0x0e
    231c:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    231e:	12 86       	std	Z+10, r1	; 0x0a
    2320:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    2322:	14 86       	std	Z+12, r1	; 0x0c
    2324:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2326:	e4 ea       	ldi	r30, 0xA4	; 164
    2328:	f4 e0       	ldi	r31, 0x04	; 4
    232a:	16 86       	std	Z+14, r1	; 0x0e
    232c:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    232e:	12 86       	std	Z+10, r1	; 0x0a
    2330:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    2332:	14 86       	std	Z+12, r1	; 0x0c
    2334:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2336:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <button3+0xc>
    233a:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <button3+0xb>
	
	button5.timer_callback = 0;
    233e:	e2 e8       	ldi	r30, 0x82	; 130
    2340:	f4 e0       	ldi	r31, 0x04	; 4
    2342:	16 86       	std	Z+14, r1	; 0x0e
    2344:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2346:	14 86       	std	Z+12, r1	; 0x0c
    2348:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    234a:	12 86       	std	Z+10, r1	; 0x0a
    234c:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    234e:	e2 ec       	ldi	r30, 0xC2	; 194
    2350:	f4 e0       	ldi	r31, 0x04	; 4
    2352:	16 86       	std	Z+14, r1	; 0x0e
    2354:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2356:	14 86       	std	Z+12, r1	; 0x0c
    2358:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    235a:	12 86       	std	Z+10, r1	; 0x0a
    235c:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    235e:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <button7+0xc>
    2362:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <button7+0xb>
	
	button8.fall_callback = 0;
    2366:	ef ee       	ldi	r30, 0xEF	; 239
    2368:	f4 e0       	ldi	r31, 0x04	; 4
    236a:	14 86       	std	Z+12, r1	; 0x0c
    236c:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    236e:	16 86       	std	Z+14, r1	; 0x0e
    2370:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    2372:	12 86       	std	Z+10, r1	; 0x0a
    2374:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2376:	e4 e6       	ldi	r30, 0x64	; 100
    2378:	f4 e0       	ldi	r31, 0x04	; 4
    237a:	14 86       	std	Z+12, r1	; 0x0c
    237c:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    237e:	16 86       	std	Z+14, r1	; 0x0e
    2380:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    2382:	12 86       	std	Z+10, r1	; 0x0a
    2384:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2386:	e3 e7       	ldi	r30, 0x73	; 115
    2388:	f4 e0       	ldi	r31, 0x04	; 4
    238a:	14 86       	std	Z+12, r1	; 0x0c
    238c:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    238e:	16 86       	std	Z+14, r1	; 0x0e
    2390:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    2392:	12 86       	std	Z+10, r1	; 0x0a
    2394:	11 86       	std	Z+9, r1	; 0x09
    2396:	08 95       	ret

00002398 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2398:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    239c:	82 30       	cpi	r24, 0x02	; 2
    239e:	49 f0       	breq	.+18     	; 0x23b2 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    23a0:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    23a4:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    23a8:	98 60       	ori	r25, 0x08	; 8
    23aa:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    23ae:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    23b2:	08 95       	ret

000023b4 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    23b4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    23b8:	82 30       	cpi	r24, 0x02	; 2
    23ba:	49 f0       	breq	.+18     	; 0x23ce <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    23bc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    23c0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    23c4:	80 68       	ori	r24, 0x80	; 128
    23c6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    23ca:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    23ce:	08 95       	ret

000023d0 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    23d0:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    23d4:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    23d8:	92 60       	ori	r25, 0x02	; 2
    23da:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    23de:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    23e2:	08 95       	ret

000023e4 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    23e4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    23e8:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    23ec:	99 7f       	andi	r25, 0xF9	; 249
    23ee:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    23f2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	counter_very_fast_motor_sub = 0;
    23f6:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <counter_very_fast_motor_sub>
    23fa:	08 95       	ret

000023fc <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    23fc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2400:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2404:	80 62       	ori	r24, 0x20	; 32
    2406:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    240a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    240e:	08 95       	ret

00002410 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2410:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2414:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2418:	8f 79       	andi	r24, 0x9F	; 159
    241a:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    241e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	counter_very_fast_motor_sub = 0;
    2422:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <counter_very_fast_motor_sub>
    2426:	08 95       	ret

00002428 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2428:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    242c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2430:	90 62       	ori	r25, 0x20	; 32
    2432:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    2436:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    243a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    243e:	8b 30       	cpi	r24, 0x0B	; 11
    2440:	18 f0       	brcs	.+6      	; 0x2448 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    2442:	81 50       	subi	r24, 0x01	; 1
    2444:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2448:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    245a:	08 95       	ret

0000245c <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    245c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2460:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2464:	90 62       	ori	r25, 0x20	; 32
    2466:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    246a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    246e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    2472:	83 36       	cpi	r24, 0x63	; 99
    2474:	18 f4       	brcc	.+6      	; 0x247c <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    247c:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    248e:	08 95       	ret

00002490 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2490:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2494:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2498:	90 62       	ori	r25, 0x20	; 32
    249a:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    249e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	if (motor_value > 10)
    24a2:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <motor_value>
    24a6:	8b 30       	cpi	r24, 0x0B	; 11
    24a8:	18 f0       	brcs	.+6      	; 0x24b0 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    24b0:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <disp_get_state>
    24c0:	02 97       	sbiw	r24, 0x02	; 2
    24c2:	29 f4       	brne	.+10     	; 0x24ce <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    24c4:	61 e0       	ldi	r22, 0x01	; 1
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
	state_measure_volt++;
    24d6:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <state_measure_volt>
	if (state_measure_volt == 2)
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	19 f4       	brne	.+6      	; 0x24ea <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    24e4:	66 e0       	ldi	r22, 0x06	; 6
    24e6:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    24ea:	08 95       	ret

000024ec <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    24ec:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    24f0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    24f4:	90 62       	ori	r25, 0x20	; 32
    24f6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    24fa:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	if (motor_value < 99)
    24fe:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <motor_value>
    2502:	83 36       	cpi	r24, 0x63	; 99
    2504:	18 f4       	brcc	.+6      	; 0x250c <button_motor_add_fall_cb+0x20>
		motor_value++;
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    250c:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <disp_get_state>
    251c:	02 97       	sbiw	r24, 0x02	; 2
    251e:	29 f4       	brne	.+10     	; 0x252a <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
	state_measure_volt++;
    2532:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    2536:	8f 5f       	subi	r24, 0xFF	; 255
    2538:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <state_measure_volt>
	if (state_measure_volt == 2)
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	19 f4       	brne	.+6      	; 0x2546 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2540:	66 e0       	ldi	r22, 0x06	; 6
    2542:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    2546:	08 95       	ret

00002548 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2548:	0e 94 03 08 	call	0x1006	; 0x1006 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    254c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2550:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2554:	97 7e       	andi	r25, 0xE7	; 231
    2556:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    255a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	counter_very_fast_motor_sub = 0;
    255e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2562:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    2566:	88 23       	and	r24, r24
    2568:	19 f0       	breq	.+6      	; 0x2570 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <disp_get_state>
    2576:	02 97       	sbiw	r24, 0x02	; 2
    2578:	29 f4       	brne	.+10     	; 0x2584 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    2582:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    258c:	08 95       	ret

0000258e <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    258e:	0e 94 03 08 	call	0x1006	; 0x1006 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2592:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2596:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    259a:	8f 77       	andi	r24, 0x7F	; 127
    259c:	9e 7f       	andi	r25, 0xFE	; 254
    259e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    25a2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	counter_very_fast_motor_sub = 0;
    25a6:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    25aa:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <state_measure_volt>
    25ae:	88 23       	and	r24, r24
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    25b2:	81 50       	subi	r24, 0x01	; 1
    25b4:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <disp_get_state>
    25be:	02 97       	sbiw	r24, 0x02	; 2
    25c0:	29 f4       	brne	.+10     	; 0x25cc <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    25ca:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
    25d4:	08 95       	ret

000025d6 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    25d6:	e5 e3       	ldi	r30, 0x35	; 53
    25d8:	f5 e0       	ldi	r31, 0x05	; 5
    25da:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <motor_value>
    25de:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    25e0:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    25e4:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    25e6:	bf 01       	movw	r22, r30
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <mem_save_data>
    25ee:	08 95       	ret

000025f0 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    25f0:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    25f4:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    25f8:	90 62       	ori	r25, 0x20	; 32
    25fa:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    25fe:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	if (motor_value < 10)
    2602:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <motor_value>
    2606:	8a 30       	cpi	r24, 0x0A	; 10
    2608:	38 f4       	brcc	.+14     	; 0x2618 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    260a:	8a e0       	ldi	r24, 0x0A	; 10
    260c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2610:	6a e0       	ldi	r22, 0x0A	; 10
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	}
	sys_save_display();
    2618:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <sys_save_display>
	if(!dcmotor_is_on())
    261c:	0e 94 96 05 	call	0xb2c	; 0xb2c <dcmotor_is_on>
    2620:	89 2b       	or	r24, r25
    2622:	39 f4       	brne	.+14     	; 0x2632 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2624:	0e 94 b9 05 	call	0xb72	; 0xb72 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2628:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    262c:	0e 94 2f 10 	call	0x205e	; 0x205e <servo_delayed_open>
    2630:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2632:	0e 94 a1 05 	call	0xb42	; 0xb42 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2636:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <servo_close>
    263a:	08 95       	ret

0000263c <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    263c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2640:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2644:	90 62       	ori	r25, 0x20	; 32
    2646:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    264a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
	if (servo_vibro_value < 10)
    264e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    2652:	8a 30       	cpi	r24, 0x0A	; 10
    2654:	38 f4       	brcc	.+14     	; 0x2664 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2656:	8a e0       	ldi	r24, 0x0A	; 10
    2658:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    265c:	6a e0       	ldi	r22, 0x0A	; 10
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2664:	0e 94 24 10 	call	0x2048	; 0x2048 <servo_is_open>
    2668:	89 2b       	or	r24, r25
    266a:	19 f0       	breq	.+6      	; 0x2672 <button_on_off_pwm+0x36>
    266c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <servo_close>
    2670:	08 95       	ret
	else servo_open(servo_vibro_value);
    2672:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <servo_vibro_value>
    2676:	0e 94 99 10 	call	0x2132	; 0x2132 <servo_open>
    267a:	08 95       	ret

0000267c <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    267c:	83 ee       	ldi	r24, 0xE3	; 227
    267e:	93 e1       	ldi	r25, 0x13	; 19
    2680:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <button4+0xa>
    2684:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2690:	63 e3       	ldi	r22, 0x33	; 51
    2692:	75 e0       	ldi	r23, 0x05	; 5
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    269a:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <mem_last_save+0x1>
    269e:	96 ef       	ldi	r25, 0xF6	; 246
    26a0:	98 0f       	add	r25, r24
    26a2:	9a 35       	cpi	r25, 0x5A	; 90
    26a4:	10 f4       	brcc	.+4      	; 0x26aa <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    26a6:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    26aa:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <mem_last_save>
    26ae:	96 ef       	ldi	r25, 0xF6	; 246
    26b0:	98 0f       	add	r25, r24
    26b2:	9a 35       	cpi	r25, 0x5A	; 90
    26b4:	10 f4       	brcc	.+4      	; 0x26ba <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    26b6:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <motor_value>
    26ba:	08 95       	ret

000026bc <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    26bc:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    26c0:	42 e0       	ldi	r20, 0x02	; 2
    26c2:	68 ee       	ldi	r22, 0xE8	; 232
    26c4:	73 e0       	ldi	r23, 0x03	; 3
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 97 09 	call	0x132e	; 0x132e <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    26ce:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <servo_init>
	#endif
	error_init();
    26d8:	0e 94 5f 0a 	call	0x14be	; 0x14be <error_init>
	init_measure();
    26dc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <init_measure>
	init_buzzer();
    26e0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    26ec:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    26f0:	e1 ed       	ldi	r30, 0xD1	; 209
    26f2:	f4 e0       	ldi	r31, 0x04	; 4
    26f4:	8c ec       	ldi	r24, 0xCC	; 204
    26f6:	91 e1       	ldi	r25, 0x11	; 17
    26f8:	96 87       	std	Z+14, r25	; 0x0e
    26fa:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    26fc:	88 e4       	ldi	r24, 0x48	; 72
    26fe:	92 e1       	ldi	r25, 0x12	; 18
    2700:	94 87       	std	Z+12, r25	; 0x0c
    2702:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2704:	84 ea       	ldi	r24, 0xA4	; 164
    2706:	92 e1       	ldi	r25, 0x12	; 18
    2708:	92 87       	std	Z+10, r25	; 0x0a
    270a:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    270c:	e4 ea       	ldi	r30, 0xA4	; 164
    270e:	f4 e0       	ldi	r31, 0x04	; 4
    2710:	8a ed       	ldi	r24, 0xDA	; 218
    2712:	91 e1       	ldi	r25, 0x11	; 17
    2714:	96 87       	std	Z+14, r25	; 0x0e
    2716:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2718:	86 e7       	ldi	r24, 0x76	; 118
    271a:	92 e1       	ldi	r25, 0x12	; 18
    271c:	94 87       	std	Z+12, r25	; 0x0c
    271e:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2720:	87 ec       	ldi	r24, 0xC7	; 199
    2722:	92 e1       	ldi	r25, 0x12	; 18
    2724:	92 87       	std	Z+10, r25	; 0x0a
    2726:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2728:	88 ef       	ldi	r24, 0xF8	; 248
    272a:	92 e1       	ldi	r25, 0x12	; 18
    272c:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <button3+0xc>
    2730:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2734:	e2 e8       	ldi	r30, 0x82	; 130
    2736:	f4 e0       	ldi	r31, 0x04	; 4
    2738:	88 ee       	ldi	r24, 0xE8	; 232
    273a:	91 e1       	ldi	r25, 0x11	; 17
    273c:	96 87       	std	Z+14, r25	; 0x0e
    273e:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2740:	82 ef       	ldi	r24, 0xF2	; 242
    2742:	91 e1       	ldi	r25, 0x11	; 17
    2744:	92 87       	std	Z+10, r25	; 0x0a
    2746:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2748:	84 e1       	ldi	r24, 0x14	; 20
    274a:	92 e1       	ldi	r25, 0x12	; 18
    274c:	94 87       	std	Z+12, r25	; 0x0c
    274e:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2750:	e2 ec       	ldi	r30, 0xC2	; 194
    2752:	f4 e0       	ldi	r31, 0x04	; 4
    2754:	8e ef       	ldi	r24, 0xFE	; 254
    2756:	91 e1       	ldi	r25, 0x11	; 17
    2758:	96 87       	std	Z+14, r25	; 0x0e
    275a:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    275c:	88 e0       	ldi	r24, 0x08	; 8
    275e:	92 e1       	ldi	r25, 0x12	; 18
    2760:	92 87       	std	Z+10, r25	; 0x0a
    2762:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2764:	8e e2       	ldi	r24, 0x2E	; 46
    2766:	92 e1       	ldi	r25, 0x12	; 18
    2768:	94 87       	std	Z+12, r25	; 0x0c
    276a:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    276c:	8e e1       	ldi	r24, 0x1E	; 30
    276e:	93 e1       	ldi	r25, 0x13	; 19
    2770:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <button7+0xc>
    2774:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2778:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2782:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
    278c:	08 95       	ret

0000278e <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    278e:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <state_measure_volt>
	dcmotorpwm_deinit();
    2792:	0e 94 90 05 	call	0xb20	; 0xb20 <dcmotorpwm_deinit>
	off_button();
    2796:	0e 94 8b 11 	call	0x2316	; 0x2316 <off_button>
	error_deinit();
    279a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    279e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    27a2:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <system_events+0x1>
    27a6:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	0e 94 14 08 	call	0x1028	; 0x1028 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    27b2:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    27b6:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    27ba:	8e 7f       	andi	r24, 0xFE	; 254
    27bc:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    27c0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    27c4:	08 95       	ret

000027c6 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    27c6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    27ca:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    27ce:	80 ff       	sbrs	r24, 0
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <button4_toggle_system+0x12>
	{
		off_system();
    27d2:	0e 94 c7 13 	call	0x278e	; 0x278e <off_system>
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    27d8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <on_system>
	}
	ON_BUZZ_SIGNAL;
    27dc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    27e0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    27e4:	90 62       	ori	r25, 0x20	; 32
    27e6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    27ea:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
    27ee:	08 95       	ret

000027f0 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    27f0:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    27f4:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    27f8:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    27fc:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    2800:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <disp_fast_timer.2074>
    2804:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <disp_fast_timer.2074+0x1>
    2808:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <disp_fast_timer.2074+0x2>
    280c:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <disp_fast_timer.2074+0x3>
    2810:	84 17       	cp	r24, r20
    2812:	95 07       	cpc	r25, r21
    2814:	a6 07       	cpc	r26, r22
    2816:	b7 07       	cpc	r27, r23
    2818:	08 f0       	brcs	.+2      	; 0x281c <disp_fast_process+0x2c>
    281a:	9c c0       	rjmp	.+312    	; 0x2954 <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    281c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2820:	85 ff       	sbrs	r24, 5
    2822:	1d c0       	rjmp	.+58     	; 0x285e <disp_fast_process+0x6e>
    2824:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    2828:	63 36       	cpi	r22, 0x63	; 99
    282a:	c8 f4       	brcc	.+50     	; 0x285e <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    282c:	6f 5f       	subi	r22, 0xFF	; 255
    282e:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <servo_vibro_value>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2838:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <counter_very_fast_servo_add>
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2842:	8f 30       	cpi	r24, 0x0F	; 15
    2844:	60 f0       	brcs	.+24     	; 0x285e <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2846:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    284a:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    284e:	8f 7d       	andi	r24, 0xDF	; 223
    2850:	80 64       	ori	r24, 0x40	; 64
    2852:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    2856:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
				counter_very_fast_servo_add = 0;
    285a:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    285e:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2862:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2866:	91 ff       	sbrs	r25, 1
    2868:	1d c0       	rjmp	.+58     	; 0x28a4 <disp_fast_process+0xb4>
    286a:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    286e:	66 23       	and	r22, r22
    2870:	c9 f0       	breq	.+50     	; 0x28a4 <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2872:	61 50       	subi	r22, 0x01	; 1
    2874:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <servo_vibro_value>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    287e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <counter_very_fast_servo_sub>
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2888:	8f 30       	cpi	r24, 0x0F	; 15
    288a:	60 f0       	brcs	.+24     	; 0x28a4 <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    288c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2890:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    2894:	9d 7f       	andi	r25, 0xFD	; 253
    2896:	94 60       	ori	r25, 0x04	; 4
    2898:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    289c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
				counter_very_fast_servo_sub = 0;
    28a0:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    28a4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    28a8:	87 ff       	sbrs	r24, 7
    28aa:	1d c0       	rjmp	.+58     	; 0x28e6 <disp_fast_process+0xf6>
    28ac:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    28b0:	63 36       	cpi	r22, 0x63	; 99
    28b2:	c8 f4       	brcc	.+50     	; 0x28e6 <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    28b4:	6f 5f       	subi	r22, 0xFF	; 255
    28b6:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <motor_value>
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			counter_very_fast_motor_add++;
    28c0:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <counter_very_fast_motor_add>
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    28ca:	8f 30       	cpi	r24, 0x0F	; 15
    28cc:	60 f0       	brcs	.+24     	; 0x28e6 <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    28ce:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    28d2:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    28d6:	8f 77       	andi	r24, 0x7F	; 127
    28d8:	91 60       	ori	r25, 0x01	; 1
    28da:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    28de:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
				counter_very_fast_motor_add = 0;
    28e2:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    28e6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    28ea:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    28ee:	93 ff       	sbrs	r25, 3
    28f0:	1d c0       	rjmp	.+58     	; 0x292c <disp_fast_process+0x13c>
    28f2:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    28f6:	6b 30       	cpi	r22, 0x0B	; 11
    28f8:	c8 f0       	brcs	.+50     	; 0x292c <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    28fa:	61 50       	subi	r22, 0x01	; 1
    28fc:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <motor_value>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			counter_very_fast_motor_sub++;
    2906:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <counter_very_fast_motor_sub>
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2910:	8f 30       	cpi	r24, 0x0F	; 15
    2912:	60 f0       	brcs	.+24     	; 0x292c <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2914:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    2918:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    291c:	97 7f       	andi	r25, 0xF7	; 247
    291e:	90 61       	ori	r25, 0x10	; 16
    2920:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <system_events+0x1>
    2924:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <system_events>
				counter_very_fast_motor_sub = 0;
    2928:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    292c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <disp_fast_timer.2074>
    2930:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <disp_fast_timer.2074+0x1>
    2934:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <disp_fast_timer.2074+0x2>
    2938:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <disp_fast_timer.2074+0x3>
    293c:	80 5b       	subi	r24, 0xB0	; 176
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	af 4f       	sbci	r26, 0xFF	; 255
    2942:	bf 4f       	sbci	r27, 0xFF	; 255
    2944:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <disp_fast_timer.2074>
    2948:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <disp_fast_timer.2074+0x1>
    294c:	a0 93 8e 03 	sts	0x038E, r26	; 0x80038e <disp_fast_timer.2074+0x2>
    2950:	b0 93 8f 03 	sts	0x038F, r27	; 0x80038f <disp_fast_timer.2074+0x3>
    2954:	08 95       	ret

00002956 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2956:	40 91 39 05 	lds	r20, 0x0539	; 0x800539 <mktime+0x2>
    295a:	50 91 3a 05 	lds	r21, 0x053A	; 0x80053a <mktime+0x3>
    295e:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <mktime+0x4>
    2962:	70 91 3c 05 	lds	r23, 0x053C	; 0x80053c <mktime+0x5>
    2966:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <disp_very_fast_timer>
    296a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <disp_very_fast_timer+0x1>
    296e:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <disp_very_fast_timer+0x2>
    2972:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <disp_very_fast_timer+0x3>
    2976:	84 17       	cp	r24, r20
    2978:	95 07       	cpc	r25, r21
    297a:	a6 07       	cpc	r26, r22
    297c:	b7 07       	cpc	r27, r23
    297e:	08 f0       	brcs	.+2      	; 0x2982 <disp_very_fast_process+0x2c>
    2980:	51 c0       	rjmp	.+162    	; 0x2a24 <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2982:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    2986:	63 36       	cpi	r22, 0x63	; 99
    2988:	50 f4       	brcc	.+20     	; 0x299e <disp_very_fast_process+0x48>
    298a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    298e:	86 ff       	sbrs	r24, 6
    2990:	06 c0       	rjmp	.+12     	; 0x299e <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2992:	6f 5f       	subi	r22, 0xFF	; 255
    2994:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <servo_vibro_value>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    299e:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <servo_vibro_value>
    29a2:	66 23       	and	r22, r22
    29a4:	61 f0       	breq	.+24     	; 0x29be <disp_very_fast_process+0x68>
    29a6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    29aa:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    29ae:	92 ff       	sbrs	r25, 2
    29b0:	06 c0       	rjmp	.+12     	; 0x29be <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    29b2:	61 50       	subi	r22, 0x01	; 1
    29b4:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <servo_vibro_value>
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    29be:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    29c2:	63 36       	cpi	r22, 0x63	; 99
    29c4:	60 f4       	brcc	.+24     	; 0x29de <disp_very_fast_process+0x88>
    29c6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    29ca:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    29ce:	90 ff       	sbrs	r25, 0
    29d0:	06 c0       	rjmp	.+12     	; 0x29de <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    29d2:	6f 5f       	subi	r22, 0xFF	; 255
    29d4:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <motor_value>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    29de:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <motor_value>
    29e2:	6b 30       	cpi	r22, 0x0B	; 11
    29e4:	60 f0       	brcs	.+24     	; 0x29fe <disp_very_fast_process+0xa8>
    29e6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <system_events>
    29ea:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <system_events+0x1>
    29ee:	94 ff       	sbrs	r25, 4
    29f0:	06 c0       	rjmp	.+12     	; 0x29fe <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    29f2:	61 50       	subi	r22, 0x01	; 1
    29f4:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <motor_value>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    29fe:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <disp_very_fast_timer>
    2a02:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <disp_very_fast_timer+0x1>
    2a06:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <disp_very_fast_timer+0x2>
    2a0a:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <disp_very_fast_timer+0x3>
    2a0e:	4e 96       	adiw	r24, 0x1e	; 30
    2a10:	a1 1d       	adc	r26, r1
    2a12:	b1 1d       	adc	r27, r1
    2a14:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <disp_very_fast_timer>
    2a18:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <disp_very_fast_timer+0x1>
    2a1c:	a0 93 92 03 	sts	0x0392, r26	; 0x800392 <disp_very_fast_timer+0x2>
    2a20:	b0 93 93 03 	sts	0x0393, r27	; 0x800393 <disp_very_fast_timer+0x3>
    2a24:	08 95       	ret

00002a26 <system_error>:
}


void system_error(void)
{
	off_button();
    2a26:	0e 94 8b 11 	call	0x2316	; 0x2316 <off_button>
    2a2a:	08 95       	ret

00002a2c <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31
    2a4e:	e7 e3       	ldi	r30, 0x37	; 55
    2a50:	f5 e0       	ldi	r31, 0x05	; 5
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	c2 96       	adiw	r24, 0x32	; 50
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	88 3e       	cpi	r24, 0xE8	; 232
    2a62:	93 40       	sbci	r25, 0x03	; 3
    2a64:	88 f0       	brcs	.+34     	; 0x2a88 <__vector_10+0x5c>
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	a4 81       	ldd	r26, Z+4	; 0x04
    2a6c:	b5 81       	ldd	r27, Z+5	; 0x05
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	a1 1d       	adc	r26, r1
    2a72:	b1 1d       	adc	r27, r1
    2a74:	82 83       	std	Z+2, r24	; 0x02
    2a76:	93 83       	std	Z+3, r25	; 0x03
    2a78:	a4 83       	std	Z+4, r26	; 0x04
    2a7a:	b5 83       	std	Z+5, r27	; 0x05
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	88 5e       	subi	r24, 0xE8	; 232
    2a82:	93 40       	sbci	r25, 0x03	; 3
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	89 e9       	ldi	r24, 0x99	; 153
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	0e 94 72 07 	call	0xee4	; 0xee4 <display_process>
    2a90:	ff 91       	pop	r31
    2a92:	ef 91       	pop	r30
    2a94:	bf 91       	pop	r27
    2a96:	af 91       	pop	r26
    2a98:	9f 91       	pop	r25
    2a9a:	8f 91       	pop	r24
    2a9c:	7f 91       	pop	r23
    2a9e:	6f 91       	pop	r22
    2aa0:	5f 91       	pop	r21
    2aa2:	4f 91       	pop	r20
    2aa4:	3f 91       	pop	r19
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0f 90       	pop	r0
    2aae:	1f 90       	pop	r1
    2ab0:	18 95       	reti

00002ab2 <timer0_init>:
    2ab2:	93 b7       	in	r25, 0x33	; 51
    2ab4:	98 60       	ori	r25, 0x08	; 8
    2ab6:	93 bf       	out	0x33, r25	; 51
    2ab8:	6c bf       	out	0x3c, r22	; 60
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	99 f0       	breq	.+38     	; 0x2ae4 <timer0_init+0x32>
    2abe:	28 f4       	brcc	.+10     	; 0x2aca <timer0_init+0x18>
    2ac0:	88 23       	and	r24, r24
    2ac2:	41 f0       	breq	.+16     	; 0x2ad4 <timer0_init+0x22>
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	51 f0       	breq	.+20     	; 0x2adc <timer0_init+0x2a>
    2ac8:	19 c0       	rjmp	.+50     	; 0x2afc <timer0_init+0x4a>
    2aca:	83 30       	cpi	r24, 0x03	; 3
    2acc:	79 f0       	breq	.+30     	; 0x2aec <timer0_init+0x3a>
    2ace:	84 30       	cpi	r24, 0x04	; 4
    2ad0:	89 f0       	breq	.+34     	; 0x2af4 <timer0_init+0x42>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <timer0_init+0x4a>
    2ad4:	83 b7       	in	r24, 0x33	; 51
    2ad6:	81 60       	ori	r24, 0x01	; 1
    2ad8:	83 bf       	out	0x33, r24	; 51
    2ada:	13 c0       	rjmp	.+38     	; 0x2b02 <timer0_init+0x50>
    2adc:	83 b7       	in	r24, 0x33	; 51
    2ade:	82 60       	ori	r24, 0x02	; 2
    2ae0:	83 bf       	out	0x33, r24	; 51
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <timer0_init+0x50>
    2ae4:	83 b7       	in	r24, 0x33	; 51
    2ae6:	83 60       	ori	r24, 0x03	; 3
    2ae8:	83 bf       	out	0x33, r24	; 51
    2aea:	0b c0       	rjmp	.+22     	; 0x2b02 <timer0_init+0x50>
    2aec:	83 b7       	in	r24, 0x33	; 51
    2aee:	84 60       	ori	r24, 0x04	; 4
    2af0:	83 bf       	out	0x33, r24	; 51
    2af2:	07 c0       	rjmp	.+14     	; 0x2b02 <timer0_init+0x50>
    2af4:	83 b7       	in	r24, 0x33	; 51
    2af6:	85 60       	ori	r24, 0x05	; 5
    2af8:	83 bf       	out	0x33, r24	; 51
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <timer0_init+0x50>
    2afc:	83 b7       	in	r24, 0x33	; 51
    2afe:	81 60       	ori	r24, 0x01	; 1
    2b00:	83 bf       	out	0x33, r24	; 51
    2b02:	89 b7       	in	r24, 0x39	; 57
    2b04:	82 60       	ori	r24, 0x02	; 2
    2b06:	89 bf       	out	0x39, r24	; 57
    2b08:	08 95       	ret

00002b0a <evTime_init>:
    2b0a:	23 e0       	ldi	r18, 0x03	; 3
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	24 83       	std	Z+4, r18	; 0x04
    2b10:	10 82       	st	Z, r1
    2b12:	11 82       	std	Z+1, r1	; 0x01
    2b14:	12 82       	std	Z+2, r1	; 0x02
    2b16:	13 82       	std	Z+3, r1	; 0x03
    2b18:	08 95       	ret

00002b1a <evTime_start>:
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	21 e0       	ldi	r18, 0x01	; 1
    2b20:	fc 01       	movw	r30, r24
    2b22:	24 83       	std	Z+4, r18	; 0x04
    2b24:	00 91 39 05 	lds	r16, 0x0539	; 0x800539 <mktime+0x2>
    2b28:	10 91 3a 05 	lds	r17, 0x053A	; 0x80053a <mktime+0x3>
    2b2c:	20 91 3b 05 	lds	r18, 0x053B	; 0x80053b <mktime+0x4>
    2b30:	30 91 3c 05 	lds	r19, 0x053C	; 0x80053c <mktime+0x5>
    2b34:	40 0f       	add	r20, r16
    2b36:	51 1f       	adc	r21, r17
    2b38:	62 1f       	adc	r22, r18
    2b3a:	73 1f       	adc	r23, r19
    2b3c:	40 83       	st	Z, r20
    2b3e:	51 83       	std	Z+1, r21	; 0x01
    2b40:	62 83       	std	Z+2, r22	; 0x02
    2b42:	73 83       	std	Z+3, r23	; 0x03
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <evTime_is_stated>:
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	fc 01       	movw	r30, r24
    2b50:	84 81       	ldd	r24, Z+4	; 0x04
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	11 f0       	breq	.+4      	; 0x2b5a <evTime_is_stated+0x10>
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	08 95       	ret

00002b5e <evTime_check>:

int evTime_check(evTime * evt)
{
    2b5e:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2b60:	84 81       	ldd	r24, Z+4	; 0x04
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	b1 f4       	brne	.+44     	; 0x2b92 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2b66:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <mktime+0x2>
    2b6a:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <mktime+0x3>
    2b6e:	a0 91 3b 05 	lds	r26, 0x053B	; 0x80053b <mktime+0x4>
    2b72:	b0 91 3c 05 	lds	r27, 0x053C	; 0x80053c <mktime+0x5>
    2b76:	40 81       	ld	r20, Z
    2b78:	51 81       	ldd	r21, Z+1	; 0x01
    2b7a:	62 81       	ldd	r22, Z+2	; 0x02
    2b7c:	73 81       	ldd	r23, Z+3	; 0x03
    2b7e:	48 17       	cp	r20, r24
    2b80:	59 07       	cpc	r21, r25
    2b82:	6a 07       	cpc	r22, r26
    2b84:	7b 07       	cpc	r23, r27
    2b86:	40 f4       	brcc	.+16     	; 0x2b98 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	9f ef       	ldi	r25, 0xFF	; 255
    2b96:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2b9c:	08 95       	ret

00002b9e <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2b9e:	21 e0       	ldi	r18, 0x01	; 1
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	84 81       	ldd	r24, Z+4	; 0x04
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	11 f0       	breq	.+4      	; 0x2bae <evTime_off+0x10>
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
}
    2bae:	c9 01       	movw	r24, r18
    2bb0:	08 95       	ret

00002bb2 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	ec 01       	movw	r28, r24
    2bc4:	6a 01       	movw	r12, r20
    2bc6:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bca:	81 11       	cpse	r24, r1
    2bcc:	06 c0       	rjmp	.+12     	; 0x2bda <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2bd2:	18 82       	st	Y, r1
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	1a 82       	std	Y+2, r1	; 0x02
    2bd8:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2bda:	ce 01       	movw	r24, r28
    2bdc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <evTime_check>
    2be0:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	31 f4       	brne	.+12     	; 0x2bf2 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2be6:	b7 01       	movw	r22, r14
    2be8:	a6 01       	movw	r20, r12
    2bea:	ce 01       	movw	r24, r28
    2bec:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
		return 1;
    2bf0:	0d c0       	rjmp	.+26     	; 0x2c0c <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf4:	83 30       	cpi	r24, 0x03	; 3
    2bf6:	41 f4       	brne	.+16     	; 0x2c08 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	a6 01       	movw	r20, r12
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <evTime_start>
	}
	return 0;
    2c02:	00 e0       	ldi	r16, 0x00	; 0
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <evTime_process_period+0x5a>
    2c08:	00 e0       	ldi	r16, 0x00	; 0
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
}
    2c0c:	c8 01       	movw	r24, r16
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	08 95       	ret

00002c20 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    2c20:	1f 92       	push	r1
    2c22:	0f 92       	push	r0
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	0f 92       	push	r0
    2c28:	11 24       	eor	r1, r1
    2c2a:	2f 93       	push	r18
    2c2c:	3f 93       	push	r19
    2c2e:	4f 93       	push	r20
    2c30:	5f 93       	push	r21
    2c32:	8f 93       	push	r24
    2c34:	9f 93       	push	r25
    2c36:	ef 93       	push	r30
    2c38:	ff 93       	push	r31
    2c3a:	2b b1       	in	r18, 0x0b	; 11
    2c3c:	3c b1       	in	r19, 0x0c	; 12
    2c3e:	28 71       	andi	r18, 0x18	; 24
    2c40:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <UART_RxHead>
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <UART_RxTail>
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	84 17       	cp	r24, r20
    2c50:	95 07       	cpc	r25, r21
    2c52:	39 f0       	breq	.+14     	; 0x2c62 <__vector_13+0x42>
    2c54:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <UART_RxHead>
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e0 56       	subi	r30, 0x60	; 96
    2c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c5e:	30 83       	st	Z, r19
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <__vector_13+0x44>
    2c62:	22 e0       	ldi	r18, 0x02	; 2
    2c64:	20 93 9b 03 	sts	0x039B, r18	; 0x80039b <UART_LastRxError>
    2c68:	ff 91       	pop	r31
    2c6a:	ef 91       	pop	r30
    2c6c:	9f 91       	pop	r25
    2c6e:	8f 91       	pop	r24
    2c70:	5f 91       	pop	r21
    2c72:	4f 91       	pop	r20
    2c74:	3f 91       	pop	r19
    2c76:	2f 91       	pop	r18
    2c78:	0f 90       	pop	r0
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	0f 90       	pop	r0
    2c7e:	1f 90       	pop	r1
    2c80:	18 95       	reti

00002c82 <__vector_14>:
    2c82:	1f 92       	push	r1
    2c84:	0f 92       	push	r0
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	0f 92       	push	r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	8f 93       	push	r24
    2c8e:	9f 93       	push	r25
    2c90:	ef 93       	push	r30
    2c92:	ff 93       	push	r31
    2c94:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <UART_TxHead>
    2c98:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <UART_TxTail>
    2c9c:	98 17       	cp	r25, r24
    2c9e:	71 f0       	breq	.+28     	; 0x2cbc <__vector_14+0x3a>
    2ca0:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <UART_TxTail>
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	8f 77       	andi	r24, 0x7F	; 127
    2caa:	99 27       	eor	r25, r25
    2cac:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <UART_TxTail>
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	e0 56       	subi	r30, 0x60	; 96
    2cb4:	fc 4f       	sbci	r31, 0xFC	; 252
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8c b9       	out	0x0c, r24	; 12
    2cba:	01 c0       	rjmp	.+2      	; 0x2cbe <__vector_14+0x3c>
    2cbc:	55 98       	cbi	0x0a, 5	; 10
    2cbe:	ff 91       	pop	r31
    2cc0:	ef 91       	pop	r30
    2cc2:	9f 91       	pop	r25
    2cc4:	8f 91       	pop	r24
    2cc6:	0f 90       	pop	r0
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	0f 90       	pop	r0
    2ccc:	1f 90       	pop	r1
    2cce:	18 95       	reti

00002cd0 <uart0_init>:
    2cd0:	f8 94       	cli
    2cd2:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <UART_TxHead>
    2cd6:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <UART_TxTail>
    2cda:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <UART_RxHead>
    2cde:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <UART_RxTail>
    2ce2:	78 94       	sei
    2ce4:	99 23       	and	r25, r25
    2ce6:	1c f4       	brge	.+6      	; 0x2cee <uart0_init+0x1e>
    2ce8:	22 e0       	ldi	r18, 0x02	; 2
    2cea:	2b b9       	out	0x0b, r18	; 11
    2cec:	9f 77       	andi	r25, 0x7F	; 127
    2cee:	90 bd       	out	0x20, r25	; 32
    2cf0:	89 b9       	out	0x09, r24	; 9
    2cf2:	88 e9       	ldi	r24, 0x98	; 152
    2cf4:	8a b9       	out	0x0a, r24	; 10
    2cf6:	86 e8       	ldi	r24, 0x86	; 134
    2cf8:	80 bd       	out	0x20, r24	; 32
    2cfa:	08 95       	ret

00002cfc <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    2cfc:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <UART_TxHead>
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	4f 5f       	subi	r20, 0xFF	; 255
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255
    2d06:	4f 77       	andi	r20, 0x7F	; 127
    2d08:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    2d0a:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <UART_TxTail>
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	42 17       	cp	r20, r18
    2d12:	53 07       	cpc	r21, r19
    2d14:	d1 f3       	breq	.-12     	; 0x2d0a <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    2d16:	fa 01       	movw	r30, r20
    2d18:	e0 56       	subi	r30, 0x60	; 96
    2d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d1c:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    2d1e:	40 93 9f 03 	sts	0x039F, r20	; 0x80039f <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2d22:	55 9a       	sbi	0x0a, 5	; 10
    2d24:	08 95       	ret

00002d26 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	ec 01       	movw	r28, r24
	while (*s) {
    2d2c:	88 81       	ld	r24, Y
    2d2e:	88 23       	and	r24, r24
    2d30:	31 f0       	breq	.+12     	; 0x2d3e <uart0_puts+0x18>
    2d32:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    2d34:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    2d38:	89 91       	ld	r24, Y+
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	fb cf       	rjmp	.-10     	; 0x2d34 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	08 95       	ret

00002d44 <__subsf3>:
    2d44:	50 58       	subi	r21, 0x80	; 128

00002d46 <__addsf3>:
    2d46:	bb 27       	eor	r27, r27
    2d48:	aa 27       	eor	r26, r26
    2d4a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__addsf3x>
    2d4e:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__fp_round>
    2d52:	0e 94 26 18 	call	0x304c	; 0x304c <__fp_pscA>
    2d56:	38 f0       	brcs	.+14     	; 0x2d66 <__addsf3+0x20>
    2d58:	0e 94 2d 18 	call	0x305a	; 0x305a <__fp_pscB>
    2d5c:	20 f0       	brcs	.+8      	; 0x2d66 <__addsf3+0x20>
    2d5e:	39 f4       	brne	.+14     	; 0x2d6e <__addsf3+0x28>
    2d60:	9f 3f       	cpi	r25, 0xFF	; 255
    2d62:	19 f4       	brne	.+6      	; 0x2d6a <__addsf3+0x24>
    2d64:	26 f4       	brtc	.+8      	; 0x2d6e <__addsf3+0x28>
    2d66:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__fp_nan>
    2d6a:	0e f4       	brtc	.+2      	; 0x2d6e <__addsf3+0x28>
    2d6c:	e0 95       	com	r30
    2d6e:	e7 fb       	bst	r30, 7
    2d70:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__fp_inf>

00002d74 <__addsf3x>:
    2d74:	e9 2f       	mov	r30, r25
    2d76:	0e 94 45 18 	call	0x308a	; 0x308a <__fp_split3>
    2d7a:	58 f3       	brcs	.-42     	; 0x2d52 <__addsf3+0xc>
    2d7c:	ba 17       	cp	r27, r26
    2d7e:	62 07       	cpc	r22, r18
    2d80:	73 07       	cpc	r23, r19
    2d82:	84 07       	cpc	r24, r20
    2d84:	95 07       	cpc	r25, r21
    2d86:	20 f0       	brcs	.+8      	; 0x2d90 <__addsf3x+0x1c>
    2d88:	79 f4       	brne	.+30     	; 0x2da8 <__addsf3x+0x34>
    2d8a:	a6 f5       	brtc	.+104    	; 0x2df4 <__addsf3x+0x80>
    2d8c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__fp_zero>
    2d90:	0e f4       	brtc	.+2      	; 0x2d94 <__addsf3x+0x20>
    2d92:	e0 95       	com	r30
    2d94:	0b 2e       	mov	r0, r27
    2d96:	ba 2f       	mov	r27, r26
    2d98:	a0 2d       	mov	r26, r0
    2d9a:	0b 01       	movw	r0, r22
    2d9c:	b9 01       	movw	r22, r18
    2d9e:	90 01       	movw	r18, r0
    2da0:	0c 01       	movw	r0, r24
    2da2:	ca 01       	movw	r24, r20
    2da4:	a0 01       	movw	r20, r0
    2da6:	11 24       	eor	r1, r1
    2da8:	ff 27       	eor	r31, r31
    2daa:	59 1b       	sub	r21, r25
    2dac:	99 f0       	breq	.+38     	; 0x2dd4 <__addsf3x+0x60>
    2dae:	59 3f       	cpi	r21, 0xF9	; 249
    2db0:	50 f4       	brcc	.+20     	; 0x2dc6 <__addsf3x+0x52>
    2db2:	50 3e       	cpi	r21, 0xE0	; 224
    2db4:	68 f1       	brcs	.+90     	; 0x2e10 <__addsf3x+0x9c>
    2db6:	1a 16       	cp	r1, r26
    2db8:	f0 40       	sbci	r31, 0x00	; 0
    2dba:	a2 2f       	mov	r26, r18
    2dbc:	23 2f       	mov	r18, r19
    2dbe:	34 2f       	mov	r19, r20
    2dc0:	44 27       	eor	r20, r20
    2dc2:	58 5f       	subi	r21, 0xF8	; 248
    2dc4:	f3 cf       	rjmp	.-26     	; 0x2dac <__addsf3x+0x38>
    2dc6:	46 95       	lsr	r20
    2dc8:	37 95       	ror	r19
    2dca:	27 95       	ror	r18
    2dcc:	a7 95       	ror	r26
    2dce:	f0 40       	sbci	r31, 0x00	; 0
    2dd0:	53 95       	inc	r21
    2dd2:	c9 f7       	brne	.-14     	; 0x2dc6 <__addsf3x+0x52>
    2dd4:	7e f4       	brtc	.+30     	; 0x2df4 <__addsf3x+0x80>
    2dd6:	1f 16       	cp	r1, r31
    2dd8:	ba 0b       	sbc	r27, r26
    2dda:	62 0b       	sbc	r22, r18
    2ddc:	73 0b       	sbc	r23, r19
    2dde:	84 0b       	sbc	r24, r20
    2de0:	ba f0       	brmi	.+46     	; 0x2e10 <__addsf3x+0x9c>
    2de2:	91 50       	subi	r25, 0x01	; 1
    2de4:	a1 f0       	breq	.+40     	; 0x2e0e <__addsf3x+0x9a>
    2de6:	ff 0f       	add	r31, r31
    2de8:	bb 1f       	adc	r27, r27
    2dea:	66 1f       	adc	r22, r22
    2dec:	77 1f       	adc	r23, r23
    2dee:	88 1f       	adc	r24, r24
    2df0:	c2 f7       	brpl	.-16     	; 0x2de2 <__addsf3x+0x6e>
    2df2:	0e c0       	rjmp	.+28     	; 0x2e10 <__addsf3x+0x9c>
    2df4:	ba 0f       	add	r27, r26
    2df6:	62 1f       	adc	r22, r18
    2df8:	73 1f       	adc	r23, r19
    2dfa:	84 1f       	adc	r24, r20
    2dfc:	48 f4       	brcc	.+18     	; 0x2e10 <__addsf3x+0x9c>
    2dfe:	87 95       	ror	r24
    2e00:	77 95       	ror	r23
    2e02:	67 95       	ror	r22
    2e04:	b7 95       	ror	r27
    2e06:	f7 95       	ror	r31
    2e08:	9e 3f       	cpi	r25, 0xFE	; 254
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <__addsf3x+0x9a>
    2e0c:	b0 cf       	rjmp	.-160    	; 0x2d6e <__addsf3+0x28>
    2e0e:	93 95       	inc	r25
    2e10:	88 0f       	add	r24, r24
    2e12:	08 f0       	brcs	.+2      	; 0x2e16 <__addsf3x+0xa2>
    2e14:	99 27       	eor	r25, r25
    2e16:	ee 0f       	add	r30, r30
    2e18:	97 95       	ror	r25
    2e1a:	87 95       	ror	r24
    2e1c:	08 95       	ret

00002e1e <__cmpsf2>:
    2e1e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__fp_cmp>
    2e22:	08 f4       	brcc	.+2      	; 0x2e26 <__cmpsf2+0x8>
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	08 95       	ret

00002e28 <__divsf3>:
    2e28:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__divsf3x>
    2e2c:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__fp_round>
    2e30:	0e 94 2d 18 	call	0x305a	; 0x305a <__fp_pscB>
    2e34:	58 f0       	brcs	.+22     	; 0x2e4c <__divsf3+0x24>
    2e36:	0e 94 26 18 	call	0x304c	; 0x304c <__fp_pscA>
    2e3a:	40 f0       	brcs	.+16     	; 0x2e4c <__divsf3+0x24>
    2e3c:	29 f4       	brne	.+10     	; 0x2e48 <__divsf3+0x20>
    2e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2e40:	29 f0       	breq	.+10     	; 0x2e4c <__divsf3+0x24>
    2e42:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__fp_inf>
    2e46:	51 11       	cpse	r21, r1
    2e48:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_szero>
    2e4c:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__fp_nan>

00002e50 <__divsf3x>:
    2e50:	0e 94 45 18 	call	0x308a	; 0x308a <__fp_split3>
    2e54:	68 f3       	brcs	.-38     	; 0x2e30 <__divsf3+0x8>

00002e56 <__divsf3_pse>:
    2e56:	99 23       	and	r25, r25
    2e58:	b1 f3       	breq	.-20     	; 0x2e46 <__divsf3+0x1e>
    2e5a:	55 23       	and	r21, r21
    2e5c:	91 f3       	breq	.-28     	; 0x2e42 <__divsf3+0x1a>
    2e5e:	95 1b       	sub	r25, r21
    2e60:	55 0b       	sbc	r21, r21
    2e62:	bb 27       	eor	r27, r27
    2e64:	aa 27       	eor	r26, r26
    2e66:	62 17       	cp	r22, r18
    2e68:	73 07       	cpc	r23, r19
    2e6a:	84 07       	cpc	r24, r20
    2e6c:	38 f0       	brcs	.+14     	; 0x2e7c <__divsf3_pse+0x26>
    2e6e:	9f 5f       	subi	r25, 0xFF	; 255
    2e70:	5f 4f       	sbci	r21, 0xFF	; 255
    2e72:	22 0f       	add	r18, r18
    2e74:	33 1f       	adc	r19, r19
    2e76:	44 1f       	adc	r20, r20
    2e78:	aa 1f       	adc	r26, r26
    2e7a:	a9 f3       	breq	.-22     	; 0x2e66 <__divsf3_pse+0x10>
    2e7c:	35 d0       	rcall	.+106    	; 0x2ee8 <__divsf3_pse+0x92>
    2e7e:	0e 2e       	mov	r0, r30
    2e80:	3a f0       	brmi	.+14     	; 0x2e90 <__divsf3_pse+0x3a>
    2e82:	e0 e8       	ldi	r30, 0x80	; 128
    2e84:	32 d0       	rcall	.+100    	; 0x2eea <__divsf3_pse+0x94>
    2e86:	91 50       	subi	r25, 0x01	; 1
    2e88:	50 40       	sbci	r21, 0x00	; 0
    2e8a:	e6 95       	lsr	r30
    2e8c:	00 1c       	adc	r0, r0
    2e8e:	ca f7       	brpl	.-14     	; 0x2e82 <__divsf3_pse+0x2c>
    2e90:	2b d0       	rcall	.+86     	; 0x2ee8 <__divsf3_pse+0x92>
    2e92:	fe 2f       	mov	r31, r30
    2e94:	29 d0       	rcall	.+82     	; 0x2ee8 <__divsf3_pse+0x92>
    2e96:	66 0f       	add	r22, r22
    2e98:	77 1f       	adc	r23, r23
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	26 17       	cp	r18, r22
    2ea0:	37 07       	cpc	r19, r23
    2ea2:	48 07       	cpc	r20, r24
    2ea4:	ab 07       	cpc	r26, r27
    2ea6:	b0 e8       	ldi	r27, 0x80	; 128
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <__divsf3_pse+0x56>
    2eaa:	bb 0b       	sbc	r27, r27
    2eac:	80 2d       	mov	r24, r0
    2eae:	bf 01       	movw	r22, r30
    2eb0:	ff 27       	eor	r31, r31
    2eb2:	93 58       	subi	r25, 0x83	; 131
    2eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb6:	3a f0       	brmi	.+14     	; 0x2ec6 <__divsf3_pse+0x70>
    2eb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2eba:	51 05       	cpc	r21, r1
    2ebc:	78 f0       	brcs	.+30     	; 0x2edc <__divsf3_pse+0x86>
    2ebe:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__fp_inf>
    2ec2:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_szero>
    2ec6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ec8:	e4 f3       	brlt	.-8      	; 0x2ec2 <__divsf3_pse+0x6c>
    2eca:	98 3e       	cpi	r25, 0xE8	; 232
    2ecc:	d4 f3       	brlt	.-12     	; 0x2ec2 <__divsf3_pse+0x6c>
    2ece:	86 95       	lsr	r24
    2ed0:	77 95       	ror	r23
    2ed2:	67 95       	ror	r22
    2ed4:	b7 95       	ror	r27
    2ed6:	f7 95       	ror	r31
    2ed8:	9f 5f       	subi	r25, 0xFF	; 255
    2eda:	c9 f7       	brne	.-14     	; 0x2ece <__divsf3_pse+0x78>
    2edc:	88 0f       	add	r24, r24
    2ede:	91 1d       	adc	r25, r1
    2ee0:	96 95       	lsr	r25
    2ee2:	87 95       	ror	r24
    2ee4:	97 f9       	bld	r25, 7
    2ee6:	08 95       	ret
    2ee8:	e1 e0       	ldi	r30, 0x01	; 1
    2eea:	66 0f       	add	r22, r22
    2eec:	77 1f       	adc	r23, r23
    2eee:	88 1f       	adc	r24, r24
    2ef0:	bb 1f       	adc	r27, r27
    2ef2:	62 17       	cp	r22, r18
    2ef4:	73 07       	cpc	r23, r19
    2ef6:	84 07       	cpc	r24, r20
    2ef8:	ba 07       	cpc	r27, r26
    2efa:	20 f0       	brcs	.+8      	; 0x2f04 <__divsf3_pse+0xae>
    2efc:	62 1b       	sub	r22, r18
    2efe:	73 0b       	sbc	r23, r19
    2f00:	84 0b       	sbc	r24, r20
    2f02:	ba 0b       	sbc	r27, r26
    2f04:	ee 1f       	adc	r30, r30
    2f06:	88 f7       	brcc	.-30     	; 0x2eea <__divsf3_pse+0x94>
    2f08:	e0 95       	com	r30
    2f0a:	08 95       	ret

00002f0c <__fixsfsi>:
    2f0c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__fixunssfsi>
    2f10:	68 94       	set
    2f12:	b1 11       	cpse	r27, r1
    2f14:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_szero>
    2f18:	08 95       	ret

00002f1a <__fixunssfsi>:
    2f1a:	0e 94 4d 18 	call	0x309a	; 0x309a <__fp_splitA>
    2f1e:	88 f0       	brcs	.+34     	; 0x2f42 <__fixunssfsi+0x28>
    2f20:	9f 57       	subi	r25, 0x7F	; 127
    2f22:	98 f0       	brcs	.+38     	; 0x2f4a <__fixunssfsi+0x30>
    2f24:	b9 2f       	mov	r27, r25
    2f26:	99 27       	eor	r25, r25
    2f28:	b7 51       	subi	r27, 0x17	; 23
    2f2a:	b0 f0       	brcs	.+44     	; 0x2f58 <__fixunssfsi+0x3e>
    2f2c:	e1 f0       	breq	.+56     	; 0x2f66 <__fixunssfsi+0x4c>
    2f2e:	66 0f       	add	r22, r22
    2f30:	77 1f       	adc	r23, r23
    2f32:	88 1f       	adc	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	1a f0       	brmi	.+6      	; 0x2f3e <__fixunssfsi+0x24>
    2f38:	ba 95       	dec	r27
    2f3a:	c9 f7       	brne	.-14     	; 0x2f2e <__fixunssfsi+0x14>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <__fixunssfsi+0x4c>
    2f3e:	b1 30       	cpi	r27, 0x01	; 1
    2f40:	91 f0       	breq	.+36     	; 0x2f66 <__fixunssfsi+0x4c>
    2f42:	0e 94 67 18 	call	0x30ce	; 0x30ce <__fp_zero>
    2f46:	b1 e0       	ldi	r27, 0x01	; 1
    2f48:	08 95       	ret
    2f4a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__fp_zero>
    2f4e:	67 2f       	mov	r22, r23
    2f50:	78 2f       	mov	r23, r24
    2f52:	88 27       	eor	r24, r24
    2f54:	b8 5f       	subi	r27, 0xF8	; 248
    2f56:	39 f0       	breq	.+14     	; 0x2f66 <__fixunssfsi+0x4c>
    2f58:	b9 3f       	cpi	r27, 0xF9	; 249
    2f5a:	cc f3       	brlt	.-14     	; 0x2f4e <__fixunssfsi+0x34>
    2f5c:	86 95       	lsr	r24
    2f5e:	77 95       	ror	r23
    2f60:	67 95       	ror	r22
    2f62:	b3 95       	inc	r27
    2f64:	d9 f7       	brne	.-10     	; 0x2f5c <__fixunssfsi+0x42>
    2f66:	3e f4       	brtc	.+14     	; 0x2f76 <__fixunssfsi+0x5c>
    2f68:	90 95       	com	r25
    2f6a:	80 95       	com	r24
    2f6c:	70 95       	com	r23
    2f6e:	61 95       	neg	r22
    2f70:	7f 4f       	sbci	r23, 0xFF	; 255
    2f72:	8f 4f       	sbci	r24, 0xFF	; 255
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	08 95       	ret

00002f78 <__floatunsisf>:
    2f78:	e8 94       	clt
    2f7a:	09 c0       	rjmp	.+18     	; 0x2f8e <__floatsisf+0x12>

00002f7c <__floatsisf>:
    2f7c:	97 fb       	bst	r25, 7
    2f7e:	3e f4       	brtc	.+14     	; 0x2f8e <__floatsisf+0x12>
    2f80:	90 95       	com	r25
    2f82:	80 95       	com	r24
    2f84:	70 95       	com	r23
    2f86:	61 95       	neg	r22
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	99 23       	and	r25, r25
    2f90:	a9 f0       	breq	.+42     	; 0x2fbc <__floatsisf+0x40>
    2f92:	f9 2f       	mov	r31, r25
    2f94:	96 e9       	ldi	r25, 0x96	; 150
    2f96:	bb 27       	eor	r27, r27
    2f98:	93 95       	inc	r25
    2f9a:	f6 95       	lsr	r31
    2f9c:	87 95       	ror	r24
    2f9e:	77 95       	ror	r23
    2fa0:	67 95       	ror	r22
    2fa2:	b7 95       	ror	r27
    2fa4:	f1 11       	cpse	r31, r1
    2fa6:	f8 cf       	rjmp	.-16     	; 0x2f98 <__floatsisf+0x1c>
    2fa8:	fa f4       	brpl	.+62     	; 0x2fe8 <__floatsisf+0x6c>
    2faa:	bb 0f       	add	r27, r27
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <__floatsisf+0x36>
    2fae:	60 ff       	sbrs	r22, 0
    2fb0:	1b c0       	rjmp	.+54     	; 0x2fe8 <__floatsisf+0x6c>
    2fb2:	6f 5f       	subi	r22, 0xFF	; 255
    2fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	16 c0       	rjmp	.+44     	; 0x2fe8 <__floatsisf+0x6c>
    2fbc:	88 23       	and	r24, r24
    2fbe:	11 f0       	breq	.+4      	; 0x2fc4 <__floatsisf+0x48>
    2fc0:	96 e9       	ldi	r25, 0x96	; 150
    2fc2:	11 c0       	rjmp	.+34     	; 0x2fe6 <__floatsisf+0x6a>
    2fc4:	77 23       	and	r23, r23
    2fc6:	21 f0       	breq	.+8      	; 0x2fd0 <__floatsisf+0x54>
    2fc8:	9e e8       	ldi	r25, 0x8E	; 142
    2fca:	87 2f       	mov	r24, r23
    2fcc:	76 2f       	mov	r23, r22
    2fce:	05 c0       	rjmp	.+10     	; 0x2fda <__floatsisf+0x5e>
    2fd0:	66 23       	and	r22, r22
    2fd2:	71 f0       	breq	.+28     	; 0x2ff0 <__floatsisf+0x74>
    2fd4:	96 e8       	ldi	r25, 0x86	; 134
    2fd6:	86 2f       	mov	r24, r22
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	2a f0       	brmi	.+10     	; 0x2fe8 <__floatsisf+0x6c>
    2fde:	9a 95       	dec	r25
    2fe0:	66 0f       	add	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	da f7       	brpl	.-10     	; 0x2fde <__floatsisf+0x62>
    2fe8:	88 0f       	add	r24, r24
    2fea:	96 95       	lsr	r25
    2fec:	87 95       	ror	r24
    2fee:	97 f9       	bld	r25, 7
    2ff0:	08 95       	ret

00002ff2 <__fp_cmp>:
    2ff2:	99 0f       	add	r25, r25
    2ff4:	00 08       	sbc	r0, r0
    2ff6:	55 0f       	add	r21, r21
    2ff8:	aa 0b       	sbc	r26, r26
    2ffa:	e0 e8       	ldi	r30, 0x80	; 128
    2ffc:	fe ef       	ldi	r31, 0xFE	; 254
    2ffe:	16 16       	cp	r1, r22
    3000:	17 06       	cpc	r1, r23
    3002:	e8 07       	cpc	r30, r24
    3004:	f9 07       	cpc	r31, r25
    3006:	c0 f0       	brcs	.+48     	; 0x3038 <__fp_cmp+0x46>
    3008:	12 16       	cp	r1, r18
    300a:	13 06       	cpc	r1, r19
    300c:	e4 07       	cpc	r30, r20
    300e:	f5 07       	cpc	r31, r21
    3010:	98 f0       	brcs	.+38     	; 0x3038 <__fp_cmp+0x46>
    3012:	62 1b       	sub	r22, r18
    3014:	73 0b       	sbc	r23, r19
    3016:	84 0b       	sbc	r24, r20
    3018:	95 0b       	sbc	r25, r21
    301a:	39 f4       	brne	.+14     	; 0x302a <__fp_cmp+0x38>
    301c:	0a 26       	eor	r0, r26
    301e:	61 f0       	breq	.+24     	; 0x3038 <__fp_cmp+0x46>
    3020:	23 2b       	or	r18, r19
    3022:	24 2b       	or	r18, r20
    3024:	25 2b       	or	r18, r21
    3026:	21 f4       	brne	.+8      	; 0x3030 <__fp_cmp+0x3e>
    3028:	08 95       	ret
    302a:	0a 26       	eor	r0, r26
    302c:	09 f4       	brne	.+2      	; 0x3030 <__fp_cmp+0x3e>
    302e:	a1 40       	sbci	r26, 0x01	; 1
    3030:	a6 95       	lsr	r26
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	81 1d       	adc	r24, r1
    3036:	81 1d       	adc	r24, r1
    3038:	08 95       	ret

0000303a <__fp_inf>:
    303a:	97 f9       	bld	r25, 7
    303c:	9f 67       	ori	r25, 0x7F	; 127
    303e:	80 e8       	ldi	r24, 0x80	; 128
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	08 95       	ret

00003046 <__fp_nan>:
    3046:	9f ef       	ldi	r25, 0xFF	; 255
    3048:	80 ec       	ldi	r24, 0xC0	; 192
    304a:	08 95       	ret

0000304c <__fp_pscA>:
    304c:	00 24       	eor	r0, r0
    304e:	0a 94       	dec	r0
    3050:	16 16       	cp	r1, r22
    3052:	17 06       	cpc	r1, r23
    3054:	18 06       	cpc	r1, r24
    3056:	09 06       	cpc	r0, r25
    3058:	08 95       	ret

0000305a <__fp_pscB>:
    305a:	00 24       	eor	r0, r0
    305c:	0a 94       	dec	r0
    305e:	12 16       	cp	r1, r18
    3060:	13 06       	cpc	r1, r19
    3062:	14 06       	cpc	r1, r20
    3064:	05 06       	cpc	r0, r21
    3066:	08 95       	ret

00003068 <__fp_round>:
    3068:	09 2e       	mov	r0, r25
    306a:	03 94       	inc	r0
    306c:	00 0c       	add	r0, r0
    306e:	11 f4       	brne	.+4      	; 0x3074 <__fp_round+0xc>
    3070:	88 23       	and	r24, r24
    3072:	52 f0       	brmi	.+20     	; 0x3088 <__fp_round+0x20>
    3074:	bb 0f       	add	r27, r27
    3076:	40 f4       	brcc	.+16     	; 0x3088 <__fp_round+0x20>
    3078:	bf 2b       	or	r27, r31
    307a:	11 f4       	brne	.+4      	; 0x3080 <__fp_round+0x18>
    307c:	60 ff       	sbrs	r22, 0
    307e:	04 c0       	rjmp	.+8      	; 0x3088 <__fp_round+0x20>
    3080:	6f 5f       	subi	r22, 0xFF	; 255
    3082:	7f 4f       	sbci	r23, 0xFF	; 255
    3084:	8f 4f       	sbci	r24, 0xFF	; 255
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	08 95       	ret

0000308a <__fp_split3>:
    308a:	57 fd       	sbrc	r21, 7
    308c:	90 58       	subi	r25, 0x80	; 128
    308e:	44 0f       	add	r20, r20
    3090:	55 1f       	adc	r21, r21
    3092:	59 f0       	breq	.+22     	; 0x30aa <__fp_splitA+0x10>
    3094:	5f 3f       	cpi	r21, 0xFF	; 255
    3096:	71 f0       	breq	.+28     	; 0x30b4 <__fp_splitA+0x1a>
    3098:	47 95       	ror	r20

0000309a <__fp_splitA>:
    309a:	88 0f       	add	r24, r24
    309c:	97 fb       	bst	r25, 7
    309e:	99 1f       	adc	r25, r25
    30a0:	61 f0       	breq	.+24     	; 0x30ba <__fp_splitA+0x20>
    30a2:	9f 3f       	cpi	r25, 0xFF	; 255
    30a4:	79 f0       	breq	.+30     	; 0x30c4 <__fp_splitA+0x2a>
    30a6:	87 95       	ror	r24
    30a8:	08 95       	ret
    30aa:	12 16       	cp	r1, r18
    30ac:	13 06       	cpc	r1, r19
    30ae:	14 06       	cpc	r1, r20
    30b0:	55 1f       	adc	r21, r21
    30b2:	f2 cf       	rjmp	.-28     	; 0x3098 <__fp_split3+0xe>
    30b4:	46 95       	lsr	r20
    30b6:	f1 df       	rcall	.-30     	; 0x309a <__fp_splitA>
    30b8:	08 c0       	rjmp	.+16     	; 0x30ca <__fp_splitA+0x30>
    30ba:	16 16       	cp	r1, r22
    30bc:	17 06       	cpc	r1, r23
    30be:	18 06       	cpc	r1, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	f1 cf       	rjmp	.-30     	; 0x30a6 <__fp_splitA+0xc>
    30c4:	86 95       	lsr	r24
    30c6:	71 05       	cpc	r23, r1
    30c8:	61 05       	cpc	r22, r1
    30ca:	08 94       	sec
    30cc:	08 95       	ret

000030ce <__fp_zero>:
    30ce:	e8 94       	clt

000030d0 <__fp_szero>:
    30d0:	bb 27       	eor	r27, r27
    30d2:	66 27       	eor	r22, r22
    30d4:	77 27       	eor	r23, r23
    30d6:	cb 01       	movw	r24, r22
    30d8:	97 f9       	bld	r25, 7
    30da:	08 95       	ret

000030dc <__mulsf3>:
    30dc:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3x>
    30e0:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__fp_round>
    30e4:	0e 94 26 18 	call	0x304c	; 0x304c <__fp_pscA>
    30e8:	38 f0       	brcs	.+14     	; 0x30f8 <__mulsf3+0x1c>
    30ea:	0e 94 2d 18 	call	0x305a	; 0x305a <__fp_pscB>
    30ee:	20 f0       	brcs	.+8      	; 0x30f8 <__mulsf3+0x1c>
    30f0:	95 23       	and	r25, r21
    30f2:	11 f0       	breq	.+4      	; 0x30f8 <__mulsf3+0x1c>
    30f4:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__fp_inf>
    30f8:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__fp_nan>
    30fc:	11 24       	eor	r1, r1
    30fe:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_szero>

00003102 <__mulsf3x>:
    3102:	0e 94 45 18 	call	0x308a	; 0x308a <__fp_split3>
    3106:	70 f3       	brcs	.-36     	; 0x30e4 <__mulsf3+0x8>

00003108 <__mulsf3_pse>:
    3108:	95 9f       	mul	r25, r21
    310a:	c1 f3       	breq	.-16     	; 0x30fc <__mulsf3+0x20>
    310c:	95 0f       	add	r25, r21
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	55 1f       	adc	r21, r21
    3112:	62 9f       	mul	r22, r18
    3114:	f0 01       	movw	r30, r0
    3116:	72 9f       	mul	r23, r18
    3118:	bb 27       	eor	r27, r27
    311a:	f0 0d       	add	r31, r0
    311c:	b1 1d       	adc	r27, r1
    311e:	63 9f       	mul	r22, r19
    3120:	aa 27       	eor	r26, r26
    3122:	f0 0d       	add	r31, r0
    3124:	b1 1d       	adc	r27, r1
    3126:	aa 1f       	adc	r26, r26
    3128:	64 9f       	mul	r22, r20
    312a:	66 27       	eor	r22, r22
    312c:	b0 0d       	add	r27, r0
    312e:	a1 1d       	adc	r26, r1
    3130:	66 1f       	adc	r22, r22
    3132:	82 9f       	mul	r24, r18
    3134:	22 27       	eor	r18, r18
    3136:	b0 0d       	add	r27, r0
    3138:	a1 1d       	adc	r26, r1
    313a:	62 1f       	adc	r22, r18
    313c:	73 9f       	mul	r23, r19
    313e:	b0 0d       	add	r27, r0
    3140:	a1 1d       	adc	r26, r1
    3142:	62 1f       	adc	r22, r18
    3144:	83 9f       	mul	r24, r19
    3146:	a0 0d       	add	r26, r0
    3148:	61 1d       	adc	r22, r1
    314a:	22 1f       	adc	r18, r18
    314c:	74 9f       	mul	r23, r20
    314e:	33 27       	eor	r19, r19
    3150:	a0 0d       	add	r26, r0
    3152:	61 1d       	adc	r22, r1
    3154:	23 1f       	adc	r18, r19
    3156:	84 9f       	mul	r24, r20
    3158:	60 0d       	add	r22, r0
    315a:	21 1d       	adc	r18, r1
    315c:	82 2f       	mov	r24, r18
    315e:	76 2f       	mov	r23, r22
    3160:	6a 2f       	mov	r22, r26
    3162:	11 24       	eor	r1, r1
    3164:	9f 57       	subi	r25, 0x7F	; 127
    3166:	50 40       	sbci	r21, 0x00	; 0
    3168:	9a f0       	brmi	.+38     	; 0x3190 <__mulsf3_pse+0x88>
    316a:	f1 f0       	breq	.+60     	; 0x31a8 <__mulsf3_pse+0xa0>
    316c:	88 23       	and	r24, r24
    316e:	4a f0       	brmi	.+18     	; 0x3182 <__mulsf3_pse+0x7a>
    3170:	ee 0f       	add	r30, r30
    3172:	ff 1f       	adc	r31, r31
    3174:	bb 1f       	adc	r27, r27
    3176:	66 1f       	adc	r22, r22
    3178:	77 1f       	adc	r23, r23
    317a:	88 1f       	adc	r24, r24
    317c:	91 50       	subi	r25, 0x01	; 1
    317e:	50 40       	sbci	r21, 0x00	; 0
    3180:	a9 f7       	brne	.-22     	; 0x316c <__mulsf3_pse+0x64>
    3182:	9e 3f       	cpi	r25, 0xFE	; 254
    3184:	51 05       	cpc	r21, r1
    3186:	80 f0       	brcs	.+32     	; 0x31a8 <__mulsf3_pse+0xa0>
    3188:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__fp_inf>
    318c:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__fp_szero>
    3190:	5f 3f       	cpi	r21, 0xFF	; 255
    3192:	e4 f3       	brlt	.-8      	; 0x318c <__mulsf3_pse+0x84>
    3194:	98 3e       	cpi	r25, 0xE8	; 232
    3196:	d4 f3       	brlt	.-12     	; 0x318c <__mulsf3_pse+0x84>
    3198:	86 95       	lsr	r24
    319a:	77 95       	ror	r23
    319c:	67 95       	ror	r22
    319e:	b7 95       	ror	r27
    31a0:	f7 95       	ror	r31
    31a2:	e7 95       	ror	r30
    31a4:	9f 5f       	subi	r25, 0xFF	; 255
    31a6:	c1 f7       	brne	.-16     	; 0x3198 <__mulsf3_pse+0x90>
    31a8:	fe 2b       	or	r31, r30
    31aa:	88 0f       	add	r24, r24
    31ac:	91 1d       	adc	r25, r1
    31ae:	96 95       	lsr	r25
    31b0:	87 95       	ror	r24
    31b2:	97 f9       	bld	r25, 7
    31b4:	08 95       	ret

000031b6 <vfprintf>:
    31b6:	a0 e1       	ldi	r26, 0x10	; 16
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e1 ee       	ldi	r30, 0xE1	; 225
    31bc:	f8 e1       	ldi	r31, 0x18	; 24
    31be:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__>
    31c2:	7c 01       	movw	r14, r24
    31c4:	1b 01       	movw	r2, r22
    31c6:	6a 01       	movw	r12, r20
    31c8:	fc 01       	movw	r30, r24
    31ca:	17 82       	std	Z+7, r1	; 0x07
    31cc:	16 82       	std	Z+6, r1	; 0x06
    31ce:	83 81       	ldd	r24, Z+3	; 0x03
    31d0:	81 ff       	sbrs	r24, 1
    31d2:	44 c3       	rjmp	.+1672   	; 0x385c <vfprintf+0x6a6>
    31d4:	9e 01       	movw	r18, r28
    31d6:	2f 5f       	subi	r18, 0xFF	; 255
    31d8:	3f 4f       	sbci	r19, 0xFF	; 255
    31da:	39 01       	movw	r6, r18
    31dc:	f7 01       	movw	r30, r14
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	f1 01       	movw	r30, r2
    31e2:	93 fd       	sbrc	r25, 3
    31e4:	85 91       	lpm	r24, Z+
    31e6:	93 ff       	sbrs	r25, 3
    31e8:	81 91       	ld	r24, Z+
    31ea:	1f 01       	movw	r2, r30
    31ec:	88 23       	and	r24, r24
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <vfprintf+0x3c>
    31f0:	31 c3       	rjmp	.+1634   	; 0x3854 <vfprintf+0x69e>
    31f2:	85 32       	cpi	r24, 0x25	; 37
    31f4:	39 f4       	brne	.+14     	; 0x3204 <vfprintf+0x4e>
    31f6:	93 fd       	sbrc	r25, 3
    31f8:	85 91       	lpm	r24, Z+
    31fa:	93 ff       	sbrs	r25, 3
    31fc:	81 91       	ld	r24, Z+
    31fe:	1f 01       	movw	r2, r30
    3200:	85 32       	cpi	r24, 0x25	; 37
    3202:	39 f4       	brne	.+14     	; 0x3212 <vfprintf+0x5c>
    3204:	b7 01       	movw	r22, r14
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    320c:	56 01       	movw	r10, r12
    320e:	65 01       	movw	r12, r10
    3210:	e5 cf       	rjmp	.-54     	; 0x31dc <vfprintf+0x26>
    3212:	10 e0       	ldi	r17, 0x00	; 0
    3214:	51 2c       	mov	r5, r1
    3216:	91 2c       	mov	r9, r1
    3218:	ff e1       	ldi	r31, 0x1F	; 31
    321a:	f9 15       	cp	r31, r9
    321c:	d8 f0       	brcs	.+54     	; 0x3254 <vfprintf+0x9e>
    321e:	8b 32       	cpi	r24, 0x2B	; 43
    3220:	79 f0       	breq	.+30     	; 0x3240 <vfprintf+0x8a>
    3222:	38 f4       	brcc	.+14     	; 0x3232 <vfprintf+0x7c>
    3224:	80 32       	cpi	r24, 0x20	; 32
    3226:	79 f0       	breq	.+30     	; 0x3246 <vfprintf+0x90>
    3228:	83 32       	cpi	r24, 0x23	; 35
    322a:	a1 f4       	brne	.+40     	; 0x3254 <vfprintf+0x9e>
    322c:	f9 2d       	mov	r31, r9
    322e:	f0 61       	ori	r31, 0x10	; 16
    3230:	2e c0       	rjmp	.+92     	; 0x328e <vfprintf+0xd8>
    3232:	8d 32       	cpi	r24, 0x2D	; 45
    3234:	61 f0       	breq	.+24     	; 0x324e <vfprintf+0x98>
    3236:	80 33       	cpi	r24, 0x30	; 48
    3238:	69 f4       	brne	.+26     	; 0x3254 <vfprintf+0x9e>
    323a:	29 2d       	mov	r18, r9
    323c:	21 60       	ori	r18, 0x01	; 1
    323e:	2d c0       	rjmp	.+90     	; 0x329a <vfprintf+0xe4>
    3240:	39 2d       	mov	r19, r9
    3242:	32 60       	ori	r19, 0x02	; 2
    3244:	93 2e       	mov	r9, r19
    3246:	89 2d       	mov	r24, r9
    3248:	84 60       	ori	r24, 0x04	; 4
    324a:	98 2e       	mov	r9, r24
    324c:	2a c0       	rjmp	.+84     	; 0x32a2 <vfprintf+0xec>
    324e:	e9 2d       	mov	r30, r9
    3250:	e8 60       	ori	r30, 0x08	; 8
    3252:	15 c0       	rjmp	.+42     	; 0x327e <vfprintf+0xc8>
    3254:	97 fc       	sbrc	r9, 7
    3256:	2d c0       	rjmp	.+90     	; 0x32b2 <vfprintf+0xfc>
    3258:	20 ed       	ldi	r18, 0xD0	; 208
    325a:	28 0f       	add	r18, r24
    325c:	2a 30       	cpi	r18, 0x0A	; 10
    325e:	88 f4       	brcc	.+34     	; 0x3282 <vfprintf+0xcc>
    3260:	96 fe       	sbrs	r9, 6
    3262:	06 c0       	rjmp	.+12     	; 0x3270 <vfprintf+0xba>
    3264:	3a e0       	ldi	r19, 0x0A	; 10
    3266:	13 9f       	mul	r17, r19
    3268:	20 0d       	add	r18, r0
    326a:	11 24       	eor	r1, r1
    326c:	12 2f       	mov	r17, r18
    326e:	19 c0       	rjmp	.+50     	; 0x32a2 <vfprintf+0xec>
    3270:	8a e0       	ldi	r24, 0x0A	; 10
    3272:	58 9e       	mul	r5, r24
    3274:	20 0d       	add	r18, r0
    3276:	11 24       	eor	r1, r1
    3278:	52 2e       	mov	r5, r18
    327a:	e9 2d       	mov	r30, r9
    327c:	e0 62       	ori	r30, 0x20	; 32
    327e:	9e 2e       	mov	r9, r30
    3280:	10 c0       	rjmp	.+32     	; 0x32a2 <vfprintf+0xec>
    3282:	8e 32       	cpi	r24, 0x2E	; 46
    3284:	31 f4       	brne	.+12     	; 0x3292 <vfprintf+0xdc>
    3286:	96 fc       	sbrc	r9, 6
    3288:	e5 c2       	rjmp	.+1482   	; 0x3854 <vfprintf+0x69e>
    328a:	f9 2d       	mov	r31, r9
    328c:	f0 64       	ori	r31, 0x40	; 64
    328e:	9f 2e       	mov	r9, r31
    3290:	08 c0       	rjmp	.+16     	; 0x32a2 <vfprintf+0xec>
    3292:	8c 36       	cpi	r24, 0x6C	; 108
    3294:	21 f4       	brne	.+8      	; 0x329e <vfprintf+0xe8>
    3296:	29 2d       	mov	r18, r9
    3298:	20 68       	ori	r18, 0x80	; 128
    329a:	92 2e       	mov	r9, r18
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <vfprintf+0xec>
    329e:	88 36       	cpi	r24, 0x68	; 104
    32a0:	41 f4       	brne	.+16     	; 0x32b2 <vfprintf+0xfc>
    32a2:	f1 01       	movw	r30, r2
    32a4:	93 fd       	sbrc	r25, 3
    32a6:	85 91       	lpm	r24, Z+
    32a8:	93 ff       	sbrs	r25, 3
    32aa:	81 91       	ld	r24, Z+
    32ac:	1f 01       	movw	r2, r30
    32ae:	81 11       	cpse	r24, r1
    32b0:	b3 cf       	rjmp	.-154    	; 0x3218 <vfprintf+0x62>
    32b2:	9b eb       	ldi	r25, 0xBB	; 187
    32b4:	98 0f       	add	r25, r24
    32b6:	93 30       	cpi	r25, 0x03	; 3
    32b8:	20 f4       	brcc	.+8      	; 0x32c2 <vfprintf+0x10c>
    32ba:	99 2d       	mov	r25, r9
    32bc:	90 61       	ori	r25, 0x10	; 16
    32be:	80 5e       	subi	r24, 0xE0	; 224
    32c0:	07 c0       	rjmp	.+14     	; 0x32d0 <vfprintf+0x11a>
    32c2:	9b e9       	ldi	r25, 0x9B	; 155
    32c4:	98 0f       	add	r25, r24
    32c6:	93 30       	cpi	r25, 0x03	; 3
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <vfprintf+0x116>
    32ca:	66 c1       	rjmp	.+716    	; 0x3598 <vfprintf+0x3e2>
    32cc:	99 2d       	mov	r25, r9
    32ce:	9f 7e       	andi	r25, 0xEF	; 239
    32d0:	96 ff       	sbrs	r25, 6
    32d2:	16 e0       	ldi	r17, 0x06	; 6
    32d4:	9f 73       	andi	r25, 0x3F	; 63
    32d6:	99 2e       	mov	r9, r25
    32d8:	85 36       	cpi	r24, 0x65	; 101
    32da:	19 f4       	brne	.+6      	; 0x32e2 <vfprintf+0x12c>
    32dc:	90 64       	ori	r25, 0x40	; 64
    32de:	99 2e       	mov	r9, r25
    32e0:	08 c0       	rjmp	.+16     	; 0x32f2 <vfprintf+0x13c>
    32e2:	86 36       	cpi	r24, 0x66	; 102
    32e4:	21 f4       	brne	.+8      	; 0x32ee <vfprintf+0x138>
    32e6:	39 2f       	mov	r19, r25
    32e8:	30 68       	ori	r19, 0x80	; 128
    32ea:	93 2e       	mov	r9, r19
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <vfprintf+0x13c>
    32ee:	11 11       	cpse	r17, r1
    32f0:	11 50       	subi	r17, 0x01	; 1
    32f2:	97 fe       	sbrs	r9, 7
    32f4:	07 c0       	rjmp	.+14     	; 0x3304 <vfprintf+0x14e>
    32f6:	1c 33       	cpi	r17, 0x3C	; 60
    32f8:	50 f4       	brcc	.+20     	; 0x330e <vfprintf+0x158>
    32fa:	44 24       	eor	r4, r4
    32fc:	43 94       	inc	r4
    32fe:	41 0e       	add	r4, r17
    3300:	27 e0       	ldi	r18, 0x07	; 7
    3302:	0b c0       	rjmp	.+22     	; 0x331a <vfprintf+0x164>
    3304:	18 30       	cpi	r17, 0x08	; 8
    3306:	38 f0       	brcs	.+14     	; 0x3316 <vfprintf+0x160>
    3308:	27 e0       	ldi	r18, 0x07	; 7
    330a:	17 e0       	ldi	r17, 0x07	; 7
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <vfprintf+0x162>
    330e:	27 e0       	ldi	r18, 0x07	; 7
    3310:	9c e3       	ldi	r25, 0x3C	; 60
    3312:	49 2e       	mov	r4, r25
    3314:	02 c0       	rjmp	.+4      	; 0x331a <vfprintf+0x164>
    3316:	21 2f       	mov	r18, r17
    3318:	41 2c       	mov	r4, r1
    331a:	56 01       	movw	r10, r12
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	a8 0e       	add	r10, r24
    3320:	b1 1c       	adc	r11, r1
    3322:	f6 01       	movw	r30, r12
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	04 2d       	mov	r16, r4
    332e:	a3 01       	movw	r20, r6
    3330:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__ftoa_engine>
    3334:	6c 01       	movw	r12, r24
    3336:	f9 81       	ldd	r31, Y+1	; 0x01
    3338:	fc 87       	std	Y+12, r31	; 0x0c
    333a:	f0 ff       	sbrs	r31, 0
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vfprintf+0x18c>
    333e:	f3 ff       	sbrs	r31, 3
    3340:	06 c0       	rjmp	.+12     	; 0x334e <vfprintf+0x198>
    3342:	91 fc       	sbrc	r9, 1
    3344:	06 c0       	rjmp	.+12     	; 0x3352 <vfprintf+0x19c>
    3346:	92 fe       	sbrs	r9, 2
    3348:	06 c0       	rjmp	.+12     	; 0x3356 <vfprintf+0x1a0>
    334a:	00 e2       	ldi	r16, 0x20	; 32
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <vfprintf+0x1a2>
    334e:	0d e2       	ldi	r16, 0x2D	; 45
    3350:	03 c0       	rjmp	.+6      	; 0x3358 <vfprintf+0x1a2>
    3352:	0b e2       	ldi	r16, 0x2B	; 43
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <vfprintf+0x1a2>
    3356:	00 e0       	ldi	r16, 0x00	; 0
    3358:	8c 85       	ldd	r24, Y+12	; 0x0c
    335a:	8c 70       	andi	r24, 0x0C	; 12
    335c:	19 f0       	breq	.+6      	; 0x3364 <vfprintf+0x1ae>
    335e:	01 11       	cpse	r16, r1
    3360:	5a c2       	rjmp	.+1204   	; 0x3816 <vfprintf+0x660>
    3362:	9b c2       	rjmp	.+1334   	; 0x389a <vfprintf+0x6e4>
    3364:	97 fe       	sbrs	r9, 7
    3366:	10 c0       	rjmp	.+32     	; 0x3388 <vfprintf+0x1d2>
    3368:	4c 0c       	add	r4, r12
    336a:	fc 85       	ldd	r31, Y+12	; 0x0c
    336c:	f4 ff       	sbrs	r31, 4
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <vfprintf+0x1c2>
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	81 33       	cpi	r24, 0x31	; 49
    3374:	09 f4       	brne	.+2      	; 0x3378 <vfprintf+0x1c2>
    3376:	4a 94       	dec	r4
    3378:	14 14       	cp	r1, r4
    337a:	74 f5       	brge	.+92     	; 0x33d8 <vfprintf+0x222>
    337c:	28 e0       	ldi	r18, 0x08	; 8
    337e:	24 15       	cp	r18, r4
    3380:	78 f5       	brcc	.+94     	; 0x33e0 <vfprintf+0x22a>
    3382:	88 e0       	ldi	r24, 0x08	; 8
    3384:	48 2e       	mov	r4, r24
    3386:	2c c0       	rjmp	.+88     	; 0x33e0 <vfprintf+0x22a>
    3388:	96 fc       	sbrc	r9, 6
    338a:	2a c0       	rjmp	.+84     	; 0x33e0 <vfprintf+0x22a>
    338c:	81 2f       	mov	r24, r17
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	8c 15       	cp	r24, r12
    3392:	9d 05       	cpc	r25, r13
    3394:	9c f0       	brlt	.+38     	; 0x33bc <vfprintf+0x206>
    3396:	3c ef       	ldi	r19, 0xFC	; 252
    3398:	c3 16       	cp	r12, r19
    339a:	3f ef       	ldi	r19, 0xFF	; 255
    339c:	d3 06       	cpc	r13, r19
    339e:	74 f0       	brlt	.+28     	; 0x33bc <vfprintf+0x206>
    33a0:	89 2d       	mov	r24, r9
    33a2:	80 68       	ori	r24, 0x80	; 128
    33a4:	98 2e       	mov	r9, r24
    33a6:	0a c0       	rjmp	.+20     	; 0x33bc <vfprintf+0x206>
    33a8:	e2 e0       	ldi	r30, 0x02	; 2
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	ec 0f       	add	r30, r28
    33ae:	fd 1f       	adc	r31, r29
    33b0:	e1 0f       	add	r30, r17
    33b2:	f1 1d       	adc	r31, r1
    33b4:	80 81       	ld	r24, Z
    33b6:	80 33       	cpi	r24, 0x30	; 48
    33b8:	19 f4       	brne	.+6      	; 0x33c0 <vfprintf+0x20a>
    33ba:	11 50       	subi	r17, 0x01	; 1
    33bc:	11 11       	cpse	r17, r1
    33be:	f4 cf       	rjmp	.-24     	; 0x33a8 <vfprintf+0x1f2>
    33c0:	97 fe       	sbrs	r9, 7
    33c2:	0e c0       	rjmp	.+28     	; 0x33e0 <vfprintf+0x22a>
    33c4:	44 24       	eor	r4, r4
    33c6:	43 94       	inc	r4
    33c8:	41 0e       	add	r4, r17
    33ca:	81 2f       	mov	r24, r17
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	c8 16       	cp	r12, r24
    33d0:	d9 06       	cpc	r13, r25
    33d2:	2c f4       	brge	.+10     	; 0x33de <vfprintf+0x228>
    33d4:	1c 19       	sub	r17, r12
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <vfprintf+0x22a>
    33d8:	44 24       	eor	r4, r4
    33da:	43 94       	inc	r4
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <vfprintf+0x22a>
    33de:	10 e0       	ldi	r17, 0x00	; 0
    33e0:	97 fe       	sbrs	r9, 7
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <vfprintf+0x23a>
    33e4:	1c 14       	cp	r1, r12
    33e6:	1d 04       	cpc	r1, r13
    33e8:	34 f4       	brge	.+12     	; 0x33f6 <vfprintf+0x240>
    33ea:	c6 01       	movw	r24, r12
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	05 c0       	rjmp	.+10     	; 0x33fa <vfprintf+0x244>
    33f0:	85 e0       	ldi	r24, 0x05	; 5
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <vfprintf+0x244>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	01 11       	cpse	r16, r1
    33fc:	01 96       	adiw	r24, 0x01	; 1
    33fe:	11 23       	and	r17, r17
    3400:	31 f0       	breq	.+12     	; 0x340e <vfprintf+0x258>
    3402:	21 2f       	mov	r18, r17
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	2f 5f       	subi	r18, 0xFF	; 255
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
    340a:	82 0f       	add	r24, r18
    340c:	93 1f       	adc	r25, r19
    340e:	25 2d       	mov	r18, r5
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	82 17       	cp	r24, r18
    3414:	93 07       	cpc	r25, r19
    3416:	14 f4       	brge	.+4      	; 0x341c <vfprintf+0x266>
    3418:	58 1a       	sub	r5, r24
    341a:	01 c0       	rjmp	.+2      	; 0x341e <vfprintf+0x268>
    341c:	51 2c       	mov	r5, r1
    341e:	89 2d       	mov	r24, r9
    3420:	89 70       	andi	r24, 0x09	; 9
    3422:	49 f4       	brne	.+18     	; 0x3436 <vfprintf+0x280>
    3424:	55 20       	and	r5, r5
    3426:	39 f0       	breq	.+14     	; 0x3436 <vfprintf+0x280>
    3428:	b7 01       	movw	r22, r14
    342a:	80 e2       	ldi	r24, 0x20	; 32
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3432:	5a 94       	dec	r5
    3434:	f7 cf       	rjmp	.-18     	; 0x3424 <vfprintf+0x26e>
    3436:	00 23       	and	r16, r16
    3438:	29 f0       	breq	.+10     	; 0x3444 <vfprintf+0x28e>
    343a:	b7 01       	movw	r22, r14
    343c:	80 2f       	mov	r24, r16
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3444:	93 fc       	sbrc	r9, 3
    3446:	09 c0       	rjmp	.+18     	; 0x345a <vfprintf+0x2a4>
    3448:	55 20       	and	r5, r5
    344a:	39 f0       	breq	.+14     	; 0x345a <vfprintf+0x2a4>
    344c:	b7 01       	movw	r22, r14
    344e:	80 e3       	ldi	r24, 0x30	; 48
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3456:	5a 94       	dec	r5
    3458:	f7 cf       	rjmp	.-18     	; 0x3448 <vfprintf+0x292>
    345a:	97 fe       	sbrs	r9, 7
    345c:	4c c0       	rjmp	.+152    	; 0x34f6 <vfprintf+0x340>
    345e:	46 01       	movw	r8, r12
    3460:	d7 fe       	sbrs	r13, 7
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <vfprintf+0x2b2>
    3464:	81 2c       	mov	r8, r1
    3466:	91 2c       	mov	r9, r1
    3468:	c6 01       	movw	r24, r12
    346a:	88 19       	sub	r24, r8
    346c:	99 09       	sbc	r25, r9
    346e:	f3 01       	movw	r30, r6
    3470:	e8 0f       	add	r30, r24
    3472:	f9 1f       	adc	r31, r25
    3474:	fe 87       	std	Y+14, r31	; 0x0e
    3476:	ed 87       	std	Y+13, r30	; 0x0d
    3478:	96 01       	movw	r18, r12
    347a:	24 19       	sub	r18, r4
    347c:	31 09       	sbc	r19, r1
    347e:	38 8b       	std	Y+16, r19	; 0x10
    3480:	2f 87       	std	Y+15, r18	; 0x0f
    3482:	01 2f       	mov	r16, r17
    3484:	10 e0       	ldi	r17, 0x00	; 0
    3486:	11 95       	neg	r17
    3488:	01 95       	neg	r16
    348a:	11 09       	sbc	r17, r1
    348c:	3f ef       	ldi	r19, 0xFF	; 255
    348e:	83 16       	cp	r8, r19
    3490:	93 06       	cpc	r9, r19
    3492:	29 f4       	brne	.+10     	; 0x349e <vfprintf+0x2e8>
    3494:	b7 01       	movw	r22, r14
    3496:	8e e2       	ldi	r24, 0x2E	; 46
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    349e:	c8 14       	cp	r12, r8
    34a0:	d9 04       	cpc	r13, r9
    34a2:	4c f0       	brlt	.+18     	; 0x34b6 <vfprintf+0x300>
    34a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a6:	98 89       	ldd	r25, Y+16	; 0x10
    34a8:	88 15       	cp	r24, r8
    34aa:	99 05       	cpc	r25, r9
    34ac:	24 f4       	brge	.+8      	; 0x34b6 <vfprintf+0x300>
    34ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    34b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    34b2:	81 81       	ldd	r24, Z+1	; 0x01
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <vfprintf+0x302>
    34b6:	80 e3       	ldi	r24, 0x30	; 48
    34b8:	f1 e0       	ldi	r31, 0x01	; 1
    34ba:	8f 1a       	sub	r8, r31
    34bc:	91 08       	sbc	r9, r1
    34be:	2d 85       	ldd	r18, Y+13	; 0x0d
    34c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    34c2:	2f 5f       	subi	r18, 0xFF	; 255
    34c4:	3f 4f       	sbci	r19, 0xFF	; 255
    34c6:	3e 87       	std	Y+14, r19	; 0x0e
    34c8:	2d 87       	std	Y+13, r18	; 0x0d
    34ca:	80 16       	cp	r8, r16
    34cc:	91 06       	cpc	r9, r17
    34ce:	2c f0       	brlt	.+10     	; 0x34da <vfprintf+0x324>
    34d0:	b7 01       	movw	r22, r14
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    34d8:	d9 cf       	rjmp	.-78     	; 0x348c <vfprintf+0x2d6>
    34da:	c8 14       	cp	r12, r8
    34dc:	d9 04       	cpc	r13, r9
    34de:	41 f4       	brne	.+16     	; 0x34f0 <vfprintf+0x33a>
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	96 33       	cpi	r25, 0x36	; 54
    34e4:	20 f4       	brcc	.+8      	; 0x34ee <vfprintf+0x338>
    34e6:	95 33       	cpi	r25, 0x35	; 53
    34e8:	19 f4       	brne	.+6      	; 0x34f0 <vfprintf+0x33a>
    34ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    34ec:	34 ff       	sbrs	r19, 4
    34ee:	81 e3       	ldi	r24, 0x31	; 49
    34f0:	b7 01       	movw	r22, r14
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	4e c0       	rjmp	.+156    	; 0x3592 <vfprintf+0x3dc>
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	81 33       	cpi	r24, 0x31	; 49
    34fa:	19 f0       	breq	.+6      	; 0x3502 <vfprintf+0x34c>
    34fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34fe:	9f 7e       	andi	r25, 0xEF	; 239
    3500:	9c 87       	std	Y+12, r25	; 0x0c
    3502:	b7 01       	movw	r22, r14
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    350a:	11 11       	cpse	r17, r1
    350c:	05 c0       	rjmp	.+10     	; 0x3518 <vfprintf+0x362>
    350e:	94 fc       	sbrc	r9, 4
    3510:	18 c0       	rjmp	.+48     	; 0x3542 <vfprintf+0x38c>
    3512:	85 e6       	ldi	r24, 0x65	; 101
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	17 c0       	rjmp	.+46     	; 0x3546 <vfprintf+0x390>
    3518:	b7 01       	movw	r22, r14
    351a:	8e e2       	ldi	r24, 0x2E	; 46
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3522:	1e 5f       	subi	r17, 0xFE	; 254
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	01 e0       	ldi	r16, 0x01	; 1
    3528:	08 0f       	add	r16, r24
    352a:	f3 01       	movw	r30, r6
    352c:	e8 0f       	add	r30, r24
    352e:	f1 1d       	adc	r31, r1
    3530:	80 81       	ld	r24, Z
    3532:	b7 01       	movw	r22, r14
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    353a:	80 2f       	mov	r24, r16
    353c:	01 13       	cpse	r16, r17
    353e:	f3 cf       	rjmp	.-26     	; 0x3526 <vfprintf+0x370>
    3540:	e6 cf       	rjmp	.-52     	; 0x350e <vfprintf+0x358>
    3542:	85 e4       	ldi	r24, 0x45	; 69
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	b7 01       	movw	r22, r14
    3548:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    354c:	d7 fc       	sbrc	r13, 7
    354e:	06 c0       	rjmp	.+12     	; 0x355c <vfprintf+0x3a6>
    3550:	c1 14       	cp	r12, r1
    3552:	d1 04       	cpc	r13, r1
    3554:	41 f4       	brne	.+16     	; 0x3566 <vfprintf+0x3b0>
    3556:	ec 85       	ldd	r30, Y+12	; 0x0c
    3558:	e4 ff       	sbrs	r30, 4
    355a:	05 c0       	rjmp	.+10     	; 0x3566 <vfprintf+0x3b0>
    355c:	d1 94       	neg	r13
    355e:	c1 94       	neg	r12
    3560:	d1 08       	sbc	r13, r1
    3562:	8d e2       	ldi	r24, 0x2D	; 45
    3564:	01 c0       	rjmp	.+2      	; 0x3568 <vfprintf+0x3b2>
    3566:	8b e2       	ldi	r24, 0x2B	; 43
    3568:	b7 01       	movw	r22, r14
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3570:	80 e3       	ldi	r24, 0x30	; 48
    3572:	2a e0       	ldi	r18, 0x0A	; 10
    3574:	c2 16       	cp	r12, r18
    3576:	d1 04       	cpc	r13, r1
    3578:	2c f0       	brlt	.+10     	; 0x3584 <vfprintf+0x3ce>
    357a:	8f 5f       	subi	r24, 0xFF	; 255
    357c:	fa e0       	ldi	r31, 0x0A	; 10
    357e:	cf 1a       	sub	r12, r31
    3580:	d1 08       	sbc	r13, r1
    3582:	f7 cf       	rjmp	.-18     	; 0x3572 <vfprintf+0x3bc>
    3584:	b7 01       	movw	r22, r14
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    358c:	b7 01       	movw	r22, r14
    358e:	c6 01       	movw	r24, r12
    3590:	c0 96       	adiw	r24, 0x30	; 48
    3592:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3596:	54 c1       	rjmp	.+680    	; 0x3840 <vfprintf+0x68a>
    3598:	83 36       	cpi	r24, 0x63	; 99
    359a:	31 f0       	breq	.+12     	; 0x35a8 <vfprintf+0x3f2>
    359c:	83 37       	cpi	r24, 0x73	; 115
    359e:	79 f0       	breq	.+30     	; 0x35be <vfprintf+0x408>
    35a0:	83 35       	cpi	r24, 0x53	; 83
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <vfprintf+0x3f0>
    35a4:	56 c0       	rjmp	.+172    	; 0x3652 <vfprintf+0x49c>
    35a6:	20 c0       	rjmp	.+64     	; 0x35e8 <vfprintf+0x432>
    35a8:	56 01       	movw	r10, r12
    35aa:	32 e0       	ldi	r19, 0x02	; 2
    35ac:	a3 0e       	add	r10, r19
    35ae:	b1 1c       	adc	r11, r1
    35b0:	f6 01       	movw	r30, r12
    35b2:	80 81       	ld	r24, Z
    35b4:	89 83       	std	Y+1, r24	; 0x01
    35b6:	01 e0       	ldi	r16, 0x01	; 1
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	63 01       	movw	r12, r6
    35bc:	12 c0       	rjmp	.+36     	; 0x35e2 <vfprintf+0x42c>
    35be:	56 01       	movw	r10, r12
    35c0:	f2 e0       	ldi	r31, 0x02	; 2
    35c2:	af 0e       	add	r10, r31
    35c4:	b1 1c       	adc	r11, r1
    35c6:	f6 01       	movw	r30, r12
    35c8:	c0 80       	ld	r12, Z
    35ca:	d1 80       	ldd	r13, Z+1	; 0x01
    35cc:	96 fe       	sbrs	r9, 6
    35ce:	03 c0       	rjmp	.+6      	; 0x35d6 <vfprintf+0x420>
    35d0:	61 2f       	mov	r22, r17
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <vfprintf+0x424>
    35d6:	6f ef       	ldi	r22, 0xFF	; 255
    35d8:	7f ef       	ldi	r23, 0xFF	; 255
    35da:	c6 01       	movw	r24, r12
    35dc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <strnlen>
    35e0:	8c 01       	movw	r16, r24
    35e2:	f9 2d       	mov	r31, r9
    35e4:	ff 77       	andi	r31, 0x7F	; 127
    35e6:	14 c0       	rjmp	.+40     	; 0x3610 <vfprintf+0x45a>
    35e8:	56 01       	movw	r10, r12
    35ea:	22 e0       	ldi	r18, 0x02	; 2
    35ec:	a2 0e       	add	r10, r18
    35ee:	b1 1c       	adc	r11, r1
    35f0:	f6 01       	movw	r30, r12
    35f2:	c0 80       	ld	r12, Z
    35f4:	d1 80       	ldd	r13, Z+1	; 0x01
    35f6:	96 fe       	sbrs	r9, 6
    35f8:	03 c0       	rjmp	.+6      	; 0x3600 <vfprintf+0x44a>
    35fa:	61 2f       	mov	r22, r17
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <vfprintf+0x44e>
    3600:	6f ef       	ldi	r22, 0xFF	; 255
    3602:	7f ef       	ldi	r23, 0xFF	; 255
    3604:	c6 01       	movw	r24, r12
    3606:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <strnlen_P>
    360a:	8c 01       	movw	r16, r24
    360c:	f9 2d       	mov	r31, r9
    360e:	f0 68       	ori	r31, 0x80	; 128
    3610:	9f 2e       	mov	r9, r31
    3612:	f3 fd       	sbrc	r31, 3
    3614:	1a c0       	rjmp	.+52     	; 0x364a <vfprintf+0x494>
    3616:	85 2d       	mov	r24, r5
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	08 17       	cp	r16, r24
    361c:	19 07       	cpc	r17, r25
    361e:	a8 f4       	brcc	.+42     	; 0x364a <vfprintf+0x494>
    3620:	b7 01       	movw	r22, r14
    3622:	80 e2       	ldi	r24, 0x20	; 32
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    362a:	5a 94       	dec	r5
    362c:	f4 cf       	rjmp	.-24     	; 0x3616 <vfprintf+0x460>
    362e:	f6 01       	movw	r30, r12
    3630:	97 fc       	sbrc	r9, 7
    3632:	85 91       	lpm	r24, Z+
    3634:	97 fe       	sbrs	r9, 7
    3636:	81 91       	ld	r24, Z+
    3638:	6f 01       	movw	r12, r30
    363a:	b7 01       	movw	r22, r14
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3642:	51 10       	cpse	r5, r1
    3644:	5a 94       	dec	r5
    3646:	01 50       	subi	r16, 0x01	; 1
    3648:	11 09       	sbc	r17, r1
    364a:	01 15       	cp	r16, r1
    364c:	11 05       	cpc	r17, r1
    364e:	79 f7       	brne	.-34     	; 0x362e <vfprintf+0x478>
    3650:	f7 c0       	rjmp	.+494    	; 0x3840 <vfprintf+0x68a>
    3652:	84 36       	cpi	r24, 0x64	; 100
    3654:	11 f0       	breq	.+4      	; 0x365a <vfprintf+0x4a4>
    3656:	89 36       	cpi	r24, 0x69	; 105
    3658:	61 f5       	brne	.+88     	; 0x36b2 <vfprintf+0x4fc>
    365a:	56 01       	movw	r10, r12
    365c:	97 fe       	sbrs	r9, 7
    365e:	09 c0       	rjmp	.+18     	; 0x3672 <vfprintf+0x4bc>
    3660:	24 e0       	ldi	r18, 0x04	; 4
    3662:	a2 0e       	add	r10, r18
    3664:	b1 1c       	adc	r11, r1
    3666:	f6 01       	movw	r30, r12
    3668:	60 81       	ld	r22, Z
    366a:	71 81       	ldd	r23, Z+1	; 0x01
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	93 81       	ldd	r25, Z+3	; 0x03
    3670:	0a c0       	rjmp	.+20     	; 0x3686 <vfprintf+0x4d0>
    3672:	f2 e0       	ldi	r31, 0x02	; 2
    3674:	af 0e       	add	r10, r31
    3676:	b1 1c       	adc	r11, r1
    3678:	f6 01       	movw	r30, r12
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	07 2e       	mov	r0, r23
    3680:	00 0c       	add	r0, r0
    3682:	88 0b       	sbc	r24, r24
    3684:	99 0b       	sbc	r25, r25
    3686:	f9 2d       	mov	r31, r9
    3688:	ff 76       	andi	r31, 0x6F	; 111
    368a:	9f 2e       	mov	r9, r31
    368c:	97 ff       	sbrs	r25, 7
    368e:	09 c0       	rjmp	.+18     	; 0x36a2 <vfprintf+0x4ec>
    3690:	90 95       	com	r25
    3692:	80 95       	com	r24
    3694:	70 95       	com	r23
    3696:	61 95       	neg	r22
    3698:	7f 4f       	sbci	r23, 0xFF	; 255
    369a:	8f 4f       	sbci	r24, 0xFF	; 255
    369c:	9f 4f       	sbci	r25, 0xFF	; 255
    369e:	f0 68       	ori	r31, 0x80	; 128
    36a0:	9f 2e       	mov	r9, r31
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	a3 01       	movw	r20, r6
    36a8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__ultoa_invert>
    36ac:	c8 2e       	mov	r12, r24
    36ae:	c6 18       	sub	r12, r6
    36b0:	3f c0       	rjmp	.+126    	; 0x3730 <vfprintf+0x57a>
    36b2:	09 2d       	mov	r16, r9
    36b4:	85 37       	cpi	r24, 0x75	; 117
    36b6:	21 f4       	brne	.+8      	; 0x36c0 <vfprintf+0x50a>
    36b8:	0f 7e       	andi	r16, 0xEF	; 239
    36ba:	2a e0       	ldi	r18, 0x0A	; 10
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	1d c0       	rjmp	.+58     	; 0x36fa <vfprintf+0x544>
    36c0:	09 7f       	andi	r16, 0xF9	; 249
    36c2:	8f 36       	cpi	r24, 0x6F	; 111
    36c4:	91 f0       	breq	.+36     	; 0x36ea <vfprintf+0x534>
    36c6:	18 f4       	brcc	.+6      	; 0x36ce <vfprintf+0x518>
    36c8:	88 35       	cpi	r24, 0x58	; 88
    36ca:	59 f0       	breq	.+22     	; 0x36e2 <vfprintf+0x52c>
    36cc:	c3 c0       	rjmp	.+390    	; 0x3854 <vfprintf+0x69e>
    36ce:	80 37       	cpi	r24, 0x70	; 112
    36d0:	19 f0       	breq	.+6      	; 0x36d8 <vfprintf+0x522>
    36d2:	88 37       	cpi	r24, 0x78	; 120
    36d4:	11 f0       	breq	.+4      	; 0x36da <vfprintf+0x524>
    36d6:	be c0       	rjmp	.+380    	; 0x3854 <vfprintf+0x69e>
    36d8:	00 61       	ori	r16, 0x10	; 16
    36da:	04 ff       	sbrs	r16, 4
    36dc:	09 c0       	rjmp	.+18     	; 0x36f0 <vfprintf+0x53a>
    36de:	04 60       	ori	r16, 0x04	; 4
    36e0:	07 c0       	rjmp	.+14     	; 0x36f0 <vfprintf+0x53a>
    36e2:	94 fe       	sbrs	r9, 4
    36e4:	08 c0       	rjmp	.+16     	; 0x36f6 <vfprintf+0x540>
    36e6:	06 60       	ori	r16, 0x06	; 6
    36e8:	06 c0       	rjmp	.+12     	; 0x36f6 <vfprintf+0x540>
    36ea:	28 e0       	ldi	r18, 0x08	; 8
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	05 c0       	rjmp	.+10     	; 0x36fa <vfprintf+0x544>
    36f0:	20 e1       	ldi	r18, 0x10	; 16
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <vfprintf+0x544>
    36f6:	20 e1       	ldi	r18, 0x10	; 16
    36f8:	32 e0       	ldi	r19, 0x02	; 2
    36fa:	56 01       	movw	r10, r12
    36fc:	07 ff       	sbrs	r16, 7
    36fe:	09 c0       	rjmp	.+18     	; 0x3712 <vfprintf+0x55c>
    3700:	84 e0       	ldi	r24, 0x04	; 4
    3702:	a8 0e       	add	r10, r24
    3704:	b1 1c       	adc	r11, r1
    3706:	f6 01       	movw	r30, r12
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	08 c0       	rjmp	.+16     	; 0x3722 <vfprintf+0x56c>
    3712:	f2 e0       	ldi	r31, 0x02	; 2
    3714:	af 0e       	add	r10, r31
    3716:	b1 1c       	adc	r11, r1
    3718:	f6 01       	movw	r30, r12
    371a:	60 81       	ld	r22, Z
    371c:	71 81       	ldd	r23, Z+1	; 0x01
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	a3 01       	movw	r20, r6
    3724:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__ultoa_invert>
    3728:	c8 2e       	mov	r12, r24
    372a:	c6 18       	sub	r12, r6
    372c:	0f 77       	andi	r16, 0x7F	; 127
    372e:	90 2e       	mov	r9, r16
    3730:	96 fe       	sbrs	r9, 6
    3732:	0b c0       	rjmp	.+22     	; 0x374a <vfprintf+0x594>
    3734:	09 2d       	mov	r16, r9
    3736:	0e 7f       	andi	r16, 0xFE	; 254
    3738:	c1 16       	cp	r12, r17
    373a:	50 f4       	brcc	.+20     	; 0x3750 <vfprintf+0x59a>
    373c:	94 fe       	sbrs	r9, 4
    373e:	0a c0       	rjmp	.+20     	; 0x3754 <vfprintf+0x59e>
    3740:	92 fc       	sbrc	r9, 2
    3742:	08 c0       	rjmp	.+16     	; 0x3754 <vfprintf+0x59e>
    3744:	09 2d       	mov	r16, r9
    3746:	0e 7e       	andi	r16, 0xEE	; 238
    3748:	05 c0       	rjmp	.+10     	; 0x3754 <vfprintf+0x59e>
    374a:	dc 2c       	mov	r13, r12
    374c:	09 2d       	mov	r16, r9
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <vfprintf+0x5a0>
    3750:	dc 2c       	mov	r13, r12
    3752:	01 c0       	rjmp	.+2      	; 0x3756 <vfprintf+0x5a0>
    3754:	d1 2e       	mov	r13, r17
    3756:	04 ff       	sbrs	r16, 4
    3758:	0d c0       	rjmp	.+26     	; 0x3774 <vfprintf+0x5be>
    375a:	fe 01       	movw	r30, r28
    375c:	ec 0d       	add	r30, r12
    375e:	f1 1d       	adc	r31, r1
    3760:	80 81       	ld	r24, Z
    3762:	80 33       	cpi	r24, 0x30	; 48
    3764:	11 f4       	brne	.+4      	; 0x376a <vfprintf+0x5b4>
    3766:	09 7e       	andi	r16, 0xE9	; 233
    3768:	09 c0       	rjmp	.+18     	; 0x377c <vfprintf+0x5c6>
    376a:	02 ff       	sbrs	r16, 2
    376c:	06 c0       	rjmp	.+12     	; 0x377a <vfprintf+0x5c4>
    376e:	d3 94       	inc	r13
    3770:	d3 94       	inc	r13
    3772:	04 c0       	rjmp	.+8      	; 0x377c <vfprintf+0x5c6>
    3774:	80 2f       	mov	r24, r16
    3776:	86 78       	andi	r24, 0x86	; 134
    3778:	09 f0       	breq	.+2      	; 0x377c <vfprintf+0x5c6>
    377a:	d3 94       	inc	r13
    377c:	03 fd       	sbrc	r16, 3
    377e:	11 c0       	rjmp	.+34     	; 0x37a2 <vfprintf+0x5ec>
    3780:	00 ff       	sbrs	r16, 0
    3782:	06 c0       	rjmp	.+12     	; 0x3790 <vfprintf+0x5da>
    3784:	1c 2d       	mov	r17, r12
    3786:	d5 14       	cp	r13, r5
    3788:	80 f4       	brcc	.+32     	; 0x37aa <vfprintf+0x5f4>
    378a:	15 0d       	add	r17, r5
    378c:	1d 19       	sub	r17, r13
    378e:	0d c0       	rjmp	.+26     	; 0x37aa <vfprintf+0x5f4>
    3790:	d5 14       	cp	r13, r5
    3792:	58 f4       	brcc	.+22     	; 0x37aa <vfprintf+0x5f4>
    3794:	b7 01       	movw	r22, r14
    3796:	80 e2       	ldi	r24, 0x20	; 32
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    379e:	d3 94       	inc	r13
    37a0:	f7 cf       	rjmp	.-18     	; 0x3790 <vfprintf+0x5da>
    37a2:	d5 14       	cp	r13, r5
    37a4:	10 f4       	brcc	.+4      	; 0x37aa <vfprintf+0x5f4>
    37a6:	5d 18       	sub	r5, r13
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <vfprintf+0x5f6>
    37aa:	51 2c       	mov	r5, r1
    37ac:	04 ff       	sbrs	r16, 4
    37ae:	10 c0       	rjmp	.+32     	; 0x37d0 <vfprintf+0x61a>
    37b0:	b7 01       	movw	r22, r14
    37b2:	80 e3       	ldi	r24, 0x30	; 48
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    37ba:	02 ff       	sbrs	r16, 2
    37bc:	17 c0       	rjmp	.+46     	; 0x37ec <vfprintf+0x636>
    37be:	01 fd       	sbrc	r16, 1
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <vfprintf+0x612>
    37c2:	88 e7       	ldi	r24, 0x78	; 120
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <vfprintf+0x616>
    37c8:	88 e5       	ldi	r24, 0x58	; 88
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	b7 01       	movw	r22, r14
    37ce:	0c c0       	rjmp	.+24     	; 0x37e8 <vfprintf+0x632>
    37d0:	80 2f       	mov	r24, r16
    37d2:	86 78       	andi	r24, 0x86	; 134
    37d4:	59 f0       	breq	.+22     	; 0x37ec <vfprintf+0x636>
    37d6:	01 ff       	sbrs	r16, 1
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <vfprintf+0x628>
    37da:	8b e2       	ldi	r24, 0x2B	; 43
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <vfprintf+0x62a>
    37de:	80 e2       	ldi	r24, 0x20	; 32
    37e0:	07 fd       	sbrc	r16, 7
    37e2:	8d e2       	ldi	r24, 0x2D	; 45
    37e4:	b7 01       	movw	r22, r14
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    37ec:	c1 16       	cp	r12, r17
    37ee:	38 f4       	brcc	.+14     	; 0x37fe <vfprintf+0x648>
    37f0:	b7 01       	movw	r22, r14
    37f2:	80 e3       	ldi	r24, 0x30	; 48
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    37fa:	11 50       	subi	r17, 0x01	; 1
    37fc:	f7 cf       	rjmp	.-18     	; 0x37ec <vfprintf+0x636>
    37fe:	ca 94       	dec	r12
    3800:	f3 01       	movw	r30, r6
    3802:	ec 0d       	add	r30, r12
    3804:	f1 1d       	adc	r31, r1
    3806:	80 81       	ld	r24, Z
    3808:	b7 01       	movw	r22, r14
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3810:	c1 10       	cpse	r12, r1
    3812:	f5 cf       	rjmp	.-22     	; 0x37fe <vfprintf+0x648>
    3814:	15 c0       	rjmp	.+42     	; 0x3840 <vfprintf+0x68a>
    3816:	f4 e0       	ldi	r31, 0x04	; 4
    3818:	f5 15       	cp	r31, r5
    381a:	60 f5       	brcc	.+88     	; 0x3874 <vfprintf+0x6be>
    381c:	84 e0       	ldi	r24, 0x04	; 4
    381e:	58 1a       	sub	r5, r24
    3820:	93 fe       	sbrs	r9, 3
    3822:	1f c0       	rjmp	.+62     	; 0x3862 <vfprintf+0x6ac>
    3824:	01 11       	cpse	r16, r1
    3826:	27 c0       	rjmp	.+78     	; 0x3876 <vfprintf+0x6c0>
    3828:	2c 85       	ldd	r18, Y+12	; 0x0c
    382a:	23 ff       	sbrs	r18, 3
    382c:	2a c0       	rjmp	.+84     	; 0x3882 <vfprintf+0x6cc>
    382e:	02 e5       	ldi	r16, 0x52	; 82
    3830:	12 e0       	ldi	r17, 0x02	; 2
    3832:	39 2d       	mov	r19, r9
    3834:	30 71       	andi	r19, 0x10	; 16
    3836:	93 2e       	mov	r9, r19
    3838:	f8 01       	movw	r30, r16
    383a:	84 91       	lpm	r24, Z
    383c:	81 11       	cpse	r24, r1
    383e:	24 c0       	rjmp	.+72     	; 0x3888 <vfprintf+0x6d2>
    3840:	55 20       	and	r5, r5
    3842:	09 f4       	brne	.+2      	; 0x3846 <vfprintf+0x690>
    3844:	e4 cc       	rjmp	.-1592   	; 0x320e <vfprintf+0x58>
    3846:	b7 01       	movw	r22, r14
    3848:	80 e2       	ldi	r24, 0x20	; 32
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3850:	5a 94       	dec	r5
    3852:	f6 cf       	rjmp	.-20     	; 0x3840 <vfprintf+0x68a>
    3854:	f7 01       	movw	r30, r14
    3856:	86 81       	ldd	r24, Z+6	; 0x06
    3858:	97 81       	ldd	r25, Z+7	; 0x07
    385a:	26 c0       	rjmp	.+76     	; 0x38a8 <vfprintf+0x6f2>
    385c:	8f ef       	ldi	r24, 0xFF	; 255
    385e:	9f ef       	ldi	r25, 0xFF	; 255
    3860:	23 c0       	rjmp	.+70     	; 0x38a8 <vfprintf+0x6f2>
    3862:	b7 01       	movw	r22, r14
    3864:	80 e2       	ldi	r24, 0x20	; 32
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    386c:	5a 94       	dec	r5
    386e:	51 10       	cpse	r5, r1
    3870:	f8 cf       	rjmp	.-16     	; 0x3862 <vfprintf+0x6ac>
    3872:	d8 cf       	rjmp	.-80     	; 0x3824 <vfprintf+0x66e>
    3874:	51 2c       	mov	r5, r1
    3876:	b7 01       	movw	r22, r14
    3878:	80 2f       	mov	r24, r16
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3880:	d3 cf       	rjmp	.-90     	; 0x3828 <vfprintf+0x672>
    3882:	06 e5       	ldi	r16, 0x56	; 86
    3884:	12 e0       	ldi	r17, 0x02	; 2
    3886:	d5 cf       	rjmp	.-86     	; 0x3832 <vfprintf+0x67c>
    3888:	91 10       	cpse	r9, r1
    388a:	80 52       	subi	r24, 0x20	; 32
    388c:	b7 01       	movw	r22, r14
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <fputc>
    3894:	0f 5f       	subi	r16, 0xFF	; 255
    3896:	1f 4f       	sbci	r17, 0xFF	; 255
    3898:	cf cf       	rjmp	.-98     	; 0x3838 <vfprintf+0x682>
    389a:	23 e0       	ldi	r18, 0x03	; 3
    389c:	25 15       	cp	r18, r5
    389e:	10 f4       	brcc	.+4      	; 0x38a4 <vfprintf+0x6ee>
    38a0:	83 e0       	ldi	r24, 0x03	; 3
    38a2:	bd cf       	rjmp	.-134    	; 0x381e <vfprintf+0x668>
    38a4:	51 2c       	mov	r5, r1
    38a6:	c0 cf       	rjmp	.-128    	; 0x3828 <vfprintf+0x672>
    38a8:	60 96       	adiw	r28, 0x10	; 16
    38aa:	e2 e1       	ldi	r30, 0x12	; 18
    38ac:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__>

000038b0 <__divmodhi4>:
    38b0:	97 fb       	bst	r25, 7
    38b2:	07 2e       	mov	r0, r23
    38b4:	16 f4       	brtc	.+4      	; 0x38ba <__divmodhi4+0xa>
    38b6:	00 94       	com	r0
    38b8:	07 d0       	rcall	.+14     	; 0x38c8 <__divmodhi4_neg1>
    38ba:	77 fd       	sbrc	r23, 7
    38bc:	09 d0       	rcall	.+18     	; 0x38d0 <__divmodhi4_neg2>
    38be:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__udivmodhi4>
    38c2:	07 fc       	sbrc	r0, 7
    38c4:	05 d0       	rcall	.+10     	; 0x38d0 <__divmodhi4_neg2>
    38c6:	3e f4       	brtc	.+14     	; 0x38d6 <__divmodhi4_exit>

000038c8 <__divmodhi4_neg1>:
    38c8:	90 95       	com	r25
    38ca:	81 95       	neg	r24
    38cc:	9f 4f       	sbci	r25, 0xFF	; 255
    38ce:	08 95       	ret

000038d0 <__divmodhi4_neg2>:
    38d0:	70 95       	com	r23
    38d2:	61 95       	neg	r22
    38d4:	7f 4f       	sbci	r23, 0xFF	; 255

000038d6 <__divmodhi4_exit>:
    38d6:	08 95       	ret

000038d8 <__tablejump2__>:
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	05 90       	lpm	r0, Z+
    38de:	f4 91       	lpm	r31, Z
    38e0:	e0 2d       	mov	r30, r0
    38e2:	09 94       	ijmp

000038e4 <__umulhisi3>:
    38e4:	a2 9f       	mul	r26, r18
    38e6:	b0 01       	movw	r22, r0
    38e8:	b3 9f       	mul	r27, r19
    38ea:	c0 01       	movw	r24, r0
    38ec:	a3 9f       	mul	r26, r19
    38ee:	70 0d       	add	r23, r0
    38f0:	81 1d       	adc	r24, r1
    38f2:	11 24       	eor	r1, r1
    38f4:	91 1d       	adc	r25, r1
    38f6:	b2 9f       	mul	r27, r18
    38f8:	70 0d       	add	r23, r0
    38fa:	81 1d       	adc	r24, r1
    38fc:	11 24       	eor	r1, r1
    38fe:	91 1d       	adc	r25, r1
    3900:	08 95       	ret

00003902 <__prologue_saves__>:
    3902:	2f 92       	push	r2
    3904:	3f 92       	push	r3
    3906:	4f 92       	push	r4
    3908:	5f 92       	push	r5
    390a:	6f 92       	push	r6
    390c:	7f 92       	push	r7
    390e:	8f 92       	push	r8
    3910:	9f 92       	push	r9
    3912:	af 92       	push	r10
    3914:	bf 92       	push	r11
    3916:	cf 92       	push	r12
    3918:	df 92       	push	r13
    391a:	ef 92       	push	r14
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	ca 1b       	sub	r28, r26
    392c:	db 0b       	sbc	r29, r27
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	09 94       	ijmp

0000393a <__epilogue_restores__>:
    393a:	2a 88       	ldd	r2, Y+18	; 0x12
    393c:	39 88       	ldd	r3, Y+17	; 0x11
    393e:	48 88       	ldd	r4, Y+16	; 0x10
    3940:	5f 84       	ldd	r5, Y+15	; 0x0f
    3942:	6e 84       	ldd	r6, Y+14	; 0x0e
    3944:	7d 84       	ldd	r7, Y+13	; 0x0d
    3946:	8c 84       	ldd	r8, Y+12	; 0x0c
    3948:	9b 84       	ldd	r9, Y+11	; 0x0b
    394a:	aa 84       	ldd	r10, Y+10	; 0x0a
    394c:	b9 84       	ldd	r11, Y+9	; 0x09
    394e:	c8 84       	ldd	r12, Y+8	; 0x08
    3950:	df 80       	ldd	r13, Y+7	; 0x07
    3952:	ee 80       	ldd	r14, Y+6	; 0x06
    3954:	fd 80       	ldd	r15, Y+5	; 0x05
    3956:	0c 81       	ldd	r16, Y+4	; 0x04
    3958:	1b 81       	ldd	r17, Y+3	; 0x03
    395a:	aa 81       	ldd	r26, Y+2	; 0x02
    395c:	b9 81       	ldd	r27, Y+1	; 0x01
    395e:	ce 0f       	add	r28, r30
    3960:	d1 1d       	adc	r29, r1
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	de bf       	out	0x3e, r29	; 62
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	ed 01       	movw	r28, r26
    396e:	08 95       	ret

00003970 <__udivmodhi4>:
    3970:	aa 1b       	sub	r26, r26
    3972:	bb 1b       	sub	r27, r27
    3974:	51 e1       	ldi	r21, 0x11	; 17
    3976:	07 c0       	rjmp	.+14     	; 0x3986 <__udivmodhi4_ep>

00003978 <__udivmodhi4_loop>:
    3978:	aa 1f       	adc	r26, r26
    397a:	bb 1f       	adc	r27, r27
    397c:	a6 17       	cp	r26, r22
    397e:	b7 07       	cpc	r27, r23
    3980:	10 f0       	brcs	.+4      	; 0x3986 <__udivmodhi4_ep>
    3982:	a6 1b       	sub	r26, r22
    3984:	b7 0b       	sbc	r27, r23

00003986 <__udivmodhi4_ep>:
    3986:	88 1f       	adc	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	5a 95       	dec	r21
    398c:	a9 f7       	brne	.-22     	; 0x3978 <__udivmodhi4_loop>
    398e:	80 95       	com	r24
    3990:	90 95       	com	r25
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	08 95       	ret

00003998 <__ftoa_engine>:
    3998:	28 30       	cpi	r18, 0x08	; 8
    399a:	08 f0       	brcs	.+2      	; 0x399e <__ftoa_engine+0x6>
    399c:	27 e0       	ldi	r18, 0x07	; 7
    399e:	33 27       	eor	r19, r19
    39a0:	da 01       	movw	r26, r20
    39a2:	99 0f       	add	r25, r25
    39a4:	31 1d       	adc	r19, r1
    39a6:	87 fd       	sbrc	r24, 7
    39a8:	91 60       	ori	r25, 0x01	; 1
    39aa:	00 96       	adiw	r24, 0x00	; 0
    39ac:	61 05       	cpc	r22, r1
    39ae:	71 05       	cpc	r23, r1
    39b0:	39 f4       	brne	.+14     	; 0x39c0 <__ftoa_engine+0x28>
    39b2:	32 60       	ori	r19, 0x02	; 2
    39b4:	2e 5f       	subi	r18, 0xFE	; 254
    39b6:	3d 93       	st	X+, r19
    39b8:	30 e3       	ldi	r19, 0x30	; 48
    39ba:	2a 95       	dec	r18
    39bc:	e1 f7       	brne	.-8      	; 0x39b6 <__ftoa_engine+0x1e>
    39be:	08 95       	ret
    39c0:	9f 3f       	cpi	r25, 0xFF	; 255
    39c2:	30 f0       	brcs	.+12     	; 0x39d0 <__ftoa_engine+0x38>
    39c4:	80 38       	cpi	r24, 0x80	; 128
    39c6:	71 05       	cpc	r23, r1
    39c8:	61 05       	cpc	r22, r1
    39ca:	09 f0       	breq	.+2      	; 0x39ce <__ftoa_engine+0x36>
    39cc:	3c 5f       	subi	r19, 0xFC	; 252
    39ce:	3c 5f       	subi	r19, 0xFC	; 252
    39d0:	3d 93       	st	X+, r19
    39d2:	91 30       	cpi	r25, 0x01	; 1
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <__ftoa_engine+0x40>
    39d6:	80 68       	ori	r24, 0x80	; 128
    39d8:	91 1d       	adc	r25, r1
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	1f 93       	push	r17
    39e0:	0f 93       	push	r16
    39e2:	ff 92       	push	r15
    39e4:	ef 92       	push	r14
    39e6:	19 2f       	mov	r17, r25
    39e8:	98 7f       	andi	r25, 0xF8	; 248
    39ea:	96 95       	lsr	r25
    39ec:	e9 2f       	mov	r30, r25
    39ee:	96 95       	lsr	r25
    39f0:	96 95       	lsr	r25
    39f2:	e9 0f       	add	r30, r25
    39f4:	ff 27       	eor	r31, r31
    39f6:	ec 54       	subi	r30, 0x4C	; 76
    39f8:	fd 4f       	sbci	r31, 0xFD	; 253
    39fa:	99 27       	eor	r25, r25
    39fc:	33 27       	eor	r19, r19
    39fe:	ee 24       	eor	r14, r14
    3a00:	ff 24       	eor	r15, r15
    3a02:	a7 01       	movw	r20, r14
    3a04:	e7 01       	movw	r28, r14
    3a06:	05 90       	lpm	r0, Z+
    3a08:	08 94       	sec
    3a0a:	07 94       	ror	r0
    3a0c:	28 f4       	brcc	.+10     	; 0x3a18 <__ftoa_engine+0x80>
    3a0e:	36 0f       	add	r19, r22
    3a10:	e7 1e       	adc	r14, r23
    3a12:	f8 1e       	adc	r15, r24
    3a14:	49 1f       	adc	r20, r25
    3a16:	51 1d       	adc	r21, r1
    3a18:	66 0f       	add	r22, r22
    3a1a:	77 1f       	adc	r23, r23
    3a1c:	88 1f       	adc	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	06 94       	lsr	r0
    3a22:	a1 f7       	brne	.-24     	; 0x3a0c <__ftoa_engine+0x74>
    3a24:	05 90       	lpm	r0, Z+
    3a26:	07 94       	ror	r0
    3a28:	28 f4       	brcc	.+10     	; 0x3a34 <__ftoa_engine+0x9c>
    3a2a:	e7 0e       	add	r14, r23
    3a2c:	f8 1e       	adc	r15, r24
    3a2e:	49 1f       	adc	r20, r25
    3a30:	56 1f       	adc	r21, r22
    3a32:	c1 1d       	adc	r28, r1
    3a34:	77 0f       	add	r23, r23
    3a36:	88 1f       	adc	r24, r24
    3a38:	99 1f       	adc	r25, r25
    3a3a:	66 1f       	adc	r22, r22
    3a3c:	06 94       	lsr	r0
    3a3e:	a1 f7       	brne	.-24     	; 0x3a28 <__ftoa_engine+0x90>
    3a40:	05 90       	lpm	r0, Z+
    3a42:	07 94       	ror	r0
    3a44:	28 f4       	brcc	.+10     	; 0x3a50 <__ftoa_engine+0xb8>
    3a46:	f8 0e       	add	r15, r24
    3a48:	49 1f       	adc	r20, r25
    3a4a:	56 1f       	adc	r21, r22
    3a4c:	c7 1f       	adc	r28, r23
    3a4e:	d1 1d       	adc	r29, r1
    3a50:	88 0f       	add	r24, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	66 1f       	adc	r22, r22
    3a56:	77 1f       	adc	r23, r23
    3a58:	06 94       	lsr	r0
    3a5a:	a1 f7       	brne	.-24     	; 0x3a44 <__ftoa_engine+0xac>
    3a5c:	05 90       	lpm	r0, Z+
    3a5e:	07 94       	ror	r0
    3a60:	20 f4       	brcc	.+8      	; 0x3a6a <__ftoa_engine+0xd2>
    3a62:	49 0f       	add	r20, r25
    3a64:	56 1f       	adc	r21, r22
    3a66:	c7 1f       	adc	r28, r23
    3a68:	d8 1f       	adc	r29, r24
    3a6a:	99 0f       	add	r25, r25
    3a6c:	66 1f       	adc	r22, r22
    3a6e:	77 1f       	adc	r23, r23
    3a70:	88 1f       	adc	r24, r24
    3a72:	06 94       	lsr	r0
    3a74:	a9 f7       	brne	.-22     	; 0x3a60 <__ftoa_engine+0xc8>
    3a76:	84 91       	lpm	r24, Z
    3a78:	10 95       	com	r17
    3a7a:	17 70       	andi	r17, 0x07	; 7
    3a7c:	41 f0       	breq	.+16     	; 0x3a8e <__ftoa_engine+0xf6>
    3a7e:	d6 95       	lsr	r29
    3a80:	c7 95       	ror	r28
    3a82:	57 95       	ror	r21
    3a84:	47 95       	ror	r20
    3a86:	f7 94       	ror	r15
    3a88:	e7 94       	ror	r14
    3a8a:	1a 95       	dec	r17
    3a8c:	c1 f7       	brne	.-16     	; 0x3a7e <__ftoa_engine+0xe6>
    3a8e:	ea e5       	ldi	r30, 0x5A	; 90
    3a90:	f2 e0       	ldi	r31, 0x02	; 2
    3a92:	68 94       	set
    3a94:	15 90       	lpm	r1, Z+
    3a96:	15 91       	lpm	r17, Z+
    3a98:	35 91       	lpm	r19, Z+
    3a9a:	65 91       	lpm	r22, Z+
    3a9c:	95 91       	lpm	r25, Z+
    3a9e:	05 90       	lpm	r0, Z+
    3aa0:	7f e2       	ldi	r23, 0x2F	; 47
    3aa2:	73 95       	inc	r23
    3aa4:	e1 18       	sub	r14, r1
    3aa6:	f1 0a       	sbc	r15, r17
    3aa8:	43 0b       	sbc	r20, r19
    3aaa:	56 0b       	sbc	r21, r22
    3aac:	c9 0b       	sbc	r28, r25
    3aae:	d0 09       	sbc	r29, r0
    3ab0:	c0 f7       	brcc	.-16     	; 0x3aa2 <__ftoa_engine+0x10a>
    3ab2:	e1 0c       	add	r14, r1
    3ab4:	f1 1e       	adc	r15, r17
    3ab6:	43 1f       	adc	r20, r19
    3ab8:	56 1f       	adc	r21, r22
    3aba:	c9 1f       	adc	r28, r25
    3abc:	d0 1d       	adc	r29, r0
    3abe:	7e f4       	brtc	.+30     	; 0x3ade <__ftoa_engine+0x146>
    3ac0:	70 33       	cpi	r23, 0x30	; 48
    3ac2:	11 f4       	brne	.+4      	; 0x3ac8 <__ftoa_engine+0x130>
    3ac4:	8a 95       	dec	r24
    3ac6:	e6 cf       	rjmp	.-52     	; 0x3a94 <__ftoa_engine+0xfc>
    3ac8:	e8 94       	clt
    3aca:	01 50       	subi	r16, 0x01	; 1
    3acc:	30 f0       	brcs	.+12     	; 0x3ada <__ftoa_engine+0x142>
    3ace:	08 0f       	add	r16, r24
    3ad0:	0a f4       	brpl	.+2      	; 0x3ad4 <__ftoa_engine+0x13c>
    3ad2:	00 27       	eor	r16, r16
    3ad4:	02 17       	cp	r16, r18
    3ad6:	08 f4       	brcc	.+2      	; 0x3ada <__ftoa_engine+0x142>
    3ad8:	20 2f       	mov	r18, r16
    3ada:	23 95       	inc	r18
    3adc:	02 2f       	mov	r16, r18
    3ade:	7a 33       	cpi	r23, 0x3A	; 58
    3ae0:	28 f0       	brcs	.+10     	; 0x3aec <__ftoa_engine+0x154>
    3ae2:	79 e3       	ldi	r23, 0x39	; 57
    3ae4:	7d 93       	st	X+, r23
    3ae6:	2a 95       	dec	r18
    3ae8:	e9 f7       	brne	.-6      	; 0x3ae4 <__ftoa_engine+0x14c>
    3aea:	10 c0       	rjmp	.+32     	; 0x3b0c <__ftoa_engine+0x174>
    3aec:	7d 93       	st	X+, r23
    3aee:	2a 95       	dec	r18
    3af0:	89 f6       	brne	.-94     	; 0x3a94 <__ftoa_engine+0xfc>
    3af2:	06 94       	lsr	r0
    3af4:	97 95       	ror	r25
    3af6:	67 95       	ror	r22
    3af8:	37 95       	ror	r19
    3afa:	17 95       	ror	r17
    3afc:	17 94       	ror	r1
    3afe:	e1 18       	sub	r14, r1
    3b00:	f1 0a       	sbc	r15, r17
    3b02:	43 0b       	sbc	r20, r19
    3b04:	56 0b       	sbc	r21, r22
    3b06:	c9 0b       	sbc	r28, r25
    3b08:	d0 09       	sbc	r29, r0
    3b0a:	98 f0       	brcs	.+38     	; 0x3b32 <__ftoa_engine+0x19a>
    3b0c:	23 95       	inc	r18
    3b0e:	7e 91       	ld	r23, -X
    3b10:	73 95       	inc	r23
    3b12:	7a 33       	cpi	r23, 0x3A	; 58
    3b14:	08 f0       	brcs	.+2      	; 0x3b18 <__ftoa_engine+0x180>
    3b16:	70 e3       	ldi	r23, 0x30	; 48
    3b18:	7c 93       	st	X, r23
    3b1a:	20 13       	cpse	r18, r16
    3b1c:	b8 f7       	brcc	.-18     	; 0x3b0c <__ftoa_engine+0x174>
    3b1e:	7e 91       	ld	r23, -X
    3b20:	70 61       	ori	r23, 0x10	; 16
    3b22:	7d 93       	st	X+, r23
    3b24:	30 f0       	brcs	.+12     	; 0x3b32 <__ftoa_engine+0x19a>
    3b26:	83 95       	inc	r24
    3b28:	71 e3       	ldi	r23, 0x31	; 49
    3b2a:	7d 93       	st	X+, r23
    3b2c:	70 e3       	ldi	r23, 0x30	; 48
    3b2e:	2a 95       	dec	r18
    3b30:	e1 f7       	brne	.-8      	; 0x3b2a <__ftoa_engine+0x192>
    3b32:	11 24       	eor	r1, r1
    3b34:	ef 90       	pop	r14
    3b36:	ff 90       	pop	r15
    3b38:	0f 91       	pop	r16
    3b3a:	1f 91       	pop	r17
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	99 27       	eor	r25, r25
    3b42:	87 fd       	sbrc	r24, 7
    3b44:	90 95       	com	r25
    3b46:	08 95       	ret

00003b48 <strnlen_P>:
    3b48:	fc 01       	movw	r30, r24
    3b4a:	05 90       	lpm	r0, Z+
    3b4c:	61 50       	subi	r22, 0x01	; 1
    3b4e:	70 40       	sbci	r23, 0x00	; 0
    3b50:	01 10       	cpse	r0, r1
    3b52:	d8 f7       	brcc	.-10     	; 0x3b4a <strnlen_P+0x2>
    3b54:	80 95       	com	r24
    3b56:	90 95       	com	r25
    3b58:	8e 0f       	add	r24, r30
    3b5a:	9f 1f       	adc	r25, r31
    3b5c:	08 95       	ret

00003b5e <strnlen>:
    3b5e:	fc 01       	movw	r30, r24
    3b60:	61 50       	subi	r22, 0x01	; 1
    3b62:	70 40       	sbci	r23, 0x00	; 0
    3b64:	01 90       	ld	r0, Z+
    3b66:	01 10       	cpse	r0, r1
    3b68:	d8 f7       	brcc	.-10     	; 0x3b60 <strnlen+0x2>
    3b6a:	80 95       	com	r24
    3b6c:	90 95       	com	r25
    3b6e:	8e 0f       	add	r24, r30
    3b70:	9f 1f       	adc	r25, r31
    3b72:	08 95       	ret

00003b74 <fputc>:
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	23 81       	ldd	r18, Z+3	; 0x03
    3b80:	21 fd       	sbrc	r18, 1
    3b82:	03 c0       	rjmp	.+6      	; 0x3b8a <fputc+0x16>
    3b84:	8f ef       	ldi	r24, 0xFF	; 255
    3b86:	9f ef       	ldi	r25, 0xFF	; 255
    3b88:	2c c0       	rjmp	.+88     	; 0x3be2 <fputc+0x6e>
    3b8a:	22 ff       	sbrs	r18, 2
    3b8c:	16 c0       	rjmp	.+44     	; 0x3bba <fputc+0x46>
    3b8e:	46 81       	ldd	r20, Z+6	; 0x06
    3b90:	57 81       	ldd	r21, Z+7	; 0x07
    3b92:	24 81       	ldd	r18, Z+4	; 0x04
    3b94:	35 81       	ldd	r19, Z+5	; 0x05
    3b96:	42 17       	cp	r20, r18
    3b98:	53 07       	cpc	r21, r19
    3b9a:	44 f4       	brge	.+16     	; 0x3bac <fputc+0x38>
    3b9c:	a0 81       	ld	r26, Z
    3b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    3ba0:	9d 01       	movw	r18, r26
    3ba2:	2f 5f       	subi	r18, 0xFF	; 255
    3ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba6:	31 83       	std	Z+1, r19	; 0x01
    3ba8:	20 83       	st	Z, r18
    3baa:	8c 93       	st	X, r24
    3bac:	26 81       	ldd	r18, Z+6	; 0x06
    3bae:	37 81       	ldd	r19, Z+7	; 0x07
    3bb0:	2f 5f       	subi	r18, 0xFF	; 255
    3bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb4:	37 83       	std	Z+7, r19	; 0x07
    3bb6:	26 83       	std	Z+6, r18	; 0x06
    3bb8:	14 c0       	rjmp	.+40     	; 0x3be2 <fputc+0x6e>
    3bba:	8b 01       	movw	r16, r22
    3bbc:	ec 01       	movw	r28, r24
    3bbe:	fb 01       	movw	r30, r22
    3bc0:	00 84       	ldd	r0, Z+8	; 0x08
    3bc2:	f1 85       	ldd	r31, Z+9	; 0x09
    3bc4:	e0 2d       	mov	r30, r0
    3bc6:	09 95       	icall
    3bc8:	89 2b       	or	r24, r25
    3bca:	e1 f6       	brne	.-72     	; 0x3b84 <fputc+0x10>
    3bcc:	d8 01       	movw	r26, r16
    3bce:	16 96       	adiw	r26, 0x06	; 6
    3bd0:	8d 91       	ld	r24, X+
    3bd2:	9c 91       	ld	r25, X
    3bd4:	17 97       	sbiw	r26, 0x07	; 7
    3bd6:	01 96       	adiw	r24, 0x01	; 1
    3bd8:	17 96       	adiw	r26, 0x07	; 7
    3bda:	9c 93       	st	X, r25
    3bdc:	8e 93       	st	-X, r24
    3bde:	16 97       	sbiw	r26, 0x06	; 6
    3be0:	ce 01       	movw	r24, r28
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	08 95       	ret

00003bec <vsprintf>:
    3bec:	ae e0       	ldi	r26, 0x0E	; 14
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ec ef       	ldi	r30, 0xFC	; 252
    3bf2:	fd e1       	ldi	r31, 0x1D	; 29
    3bf4:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__prologue_saves__+0x1c>
    3bf8:	8c 01       	movw	r16, r24
    3bfa:	86 e0       	ldi	r24, 0x06	; 6
    3bfc:	8c 83       	std	Y+4, r24	; 0x04
    3bfe:	1a 83       	std	Y+2, r17	; 0x02
    3c00:	09 83       	std	Y+1, r16	; 0x01
    3c02:	8f ef       	ldi	r24, 0xFF	; 255
    3c04:	9f e7       	ldi	r25, 0x7F	; 127
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	8d 83       	std	Y+5, r24	; 0x05
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <vfprintf>
    3c12:	ef 81       	ldd	r30, Y+7	; 0x07
    3c14:	f8 85       	ldd	r31, Y+8	; 0x08
    3c16:	e0 0f       	add	r30, r16
    3c18:	f1 1f       	adc	r31, r17
    3c1a:	10 82       	st	Z, r1
    3c1c:	2e 96       	adiw	r28, 0x0e	; 14
    3c1e:	e4 e0       	ldi	r30, 0x04	; 4
    3c20:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__epilogue_restores__+0x1c>

00003c24 <__ultoa_invert>:
    3c24:	fa 01       	movw	r30, r20
    3c26:	aa 27       	eor	r26, r26
    3c28:	28 30       	cpi	r18, 0x08	; 8
    3c2a:	51 f1       	breq	.+84     	; 0x3c80 <__ultoa_invert+0x5c>
    3c2c:	20 31       	cpi	r18, 0x10	; 16
    3c2e:	81 f1       	breq	.+96     	; 0x3c90 <__ultoa_invert+0x6c>
    3c30:	e8 94       	clt
    3c32:	6f 93       	push	r22
    3c34:	6e 7f       	andi	r22, 0xFE	; 254
    3c36:	6e 5f       	subi	r22, 0xFE	; 254
    3c38:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	af 4f       	sbci	r26, 0xFF	; 255
    3c40:	b1 e0       	ldi	r27, 0x01	; 1
    3c42:	3e d0       	rcall	.+124    	; 0x3cc0 <__ultoa_invert+0x9c>
    3c44:	b4 e0       	ldi	r27, 0x04	; 4
    3c46:	3c d0       	rcall	.+120    	; 0x3cc0 <__ultoa_invert+0x9c>
    3c48:	67 0f       	add	r22, r23
    3c4a:	78 1f       	adc	r23, r24
    3c4c:	89 1f       	adc	r24, r25
    3c4e:	9a 1f       	adc	r25, r26
    3c50:	a1 1d       	adc	r26, r1
    3c52:	68 0f       	add	r22, r24
    3c54:	79 1f       	adc	r23, r25
    3c56:	8a 1f       	adc	r24, r26
    3c58:	91 1d       	adc	r25, r1
    3c5a:	a1 1d       	adc	r26, r1
    3c5c:	6a 0f       	add	r22, r26
    3c5e:	71 1d       	adc	r23, r1
    3c60:	81 1d       	adc	r24, r1
    3c62:	91 1d       	adc	r25, r1
    3c64:	a1 1d       	adc	r26, r1
    3c66:	20 d0       	rcall	.+64     	; 0x3ca8 <__ultoa_invert+0x84>
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <__ultoa_invert+0x48>
    3c6a:	68 94       	set
    3c6c:	3f 91       	pop	r19
    3c6e:	2a e0       	ldi	r18, 0x0A	; 10
    3c70:	26 9f       	mul	r18, r22
    3c72:	11 24       	eor	r1, r1
    3c74:	30 19       	sub	r19, r0
    3c76:	30 5d       	subi	r19, 0xD0	; 208
    3c78:	31 93       	st	Z+, r19
    3c7a:	de f6       	brtc	.-74     	; 0x3c32 <__ultoa_invert+0xe>
    3c7c:	cf 01       	movw	r24, r30
    3c7e:	08 95       	ret
    3c80:	46 2f       	mov	r20, r22
    3c82:	47 70       	andi	r20, 0x07	; 7
    3c84:	40 5d       	subi	r20, 0xD0	; 208
    3c86:	41 93       	st	Z+, r20
    3c88:	b3 e0       	ldi	r27, 0x03	; 3
    3c8a:	0f d0       	rcall	.+30     	; 0x3caa <__ultoa_invert+0x86>
    3c8c:	c9 f7       	brne	.-14     	; 0x3c80 <__ultoa_invert+0x5c>
    3c8e:	f6 cf       	rjmp	.-20     	; 0x3c7c <__ultoa_invert+0x58>
    3c90:	46 2f       	mov	r20, r22
    3c92:	4f 70       	andi	r20, 0x0F	; 15
    3c94:	40 5d       	subi	r20, 0xD0	; 208
    3c96:	4a 33       	cpi	r20, 0x3A	; 58
    3c98:	18 f0       	brcs	.+6      	; 0x3ca0 <__ultoa_invert+0x7c>
    3c9a:	49 5d       	subi	r20, 0xD9	; 217
    3c9c:	31 fd       	sbrc	r19, 1
    3c9e:	40 52       	subi	r20, 0x20	; 32
    3ca0:	41 93       	st	Z+, r20
    3ca2:	02 d0       	rcall	.+4      	; 0x3ca8 <__ultoa_invert+0x84>
    3ca4:	a9 f7       	brne	.-22     	; 0x3c90 <__ultoa_invert+0x6c>
    3ca6:	ea cf       	rjmp	.-44     	; 0x3c7c <__ultoa_invert+0x58>
    3ca8:	b4 e0       	ldi	r27, 0x04	; 4
    3caa:	a6 95       	lsr	r26
    3cac:	97 95       	ror	r25
    3cae:	87 95       	ror	r24
    3cb0:	77 95       	ror	r23
    3cb2:	67 95       	ror	r22
    3cb4:	ba 95       	dec	r27
    3cb6:	c9 f7       	brne	.-14     	; 0x3caa <__ultoa_invert+0x86>
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	61 05       	cpc	r22, r1
    3cbc:	71 05       	cpc	r23, r1
    3cbe:	08 95       	ret
    3cc0:	9b 01       	movw	r18, r22
    3cc2:	ac 01       	movw	r20, r24
    3cc4:	0a 2e       	mov	r0, r26
    3cc6:	06 94       	lsr	r0
    3cc8:	57 95       	ror	r21
    3cca:	47 95       	ror	r20
    3ccc:	37 95       	ror	r19
    3cce:	27 95       	ror	r18
    3cd0:	ba 95       	dec	r27
    3cd2:	c9 f7       	brne	.-14     	; 0x3cc6 <__ultoa_invert+0xa2>
    3cd4:	62 0f       	add	r22, r18
    3cd6:	73 1f       	adc	r23, r19
    3cd8:	84 1f       	adc	r24, r20
    3cda:	95 1f       	adc	r25, r21
    3cdc:	a0 1d       	adc	r26, r0
    3cde:	08 95       	ret

00003ce0 <_exit>:
    3ce0:	f8 94       	cli

00003ce2 <__stop_program>:
    3ce2:	ff cf       	rjmp	.-2      	; 0x3ce2 <__stop_program>
