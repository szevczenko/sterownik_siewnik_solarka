
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b0  00800060  00004360  000043f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000290  00800310  00800310  000046a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d8  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005426  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee4  00000000  00000000  0000a13a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b8a  00000000  00000000  0000c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e2c  00000000  00000000  0000fba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019c0  00000000  00000000  000109d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002962  00000000  00000000  00012394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00014cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_13>
      38:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	53 08       	sbc	r5, r3
      56:	5a 08       	sbc	r5, r10
      58:	5d 08       	sbc	r5, r13
      5a:	63 08       	sbc	r6, r3
      5c:	69 08       	sbc	r6, r9
      5e:	6e 08       	sbc	r6, r14
      60:	74 08       	sbc	r7, r4
      62:	7b 08       	sbc	r7, r11
      64:	7f 08       	sbc	r7, r15
      66:	87 08       	sbc	r8, r7
      68:	d6 08       	sbc	r13, r6
      6a:	d6 08       	sbc	r13, r6
      6c:	d6 08       	sbc	r13, r6
      6e:	d6 08       	sbc	r13, r6
      70:	d6 08       	sbc	r13, r6
      72:	d6 08       	sbc	r13, r6
      74:	d6 08       	sbc	r13, r6
      76:	d6 08       	sbc	r13, r6
      78:	d6 08       	sbc	r13, r6
      7a:	d6 08       	sbc	r13, r6
      7c:	d6 08       	sbc	r13, r6
      7e:	d6 08       	sbc	r13, r6
      80:	d6 08       	sbc	r13, r6
      82:	d6 08       	sbc	r13, r6
      84:	d6 08       	sbc	r13, r6
      86:	d6 08       	sbc	r13, r6
      88:	d6 08       	sbc	r13, r6
      8a:	d6 08       	sbc	r13, r6
      8c:	d6 08       	sbc	r13, r6
      8e:	d6 08       	sbc	r13, r6
      90:	d6 08       	sbc	r13, r6
      92:	d6 08       	sbc	r13, r6
      94:	d6 08       	sbc	r13, r6
      96:	d6 08       	sbc	r13, r6
      98:	d6 08       	sbc	r13, r6
      9a:	d6 08       	sbc	r13, r6
      9c:	d6 08       	sbc	r13, r6
      9e:	d6 08       	sbc	r13, r6
      a0:	d6 08       	sbc	r13, r6
      a2:	d6 08       	sbc	r13, r6
      a4:	d6 08       	sbc	r13, r6
      a6:	d6 08       	sbc	r13, r6
      a8:	d6 08       	sbc	r13, r6
      aa:	d6 08       	sbc	r13, r6
      ac:	d6 08       	sbc	r13, r6
      ae:	d6 08       	sbc	r13, r6
      b0:	d6 08       	sbc	r13, r6
      b2:	d6 08       	sbc	r13, r6
      b4:	d6 08       	sbc	r13, r6
      b6:	d6 08       	sbc	r13, r6
      b8:	d6 08       	sbc	r13, r6
      ba:	d6 08       	sbc	r13, r6
      bc:	d6 08       	sbc	r13, r6
      be:	d6 08       	sbc	r13, r6
      c0:	d6 08       	sbc	r13, r6
      c2:	d6 08       	sbc	r13, r6
      c4:	d6 08       	sbc	r13, r6
      c6:	d6 08       	sbc	r13, r6
      c8:	d6 08       	sbc	r13, r6
      ca:	d6 08       	sbc	r13, r6
      cc:	d6 08       	sbc	r13, r6
      ce:	d6 08       	sbc	r13, r6
      d0:	d6 08       	sbc	r13, r6
      d2:	d6 08       	sbc	r13, r6
      d4:	d6 08       	sbc	r13, r6
      d6:	d6 08       	sbc	r13, r6
      d8:	d6 08       	sbc	r13, r6
      da:	d6 08       	sbc	r13, r6
      dc:	d6 08       	sbc	r13, r6
      de:	d6 08       	sbc	r13, r6
      e0:	d6 08       	sbc	r13, r6
      e2:	d6 08       	sbc	r13, r6
      e4:	d6 08       	sbc	r13, r6
      e6:	d6 08       	sbc	r13, r6
      e8:	d6 08       	sbc	r13, r6
      ea:	d6 08       	sbc	r13, r6
      ec:	d6 08       	sbc	r13, r6
      ee:	d6 08       	sbc	r13, r6
      f0:	d6 08       	sbc	r13, r6
      f2:	d6 08       	sbc	r13, r6
      f4:	d6 08       	sbc	r13, r6
      f6:	d6 08       	sbc	r13, r6
      f8:	d6 08       	sbc	r13, r6
      fa:	d6 08       	sbc	r13, r6
      fc:	d6 08       	sbc	r13, r6
      fe:	d6 08       	sbc	r13, r6
     100:	d6 08       	sbc	r13, r6
     102:	d6 08       	sbc	r13, r6
     104:	d6 08       	sbc	r13, r6
     106:	d6 08       	sbc	r13, r6
     108:	d6 08       	sbc	r13, r6
     10a:	d6 08       	sbc	r13, r6
     10c:	d6 08       	sbc	r13, r6
     10e:	d6 08       	sbc	r13, r6
     110:	d6 08       	sbc	r13, r6
     112:	d6 08       	sbc	r13, r6
     114:	d6 08       	sbc	r13, r6
     116:	8e 08       	sbc	r8, r14
     118:	95 08       	sbc	r9, r5
     11a:	9b 08       	sbc	r9, r11
     11c:	a0 08       	sbc	r10, r0
     11e:	a6 08       	sbc	r10, r6
     120:	ac 08       	sbc	r10, r12
     122:	d6 08       	sbc	r13, r6
     124:	d6 08       	sbc	r13, r6
     126:	d6 08       	sbc	r13, r6
     128:	d6 08       	sbc	r13, r6
     12a:	d6 08       	sbc	r13, r6
     12c:	c5 08       	sbc	r12, r5
     12e:	d6 08       	sbc	r13, r6
     130:	d6 08       	sbc	r13, r6
     132:	b4 08       	sbc	r11, r4
     134:	b9 08       	sbc	r11, r9
     136:	d6 08       	sbc	r13, r6
     138:	b1 08       	sbc	r11, r1
     13a:	bf 08       	sbc	r11, r15
     13c:	d6 08       	sbc	r13, r6
     13e:	d6 08       	sbc	r13, r6
     140:	d6 08       	sbc	r13, r6
     142:	d6 08       	sbc	r13, r6
     144:	d6 08       	sbc	r13, r6
     146:	d6 08       	sbc	r13, r6
     148:	d6 08       	sbc	r13, r6
     14a:	d6 08       	sbc	r13, r6
     14c:	d6 08       	sbc	r13, r6
     14e:	d6 08       	sbc	r13, r6
     150:	d6 08       	sbc	r13, r6
     152:	d6 08       	sbc	r13, r6
     154:	d6 08       	sbc	r13, r6
     156:	d6 08       	sbc	r13, r6
     158:	d6 08       	sbc	r13, r6
     15a:	d6 08       	sbc	r13, r6
     15c:	d6 08       	sbc	r13, r6
     15e:	d6 08       	sbc	r13, r6
     160:	d6 08       	sbc	r13, r6
     162:	d6 08       	sbc	r13, r6
     164:	d6 08       	sbc	r13, r6
     166:	d6 08       	sbc	r13, r6
     168:	d6 08       	sbc	r13, r6
     16a:	d6 08       	sbc	r13, r6
     16c:	d6 08       	sbc	r13, r6
     16e:	d6 08       	sbc	r13, r6
     170:	d6 08       	sbc	r13, r6
     172:	d6 08       	sbc	r13, r6
     174:	d6 08       	sbc	r13, r6
     176:	d6 08       	sbc	r13, r6
     178:	d6 08       	sbc	r13, r6
     17a:	d6 08       	sbc	r13, r6
     17c:	d6 08       	sbc	r13, r6
     17e:	d6 08       	sbc	r13, r6
     180:	d6 08       	sbc	r13, r6
     182:	d6 08       	sbc	r13, r6
     184:	d6 08       	sbc	r13, r6
     186:	d6 08       	sbc	r13, r6
     188:	d6 08       	sbc	r13, r6
     18a:	d6 08       	sbc	r13, r6
     18c:	d6 08       	sbc	r13, r6
     18e:	d6 08       	sbc	r13, r6
     190:	d6 08       	sbc	r13, r6
     192:	d6 08       	sbc	r13, r6
     194:	d6 08       	sbc	r13, r6
     196:	d6 08       	sbc	r13, r6
     198:	d6 08       	sbc	r13, r6
     19a:	d6 08       	sbc	r13, r6
     19c:	d6 08       	sbc	r13, r6
     19e:	d6 08       	sbc	r13, r6
     1a0:	d6 08       	sbc	r13, r6
     1a2:	d6 08       	sbc	r13, r6
     1a4:	d6 08       	sbc	r13, r6
     1a6:	d6 08       	sbc	r13, r6
     1a8:	d6 08       	sbc	r13, r6
     1aa:	d6 08       	sbc	r13, r6
     1ac:	d6 08       	sbc	r13, r6
     1ae:	d6 08       	sbc	r13, r6
     1b0:	d6 08       	sbc	r13, r6
     1b2:	d6 08       	sbc	r13, r6
     1b4:	d6 08       	sbc	r13, r6
     1b6:	d6 08       	sbc	r13, r6
     1b8:	d6 08       	sbc	r13, r6
     1ba:	d6 08       	sbc	r13, r6
     1bc:	d6 08       	sbc	r13, r6
     1be:	d6 08       	sbc	r13, r6
     1c0:	d6 08       	sbc	r13, r6
     1c2:	d6 08       	sbc	r13, r6
     1c4:	d6 08       	sbc	r13, r6
     1c6:	d6 08       	sbc	r13, r6
     1c8:	d6 08       	sbc	r13, r6
     1ca:	d6 08       	sbc	r13, r6
     1cc:	d6 08       	sbc	r13, r6
     1ce:	d6 08       	sbc	r13, r6
     1d0:	d6 08       	sbc	r13, r6
     1d2:	d6 08       	sbc	r13, r6
     1d4:	d6 08       	sbc	r13, r6
     1d6:	d6 08       	sbc	r13, r6
     1d8:	d6 08       	sbc	r13, r6
     1da:	d6 08       	sbc	r13, r6
     1dc:	d6 08       	sbc	r13, r6
     1de:	d6 08       	sbc	r13, r6
     1e0:	d6 08       	sbc	r13, r6
     1e2:	d6 08       	sbc	r13, r6
     1e4:	d6 08       	sbc	r13, r6
     1e6:	d6 08       	sbc	r13, r6
     1e8:	d6 08       	sbc	r13, r6
     1ea:	d6 08       	sbc	r13, r6
     1ec:	d6 08       	sbc	r13, r6
     1ee:	d6 08       	sbc	r13, r6
     1f0:	d6 08       	sbc	r13, r6
     1f2:	d6 08       	sbc	r13, r6
     1f4:	d6 08       	sbc	r13, r6
     1f6:	d6 08       	sbc	r13, r6
     1f8:	d6 08       	sbc	r13, r6
     1fa:	d6 08       	sbc	r13, r6
     1fc:	d6 08       	sbc	r13, r6
     1fe:	d6 08       	sbc	r13, r6
     200:	d6 08       	sbc	r13, r6
     202:	d6 08       	sbc	r13, r6
     204:	d6 08       	sbc	r13, r6
     206:	d6 08       	sbc	r13, r6
     208:	d6 08       	sbc	r13, r6
     20a:	d6 08       	sbc	r13, r6
     20c:	d6 08       	sbc	r13, r6
     20e:	d6 08       	sbc	r13, r6
     210:	d6 08       	sbc	r13, r6
     212:	d6 08       	sbc	r13, r6
     214:	d6 08       	sbc	r13, r6
     216:	d6 08       	sbc	r13, r6
     218:	d6 08       	sbc	r13, r6
     21a:	d6 08       	sbc	r13, r6
     21c:	d6 08       	sbc	r13, r6
     21e:	d6 08       	sbc	r13, r6
     220:	d6 08       	sbc	r13, r6
     222:	d6 08       	sbc	r13, r6
     224:	d6 08       	sbc	r13, r6
     226:	d6 08       	sbc	r13, r6
     228:	d6 08       	sbc	r13, r6
     22a:	d6 08       	sbc	r13, r6
     22c:	d6 08       	sbc	r13, r6
     22e:	d6 08       	sbc	r13, r6
     230:	d6 08       	sbc	r13, r6
     232:	d6 08       	sbc	r13, r6
     234:	d6 08       	sbc	r13, r6
     236:	d6 08       	sbc	r13, r6
     238:	d6 08       	sbc	r13, r6
     23a:	d6 08       	sbc	r13, r6
     23c:	d6 08       	sbc	r13, r6
     23e:	d6 08       	sbc	r13, r6
     240:	d6 08       	sbc	r13, r6
     242:	d6 08       	sbc	r13, r6
     244:	c9 08       	sbc	r12, r9
     246:	d5 08       	sbc	r13, r5
     248:	d3 08       	sbc	r13, r3
     24a:	d1 08       	sbc	r13, r1
     24c:	cf 08       	sbc	r12, r15
     24e:	cd 08       	sbc	r12, r13
     250:	cb 08       	sbc	r12, r11
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_1_menu+0x22>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e0 e6       	ldi	r30, 0x60	; 96
     3ea:	f3 e4       	ldi	r31, 0x43	; 67
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a0 31       	cpi	r26, 0x10	; 16
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	25 e0       	ldi	r18, 0x05	; 5
     3fa:	a0 e1       	ldi	r26, 0x10	; 16
     3fc:	b3 e0       	ldi	r27, 0x03	; 3
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a0 3a       	cpi	r26, 0xA0	; 160
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 3b 02 	call	0x476	; 0x476 <main>
     40c:	0c 94 ae 21 	jmp	0x435c	; 0x435c <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	87 e8       	ldi	r24, 0x87	; 135
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	0e 94 34 21 	call	0x4268	; 0x4268 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	87 e8       	ldi	r24, 0x87	; 135
     434:	94 e0       	ldi	r25, 0x04	; 4
     436:	0e 94 2a 18 	call	0x3054	; 0x3054 <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     44a:	0e 94 c8 06 	call	0xd90	; 0xd90 <init_menu>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     44e:	62 e3       	ldi	r22, 0x32	; 50
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <timer0_init>
	init_display_drv();
     456:	0e 94 0a 08 	call	0x1014	; 0x1014 <init_display_drv>
	init_buttons();
     45a:	0e 94 cc 04 	call	0x998	; 0x998 <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <uart0_init>
	#endif
	init_system();
     466:	0e 94 d5 14 	call	0x29aa	; 0x29aa <init_system>
	init_measure();
     46a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46e:	80 b7       	in	r24, 0x30	; 48
     470:	8b 7f       	andi	r24, 0xFB	; 251
     472:	80 bf       	out	0x30, r24	; 48
     474:	08 95       	ret

00000476 <main>:
}

int main(void)
{
	init_pin();
     476:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     47a:	78 94       	sei
	init_driver();
     47c:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     480:	87 e7       	ldi	r24, 0x77	; 119
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	9f 93       	push	r25
     486:	8f 93       	push	r24
     488:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     48c:	0e 94 3c 10 	call	0x2078	; 0x2078 <measure_get_servo_calibration>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     494:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <disp_process>
		animation();
     498:	0e 94 4d 0b 	call	0x169a	; 0x169a <animation>
		process_button();
     49c:	0e 94 22 04 	call	0x844	; 0x844 <process_button>
		disp_fast_process();
     4a0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <disp_fast_process>
		disp_very_fast_process();
     4a4:	0e 94 42 16 	call	0x2c84	; 0x2c84 <disp_very_fast_process>
		dcmotor_process(motor_value);
     4a8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motor_value>
     4ac:	0e 94 8e 07 	call	0xf1c	; 0xf1c <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b0:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
     4b4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <servo_process>
		menu_process();
     4b8:	0e 94 5d 06 	call	0xcba	; 0xcba <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4bc:	0e 94 20 0c 	call	0x1840	; 0x1840 <error_event>
		error_led_blink();
     4c0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <error_led_blink>
		measure_process();
     4c4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_process>
		accumulator_process();
     4c8:	0e 94 87 02 	call	0x50e	; 0x50e <accumulator_process>
		accum_led_process();
     4cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <accum_led_process>
		buzzer_process();
     4d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <buzzer_process>
     4d4:	df cf       	rjmp	.-66     	; 0x494 <main+0x1e>

000004d6 <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <measure_get_filtered_value>
	#endif
    return voltage;
     4dc:	bc 01       	movw	r22, r24
     4de:	66 0f       	add	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	66 0f       	add	r22, r22
     4e4:	77 1f       	adc	r23, r23
     4e6:	86 0f       	add	r24, r22
     4e8:	97 1f       	adc	r25, r23
     4ea:	bc 01       	movw	r22, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatunsisf>
     4f4:	26 e6       	ldi	r18, 0x66	; 102
     4f6:	36 e6       	ldi	r19, 0x66	; 102
     4f8:	46 eb       	ldi	r20, 0xB6	; 182
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5a e3       	ldi	r21, 0x3A	; 58
     508:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
}
     50c:	08 95       	ret

0000050e <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     50e:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
     512:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
     516:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
     51a:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
     51e:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <accumulator_timer.1914>
     522:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <accumulator_timer.1914+0x1>
     526:	a0 91 17 03 	lds	r26, 0x0317	; 0x800317 <accumulator_timer.1914+0x2>
     52a:	b0 91 18 03 	lds	r27, 0x0318	; 0x800318 <accumulator_timer.1914+0x3>
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a6 07       	cpc	r26, r22
     534:	b7 07       	cpc	r27, r23
     536:	98 f5       	brcc	.+102    	; 0x59e <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     53e:	89 35       	cpi	r24, 0x59	; 89
     540:	22 e0       	ldi	r18, 0x02	; 2
     542:	92 07       	cpc	r25, r18
     544:	18 f0       	brcs	.+6      	; 0x54c <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     54c:	8b 38       	cpi	r24, 0x8B	; 139
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	92 07       	cpc	r25, r18
     552:	18 f4       	brcc	.+6      	; 0x55a <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     554:	22 e0       	ldi	r18, 0x02	; 2
     556:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     55a:	8e 35       	cpi	r24, 0x5E	; 94
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	92 07       	cpc	r25, r18
     560:	18 f4       	brcc	.+6      	; 0x568 <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     562:	23 e0       	ldi	r18, 0x03	; 3
     564:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     568:	8c 58       	subi	r24, 0x8C	; 140
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	8c 3c       	cpi	r24, 0xCC	; 204
     56e:	91 05       	cpc	r25, r1
     570:	10 f4       	brcc	.+4      	; 0x576 <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     572:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     576:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
     57a:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
     57e:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
     582:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
     586:	8c 59       	subi	r24, 0x9C	; 156
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	af 4f       	sbci	r26, 0xFF	; 255
     58c:	bf 4f       	sbci	r27, 0xFF	; 255
     58e:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <accumulator_timer.1914>
     592:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <accumulator_timer.1914+0x1>
     596:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <accumulator_timer.1914+0x2>
     59a:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <accumulator_timer.1914+0x3>
     59e:	08 95       	ret

000005a0 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     5a0:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
     5a4:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
     5a8:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
     5ac:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
     5b0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     5b4:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     5b8:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     5bc:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	a6 07       	cpc	r26, r22
     5c6:	b7 07       	cpc	r27, r23
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <accum_led_process+0x2c>
     5ca:	86 c0       	rjmp	.+268    	; 0x6d8 <accum_led_process+0x138>
	{
        switch (accumulator_state)
     5cc:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <accumulator_state>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	e9 f0       	breq	.+58     	; 0x60e <accum_led_process+0x6e>
     5d4:	30 f0       	brcs	.+12     	; 0x5e2 <accum_led_process+0x42>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	99 f1       	breq	.+102    	; 0x640 <accum_led_process+0xa0>
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <accum_led_process+0x40>
     5de:	67 c0       	rjmp	.+206    	; 0x6ae <accum_led_process+0x10e>
     5e0:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     5e2:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     5e4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     5e8:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     5ec:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     5f0:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     5f4:	88 53       	subi	r24, 0x38	; 56
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	af 4f       	sbci	r26, 0xFF	; 255
     5fa:	bf 4f       	sbci	r27, 0xFF	; 255
     5fc:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <process_timer.1918>
     600:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <process_timer.1918+0x1>
     604:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <process_timer.1918+0x2>
     608:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <process_timer.1918+0x3>
            break;
     60c:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     60e:	98 b3       	in	r25, 0x18	; 24
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	89 27       	eor	r24, r25
     614:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     616:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     61a:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     61e:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     622:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     626:	86 50       	subi	r24, 0x06	; 6
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	af 4f       	sbci	r26, 0xFF	; 255
     62c:	bf 4f       	sbci	r27, 0xFF	; 255
     62e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <process_timer.1918>
     632:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <process_timer.1918+0x1>
     636:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <process_timer.1918+0x2>
     63a:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <process_timer.1918+0x3>
            break;
     63e:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     640:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end>
     644:	81 11       	cpse	r24, r1
     646:	19 c0       	rjmp	.+50     	; 0x67a <accum_led_process+0xda>
            {
                state_led = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end>
                LED_ACUM_ON;
     64e:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     650:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     654:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     658:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     65c:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     660:	8c 50       	subi	r24, 0x0C	; 12
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	af 4f       	sbci	r26, 0xFF	; 255
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <process_timer.1918>
     66c:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <process_timer.1918+0x1>
     670:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <process_timer.1918+0x2>
     674:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <process_timer.1918+0x3>
     678:	08 95       	ret
            }
            else if (state_led == 1)
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	69 f5       	brne	.+90     	; 0x6d8 <accum_led_process+0x138>
            {
                state_led = 0;
     67e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <__data_end>
                LED_ACUM_OFF;
     682:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     684:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     688:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     68c:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     690:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     694:	84 52       	subi	r24, 0x24	; 36
     696:	9a 4f       	sbci	r25, 0xFA	; 250
     698:	af 4f       	sbci	r26, 0xFF	; 255
     69a:	bf 4f       	sbci	r27, 0xFF	; 255
     69c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <process_timer.1918>
     6a0:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <process_timer.1918+0x1>
     6a4:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <process_timer.1918+0x2>
     6a8:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <process_timer.1918+0x3>
     6ac:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     6ae:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     6b0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <process_timer.1918>
     6b4:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <process_timer.1918+0x1>
     6b8:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <process_timer.1918+0x2>
     6bc:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <process_timer.1918+0x3>
     6c0:	88 51       	subi	r24, 0x18	; 24
     6c2:	9c 4f       	sbci	r25, 0xFC	; 252
     6c4:	af 4f       	sbci	r26, 0xFF	; 255
     6c6:	bf 4f       	sbci	r27, 0xFF	; 255
     6c8:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <process_timer.1918>
     6cc:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <process_timer.1918+0x1>
     6d0:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <process_timer.1918+0x2>
     6d4:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <process_timer.1918+0x3>
     6d8:	08 95       	ret

000006da <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     6da:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     6dc:	97 b1       	in	r25, 0x07	; 7
     6de:	98 7f       	andi	r25, 0xF8	; 248
     6e0:	87 70       	andi	r24, 0x07	; 7
     6e2:	89 2b       	or	r24, r25
     6e4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     6e6:	37 9a       	sbi	0x06, 7	; 6
     6e8:	08 95       	ret

000006ea <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     6ea:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     6ec:	36 99       	sbic	0x06, 6	; 6
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     6f0:	84 b1       	in	r24, 0x04	; 4
     6f2:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     6f4:	08 95       	ret

000006f6 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <adc_setchannel>
	return adc_readsel();
     6fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <adc_readsel>
}
     6fe:	08 95       	ret

00000700 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     700:	dc 01       	movw	r26, r24
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	20 81       	ld	r18, Z
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	18 96       	adiw	r26, 0x08	; 8
     712:	0c 90       	ld	r0, X
     714:	02 c0       	rjmp	.+4      	; 0x71a <read_button+0x1a>
     716:	f5 95       	asr	r31
     718:	e7 95       	ror	r30
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <read_button+0x16>
     71e:	cf 01       	movw	r24, r30
     720:	81 70       	andi	r24, 0x01	; 1
     722:	08 95       	ret

00000724 <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     724:	e4 e3       	ldi	r30, 0x34	; 52
     726:	f5 e0       	ldi	r31, 0x05	; 5
     728:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     72e:	14 86       	std	Z+12, r1	; 0x0c
     730:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     732:	12 86       	std	Z+10, r1	; 0x0a
     734:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     736:	16 86       	std	Z+14, r1	; 0x0e
     738:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     73a:	26 e3       	ldi	r18, 0x36	; 54
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     746:	e7 e0       	ldi	r30, 0x07	; 7
     748:	f5 e0       	ldi	r31, 0x05	; 5
     74a:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     74c:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     74e:	14 86       	std	Z+12, r1	; 0x0c
     750:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     752:	12 86       	std	Z+10, r1	; 0x0a
     754:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     756:	16 86       	std	Z+14, r1	; 0x0e
     758:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     75a:	37 83       	std	Z+7, r19	; 0x07
     75c:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     75e:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     760:	e6 e1       	ldi	r30, 0x16	; 22
     762:	f5 e0       	ldi	r31, 0x05	; 5
     764:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     766:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     768:	14 86       	std	Z+12, r1	; 0x0c
     76a:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     76c:	12 86       	std	Z+10, r1	; 0x0a
     76e:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     770:	16 86       	std	Z+14, r1	; 0x0e
     772:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     774:	37 83       	std	Z+7, r19	; 0x07
     776:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     77c:	e4 ef       	ldi	r30, 0xF4	; 244
     77e:	f4 e0       	ldi	r31, 0x04	; 4
     780:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     782:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     784:	14 86       	std	Z+12, r1	; 0x0c
     786:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     788:	12 86       	std	Z+10, r1	; 0x0a
     78a:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     78c:	16 86       	std	Z+14, r1	; 0x0e
     78e:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     790:	40 e3       	ldi	r20, 0x30	; 48
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	57 83       	std	Z+7, r21	; 0x07
     796:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     79c:	e5 ee       	ldi	r30, 0xE5	; 229
     79e:	f4 e0       	ldi	r31, 0x04	; 4
     7a0:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     7a2:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     7a4:	14 86       	std	Z+12, r1	; 0x0c
     7a6:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     7ac:	16 86       	std	Z+14, r1	; 0x0e
     7ae:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     7b0:	37 83       	std	Z+7, r19	; 0x07
     7b2:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     7b4:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     7b6:	e5 e2       	ldi	r30, 0x25	; 37
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     7bc:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     7be:	14 86       	std	Z+12, r1	; 0x0c
     7c0:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     7c2:	12 86       	std	Z+10, r1	; 0x0a
     7c4:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     7c6:	16 86       	std	Z+14, r1	; 0x0e
     7c8:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     7ca:	69 e3       	ldi	r22, 0x39	; 57
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	77 83       	std	Z+7, r23	; 0x07
     7d0:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     7d2:	a4 e0       	ldi	r26, 0x04	; 4
     7d4:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     7d6:	e3 e4       	ldi	r30, 0x43	; 67
     7d8:	f5 e0       	ldi	r31, 0x05	; 5
     7da:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     7dc:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     7de:	14 86       	std	Z+12, r1	; 0x0c
     7e0:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     7e2:	12 86       	std	Z+10, r1	; 0x0a
     7e4:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     7e6:	16 86       	std	Z+14, r1	; 0x0e
     7e8:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     7ea:	43 e3       	ldi	r20, 0x33	; 51
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	57 83       	std	Z+7, r21	; 0x07
     7f0:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     7f2:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     7f4:	e2 e5       	ldi	r30, 0x52	; 82
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     7fa:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     7fc:	14 86       	std	Z+12, r1	; 0x0c
     7fe:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     800:	12 86       	std	Z+10, r1	; 0x0a
     802:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     804:	16 86       	std	Z+14, r1	; 0x0e
     806:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     808:	37 83       	std	Z+7, r19	; 0x07
     80a:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     80c:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     80e:	e7 ec       	ldi	r30, 0xC7	; 199
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     814:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     816:	14 86       	std	Z+12, r1	; 0x0c
     818:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     81a:	12 86       	std	Z+10, r1	; 0x0a
     81c:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     81e:	16 86       	std	Z+14, r1	; 0x0e
     820:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     822:	77 83       	std	Z+7, r23	; 0x07
     824:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     826:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     828:	e6 ed       	ldi	r30, 0xD6	; 214
     82a:	f4 e0       	ldi	r31, 0x04	; 4
     82c:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     82e:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     834:	12 86       	std	Z+10, r1	; 0x0a
     836:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     838:	16 86       	std	Z+14, r1	; 0x0e
     83a:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     83c:	57 83       	std	Z+7, r21	; 0x07
     83e:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     840:	10 86       	std	Z+8, r1	; 0x08
     842:	08 95       	ret

00000844 <process_button>:
}

void process_button(void)
{
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     852:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
     856:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
     85a:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
     85e:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
     862:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <timer_button>
     866:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <timer_button+0x1>
     86a:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <timer_button+0x2>
     86e:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <timer_button+0x3>
     872:	84 17       	cp	r24, r20
     874:	95 07       	cpc	r25, r21
     876:	a6 07       	cpc	r26, r22
     878:	b7 07       	cpc	r27, r23
     87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
     87c:	85 c0       	rjmp	.+266    	; 0x988 <__stack+0x129>
	{
		timer_button = mktime.ms + 20;
     87e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
     882:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
     886:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
     88a:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
     88e:	44 96       	adiw	r24, 0x14	; 20
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
     894:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <timer_button>
     898:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <timer_button+0x1>
     89c:	a0 93 05 05 	sts	0x0505, r26	; 0x800505 <timer_button+0x2>
     8a0:	b0 93 06 05 	sts	0x0506, r27	; 0x800506 <timer_button+0x3>
     8a4:	c0 e6       	ldi	r28, 0x60	; 96
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f4 e7       	ldi	r31, 0x74	; 116
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     8b4:	dd 24       	eor	r13, r13
     8b6:	d3 94       	inc	r13
     8b8:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	0e 94 80 03 	call	0x700	; 0x700 <read_button>
			if(red_val != but_tab[i]->value)
     8c2:	e8 81       	ld	r30, Y
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	89 17       	cp	r24, r25
     8ca:	e1 f0       	breq	.+56     	; 0x904 <__stack+0xa5>
			{
				but_tab[i]->value = red_val;
     8cc:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	61 f4       	brne	.+24     	; 0x8ea <__stack+0x8b>
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	dc 01       	movw	r26, r24
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	1a 97       	sbiw	r26, 0x0a	; 10
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	41 c0       	rjmp	.+130    	; 0x968 <__stack+0x109>
				but_tab[i]->rise_callback(but_tab[i]);
     8e6:	09 95       	icall
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <__stack+0x109>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     8ea:	81 11       	cpse	r24, r1
     8ec:	3d c0       	rjmp	.+122    	; 0x968 <__stack+0x109>
     8ee:	88 81       	ld	r24, Y
     8f0:	99 81       	ldd	r25, Y+1	; 0x01
     8f2:	dc 01       	movw	r26, r24
     8f4:	1b 96       	adiw	r26, 0x0b	; 11
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	1c 97       	sbiw	r26, 0x0c	; 12
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
				but_tab[i]->fall_callback(but_tab[i]);
     900:	09 95       	icall
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
			}
			//timer
			if (red_val == 0)
     904:	81 11       	cpse	r24, r1
     906:	30 c0       	rjmp	.+96     	; 0x968 <__stack+0x109>
			{
				but_tab[i]->tim_cnt++;
     908:	d8 01       	movw	r26, r16
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a2 81       	ldd	r26, Z+2	; 0x02
     914:	b3 81       	ldd	r27, Z+3	; 0x03
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	a1 1d       	adc	r26, r1
     91a:	b1 1d       	adc	r27, r1
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	a2 83       	std	Z+2, r26	; 0x02
     922:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     924:	d8 01       	movw	r26, r16
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	a2 81       	ldd	r26, Z+2	; 0x02
     930:	b3 81       	ldd	r27, Z+3	; 0x03
     932:	88 97       	sbiw	r24, 0x28	; 40
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	10 f1       	brcs	.+68     	; 0x97e <__stack+0x11f>
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	f9 f0       	breq	.+62     	; 0x97e <__stack+0x11f>
				{
					if (but_tab[i]->timer_callback != 0)
     940:	05 84       	ldd	r0, Z+13	; 0x0d
     942:	f6 85       	ldd	r31, Z+14	; 0x0e
     944:	e0 2d       	mov	r30, r0
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0xf1>
					but_tab[i]->timer_callback(&button1);
     94a:	84 e3       	ldi	r24, 0x34	; 52
     94c:	95 e0       	ldi	r25, 0x05	; 5
     94e:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     950:	d8 01       	movw	r26, r16
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	d4 82       	std	Z+4, r13	; 0x04
     966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x11f>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     968:	d8 01       	movw	r26, r16
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     980:	ce 15       	cp	r28, r14
     982:	df 05       	cpc	r29, r15
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	98 cf       	rjmp	.-208    	; 0x8b8 <__stack+0x59>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	08 95       	ret

00000998 <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     998:	0e 94 92 03 	call	0x724	; 0x724 <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     99c:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     99e:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     9a0:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     9a2:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     9a4:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     9a6:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     9a8:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     9aa:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     9ac:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     9ae:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     9b0:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     9b2:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     9b4:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     9b6:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     9b8:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     9ba:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     9bc:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     9be:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     9c0:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     9c2:	a8 9a       	sbi	0x15, 0	; 21
     9c4:	08 95       	ret

000009c6 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9c6:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
     9ca:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
     9ce:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
     9d2:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
     9d6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <buzzer_timer>
     9da:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <buzzer_timer+0x1>
     9de:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <buzzer_timer+0x2>
     9e2:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <buzzer_timer+0x3>
     9e6:	84 17       	cp	r24, r20
     9e8:	95 07       	cpc	r25, r21
     9ea:	a6 07       	cpc	r26, r22
     9ec:	b7 07       	cpc	r27, r23
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <buzzer_process+0x2c>
     9f0:	59 c0       	rjmp	.+178    	; 0xaa4 <buzzer_process+0xde>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9f2:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
     9f6:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
     9fa:	95 ff       	sbrs	r25, 5
     9fc:	37 c0       	rjmp	.+110    	; 0xa6c <buzzer_process+0xa6>
     9fe:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <buzzer_state>
     a02:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <buzzer_state+0x1>
     a06:	a0 91 1c 03 	lds	r26, 0x031C	; 0x80031c <buzzer_state+0x2>
     a0a:	b0 91 1d 03 	lds	r27, 0x031D	; 0x80031d <buzzer_state+0x3>
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	59 f5       	brne	.+86     	; 0xa6c <buzzer_process+0xa6>
		{
			ON_BUZZER;
     a16:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     a18:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
     a1c:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
     a20:	9f 7d       	andi	r25, 0xDF	; 223
     a22:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
     a26:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
			buzzer_state = 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <buzzer_state>
     a36:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <buzzer_state+0x1>
     a3a:	a0 93 1c 03 	sts	0x031C, r26	; 0x80031c <buzzer_state+0x2>
     a3e:	b0 93 1d 03 	sts	0x031D, r27	; 0x80031d <buzzer_state+0x3>
			buzzer_timer += 100;
     a42:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <buzzer_timer>
     a46:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <buzzer_timer+0x1>
     a4a:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <buzzer_timer+0x2>
     a4e:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <buzzer_timer+0x3>
     a52:	8c 59       	subi	r24, 0x9C	; 156
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	af 4f       	sbci	r26, 0xFF	; 255
     a58:	bf 4f       	sbci	r27, 0xFF	; 255
     a5a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <buzzer_timer>
     a5e:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <buzzer_timer+0x1>
     a62:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <buzzer_timer+0x2>
     a66:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <buzzer_timer+0x3>
     a6a:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     a6c:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     a6e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <buzzer_state>
     a72:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <buzzer_state+0x1>
     a76:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <buzzer_state+0x2>
     a7a:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <buzzer_state+0x3>
			buzzer_timer += 50;
     a7e:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <buzzer_timer>
     a82:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <buzzer_timer+0x1>
     a86:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <buzzer_timer+0x2>
     a8a:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <buzzer_timer+0x3>
     a8e:	c2 96       	adiw	r24, 0x32	; 50
     a90:	a1 1d       	adc	r26, r1
     a92:	b1 1d       	adc	r27, r1
     a94:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <buzzer_timer>
     a98:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <buzzer_timer+0x1>
     a9c:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <buzzer_timer+0x2>
     aa0:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <buzzer_timer+0x3>
     aa4:	08 95       	ret

00000aa6 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     aa6:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     aa8:	c0 98       	cbi	0x18, 0	; 24
     aaa:	08 95       	ret

00000aac <button_1_menu>:
	}
}

void button_1_menu(void *pv)
{
	if (last_button == 10 && state_menu == 0) last_button = 8;
     aac:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <last_button>
     ab0:	8a 30       	cpi	r24, 0x0A	; 10
     ab2:	41 f4       	brne	.+16     	; 0xac4 <button_1_menu+0x18>
     ab4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     ab8:	81 11       	cpse	r24, r1
     aba:	0b c0       	rjmp	.+22     	; 0xad2 <button_1_menu+0x26>
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <last_button>
     ac2:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     ac4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     ac8:	81 11       	cpse	r24, r1
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <button_1_menu+0x26>
     acc:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
     ad0:	08 95       	ret
	
	if (state_menu == 1 && menu_param.motor_add > 1)
     ad2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	39 f4       	brne	.+14     	; 0xae8 <button_1_menu+0x3c>
     ada:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_param>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	18 f0       	brcs	.+6      	; 0xae8 <button_1_menu+0x3c>
	{
		menu_param.motor_add--;
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <menu_param>
     ae8:	08 95       	ret

00000aea <button_2_menu>:
	}
}
void button_2_menu(void *pv)
{
	if (last_button == 0 && state_menu == 0) last_button = 9;
     aea:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <last_button>
     aee:	81 11       	cpse	r24, r1
     af0:	08 c0       	rjmp	.+16     	; 0xb02 <button_2_menu+0x18>
     af2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     af6:	81 11       	cpse	r24, r1
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <button_2_menu+0x26>
     afa:	89 e0       	ldi	r24, 0x09	; 9
     afc:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <last_button>
     b00:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     b02:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     b06:	81 11       	cpse	r24, r1
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <button_2_menu+0x26>
     b0a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
     b0e:	08 95       	ret
	
	if (state_menu == 1 && menu_param.motor_add < 99)
     b10:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	39 f4       	brne	.+14     	; 0xb26 <button_2_menu+0x3c>
     b18:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_param>
     b1c:	83 36       	cpi	r24, 0x63	; 99
     b1e:	18 f4       	brcc	.+6      	; 0xb26 <button_2_menu+0x3c>
	{
		menu_param.motor_add++;
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <menu_param>
     b26:	08 95       	ret

00000b28 <button_5_menu>:
	}
}

void button_5_menu(void *pv)
{
	if (state_menu == 1 && menu_param.servo_add > 1)
     b28:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	41 f4       	brne	.+16     	; 0xb40 <button_5_menu+0x18>
     b30:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <menu_param+0x1>
     b34:	92 30       	cpi	r25, 0x02	; 2
     b36:	10 f1       	brcs	.+68     	; 0xb7c <button_5_menu+0x54>
	{
		menu_param.servo_add--;
     b38:	91 50       	subi	r25, 0x01	; 1
     b3a:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <menu_param+0x1>
     b3e:	1e c0       	rjmp	.+60     	; 0xb7c <button_5_menu+0x54>
	}
	
	if (last_button == 7 && state_menu == 0)
     b40:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <last_button>
     b44:	97 30       	cpi	r25, 0x07	; 7
     b46:	a9 f4       	brne	.+42     	; 0xb72 <button_5_menu+0x4a>
     b48:	81 11       	cpse	r24, r1
     b4a:	1c c0       	rjmp	.+56     	; 0xb84 <button_5_menu+0x5c>
	{ 
		state_menu = 1;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <state_menu>
		last_button = 0;
     b52:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
		if (menu_param.disable_error == 1) LED_SERVO_OFF;
     b56:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <menu_param+0x2>
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	11 f4       	brne	.+4      	; 0xb62 <button_5_menu+0x3a>
     b5e:	96 98       	cbi	0x12, 6	; 18
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <button_5_menu+0x3c>
		else LED_SERVO_ON;
     b62:	96 9a       	sbi	0x12, 6	; 18
		LED_MOTOR_ON;
     b64:	94 9a       	sbi	0x12, 4	; 18
		segment1.state = SEG_MENU;
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
		segment2.state = SEG_MENU;
     b6c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
     b70:	08 95       	ret
	}
	else if(state_menu == 0) last_button = 0;
     b72:	81 11       	cpse	r24, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <button_5_menu+0x5c>
     b76:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
}
     b7a:	08 95       	ret
	if (state_menu == 1 && menu_param.servo_add > 1)
	{
		menu_param.servo_add--;
	}
	
	if (last_button == 7 && state_menu == 0)
     b7c:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <last_button>
     b80:	97 30       	cpi	r25, 0x07	; 7
     b82:	b9 f7       	brne	.-18     	; 0xb72 <button_5_menu+0x4a>
     b84:	08 95       	ret

00000b86 <button_6_menu>:
	}
	else if(state_menu == 0) last_button = 0;
}
void button_6_menu(void *pv)
{
	if (last_button == 8 && state_menu == 0) last_button = 6;
     b86:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <last_button>
     b8a:	88 30       	cpi	r24, 0x08	; 8
     b8c:	41 f4       	brne	.+16     	; 0xb9e <button_6_menu+0x18>
     b8e:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     b92:	81 11       	cpse	r24, r1
     b94:	0b c0       	rjmp	.+22     	; 0xbac <button_6_menu+0x26>
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <last_button>
     b9c:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     b9e:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     ba2:	81 11       	cpse	r24, r1
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <button_6_menu+0x26>
     ba6:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
     baa:	08 95       	ret
	if (state_menu == 1 && menu_param.servo_add < 99)
     bac:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <button_6_menu+0x3c>
     bb4:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <menu_param+0x1>
     bb8:	83 36       	cpi	r24, 0x63	; 99
     bba:	18 f4       	brcc	.+6      	; 0xbc2 <button_6_menu+0x3c>
	{
		menu_param.servo_add++;
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <menu_param+0x1>
     bc2:	08 95       	ret

00000bc4 <button_7_menu>:
	}
}
void button_7_menu(void *pv)
{
	if (last_button == 6 && state_menu == 0) last_button = 7;
     bc4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <last_button>
     bc8:	86 30       	cpi	r24, 0x06	; 6
     bca:	41 f4       	brne	.+16     	; 0xbdc <button_7_menu+0x18>
     bcc:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     bd0:	81 11       	cpse	r24, r1
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <button_7_menu+0x26>
     bd4:	87 e0       	ldi	r24, 0x07	; 7
     bd6:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <last_button>
     bda:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     bdc:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     be0:	81 11       	cpse	r24, r1
     be2:	03 c0       	rjmp	.+6      	; 0xbea <button_7_menu+0x26>
     be4:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
     be8:	08 95       	ret
	
	if (state_menu == 1 && menu_param.disable_error == 0)
     bea:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	71 f4       	brne	.+28     	; 0xc0e <button_7_menu+0x4a>
     bf2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <menu_param+0x2>
     bf6:	81 11       	cpse	r24, r1
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <button_7_menu+0x40>
	{
		menu_param.disable_error = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <menu_param+0x2>
		LED_SERVO_OFF;
     c00:	96 98       	cbi	0x12, 6	; 18
     c02:	08 95       	ret
	}
	else if (state_menu == 1 && menu_param.disable_error == 1)
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	19 f4       	brne	.+6      	; 0xc0e <button_7_menu+0x4a>
	{
		menu_param.disable_error = 0;
     c08:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <menu_param+0x2>
		LED_SERVO_ON;
     c0c:	96 9a       	sbi	0x12, 6	; 18
     c0e:	08 95       	ret

00000c10 <button_8_menu>:
	}
}
void button_8_menu(void *pv)
{
     c10:	08 95       	ret

00000c12 <button_9_menu>:
	
}
void button_9_menu(void *pv)
{
     c12:	08 95       	ret

00000c14 <button_10_menu>:
	
}
void button_10_menu(void *pv)
{
     c14:	08 95       	ret

00000c16 <button_3_menu>:
	{
		menu_param.motor_add++;
	}
}
void button_3_menu(void *pv)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	if (last_button == 9 && state_menu == 0) last_button = 10;
     c1a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <last_button>
     c1e:	89 30       	cpi	r24, 0x09	; 9
     c20:	41 f4       	brne	.+16     	; 0xc32 <button_3_menu+0x1c>
     c22:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     c26:	81 11       	cpse	r24, r1
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <button_3_menu+0x2a>
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <last_button>
     c30:	2b c0       	rjmp	.+86     	; 0xc88 <button_3_menu+0x72>
	else if(state_menu == 0) last_button = 0;
     c32:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     c36:	81 11       	cpse	r24, r1
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <button_3_menu+0x2a>
     c3a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <last_button>
     c3e:	24 c0       	rjmp	.+72     	; 0xc88 <button_3_menu+0x72>
	
	if (state_menu == 1 && menu_param.motor_add <= 99 && menu_param.servo_add <= 99)
     c40:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	01 f5       	brne	.+64     	; 0xc88 <button_3_menu+0x72>
     c48:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_param>
     c4c:	84 36       	cpi	r24, 0x64	; 100
     c4e:	e0 f4       	brcc	.+56     	; 0xc88 <button_3_menu+0x72>
     c50:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <menu_param+0x1>
     c54:	84 36       	cpi	r24, 0x64	; 100
     c56:	c0 f4       	brcc	.+48     	; 0xc88 <button_3_menu+0x72>
static void save_parametrs(void)
{
	uint8_t* pnt = (uint8_t*) &menu_param;
	for (uint8_t byte_n=MENU_ADDR; byte_n<MENU_ADDR+sizeof(menu_t);byte_n++)
	{
		EEPROM_write(byte_n,*pnt);
     c58:	c1 e6       	ldi	r28, 0x61	; 97
     c5a:	d5 e0       	ldi	r29, 0x05	; 5
     c5c:	68 81       	ld	r22, Y
     c5e:	8c e0       	ldi	r24, 0x0C	; 12
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_write>
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	8d e0       	ldi	r24, 0x0D	; 13
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_write>
     c70:	6a 81       	ldd	r22, Y+2	; 0x02
     c72:	8e e0       	ldi	r24, 0x0E	; 14
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_write>
	else if(state_menu == 0) last_button = 0;
	
	if (state_menu == 1 && menu_param.motor_add <= 99 && menu_param.servo_add <= 99)
	{
		save_parametrs();
		segment1.state = SEG_MENU_SAVE; 
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
		segment2.state = SEG_MENU_SAVE;
     c80:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
		LED_MOTOR_OFF;
     c84:	94 98       	cbi	0x12, 4	; 18
		LED_SERVO_OFF;
     c86:	96 98       	cbi	0x12, 6	; 18
	}
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <read_menu_parametrs>:
		pnt++;
	}
}

void read_menu_parametrs(void)
{
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
	uint8_t* pnt = (uint8_t*) &menu_param;
	for (uint8_t byte_n=MENU_ADDR; byte_n<MENU_ADDR+sizeof(menu_t);byte_n++)
	{
		*pnt = EEPROM_read(byte_n);
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <EEPROM_read>
     c9a:	c1 e6       	ldi	r28, 0x61	; 97
     c9c:	d5 e0       	ldi	r29, 0x05	; 5
     c9e:	88 83       	st	Y, r24
     ca0:	8d e0       	ldi	r24, 0x0D	; 13
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <EEPROM_read>
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	8e e0       	ldi	r24, 0x0E	; 14
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <EEPROM_read>
     cb2:	8a 83       	std	Y+2, r24	; 0x02
		pnt++;
	}
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && state_menu == 1)
     cba:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
     cbe:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
     cc2:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
     cc6:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
     cca:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <menu_timer.1995>
     cce:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <menu_timer.1995+0x1>
     cd2:	a0 91 24 03 	lds	r26, 0x0324	; 0x800324 <menu_timer.1995+0x2>
     cd6:	b0 91 25 03 	lds	r27, 0x0325	; 0x800325 <menu_timer.1995+0x3>
     cda:	84 17       	cp	r24, r20
     cdc:	95 07       	cpc	r25, r21
     cde:	a6 07       	cpc	r26, r22
     ce0:	b7 07       	cpc	r27, r23
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <menu_process+0x2c>
     ce4:	54 c0       	rjmp	.+168    	; 0xd8e <menu_process+0xd4>
     ce6:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <state_menu>
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <menu_process+0x36>
     cee:	4f c0       	rjmp	.+158    	; 0xd8e <menu_process+0xd4>
	{
		if (segment1.state == SEG_MENU)
     cf0:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
     cf4:	87 30       	cpi	r24, 0x07	; 7
     cf6:	31 f4       	brne	.+12     	; 0xd04 <menu_process+0x4a>
			disp_set_number(&segment1, menu_param.motor_add);
     cf8:	60 91 61 05 	lds	r22, 0x0561	; 0x800561 <menu_param>
     cfc:	84 e7       	ldi	r24, 0x74	; 116
     cfe:	95 e0       	ldi	r25, 0x05	; 5
     d00:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
		if (segment2.state == SEG_MENU)
     d04:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
     d08:	87 30       	cpi	r24, 0x07	; 7
     d0a:	31 f4       	brne	.+12     	; 0xd18 <menu_process+0x5e>
			disp_set_number(&segment2, menu_param.servo_add);
     d0c:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <menu_param+0x1>
     d10:	8f e6       	ldi	r24, 0x6F	; 111
     d12:	95 e0       	ldi	r25, 0x05	; 5
     d14:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     d18:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	49 f5       	brne	.+82     	; 0xd72 <menu_process+0xb8>
     d20:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
     d24:	88 30       	cpi	r24, 0x08	; 8
     d26:	29 f5       	brne	.+74     	; 0xd72 <menu_process+0xb8>
		{
			menu_timer = 1000 + mktime.ms;
     d28:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
     d2c:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
     d30:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
     d34:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
     d38:	88 51       	subi	r24, 0x18	; 24
     d3a:	9c 4f       	sbci	r25, 0xFC	; 252
     d3c:	af 4f       	sbci	r26, 0xFF	; 255
     d3e:	bf 4f       	sbci	r27, 0xFF	; 255
     d40:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <menu_timer.1995>
     d44:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <menu_timer.1995+0x1>
     d48:	a0 93 24 03 	sts	0x0324, r26	; 0x800324 <menu_timer.1995+0x2>
     d4c:	b0 93 25 03 	sts	0x0325, r27	; 0x800325 <menu_timer.1995+0x3>
			DispD2.value = 's';
     d50:	83 e7       	ldi	r24, 0x73	; 115
     d52:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <DispD2>
			DispD1.value = 'a';
     d56:	81 e6       	ldi	r24, 0x61	; 97
     d58:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <DispD1>
			DispD3.value = 'p';
     d5c:	80 e7       	ldi	r24, 0x70	; 112
     d5e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <DispD3>
			DispD4.value = 0;
     d62:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d66:	8a e0       	ldi	r24, 0x0A	; 10
     d68:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d6c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
			
			return;
     d70:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d72:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
     d76:	8a 30       	cpi	r24, 0x0A	; 10
     d78:	51 f4       	brne	.+20     	; 0xd8e <menu_process+0xd4>
     d7a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
     d7e:	8a 30       	cpi	r24, 0x0A	; 10
     d80:	31 f4       	brne	.+12     	; 0xd8e <menu_process+0xd4>
		{
			segment1.state = SEG_OFF;
     d82:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <segment1+0x4>
			segment2.state = SEG_OFF;
     d86:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <segment2+0x4>
			state_menu = 0;
     d8a:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <state_menu>
     d8e:	08 95       	ret

00000d90 <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_menu;
     d90:	86 e5       	ldi	r24, 0x56	; 86
     d92:	95 e0       	ldi	r25, 0x05	; 5
     d94:	90 93 40 05 	sts	0x0540, r25	; 0x800540 <button1+0xc>
     d98:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <button1+0xb>
	button2.fall_callback = button_2_menu;
     d9c:	85 e7       	ldi	r24, 0x75	; 117
     d9e:	95 e0       	ldi	r25, 0x05	; 5
     da0:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <button2+0xc>
     da4:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <button2+0xb>
	button3.fall_callback = button_3_menu;
     da8:	8b e0       	ldi	r24, 0x0B	; 11
     daa:	96 e0       	ldi	r25, 0x06	; 6
     dac:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <button3+0xc>
     db0:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <button3+0xb>
	button5.fall_callback = button_5_menu;
     db4:	84 e9       	ldi	r24, 0x94	; 148
     db6:	95 e0       	ldi	r25, 0x05	; 5
     db8:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <button5+0xc>
     dbc:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <button5+0xb>
	button6.fall_callback = button_6_menu;
     dc0:	83 ec       	ldi	r24, 0xC3	; 195
     dc2:	95 e0       	ldi	r25, 0x05	; 5
     dc4:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <button6+0xc>
     dc8:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <button6+0xb>
	button7.fall_callback = button_7_menu;
     dcc:	82 ee       	ldi	r24, 0xE2	; 226
     dce:	95 e0       	ldi	r25, 0x05	; 5
     dd0:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <button7+0xc>
     dd4:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <button7+0xb>
	button8.fall_callback = button_8_menu;
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	96 e0       	ldi	r25, 0x06	; 6
     ddc:	90 93 5e 05 	sts	0x055E, r25	; 0x80055e <button8+0xc>
     de0:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <button8+0xb>
	button9.fall_callback = button_9_menu;
     de4:	89 e0       	ldi	r24, 0x09	; 9
     de6:	96 e0       	ldi	r25, 0x06	; 6
     de8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <button9+0xc>
     dec:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <button9+0xb>
	button10.fall_callback = button_10_menu;
     df0:	8a e0       	ldi	r24, 0x0A	; 10
     df2:	96 e0       	ldi	r25, 0x06	; 6
     df4:	90 93 e2 04 	sts	0x04E2, r25	; 0x8004e2 <button10+0xc>
     df8:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <button10+0xb>
	read_menu_parametrs();
     dfc:	0e 94 47 06 	call	0xc8e	; 0xc8e <read_menu_parametrs>
	if (menu_param.motor_add > 99) menu_param.motor_add = 0;
     e00:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <menu_param>
     e04:	84 36       	cpi	r24, 0x64	; 100
     e06:	10 f0       	brcs	.+4      	; 0xe0c <init_menu+0x7c>
     e08:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <menu_param>
	if (menu_param.servo_add > 99) menu_param.servo_add = 0;
     e0c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <menu_param+0x1>
     e10:	84 36       	cpi	r24, 0x64	; 100
     e12:	10 f0       	brcs	.+4      	; 0xe18 <init_menu+0x88>
     e14:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <menu_param+0x1>
	if (menu_param.disable_error > 1) menu_param.disable_error = 0;
     e18:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <menu_param+0x2>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	10 f0       	brcs	.+4      	; 0xe24 <init_menu+0x94>
     e20:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <menu_param+0x2>
     e24:	08 95       	ret

00000e26 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     e26:	8e e9       	ldi	r24, 0x9E	; 158
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e32:	89 e6       	ldi	r24, 0x69	; 105
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <evTime_init>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <motorD>
     e40:	94 98       	cbi	0x12, 4	; 18
     e42:	15 bc       	out	0x25, r1	; 37
     e44:	8f 9a       	sbi	0x11, 7	; 17
     e46:	97 9a       	sbi	0x12, 7	; 18
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	08 95       	ret

00000e4e <dcmotorpwm_deinit>:
     e4e:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <motorD>
     e52:	15 bc       	out	0x25, r1	; 37
     e54:	97 9a       	sbi	0x12, 7	; 18
     e56:	94 98       	cbi	0x12, 4	; 18
     e58:	08 95       	ret

00000e5a <dcmotor_is_on>:
     e5a:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <motorD>
     e5e:	92 50       	subi	r25, 0x02	; 2
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	93 30       	cpi	r25, 0x03	; 3
     e66:	10 f0       	brcs	.+4      	; 0xe6c <dcmotor_is_on+0x12>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	c9 01       	movw	r24, r18
     e6e:	08 95       	ret

00000e70 <dcmotorpwm_stop>:
     e70:	0e 94 2d 07 	call	0xe5a	; 0xe5a <dcmotor_is_on>
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	99 f0       	breq	.+38     	; 0xe9e <dcmotorpwm_stop+0x2e>
     e78:	8c ea       	ldi	r24, 0xAC	; 172
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e84:	15 bc       	out	0x25, r1	; 37
     e86:	97 9a       	sbi	0x12, 7	; 18
     e88:	94 98       	cbi	0x12, 4	; 18
     e8a:	e5 e6       	ldi	r30, 0x65	; 101
     e8c:	f5 e0       	ldi	r31, 0x05	; 5
     e8e:	80 81       	ld	r24, Z
     e90:	81 83       	std	Z+1, r24	; 0x01
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 83       	st	Z, r24
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	08 95       	ret

00000ea0 <dcmotorpwm_start>:
     ea0:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <motorD>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	d9 f4       	brne	.+54     	; 0xede <dcmotorpwm_start+0x3e>
     ea8:	94 9a       	sbi	0x12, 4	; 18
     eaa:	85 b5       	in	r24, 0x25	; 37
     eac:	80 63       	ori	r24, 0x30	; 48
     eae:	85 bd       	out	0x25, r24	; 37
     eb0:	85 b5       	in	r24, 0x25	; 37
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	85 bd       	out	0x25, r24	; 37
     eb6:	85 b5       	in	r24, 0x25	; 37
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	85 bd       	out	0x25, r24	; 37
     ebc:	e5 e6       	ldi	r30, 0x65	; 101
     ebe:	f5 e0       	ldi	r31, 0x05	; 5
     ec0:	80 81       	ld	r24, Z
     ec2:	81 83       	std	Z+1, r24	; 0x01
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	80 83       	st	Z, r24
     ec8:	48 ee       	ldi	r20, 0xE8	; 232
     eca:	53 e0       	ldi	r21, 0x03	; 3
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	89 e6       	ldi	r24, 0x69	; 105
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	08 95       	ret
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     ee4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <motorD+0x3>
}
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	08 95       	ret

00000eec <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     eec:	8a eb       	ldi	r24, 0xBA	; 186
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9f 93       	push	r25
     ef2:	8f 93       	push	r24
     ef4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     ef8:	0e 94 38 07 	call	0xe70	; 0xe70 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <motorD>
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	08 95       	ret

00000f08 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f08:	0e 94 2d 07 	call	0xe5a	; 0xe5a <dcmotor_is_on>
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	29 f0       	breq	.+10     	; 0xf1a <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <motorD>
		return 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f1a:	08 95       	ret

00000f1c <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     f1c:	cf 93       	push	r28
     f1e:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     f20:	46 e9       	ldi	r20, 0x96	; 150
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	87 e2       	ldi	r24, 0x27	; 39
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <evTime_process_period>
     f30:	89 2b       	or	r24, r25
     f32:	09 f4       	brne	.+2      	; 0xf36 <dcmotor_process+0x1a>
     f34:	58 c0       	rjmp	.+176    	; 0xfe6 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     f36:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <motorD>
     f3a:	93 30       	cpi	r25, 0x03	; 3
     f3c:	e9 f0       	breq	.+58     	; 0xf78 <dcmotor_process+0x5c>
     f3e:	28 f4       	brcc	.+10     	; 0xf4a <dcmotor_process+0x2e>
     f40:	91 30       	cpi	r25, 0x01	; 1
     f42:	b9 f0       	breq	.+46     	; 0xf72 <dcmotor_process+0x56>
     f44:	92 30       	cpi	r25, 0x02	; 2
     f46:	41 f0       	breq	.+16     	; 0xf58 <dcmotor_process+0x3c>
     f48:	4e c0       	rjmp	.+156    	; 0xfe6 <dcmotor_process+0xca>
     f4a:	94 30       	cpi	r25, 0x04	; 4
     f4c:	09 f4       	brne	.+2      	; 0xf50 <dcmotor_process+0x34>
     f4e:	48 c0       	rjmp	.+144    	; 0xfe0 <dcmotor_process+0xc4>
     f50:	95 30       	cpi	r25, 0x05	; 5
     f52:	09 f4       	brne	.+2      	; 0xf56 <dcmotor_process+0x3a>
     f54:	42 c0       	rjmp	.+132    	; 0xfda <dcmotor_process+0xbe>
     f56:	47 c0       	rjmp	.+142    	; 0xfe6 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     f58:	c0 93 68 05 	sts	0x0568, r28	; 0x800568 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f5c:	2b ee       	ldi	r18, 0xEB	; 235
     f5e:	c2 9f       	mul	r28, r18
     f60:	c0 01       	movw	r24, r0
     f62:	11 24       	eor	r1, r1
     f64:	63 e6       	ldi	r22, 0x63	; 99
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__divmodhi4>
     f6c:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     f6e:	63 bd       	out	0x23, r22	; 35
			break;
     f70:	3a c0       	rjmp	.+116    	; 0xfe6 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     f72:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <motorD+0x3>
			break;
     f76:	37 c0       	rjmp	.+110    	; 0xfe6 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     f78:	c3 33       	cpi	r28, 0x33	; 51
     f7a:	78 f4       	brcc	.+30     	; 0xf9a <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     f7c:	84 e1       	ldi	r24, 0x14	; 20
     f7e:	8c 0f       	add	r24, r28
     f80:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f84:	2b ee       	ldi	r18, 0xEB	; 235
     f86:	82 9f       	mul	r24, r18
     f88:	c0 01       	movw	r24, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	63 e6       	ldi	r22, 0x63	; 99
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__divmodhi4>
     f94:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     f96:	63 bd       	out	0x23, r22	; 35
     f98:	26 c0       	rjmp	.+76     	; 0xfe6 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     f9a:	8d ec       	ldi	r24, 0xCD	; 205
     f9c:	8c 0f       	add	r24, r28
     f9e:	84 31       	cpi	r24, 0x14	; 20
     fa0:	78 f4       	brcc	.+30     	; 0xfc0 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     fa2:	8f e0       	ldi	r24, 0x0F	; 15
     fa4:	8c 0f       	add	r24, r28
     fa6:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     faa:	2b ee       	ldi	r18, 0xEB	; 235
     fac:	82 9f       	mul	r24, r18
     fae:	c0 01       	movw	r24, r0
     fb0:	11 24       	eor	r1, r1
     fb2:	63 e6       	ldi	r22, 0x63	; 99
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__divmodhi4>
     fba:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     fbc:	63 bd       	out	0x23, r22	; 35
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     fc0:	c0 93 68 05 	sts	0x0568, r28	; 0x800568 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     fc4:	2b ee       	ldi	r18, 0xEB	; 235
     fc6:	c2 9f       	mul	r28, r18
     fc8:	c0 01       	movw	r24, r0
     fca:	11 24       	eor	r1, r1
     fcc:	63 e6       	ldi	r22, 0x63	; 99
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__divmodhi4>
     fd4:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     fd6:	63 bd       	out	0x23, r22	; 35
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
     fda:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     fdc:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     fea:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     fec:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     fee:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     ff0:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     ff2:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     ff4:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     ff6:	af 9a       	sbi	0x15, 7	; 21
     ff8:	08 95       	ret

00000ffa <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     ffa:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     ffc:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1000:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    1002:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    1006:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    1008:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    100c:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    100e:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <DispD4+0x1>
    1012:	08 95       	ret

00001014 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    1014:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    1016:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    1018:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    101a:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    101c:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    101e:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    1020:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    1022:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    1024:	ed e7       	ldi	r30, 0x7D	; 125
    1026:	f5 e0       	ldi	r31, 0x05	; 5
    1028:	8b e7       	ldi	r24, 0x7B	; 123
    102a:	95 e0       	ldi	r25, 0x05	; 5
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    1030:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    1032:	27 e8       	ldi	r18, 0x87	; 135
    1034:	35 e0       	ldi	r19, 0x05	; 5
    1036:	33 83       	std	Z+3, r19	; 0x03
    1038:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    103a:	a4 e7       	ldi	r26, 0x74	; 116
    103c:	b5 e0       	ldi	r27, 0x05	; 5
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	3c 93       	st	X, r19
    1042:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    104c:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    104e:	29 e7       	ldi	r18, 0x79	; 121
    1050:	35 e0       	ldi	r19, 0x05	; 5
    1052:	35 83       	std	Z+5, r19	; 0x05
    1054:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    1056:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    1058:	85 e8       	ldi	r24, 0x85	; 133
    105a:	95 e0       	ldi	r25, 0x05	; 5
    105c:	97 83       	std	Z+7, r25	; 0x07
    105e:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    1060:	ef e6       	ldi	r30, 0x6F	; 111
    1062:	f5 e0       	ldi	r31, 0x05	; 5
    1064:	31 83       	std	Z+1, r19	; 0x01
    1066:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1068:	93 83       	std	Z+3, r25	; 0x03
    106a:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    106c:	0e 94 fd 07 	call	0xffa	; 0xffa <off_all_displays>
	clear_display();
    1070:	0e 94 f5 07 	call	0xfea	; 0xfea <clear_display>
    1074:	08 95       	ret

00001076 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
	if (DispD->value != displaying_value)
    107a:	fc 01       	movw	r30, r24
    107c:	30 81       	ld	r19, Z
    107e:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
    1082:	32 17       	cp	r19, r18
    1084:	09 f4       	brne	.+2      	; 0x1088 <display_set_value+0x12>
    1086:	95 c0       	rjmp	.+298    	; 0x11b2 <display_set_value+0x13c>
    1088:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    108a:	0e 94 f5 07 	call	0xfea	; 0xfea <clear_display>
		switch(DispD->value)
    108e:	e8 81       	ld	r30, Y
    1090:	8e 2f       	mov	r24, r30
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	8f 3f       	cpi	r24, 0xFF	; 255
    1096:	91 05       	cpc	r25, r1
    1098:	08 f0       	brcs	.+2      	; 0x109c <display_set_value+0x26>
    109a:	88 c0       	rjmp	.+272    	; 0x11ac <display_set_value+0x136>
    109c:	fc 01       	movw	r30, r24
    109e:	e6 5d       	subi	r30, 0xD6	; 214
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    10a6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10a8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10aa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10ac:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10ae:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10b0:	aa 98       	cbi	0x15, 2	; 21
			break;
    10b2:	7c c0       	rjmp	.+248    	; 0x11ac <display_set_value+0x136>
			case 1:
			LED_ON_B;
    10b4:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10b6:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10b8:	79 c0       	rjmp	.+242    	; 0x11ac <display_set_value+0x136>
			case 2:
			LED_ON_A;
    10ba:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10bc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    10be:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    10c0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    10c2:	df 98       	cbi	0x1b, 7	; 27
			break;
    10c4:	73 c0       	rjmp	.+230    	; 0x11ac <display_set_value+0x136>
			case 3:
			LED_ON_A;
    10c6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10c8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    10ca:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10cc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10ce:	df 98       	cbi	0x1b, 7	; 27
			break;
    10d0:	6d c0       	rjmp	.+218    	; 0x11ac <display_set_value+0x136>
			case 4:
			LED_ON_F;
    10d2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10d4:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    10d6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10d8:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10da:	68 c0       	rjmp	.+208    	; 0x11ac <display_set_value+0x136>
			case 5:
			LED_ON_A;
    10dc:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    10de:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10e0:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10e2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10e4:	df 98       	cbi	0x1b, 7	; 27
			break;
    10e6:	62 c0       	rjmp	.+196    	; 0x11ac <display_set_value+0x136>
			case 6:
			LED_ON_A;
    10e8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    10ea:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10ec:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10ee:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10f0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10f2:	de 98       	cbi	0x1b, 6	; 27
			break;
    10f4:	5b c0       	rjmp	.+182    	; 0x11ac <display_set_value+0x136>
			case 7:
			LED_ON_A;
    10f6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10f8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10fa:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10fc:	57 c0       	rjmp	.+174    	; 0x11ac <display_set_value+0x136>
			case 8:
			LED_ON_A;
    10fe:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1100:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1102:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1104:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1106:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1108:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    110a:	af 98       	cbi	0x15, 7	; 21
			break;
    110c:	4f c0       	rjmp	.+158    	; 0x11ac <display_set_value+0x136>
			case 9:
			LED_ON_A;
    110e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1110:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1112:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1114:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1116:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1118:	af 98       	cbi	0x15, 7	; 21
			break;
    111a:	48 c0       	rjmp	.+144    	; 0x11ac <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    111c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    111e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1120:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    1122:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1124:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1126:	af 98       	cbi	0x15, 7	; 21
			break;
    1128:	41 c0       	rjmp	.+130    	; 0x11ac <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    112a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    112c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    112e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1130:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1132:	af 98       	cbi	0x15, 7	; 21
			break;
    1134:	3b c0       	rjmp	.+118    	; 0x11ac <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    1136:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1138:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    113a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    113c:	aa 98       	cbi	0x15, 2	; 21
			break;
    113e:	36 c0       	rjmp	.+108    	; 0x11ac <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    1140:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1142:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1144:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1146:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1148:	af 98       	cbi	0x15, 7	; 21
			break;
    114a:	30 c0       	rjmp	.+96     	; 0x11ac <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    114c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    114e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1150:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1152:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1154:	af 98       	cbi	0x15, 7	; 21
			break;
    1156:	2a c0       	rjmp	.+84     	; 0x11ac <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    1158:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    115a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    115c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    115e:	af 98       	cbi	0x15, 7	; 21
			break;
    1160:	25 c0       	rjmp	.+74     	; 0x11ac <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    1162:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1164:	af 98       	cbi	0x15, 7	; 21
			break;
    1166:	22 c0       	rjmp	.+68     	; 0x11ac <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1168:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    116a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    116c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    116e:	af 98       	cbi	0x15, 7	; 21
			break;
    1170:	1d c0       	rjmp	.+58     	; 0x11ac <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    1172:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1174:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    1176:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1178:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    117a:	af 98       	cbi	0x15, 7	; 21
			break;
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <display_set_value+0x136>
			case 's':
			LED_ON_A;
    117e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    1180:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1182:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1184:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1186:	af 98       	cbi	0x15, 7	; 21
			break;
    1188:	11 c0       	rjmp	.+34     	; 0x11ac <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    118a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    118c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    118e:	aa 98       	cbi	0x15, 2	; 21
			break;
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    1192:	af 98       	cbi	0x15, 7	; 21
			break;
    1194:	0b c0       	rjmp	.+22     	; 0x11ac <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1196:	aa 98       	cbi	0x15, 2	; 21
			break;
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <display_set_value+0x136>
			case 253:
			LED_ON_E;
    119a:	de 98       	cbi	0x1b, 6	; 27
			break;
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <display_set_value+0x136>
			case 252:
			LED_ON_D;
    119e:	df 98       	cbi	0x1b, 7	; 27
			break;
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <display_set_value+0x136>
			case 251:
			LED_ON_C;
    11a2:	dd 98       	cbi	0x1b, 5	; 27
			break;
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <display_set_value+0x136>
			case 250:
			LED_ON_B;
    11a6:	ad 98       	cbi	0x15, 5	; 21
			break;
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <display_set_value+0x136>
			case 249:
			LED_ON_A;
    11aa:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    11ac:	88 81       	ld	r24, Y
    11ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <on_display>:
void on_display(disp_drv *DispD)
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
	off_all_displays();
    11be:	0e 94 fd 07 	call	0xffa	; 0xffa <off_all_displays>
	display_set_value(DispD);
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 3b 08 	call	0x1076	; 0x1076 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	cb 37       	cpi	r28, 0x7B	; 123
    11cc:	d8 07       	cpc	r29, r24
    11ce:	29 f4       	brne	.+10     	; 0x11da <on_display+0x22>
	{
		LED_ON_DISP1;
    11d0:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <DispD1+0x1>
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    11da:	85 e0       	ldi	r24, 0x05	; 5
    11dc:	c7 38       	cpi	r28, 0x87	; 135
    11de:	d8 07       	cpc	r29, r24
    11e0:	29 f4       	brne	.+10     	; 0x11ec <on_display+0x34>
	{
		LED_ON_DISP2;
    11e2:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <DispD2+0x1>
    11ea:	10 c0       	rjmp	.+32     	; 0x120c <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    11ec:	85 e0       	ldi	r24, 0x05	; 5
    11ee:	c9 37       	cpi	r28, 0x79	; 121
    11f0:	d8 07       	cpc	r29, r24
    11f2:	29 f4       	brne	.+10     	; 0x11fe <on_display+0x46>
	{
		LED_ON_DISP3;
    11f4:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <DispD3+0x1>
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    11fe:	c5 58       	subi	r28, 0x85	; 133
    1200:	d5 40       	sbci	r29, 0x05	; 5
    1202:	21 f4       	brne	.+8      	; 0x120c <on_display+0x54>
	{
		LED_ON_DISP4;
    1204:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <DispD4+0x1>
	}
	#endif
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    121e:	c0 81       	ld	r28, Z
    1220:	d1 81       	ldd	r29, Z+1	; 0x01
    1222:	21 96       	adiw	r28, 0x01	; 1
    1224:	d1 83       	std	Z+1, r29	; 0x01
    1226:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    1228:	9e 01       	movw	r18, r28
    122a:	ad ec       	ldi	r26, 0xCD	; 205
    122c:	bc ec       	ldi	r27, 0xCC	; 204
    122e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__umulhisi3>
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	9c 01       	movw	r18, r24
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	c8 17       	cp	r28, r24
    1256:	d9 07       	cpc	r29, r25
    1258:	01 f5       	brne	.+64     	; 0x129a <display_process+0x88>
    125a:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    125c:	10 91 2c 03 	lds	r17, 0x032C	; 0x80032c <iteration>
    1260:	14 30       	cpi	r17, 0x04	; 4
    1262:	58 f4       	brcc	.+22     	; 0x127a <display_process+0x68>
			on_display(disp_tab[iteration]);
    1264:	e1 2f       	mov	r30, r17
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	e3 58       	subi	r30, 0x83	; 131
    126e:	fa 4f       	sbci	r31, 0xFA	; 250
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <on_display>
    1278:	02 c0       	rjmp	.+4      	; 0x127e <display_process+0x6c>
		else
			off_all_displays();
    127a:	0e 94 fd 07 	call	0xffa	; 0xffa <off_all_displays>
		iteration++;
    127e:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1280:	15 30       	cpi	r17, 0x05	; 5
    1282:	19 f0       	breq	.+6      	; 0x128a <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    1284:	10 93 2c 03 	sts	0x032C, r17	; 0x80032c <iteration>
    1288:	02 c0       	rjmp	.+4      	; 0x128e <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    128a:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    128e:	c0 39       	cpi	r28, 0x90	; 144
    1290:	d1 40       	sbci	r29, 0x01	; 1
    1292:	19 f4       	brne	.+6      	; 0x129a <display_process+0x88>
    1294:	f7 01       	movw	r30, r14
    1296:	11 82       	std	Z+1, r1	; 0x01
    1298:	10 82       	st	Z, r1
	}
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	08 95       	ret

000012a6 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    12a6:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    12a8:	64 36       	cpi	r22, 0x64	; 100
    12aa:	f8 f4       	brcc	.+62     	; 0x12ea <disp_set_number+0x44>
	else if (number == 0)
    12ac:	61 11       	cpse	r22, r1
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    12b0:	a0 81       	ld	r26, Z
    12b2:	b1 81       	ldd	r27, Z+1	; 0x01
    12b4:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    12b6:	02 80       	ldd	r0, Z+2	; 0x02
    12b8:	f3 81       	ldd	r31, Z+3	; 0x03
    12ba:	e0 2d       	mov	r30, r0
    12bc:	10 82       	st	Z, r1
    12be:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    12c0:	a0 81       	ld	r26, Z
    12c2:	b1 81       	ldd	r27, Z+1	; 0x01
    12c4:	9d ec       	ldi	r25, 0xCD	; 205
    12c6:	69 9f       	mul	r22, r25
    12c8:	91 2d       	mov	r25, r1
    12ca:	11 24       	eor	r1, r1
    12cc:	96 95       	lsr	r25
    12ce:	96 95       	lsr	r25
    12d0:	96 95       	lsr	r25
    12d2:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    12d4:	02 80       	ldd	r0, Z+2	; 0x02
    12d6:	f3 81       	ldd	r31, Z+3	; 0x03
    12d8:	e0 2d       	mov	r30, r0
    12da:	89 2f       	mov	r24, r25
    12dc:	88 0f       	add	r24, r24
    12de:	98 2f       	mov	r25, r24
    12e0:	99 0f       	add	r25, r25
    12e2:	99 0f       	add	r25, r25
    12e4:	89 0f       	add	r24, r25
    12e6:	68 1b       	sub	r22, r24
    12e8:	60 83       	st	Z, r22
    12ea:	08 95       	ret

000012ec <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    12ec:	fc 01       	movw	r30, r24
    12ee:	60 83       	st	Z, r22
    12f0:	08 95       	ret

000012f2 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	39 f0       	breq	.+14     	; 0x1304 <dip_set_value+0x12>
    12f6:	18 f0       	brcs	.+6      	; 0x12fe <dip_set_value+0xc>
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	39 f0       	breq	.+14     	; 0x130a <dip_set_value+0x18>
    12fc:	08 95       	ret
    12fe:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <motor_disp_value>
    1302:	08 95       	ret
    1304:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <servo_disp_value>
    1308:	08 95       	ret
    130a:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <servo_disp_value>
    130e:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <motor_disp_value>
    1312:	08 95       	ret

00001314 <disp_get_state>:
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <disp_get_state+0xa>
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	29 f0       	breq	.+10     	; 0x1326 <disp_get_state+0x12>
    131c:	08 c0       	rjmp	.+16     	; 0x132e <disp_get_state+0x1a>
    131e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret
    1326:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	08 95       	ret
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <disp_disable_voltage>:
    1334:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    1338:	86 30       	cpi	r24, 0x06	; 6
    133a:	21 f4       	brne	.+8      	; 0x1344 <disp_disable_voltage+0x10>
    133c:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <disp1_last_state>
    1340:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
    1344:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    1348:	86 30       	cpi	r24, 0x06	; 6
    134a:	21 f4       	brne	.+8      	; 0x1354 <disp_disable_voltage+0x20>
    134c:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <disp2_last_state>
    1350:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
    1354:	08 95       	ret

00001356 <disp_set_state>:
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	a1 f0       	breq	.+40     	; 0x1382 <disp_set_state+0x2c>
    135a:	18 f0       	brcs	.+6      	; 0x1362 <disp_set_state+0xc>
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	09 f1       	breq	.+66     	; 0x13a2 <disp_set_state+0x4c>
    1360:	08 95       	ret
    1362:	66 30       	cpi	r22, 0x06	; 6
    1364:	21 f4       	brne	.+8      	; 0x136e <disp_set_state+0x18>
    1366:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    136a:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <disp1_last_state>
    136e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    1372:	86 30       	cpi	r24, 0x06	; 6
    1374:	19 f4       	brne	.+6      	; 0x137c <disp_set_state+0x26>
    1376:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <disp1_last_state>
    137a:	08 95       	ret
    137c:	60 93 78 05 	sts	0x0578, r22	; 0x800578 <segment1+0x4>
    1380:	08 95       	ret
    1382:	66 30       	cpi	r22, 0x06	; 6
    1384:	21 f4       	brne	.+8      	; 0x138e <disp_set_state+0x38>
    1386:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    138a:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <disp2_last_state>
    138e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    1392:	86 30       	cpi	r24, 0x06	; 6
    1394:	19 f4       	brne	.+6      	; 0x139c <disp_set_state+0x46>
    1396:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <disp2_last_state>
    139a:	08 95       	ret
    139c:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <segment2+0x4>
    13a0:	08 95       	ret
    13a2:	66 30       	cpi	r22, 0x06	; 6
    13a4:	41 f4       	brne	.+16     	; 0x13b6 <disp_set_state+0x60>
    13a6:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    13aa:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <disp1_last_state>
    13ae:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    13b2:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <disp2_last_state>
    13b6:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    13ba:	86 30       	cpi	r24, 0x06	; 6
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <disp_set_state+0x72>
    13be:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <disp2_last_state>
    13c2:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <disp1_last_state>
    13c6:	08 95       	ret
    13c8:	60 93 78 05 	sts	0x0578, r22	; 0x800578 <segment1+0x4>
    13cc:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <segment2+0x4>
    13d0:	08 95       	ret

000013d2 <display_set_error>:
    13d2:	95 e0       	ldi	r25, 0x05	; 5
    13d4:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <segment1+0x4>
    13d8:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <segment2+0x4>
    13dc:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <error_reason>
    13e0:	08 95       	ret

000013e2 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    13e2:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
    13e6:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
    13ea:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
    13ee:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
    13f2:	40 91 31 03 	lds	r20, 0x0331	; 0x800331 <timer_disp_process.1974>
    13f6:	50 91 32 03 	lds	r21, 0x0332	; 0x800332 <timer_disp_process.1974+0x1>
    13fa:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <timer_disp_process.1974+0x2>
    13fe:	70 91 34 03 	lds	r23, 0x0334	; 0x800334 <timer_disp_process.1974+0x3>
    1402:	48 17       	cp	r20, r24
    1404:	59 07       	cpc	r21, r25
    1406:	6a 07       	cpc	r22, r26
    1408:	7b 07       	cpc	r23, r27
    140a:	08 f0       	brcs	.+2      	; 0x140e <disp_process+0x2c>
    140c:	26 c1       	rjmp	.+588    	; 0x165a <disp_process+0x278>
	{
        
        switch(segment1.state)
    140e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	09 f4       	brne	.+2      	; 0x1418 <disp_process+0x36>
    1416:	59 c0       	rjmp	.+178    	; 0x14ca <disp_process+0xe8>
    1418:	30 f4       	brcc	.+12     	; 0x1426 <disp_process+0x44>
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <disp_process+0x3e>
    141e:	87 c0       	rjmp	.+270    	; 0x152e <disp_process+0x14c>
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	39 f1       	breq	.+78     	; 0x1472 <disp_process+0x90>
    1424:	8e c0       	rjmp	.+284    	; 0x1542 <disp_process+0x160>
    1426:	85 30       	cpi	r24, 0x05	; 5
    1428:	09 f4       	brne	.+2      	; 0x142c <disp_process+0x4a>
    142a:	74 c0       	rjmp	.+232    	; 0x1514 <disp_process+0x132>
    142c:	48 f1       	brcs	.+82     	; 0x1480 <disp_process+0x9e>
    142e:	86 30       	cpi	r24, 0x06	; 6
    1430:	09 f0       	breq	.+2      	; 0x1434 <disp_process+0x52>
    1432:	87 c0       	rjmp	.+270    	; 0x1542 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    1434:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	48 ec       	ldi	r20, 0xC8	; 200
    143e:	52 e4       	ldi	r21, 0x42	; 66
    1440:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    1444:	0e 94 18 19 	call	0x3230	; 0x3230 <__fixsfsi>
    1448:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <voltage+0x1>
    144c:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <voltage>
            disp_set_number(&segment1, voltage/100);
    1450:	9b 01       	movw	r18, r22
    1452:	36 95       	lsr	r19
    1454:	27 95       	ror	r18
    1456:	36 95       	lsr	r19
    1458:	27 95       	ror	r18
    145a:	ab e7       	ldi	r26, 0x7B	; 123
    145c:	b4 e1       	ldi	r27, 0x14	; 20
    145e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__umulhisi3>
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	68 2f       	mov	r22, r24
    1468:	84 e7       	ldi	r24, 0x74	; 116
    146a:	95 e0       	ldi	r25, 0x05	; 5
    146c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
            break;
    1470:	68 c0       	rjmp	.+208    	; 0x1542 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1472:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <motor_disp_value>
    1476:	84 e7       	ldi	r24, 0x74	; 116
    1478:	95 e0       	ldi	r25, 0x05	; 5
    147a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
            break;
    147e:	61 c0       	rjmp	.+194    	; 0x1542 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1480:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	31 f0       	breq	.+12     	; 0x1494 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    148e:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
                break;
    1492:	57 c0       	rjmp	.+174    	; 0x1542 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1494:	48 51       	subi	r20, 0x18	; 24
    1496:	5c 4f       	sbci	r21, 0xFC	; 252
    1498:	6f 4f       	sbci	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	40 93 31 03 	sts	0x0331, r20	; 0x800331 <timer_disp_process.1974>
    14a0:	50 93 32 03 	sts	0x0332, r21	; 0x800332 <timer_disp_process.1974+0x1>
    14a4:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <timer_disp_process.1974+0x2>
    14a8:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <timer_disp_process.1974+0x3>
			DispD2.value = 's';
    14ac:	83 e7       	ldi	r24, 0x73	; 115
    14ae:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <DispD2>
			DispD1.value = 'a';
    14b2:	81 e6       	ldi	r24, 0x61	; 97
    14b4:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <DispD1>
			DispD3.value = 'p';
    14b8:	80 e7       	ldi	r24, 0x70	; 112
    14ba:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <DispD3>
			segment1.state = SEG_VALUE;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
			segment2.state = SEG_VALUE;
    14c4:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
			return;
    14c8:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    14ca:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	31 f0       	breq	.+12     	; 0x14de <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    14d8:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
                break;
    14dc:	32 c0       	rjmp	.+100    	; 0x1542 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    14de:	48 51       	subi	r20, 0x18	; 24
    14e0:	5c 4f       	sbci	r21, 0xFC	; 252
    14e2:	6f 4f       	sbci	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	40 93 31 03 	sts	0x0331, r20	; 0x800331 <timer_disp_process.1974>
    14ea:	50 93 32 03 	sts	0x0332, r21	; 0x800332 <timer_disp_process.1974+0x1>
    14ee:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <timer_disp_process.1974+0x2>
    14f2:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
    14f6:	8c e6       	ldi	r24, 0x6C	; 108
    14f8:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <DispD2>
			DispD1.value = 'o';
    14fc:	8f e6       	ldi	r24, 0x6F	; 111
    14fe:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <DispD1>
			DispD3.value = 'p';
    1502:	80 e7       	ldi	r24, 0x70	; 112
    1504:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <DispD3>
			segment1.state = SEG_VALUE;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <segment1+0x4>
			segment2.state = SEG_VALUE;
    150e:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <segment2+0x4>
            break;
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    1514:	85 e6       	ldi	r24, 0x65	; 101
    1516:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <DispD2>
			DispD1.value = 'r';
    151a:	82 e7       	ldi	r24, 0x72	; 114
    151c:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <DispD1>
			disp_set_number(&segment2, error_reason);
    1520:	60 91 42 03 	lds	r22, 0x0342	; 0x800342 <error_reason>
    1524:	8f e6       	ldi	r24, 0x6F	; 111
    1526:	95 e0       	ldi	r25, 0x05	; 5
    1528:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
            break;
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    152e:	68 ef       	ldi	r22, 0xF8	; 248
    1530:	8b e7       	ldi	r24, 0x7B	; 123
    1532:	95 e0       	ldi	r25, 0x05	; 5
    1534:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1538:	68 ef       	ldi	r22, 0xF8	; 248
    153a:	87 e8       	ldi	r24, 0x87	; 135
    153c:	95 e0       	ldi	r25, 0x05	; 5
    153e:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1542:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	19 f1       	breq	.+70     	; 0x1590 <disp_process+0x1ae>
    154a:	48 f1       	brcs	.+82     	; 0x159e <disp_process+0x1bc>
    154c:	86 30       	cpi	r24, 0x06	; 6
    154e:	19 f0       	breq	.+6      	; 0x1556 <disp_process+0x174>
    1550:	8d 30       	cpi	r24, 0x0D	; 13
    1552:	81 f1       	breq	.+96     	; 0x15b4 <disp_process+0x1d2>
    1554:	6f c0       	rjmp	.+222    	; 0x1634 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1556:	40 91 40 03 	lds	r20, 0x0340	; 0x800340 <voltage>
    155a:	50 91 41 03 	lds	r21, 0x0341	; 0x800341 <voltage+0x1>
    155e:	9a 01       	movw	r18, r20
    1560:	36 95       	lsr	r19
    1562:	27 95       	ror	r18
    1564:	36 95       	lsr	r19
    1566:	27 95       	ror	r18
    1568:	ab e7       	ldi	r26, 0x7B	; 123
    156a:	b4 e1       	ldi	r27, 0x14	; 20
    156c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__umulhisi3>
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	64 e6       	ldi	r22, 0x64	; 100
    1576:	68 9f       	mul	r22, r24
    1578:	90 01       	movw	r18, r0
    157a:	69 9f       	mul	r22, r25
    157c:	30 0d       	add	r19, r0
    157e:	11 24       	eor	r1, r1
    1580:	ba 01       	movw	r22, r20
    1582:	62 1b       	sub	r22, r18
    1584:	73 0b       	sbc	r23, r19
    1586:	8f e6       	ldi	r24, 0x6F	; 111
    1588:	95 e0       	ldi	r25, 0x05	; 5
    158a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
            break;
    158e:	52 c0       	rjmp	.+164    	; 0x1634 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1590:	60 91 47 03 	lds	r22, 0x0347	; 0x800347 <servo_disp_value>
    1594:	8f e6       	ldi	r24, 0x6F	; 111
    1596:	95 e0       	ldi	r25, 0x05	; 5
    1598:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
            break;
    159c:	4b c0       	rjmp	.+150    	; 0x1634 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    159e:	68 ef       	ldi	r22, 0xF8	; 248
    15a0:	89 e7       	ldi	r24, 0x79	; 121
    15a2:	95 e0       	ldi	r25, 0x05	; 5
    15a4:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    15a8:	68 ef       	ldi	r22, 0xF8	; 248
    15aa:	85 e8       	ldi	r24, 0x85	; 133
    15ac:	95 e0       	ldi	r25, 0x05	; 5
    15ae:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
            break;
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    15b4:	44 ef       	ldi	r20, 0xF4	; 244
    15b6:	51 e0       	ldi	r21, 0x01	; 1
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	8b e3       	ldi	r24, 0x3B	; 59
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <evTime_process_period>
    15c4:	89 2b       	or	r24, r25
    15c6:	b1 f1       	breq	.+108    	; 0x1634 <disp_process+0x252>
			{
				if (blink_state == 0)
    15c8:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <blink_state>
    15cc:	81 11       	cpse	r24, r1
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <disp_process+0x20a>
				{
					blink_state = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    15d6:	67 ef       	ldi	r22, 0xF7	; 247
    15d8:	89 e7       	ldi	r24, 0x79	; 121
    15da:	95 e0       	ldi	r25, 0x05	; 5
    15dc:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    15e0:	67 ef       	ldi	r22, 0xF7	; 247
    15e2:	85 e8       	ldi	r24, 0x85	; 133
    15e4:	95 e0       	ldi	r25, 0x05	; 5
    15e6:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
    15ea:	24 c0       	rjmp	.+72     	; 0x1634 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    15ec:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <blink_state>
					if (blink_cnt == 0) 
    15f0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <blink_cnt>
    15f4:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <blink_cnt+0x1>
    15f8:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <blink_cnt+0x2>
    15fc:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <blink_cnt+0x3>
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	a1 05       	cpc	r26, r1
    1604:	b1 05       	cpc	r27, r1
    1606:	29 f4       	brne	.+10     	; 0x1612 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
						break;
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <disp_process+0x252>
					}
					blink_cnt--;
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	a1 09       	sbc	r26, r1
    1616:	b1 09       	sbc	r27, r1
    1618:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <blink_cnt>
    161c:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <blink_cnt+0x1>
    1620:	a0 93 38 03 	sts	0x0338, r26	; 0x800338 <blink_cnt+0x2>
    1624:	b0 93 39 03 	sts	0x0339, r27	; 0x800339 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    1628:	60 91 35 03 	lds	r22, 0x0335	; 0x800335 <second_disp_blink_val>
    162c:	8f e6       	ldi	r24, 0x6F	; 111
    162e:	95 e0       	ldi	r25, 0x05	; 5
    1630:	0e 94 53 09 	call	0x12a6	; 0x12a6 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    1634:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <timer_disp_process.1974>
    1638:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <timer_disp_process.1974+0x1>
    163c:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <timer_disp_process.1974+0x2>
    1640:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <timer_disp_process.1974+0x3>
    1644:	c2 96       	adiw	r24, 0x32	; 50
    1646:	a1 1d       	adc	r26, r1
    1648:	b1 1d       	adc	r27, r1
    164a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <timer_disp_process.1974>
    164e:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <timer_disp_process.1974+0x1>
    1652:	a0 93 33 03 	sts	0x0333, r26	; 0x800333 <timer_disp_process.1974+0x2>
    1656:	b0 93 34 03 	sts	0x0334, r27	; 0x800334 <timer_disp_process.1974+0x3>
    165a:	08 95       	ret

0000165c <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1660:	00 91 9c 05 	lds	r16, 0x059C	; 0x80059c <mktime+0x2>
    1664:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mktime+0x3>
    1668:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <mktime+0x4>
    166c:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <mktime+0x5>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	80 0f       	add	r24, r16
    1676:	91 1f       	adc	r25, r17
    1678:	a2 1f       	adc	r26, r18
    167a:	b3 1f       	adc	r27, r19
    167c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <animation_time>
    1680:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <animation_time+0x1>
    1684:	a0 93 45 03 	sts	0x0345, r26	; 0x800345 <animation_time+0x2>
    1688:	b0 93 46 03 	sts	0x0346, r27	; 0x800346 <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	84 2f       	mov	r24, r20
    1690:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
}
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    169a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	29 f0       	breq	.+10     	; 0x16ac <animation+0x12>
    16a2:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	09 f0       	breq	.+2      	; 0x16ac <animation+0x12>
    16aa:	78 c0       	rjmp	.+240    	; 0x179c <animation+0x102>
    16ac:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    16b0:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    16b4:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    16b8:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    16bc:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <timer_anim.1994>
    16c0:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <timer_anim.1994+0x1>
    16c4:	a0 91 2f 03 	lds	r26, 0x032F	; 0x80032f <timer_anim.1994+0x2>
    16c8:	b0 91 30 03 	lds	r27, 0x0330	; 0x800330 <timer_anim.1994+0x3>
    16cc:	84 17       	cp	r24, r20
    16ce:	95 07       	cpc	r25, r21
    16d0:	a6 07       	cpc	r26, r22
    16d2:	b7 07       	cpc	r27, r23
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <animation+0x3e>
    16d6:	62 c0       	rjmp	.+196    	; 0x179c <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    16d8:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
    16dc:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
    16e0:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
    16e4:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
    16e8:	81 55       	subi	r24, 0x51	; 81
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	af 4f       	sbci	r26, 0xFF	; 255
    16ee:	bf 4f       	sbci	r27, 0xFF	; 255
    16f0:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <timer_anim.1994>
    16f4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <timer_anim.1994+0x1>
    16f8:	a0 93 2f 03 	sts	0x032F, r26	; 0x80032f <timer_anim.1994+0x2>
    16fc:	b0 93 30 03 	sts	0x0330, r27	; 0x800330 <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    1700:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <segment1+0x4>
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	61 f4       	brne	.+24     	; 0x1720 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    1708:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    170c:	8b e7       	ldi	r24, 0x7B	; 123
    170e:	95 e0       	ldi	r25, 0x05	; 5
    1710:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    1714:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    1718:	87 e8       	ldi	r24, 0x87	; 135
    171a:	95 e0       	ldi	r25, 0x05	; 5
    171c:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    1720:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <segment2+0x4>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	61 f4       	brne	.+24     	; 0x1740 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    1728:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    172c:	89 e7       	ldi	r24, 0x79	; 121
    172e:	95 e0       	ldi	r25, 0x05	; 5
    1730:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    1734:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    1738:	85 e8       	ldi	r24, 0x85	; 133
    173a:	95 e0       	ldi	r25, 0x05	; 5
    173c:	0e 94 76 09 	call	0x12ec	; 0x12ec <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1740:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    1744:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    1748:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    174c:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    1750:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <animation_time>
    1754:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <animation_time+0x1>
    1758:	a0 91 45 03 	lds	r26, 0x0345	; 0x800345 <animation_time+0x2>
    175c:	b0 91 46 03 	lds	r27, 0x0346	; 0x800346 <animation_time+0x3>
    1760:	84 17       	cp	r24, r20
    1762:	95 07       	cpc	r25, r21
    1764:	a6 07       	cpc	r26, r22
    1766:	b7 07       	cpc	r27, r23
    1768:	28 f4       	brcc	.+10     	; 0x1774 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
			LED_ACUM_OFF;
    1772:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1774:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    1778:	9f 5f       	subi	r25, 0xFF	; 255
    177a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    177e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    1788:	9f 3f       	cpi	r25, 0xFF	; 255
    178a:	19 f4       	brne	.+6      	; 0x1792 <animation+0xf8>
    178c:	99 ef       	ldi	r25, 0xF9	; 249
    178e:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1792:	88 3f       	cpi	r24, 0xF8	; 248
    1794:	19 f4       	brne	.+6      	; 0x179c <animation+0x102>
    1796:	8e ef       	ldi	r24, 0xFE	; 254
    1798:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    179c:	08 95       	ret

0000179e <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    179e:	e1 99       	sbic	0x1c, 1	; 28
    17a0:	fe cf       	rjmp	.-4      	; 0x179e <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    17a2:	9f bb       	out	0x1f, r25	; 31
    17a4:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    17a6:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    17a8:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    17aa:	e1 9a       	sbi	0x1c, 1	; 28
    17ac:	08 95       	ret

000017ae <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    17ae:	e1 99       	sbic	0x1c, 1	; 28
    17b0:	fe cf       	rjmp	.-4      	; 0x17ae <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    17b2:	9f bb       	out	0x1f, r25	; 31
    17b4:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    17b6:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    17b8:	8d b3       	in	r24, 0x1d	; 29
    17ba:	08 95       	ret

000017bc <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    17bc:	cf 93       	push	r28
    17be:	c8 2f       	mov	r28, r24
    17c0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    17c4:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    17ce:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    17d2:	8c 2f       	mov	r24, r28
    17d4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <display_set_error>
    17d8:	0e 94 76 07 	call	0xeec	; 0xeec <dcmotor_set_error>
    17dc:	0e 94 80 11 	call	0x2300	; 0x2300 <servo_error>
    17e0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <system_error>
    17e4:	c0 93 8b 05 	sts	0x058B, r28	; 0x80058b <led_blink>
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <error_init>:
    17ec:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <error_motor_state>
    17f0:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <error_motor_last_state>
    17f4:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <error_motor_status>
    17f8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <error_servo_status>
    17fc:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <error_servo_state>
    1800:	82 e6       	ldi	r24, 0x62	; 98
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <evTime_off>
    1808:	82 e5       	ldi	r24, 0x52	; 82
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <evTime_off>
    1810:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <led_blink>
    1814:	08 95       	ret

00001816 <error_deinit>:
    1816:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <error_motor_state>
    181a:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <error_motor_last_state>
    181e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <error_motor_status>
    1822:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <error_servo_status>
    1826:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <error_servo_state>
    182a:	82 e6       	ldi	r24, 0x62	; 98
    182c:	93 e0       	ldi	r25, 0x03	; 3
    182e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <evTime_off>
    1832:	82 e5       	ldi	r24, 0x52	; 82
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <evTime_off>
    183a:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <led_blink>
    183e:	08 95       	ret

00001840 <error_event>:

void error_event(void)
{
    1840:	4f 92       	push	r4
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	8f 92       	push	r8
    184a:	9f 92       	push	r9
    184c:	af 92       	push	r10
    184e:	bf 92       	push	r11
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    185c:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    1860:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    1864:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    1868:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    186c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <error_event_timer.2029>
    1870:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <error_event_timer.2029+0x1>
    1874:	a0 91 50 03 	lds	r26, 0x0350	; 0x800350 <error_event_timer.2029+0x2>
    1878:	b0 91 51 03 	lds	r27, 0x0351	; 0x800351 <error_event_timer.2029+0x3>
    187c:	84 17       	cp	r24, r20
    187e:	95 07       	cpc	r25, r21
    1880:	a6 07       	cpc	r26, r22
    1882:	b7 07       	cpc	r27, r23
    1884:	08 f0       	brcs	.+2      	; 0x1888 <error_event+0x48>
    1886:	6e c2       	rjmp	.+1244   	; 0x1d64 <error_event+0x524>
    1888:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    188c:	80 ff       	sbrs	r24, 0
    188e:	6a c2       	rjmp	.+1236   	; 0x1d64 <error_event+0x524>
	{
		error_event_timer = mktime.ms + 500;
    1890:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    1894:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    1898:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    189c:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    18a0:	4c 50       	subi	r20, 0x0C	; 12
    18a2:	5e 4f       	sbci	r21, 0xFE	; 254
    18a4:	6f 4f       	sbci	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	40 93 4e 03 	sts	0x034E, r20	; 0x80034e <error_event_timer.2029>
    18ac:	50 93 4f 03 	sts	0x034F, r21	; 0x80034f <error_event_timer.2029+0x1>
    18b0:	60 93 50 03 	sts	0x0350, r22	; 0x800350 <error_event_timer.2029+0x2>
    18b4:	70 93 51 03 	sts	0x0351, r23	; 0x800351 <error_event_timer.2029+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    18b8:	81 fd       	sbrc	r24, 1
    18ba:	54 c2       	rjmp	.+1192   	; 0x1d64 <error_event+0x524>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    18bc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    18c0:	4b 01       	movw	r8, r22
    18c2:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    18c4:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    18c8:	bc 01       	movw	r22, r24
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatunsisf>
    18d2:	6b 01       	movw	r12, r22
    18d4:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    18d6:	25 e9       	ldi	r18, 0x95	; 149
    18d8:	35 e6       	ldi	r19, 0x65	; 101
    18da:	40 ed       	ldi	r20, 0xD0	; 208
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <pow>
    18e2:	2b 01       	movw	r4, r22
    18e4:	3c 01       	movw	r6, r24
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    18e6:	a7 01       	movw	r20, r14
    18e8:	96 01       	movw	r18, r12
    18ea:	c5 01       	movw	r24, r10
    18ec:	b4 01       	movw	r22, r8
    18ee:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	48 ec       	ldi	r20, 0xC8	; 200
    18f8:	52 e4       	ldi	r21, 0x42	; 66
    18fa:	0e 94 a6 18 	call	0x314c	; 0x314c <__divsf3>
    18fe:	4b 01       	movw	r8, r22
    1900:	5c 01       	movw	r10, r24
    1902:	23 e3       	ldi	r18, 0x33	; 51
    1904:	33 e3       	ldi	r19, 0x33	; 51
    1906:	43 e6       	ldi	r20, 0x63	; 99
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	48 ec       	ldi	r20, 0xC8	; 200
    1918:	52 e4       	ldi	r21, 0x42	; 66
    191a:	0e 94 a6 18 	call	0x314c	; 0x314c <__divsf3>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	c5 01       	movw	r24, r10
    1924:	b4 01       	movw	r22, r8
    1926:	0e 94 39 18 	call	0x3072	; 0x3072 <__subsf3>
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e4       	ldi	r20, 0x40	; 64
    1930:	50 e4       	ldi	r21, 0x40	; 64
    1932:	0e 94 a6 18 	call	0x314c	; 0x314c <__divsf3>
    1936:	6b 01       	movw	r12, r22
    1938:	7c 01       	movw	r14, r24
    193a:	28 e5       	ldi	r18, 0x58	; 88
    193c:	39 e3       	ldi	r19, 0x39	; 57
    193e:	44 e3       	ldi	r20, 0x34	; 52
    1940:	5c e3       	ldi	r21, 0x3C	; 60
    1942:	c3 01       	movw	r24, r6
    1944:	b2 01       	movw	r22, r4
    1946:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c7 01       	movw	r24, r14
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 3a 18 	call	0x3074	; 0x3074 <__addsf3>
    1956:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <motor_error_value>
    195a:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <motor_error_value+0x1>
    195e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <motor_error_value+0x2>
    1962:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 78 10 	call	0x20f0	; 0x20f0 <measure_get_filtered_value>
    196c:	c8 2f       	mov	r28, r24
    196e:	d9 2f       	mov	r29, r25
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1970:	42 e0       	ldi	r20, 0x02	; 2
    1972:	5b e2       	ldi	r21, 0x2B	; 43
    1974:	67 e0       	ldi	r22, 0x07	; 7
    1976:	7d e3       	ldi	r23, 0x3D	; 61
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	0e 94 91 10 	call	0x2122	; 0x2122 <measure_get_current>
    197e:	c6 2e       	mov	r12, r22
    1980:	d7 2e       	mov	r13, r23
    1982:	e8 2e       	mov	r14, r24
    1984:	f9 2e       	mov	r15, r25
		debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
    198a:	7f 93       	push	r23
    198c:	6f 93       	push	r22
    198e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <motor_error_value+0x3>
    1992:	8f 93       	push	r24
    1994:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <motor_error_value+0x2>
    1998:	8f 93       	push	r24
    199a:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <motor_error_value+0x1>
    199e:	8f 93       	push	r24
    19a0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <motor_error_value>
    19a4:	8f 93       	push	r24
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	89 ec       	ldi	r24, 0xC9	; 201
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    19b6:	4d b7       	in	r20, 0x3d	; 61
    19b8:	5e b7       	in	r21, 0x3e	; 62
    19ba:	44 5f       	subi	r20, 0xF4	; 244
    19bc:	5f 4f       	sbci	r21, 0xFF	; 255
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	5e bf       	out	0x3e, r21	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	4d bf       	out	0x3d, r20	; 61
    19c8:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <motor_error_value>
    19cc:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <motor_error_value+0x1>
    19d0:	40 91 5d 03 	lds	r20, 0x035D	; 0x80035d <motor_error_value+0x2>
    19d4:	50 91 5e 03 	lds	r21, 0x035E	; 0x80035e <motor_error_value+0x3>
    19d8:	6c 2d       	mov	r22, r12
    19da:	7d 2d       	mov	r23, r13
    19dc:	8e 2d       	mov	r24, r14
    19de:	9f 2d       	mov	r25, r15
    19e0:	0e 94 00 1a 	call	0x3400	; 0x3400 <__gesf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	d4 f4       	brge	.+52     	; 0x1a1c <error_event+0x1dc>
    19e8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <dcmotor_is_on>
    19ec:	89 2b       	or	r24, r25
    19ee:	b1 f0       	breq	.+44     	; 0x1a1c <error_event+0x1dc>
		{
			error_motor_status = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <error_motor_status>
			error_motor_status = 0;
		}
		#if CONFIG_USE_ERROR_MOTOR
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
    19f6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <error_motor_state>
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <error_event+0x1c0>
    19fe:	84 c0       	rjmp	.+264    	; 0x1b08 <error_event+0x2c8>
    1a00:	30 f4       	brcc	.+12     	; 0x1a0e <error_event+0x1ce>
    1a02:	88 23       	and	r24, r24
    1a04:	f1 f0       	breq	.+60     	; 0x1a42 <error_event+0x202>
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <error_event+0x1cc>
    1a0a:	48 c0       	rjmp	.+144    	; 0x1a9c <error_event+0x25c>
    1a0c:	ff c0       	rjmp	.+510    	; 0x1c0c <error_event+0x3cc>
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <error_event+0x1d4>
    1a12:	8d c0       	rjmp	.+282    	; 0x1b2e <error_event+0x2ee>
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <error_event+0x1da>
    1a18:	8e c0       	rjmp	.+284    	; 0x1b36 <error_event+0x2f6>
    1a1a:	f8 c0       	rjmp	.+496    	; 0x1c0c <error_event+0x3cc>
		{
			error_motor_status = 1;
		}
		else
		{
			error_motor_status = 0;
    1a1c:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <error_motor_status>
			}
		}
		else
		{
			//toDo
			switch(error_motor_state)
    1a20:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <error_motor_state>
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <error_event+0x1ea>
    1a28:	c0 c0       	rjmp	.+384    	; 0x1baa <error_event+0x36a>
    1a2a:	20 f4       	brcc	.+8      	; 0x1a34 <error_event+0x1f4>
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <error_event+0x1f2>
    1a30:	9e c0       	rjmp	.+316    	; 0x1b6e <error_event+0x32e>
    1a32:	ec c0       	rjmp	.+472    	; 0x1c0c <error_event+0x3cc>
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <error_event+0x1fa>
    1a38:	d5 c0       	rjmp	.+426    	; 0x1be4 <error_event+0x3a4>
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <error_event+0x200>
    1a3e:	d6 c0       	rjmp	.+428    	; 0x1bec <error_event+0x3ac>
    1a40:	e5 c0       	rjmp	.+458    	; 0x1c0c <error_event+0x3cc>
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1a48:	86 ef       	ldi	r24, 0xF6	; 246
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9f 93       	push	r25
    1a4e:	8f 93       	push	r24
    1a50:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1a54:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1a58:	2e e1       	ldi	r18, 0x1E	; 30
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	24 9f       	mul	r18, r20
    1a5e:	c0 01       	movw	r24, r0
    1a60:	25 9f       	mul	r18, r21
    1a62:	90 0d       	add	r25, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	48 e8       	ldi	r20, 0x88	; 136
    1a68:	53 e1       	ldi	r21, 0x13	; 19
    1a6a:	ea 01       	movw	r28, r20
    1a6c:	c8 1b       	sub	r28, r24
    1a6e:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	81 e1       	ldi	r24, 0x11	; 17
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1a80:	ae 01       	movw	r20, r28
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	82 e6       	ldi	r24, 0x62	; 98
    1a88:	93 e0       	ldi	r25, 0x03	; 3
    1a8a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
				break;
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	b8 c0       	rjmp	.+368    	; 0x1c0c <error_event+0x3cc>
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1a9c:	82 e6       	ldi	r24, 0x62	; 98
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <error_event+0x26a>
    1aa8:	b1 c0       	rjmp	.+354    	; 0x1c0c <error_event+0x3cc>
					{
						dcmotor_set_try();
    1aaa:	0e 94 84 07 	call	0xf08	; 0xf08 <dcmotor_set_try>
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1aae:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1ab2:	2e e1       	ldi	r18, 0x1E	; 30
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	24 9f       	mul	r18, r20
    1ab8:	c0 01       	movw	r24, r0
    1aba:	25 9f       	mul	r18, r21
    1abc:	90 0d       	add	r25, r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	48 e8       	ldi	r20, 0x88	; 136
    1ac2:	53 e1       	ldi	r21, 0x13	; 19
    1ac4:	ea 01       	movw	r28, r20
    1ac6:	c8 1b       	sub	r28, r24
    1ac8:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	80 e3       	ldi	r24, 0x30	; 48
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				break;
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
					{
						dcmotor_set_try();
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1ada:	ae 01       	movw	r20, r28
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	82 e6       	ldi	r24, 0x62	; 98
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
						error_motor_state = ERR_M_AXELERATE;
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    1aee:	84 e5       	ldi	r24, 0x54	; 84
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	9f 93       	push	r25
    1af4:	8f 93       	push	r24
    1af6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	82 c0       	rjmp	.+260    	; 0x1c0c <error_event+0x3cc>
					}
				break;
				case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1b08:	82 e6       	ldi	r24, 0x62	; 98
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1b10:	89 2b       	or	r24, r25
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <error_event+0x2d6>
    1b14:	7b c0       	rjmp	.+246    	; 0x1c0c <error_event+0x3cc>
					{
						error_motor_state = ERR_M_ERROR;
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1b1c:	84 e7       	ldi	r24, 0x74	; 116
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	6f c0       	rjmp	.+222    	; 0x1c0c <error_event+0x3cc>
					}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_error_state>
				break;
    1b34:	6b c0       	rjmp	.+214    	; 0x1c0c <error_event+0x3cc>
				case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1b36:	82 e6       	ldi	r24, 0x62	; 98
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1b3e:	89 2b       	or	r24, r25
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <error_event+0x304>
    1b42:	64 c0       	rjmp	.+200    	; 0x1c0c <error_event+0x3cc>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1b44:	40 ed       	ldi	r20, 0xD0	; 208
    1b46:	57 e0       	ldi	r21, 0x07	; 7
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	82 e6       	ldi	r24, 0x62	; 98
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
						error_motor_state = error_motor_last_state;
    1b54:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <error_motor_last_state>
    1b58:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
						debug_msg("ERROR STATUS: go to last before wait\n\r");
    1b5c:	80 e9       	ldi	r24, 0x90	; 144
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	4f c0       	rjmp	.+158    	; 0x1c0c <error_event+0x3cc>
			switch(error_motor_state)
			{
				case ERR_M_OK:
				break;
				case ERR_M_WAIT:
				if (evTime_check(&motor_timer))
    1b6e:	82 e6       	ldi	r24, 0x62	; 98
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <error_event+0x33c>
    1b7a:	48 c0       	rjmp	.+144    	; 0x1c0c <error_event+0x3cc>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1b7c:	40 ed       	ldi	r20, 0xD0	; 208
    1b7e:	57 e0       	ldi	r21, 0x07	; 7
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	82 e6       	ldi	r24, 0x62	; 98
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
					error_motor_last_state = ERR_M_WAIT;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1b98:	87 eb       	ldi	r24, 0xB7	; 183
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	9f 93       	push	r25
    1b9e:	8f 93       	push	r24
    1ba0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	31 c0       	rjmp	.+98     	; 0x1c0c <error_event+0x3cc>
				}
				break;
				case ERR_M_AXELERATE:
				if (evTime_check(&motor_timer))
    1baa:	82 e6       	ldi	r24, 0x62	; 98
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	59 f1       	breq	.+86     	; 0x1c0c <error_event+0x3cc>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bb6:	40 ed       	ldi	r20, 0xD0	; 208
    1bb8:	57 e0       	ldi	r21, 0x07	; 7
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	82 e6       	ldi	r24, 0x62	; 98
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <error_motor_state>
					error_motor_last_state = ERR_M_AXELERATE;
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1bd2:	87 eb       	ldi	r24, 0xB7	; 183
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	9f 93       	push	r25
    1bd8:	8f 93       	push	r24
    1bda:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <error_event+0x3cc>
				}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_error_state>
				break;
    1bea:	10 c0       	rjmp	.+32     	; 0x1c0c <error_event+0x3cc>
				case ERR_M_EXIT:
				if (evTime_check(&motor_timer))
    1bec:	82 e6       	ldi	r24, 0x62	; 98
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1bf4:	89 2b       	or	r24, r25
    1bf6:	51 f0       	breq	.+20     	; 0x1c0c <error_event+0x3cc>
				{
					debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1bf8:	82 ed       	ldi	r24, 0xD2	; 210
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	9f 93       	push	r25
    1bfe:	8f 93       	push	r24
    1c00:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					error_motor_state = ERR_M_OK;
    1c04:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <error_motor_state>
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
		}
		#endif
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if CONFIG_USE_ERROR_SERVO
		servo_error_value = count_servo_error_value();
    1c0c:	84 e6       	ldi	r24, 0x64	; 100
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <servo_error_value+0x1>
    1c14:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <servo_error_value>
		if (measure_get_filtered_value(MEAS_SERVO) > servo_error_value) //servo_vibro_value*5
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <measure_get_filtered_value>
    1c1e:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <servo_error_value>
    1c22:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <servo_error_value+0x1>
    1c26:	28 17       	cp	r18, r24
    1c28:	39 07       	cpc	r19, r25
    1c2a:	d8 f4       	brcc	.+54     	; 0x1c62 <error_event+0x422>
		{
			debug_msg("servo_error_value: %d\n", servo_error_value);
    1c2c:	3f 93       	push	r19
    1c2e:	2f 93       	push	r18
    1c30:	8b ee       	ldi	r24, 0xEB	; 235
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
			error_servo_status = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <error_servo_status>
			error_servo_status = 0;
		}
		
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <error_servo_state>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	51 f1       	breq	.+84     	; 0x1ca6 <error_event+0x466>
    1c52:	a8 f0       	brcs	.+42     	; 0x1c7e <error_event+0x43e>
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <error_event+0x41a>
    1c58:	4b c0       	rjmp	.+150    	; 0x1cf0 <error_event+0x4b0>
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <error_event+0x420>
    1c5e:	51 c0       	rjmp	.+162    	; 0x1d02 <error_event+0x4c2>
    1c60:	81 c0       	rjmp	.+258    	; 0x1d64 <error_event+0x524>
			debug_msg("servo_error_value: %d\n", servo_error_value);
			error_servo_status = 1;
		}
		else
		{
			error_servo_status = 0;
    1c62:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <error_servo_status>
			} //switch
		}// if (error_servo_status == 1)
		else
		{
			//toDo
			switch(error_servo_state)
    1c66:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <error_servo_state>
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <error_event+0x430>
    1c6e:	66 c0       	rjmp	.+204    	; 0x1d3c <error_event+0x4fc>
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <error_event+0x436>
    1c74:	74 c0       	rjmp	.+232    	; 0x1d5e <error_event+0x51e>
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <error_event+0x43c>
    1c7a:	74 c0       	rjmp	.+232    	; 0x1d64 <error_event+0x524>
    1c7c:	46 c0       	rjmp	.+140    	; 0x1d0a <error_event+0x4ca>
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
			{
				case ERR_S_OK:
					error_servo_state = ERR_S_WAIT;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	9f 93       	push	r25
    1c8a:	8f 93       	push	r24
    1c8c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1c90:	44 ef       	ldi	r20, 0xF4	; 244
    1c92:	51 e0       	ldi	r21, 0x01	; 1
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	82 e5       	ldi	r24, 0x52	; 82
    1c9a:	93 e0       	ldi	r25, 0x03	; 3
    1c9c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
				break;
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	5f c0       	rjmp	.+190    	; 0x1d64 <error_event+0x524>
				case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1ca6:	82 e5       	ldi	r24, 0x52	; 82
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1cae:	89 2b       	or	r24, r25
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <error_event+0x474>
    1cb2:	58 c0       	rjmp	.+176    	; 0x1d64 <error_event+0x524>
					{
						if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1cb4:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_get_try_cnt>
    1cb8:	04 97       	sbiw	r24, 0x04	; 4
    1cba:	24 f0       	brlt	.+8      	; 0x1cc4 <error_event+0x484>
						{
							error_servo_state = ERR_S_ERROR;
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <error_servo_state>
							break;
    1cc2:	50 c0       	rjmp	.+160    	; 0x1d64 <error_event+0x524>
						}
						evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1cc4:	4c ed       	ldi	r20, 0xDC	; 220
    1cc6:	55 e0       	ldi	r21, 0x05	; 5
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	82 e5       	ldi	r24, 0x52	; 82
    1cce:	93 e0       	ldi	r25, 0x03	; 3
    1cd0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
						error_servo_state = ERR_S_TRY;
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <error_servo_state>
						servo_enable_try();
    1cda:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <servo_enable_try>
						debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1cde:	8d e1       	ldi	r24, 0x1D	; 29
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	9f 93       	push	r25
    1ce4:	8f 93       	push	r24
    1ce6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	3a c0       	rjmp	.+116    	; 0x1d64 <error_event+0x524>
					}
				break;
				case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1cf0:	82 e5       	ldi	r24, 0x52	; 82
    1cf2:	93 e0       	ldi	r25, 0x03	; 3
    1cf4:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	a1 f1       	breq	.+104    	; 0x1d64 <error_event+0x524>
					{
						error_servo_state = ERR_S_OK;
    1cfc:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <error_servo_state>
    1d00:	31 c0       	rjmp	.+98     	; 0x1d64 <error_event+0x524>
					}
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_error_state>
				break;
    1d08:	2d c0       	rjmp	.+90     	; 0x1d64 <error_event+0x524>
			switch(error_servo_state)
			{
				case ERR_S_OK:
				break;
				case ERR_S_WAIT:
				if (evTime_check(&servo_timer))
    1d0a:	82 e5       	ldi	r24, 0x52	; 82
    1d0c:	93 e0       	ldi	r25, 0x03	; 3
    1d0e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1d12:	89 2b       	or	r24, r25
    1d14:	39 f1       	breq	.+78     	; 0x1d64 <error_event+0x524>
				{
					evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1d16:	40 ed       	ldi	r20, 0xD0	; 208
    1d18:	57 e0       	ldi	r21, 0x07	; 7
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	82 e5       	ldi	r24, 0x52	; 82
    1d20:	93 e0       	ldi	r25, 0x03	; 3
    1d22:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
					error_servo_state = ERR_M_OK;
    1d26:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1d2a:	87 e3       	ldi	r24, 0x37	; 55
    1d2c:	92 e0       	ldi	r25, 0x02	; 2
    1d2e:	9f 93       	push	r25
    1d30:	8f 93       	push	r24
    1d32:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <error_event+0x524>
				}
				break;
				case ERR_S_TRY:
				if (evTime_check(&servo_timer))
    1d3c:	82 e5       	ldi	r24, 0x52	; 82
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    1d44:	89 2b       	or	r24, r25
    1d46:	71 f0       	breq	.+28     	; 0x1d64 <error_event+0x524>
				{
					error_servo_state = ERR_S_OK;
    1d48:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1d4c:	87 e3       	ldi	r24, 0x37	; 55
    1d4e:	92 e0       	ldi	r25, 0x02	; 2
    1d50:	9f 93       	push	r25
    1d52:	8f 93       	push	r24
    1d54:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <error_event+0x524>
				}
				break;
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 de 0b 	call	0x17bc	; 0x17bc <set_error_state>
				break;
			} //switch
		} //else (error_servo_status == 1)
		#endif
	} //error_event_timer
}
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	08 95       	ret

00001d82 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1d82:	4e e5       	ldi	r20, 0x5E	; 94
    1d84:	51 e0       	ldi	r21, 0x01	; 1
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	89 e4       	ldi	r24, 0x49	; 73
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <evTime_process_period>
    1d92:	89 2b       	or	r24, r25
    1d94:	09 f1       	breq	.+66     	; 0x1dd8 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1d96:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <led_blink>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	71 f4       	brne	.+28     	; 0x1dba <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1d9e:	92 b3       	in	r25, 0x12	; 18
    1da0:	80 e1       	ldi	r24, 0x10	; 16
    1da2:	89 27       	eor	r24, r25
    1da4:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1da6:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    1daa:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    1dae:	90 62       	ori	r25, 0x20	; 32
    1db0:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    1db4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    1db8:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	69 f4       	brne	.+26     	; 0x1dd8 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1dbe:	92 b3       	in	r25, 0x12	; 18
    1dc0:	80 e4       	ldi	r24, 0x40	; 64
    1dc2:	89 27       	eor	r24, r25
    1dc4:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1dc6:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    1dca:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    1dce:	90 62       	ori	r25, 0x20	; 32
    1dd0:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    1dd4:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    1dd8:	08 95       	ret

00001dda <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 81       	ld	r18, Z
    1dde:	31 81       	ldd	r19, Z+1	; 0x01
    1de0:	62 30       	cpi	r22, 0x02	; 2
    1de2:	58 f0       	brcs	.+22     	; 0x1dfa <filtered_value+0x20>
    1de4:	32 96       	adiw	r30, 0x02	; 2
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	41 91       	ld	r20, Z+
    1dea:	51 91       	ld	r21, Z+
    1dec:	24 0f       	add	r18, r20
    1dee:	35 1f       	adc	r19, r21
    1df0:	36 95       	lsr	r19
    1df2:	27 95       	ror	r18
    1df4:	9f 5f       	subi	r25, 0xFF	; 255
    1df6:	69 13       	cpse	r22, r25
    1df8:	f7 cf       	rjmp	.-18     	; 0x1de8 <filtered_value+0xe>
    1dfa:	c9 01       	movw	r24, r18
    1dfc:	08 95       	ret

00001dfe <init_measure>:
    1dfe:	ed ea       	ldi	r30, 0xAD	; 173
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
    1e02:	25 ed       	ldi	r18, 0xD5	; 213
    1e04:	33 e0       	ldi	r19, 0x03	; 3
    1e06:	81 ef       	ldi	r24, 0xF1	; 241
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	81 93       	st	Z+, r24
    1e0c:	91 93       	st	Z+, r25
    1e0e:	2e 17       	cp	r18, r30
    1e10:	3f 07       	cpc	r19, r31
    1e12:	d9 f7       	brne	.-10     	; 0x1e0a <init_measure+0xc>
    1e14:	ec e8       	ldi	r30, 0x8C	; 140
    1e16:	f3 e0       	ldi	r31, 0x03	; 3
    1e18:	8a ea       	ldi	r24, 0xAA	; 170
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	11 92       	st	Z+, r1
    1e1e:	11 92       	st	Z+, r1
    1e20:	8e 17       	cp	r24, r30
    1e22:	9f 07       	cpc	r25, r31
    1e24:	d9 f7       	brne	.-10     	; 0x1e1c <init_measure+0x1e>
    1e26:	e4 e7       	ldi	r30, 0x74	; 116
    1e28:	f3 e0       	ldi	r31, 0x03	; 3
    1e2a:	88 e8       	ldi	r24, 0x88	; 136
    1e2c:	93 e0       	ldi	r25, 0x03	; 3
    1e2e:	11 92       	st	Z+, r1
    1e30:	11 92       	st	Z+, r1
    1e32:	8e 17       	cp	r24, r30
    1e34:	9f 07       	cpc	r25, r31
    1e36:	d9 f7       	brne	.-10     	; 0x1e2e <init_measure+0x30>
    1e38:	08 95       	ret

00001e3a <measure_process>:
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    1e4a:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    1e4e:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    1e52:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    1e56:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <measure_timer>
    1e5a:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <measure_timer+0x1>
    1e5e:	a0 91 6d 03 	lds	r26, 0x036D	; 0x80036d <measure_timer+0x2>
    1e62:	b0 91 6e 03 	lds	r27, 0x036E	; 0x80036e <measure_timer+0x3>
    1e66:	84 17       	cp	r24, r20
    1e68:	95 07       	cpc	r25, r21
    1e6a:	a6 07       	cpc	r26, r22
    1e6c:	b7 07       	cpc	r27, r23
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <measure_process+0x38>
    1e70:	fc c0       	rjmp	.+504    	; 0x206a <measure_process+0x230>
    1e72:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
    1e76:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
    1e7a:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
    1e7e:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
    1e82:	44 96       	adiw	r24, 0x14	; 20
    1e84:	a1 1d       	adc	r26, r1
    1e86:	b1 1d       	adc	r27, r1
    1e88:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <measure_timer>
    1e8c:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <measure_timer+0x1>
    1e90:	a0 93 6d 03 	sts	0x036D, r26	; 0x80036d <measure_timer+0x2>
    1e94:	b0 93 6e 03 	sts	0x036E, r27	; 0x80036e <measure_timer+0x3>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1e9e:	ec 01       	movw	r28, r24
    1ea0:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <motor_filter_value>
    1ea4:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <motor_filter_value+0x1>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatunsisf>
    1eb0:	21 e7       	ldi	r18, 0x71	; 113
    1eb2:	3d e3       	ldi	r19, 0x3D	; 61
    1eb4:	4a e8       	ldi	r20, 0x8A	; 138
    1eb6:	5e e3       	ldi	r21, 0x3E	; 62
    1eb8:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    1ebc:	6b 01       	movw	r12, r22
    1ebe:	7c 01       	movw	r14, r24
    1ec0:	be 01       	movw	r22, r28
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatunsisf>
    1eca:	9b 01       	movw	r18, r22
    1ecc:	ac 01       	movw	r20, r24
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	0e 94 3a 18 	call	0x3074	; 0x3074 <__addsf3>
    1ed6:	0e 94 1f 19 	call	0x323e	; 0x323e <__fixunssfsi>
    1eda:	70 93 d8 03 	sts	0x03D8, r23	; 0x8003d8 <accum_adc+0x1>
    1ede:	60 93 d7 03 	sts	0x03D7, r22	; 0x8003d7 <accum_adc>
    1ee2:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <iteration_adc_accum_table>
    1ee6:	e2 2f       	mov	r30, r18
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e3 55       	subi	r30, 0x53	; 83
    1ef0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef2:	71 83       	std	Z+1, r23	; 0x01
    1ef4:	60 83       	st	Z, r22
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	82 0f       	add	r24, r18
    1efa:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <iteration_adc_accum_table>
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1f04:	80 32       	cpi	r24, 0x20	; 32
    1f06:	91 05       	cpc	r25, r1
    1f08:	30 f0       	brcs	.+12     	; 0x1f16 <measure_process+0xdc>
    1f0a:	4f 97       	sbiw	r24, 0x1f	; 31
    1f0c:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <motor_adc+0x1>
    1f10:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <motor_adc>
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <measure_process+0xe4>
    1f16:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <motor_adc+0x1>
    1f1a:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <motor_adc>
    1f1e:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <iteration_adc_motor_table>
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	e4 57       	subi	r30, 0x74	; 116
    1f2a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f2c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <motor_adc>
    1f30:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <motor_adc+0x1>
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1f3e:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <calibration_value>
    1f42:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <calibration_value+0x1>
    1f46:	82 17       	cp	r24, r18
    1f48:	93 07       	cpc	r25, r19
    1f4a:	28 f4       	brcc	.+10     	; 0x1f56 <measure_process+0x11c>
    1f4c:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <s_o_t_adc+0x1>
    1f50:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <s_o_t_adc>
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <measure_process+0x128>
    1f56:	82 1b       	sub	r24, r18
    1f58:	93 0b       	sbc	r25, r19
    1f5a:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <s_o_t_adc+0x1>
    1f5e:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <s_o_t_adc>
    1f62:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <s_o_t_iteration_adc_table>
    1f66:	c0 91 71 03 	lds	r28, 0x0371	; 0x800371 <s_o_t_adc>
    1f6a:	d0 91 72 03 	lds	r29, 0x0372	; 0x800372 <s_o_t_adc+0x1>
    1f6e:	e8 2f       	mov	r30, r24
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	ec 58       	subi	r30, 0x8C	; 140
    1f78:	fc 4f       	sbci	r31, 0xFC	; 252
    1f7a:	c0 83       	st	Z, r28
    1f7c:	d1 83       	std	Z+1, r29	; 0x01
    1f7e:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <iteration_adc_motor_table>
    1f82:	9f 5f       	subi	r25, 0xFF	; 255
    1f84:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <iteration_adc_motor_table>
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <s_o_t_iteration_adc_table>
    1f8e:	64 e1       	ldi	r22, 0x14	; 20
    1f90:	8d ea       	ldi	r24, 0xAD	; 173
    1f92:	93 e0       	ldi	r25, 0x03	; 3
    1f94:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <filtered_value>
    1f98:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <filtered_accum_adc_val+0x1>
    1f9c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <filtered_accum_adc_val>
    1fa0:	6f e0       	ldi	r22, 0x0F	; 15
    1fa2:	8c e8       	ldi	r24, 0x8C	; 140
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
    1fa6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <filtered_value>
    1faa:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <motor_filter_value+0x1>
    1fae:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <motor_filter_value>
    1fb2:	6a e0       	ldi	r22, 0x0A	; 10
    1fb4:	84 e7       	ldi	r24, 0x74	; 116
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <filtered_value>
    1fbc:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <s_o_t_filter_value+0x1>
    1fc0:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <s_o_t_filter_value>
    1fc4:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <debug_msg_counter>
    1fc8:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <debug_msg_counter+0x1>
    1fcc:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <debug_msg_counter+0x2>
    1fd0:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <debug_msg_counter+0x3>
    1fd4:	20 e5       	ldi	r18, 0x50	; 80
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__udivmodsi4>
    1fe0:	67 2b       	or	r22, r23
    1fe2:	68 2b       	or	r22, r24
    1fe4:	69 2b       	or	r22, r25
    1fe6:	e1 f4       	brne	.+56     	; 0x2020 <measure_process+0x1e6>
    1fe8:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <motor_adc+0x1>
    1fec:	8f 93       	push	r24
    1fee:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <motor_adc>
    1ff2:	8f 93       	push	r24
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <accum_adc+0x1>
    1ffc:	8f 93       	push	r24
    1ffe:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <accum_adc>
    2002:	8f 93       	push	r24
    2004:	80 e5       	ldi	r24, 0x50	; 80
    2006:	92 e0       	ldi	r25, 0x02	; 2
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2010:	8d b7       	in	r24, 0x3d	; 61
    2012:	9e b7       	in	r25, 0x3e	; 62
    2014:	08 96       	adiw	r24, 0x08	; 8
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	9e bf       	out	0x3e, r25	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	8d bf       	out	0x3d, r24	; 61
    2020:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <debug_msg_counter>
    2024:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <debug_msg_counter+0x1>
    2028:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <debug_msg_counter+0x2>
    202c:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <debug_msg_counter+0x3>
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	a1 1d       	adc	r26, r1
    2034:	b1 1d       	adc	r27, r1
    2036:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <debug_msg_counter>
    203a:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <debug_msg_counter+0x1>
    203e:	a0 93 69 03 	sts	0x0369, r26	; 0x800369 <debug_msg_counter+0x2>
    2042:	b0 93 6a 03 	sts	0x036A, r27	; 0x80036a <debug_msg_counter+0x3>
    2046:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <iteration_adc_accum_table>
    204a:	84 31       	cpi	r24, 0x14	; 20
    204c:	11 f4       	brne	.+4      	; 0x2052 <measure_process+0x218>
    204e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <iteration_adc_accum_table>
    2052:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <s_o_t_iteration_adc_table>
    2056:	8a 30       	cpi	r24, 0x0A	; 10
    2058:	11 f4       	brne	.+4      	; 0x205e <measure_process+0x224>
    205a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_o_t_iteration_adc_table>
    205e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <iteration_adc_motor_table>
    2062:	8f 30       	cpi	r24, 0x0F	; 15
    2064:	11 f4       	brne	.+4      	; 0x206a <measure_process+0x230>
    2066:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <iteration_adc_motor_table>
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	08 95       	ret

00002078 <measure_get_servo_calibration>:
    2078:	cf 92       	push	r12
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	c0 90 9c 05 	lds	r12, 0x059C	; 0x80059c <mktime+0x2>
    2088:	d0 90 9d 05 	lds	r13, 0x059D	; 0x80059d <mktime+0x3>
    208c:	e0 90 9e 05 	lds	r14, 0x059E	; 0x80059e <mktime+0x4>
    2090:	f0 90 9f 05 	lds	r15, 0x059F	; 0x80059f <mktime+0x5>
    2094:	88 ee       	ldi	r24, 0xE8	; 232
    2096:	c8 0e       	add	r12, r24
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	d8 1e       	adc	r13, r24
    209c:	e1 1c       	adc	r14, r1
    209e:	f1 1c       	adc	r15, r1
    20a0:	ca e9       	ldi	r28, 0x9A	; 154
    20a2:	d5 e0       	ldi	r29, 0x05	; 5
    20a4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <measure_process>
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	ac 81       	ldd	r26, Y+4	; 0x04
    20ae:	bd 81       	ldd	r27, Y+5	; 0x05
    20b0:	c8 16       	cp	r12, r24
    20b2:	d9 06       	cpc	r13, r25
    20b4:	ea 06       	cpc	r14, r26
    20b6:	fb 06       	cpc	r15, r27
    20b8:	a8 f7       	brcc	.-22     	; 0x20a4 <measure_get_servo_calibration+0x2c>
    20ba:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <s_o_t_filter_value>
    20be:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <s_o_t_filter_value+0x1>
    20c2:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <calibration_value>
    20c6:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <calibration_value+0x1>
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	9f 93       	push	r25
    20d4:	8f 93       	push	r24
    20d6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	08 95       	ret

000020f0 <measure_get_filtered_value>:
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	18 f4       	brcc	.+6      	; 0x20fa <measure_get_filtered_value+0xa>
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	40 f0       	brcs	.+16     	; 0x2108 <measure_get_filtered_value+0x18>
    20f8:	0c c0       	rjmp	.+24     	; 0x2112 <measure_get_filtered_value+0x22>
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	79 f4       	brne	.+30     	; 0x211c <measure_get_filtered_value+0x2c>
    20fe:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <filtered_accum_adc_val>
    2102:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <filtered_accum_adc_val+0x1>
    2106:	08 95       	ret
    2108:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <motor_filter_value>
    210c:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <motor_filter_value+0x1>
    2110:	08 95       	ret
    2112:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <s_o_t_filter_value>
    2116:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <s_o_t_filter_value+0x1>
    211a:	08 95       	ret
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	08 95       	ret

00002122 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2122:	cf 92       	push	r12
    2124:	df 92       	push	r13
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	6a 01       	movw	r12, r20
    212c:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	18 f4       	brcc	.+6      	; 0x2138 <measure_get_current+0x16>
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	50 f0       	brcs	.+20     	; 0x214a <measure_get_current+0x28>
    2136:	10 c0       	rjmp	.+32     	; 0x2158 <measure_get_current+0x36>
    2138:	83 30       	cpi	r24, 0x03	; 3
    213a:	a9 f4       	brne	.+42     	; 0x2166 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    213c:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <filtered_accum_adc_val>
    2140:	70 91 d6 03 	lds	r23, 0x03D6	; 0x8003d6 <filtered_accum_adc_val+0x1>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2148:	11 c0       	rjmp	.+34     	; 0x216c <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    214a:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <motor_filter_value>
    214e:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <motor_filter_value+0x1>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2156:	0a c0       	rjmp	.+20     	; 0x216c <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    2158:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <s_o_t_filter_value>
    215c:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <s_o_t_filter_value+0x1>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2164:	03 c0       	rjmp	.+6      	; 0x216c <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    216c:	0e 94 4e 19 	call	0x329c	; 0x329c <__floatunsisf>
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5a e3       	ldi	r21, 0x3A	; 58
    2178:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 ea       	ldi	r20, 0xA0	; 160
    2182:	50 e4       	ldi	r21, 0x40	; 64
    2184:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    2188:	a7 01       	movw	r20, r14
    218a:	96 01       	movw	r18, r12
    218c:	0e 94 a6 18 	call	0x314c	; 0x314c <__divsf3>
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	08 95       	ret

0000219a <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	59 f0       	breq	.+22     	; 0x21c0 <mem_save_data+0x26>
    21aa:	28 f4       	brcc	.+10     	; 0x21b6 <mem_save_data+0x1c>
    21ac:	88 23       	and	r24, r24
    21ae:	91 f0       	breq	.+36     	; 0x21d4 <mem_save_data+0x3a>
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	19 f1       	breq	.+70     	; 0x21fa <mem_save_data+0x60>
    21b4:	30 c0       	rjmp	.+96     	; 0x2216 <mem_save_data+0x7c>
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	29 f1       	breq	.+74     	; 0x2204 <mem_save_data+0x6a>
    21ba:	84 30       	cpi	r24, 0x04	; 4
    21bc:	31 f0       	breq	.+12     	; 0x21ca <mem_save_data+0x30>
    21be:	2b c0       	rjmp	.+86     	; 0x2216 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    21c0:	22 e0       	ldi	r18, 0x02	; 2
    21c2:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    21c4:	84 e0       	ldi	r24, 0x04	; 4
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	21 c0       	rjmp	.+66     	; 0x220c <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    21ca:	23 e0       	ldi	r18, 0x03	; 3
    21cc:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    21ce:	88 e0       	ldi	r24, 0x08	; 8
    21d0:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    21d2:	1c c0       	rjmp	.+56     	; 0x220c <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    21d4:	68 94       	set
    21d6:	ee 24       	eor	r14, r14
    21d8:	e1 f8       	bld	r14, 1
    21da:	f1 2c       	mov	r15, r1
    21dc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    21de:	f8 01       	movw	r30, r16
    21e0:	61 91       	ld	r22, Z+
    21e2:	8f 01       	movw	r16, r30
    21e4:	8c 2f       	mov	r24, r28
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 cf 0b 	call	0x179e	; 0x179e <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    21ec:	cf 5f       	subi	r28, 0xFF	; 255
    21ee:	8c 2f       	mov	r24, r28
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	8e 15       	cp	r24, r14
    21f4:	9f 05       	cpc	r25, r15
    21f6:	9c f3       	brlt	.-26     	; 0x21de <mem_save_data+0x44>
    21f8:	0e c0       	rjmp	.+28     	; 0x2216 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    21fa:	22 e0       	ldi	r18, 0x02	; 2
    21fc:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	04 c0       	rjmp	.+8      	; 0x220c <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    2204:	22 e0       	ldi	r18, 0x02	; 2
    2206:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2208:	86 e0       	ldi	r24, 0x06	; 6
    220a:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    220c:	c8 2f       	mov	r28, r24
    220e:	79 01       	movw	r14, r18
    2210:	e8 0e       	add	r14, r24
    2212:	f9 1e       	adc	r15, r25
    2214:	e4 cf       	rjmp	.-56     	; 0x21de <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	08 95       	ret

00002222 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	59 f0       	breq	.+22     	; 0x2248 <mem_read_data+0x26>
    2232:	28 f4       	brcc	.+10     	; 0x223e <mem_read_data+0x1c>
    2234:	88 23       	and	r24, r24
    2236:	91 f0       	breq	.+36     	; 0x225c <mem_read_data+0x3a>
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	19 f1       	breq	.+70     	; 0x2282 <mem_read_data+0x60>
    223c:	30 c0       	rjmp	.+96     	; 0x229e <mem_read_data+0x7c>
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	29 f1       	breq	.+74     	; 0x228c <mem_read_data+0x6a>
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	31 f0       	breq	.+12     	; 0x2252 <mem_read_data+0x30>
    2246:	2b c0       	rjmp	.+86     	; 0x229e <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    2248:	22 e0       	ldi	r18, 0x02	; 2
    224a:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	21 c0       	rjmp	.+66     	; 0x2294 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    2252:	23 e0       	ldi	r18, 0x03	; 3
    2254:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2256:	88 e0       	ldi	r24, 0x08	; 8
    2258:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    225a:	1c c0       	rjmp	.+56     	; 0x2294 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    225c:	68 94       	set
    225e:	ee 24       	eor	r14, r14
    2260:	e1 f8       	bld	r14, 1
    2262:	f1 2c       	mov	r15, r1
    2264:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    2266:	8c 2f       	mov	r24, r28
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <EEPROM_read>
    226e:	f8 01       	movw	r30, r16
    2270:	81 93       	st	Z+, r24
    2272:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2274:	cf 5f       	subi	r28, 0xFF	; 255
    2276:	8c 2f       	mov	r24, r28
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	8e 15       	cp	r24, r14
    227c:	9f 05       	cpc	r25, r15
    227e:	9c f3       	brlt	.-26     	; 0x2266 <mem_read_data+0x44>
    2280:	0e c0       	rjmp	.+28     	; 0x229e <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    2282:	22 e0       	ldi	r18, 0x02	; 2
    2284:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    228c:	22 e0       	ldi	r18, 0x02	; 2
    228e:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2290:	86 e0       	ldi	r24, 0x06	; 6
    2292:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2294:	c8 2f       	mov	r28, r24
    2296:	79 01       	movw	r14, r18
    2298:	e8 0e       	add	r14, r24
    229a:	f9 1e       	adc	r15, r25
    229c:	e4 cf       	rjmp	.-56     	; 0x2266 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	08 95       	ret

000022aa <servo_set_pwm_val>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    22aa:	81 11       	cpse	r24, r1
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <servo_set_pwm_val+0xe>
    22ae:	8c e6       	ldi	r24, 0x6C	; 108
    22b0:	97 e0       	ldi	r25, 0x07	; 7
    22b2:	9b bd       	out	0x2b, r25	; 43
    22b4:	8a bd       	out	0x2a, r24	; 42
    22b6:	08 95       	ret
    22b8:	82 33       	cpi	r24, 0x32	; 50
    22ba:	90 f4       	brcc	.+36     	; 0x22e0 <servo_set_pwm_val+0x36>
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	22 27       	eor	r18, r18
    22c0:	33 27       	eor	r19, r19
    22c2:	28 1b       	sub	r18, r24
    22c4:	39 0b       	sbc	r19, r25
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	88 5f       	subi	r24, 0xF8	; 248
    22d8:	98 4f       	sbci	r25, 0xF8	; 248
    22da:	9b bd       	out	0x2b, r25	; 43
    22dc:	8a bd       	out	0x2a, r24	; 42
    22de:	08 95       	ret
    22e0:	84 36       	cpi	r24, 0x64	; 100
    22e2:	68 f4       	brcc	.+26     	; 0x22fe <servo_set_pwm_val+0x54>
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	c2 97       	sbiw	r24, 0x32	; 50
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	2a ea       	ldi	r18, 0xAA	; 170
    22f2:	35 e0       	ldi	r19, 0x05	; 5
    22f4:	a9 01       	movw	r20, r18
    22f6:	48 1b       	sub	r20, r24
    22f8:	59 0b       	sbc	r21, r25
    22fa:	5b bd       	out	0x2b, r21	; 43
    22fc:	4a bd       	out	0x2a, r20	; 42
    22fe:	08 95       	ret

00002300 <servo_error>:
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
    2306:	96 98       	cbi	0x12, 6	; 18
    2308:	85 e0       	ldi	r24, 0x05	; 5
    230a:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <servoD>
    230e:	08 95       	ret

00002310 <servo_init>:
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	2f e1       	ldi	r18, 0x1F	; 31
    2316:	3e e4       	ldi	r19, 0x4E	; 78
    2318:	37 bd       	out	0x27, r19	; 39
    231a:	26 bd       	out	0x26, r18	; 38
    231c:	81 b3       	in	r24, 0x11	; 17
    231e:	80 63       	ori	r24, 0x30	; 48
    2320:	81 bb       	out	0x11, r24	; 17
    2322:	19 bc       	out	0x29, r1	; 41
    2324:	18 bc       	out	0x28, r1	; 40
    2326:	1b bc       	out	0x2b, r1	; 43
    2328:	1a bc       	out	0x2a, r1	; 42
    232a:	8f b5       	in	r24, 0x2f	; 47
    232c:	82 60       	ori	r24, 0x02	; 2
    232e:	8f bd       	out	0x2f, r24	; 47
    2330:	8e b5       	in	r24, 0x2e	; 46
    2332:	88 61       	ori	r24, 0x18	; 24
    2334:	8e bd       	out	0x2e, r24	; 46
    2336:	8f b5       	in	r24, 0x2f	; 47
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8f bd       	out	0x2f, r24	; 47
    233c:	8e b5       	in	r24, 0x2e	; 46
    233e:	82 60       	ori	r24, 0x02	; 2
    2340:	8e bd       	out	0x2e, r24	; 46
    2342:	3b bd       	out	0x2b, r19	; 43
    2344:	2a bd       	out	0x2a, r18	; 42
    2346:	96 98       	cbi	0x12, 6	; 18
    2348:	cc e8       	ldi	r28, 0x8C	; 140
    234a:	d5 e0       	ldi	r29, 0x05	; 5
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	88 83       	st	Y, r24
    2350:	1b 82       	std	Y+3, r1	; 0x03
    2352:	80 e9       	ldi	r24, 0x90	; 144
    2354:	95 e0       	ldi	r25, 0x05	; 5
    2356:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <evTime_init>
    235a:	19 86       	std	Y+9, r1	; 0x09
    235c:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <try_count>
    2360:	86 ea       	ldi	r24, 0xA6	; 166
    2362:	92 e0       	ldi	r25, 0x02	; 2
    2364:	9f 93       	push	r25
    2366:	8f 93       	push	r24
    2368:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret

00002376 <servo_is_open>:
    2376:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <servoD>
    237a:	92 50       	subi	r25, 0x02	; 2
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	92 30       	cpi	r25, 0x02	; 2
    2382:	10 f0       	brcs	.+4      	; 0x2388 <servo_is_open+0x12>
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	c9 01       	movw	r24, r18
    238a:	08 95       	ret

0000238c <servo_delayed_open>:
    238c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <servoD>
    2390:	91 30       	cpi	r25, 0x01	; 1
    2392:	a1 f4       	brne	.+40     	; 0x23bc <servo_delayed_open+0x30>
    2394:	ec e8       	ldi	r30, 0x8C	; 140
    2396:	f5 e0       	ldi	r31, 0x05	; 5
    2398:	93 e0       	ldi	r25, 0x03	; 3
    239a:	90 83       	st	Z, r25
    239c:	83 83       	std	Z+3, r24	; 0x03
    239e:	1f 92       	push	r1
    23a0:	8f 93       	push	r24
    23a2:	83 eb       	ldi	r24, 0xB3	; 179
    23a4:	92 e0       	ldi	r25, 0x02	; 2
    23a6:	9f 93       	push	r25
    23a8:	8f 93       	push	r24
    23aa:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	08 95       	ret
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	08 95       	ret

000023c2 <servo_enable_try>:
    23c2:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <servoD>
    23c6:	9f ef       	ldi	r25, 0xFF	; 255
    23c8:	98 0f       	add	r25, r24
    23ca:	92 30       	cpi	r25, 0x02	; 2
    23cc:	28 f4       	brcc	.+10     	; 0x23d8 <servo_enable_try+0x16>
    23ce:	ec e8       	ldi	r30, 0x8C	; 140
    23d0:	f5 e0       	ldi	r31, 0x05	; 5
    23d2:	81 83       	std	Z+1, r24	; 0x01
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	80 83       	st	Z, r24
    23d8:	08 95       	ret

000023da <servo_get_try_cnt>:
    23da:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <servoD+0x9>
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	08 95       	ret

000023e2 <servo_close>:
    23e2:	0e 94 bb 11 	call	0x2376	; 0x2376 <servo_is_open>
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	c1 f0       	breq	.+48     	; 0x241a <servo_close+0x38>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
    23f0:	ec e8       	ldi	r30, 0x8C	; 140
    23f2:	f5 e0       	ldi	r31, 0x05	; 5
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	80 83       	st	Z, r24
    23f8:	13 82       	std	Z+3, r1	; 0x03
    23fa:	1f 92       	push	r1
    23fc:	1f 92       	push	r1
    23fe:	8a ec       	ldi	r24, 0xCA	; 202
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    240a:	96 98       	cbi	0x12, 6	; 18
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	08 95       	ret
    241a:	20 91 8c 05 	lds	r18, 0x058C	; 0x80058c <servoD>
    241e:	24 30       	cpi	r18, 0x04	; 4
    2420:	21 f4       	brne	.+8      	; 0x242a <servo_close+0x48>
    2422:	0e 94 16 12 	call	0x242c	; 0x242c <servo_exit_try>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	08 95       	ret

0000242c <servo_exit_try>:
    242c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <servoD+0x1>
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	29 f4       	brne	.+10     	; 0x243e <servo_exit_try+0x12>
    2434:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <servoD>
    2438:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <servo_close>
    243c:	09 c0       	rjmp	.+18     	; 0x2450 <servo_exit_try+0x24>
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	71 f4       	brne	.+28     	; 0x245e <servo_exit_try+0x32>
    2442:	ec e8       	ldi	r30, 0x8C	; 140
    2444:	f5 e0       	ldi	r31, 0x05	; 5
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	80 83       	st	Z, r24
    244a:	83 81       	ldd	r24, Z+3	; 0x03
    244c:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_open>
    2450:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <try_count>
    2454:	ec e8       	ldi	r30, 0x8C	; 140
    2456:	f5 e0       	ldi	r31, 0x05	; 5
    2458:	81 85       	ldd	r24, Z+9	; 0x09
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	81 87       	std	Z+9, r24	; 0x09
    245e:	08 95       	ret

00002460 <servo_open>:
    2460:	cf 93       	push	r28
    2462:	c8 2f       	mov	r28, r24
    2464:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <servoD>
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	98 0f       	add	r25, r24
    246c:	93 30       	cpi	r25, 0x03	; 3
    246e:	c0 f4       	brcc	.+48     	; 0x24a0 <servo_open+0x40>
    2470:	ec e8       	ldi	r30, 0x8C	; 140
    2472:	f5 e0       	ldi	r31, 0x05	; 5
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	80 83       	st	Z, r24
    2478:	c3 83       	std	Z+3, r28	; 0x03
    247a:	8c 2f       	mov	r24, r28
    247c:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
    2480:	1f 92       	push	r1
    2482:	cf 93       	push	r28
    2484:	8b ed       	ldi	r24, 0xDB	; 219
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	9f 93       	push	r25
    248a:	8f 93       	push	r24
    248c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2490:	96 9a       	sbi	0x12, 6	; 18
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <servo_open+0x52>
    24a0:	84 30       	cpi	r24, 0x04	; 4
    24a2:	29 f4       	brne	.+10     	; 0x24ae <servo_open+0x4e>
    24a4:	0e 94 16 12 	call	0x242c	; 0x242c <servo_exit_try>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <servo_open+0x52>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    24bc:	4b e4       	ldi	r20, 0x4B	; 75
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	89 ee       	ldi	r24, 0xE9	; 233
    24c6:	93 e0       	ldi	r25, 0x03	; 3
    24c8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <evTime_process_period>
    24cc:	89 2b       	or	r24, r25
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <servo_process+0x1c>
    24d0:	b6 c0       	rjmp	.+364    	; 0x263e <servo_process+0x188>
	{
		switch(servoD.state)
    24d2:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <servoD>
    24d6:	84 30       	cpi	r24, 0x04	; 4
    24d8:	a1 f0       	breq	.+40     	; 0x2502 <servo_process+0x4c>
    24da:	30 f4       	brcc	.+12     	; 0x24e8 <servo_process+0x32>
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	59 f0       	breq	.+22     	; 0x24f6 <servo_process+0x40>
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <servo_process+0x30>
    24e4:	61 c0       	rjmp	.+194    	; 0x25a8 <servo_process+0xf2>
    24e6:	9b c0       	rjmp	.+310    	; 0x261e <servo_process+0x168>
    24e8:	85 30       	cpi	r24, 0x05	; 5
    24ea:	09 f4       	brne	.+2      	; 0x24ee <servo_process+0x38>
    24ec:	77 c0       	rjmp	.+238    	; 0x25dc <servo_process+0x126>
    24ee:	86 30       	cpi	r24, 0x06	; 6
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <servo_process+0x3e>
    24f2:	91 c0       	rjmp	.+290    	; 0x2616 <servo_process+0x160>
    24f4:	94 c0       	rjmp	.+296    	; 0x261e <servo_process+0x168>
		{
			case SERVO_OPEN:
			servoD.value = value;
    24f6:	c0 93 8f 05 	sts	0x058F, r28	; 0x80058f <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    24fa:	8c 2f       	mov	r24, r28
    24fc:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
			break;
    2500:	8e c0       	rjmp	.+284    	; 0x261e <servo_process+0x168>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    2502:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <try_count>
    2506:	81 11       	cpse	r24, r1
    2508:	13 c0       	rjmp	.+38     	; 0x2530 <servo_process+0x7a>
	{
		evTime_start(&timeout, 100);
    250a:	44 e6       	ldi	r20, 0x64	; 100
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	84 ee       	ldi	r24, 0xE4	; 228
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
		try_count++;
    251a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <try_count>
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    2524:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <servoD+0x3>
    2528:	89 0f       	add	r24, r25
    252a:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
    252e:	28 c0       	rjmp	.+80     	; 0x2580 <servo_process+0xca>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    2530:	81 50       	subi	r24, 0x01	; 1
    2532:	89 30       	cpi	r24, 0x09	; 9
    2534:	c8 f4       	brcc	.+50     	; 0x2568 <servo_process+0xb2>
	{
		if (evTime_check(&timeout) == 1)
    2536:	84 ee       	ldi	r24, 0xE4	; 228
    2538:	93 e0       	ldi	r25, 0x03	; 3
    253a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f9 f4       	brne	.+62     	; 0x2580 <servo_process+0xca>
		{
			evTime_start(&timeout, 100);
    2542:	44 e6       	ldi	r20, 0x64	; 100
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	60 e0       	ldi	r22, 0x00	; 0
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	84 ee       	ldi	r24, 0xE4	; 228
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
			try_count++;
    2552:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <try_count>
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <try_count>
			servo_set_pwm_val(servoD.value + try_count);
    255c:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <servoD+0x3>
    2560:	89 0f       	add	r24, r25
    2562:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
    2566:	0c c0       	rjmp	.+24     	; 0x2580 <servo_process+0xca>
		}
	}
	else
	{
		try_count = 0;
    2568:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <try_count>
		servo_set_pwm_val(servoD.value);
    256c:	cc e8       	ldi	r28, 0x8C	; 140
    256e:	d5 e0       	ldi	r29, 0x05	; 5
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	0e 94 55 11 	call	0x22aa	; 0x22aa <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 83       	st	Y, r24
		servoD.try_cnt++;
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    2580:	20 91 8f 05 	lds	r18, 0x058F	; 0x80058f <servoD+0x3>
    2584:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <try_count>
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	82 0f       	add	r24, r18
    258c:	91 1d       	adc	r25, r1
    258e:	9f 93       	push	r25
    2590:	8f 93       	push	r24
    2592:	8d ee       	ldi	r24, 0xED	; 237
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	9f 93       	push	r25
    2598:	8f 93       	push	r24
    259a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	3b c0       	rjmp	.+118    	; 0x261e <servo_process+0x168>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    25a8:	8f ed       	ldi	r24, 0xDF	; 223
    25aa:	93 e0       	ldi	r25, 0x03	; 3
    25ac:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <evTime_is_stated>
    25b0:	89 2b       	or	r24, r25
    25b2:	59 f0       	breq	.+22     	; 0x25ca <servo_process+0x114>
	{
		if (evTime_check(&timeout) == 1)
    25b4:	8f ed       	ldi	r24, 0xDF	; 223
    25b6:	93 e0       	ldi	r25, 0x03	; 3
    25b8:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	79 f5       	brne	.+94     	; 0x261e <servo_process+0x168>
		{
			servoD.state = SERVO_OPEN;
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <servoD>
			LED_SERVO_ON;
    25c6:	96 9a       	sbi	0x12, 6	; 18
    25c8:	2a c0       	rjmp	.+84     	; 0x261e <servo_process+0x168>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    25ca:	40 ed       	ldi	r20, 0xD0	; 208
    25cc:	57 e0       	ldi	r21, 0x07	; 7
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	8f ed       	ldi	r24, 0xDF	; 223
    25d4:	93 e0       	ldi	r25, 0x03	; 3
    25d6:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
    25da:	21 c0       	rjmp	.+66     	; 0x261e <servo_process+0x168>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    25dc:	8a ed       	ldi	r24, 0xDA	; 218
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <evTime_is_stated>
    25e4:	89 2b       	or	r24, r25
    25e6:	71 f0       	breq	.+28     	; 0x2604 <servo_process+0x14e>
	{
		if (evTime_check(&timeout) == 1)
    25e8:	8a ed       	ldi	r24, 0xDA	; 218
    25ea:	93 e0       	ldi	r25, 0x03	; 3
    25ec:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	a9 f4       	brne	.+42     	; 0x261e <servo_process+0x168>
		{
			servoD.state = SERVO_ERROR;
    25f4:	86 e0       	ldi	r24, 0x06	; 6
    25f6:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    25fa:	8f e1       	ldi	r24, 0x1F	; 31
    25fc:	9e e4       	ldi	r25, 0x4E	; 78
    25fe:	9b bd       	out	0x2b, r25	; 43
    2600:	8a bd       	out	0x2a, r24	; 42
    2602:	0d c0       	rjmp	.+26     	; 0x261e <servo_process+0x168>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2604:	40 ed       	ldi	r20, 0xD0	; 208
    2606:	57 e0       	ldi	r21, 0x07	; 7
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	8a ed       	ldi	r24, 0xDA	; 218
    260e:	93 e0       	ldi	r25, 0x03	; 3
    2610:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
    2614:	04 c0       	rjmp	.+8      	; 0x261e <servo_process+0x168>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2616:	8f e1       	ldi	r24, 0x1F	; 31
    2618:	9e e4       	ldi	r25, 0x4E	; 78
    261a:	9b bd       	out	0x2b, r25	; 43
    261c:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    261e:	80 e9       	ldi	r24, 0x90	; 144
    2620:	95 e0       	ldi	r25, 0x05	; 5
    2622:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	51 f4       	brne	.+20     	; 0x263e <servo_process+0x188>
		{
			servoD.try_cnt = 0;
    262a:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    262e:	8b ef       	ldi	r24, 0xFB	; 251
    2630:	92 e0       	ldi	r25, 0x02	; 2
    2632:	9f 93       	push	r25
    2634:	8f 93       	push	r24
    2636:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
		}
	}
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2644:	e4 e3       	ldi	r30, 0x34	; 52
    2646:	f5 e0       	ldi	r31, 0x05	; 5
    2648:	16 86       	std	Z+14, r1	; 0x0e
    264a:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    264c:	12 86       	std	Z+10, r1	; 0x0a
    264e:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    2650:	14 86       	std	Z+12, r1	; 0x0c
    2652:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2654:	e7 e0       	ldi	r30, 0x07	; 7
    2656:	f5 e0       	ldi	r31, 0x05	; 5
    2658:	16 86       	std	Z+14, r1	; 0x0e
    265a:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    265c:	12 86       	std	Z+10, r1	; 0x0a
    265e:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    2660:	14 86       	std	Z+12, r1	; 0x0c
    2662:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2664:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <button3+0xc>
    2668:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <button3+0xb>
	
	button5.timer_callback = 0;
    266c:	e5 ee       	ldi	r30, 0xE5	; 229
    266e:	f4 e0       	ldi	r31, 0x04	; 4
    2670:	16 86       	std	Z+14, r1	; 0x0e
    2672:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2674:	14 86       	std	Z+12, r1	; 0x0c
    2676:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2678:	12 86       	std	Z+10, r1	; 0x0a
    267a:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    267c:	e5 e2       	ldi	r30, 0x25	; 37
    267e:	f5 e0       	ldi	r31, 0x05	; 5
    2680:	16 86       	std	Z+14, r1	; 0x0e
    2682:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2684:	14 86       	std	Z+12, r1	; 0x0c
    2686:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2688:	12 86       	std	Z+10, r1	; 0x0a
    268a:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    268c:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <button7+0xc>
    2690:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <button7+0xb>
	
	button8.fall_callback = 0;
    2694:	e2 e5       	ldi	r30, 0x52	; 82
    2696:	f5 e0       	ldi	r31, 0x05	; 5
    2698:	14 86       	std	Z+12, r1	; 0x0c
    269a:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    269c:	16 86       	std	Z+14, r1	; 0x0e
    269e:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    26a0:	12 86       	std	Z+10, r1	; 0x0a
    26a2:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    26a4:	e7 ec       	ldi	r30, 0xC7	; 199
    26a6:	f4 e0       	ldi	r31, 0x04	; 4
    26a8:	14 86       	std	Z+12, r1	; 0x0c
    26aa:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    26ac:	16 86       	std	Z+14, r1	; 0x0e
    26ae:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    26b0:	12 86       	std	Z+10, r1	; 0x0a
    26b2:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    26b4:	e6 ed       	ldi	r30, 0xD6	; 214
    26b6:	f4 e0       	ldi	r31, 0x04	; 4
    26b8:	14 86       	std	Z+12, r1	; 0x0c
    26ba:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    26bc:	16 86       	std	Z+14, r1	; 0x0e
    26be:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    26c0:	12 86       	std	Z+10, r1	; 0x0a
    26c2:	11 86       	std	Z+9, r1	; 0x09
    26c4:	08 95       	ret

000026c6 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    26c6:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	49 f0       	breq	.+18     	; 0x26e0 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    26ce:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    26d2:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    26d6:	98 60       	ori	r25, 0x08	; 8
    26d8:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    26dc:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    26e0:	08 95       	ret

000026e2 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    26e2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	49 f0       	breq	.+18     	; 0x26fc <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    26ea:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    26ee:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    26f2:	80 68       	ori	r24, 0x80	; 128
    26f4:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    26f8:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    26fc:	08 95       	ret

000026fe <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    26fe:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2702:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2706:	92 60       	ori	r25, 0x02	; 2
    2708:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    270c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    2710:	08 95       	ret

00002712 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2712:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2716:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    271a:	99 7f       	andi	r25, 0xF9	; 249
    271c:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2720:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	counter_very_fast_motor_sub = 0;
    2724:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <counter_very_fast_motor_sub>
    2728:	08 95       	ret

0000272a <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    272a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    272e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2732:	80 62       	ori	r24, 0x20	; 32
    2734:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2738:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    273c:	08 95       	ret

0000273e <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    273e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2742:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2746:	8f 79       	andi	r24, 0x9F	; 159
    2748:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    274c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	counter_very_fast_motor_sub = 0;
    2750:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <counter_very_fast_motor_sub>
    2754:	08 95       	ret

00002756 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2756:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    275a:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    275e:	90 62       	ori	r25, 0x20	; 32
    2760:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2764:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2768:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    276c:	8b 30       	cpi	r24, 0x0B	; 11
    276e:	18 f0       	brcs	.+6      	; 0x2776 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    2770:	81 50       	subi	r24, 0x01	; 1
    2772:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2776:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2780:	61 e0       	ldi	r22, 0x01	; 1
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    2788:	08 95       	ret

0000278a <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    278a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    278e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2792:	90 62       	ori	r25, 0x20	; 32
    2794:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2798:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    279c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    27a0:	83 36       	cpi	r24, 0x63	; 99
    27a2:	18 f4       	brcc	.+6      	; 0x27aa <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    27aa:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    27b4:	61 e0       	ldi	r22, 0x01	; 1
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    27bc:	08 95       	ret

000027be <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    27be:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    27c2:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    27c6:	90 62       	ori	r25, 0x20	; 32
    27c8:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    27cc:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	if (motor_value > 10)
    27d0:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motor_value>
    27d4:	8b 30       	cpi	r24, 0x0B	; 11
    27d6:	18 f0       	brcs	.+6      	; 0x27de <button_motor_sub_fall_cb+0x20>
		motor_value--;
    27d8:	81 50       	subi	r24, 0x01	; 1
    27da:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    27de:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 8a 09 	call	0x1314	; 0x1314 <disp_get_state>
    27ee:	02 97       	sbiw	r24, 0x02	; 2
    27f0:	29 f4       	brne	.+10     	; 0x27fc <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
	state_measure_volt++;
    2804:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <state_measure_volt>
	if (state_measure_volt == 2)
    280e:	82 30       	cpi	r24, 0x02	; 2
    2810:	19 f4       	brne	.+6      	; 0x2818 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2812:	66 e0       	ldi	r22, 0x06	; 6
    2814:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    2818:	08 95       	ret

0000281a <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    281a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    281e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2822:	90 62       	ori	r25, 0x20	; 32
    2824:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2828:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	if (motor_value < 99)
    282c:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motor_value>
    2830:	83 36       	cpi	r24, 0x63	; 99
    2832:	18 f4       	brcc	.+6      	; 0x283a <button_motor_add_fall_cb+0x20>
		motor_value++;
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    283a:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	0e 94 8a 09 	call	0x1314	; 0x1314 <disp_get_state>
    284a:	02 97       	sbiw	r24, 0x02	; 2
    284c:	29 f4       	brne	.+10     	; 0x2858 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
	state_measure_volt++;
    2860:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <state_measure_volt>
	if (state_measure_volt == 2)
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	19 f4       	brne	.+6      	; 0x2874 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    286e:	66 e0       	ldi	r22, 0x06	; 6
    2870:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    2874:	08 95       	ret

00002876 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2876:	0e 94 9a 09 	call	0x1334	; 0x1334 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    287a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    287e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2882:	97 7e       	andi	r25, 0xE7	; 231
    2884:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2888:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	counter_very_fast_motor_sub = 0;
    288c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2890:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    2894:	88 23       	and	r24, r24
    2896:	19 f0       	breq	.+6      	; 0x289e <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	0e 94 8a 09 	call	0x1314	; 0x1314 <disp_get_state>
    28a4:	02 97       	sbiw	r24, 0x02	; 2
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    28b0:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28b2:	61 e0       	ldi	r22, 0x01	; 1
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    28ba:	08 95       	ret

000028bc <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    28bc:	0e 94 9a 09 	call	0x1334	; 0x1334 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    28c0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    28c4:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    28c8:	8f 77       	andi	r24, 0x7F	; 127
    28ca:	9e 7f       	andi	r25, 0xFE	; 254
    28cc:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    28d0:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	counter_very_fast_motor_sub = 0;
    28d4:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    28d8:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <state_measure_volt>
    28dc:	88 23       	and	r24, r24
    28de:	19 f0       	breq	.+6      	; 0x28e6 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	0e 94 8a 09 	call	0x1314	; 0x1314 <disp_get_state>
    28ec:	02 97       	sbiw	r24, 0x02	; 2
    28ee:	29 f4       	brne	.+10     	; 0x28fa <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    28f8:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
    2902:	08 95       	ret

00002904 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2904:	e8 e9       	ldi	r30, 0x98	; 152
    2906:	f5 e0       	ldi	r31, 0x05	; 5
    2908:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motor_value>
    290c:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    290e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    2912:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2914:	bf 01       	movw	r22, r30
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	0e 94 cd 10 	call	0x219a	; 0x219a <mem_save_data>
    291c:	08 95       	ret

0000291e <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    291e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2922:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2926:	90 62       	ori	r25, 0x20	; 32
    2928:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    292c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	if (motor_value < 10)
    2930:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motor_value>
    2934:	8a 30       	cpi	r24, 0x0A	; 10
    2936:	38 f4       	brcc	.+14     	; 0x2946 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2938:	8a e0       	ldi	r24, 0x0A	; 10
    293a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    293e:	6a e0       	ldi	r22, 0x0A	; 10
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	}
	sys_save_display();
    2946:	0e 94 82 14 	call	0x2904	; 0x2904 <sys_save_display>
	if(!dcmotor_is_on())
    294a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <dcmotor_is_on>
    294e:	89 2b       	or	r24, r25
    2950:	39 f4       	brne	.+14     	; 0x2960 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2952:	0e 94 50 07 	call	0xea0	; 0xea0 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2956:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    295a:	0e 94 c6 11 	call	0x238c	; 0x238c <servo_delayed_open>
    295e:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2960:	0e 94 38 07 	call	0xe70	; 0xe70 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2964:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <servo_close>
    2968:	08 95       	ret

0000296a <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    296a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    296e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2972:	90 62       	ori	r25, 0x20	; 32
    2974:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2978:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
	if (servo_vibro_value < 10)
    297c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    2980:	8a 30       	cpi	r24, 0x0A	; 10
    2982:	38 f4       	brcc	.+14     	; 0x2992 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2984:	8a e0       	ldi	r24, 0x0A	; 10
    2986:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    298a:	6a e0       	ldi	r22, 0x0A	; 10
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2992:	0e 94 bb 11 	call	0x2376	; 0x2376 <servo_is_open>
    2996:	89 2b       	or	r24, r25
    2998:	19 f0       	breq	.+6      	; 0x29a0 <button_on_off_pwm+0x36>
    299a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <servo_close>
    299e:	08 95       	ret
	else servo_open(servo_vibro_value);
    29a0:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <servo_vibro_value>
    29a4:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_open>
    29a8:	08 95       	ret

000029aa <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    29aa:	8a e7       	ldi	r24, 0x7A	; 122
    29ac:	95 e1       	ldi	r25, 0x15	; 21
    29ae:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <button4+0xa>
    29b2:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    29be:	66 e9       	ldi	r22, 0x96	; 150
    29c0:	75 e0       	ldi	r23, 0x05	; 5
    29c2:	83 e0       	ldi	r24, 0x03	; 3
    29c4:	0e 94 11 11 	call	0x2222	; 0x2222 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    29c8:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <mem_last_save+0x1>
    29cc:	96 ef       	ldi	r25, 0xF6	; 246
    29ce:	98 0f       	add	r25, r24
    29d0:	9a 35       	cpi	r25, 0x5A	; 90
    29d2:	10 f4       	brcc	.+4      	; 0x29d8 <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    29d4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    29d8:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <mem_last_save>
    29dc:	96 ef       	ldi	r25, 0xF6	; 246
    29de:	98 0f       	add	r25, r24
    29e0:	9a 35       	cpi	r25, 0x5A	; 90
    29e2:	10 f4       	brcc	.+4      	; 0x29e8 <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    29e4:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motor_value>
    29e8:	08 95       	ret

000029ea <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    29ea:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    29ee:	42 e0       	ldi	r20, 0x02	; 2
    29f0:	68 ee       	ldi	r22, 0xE8	; 232
    29f2:	73 e0       	ldi	r23, 0x03	; 3
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 2e 0b 	call	0x165c	; 0x165c <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    29fc:	0e 94 13 07 	call	0xe26	; 0xe26 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	0e 94 88 11 	call	0x2310	; 0x2310 <servo_init>
	#endif
	error_init();
    2a06:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <error_init>
	init_measure();
    2a0a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <init_measure>
	init_buzzer();
    2a0e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2a1a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2a1e:	e4 e3       	ldi	r30, 0x34	; 52
    2a20:	f5 e0       	ldi	r31, 0x05	; 5
    2a22:	83 e6       	ldi	r24, 0x63	; 99
    2a24:	93 e1       	ldi	r25, 0x13	; 19
    2a26:	96 87       	std	Z+14, r25	; 0x0e
    2a28:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2a2a:	8f ed       	ldi	r24, 0xDF	; 223
    2a2c:	93 e1       	ldi	r25, 0x13	; 19
    2a2e:	94 87       	std	Z+12, r25	; 0x0c
    2a30:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2a32:	8b e3       	ldi	r24, 0x3B	; 59
    2a34:	94 e1       	ldi	r25, 0x14	; 20
    2a36:	92 87       	std	Z+10, r25	; 0x0a
    2a38:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2a3a:	e7 e0       	ldi	r30, 0x07	; 7
    2a3c:	f5 e0       	ldi	r31, 0x05	; 5
    2a3e:	81 e7       	ldi	r24, 0x71	; 113
    2a40:	93 e1       	ldi	r25, 0x13	; 19
    2a42:	96 87       	std	Z+14, r25	; 0x0e
    2a44:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2a46:	8d e0       	ldi	r24, 0x0D	; 13
    2a48:	94 e1       	ldi	r25, 0x14	; 20
    2a4a:	94 87       	std	Z+12, r25	; 0x0c
    2a4c:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2a4e:	8e e5       	ldi	r24, 0x5E	; 94
    2a50:	94 e1       	ldi	r25, 0x14	; 20
    2a52:	92 87       	std	Z+10, r25	; 0x0a
    2a54:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2a56:	8f e8       	ldi	r24, 0x8F	; 143
    2a58:	94 e1       	ldi	r25, 0x14	; 20
    2a5a:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <button3+0xc>
    2a5e:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2a62:	e5 ee       	ldi	r30, 0xE5	; 229
    2a64:	f4 e0       	ldi	r31, 0x04	; 4
    2a66:	8f e7       	ldi	r24, 0x7F	; 127
    2a68:	93 e1       	ldi	r25, 0x13	; 19
    2a6a:	96 87       	std	Z+14, r25	; 0x0e
    2a6c:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2a6e:	89 e8       	ldi	r24, 0x89	; 137
    2a70:	93 e1       	ldi	r25, 0x13	; 19
    2a72:	92 87       	std	Z+10, r25	; 0x0a
    2a74:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2a76:	8b ea       	ldi	r24, 0xAB	; 171
    2a78:	93 e1       	ldi	r25, 0x13	; 19
    2a7a:	94 87       	std	Z+12, r25	; 0x0c
    2a7c:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2a7e:	e5 e2       	ldi	r30, 0x25	; 37
    2a80:	f5 e0       	ldi	r31, 0x05	; 5
    2a82:	85 e9       	ldi	r24, 0x95	; 149
    2a84:	93 e1       	ldi	r25, 0x13	; 19
    2a86:	96 87       	std	Z+14, r25	; 0x0e
    2a88:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2a8a:	8f e9       	ldi	r24, 0x9F	; 159
    2a8c:	93 e1       	ldi	r25, 0x13	; 19
    2a8e:	92 87       	std	Z+10, r25	; 0x0a
    2a90:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2a92:	85 ec       	ldi	r24, 0xC5	; 197
    2a94:	93 e1       	ldi	r25, 0x13	; 19
    2a96:	94 87       	std	Z+12, r25	; 0x0c
    2a98:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2a9a:	85 eb       	ldi	r24, 0xB5	; 181
    2a9c:	94 e1       	ldi	r25, 0x14	; 20
    2a9e:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <button7+0xc>
    2aa2:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2aa6:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2ab0:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
    2aba:	08 95       	ret

00002abc <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2abc:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <state_measure_volt>
	dcmotorpwm_deinit();
    2ac0:	0e 94 27 07 	call	0xe4e	; 0xe4e <dcmotorpwm_deinit>
	off_button();
    2ac4:	0e 94 22 13 	call	0x2644	; 0x2644 <off_button>
	error_deinit();
    2ac8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2acc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2ad0:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <system_events+0x1>
    2ad4:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	0e 94 ab 09 	call	0x1356	; 0x1356 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2ae0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2ae4:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2ae8:	8e 7f       	andi	r24, 0xFE	; 254
    2aea:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2aee:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    2af2:	08 95       	ret

00002af4 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2af4:	0e 94 82 14 	call	0x2904	; 0x2904 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2af8:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2afc:	80 ff       	sbrs	r24, 0
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <button4_toggle_system+0x12>
	{
		off_system();
    2b00:	0e 94 5e 15 	call	0x2abc	; 0x2abc <off_system>
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2b06:	0e 94 f5 14 	call	0x29ea	; 0x29ea <on_system>
	}
	ON_BUZZ_SIGNAL;
    2b0a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2b0e:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2b12:	90 62       	ori	r25, 0x20	; 32
    2b14:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2b18:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
    2b1c:	08 95       	ret

00002b1e <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2b1e:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    2b22:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    2b26:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    2b2a:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    2b2e:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <disp_fast_timer.2079>
    2b32:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <disp_fast_timer.2079+0x1>
    2b36:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <disp_fast_timer.2079+0x2>
    2b3a:	b0 91 f2 03 	lds	r27, 0x03F2	; 0x8003f2 <disp_fast_timer.2079+0x3>
    2b3e:	84 17       	cp	r24, r20
    2b40:	95 07       	cpc	r25, r21
    2b42:	a6 07       	cpc	r26, r22
    2b44:	b7 07       	cpc	r27, r23
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <disp_fast_process+0x2c>
    2b48:	9c c0       	rjmp	.+312    	; 0x2c82 <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2b4a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2b4e:	85 ff       	sbrs	r24, 5
    2b50:	1d c0       	rjmp	.+58     	; 0x2b8c <disp_fast_process+0x6e>
    2b52:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    2b56:	63 36       	cpi	r22, 0x63	; 99
    2b58:	c8 f4       	brcc	.+50     	; 0x2b8c <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2b5a:	6f 5f       	subi	r22, 0xFF	; 255
    2b5c:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <servo_vibro_value>
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2b66:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <counter_very_fast_servo_add>
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2b70:	8f 30       	cpi	r24, 0x0F	; 15
    2b72:	60 f0       	brcs	.+24     	; 0x2b8c <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2b74:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2b78:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2b7c:	8f 7d       	andi	r24, 0xDF	; 223
    2b7e:	80 64       	ori	r24, 0x40	; 64
    2b80:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2b84:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
				counter_very_fast_servo_add = 0;
    2b88:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2b8c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2b90:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2b94:	91 ff       	sbrs	r25, 1
    2b96:	1d c0       	rjmp	.+58     	; 0x2bd2 <disp_fast_process+0xb4>
    2b98:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    2b9c:	66 23       	and	r22, r22
    2b9e:	c9 f0       	breq	.+50     	; 0x2bd2 <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2ba0:	61 50       	subi	r22, 0x01	; 1
    2ba2:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <servo_vibro_value>
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    2bac:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <counter_very_fast_servo_sub>
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2bb6:	8f 30       	cpi	r24, 0x0F	; 15
    2bb8:	60 f0       	brcs	.+24     	; 0x2bd2 <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2bba:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2bbe:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2bc2:	9d 7f       	andi	r25, 0xFD	; 253
    2bc4:	94 60       	ori	r25, 0x04	; 4
    2bc6:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2bca:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
				counter_very_fast_servo_sub = 0;
    2bce:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2bd2:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2bd6:	87 ff       	sbrs	r24, 7
    2bd8:	1d c0       	rjmp	.+58     	; 0x2c14 <disp_fast_process+0xf6>
    2bda:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    2bde:	63 36       	cpi	r22, 0x63	; 99
    2be0:	c8 f4       	brcc	.+50     	; 0x2c14 <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2be2:	6f 5f       	subi	r22, 0xFF	; 255
    2be4:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <motor_value>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			counter_very_fast_motor_add++;
    2bee:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <counter_very_fast_motor_add>
    2bf2:	8f 5f       	subi	r24, 0xFF	; 255
    2bf4:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2bf8:	8f 30       	cpi	r24, 0x0F	; 15
    2bfa:	60 f0       	brcs	.+24     	; 0x2c14 <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2bfc:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2c00:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2c04:	8f 77       	andi	r24, 0x7F	; 127
    2c06:	91 60       	ori	r25, 0x01	; 1
    2c08:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2c0c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
				counter_very_fast_motor_add = 0;
    2c10:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2c14:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2c18:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2c1c:	93 ff       	sbrs	r25, 3
    2c1e:	1d c0       	rjmp	.+58     	; 0x2c5a <disp_fast_process+0x13c>
    2c20:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    2c24:	6b 30       	cpi	r22, 0x0B	; 11
    2c26:	c8 f0       	brcs	.+50     	; 0x2c5a <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2c28:	61 50       	subi	r22, 0x01	; 1
    2c2a:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <motor_value>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			counter_very_fast_motor_sub++;
    2c34:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <counter_very_fast_motor_sub>
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2c3e:	8f 30       	cpi	r24, 0x0F	; 15
    2c40:	60 f0       	brcs	.+24     	; 0x2c5a <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2c42:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2c46:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2c4a:	97 7f       	andi	r25, 0xF7	; 247
    2c4c:	90 61       	ori	r25, 0x10	; 16
    2c4e:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <system_events+0x1>
    2c52:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <system_events>
				counter_very_fast_motor_sub = 0;
    2c56:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2c5a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <disp_fast_timer.2079>
    2c5e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <disp_fast_timer.2079+0x1>
    2c62:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <disp_fast_timer.2079+0x2>
    2c66:	b0 91 f2 03 	lds	r27, 0x03F2	; 0x8003f2 <disp_fast_timer.2079+0x3>
    2c6a:	80 5b       	subi	r24, 0xB0	; 176
    2c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6e:	af 4f       	sbci	r26, 0xFF	; 255
    2c70:	bf 4f       	sbci	r27, 0xFF	; 255
    2c72:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <disp_fast_timer.2079>
    2c76:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <disp_fast_timer.2079+0x1>
    2c7a:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <disp_fast_timer.2079+0x2>
    2c7e:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <disp_fast_timer.2079+0x3>
    2c82:	08 95       	ret

00002c84 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2c84:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <mktime+0x2>
    2c88:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <mktime+0x3>
    2c8c:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <mktime+0x4>
    2c90:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <mktime+0x5>
    2c94:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <disp_very_fast_timer>
    2c98:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <disp_very_fast_timer+0x1>
    2c9c:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <disp_very_fast_timer+0x2>
    2ca0:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <disp_very_fast_timer+0x3>
    2ca4:	84 17       	cp	r24, r20
    2ca6:	95 07       	cpc	r25, r21
    2ca8:	a6 07       	cpc	r26, r22
    2caa:	b7 07       	cpc	r27, r23
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <disp_very_fast_process+0x2c>
    2cae:	51 c0       	rjmp	.+162    	; 0x2d52 <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2cb0:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    2cb4:	63 36       	cpi	r22, 0x63	; 99
    2cb6:	50 f4       	brcc	.+20     	; 0x2ccc <disp_very_fast_process+0x48>
    2cb8:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2cbc:	86 ff       	sbrs	r24, 6
    2cbe:	06 c0       	rjmp	.+12     	; 0x2ccc <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2cc0:	6f 5f       	subi	r22, 0xFF	; 255
    2cc2:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <servo_vibro_value>
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2ccc:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <servo_vibro_value>
    2cd0:	66 23       	and	r22, r22
    2cd2:	61 f0       	breq	.+24     	; 0x2cec <disp_very_fast_process+0x68>
    2cd4:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2cd8:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2cdc:	92 ff       	sbrs	r25, 2
    2cde:	06 c0       	rjmp	.+12     	; 0x2cec <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2ce0:	61 50       	subi	r22, 0x01	; 1
    2ce2:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <servo_vibro_value>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2cec:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    2cf0:	63 36       	cpi	r22, 0x63	; 99
    2cf2:	60 f4       	brcc	.+24     	; 0x2d0c <disp_very_fast_process+0x88>
    2cf4:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2cf8:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2cfc:	90 ff       	sbrs	r25, 0
    2cfe:	06 c0       	rjmp	.+12     	; 0x2d0c <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2d00:	6f 5f       	subi	r22, 0xFF	; 255
    2d02:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <motor_value>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2d0c:	60 91 85 04 	lds	r22, 0x0485	; 0x800485 <motor_value>
    2d10:	6b 30       	cpi	r22, 0x0B	; 11
    2d12:	60 f0       	brcs	.+24     	; 0x2d2c <disp_very_fast_process+0xa8>
    2d14:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <system_events>
    2d18:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <system_events+0x1>
    2d1c:	94 ff       	sbrs	r25, 4
    2d1e:	06 c0       	rjmp	.+12     	; 0x2d2c <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2d20:	61 50       	subi	r22, 0x01	; 1
    2d22:	60 93 85 04 	sts	0x0485, r22	; 0x800485 <motor_value>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	0e 94 79 09 	call	0x12f2	; 0x12f2 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2d2c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <disp_very_fast_timer>
    2d30:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <disp_very_fast_timer+0x1>
    2d34:	a0 91 f5 03 	lds	r26, 0x03F5	; 0x8003f5 <disp_very_fast_timer+0x2>
    2d38:	b0 91 f6 03 	lds	r27, 0x03F6	; 0x8003f6 <disp_very_fast_timer+0x3>
    2d3c:	4e 96       	adiw	r24, 0x1e	; 30
    2d3e:	a1 1d       	adc	r26, r1
    2d40:	b1 1d       	adc	r27, r1
    2d42:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <disp_very_fast_timer>
    2d46:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <disp_very_fast_timer+0x1>
    2d4a:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <disp_very_fast_timer+0x2>
    2d4e:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <disp_very_fast_timer+0x3>
    2d52:	08 95       	ret

00002d54 <system_error>:
}


void system_error(void)
{
	off_button();
    2d54:	0e 94 22 13 	call	0x2644	; 0x2644 <off_button>
    2d58:	08 95       	ret

00002d5a <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2d5a:	1f 92       	push	r1
    2d5c:	0f 92       	push	r0
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	0f 92       	push	r0
    2d62:	11 24       	eor	r1, r1
    2d64:	2f 93       	push	r18
    2d66:	3f 93       	push	r19
    2d68:	4f 93       	push	r20
    2d6a:	5f 93       	push	r21
    2d6c:	6f 93       	push	r22
    2d6e:	7f 93       	push	r23
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	af 93       	push	r26
    2d76:	bf 93       	push	r27
    2d78:	ef 93       	push	r30
    2d7a:	ff 93       	push	r31
    2d7c:	ea e9       	ldi	r30, 0x9A	; 154
    2d7e:	f5 e0       	ldi	r31, 0x05	; 5
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	c2 96       	adiw	r24, 0x32	; 50
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	88 3e       	cpi	r24, 0xE8	; 232
    2d90:	93 40       	sbci	r25, 0x03	; 3
    2d92:	88 f0       	brcs	.+34     	; 0x2db6 <__vector_10+0x5c>
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	a4 81       	ldd	r26, Z+4	; 0x04
    2d9a:	b5 81       	ldd	r27, Z+5	; 0x05
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	a1 1d       	adc	r26, r1
    2da0:	b1 1d       	adc	r27, r1
    2da2:	82 83       	std	Z+2, r24	; 0x02
    2da4:	93 83       	std	Z+3, r25	; 0x03
    2da6:	a4 83       	std	Z+4, r26	; 0x04
    2da8:	b5 83       	std	Z+5, r27	; 0x05
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	88 5e       	subi	r24, 0xE8	; 232
    2db0:	93 40       	sbci	r25, 0x03	; 3
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	8c ef       	ldi	r24, 0xFC	; 252
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	0e 94 09 09 	call	0x1212	; 0x1212 <display_process>
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	bf 91       	pop	r27
    2dc4:	af 91       	pop	r26
    2dc6:	9f 91       	pop	r25
    2dc8:	8f 91       	pop	r24
    2dca:	7f 91       	pop	r23
    2dcc:	6f 91       	pop	r22
    2dce:	5f 91       	pop	r21
    2dd0:	4f 91       	pop	r20
    2dd2:	3f 91       	pop	r19
    2dd4:	2f 91       	pop	r18
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <timer0_init>:
    2de0:	93 b7       	in	r25, 0x33	; 51
    2de2:	98 60       	ori	r25, 0x08	; 8
    2de4:	93 bf       	out	0x33, r25	; 51
    2de6:	6c bf       	out	0x3c, r22	; 60
    2de8:	82 30       	cpi	r24, 0x02	; 2
    2dea:	99 f0       	breq	.+38     	; 0x2e12 <timer0_init+0x32>
    2dec:	28 f4       	brcc	.+10     	; 0x2df8 <timer0_init+0x18>
    2dee:	88 23       	and	r24, r24
    2df0:	41 f0       	breq	.+16     	; 0x2e02 <timer0_init+0x22>
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	51 f0       	breq	.+20     	; 0x2e0a <timer0_init+0x2a>
    2df6:	19 c0       	rjmp	.+50     	; 0x2e2a <timer0_init+0x4a>
    2df8:	83 30       	cpi	r24, 0x03	; 3
    2dfa:	79 f0       	breq	.+30     	; 0x2e1a <timer0_init+0x3a>
    2dfc:	84 30       	cpi	r24, 0x04	; 4
    2dfe:	89 f0       	breq	.+34     	; 0x2e22 <timer0_init+0x42>
    2e00:	14 c0       	rjmp	.+40     	; 0x2e2a <timer0_init+0x4a>
    2e02:	83 b7       	in	r24, 0x33	; 51
    2e04:	81 60       	ori	r24, 0x01	; 1
    2e06:	83 bf       	out	0x33, r24	; 51
    2e08:	13 c0       	rjmp	.+38     	; 0x2e30 <timer0_init+0x50>
    2e0a:	83 b7       	in	r24, 0x33	; 51
    2e0c:	82 60       	ori	r24, 0x02	; 2
    2e0e:	83 bf       	out	0x33, r24	; 51
    2e10:	0f c0       	rjmp	.+30     	; 0x2e30 <timer0_init+0x50>
    2e12:	83 b7       	in	r24, 0x33	; 51
    2e14:	83 60       	ori	r24, 0x03	; 3
    2e16:	83 bf       	out	0x33, r24	; 51
    2e18:	0b c0       	rjmp	.+22     	; 0x2e30 <timer0_init+0x50>
    2e1a:	83 b7       	in	r24, 0x33	; 51
    2e1c:	84 60       	ori	r24, 0x04	; 4
    2e1e:	83 bf       	out	0x33, r24	; 51
    2e20:	07 c0       	rjmp	.+14     	; 0x2e30 <timer0_init+0x50>
    2e22:	83 b7       	in	r24, 0x33	; 51
    2e24:	85 60       	ori	r24, 0x05	; 5
    2e26:	83 bf       	out	0x33, r24	; 51
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <timer0_init+0x50>
    2e2a:	83 b7       	in	r24, 0x33	; 51
    2e2c:	81 60       	ori	r24, 0x01	; 1
    2e2e:	83 bf       	out	0x33, r24	; 51
    2e30:	89 b7       	in	r24, 0x39	; 57
    2e32:	82 60       	ori	r24, 0x02	; 2
    2e34:	89 bf       	out	0x39, r24	; 57
    2e36:	08 95       	ret

00002e38 <evTime_init>:
    2e38:	23 e0       	ldi	r18, 0x03	; 3
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	24 83       	std	Z+4, r18	; 0x04
    2e3e:	10 82       	st	Z, r1
    2e40:	11 82       	std	Z+1, r1	; 0x01
    2e42:	12 82       	std	Z+2, r1	; 0x02
    2e44:	13 82       	std	Z+3, r1	; 0x03
    2e46:	08 95       	ret

00002e48 <evTime_start>:
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	21 e0       	ldi	r18, 0x01	; 1
    2e4e:	fc 01       	movw	r30, r24
    2e50:	24 83       	std	Z+4, r18	; 0x04
    2e52:	00 91 9c 05 	lds	r16, 0x059C	; 0x80059c <mktime+0x2>
    2e56:	10 91 9d 05 	lds	r17, 0x059D	; 0x80059d <mktime+0x3>
    2e5a:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <mktime+0x4>
    2e5e:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <mktime+0x5>
    2e62:	40 0f       	add	r20, r16
    2e64:	51 1f       	adc	r21, r17
    2e66:	62 1f       	adc	r22, r18
    2e68:	73 1f       	adc	r23, r19
    2e6a:	40 83       	st	Z, r20
    2e6c:	51 83       	std	Z+1, r21	; 0x01
    2e6e:	62 83       	std	Z+2, r22	; 0x02
    2e70:	73 83       	std	Z+3, r23	; 0x03
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	08 95       	ret

00002e78 <evTime_is_stated>:
    2e78:	21 e0       	ldi	r18, 0x01	; 1
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	84 81       	ldd	r24, Z+4	; 0x04
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <evTime_is_stated+0x10>
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	c9 01       	movw	r24, r18
    2e8a:	08 95       	ret

00002e8c <evTime_check>:

int evTime_check(evTime * evt)
{
    2e8c:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2e8e:	84 81       	ldd	r24, Z+4	; 0x04
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	b1 f4       	brne	.+44     	; 0x2ec0 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2e94:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <mktime+0x2>
    2e98:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <mktime+0x3>
    2e9c:	a0 91 9e 05 	lds	r26, 0x059E	; 0x80059e <mktime+0x4>
    2ea0:	b0 91 9f 05 	lds	r27, 0x059F	; 0x80059f <mktime+0x5>
    2ea4:	40 81       	ld	r20, Z
    2ea6:	51 81       	ldd	r21, Z+1	; 0x01
    2ea8:	62 81       	ldd	r22, Z+2	; 0x02
    2eaa:	73 81       	ldd	r23, Z+3	; 0x03
    2eac:	48 17       	cp	r20, r24
    2eae:	59 07       	cpc	r21, r25
    2eb0:	6a 07       	cpc	r22, r26
    2eb2:	7b 07       	cpc	r23, r27
    2eb4:	40 f4       	brcc	.+16     	; 0x2ec6 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2ec0:	8f ef       	ldi	r24, 0xFF	; 255
    2ec2:	9f ef       	ldi	r25, 0xFF	; 255
    2ec4:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2eca:	08 95       	ret

00002ecc <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2ecc:	21 e0       	ldi	r18, 0x01	; 1
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	84 81       	ldd	r24, Z+4	; 0x04
    2ed4:	83 30       	cpi	r24, 0x03	; 3
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <evTime_off+0x10>
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
}
    2edc:	c9 01       	movw	r24, r18
    2ede:	08 95       	ret

00002ee0 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	ec 01       	movw	r28, r24
    2ef2:	6a 01       	movw	r12, r20
    2ef4:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef8:	81 11       	cpse	r24, r1
    2efa:	06 c0       	rjmp	.+12     	; 0x2f08 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2efc:	83 e0       	ldi	r24, 0x03	; 3
    2efe:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2f00:	18 82       	st	Y, r1
    2f02:	19 82       	std	Y+1, r1	; 0x01
    2f04:	1a 82       	std	Y+2, r1	; 0x02
    2f06:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2f08:	ce 01       	movw	r24, r28
    2f0a:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <evTime_check>
    2f0e:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	31 f4       	brne	.+12     	; 0x2f20 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2f14:	b7 01       	movw	r22, r14
    2f16:	a6 01       	movw	r20, r12
    2f18:	ce 01       	movw	r24, r28
    2f1a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
		return 1;
    2f1e:	0d c0       	rjmp	.+26     	; 0x2f3a <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2f20:	8c 81       	ldd	r24, Y+4	; 0x04
    2f22:	83 30       	cpi	r24, 0x03	; 3
    2f24:	41 f4       	brne	.+16     	; 0x2f36 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2f26:	b7 01       	movw	r22, r14
    2f28:	a6 01       	movw	r20, r12
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <evTime_start>
	}
	return 0;
    2f30:	00 e0       	ldi	r16, 0x00	; 0
    2f32:	10 e0       	ldi	r17, 0x00	; 0
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <evTime_process_period+0x5a>
    2f36:	00 e0       	ldi	r16, 0x00	; 0
    2f38:	10 e0       	ldi	r17, 0x00	; 0
}
    2f3a:	c8 01       	movw	r24, r16
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	08 95       	ret

00002f4e <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	0f 92       	push	r0
    2f56:	11 24       	eor	r1, r1
    2f58:	2f 93       	push	r18
    2f5a:	3f 93       	push	r19
    2f5c:	4f 93       	push	r20
    2f5e:	5f 93       	push	r21
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	ef 93       	push	r30
    2f66:	ff 93       	push	r31
    2f68:	2b b1       	in	r18, 0x0b	; 11
    2f6a:	3c b1       	in	r19, 0x0c	; 12
    2f6c:	28 71       	andi	r18, 0x18	; 24
    2f6e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <UART_RxHead>
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	01 96       	adiw	r24, 0x01	; 1
    2f76:	40 91 ff 03 	lds	r20, 0x03FF	; 0x8003ff <UART_RxTail>
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	84 17       	cp	r24, r20
    2f7e:	95 07       	cpc	r25, r21
    2f80:	39 f0       	breq	.+14     	; 0x2f90 <__vector_13+0x42>
    2f82:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <UART_RxHead>
    2f86:	fc 01       	movw	r30, r24
    2f88:	ed 5f       	subi	r30, 0xFD	; 253
    2f8a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f8c:	30 83       	st	Z, r19
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <__vector_13+0x44>
    2f90:	22 e0       	ldi	r18, 0x02	; 2
    2f92:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <UART_LastRxError>
    2f96:	ff 91       	pop	r31
    2f98:	ef 91       	pop	r30
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	5f 91       	pop	r21
    2fa0:	4f 91       	pop	r20
    2fa2:	3f 91       	pop	r19
    2fa4:	2f 91       	pop	r18
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_14>:
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	8f 93       	push	r24
    2fbc:	9f 93       	push	r25
    2fbe:	ef 93       	push	r30
    2fc0:	ff 93       	push	r31
    2fc2:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <UART_TxHead>
    2fc6:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <UART_TxTail>
    2fca:	98 17       	cp	r25, r24
    2fcc:	71 f0       	breq	.+28     	; 0x2fea <__vector_14+0x3a>
    2fce:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <UART_TxTail>
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	8f 77       	andi	r24, 0x7F	; 127
    2fd8:	99 27       	eor	r25, r25
    2fda:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <UART_TxTail>
    2fde:	fc 01       	movw	r30, r24
    2fe0:	ed 5f       	subi	r30, 0xFD	; 253
    2fe2:	fb 4f       	sbci	r31, 0xFB	; 251
    2fe4:	80 81       	ld	r24, Z
    2fe6:	8c b9       	out	0x0c, r24	; 12
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <__vector_14+0x3c>
    2fea:	55 98       	cbi	0x0a, 5	; 10
    2fec:	ff 91       	pop	r31
    2fee:	ef 91       	pop	r30
    2ff0:	9f 91       	pop	r25
    2ff2:	8f 91       	pop	r24
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <uart0_init>:
    2ffe:	f8 94       	cli
    3000:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <UART_TxHead>
    3004:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <UART_TxTail>
    3008:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <UART_RxHead>
    300c:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <UART_RxTail>
    3010:	78 94       	sei
    3012:	99 23       	and	r25, r25
    3014:	1c f4       	brge	.+6      	; 0x301c <uart0_init+0x1e>
    3016:	22 e0       	ldi	r18, 0x02	; 2
    3018:	2b b9       	out	0x0b, r18	; 11
    301a:	9f 77       	andi	r25, 0x7F	; 127
    301c:	90 bd       	out	0x20, r25	; 32
    301e:	89 b9       	out	0x09, r24	; 9
    3020:	88 e9       	ldi	r24, 0x98	; 152
    3022:	8a b9       	out	0x0a, r24	; 10
    3024:	86 e8       	ldi	r24, 0x86	; 134
    3026:	80 bd       	out	0x20, r24	; 32
    3028:	08 95       	ret

0000302a <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    302a:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <UART_TxHead>
    302e:	50 e0       	ldi	r21, 0x00	; 0
    3030:	4f 5f       	subi	r20, 0xFF	; 255
    3032:	5f 4f       	sbci	r21, 0xFF	; 255
    3034:	4f 77       	andi	r20, 0x7F	; 127
    3036:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    3038:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <UART_TxTail>
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	42 17       	cp	r20, r18
    3040:	53 07       	cpc	r21, r19
    3042:	d1 f3       	breq	.-12     	; 0x3038 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3044:	fa 01       	movw	r30, r20
    3046:	ed 5f       	subi	r30, 0xFD	; 253
    3048:	fb 4f       	sbci	r31, 0xFB	; 251
    304a:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    304c:	40 93 02 04 	sts	0x0402, r20	; 0x800402 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    3050:	55 9a       	sbi	0x0a, 5	; 10
    3052:	08 95       	ret

00003054 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	ec 01       	movw	r28, r24
	while (*s) {
    305a:	88 81       	ld	r24, Y
    305c:	88 23       	and	r24, r24
    305e:	31 f0       	breq	.+12     	; 0x306c <uart0_puts+0x18>
    3060:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    3062:	0e 94 15 18 	call	0x302a	; 0x302a <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    3066:	89 91       	ld	r24, Y+
    3068:	81 11       	cpse	r24, r1
    306a:	fb cf       	rjmp	.-10     	; 0x3062 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	08 95       	ret

00003072 <__subsf3>:
    3072:	50 58       	subi	r21, 0x80	; 128

00003074 <__addsf3>:
    3074:	bb 27       	eor	r27, r27
    3076:	aa 27       	eor	r26, r26
    3078:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__addsf3x>
    307c:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__fp_round>
    3080:	0e 94 b8 19 	call	0x3370	; 0x3370 <__fp_pscA>
    3084:	38 f0       	brcs	.+14     	; 0x3094 <__addsf3+0x20>
    3086:	0e 94 bf 19 	call	0x337e	; 0x337e <__fp_pscB>
    308a:	20 f0       	brcs	.+8      	; 0x3094 <__addsf3+0x20>
    308c:	39 f4       	brne	.+14     	; 0x309c <__addsf3+0x28>
    308e:	9f 3f       	cpi	r25, 0xFF	; 255
    3090:	19 f4       	brne	.+6      	; 0x3098 <__addsf3+0x24>
    3092:	26 f4       	brtc	.+8      	; 0x309c <__addsf3+0x28>
    3094:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>
    3098:	0e f4       	brtc	.+2      	; 0x309c <__addsf3+0x28>
    309a:	e0 95       	com	r30
    309c:	e7 fb       	bst	r30, 7
    309e:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>

000030a2 <__addsf3x>:
    30a2:	e9 2f       	mov	r30, r25
    30a4:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fp_split3>
    30a8:	58 f3       	brcs	.-42     	; 0x3080 <__addsf3+0xc>
    30aa:	ba 17       	cp	r27, r26
    30ac:	62 07       	cpc	r22, r18
    30ae:	73 07       	cpc	r23, r19
    30b0:	84 07       	cpc	r24, r20
    30b2:	95 07       	cpc	r25, r21
    30b4:	20 f0       	brcs	.+8      	; 0x30be <__addsf3x+0x1c>
    30b6:	79 f4       	brne	.+30     	; 0x30d6 <__addsf3x+0x34>
    30b8:	a6 f5       	brtc	.+104    	; 0x3122 <__addsf3x+0x80>
    30ba:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_zero>
    30be:	0e f4       	brtc	.+2      	; 0x30c2 <__addsf3x+0x20>
    30c0:	e0 95       	com	r30
    30c2:	0b 2e       	mov	r0, r27
    30c4:	ba 2f       	mov	r27, r26
    30c6:	a0 2d       	mov	r26, r0
    30c8:	0b 01       	movw	r0, r22
    30ca:	b9 01       	movw	r22, r18
    30cc:	90 01       	movw	r18, r0
    30ce:	0c 01       	movw	r0, r24
    30d0:	ca 01       	movw	r24, r20
    30d2:	a0 01       	movw	r20, r0
    30d4:	11 24       	eor	r1, r1
    30d6:	ff 27       	eor	r31, r31
    30d8:	59 1b       	sub	r21, r25
    30da:	99 f0       	breq	.+38     	; 0x3102 <__addsf3x+0x60>
    30dc:	59 3f       	cpi	r21, 0xF9	; 249
    30de:	50 f4       	brcc	.+20     	; 0x30f4 <__addsf3x+0x52>
    30e0:	50 3e       	cpi	r21, 0xE0	; 224
    30e2:	68 f1       	brcs	.+90     	; 0x313e <__addsf3x+0x9c>
    30e4:	1a 16       	cp	r1, r26
    30e6:	f0 40       	sbci	r31, 0x00	; 0
    30e8:	a2 2f       	mov	r26, r18
    30ea:	23 2f       	mov	r18, r19
    30ec:	34 2f       	mov	r19, r20
    30ee:	44 27       	eor	r20, r20
    30f0:	58 5f       	subi	r21, 0xF8	; 248
    30f2:	f3 cf       	rjmp	.-26     	; 0x30da <__addsf3x+0x38>
    30f4:	46 95       	lsr	r20
    30f6:	37 95       	ror	r19
    30f8:	27 95       	ror	r18
    30fa:	a7 95       	ror	r26
    30fc:	f0 40       	sbci	r31, 0x00	; 0
    30fe:	53 95       	inc	r21
    3100:	c9 f7       	brne	.-14     	; 0x30f4 <__addsf3x+0x52>
    3102:	7e f4       	brtc	.+30     	; 0x3122 <__addsf3x+0x80>
    3104:	1f 16       	cp	r1, r31
    3106:	ba 0b       	sbc	r27, r26
    3108:	62 0b       	sbc	r22, r18
    310a:	73 0b       	sbc	r23, r19
    310c:	84 0b       	sbc	r24, r20
    310e:	ba f0       	brmi	.+46     	; 0x313e <__addsf3x+0x9c>
    3110:	91 50       	subi	r25, 0x01	; 1
    3112:	a1 f0       	breq	.+40     	; 0x313c <__addsf3x+0x9a>
    3114:	ff 0f       	add	r31, r31
    3116:	bb 1f       	adc	r27, r27
    3118:	66 1f       	adc	r22, r22
    311a:	77 1f       	adc	r23, r23
    311c:	88 1f       	adc	r24, r24
    311e:	c2 f7       	brpl	.-16     	; 0x3110 <__addsf3x+0x6e>
    3120:	0e c0       	rjmp	.+28     	; 0x313e <__addsf3x+0x9c>
    3122:	ba 0f       	add	r27, r26
    3124:	62 1f       	adc	r22, r18
    3126:	73 1f       	adc	r23, r19
    3128:	84 1f       	adc	r24, r20
    312a:	48 f4       	brcc	.+18     	; 0x313e <__addsf3x+0x9c>
    312c:	87 95       	ror	r24
    312e:	77 95       	ror	r23
    3130:	67 95       	ror	r22
    3132:	b7 95       	ror	r27
    3134:	f7 95       	ror	r31
    3136:	9e 3f       	cpi	r25, 0xFE	; 254
    3138:	08 f0       	brcs	.+2      	; 0x313c <__addsf3x+0x9a>
    313a:	b0 cf       	rjmp	.-160    	; 0x309c <__addsf3+0x28>
    313c:	93 95       	inc	r25
    313e:	88 0f       	add	r24, r24
    3140:	08 f0       	brcs	.+2      	; 0x3144 <__addsf3x+0xa2>
    3142:	99 27       	eor	r25, r25
    3144:	ee 0f       	add	r30, r30
    3146:	97 95       	ror	r25
    3148:	87 95       	ror	r24
    314a:	08 95       	ret

0000314c <__divsf3>:
    314c:	0e 94 ba 18 	call	0x3174	; 0x3174 <__divsf3x>
    3150:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__fp_round>
    3154:	0e 94 bf 19 	call	0x337e	; 0x337e <__fp_pscB>
    3158:	58 f0       	brcs	.+22     	; 0x3170 <__divsf3+0x24>
    315a:	0e 94 b8 19 	call	0x3370	; 0x3370 <__fp_pscA>
    315e:	40 f0       	brcs	.+16     	; 0x3170 <__divsf3+0x24>
    3160:	29 f4       	brne	.+10     	; 0x316c <__divsf3+0x20>
    3162:	5f 3f       	cpi	r21, 0xFF	; 255
    3164:	29 f0       	breq	.+10     	; 0x3170 <__divsf3+0x24>
    3166:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    316a:	51 11       	cpse	r21, r1
    316c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>
    3170:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>

00003174 <__divsf3x>:
    3174:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fp_split3>
    3178:	68 f3       	brcs	.-38     	; 0x3154 <__divsf3+0x8>

0000317a <__divsf3_pse>:
    317a:	99 23       	and	r25, r25
    317c:	b1 f3       	breq	.-20     	; 0x316a <__divsf3+0x1e>
    317e:	55 23       	and	r21, r21
    3180:	91 f3       	breq	.-28     	; 0x3166 <__divsf3+0x1a>
    3182:	95 1b       	sub	r25, r21
    3184:	55 0b       	sbc	r21, r21
    3186:	bb 27       	eor	r27, r27
    3188:	aa 27       	eor	r26, r26
    318a:	62 17       	cp	r22, r18
    318c:	73 07       	cpc	r23, r19
    318e:	84 07       	cpc	r24, r20
    3190:	38 f0       	brcs	.+14     	; 0x31a0 <__divsf3_pse+0x26>
    3192:	9f 5f       	subi	r25, 0xFF	; 255
    3194:	5f 4f       	sbci	r21, 0xFF	; 255
    3196:	22 0f       	add	r18, r18
    3198:	33 1f       	adc	r19, r19
    319a:	44 1f       	adc	r20, r20
    319c:	aa 1f       	adc	r26, r26
    319e:	a9 f3       	breq	.-22     	; 0x318a <__divsf3_pse+0x10>
    31a0:	35 d0       	rcall	.+106    	; 0x320c <__divsf3_pse+0x92>
    31a2:	0e 2e       	mov	r0, r30
    31a4:	3a f0       	brmi	.+14     	; 0x31b4 <__divsf3_pse+0x3a>
    31a6:	e0 e8       	ldi	r30, 0x80	; 128
    31a8:	32 d0       	rcall	.+100    	; 0x320e <__divsf3_pse+0x94>
    31aa:	91 50       	subi	r25, 0x01	; 1
    31ac:	50 40       	sbci	r21, 0x00	; 0
    31ae:	e6 95       	lsr	r30
    31b0:	00 1c       	adc	r0, r0
    31b2:	ca f7       	brpl	.-14     	; 0x31a6 <__divsf3_pse+0x2c>
    31b4:	2b d0       	rcall	.+86     	; 0x320c <__divsf3_pse+0x92>
    31b6:	fe 2f       	mov	r31, r30
    31b8:	29 d0       	rcall	.+82     	; 0x320c <__divsf3_pse+0x92>
    31ba:	66 0f       	add	r22, r22
    31bc:	77 1f       	adc	r23, r23
    31be:	88 1f       	adc	r24, r24
    31c0:	bb 1f       	adc	r27, r27
    31c2:	26 17       	cp	r18, r22
    31c4:	37 07       	cpc	r19, r23
    31c6:	48 07       	cpc	r20, r24
    31c8:	ab 07       	cpc	r26, r27
    31ca:	b0 e8       	ldi	r27, 0x80	; 128
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <__divsf3_pse+0x56>
    31ce:	bb 0b       	sbc	r27, r27
    31d0:	80 2d       	mov	r24, r0
    31d2:	bf 01       	movw	r22, r30
    31d4:	ff 27       	eor	r31, r31
    31d6:	93 58       	subi	r25, 0x83	; 131
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	3a f0       	brmi	.+14     	; 0x31ea <__divsf3_pse+0x70>
    31dc:	9e 3f       	cpi	r25, 0xFE	; 254
    31de:	51 05       	cpc	r21, r1
    31e0:	78 f0       	brcs	.+30     	; 0x3200 <__divsf3_pse+0x86>
    31e2:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    31e6:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>
    31ea:	5f 3f       	cpi	r21, 0xFF	; 255
    31ec:	e4 f3       	brlt	.-8      	; 0x31e6 <__divsf3_pse+0x6c>
    31ee:	98 3e       	cpi	r25, 0xE8	; 232
    31f0:	d4 f3       	brlt	.-12     	; 0x31e6 <__divsf3_pse+0x6c>
    31f2:	86 95       	lsr	r24
    31f4:	77 95       	ror	r23
    31f6:	67 95       	ror	r22
    31f8:	b7 95       	ror	r27
    31fa:	f7 95       	ror	r31
    31fc:	9f 5f       	subi	r25, 0xFF	; 255
    31fe:	c9 f7       	brne	.-14     	; 0x31f2 <__divsf3_pse+0x78>
    3200:	88 0f       	add	r24, r24
    3202:	91 1d       	adc	r25, r1
    3204:	96 95       	lsr	r25
    3206:	87 95       	ror	r24
    3208:	97 f9       	bld	r25, 7
    320a:	08 95       	ret
    320c:	e1 e0       	ldi	r30, 0x01	; 1
    320e:	66 0f       	add	r22, r22
    3210:	77 1f       	adc	r23, r23
    3212:	88 1f       	adc	r24, r24
    3214:	bb 1f       	adc	r27, r27
    3216:	62 17       	cp	r22, r18
    3218:	73 07       	cpc	r23, r19
    321a:	84 07       	cpc	r24, r20
    321c:	ba 07       	cpc	r27, r26
    321e:	20 f0       	brcs	.+8      	; 0x3228 <__divsf3_pse+0xae>
    3220:	62 1b       	sub	r22, r18
    3222:	73 0b       	sbc	r23, r19
    3224:	84 0b       	sbc	r24, r20
    3226:	ba 0b       	sbc	r27, r26
    3228:	ee 1f       	adc	r30, r30
    322a:	88 f7       	brcc	.-30     	; 0x320e <__divsf3_pse+0x94>
    322c:	e0 95       	com	r30
    322e:	08 95       	ret

00003230 <__fixsfsi>:
    3230:	0e 94 1f 19 	call	0x323e	; 0x323e <__fixunssfsi>
    3234:	68 94       	set
    3236:	b1 11       	cpse	r27, r1
    3238:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>
    323c:	08 95       	ret

0000323e <__fixunssfsi>:
    323e:	0e 94 df 19 	call	0x33be	; 0x33be <__fp_splitA>
    3242:	88 f0       	brcs	.+34     	; 0x3266 <__fixunssfsi+0x28>
    3244:	9f 57       	subi	r25, 0x7F	; 127
    3246:	98 f0       	brcs	.+38     	; 0x326e <__fixunssfsi+0x30>
    3248:	b9 2f       	mov	r27, r25
    324a:	99 27       	eor	r25, r25
    324c:	b7 51       	subi	r27, 0x17	; 23
    324e:	b0 f0       	brcs	.+44     	; 0x327c <__fixunssfsi+0x3e>
    3250:	e1 f0       	breq	.+56     	; 0x328a <__fixunssfsi+0x4c>
    3252:	66 0f       	add	r22, r22
    3254:	77 1f       	adc	r23, r23
    3256:	88 1f       	adc	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	1a f0       	brmi	.+6      	; 0x3262 <__fixunssfsi+0x24>
    325c:	ba 95       	dec	r27
    325e:	c9 f7       	brne	.-14     	; 0x3252 <__fixunssfsi+0x14>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <__fixunssfsi+0x4c>
    3262:	b1 30       	cpi	r27, 0x01	; 1
    3264:	91 f0       	breq	.+36     	; 0x328a <__fixunssfsi+0x4c>
    3266:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__fp_zero>
    326a:	b1 e0       	ldi	r27, 0x01	; 1
    326c:	08 95       	ret
    326e:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_zero>
    3272:	67 2f       	mov	r22, r23
    3274:	78 2f       	mov	r23, r24
    3276:	88 27       	eor	r24, r24
    3278:	b8 5f       	subi	r27, 0xF8	; 248
    327a:	39 f0       	breq	.+14     	; 0x328a <__fixunssfsi+0x4c>
    327c:	b9 3f       	cpi	r27, 0xF9	; 249
    327e:	cc f3       	brlt	.-14     	; 0x3272 <__fixunssfsi+0x34>
    3280:	86 95       	lsr	r24
    3282:	77 95       	ror	r23
    3284:	67 95       	ror	r22
    3286:	b3 95       	inc	r27
    3288:	d9 f7       	brne	.-10     	; 0x3280 <__fixunssfsi+0x42>
    328a:	3e f4       	brtc	.+14     	; 0x329a <__fixunssfsi+0x5c>
    328c:	90 95       	com	r25
    328e:	80 95       	com	r24
    3290:	70 95       	com	r23
    3292:	61 95       	neg	r22
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	8f 4f       	sbci	r24, 0xFF	; 255
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	08 95       	ret

0000329c <__floatunsisf>:
    329c:	e8 94       	clt
    329e:	09 c0       	rjmp	.+18     	; 0x32b2 <__floatsisf+0x12>

000032a0 <__floatsisf>:
    32a0:	97 fb       	bst	r25, 7
    32a2:	3e f4       	brtc	.+14     	; 0x32b2 <__floatsisf+0x12>
    32a4:	90 95       	com	r25
    32a6:	80 95       	com	r24
    32a8:	70 95       	com	r23
    32aa:	61 95       	neg	r22
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	8f 4f       	sbci	r24, 0xFF	; 255
    32b0:	9f 4f       	sbci	r25, 0xFF	; 255
    32b2:	99 23       	and	r25, r25
    32b4:	a9 f0       	breq	.+42     	; 0x32e0 <__floatsisf+0x40>
    32b6:	f9 2f       	mov	r31, r25
    32b8:	96 e9       	ldi	r25, 0x96	; 150
    32ba:	bb 27       	eor	r27, r27
    32bc:	93 95       	inc	r25
    32be:	f6 95       	lsr	r31
    32c0:	87 95       	ror	r24
    32c2:	77 95       	ror	r23
    32c4:	67 95       	ror	r22
    32c6:	b7 95       	ror	r27
    32c8:	f1 11       	cpse	r31, r1
    32ca:	f8 cf       	rjmp	.-16     	; 0x32bc <__floatsisf+0x1c>
    32cc:	fa f4       	brpl	.+62     	; 0x330c <__floatsisf+0x6c>
    32ce:	bb 0f       	add	r27, r27
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <__floatsisf+0x36>
    32d2:	60 ff       	sbrs	r22, 0
    32d4:	1b c0       	rjmp	.+54     	; 0x330c <__floatsisf+0x6c>
    32d6:	6f 5f       	subi	r22, 0xFF	; 255
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	8f 4f       	sbci	r24, 0xFF	; 255
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	16 c0       	rjmp	.+44     	; 0x330c <__floatsisf+0x6c>
    32e0:	88 23       	and	r24, r24
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <__floatsisf+0x48>
    32e4:	96 e9       	ldi	r25, 0x96	; 150
    32e6:	11 c0       	rjmp	.+34     	; 0x330a <__floatsisf+0x6a>
    32e8:	77 23       	and	r23, r23
    32ea:	21 f0       	breq	.+8      	; 0x32f4 <__floatsisf+0x54>
    32ec:	9e e8       	ldi	r25, 0x8E	; 142
    32ee:	87 2f       	mov	r24, r23
    32f0:	76 2f       	mov	r23, r22
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <__floatsisf+0x5e>
    32f4:	66 23       	and	r22, r22
    32f6:	71 f0       	breq	.+28     	; 0x3314 <__floatsisf+0x74>
    32f8:	96 e8       	ldi	r25, 0x86	; 134
    32fa:	86 2f       	mov	r24, r22
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	2a f0       	brmi	.+10     	; 0x330c <__floatsisf+0x6c>
    3302:	9a 95       	dec	r25
    3304:	66 0f       	add	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	88 1f       	adc	r24, r24
    330a:	da f7       	brpl	.-10     	; 0x3302 <__floatsisf+0x62>
    330c:	88 0f       	add	r24, r24
    330e:	96 95       	lsr	r25
    3310:	87 95       	ror	r24
    3312:	97 f9       	bld	r25, 7
    3314:	08 95       	ret

00003316 <__fp_cmp>:
    3316:	99 0f       	add	r25, r25
    3318:	00 08       	sbc	r0, r0
    331a:	55 0f       	add	r21, r21
    331c:	aa 0b       	sbc	r26, r26
    331e:	e0 e8       	ldi	r30, 0x80	; 128
    3320:	fe ef       	ldi	r31, 0xFE	; 254
    3322:	16 16       	cp	r1, r22
    3324:	17 06       	cpc	r1, r23
    3326:	e8 07       	cpc	r30, r24
    3328:	f9 07       	cpc	r31, r25
    332a:	c0 f0       	brcs	.+48     	; 0x335c <__fp_cmp+0x46>
    332c:	12 16       	cp	r1, r18
    332e:	13 06       	cpc	r1, r19
    3330:	e4 07       	cpc	r30, r20
    3332:	f5 07       	cpc	r31, r21
    3334:	98 f0       	brcs	.+38     	; 0x335c <__fp_cmp+0x46>
    3336:	62 1b       	sub	r22, r18
    3338:	73 0b       	sbc	r23, r19
    333a:	84 0b       	sbc	r24, r20
    333c:	95 0b       	sbc	r25, r21
    333e:	39 f4       	brne	.+14     	; 0x334e <__fp_cmp+0x38>
    3340:	0a 26       	eor	r0, r26
    3342:	61 f0       	breq	.+24     	; 0x335c <__fp_cmp+0x46>
    3344:	23 2b       	or	r18, r19
    3346:	24 2b       	or	r18, r20
    3348:	25 2b       	or	r18, r21
    334a:	21 f4       	brne	.+8      	; 0x3354 <__fp_cmp+0x3e>
    334c:	08 95       	ret
    334e:	0a 26       	eor	r0, r26
    3350:	09 f4       	brne	.+2      	; 0x3354 <__fp_cmp+0x3e>
    3352:	a1 40       	sbci	r26, 0x01	; 1
    3354:	a6 95       	lsr	r26
    3356:	8f ef       	ldi	r24, 0xFF	; 255
    3358:	81 1d       	adc	r24, r1
    335a:	81 1d       	adc	r24, r1
    335c:	08 95       	ret

0000335e <__fp_inf>:
    335e:	97 f9       	bld	r25, 7
    3360:	9f 67       	ori	r25, 0x7F	; 127
    3362:	80 e8       	ldi	r24, 0x80	; 128
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	08 95       	ret

0000336a <__fp_nan>:
    336a:	9f ef       	ldi	r25, 0xFF	; 255
    336c:	80 ec       	ldi	r24, 0xC0	; 192
    336e:	08 95       	ret

00003370 <__fp_pscA>:
    3370:	00 24       	eor	r0, r0
    3372:	0a 94       	dec	r0
    3374:	16 16       	cp	r1, r22
    3376:	17 06       	cpc	r1, r23
    3378:	18 06       	cpc	r1, r24
    337a:	09 06       	cpc	r0, r25
    337c:	08 95       	ret

0000337e <__fp_pscB>:
    337e:	00 24       	eor	r0, r0
    3380:	0a 94       	dec	r0
    3382:	12 16       	cp	r1, r18
    3384:	13 06       	cpc	r1, r19
    3386:	14 06       	cpc	r1, r20
    3388:	05 06       	cpc	r0, r21
    338a:	08 95       	ret

0000338c <__fp_round>:
    338c:	09 2e       	mov	r0, r25
    338e:	03 94       	inc	r0
    3390:	00 0c       	add	r0, r0
    3392:	11 f4       	brne	.+4      	; 0x3398 <__fp_round+0xc>
    3394:	88 23       	and	r24, r24
    3396:	52 f0       	brmi	.+20     	; 0x33ac <__fp_round+0x20>
    3398:	bb 0f       	add	r27, r27
    339a:	40 f4       	brcc	.+16     	; 0x33ac <__fp_round+0x20>
    339c:	bf 2b       	or	r27, r31
    339e:	11 f4       	brne	.+4      	; 0x33a4 <__fp_round+0x18>
    33a0:	60 ff       	sbrs	r22, 0
    33a2:	04 c0       	rjmp	.+8      	; 0x33ac <__fp_round+0x20>
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	8f 4f       	sbci	r24, 0xFF	; 255
    33aa:	9f 4f       	sbci	r25, 0xFF	; 255
    33ac:	08 95       	ret

000033ae <__fp_split3>:
    33ae:	57 fd       	sbrc	r21, 7
    33b0:	90 58       	subi	r25, 0x80	; 128
    33b2:	44 0f       	add	r20, r20
    33b4:	55 1f       	adc	r21, r21
    33b6:	59 f0       	breq	.+22     	; 0x33ce <__fp_splitA+0x10>
    33b8:	5f 3f       	cpi	r21, 0xFF	; 255
    33ba:	71 f0       	breq	.+28     	; 0x33d8 <__fp_splitA+0x1a>
    33bc:	47 95       	ror	r20

000033be <__fp_splitA>:
    33be:	88 0f       	add	r24, r24
    33c0:	97 fb       	bst	r25, 7
    33c2:	99 1f       	adc	r25, r25
    33c4:	61 f0       	breq	.+24     	; 0x33de <__fp_splitA+0x20>
    33c6:	9f 3f       	cpi	r25, 0xFF	; 255
    33c8:	79 f0       	breq	.+30     	; 0x33e8 <__fp_splitA+0x2a>
    33ca:	87 95       	ror	r24
    33cc:	08 95       	ret
    33ce:	12 16       	cp	r1, r18
    33d0:	13 06       	cpc	r1, r19
    33d2:	14 06       	cpc	r1, r20
    33d4:	55 1f       	adc	r21, r21
    33d6:	f2 cf       	rjmp	.-28     	; 0x33bc <__fp_split3+0xe>
    33d8:	46 95       	lsr	r20
    33da:	f1 df       	rcall	.-30     	; 0x33be <__fp_splitA>
    33dc:	08 c0       	rjmp	.+16     	; 0x33ee <__fp_splitA+0x30>
    33de:	16 16       	cp	r1, r22
    33e0:	17 06       	cpc	r1, r23
    33e2:	18 06       	cpc	r1, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	f1 cf       	rjmp	.-30     	; 0x33ca <__fp_splitA+0xc>
    33e8:	86 95       	lsr	r24
    33ea:	71 05       	cpc	r23, r1
    33ec:	61 05       	cpc	r22, r1
    33ee:	08 94       	sec
    33f0:	08 95       	ret

000033f2 <__fp_zero>:
    33f2:	e8 94       	clt

000033f4 <__fp_szero>:
    33f4:	bb 27       	eor	r27, r27
    33f6:	66 27       	eor	r22, r22
    33f8:	77 27       	eor	r23, r23
    33fa:	cb 01       	movw	r24, r22
    33fc:	97 f9       	bld	r25, 7
    33fe:	08 95       	ret

00003400 <__gesf2>:
    3400:	0e 94 8b 19 	call	0x3316	; 0x3316 <__fp_cmp>
    3404:	08 f4       	brcc	.+2      	; 0x3408 <__gesf2+0x8>
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	08 95       	ret

0000340a <__mulsf3>:
    340a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__mulsf3x>
    340e:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__fp_round>
    3412:	0e 94 b8 19 	call	0x3370	; 0x3370 <__fp_pscA>
    3416:	38 f0       	brcs	.+14     	; 0x3426 <__mulsf3+0x1c>
    3418:	0e 94 bf 19 	call	0x337e	; 0x337e <__fp_pscB>
    341c:	20 f0       	brcs	.+8      	; 0x3426 <__mulsf3+0x1c>
    341e:	95 23       	and	r25, r21
    3420:	11 f0       	breq	.+4      	; 0x3426 <__mulsf3+0x1c>
    3422:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    3426:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>
    342a:	11 24       	eor	r1, r1
    342c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>

00003430 <__mulsf3x>:
    3430:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__fp_split3>
    3434:	70 f3       	brcs	.-36     	; 0x3412 <__mulsf3+0x8>

00003436 <__mulsf3_pse>:
    3436:	95 9f       	mul	r25, r21
    3438:	c1 f3       	breq	.-16     	; 0x342a <__mulsf3+0x20>
    343a:	95 0f       	add	r25, r21
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	55 1f       	adc	r21, r21
    3440:	62 9f       	mul	r22, r18
    3442:	f0 01       	movw	r30, r0
    3444:	72 9f       	mul	r23, r18
    3446:	bb 27       	eor	r27, r27
    3448:	f0 0d       	add	r31, r0
    344a:	b1 1d       	adc	r27, r1
    344c:	63 9f       	mul	r22, r19
    344e:	aa 27       	eor	r26, r26
    3450:	f0 0d       	add	r31, r0
    3452:	b1 1d       	adc	r27, r1
    3454:	aa 1f       	adc	r26, r26
    3456:	64 9f       	mul	r22, r20
    3458:	66 27       	eor	r22, r22
    345a:	b0 0d       	add	r27, r0
    345c:	a1 1d       	adc	r26, r1
    345e:	66 1f       	adc	r22, r22
    3460:	82 9f       	mul	r24, r18
    3462:	22 27       	eor	r18, r18
    3464:	b0 0d       	add	r27, r0
    3466:	a1 1d       	adc	r26, r1
    3468:	62 1f       	adc	r22, r18
    346a:	73 9f       	mul	r23, r19
    346c:	b0 0d       	add	r27, r0
    346e:	a1 1d       	adc	r26, r1
    3470:	62 1f       	adc	r22, r18
    3472:	83 9f       	mul	r24, r19
    3474:	a0 0d       	add	r26, r0
    3476:	61 1d       	adc	r22, r1
    3478:	22 1f       	adc	r18, r18
    347a:	74 9f       	mul	r23, r20
    347c:	33 27       	eor	r19, r19
    347e:	a0 0d       	add	r26, r0
    3480:	61 1d       	adc	r22, r1
    3482:	23 1f       	adc	r18, r19
    3484:	84 9f       	mul	r24, r20
    3486:	60 0d       	add	r22, r0
    3488:	21 1d       	adc	r18, r1
    348a:	82 2f       	mov	r24, r18
    348c:	76 2f       	mov	r23, r22
    348e:	6a 2f       	mov	r22, r26
    3490:	11 24       	eor	r1, r1
    3492:	9f 57       	subi	r25, 0x7F	; 127
    3494:	50 40       	sbci	r21, 0x00	; 0
    3496:	9a f0       	brmi	.+38     	; 0x34be <__mulsf3_pse+0x88>
    3498:	f1 f0       	breq	.+60     	; 0x34d6 <__mulsf3_pse+0xa0>
    349a:	88 23       	and	r24, r24
    349c:	4a f0       	brmi	.+18     	; 0x34b0 <__mulsf3_pse+0x7a>
    349e:	ee 0f       	add	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	bb 1f       	adc	r27, r27
    34a4:	66 1f       	adc	r22, r22
    34a6:	77 1f       	adc	r23, r23
    34a8:	88 1f       	adc	r24, r24
    34aa:	91 50       	subi	r25, 0x01	; 1
    34ac:	50 40       	sbci	r21, 0x00	; 0
    34ae:	a9 f7       	brne	.-22     	; 0x349a <__mulsf3_pse+0x64>
    34b0:	9e 3f       	cpi	r25, 0xFE	; 254
    34b2:	51 05       	cpc	r21, r1
    34b4:	80 f0       	brcs	.+32     	; 0x34d6 <__mulsf3_pse+0xa0>
    34b6:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    34ba:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>
    34be:	5f 3f       	cpi	r21, 0xFF	; 255
    34c0:	e4 f3       	brlt	.-8      	; 0x34ba <__mulsf3_pse+0x84>
    34c2:	98 3e       	cpi	r25, 0xE8	; 232
    34c4:	d4 f3       	brlt	.-12     	; 0x34ba <__mulsf3_pse+0x84>
    34c6:	86 95       	lsr	r24
    34c8:	77 95       	ror	r23
    34ca:	67 95       	ror	r22
    34cc:	b7 95       	ror	r27
    34ce:	f7 95       	ror	r31
    34d0:	e7 95       	ror	r30
    34d2:	9f 5f       	subi	r25, 0xFF	; 255
    34d4:	c1 f7       	brne	.-16     	; 0x34c6 <__mulsf3_pse+0x90>
    34d6:	fe 2b       	or	r31, r30
    34d8:	88 0f       	add	r24, r24
    34da:	91 1d       	adc	r25, r1
    34dc:	96 95       	lsr	r25
    34de:	87 95       	ror	r24
    34e0:	97 f9       	bld	r25, 7
    34e2:	08 95       	ret

000034e4 <pow>:
    34e4:	fa 01       	movw	r30, r20
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	30 96       	adiw	r30, 0x00	; 0
    34ec:	21 05       	cpc	r18, r1
    34ee:	31 05       	cpc	r19, r1
    34f0:	a1 f1       	breq	.+104    	; 0x355a <pow+0x76>
    34f2:	61 15       	cp	r22, r1
    34f4:	71 05       	cpc	r23, r1
    34f6:	61 f4       	brne	.+24     	; 0x3510 <pow+0x2c>
    34f8:	80 38       	cpi	r24, 0x80	; 128
    34fa:	bf e3       	ldi	r27, 0x3F	; 63
    34fc:	9b 07       	cpc	r25, r27
    34fe:	49 f1       	breq	.+82     	; 0x3552 <pow+0x6e>
    3500:	68 94       	set
    3502:	90 38       	cpi	r25, 0x80	; 128
    3504:	81 05       	cpc	r24, r1
    3506:	61 f0       	breq	.+24     	; 0x3520 <pow+0x3c>
    3508:	80 38       	cpi	r24, 0x80	; 128
    350a:	bf ef       	ldi	r27, 0xFF	; 255
    350c:	9b 07       	cpc	r25, r27
    350e:	41 f0       	breq	.+16     	; 0x3520 <pow+0x3c>
    3510:	99 23       	and	r25, r25
    3512:	4a f5       	brpl	.+82     	; 0x3566 <pow+0x82>
    3514:	ff 3f       	cpi	r31, 0xFF	; 255
    3516:	e1 05       	cpc	r30, r1
    3518:	31 05       	cpc	r19, r1
    351a:	21 05       	cpc	r18, r1
    351c:	19 f1       	breq	.+70     	; 0x3564 <pow+0x80>
    351e:	e8 94       	clt
    3520:	08 94       	sec
    3522:	e7 95       	ror	r30
    3524:	d9 01       	movw	r26, r18
    3526:	aa 23       	and	r26, r26
    3528:	29 f4       	brne	.+10     	; 0x3534 <pow+0x50>
    352a:	ab 2f       	mov	r26, r27
    352c:	be 2f       	mov	r27, r30
    352e:	f8 5f       	subi	r31, 0xF8	; 248
    3530:	d0 f3       	brcs	.-12     	; 0x3526 <pow+0x42>
    3532:	10 c0       	rjmp	.+32     	; 0x3554 <pow+0x70>
    3534:	ff 5f       	subi	r31, 0xFF	; 255
    3536:	70 f4       	brcc	.+28     	; 0x3554 <pow+0x70>
    3538:	a6 95       	lsr	r26
    353a:	e0 f7       	brcc	.-8      	; 0x3534 <pow+0x50>
    353c:	f7 39       	cpi	r31, 0x97	; 151
    353e:	50 f0       	brcs	.+20     	; 0x3554 <pow+0x70>
    3540:	19 f0       	breq	.+6      	; 0x3548 <pow+0x64>
    3542:	ff 3a       	cpi	r31, 0xAF	; 175
    3544:	38 f4       	brcc	.+14     	; 0x3554 <pow+0x70>
    3546:	9f 77       	andi	r25, 0x7F	; 127
    3548:	9f 93       	push	r25
    354a:	0d d0       	rcall	.+26     	; 0x3566 <pow+0x82>
    354c:	0f 90       	pop	r0
    354e:	07 fc       	sbrc	r0, 7
    3550:	90 58       	subi	r25, 0x80	; 128
    3552:	08 95       	ret
    3554:	46 f0       	brts	.+16     	; 0x3566 <pow+0x82>
    3556:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	80 e8       	ldi	r24, 0x80	; 128
    3560:	9f e3       	ldi	r25, 0x3F	; 63
    3562:	08 95       	ret
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	9f 77       	andi	r25, 0x7F	; 127
    3568:	5f 93       	push	r21
    356a:	4f 93       	push	r20
    356c:	3f 93       	push	r19
    356e:	2f 93       	push	r18
    3570:	0e 94 6d 1b 	call	0x36da	; 0x36da <log>
    3574:	2f 91       	pop	r18
    3576:	3f 91       	pop	r19
    3578:	4f 91       	pop	r20
    357a:	5f 91       	pop	r21
    357c:	0e 94 05 1a 	call	0x340a	; 0x340a <__mulsf3>
    3580:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <exp>
    3584:	29 f4       	brne	.+10     	; 0x3590 <pow+0xac>
    3586:	16 f0       	brts	.+4      	; 0x358c <pow+0xa8>
    3588:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    358c:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__fp_zero>
    3590:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>

00003594 <exp>:
    3594:	0e 94 df 19 	call	0x33be	; 0x33be <__fp_splitA>
    3598:	a8 f3       	brcs	.-22     	; 0x3584 <pow+0xa0>
    359a:	96 38       	cpi	r25, 0x86	; 134
    359c:	a0 f7       	brcc	.-24     	; 0x3586 <pow+0xa2>
    359e:	07 f8       	bld	r0, 7
    35a0:	0f 92       	push	r0
    35a2:	e8 94       	clt
    35a4:	2b e3       	ldi	r18, 0x3B	; 59
    35a6:	3a ea       	ldi	r19, 0xAA	; 170
    35a8:	48 eb       	ldi	r20, 0xB8	; 184
    35aa:	5f e7       	ldi	r21, 0x7F	; 127
    35ac:	0e 94 1b 1a 	call	0x3436	; 0x3436 <__mulsf3_pse>
    35b0:	0f 92       	push	r0
    35b2:	0f 92       	push	r0
    35b4:	0f 92       	push	r0
    35b6:	4d b7       	in	r20, 0x3d	; 61
    35b8:	5e b7       	in	r21, 0x3e	; 62
    35ba:	0f 92       	push	r0
    35bc:	0e 94 b5 1b 	call	0x376a	; 0x376a <modf>
    35c0:	e2 e5       	ldi	r30, 0x52	; 82
    35c2:	f2 e0       	ldi	r31, 0x02	; 2
    35c4:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fp_powser>
    35c8:	4f 91       	pop	r20
    35ca:	5f 91       	pop	r21
    35cc:	ef 91       	pop	r30
    35ce:	ff 91       	pop	r31
    35d0:	e5 95       	asr	r30
    35d2:	ee 1f       	adc	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	49 f0       	breq	.+18     	; 0x35ea <exp+0x56>
    35d8:	fe 57       	subi	r31, 0x7E	; 126
    35da:	e0 68       	ori	r30, 0x80	; 128
    35dc:	44 27       	eor	r20, r20
    35de:	ee 0f       	add	r30, r30
    35e0:	44 1f       	adc	r20, r20
    35e2:	fa 95       	dec	r31
    35e4:	e1 f7       	brne	.-8      	; 0x35de <exp+0x4a>
    35e6:	41 95       	neg	r20
    35e8:	55 0b       	sbc	r21, r21
    35ea:	0e 94 2f 1b 	call	0x365e	; 0x365e <ldexp>
    35ee:	0f 90       	pop	r0
    35f0:	07 fe       	sbrs	r0, 7
    35f2:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <inverse>
    35f6:	08 95       	ret

000035f8 <__fp_powser>:
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	1f 93       	push	r17
    35fe:	0f 93       	push	r16
    3600:	ff 92       	push	r15
    3602:	ef 92       	push	r14
    3604:	df 92       	push	r13
    3606:	7b 01       	movw	r14, r22
    3608:	8c 01       	movw	r16, r24
    360a:	68 94       	set
    360c:	06 c0       	rjmp	.+12     	; 0x361a <__fp_powser+0x22>
    360e:	da 2e       	mov	r13, r26
    3610:	ef 01       	movw	r28, r30
    3612:	0e 94 18 1a 	call	0x3430	; 0x3430 <__mulsf3x>
    3616:	fe 01       	movw	r30, r28
    3618:	e8 94       	clt
    361a:	a5 91       	lpm	r26, Z+
    361c:	25 91       	lpm	r18, Z+
    361e:	35 91       	lpm	r19, Z+
    3620:	45 91       	lpm	r20, Z+
    3622:	55 91       	lpm	r21, Z+
    3624:	a6 f3       	brts	.-24     	; 0x360e <__fp_powser+0x16>
    3626:	ef 01       	movw	r28, r30
    3628:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__addsf3x>
    362c:	fe 01       	movw	r30, r28
    362e:	97 01       	movw	r18, r14
    3630:	a8 01       	movw	r20, r16
    3632:	da 94       	dec	r13
    3634:	69 f7       	brne	.-38     	; 0x3610 <__fp_powser+0x18>
    3636:	df 90       	pop	r13
    3638:	ef 90       	pop	r14
    363a:	ff 90       	pop	r15
    363c:	0f 91       	pop	r16
    363e:	1f 91       	pop	r17
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <inverse>:
    3646:	9b 01       	movw	r18, r22
    3648:	ac 01       	movw	r20, r24
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	80 e8       	ldi	r24, 0x80	; 128
    3650:	9f e3       	ldi	r25, 0x3F	; 63
    3652:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__divsf3>
    3656:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>
    365a:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__fp_mpack>

0000365e <ldexp>:
    365e:	0e 94 df 19 	call	0x33be	; 0x33be <__fp_splitA>
    3662:	d8 f3       	brcs	.-10     	; 0x365a <inverse+0x14>
    3664:	99 23       	and	r25, r25
    3666:	c9 f3       	breq	.-14     	; 0x365a <inverse+0x14>
    3668:	94 0f       	add	r25, r20
    366a:	51 1d       	adc	r21, r1
    366c:	a3 f3       	brvs	.-24     	; 0x3656 <inverse+0x10>
    366e:	91 50       	subi	r25, 0x01	; 1
    3670:	50 40       	sbci	r21, 0x00	; 0
    3672:	94 f0       	brlt	.+36     	; 0x3698 <ldexp+0x3a>
    3674:	59 f0       	breq	.+22     	; 0x368c <ldexp+0x2e>
    3676:	88 23       	and	r24, r24
    3678:	32 f0       	brmi	.+12     	; 0x3686 <ldexp+0x28>
    367a:	66 0f       	add	r22, r22
    367c:	77 1f       	adc	r23, r23
    367e:	88 1f       	adc	r24, r24
    3680:	91 50       	subi	r25, 0x01	; 1
    3682:	50 40       	sbci	r21, 0x00	; 0
    3684:	c1 f7       	brne	.-16     	; 0x3676 <ldexp+0x18>
    3686:	9e 3f       	cpi	r25, 0xFE	; 254
    3688:	51 05       	cpc	r21, r1
    368a:	2c f7       	brge	.-54     	; 0x3656 <inverse+0x10>
    368c:	88 0f       	add	r24, r24
    368e:	91 1d       	adc	r25, r1
    3690:	96 95       	lsr	r25
    3692:	87 95       	ror	r24
    3694:	97 f9       	bld	r25, 7
    3696:	08 95       	ret
    3698:	5f 3f       	cpi	r21, 0xFF	; 255
    369a:	ac f0       	brlt	.+42     	; 0x36c6 <ldexp+0x68>
    369c:	98 3e       	cpi	r25, 0xE8	; 232
    369e:	9c f0       	brlt	.+38     	; 0x36c6 <ldexp+0x68>
    36a0:	bb 27       	eor	r27, r27
    36a2:	86 95       	lsr	r24
    36a4:	77 95       	ror	r23
    36a6:	67 95       	ror	r22
    36a8:	b7 95       	ror	r27
    36aa:	08 f4       	brcc	.+2      	; 0x36ae <ldexp+0x50>
    36ac:	b1 60       	ori	r27, 0x01	; 1
    36ae:	93 95       	inc	r25
    36b0:	c1 f7       	brne	.-16     	; 0x36a2 <ldexp+0x44>
    36b2:	bb 0f       	add	r27, r27
    36b4:	58 f7       	brcc	.-42     	; 0x368c <ldexp+0x2e>
    36b6:	11 f4       	brne	.+4      	; 0x36bc <ldexp+0x5e>
    36b8:	60 ff       	sbrs	r22, 0
    36ba:	e8 cf       	rjmp	.-48     	; 0x368c <ldexp+0x2e>
    36bc:	6f 5f       	subi	r22, 0xFF	; 255
    36be:	7f 4f       	sbci	r23, 0xFF	; 255
    36c0:	8f 4f       	sbci	r24, 0xFF	; 255
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	e3 cf       	rjmp	.-58     	; 0x368c <ldexp+0x2e>
    36c6:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_szero>
    36ca:	16 f0       	brts	.+4      	; 0x36d0 <ldexp+0x72>
    36cc:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__fp_mpack>
    36d0:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__fp_nan>
    36d4:	68 94       	set
    36d6:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_inf>

000036da <log>:
    36da:	0e 94 df 19 	call	0x33be	; 0x33be <__fp_splitA>
    36de:	a8 f3       	brcs	.-22     	; 0x36ca <ldexp+0x6c>
    36e0:	99 23       	and	r25, r25
    36e2:	c1 f3       	breq	.-16     	; 0x36d4 <ldexp+0x76>
    36e4:	ae f3       	brts	.-22     	; 0x36d0 <ldexp+0x72>
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	1f 93       	push	r17
    36ec:	0f 93       	push	r16
    36ee:	ff 92       	push	r15
    36f0:	c9 2f       	mov	r28, r25
    36f2:	dd 27       	eor	r29, r29
    36f4:	88 23       	and	r24, r24
    36f6:	2a f0       	brmi	.+10     	; 0x3702 <log+0x28>
    36f8:	21 97       	sbiw	r28, 0x01	; 1
    36fa:	66 0f       	add	r22, r22
    36fc:	77 1f       	adc	r23, r23
    36fe:	88 1f       	adc	r24, r24
    3700:	da f7       	brpl	.-10     	; 0x36f8 <log+0x1e>
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f eb       	ldi	r21, 0xBF	; 191
    370a:	9f e3       	ldi	r25, 0x3F	; 63
    370c:	88 39       	cpi	r24, 0x98	; 152
    370e:	20 f0       	brcs	.+8      	; 0x3718 <log+0x3e>
    3710:	80 3e       	cpi	r24, 0xE0	; 224
    3712:	38 f0       	brcs	.+14     	; 0x3722 <log+0x48>
    3714:	21 96       	adiw	r28, 0x01	; 1
    3716:	8f 77       	andi	r24, 0x7F	; 127
    3718:	0e 94 3a 18 	call	0x3074	; 0x3074 <__addsf3>
    371c:	ea e7       	ldi	r30, 0x7A	; 122
    371e:	f2 e0       	ldi	r31, 0x02	; 2
    3720:	04 c0       	rjmp	.+8      	; 0x372a <log+0x50>
    3722:	0e 94 3a 18 	call	0x3074	; 0x3074 <__addsf3>
    3726:	e7 ea       	ldi	r30, 0xA7	; 167
    3728:	f2 e0       	ldi	r31, 0x02	; 2
    372a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fp_powser>
    372e:	8b 01       	movw	r16, r22
    3730:	be 01       	movw	r22, r28
    3732:	ec 01       	movw	r28, r24
    3734:	fb 2e       	mov	r15, r27
    3736:	6f 57       	subi	r22, 0x7F	; 127
    3738:	71 09       	sbc	r23, r1
    373a:	75 95       	asr	r23
    373c:	77 1f       	adc	r23, r23
    373e:	88 0b       	sbc	r24, r24
    3740:	99 0b       	sbc	r25, r25
    3742:	0e 94 50 19 	call	0x32a0	; 0x32a0 <__floatsisf>
    3746:	28 e1       	ldi	r18, 0x18	; 24
    3748:	32 e7       	ldi	r19, 0x72	; 114
    374a:	41 e3       	ldi	r20, 0x31	; 49
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__mulsf3x>
    3752:	af 2d       	mov	r26, r15
    3754:	98 01       	movw	r18, r16
    3756:	ae 01       	movw	r20, r28
    3758:	ff 90       	pop	r15
    375a:	0f 91       	pop	r16
    375c:	1f 91       	pop	r17
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__addsf3x>
    3766:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__fp_round>

0000376a <modf>:
    376a:	fa 01       	movw	r30, r20
    376c:	dc 01       	movw	r26, r24
    376e:	aa 0f       	add	r26, r26
    3770:	bb 1f       	adc	r27, r27
    3772:	9b 01       	movw	r18, r22
    3774:	ac 01       	movw	r20, r24
    3776:	bf 57       	subi	r27, 0x7F	; 127
    3778:	28 f4       	brcc	.+10     	; 0x3784 <modf+0x1a>
    377a:	22 27       	eor	r18, r18
    377c:	33 27       	eor	r19, r19
    377e:	44 27       	eor	r20, r20
    3780:	50 78       	andi	r21, 0x80	; 128
    3782:	20 c0       	rjmp	.+64     	; 0x37c4 <modf+0x5a>
    3784:	b7 51       	subi	r27, 0x17	; 23
    3786:	90 f4       	brcc	.+36     	; 0x37ac <modf+0x42>
    3788:	ab 2f       	mov	r26, r27
    378a:	00 24       	eor	r0, r0
    378c:	46 95       	lsr	r20
    378e:	37 95       	ror	r19
    3790:	27 95       	ror	r18
    3792:	01 1c       	adc	r0, r1
    3794:	a3 95       	inc	r26
    3796:	d2 f3       	brmi	.-12     	; 0x378c <modf+0x22>
    3798:	00 20       	and	r0, r0
    379a:	71 f0       	breq	.+28     	; 0x37b8 <modf+0x4e>
    379c:	22 0f       	add	r18, r18
    379e:	33 1f       	adc	r19, r19
    37a0:	44 1f       	adc	r20, r20
    37a2:	b3 95       	inc	r27
    37a4:	da f3       	brmi	.-10     	; 0x379c <modf+0x32>
    37a6:	0e d0       	rcall	.+28     	; 0x37c4 <modf+0x5a>
    37a8:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__subsf3>
    37ac:	61 30       	cpi	r22, 0x01	; 1
    37ae:	71 05       	cpc	r23, r1
    37b0:	a0 e8       	ldi	r26, 0x80	; 128
    37b2:	8a 07       	cpc	r24, r26
    37b4:	b9 46       	sbci	r27, 0x69	; 105
    37b6:	30 f4       	brcc	.+12     	; 0x37c4 <modf+0x5a>
    37b8:	9b 01       	movw	r18, r22
    37ba:	ac 01       	movw	r20, r24
    37bc:	66 27       	eor	r22, r22
    37be:	77 27       	eor	r23, r23
    37c0:	88 27       	eor	r24, r24
    37c2:	90 78       	andi	r25, 0x80	; 128
    37c4:	30 96       	adiw	r30, 0x00	; 0
    37c6:	21 f0       	breq	.+8      	; 0x37d0 <modf+0x66>
    37c8:	20 83       	st	Z, r18
    37ca:	31 83       	std	Z+1, r19	; 0x01
    37cc:	42 83       	std	Z+2, r20	; 0x02
    37ce:	53 83       	std	Z+3, r21	; 0x03
    37d0:	08 95       	ret

000037d2 <__fp_mpack>:
    37d2:	9f 3f       	cpi	r25, 0xFF	; 255
    37d4:	31 f0       	breq	.+12     	; 0x37e2 <__fp_mpack_finite+0xc>

000037d6 <__fp_mpack_finite>:
    37d6:	91 50       	subi	r25, 0x01	; 1
    37d8:	20 f4       	brcc	.+8      	; 0x37e2 <__fp_mpack_finite+0xc>
    37da:	87 95       	ror	r24
    37dc:	77 95       	ror	r23
    37de:	67 95       	ror	r22
    37e0:	b7 95       	ror	r27
    37e2:	88 0f       	add	r24, r24
    37e4:	91 1d       	adc	r25, r1
    37e6:	96 95       	lsr	r25
    37e8:	87 95       	ror	r24
    37ea:	97 f9       	bld	r25, 7
    37ec:	08 95       	ret

000037ee <vfprintf>:
    37ee:	a0 e1       	ldi	r26, 0x10	; 16
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	ed ef       	ldi	r30, 0xFD	; 253
    37f4:	fb e1       	ldi	r31, 0x1B	; 27
    37f6:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__prologue_saves__>
    37fa:	7c 01       	movw	r14, r24
    37fc:	1b 01       	movw	r2, r22
    37fe:	6a 01       	movw	r12, r20
    3800:	fc 01       	movw	r30, r24
    3802:	17 82       	std	Z+7, r1	; 0x07
    3804:	16 82       	std	Z+6, r1	; 0x06
    3806:	83 81       	ldd	r24, Z+3	; 0x03
    3808:	81 ff       	sbrs	r24, 1
    380a:	44 c3       	rjmp	.+1672   	; 0x3e94 <vfprintf+0x6a6>
    380c:	9e 01       	movw	r18, r28
    380e:	2f 5f       	subi	r18, 0xFF	; 255
    3810:	3f 4f       	sbci	r19, 0xFF	; 255
    3812:	39 01       	movw	r6, r18
    3814:	f7 01       	movw	r30, r14
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	f1 01       	movw	r30, r2
    381a:	93 fd       	sbrc	r25, 3
    381c:	85 91       	lpm	r24, Z+
    381e:	93 ff       	sbrs	r25, 3
    3820:	81 91       	ld	r24, Z+
    3822:	1f 01       	movw	r2, r30
    3824:	88 23       	and	r24, r24
    3826:	09 f4       	brne	.+2      	; 0x382a <vfprintf+0x3c>
    3828:	31 c3       	rjmp	.+1634   	; 0x3e8c <vfprintf+0x69e>
    382a:	85 32       	cpi	r24, 0x25	; 37
    382c:	39 f4       	brne	.+14     	; 0x383c <vfprintf+0x4e>
    382e:	93 fd       	sbrc	r25, 3
    3830:	85 91       	lpm	r24, Z+
    3832:	93 ff       	sbrs	r25, 3
    3834:	81 91       	ld	r24, Z+
    3836:	1f 01       	movw	r2, r30
    3838:	85 32       	cpi	r24, 0x25	; 37
    383a:	39 f4       	brne	.+14     	; 0x384a <vfprintf+0x5c>
    383c:	b7 01       	movw	r22, r14
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3844:	56 01       	movw	r10, r12
    3846:	65 01       	movw	r12, r10
    3848:	e5 cf       	rjmp	.-54     	; 0x3814 <vfprintf+0x26>
    384a:	10 e0       	ldi	r17, 0x00	; 0
    384c:	51 2c       	mov	r5, r1
    384e:	91 2c       	mov	r9, r1
    3850:	ff e1       	ldi	r31, 0x1F	; 31
    3852:	f9 15       	cp	r31, r9
    3854:	d8 f0       	brcs	.+54     	; 0x388c <vfprintf+0x9e>
    3856:	8b 32       	cpi	r24, 0x2B	; 43
    3858:	79 f0       	breq	.+30     	; 0x3878 <vfprintf+0x8a>
    385a:	38 f4       	brcc	.+14     	; 0x386a <vfprintf+0x7c>
    385c:	80 32       	cpi	r24, 0x20	; 32
    385e:	79 f0       	breq	.+30     	; 0x387e <vfprintf+0x90>
    3860:	83 32       	cpi	r24, 0x23	; 35
    3862:	a1 f4       	brne	.+40     	; 0x388c <vfprintf+0x9e>
    3864:	f9 2d       	mov	r31, r9
    3866:	f0 61       	ori	r31, 0x10	; 16
    3868:	2e c0       	rjmp	.+92     	; 0x38c6 <vfprintf+0xd8>
    386a:	8d 32       	cpi	r24, 0x2D	; 45
    386c:	61 f0       	breq	.+24     	; 0x3886 <vfprintf+0x98>
    386e:	80 33       	cpi	r24, 0x30	; 48
    3870:	69 f4       	brne	.+26     	; 0x388c <vfprintf+0x9e>
    3872:	29 2d       	mov	r18, r9
    3874:	21 60       	ori	r18, 0x01	; 1
    3876:	2d c0       	rjmp	.+90     	; 0x38d2 <vfprintf+0xe4>
    3878:	39 2d       	mov	r19, r9
    387a:	32 60       	ori	r19, 0x02	; 2
    387c:	93 2e       	mov	r9, r19
    387e:	89 2d       	mov	r24, r9
    3880:	84 60       	ori	r24, 0x04	; 4
    3882:	98 2e       	mov	r9, r24
    3884:	2a c0       	rjmp	.+84     	; 0x38da <vfprintf+0xec>
    3886:	e9 2d       	mov	r30, r9
    3888:	e8 60       	ori	r30, 0x08	; 8
    388a:	15 c0       	rjmp	.+42     	; 0x38b6 <vfprintf+0xc8>
    388c:	97 fc       	sbrc	r9, 7
    388e:	2d c0       	rjmp	.+90     	; 0x38ea <vfprintf+0xfc>
    3890:	20 ed       	ldi	r18, 0xD0	; 208
    3892:	28 0f       	add	r18, r24
    3894:	2a 30       	cpi	r18, 0x0A	; 10
    3896:	88 f4       	brcc	.+34     	; 0x38ba <vfprintf+0xcc>
    3898:	96 fe       	sbrs	r9, 6
    389a:	06 c0       	rjmp	.+12     	; 0x38a8 <vfprintf+0xba>
    389c:	3a e0       	ldi	r19, 0x0A	; 10
    389e:	13 9f       	mul	r17, r19
    38a0:	20 0d       	add	r18, r0
    38a2:	11 24       	eor	r1, r1
    38a4:	12 2f       	mov	r17, r18
    38a6:	19 c0       	rjmp	.+50     	; 0x38da <vfprintf+0xec>
    38a8:	8a e0       	ldi	r24, 0x0A	; 10
    38aa:	58 9e       	mul	r5, r24
    38ac:	20 0d       	add	r18, r0
    38ae:	11 24       	eor	r1, r1
    38b0:	52 2e       	mov	r5, r18
    38b2:	e9 2d       	mov	r30, r9
    38b4:	e0 62       	ori	r30, 0x20	; 32
    38b6:	9e 2e       	mov	r9, r30
    38b8:	10 c0       	rjmp	.+32     	; 0x38da <vfprintf+0xec>
    38ba:	8e 32       	cpi	r24, 0x2E	; 46
    38bc:	31 f4       	brne	.+12     	; 0x38ca <vfprintf+0xdc>
    38be:	96 fc       	sbrc	r9, 6
    38c0:	e5 c2       	rjmp	.+1482   	; 0x3e8c <vfprintf+0x69e>
    38c2:	f9 2d       	mov	r31, r9
    38c4:	f0 64       	ori	r31, 0x40	; 64
    38c6:	9f 2e       	mov	r9, r31
    38c8:	08 c0       	rjmp	.+16     	; 0x38da <vfprintf+0xec>
    38ca:	8c 36       	cpi	r24, 0x6C	; 108
    38cc:	21 f4       	brne	.+8      	; 0x38d6 <vfprintf+0xe8>
    38ce:	29 2d       	mov	r18, r9
    38d0:	20 68       	ori	r18, 0x80	; 128
    38d2:	92 2e       	mov	r9, r18
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <vfprintf+0xec>
    38d6:	88 36       	cpi	r24, 0x68	; 104
    38d8:	41 f4       	brne	.+16     	; 0x38ea <vfprintf+0xfc>
    38da:	f1 01       	movw	r30, r2
    38dc:	93 fd       	sbrc	r25, 3
    38de:	85 91       	lpm	r24, Z+
    38e0:	93 ff       	sbrs	r25, 3
    38e2:	81 91       	ld	r24, Z+
    38e4:	1f 01       	movw	r2, r30
    38e6:	81 11       	cpse	r24, r1
    38e8:	b3 cf       	rjmp	.-154    	; 0x3850 <vfprintf+0x62>
    38ea:	9b eb       	ldi	r25, 0xBB	; 187
    38ec:	98 0f       	add	r25, r24
    38ee:	93 30       	cpi	r25, 0x03	; 3
    38f0:	20 f4       	brcc	.+8      	; 0x38fa <vfprintf+0x10c>
    38f2:	99 2d       	mov	r25, r9
    38f4:	90 61       	ori	r25, 0x10	; 16
    38f6:	80 5e       	subi	r24, 0xE0	; 224
    38f8:	07 c0       	rjmp	.+14     	; 0x3908 <vfprintf+0x11a>
    38fa:	9b e9       	ldi	r25, 0x9B	; 155
    38fc:	98 0f       	add	r25, r24
    38fe:	93 30       	cpi	r25, 0x03	; 3
    3900:	08 f0       	brcs	.+2      	; 0x3904 <vfprintf+0x116>
    3902:	66 c1       	rjmp	.+716    	; 0x3bd0 <vfprintf+0x3e2>
    3904:	99 2d       	mov	r25, r9
    3906:	9f 7e       	andi	r25, 0xEF	; 239
    3908:	96 ff       	sbrs	r25, 6
    390a:	16 e0       	ldi	r17, 0x06	; 6
    390c:	9f 73       	andi	r25, 0x3F	; 63
    390e:	99 2e       	mov	r9, r25
    3910:	85 36       	cpi	r24, 0x65	; 101
    3912:	19 f4       	brne	.+6      	; 0x391a <vfprintf+0x12c>
    3914:	90 64       	ori	r25, 0x40	; 64
    3916:	99 2e       	mov	r9, r25
    3918:	08 c0       	rjmp	.+16     	; 0x392a <vfprintf+0x13c>
    391a:	86 36       	cpi	r24, 0x66	; 102
    391c:	21 f4       	brne	.+8      	; 0x3926 <vfprintf+0x138>
    391e:	39 2f       	mov	r19, r25
    3920:	30 68       	ori	r19, 0x80	; 128
    3922:	93 2e       	mov	r9, r19
    3924:	02 c0       	rjmp	.+4      	; 0x392a <vfprintf+0x13c>
    3926:	11 11       	cpse	r17, r1
    3928:	11 50       	subi	r17, 0x01	; 1
    392a:	97 fe       	sbrs	r9, 7
    392c:	07 c0       	rjmp	.+14     	; 0x393c <vfprintf+0x14e>
    392e:	1c 33       	cpi	r17, 0x3C	; 60
    3930:	50 f4       	brcc	.+20     	; 0x3946 <vfprintf+0x158>
    3932:	44 24       	eor	r4, r4
    3934:	43 94       	inc	r4
    3936:	41 0e       	add	r4, r17
    3938:	27 e0       	ldi	r18, 0x07	; 7
    393a:	0b c0       	rjmp	.+22     	; 0x3952 <vfprintf+0x164>
    393c:	18 30       	cpi	r17, 0x08	; 8
    393e:	38 f0       	brcs	.+14     	; 0x394e <vfprintf+0x160>
    3940:	27 e0       	ldi	r18, 0x07	; 7
    3942:	17 e0       	ldi	r17, 0x07	; 7
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <vfprintf+0x162>
    3946:	27 e0       	ldi	r18, 0x07	; 7
    3948:	9c e3       	ldi	r25, 0x3C	; 60
    394a:	49 2e       	mov	r4, r25
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <vfprintf+0x164>
    394e:	21 2f       	mov	r18, r17
    3950:	41 2c       	mov	r4, r1
    3952:	56 01       	movw	r10, r12
    3954:	84 e0       	ldi	r24, 0x04	; 4
    3956:	a8 0e       	add	r10, r24
    3958:	b1 1c       	adc	r11, r1
    395a:	f6 01       	movw	r30, r12
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	04 2d       	mov	r16, r4
    3966:	a3 01       	movw	r20, r6
    3968:	0e 94 0a 20 	call	0x4014	; 0x4014 <__ftoa_engine>
    396c:	6c 01       	movw	r12, r24
    396e:	f9 81       	ldd	r31, Y+1	; 0x01
    3970:	fc 87       	std	Y+12, r31	; 0x0c
    3972:	f0 ff       	sbrs	r31, 0
    3974:	02 c0       	rjmp	.+4      	; 0x397a <vfprintf+0x18c>
    3976:	f3 ff       	sbrs	r31, 3
    3978:	06 c0       	rjmp	.+12     	; 0x3986 <vfprintf+0x198>
    397a:	91 fc       	sbrc	r9, 1
    397c:	06 c0       	rjmp	.+12     	; 0x398a <vfprintf+0x19c>
    397e:	92 fe       	sbrs	r9, 2
    3980:	06 c0       	rjmp	.+12     	; 0x398e <vfprintf+0x1a0>
    3982:	00 e2       	ldi	r16, 0x20	; 32
    3984:	05 c0       	rjmp	.+10     	; 0x3990 <vfprintf+0x1a2>
    3986:	0d e2       	ldi	r16, 0x2D	; 45
    3988:	03 c0       	rjmp	.+6      	; 0x3990 <vfprintf+0x1a2>
    398a:	0b e2       	ldi	r16, 0x2B	; 43
    398c:	01 c0       	rjmp	.+2      	; 0x3990 <vfprintf+0x1a2>
    398e:	00 e0       	ldi	r16, 0x00	; 0
    3990:	8c 85       	ldd	r24, Y+12	; 0x0c
    3992:	8c 70       	andi	r24, 0x0C	; 12
    3994:	19 f0       	breq	.+6      	; 0x399c <vfprintf+0x1ae>
    3996:	01 11       	cpse	r16, r1
    3998:	5a c2       	rjmp	.+1204   	; 0x3e4e <vfprintf+0x660>
    399a:	9b c2       	rjmp	.+1334   	; 0x3ed2 <vfprintf+0x6e4>
    399c:	97 fe       	sbrs	r9, 7
    399e:	10 c0       	rjmp	.+32     	; 0x39c0 <vfprintf+0x1d2>
    39a0:	4c 0c       	add	r4, r12
    39a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    39a4:	f4 ff       	sbrs	r31, 4
    39a6:	04 c0       	rjmp	.+8      	; 0x39b0 <vfprintf+0x1c2>
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	81 33       	cpi	r24, 0x31	; 49
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <vfprintf+0x1c2>
    39ae:	4a 94       	dec	r4
    39b0:	14 14       	cp	r1, r4
    39b2:	74 f5       	brge	.+92     	; 0x3a10 <vfprintf+0x222>
    39b4:	28 e0       	ldi	r18, 0x08	; 8
    39b6:	24 15       	cp	r18, r4
    39b8:	78 f5       	brcc	.+94     	; 0x3a18 <vfprintf+0x22a>
    39ba:	88 e0       	ldi	r24, 0x08	; 8
    39bc:	48 2e       	mov	r4, r24
    39be:	2c c0       	rjmp	.+88     	; 0x3a18 <vfprintf+0x22a>
    39c0:	96 fc       	sbrc	r9, 6
    39c2:	2a c0       	rjmp	.+84     	; 0x3a18 <vfprintf+0x22a>
    39c4:	81 2f       	mov	r24, r17
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	8c 15       	cp	r24, r12
    39ca:	9d 05       	cpc	r25, r13
    39cc:	9c f0       	brlt	.+38     	; 0x39f4 <vfprintf+0x206>
    39ce:	3c ef       	ldi	r19, 0xFC	; 252
    39d0:	c3 16       	cp	r12, r19
    39d2:	3f ef       	ldi	r19, 0xFF	; 255
    39d4:	d3 06       	cpc	r13, r19
    39d6:	74 f0       	brlt	.+28     	; 0x39f4 <vfprintf+0x206>
    39d8:	89 2d       	mov	r24, r9
    39da:	80 68       	ori	r24, 0x80	; 128
    39dc:	98 2e       	mov	r9, r24
    39de:	0a c0       	rjmp	.+20     	; 0x39f4 <vfprintf+0x206>
    39e0:	e2 e0       	ldi	r30, 0x02	; 2
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	ec 0f       	add	r30, r28
    39e6:	fd 1f       	adc	r31, r29
    39e8:	e1 0f       	add	r30, r17
    39ea:	f1 1d       	adc	r31, r1
    39ec:	80 81       	ld	r24, Z
    39ee:	80 33       	cpi	r24, 0x30	; 48
    39f0:	19 f4       	brne	.+6      	; 0x39f8 <vfprintf+0x20a>
    39f2:	11 50       	subi	r17, 0x01	; 1
    39f4:	11 11       	cpse	r17, r1
    39f6:	f4 cf       	rjmp	.-24     	; 0x39e0 <vfprintf+0x1f2>
    39f8:	97 fe       	sbrs	r9, 7
    39fa:	0e c0       	rjmp	.+28     	; 0x3a18 <vfprintf+0x22a>
    39fc:	44 24       	eor	r4, r4
    39fe:	43 94       	inc	r4
    3a00:	41 0e       	add	r4, r17
    3a02:	81 2f       	mov	r24, r17
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	c8 16       	cp	r12, r24
    3a08:	d9 06       	cpc	r13, r25
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <vfprintf+0x228>
    3a0c:	1c 19       	sub	r17, r12
    3a0e:	04 c0       	rjmp	.+8      	; 0x3a18 <vfprintf+0x22a>
    3a10:	44 24       	eor	r4, r4
    3a12:	43 94       	inc	r4
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <vfprintf+0x22a>
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	97 fe       	sbrs	r9, 7
    3a1a:	06 c0       	rjmp	.+12     	; 0x3a28 <vfprintf+0x23a>
    3a1c:	1c 14       	cp	r1, r12
    3a1e:	1d 04       	cpc	r1, r13
    3a20:	34 f4       	brge	.+12     	; 0x3a2e <vfprintf+0x240>
    3a22:	c6 01       	movw	r24, r12
    3a24:	01 96       	adiw	r24, 0x01	; 1
    3a26:	05 c0       	rjmp	.+10     	; 0x3a32 <vfprintf+0x244>
    3a28:	85 e0       	ldi	r24, 0x05	; 5
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <vfprintf+0x244>
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	01 11       	cpse	r16, r1
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	11 23       	and	r17, r17
    3a38:	31 f0       	breq	.+12     	; 0x3a46 <vfprintf+0x258>
    3a3a:	21 2f       	mov	r18, r17
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	2f 5f       	subi	r18, 0xFF	; 255
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	82 0f       	add	r24, r18
    3a44:	93 1f       	adc	r25, r19
    3a46:	25 2d       	mov	r18, r5
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	82 17       	cp	r24, r18
    3a4c:	93 07       	cpc	r25, r19
    3a4e:	14 f4       	brge	.+4      	; 0x3a54 <vfprintf+0x266>
    3a50:	58 1a       	sub	r5, r24
    3a52:	01 c0       	rjmp	.+2      	; 0x3a56 <vfprintf+0x268>
    3a54:	51 2c       	mov	r5, r1
    3a56:	89 2d       	mov	r24, r9
    3a58:	89 70       	andi	r24, 0x09	; 9
    3a5a:	49 f4       	brne	.+18     	; 0x3a6e <vfprintf+0x280>
    3a5c:	55 20       	and	r5, r5
    3a5e:	39 f0       	breq	.+14     	; 0x3a6e <vfprintf+0x280>
    3a60:	b7 01       	movw	r22, r14
    3a62:	80 e2       	ldi	r24, 0x20	; 32
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3a6a:	5a 94       	dec	r5
    3a6c:	f7 cf       	rjmp	.-18     	; 0x3a5c <vfprintf+0x26e>
    3a6e:	00 23       	and	r16, r16
    3a70:	29 f0       	breq	.+10     	; 0x3a7c <vfprintf+0x28e>
    3a72:	b7 01       	movw	r22, r14
    3a74:	80 2f       	mov	r24, r16
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3a7c:	93 fc       	sbrc	r9, 3
    3a7e:	09 c0       	rjmp	.+18     	; 0x3a92 <vfprintf+0x2a4>
    3a80:	55 20       	and	r5, r5
    3a82:	39 f0       	breq	.+14     	; 0x3a92 <vfprintf+0x2a4>
    3a84:	b7 01       	movw	r22, r14
    3a86:	80 e3       	ldi	r24, 0x30	; 48
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3a8e:	5a 94       	dec	r5
    3a90:	f7 cf       	rjmp	.-18     	; 0x3a80 <vfprintf+0x292>
    3a92:	97 fe       	sbrs	r9, 7
    3a94:	4c c0       	rjmp	.+152    	; 0x3b2e <vfprintf+0x340>
    3a96:	46 01       	movw	r8, r12
    3a98:	d7 fe       	sbrs	r13, 7
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <vfprintf+0x2b2>
    3a9c:	81 2c       	mov	r8, r1
    3a9e:	91 2c       	mov	r9, r1
    3aa0:	c6 01       	movw	r24, r12
    3aa2:	88 19       	sub	r24, r8
    3aa4:	99 09       	sbc	r25, r9
    3aa6:	f3 01       	movw	r30, r6
    3aa8:	e8 0f       	add	r30, r24
    3aaa:	f9 1f       	adc	r31, r25
    3aac:	fe 87       	std	Y+14, r31	; 0x0e
    3aae:	ed 87       	std	Y+13, r30	; 0x0d
    3ab0:	96 01       	movw	r18, r12
    3ab2:	24 19       	sub	r18, r4
    3ab4:	31 09       	sbc	r19, r1
    3ab6:	38 8b       	std	Y+16, r19	; 0x10
    3ab8:	2f 87       	std	Y+15, r18	; 0x0f
    3aba:	01 2f       	mov	r16, r17
    3abc:	10 e0       	ldi	r17, 0x00	; 0
    3abe:	11 95       	neg	r17
    3ac0:	01 95       	neg	r16
    3ac2:	11 09       	sbc	r17, r1
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	83 16       	cp	r8, r19
    3ac8:	93 06       	cpc	r9, r19
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <vfprintf+0x2e8>
    3acc:	b7 01       	movw	r22, r14
    3ace:	8e e2       	ldi	r24, 0x2E	; 46
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3ad6:	c8 14       	cp	r12, r8
    3ad8:	d9 04       	cpc	r13, r9
    3ada:	4c f0       	brlt	.+18     	; 0x3aee <vfprintf+0x300>
    3adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ade:	98 89       	ldd	r25, Y+16	; 0x10
    3ae0:	88 15       	cp	r24, r8
    3ae2:	99 05       	cpc	r25, r9
    3ae4:	24 f4       	brge	.+8      	; 0x3aee <vfprintf+0x300>
    3ae6:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ae8:	fe 85       	ldd	r31, Y+14	; 0x0e
    3aea:	81 81       	ldd	r24, Z+1	; 0x01
    3aec:	01 c0       	rjmp	.+2      	; 0x3af0 <vfprintf+0x302>
    3aee:	80 e3       	ldi	r24, 0x30	; 48
    3af0:	f1 e0       	ldi	r31, 0x01	; 1
    3af2:	8f 1a       	sub	r8, r31
    3af4:	91 08       	sbc	r9, r1
    3af6:	2d 85       	ldd	r18, Y+13	; 0x0d
    3af8:	3e 85       	ldd	r19, Y+14	; 0x0e
    3afa:	2f 5f       	subi	r18, 0xFF	; 255
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	3e 87       	std	Y+14, r19	; 0x0e
    3b00:	2d 87       	std	Y+13, r18	; 0x0d
    3b02:	80 16       	cp	r8, r16
    3b04:	91 06       	cpc	r9, r17
    3b06:	2c f0       	brlt	.+10     	; 0x3b12 <vfprintf+0x324>
    3b08:	b7 01       	movw	r22, r14
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3b10:	d9 cf       	rjmp	.-78     	; 0x3ac4 <vfprintf+0x2d6>
    3b12:	c8 14       	cp	r12, r8
    3b14:	d9 04       	cpc	r13, r9
    3b16:	41 f4       	brne	.+16     	; 0x3b28 <vfprintf+0x33a>
    3b18:	9a 81       	ldd	r25, Y+2	; 0x02
    3b1a:	96 33       	cpi	r25, 0x36	; 54
    3b1c:	20 f4       	brcc	.+8      	; 0x3b26 <vfprintf+0x338>
    3b1e:	95 33       	cpi	r25, 0x35	; 53
    3b20:	19 f4       	brne	.+6      	; 0x3b28 <vfprintf+0x33a>
    3b22:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b24:	34 ff       	sbrs	r19, 4
    3b26:	81 e3       	ldi	r24, 0x31	; 49
    3b28:	b7 01       	movw	r22, r14
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	4e c0       	rjmp	.+156    	; 0x3bca <vfprintf+0x3dc>
    3b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b30:	81 33       	cpi	r24, 0x31	; 49
    3b32:	19 f0       	breq	.+6      	; 0x3b3a <vfprintf+0x34c>
    3b34:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b36:	9f 7e       	andi	r25, 0xEF	; 239
    3b38:	9c 87       	std	Y+12, r25	; 0x0c
    3b3a:	b7 01       	movw	r22, r14
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3b42:	11 11       	cpse	r17, r1
    3b44:	05 c0       	rjmp	.+10     	; 0x3b50 <vfprintf+0x362>
    3b46:	94 fc       	sbrc	r9, 4
    3b48:	18 c0       	rjmp	.+48     	; 0x3b7a <vfprintf+0x38c>
    3b4a:	85 e6       	ldi	r24, 0x65	; 101
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	17 c0       	rjmp	.+46     	; 0x3b7e <vfprintf+0x390>
    3b50:	b7 01       	movw	r22, r14
    3b52:	8e e2       	ldi	r24, 0x2E	; 46
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3b5a:	1e 5f       	subi	r17, 0xFE	; 254
    3b5c:	82 e0       	ldi	r24, 0x02	; 2
    3b5e:	01 e0       	ldi	r16, 0x01	; 1
    3b60:	08 0f       	add	r16, r24
    3b62:	f3 01       	movw	r30, r6
    3b64:	e8 0f       	add	r30, r24
    3b66:	f1 1d       	adc	r31, r1
    3b68:	80 81       	ld	r24, Z
    3b6a:	b7 01       	movw	r22, r14
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3b72:	80 2f       	mov	r24, r16
    3b74:	01 13       	cpse	r16, r17
    3b76:	f3 cf       	rjmp	.-26     	; 0x3b5e <vfprintf+0x370>
    3b78:	e6 cf       	rjmp	.-52     	; 0x3b46 <vfprintf+0x358>
    3b7a:	85 e4       	ldi	r24, 0x45	; 69
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	b7 01       	movw	r22, r14
    3b80:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3b84:	d7 fc       	sbrc	r13, 7
    3b86:	06 c0       	rjmp	.+12     	; 0x3b94 <vfprintf+0x3a6>
    3b88:	c1 14       	cp	r12, r1
    3b8a:	d1 04       	cpc	r13, r1
    3b8c:	41 f4       	brne	.+16     	; 0x3b9e <vfprintf+0x3b0>
    3b8e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b90:	e4 ff       	sbrs	r30, 4
    3b92:	05 c0       	rjmp	.+10     	; 0x3b9e <vfprintf+0x3b0>
    3b94:	d1 94       	neg	r13
    3b96:	c1 94       	neg	r12
    3b98:	d1 08       	sbc	r13, r1
    3b9a:	8d e2       	ldi	r24, 0x2D	; 45
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <vfprintf+0x3b2>
    3b9e:	8b e2       	ldi	r24, 0x2B	; 43
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3ba8:	80 e3       	ldi	r24, 0x30	; 48
    3baa:	2a e0       	ldi	r18, 0x0A	; 10
    3bac:	c2 16       	cp	r12, r18
    3bae:	d1 04       	cpc	r13, r1
    3bb0:	2c f0       	brlt	.+10     	; 0x3bbc <vfprintf+0x3ce>
    3bb2:	8f 5f       	subi	r24, 0xFF	; 255
    3bb4:	fa e0       	ldi	r31, 0x0A	; 10
    3bb6:	cf 1a       	sub	r12, r31
    3bb8:	d1 08       	sbc	r13, r1
    3bba:	f7 cf       	rjmp	.-18     	; 0x3baa <vfprintf+0x3bc>
    3bbc:	b7 01       	movw	r22, r14
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3bc4:	b7 01       	movw	r22, r14
    3bc6:	c6 01       	movw	r24, r12
    3bc8:	c0 96       	adiw	r24, 0x30	; 48
    3bca:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3bce:	54 c1       	rjmp	.+680    	; 0x3e78 <vfprintf+0x68a>
    3bd0:	83 36       	cpi	r24, 0x63	; 99
    3bd2:	31 f0       	breq	.+12     	; 0x3be0 <vfprintf+0x3f2>
    3bd4:	83 37       	cpi	r24, 0x73	; 115
    3bd6:	79 f0       	breq	.+30     	; 0x3bf6 <vfprintf+0x408>
    3bd8:	83 35       	cpi	r24, 0x53	; 83
    3bda:	09 f0       	breq	.+2      	; 0x3bde <vfprintf+0x3f0>
    3bdc:	56 c0       	rjmp	.+172    	; 0x3c8a <vfprintf+0x49c>
    3bde:	20 c0       	rjmp	.+64     	; 0x3c20 <vfprintf+0x432>
    3be0:	56 01       	movw	r10, r12
    3be2:	32 e0       	ldi	r19, 0x02	; 2
    3be4:	a3 0e       	add	r10, r19
    3be6:	b1 1c       	adc	r11, r1
    3be8:	f6 01       	movw	r30, r12
    3bea:	80 81       	ld	r24, Z
    3bec:	89 83       	std	Y+1, r24	; 0x01
    3bee:	01 e0       	ldi	r16, 0x01	; 1
    3bf0:	10 e0       	ldi	r17, 0x00	; 0
    3bf2:	63 01       	movw	r12, r6
    3bf4:	12 c0       	rjmp	.+36     	; 0x3c1a <vfprintf+0x42c>
    3bf6:	56 01       	movw	r10, r12
    3bf8:	f2 e0       	ldi	r31, 0x02	; 2
    3bfa:	af 0e       	add	r10, r31
    3bfc:	b1 1c       	adc	r11, r1
    3bfe:	f6 01       	movw	r30, r12
    3c00:	c0 80       	ld	r12, Z
    3c02:	d1 80       	ldd	r13, Z+1	; 0x01
    3c04:	96 fe       	sbrs	r9, 6
    3c06:	03 c0       	rjmp	.+6      	; 0x3c0e <vfprintf+0x420>
    3c08:	61 2f       	mov	r22, r17
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <vfprintf+0x424>
    3c0e:	6f ef       	ldi	r22, 0xFF	; 255
    3c10:	7f ef       	ldi	r23, 0xFF	; 255
    3c12:	c6 01       	movw	r24, r12
    3c14:	0e 94 ed 20 	call	0x41da	; 0x41da <strnlen>
    3c18:	8c 01       	movw	r16, r24
    3c1a:	f9 2d       	mov	r31, r9
    3c1c:	ff 77       	andi	r31, 0x7F	; 127
    3c1e:	14 c0       	rjmp	.+40     	; 0x3c48 <vfprintf+0x45a>
    3c20:	56 01       	movw	r10, r12
    3c22:	22 e0       	ldi	r18, 0x02	; 2
    3c24:	a2 0e       	add	r10, r18
    3c26:	b1 1c       	adc	r11, r1
    3c28:	f6 01       	movw	r30, r12
    3c2a:	c0 80       	ld	r12, Z
    3c2c:	d1 80       	ldd	r13, Z+1	; 0x01
    3c2e:	96 fe       	sbrs	r9, 6
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <vfprintf+0x44a>
    3c32:	61 2f       	mov	r22, r17
    3c34:	70 e0       	ldi	r23, 0x00	; 0
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <vfprintf+0x44e>
    3c38:	6f ef       	ldi	r22, 0xFF	; 255
    3c3a:	7f ef       	ldi	r23, 0xFF	; 255
    3c3c:	c6 01       	movw	r24, r12
    3c3e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <strnlen_P>
    3c42:	8c 01       	movw	r16, r24
    3c44:	f9 2d       	mov	r31, r9
    3c46:	f0 68       	ori	r31, 0x80	; 128
    3c48:	9f 2e       	mov	r9, r31
    3c4a:	f3 fd       	sbrc	r31, 3
    3c4c:	1a c0       	rjmp	.+52     	; 0x3c82 <vfprintf+0x494>
    3c4e:	85 2d       	mov	r24, r5
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	08 17       	cp	r16, r24
    3c54:	19 07       	cpc	r17, r25
    3c56:	a8 f4       	brcc	.+42     	; 0x3c82 <vfprintf+0x494>
    3c58:	b7 01       	movw	r22, r14
    3c5a:	80 e2       	ldi	r24, 0x20	; 32
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3c62:	5a 94       	dec	r5
    3c64:	f4 cf       	rjmp	.-24     	; 0x3c4e <vfprintf+0x460>
    3c66:	f6 01       	movw	r30, r12
    3c68:	97 fc       	sbrc	r9, 7
    3c6a:	85 91       	lpm	r24, Z+
    3c6c:	97 fe       	sbrs	r9, 7
    3c6e:	81 91       	ld	r24, Z+
    3c70:	6f 01       	movw	r12, r30
    3c72:	b7 01       	movw	r22, r14
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3c7a:	51 10       	cpse	r5, r1
    3c7c:	5a 94       	dec	r5
    3c7e:	01 50       	subi	r16, 0x01	; 1
    3c80:	11 09       	sbc	r17, r1
    3c82:	01 15       	cp	r16, r1
    3c84:	11 05       	cpc	r17, r1
    3c86:	79 f7       	brne	.-34     	; 0x3c66 <vfprintf+0x478>
    3c88:	f7 c0       	rjmp	.+494    	; 0x3e78 <vfprintf+0x68a>
    3c8a:	84 36       	cpi	r24, 0x64	; 100
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <vfprintf+0x4a4>
    3c8e:	89 36       	cpi	r24, 0x69	; 105
    3c90:	61 f5       	brne	.+88     	; 0x3cea <vfprintf+0x4fc>
    3c92:	56 01       	movw	r10, r12
    3c94:	97 fe       	sbrs	r9, 7
    3c96:	09 c0       	rjmp	.+18     	; 0x3caa <vfprintf+0x4bc>
    3c98:	24 e0       	ldi	r18, 0x04	; 4
    3c9a:	a2 0e       	add	r10, r18
    3c9c:	b1 1c       	adc	r11, r1
    3c9e:	f6 01       	movw	r30, r12
    3ca0:	60 81       	ld	r22, Z
    3ca2:	71 81       	ldd	r23, Z+1	; 0x01
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	0a c0       	rjmp	.+20     	; 0x3cbe <vfprintf+0x4d0>
    3caa:	f2 e0       	ldi	r31, 0x02	; 2
    3cac:	af 0e       	add	r10, r31
    3cae:	b1 1c       	adc	r11, r1
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	07 2e       	mov	r0, r23
    3cb8:	00 0c       	add	r0, r0
    3cba:	88 0b       	sbc	r24, r24
    3cbc:	99 0b       	sbc	r25, r25
    3cbe:	f9 2d       	mov	r31, r9
    3cc0:	ff 76       	andi	r31, 0x6F	; 111
    3cc2:	9f 2e       	mov	r9, r31
    3cc4:	97 ff       	sbrs	r25, 7
    3cc6:	09 c0       	rjmp	.+18     	; 0x3cda <vfprintf+0x4ec>
    3cc8:	90 95       	com	r25
    3cca:	80 95       	com	r24
    3ccc:	70 95       	com	r23
    3cce:	61 95       	neg	r22
    3cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd6:	f0 68       	ori	r31, 0x80	; 128
    3cd8:	9f 2e       	mov	r9, r31
    3cda:	2a e0       	ldi	r18, 0x0A	; 10
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	a3 01       	movw	r20, r6
    3ce0:	0e 94 50 21 	call	0x42a0	; 0x42a0 <__ultoa_invert>
    3ce4:	c8 2e       	mov	r12, r24
    3ce6:	c6 18       	sub	r12, r6
    3ce8:	3f c0       	rjmp	.+126    	; 0x3d68 <vfprintf+0x57a>
    3cea:	09 2d       	mov	r16, r9
    3cec:	85 37       	cpi	r24, 0x75	; 117
    3cee:	21 f4       	brne	.+8      	; 0x3cf8 <vfprintf+0x50a>
    3cf0:	0f 7e       	andi	r16, 0xEF	; 239
    3cf2:	2a e0       	ldi	r18, 0x0A	; 10
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	1d c0       	rjmp	.+58     	; 0x3d32 <vfprintf+0x544>
    3cf8:	09 7f       	andi	r16, 0xF9	; 249
    3cfa:	8f 36       	cpi	r24, 0x6F	; 111
    3cfc:	91 f0       	breq	.+36     	; 0x3d22 <vfprintf+0x534>
    3cfe:	18 f4       	brcc	.+6      	; 0x3d06 <vfprintf+0x518>
    3d00:	88 35       	cpi	r24, 0x58	; 88
    3d02:	59 f0       	breq	.+22     	; 0x3d1a <vfprintf+0x52c>
    3d04:	c3 c0       	rjmp	.+390    	; 0x3e8c <vfprintf+0x69e>
    3d06:	80 37       	cpi	r24, 0x70	; 112
    3d08:	19 f0       	breq	.+6      	; 0x3d10 <vfprintf+0x522>
    3d0a:	88 37       	cpi	r24, 0x78	; 120
    3d0c:	11 f0       	breq	.+4      	; 0x3d12 <vfprintf+0x524>
    3d0e:	be c0       	rjmp	.+380    	; 0x3e8c <vfprintf+0x69e>
    3d10:	00 61       	ori	r16, 0x10	; 16
    3d12:	04 ff       	sbrs	r16, 4
    3d14:	09 c0       	rjmp	.+18     	; 0x3d28 <vfprintf+0x53a>
    3d16:	04 60       	ori	r16, 0x04	; 4
    3d18:	07 c0       	rjmp	.+14     	; 0x3d28 <vfprintf+0x53a>
    3d1a:	94 fe       	sbrs	r9, 4
    3d1c:	08 c0       	rjmp	.+16     	; 0x3d2e <vfprintf+0x540>
    3d1e:	06 60       	ori	r16, 0x06	; 6
    3d20:	06 c0       	rjmp	.+12     	; 0x3d2e <vfprintf+0x540>
    3d22:	28 e0       	ldi	r18, 0x08	; 8
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	05 c0       	rjmp	.+10     	; 0x3d32 <vfprintf+0x544>
    3d28:	20 e1       	ldi	r18, 0x10	; 16
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <vfprintf+0x544>
    3d2e:	20 e1       	ldi	r18, 0x10	; 16
    3d30:	32 e0       	ldi	r19, 0x02	; 2
    3d32:	56 01       	movw	r10, r12
    3d34:	07 ff       	sbrs	r16, 7
    3d36:	09 c0       	rjmp	.+18     	; 0x3d4a <vfprintf+0x55c>
    3d38:	84 e0       	ldi	r24, 0x04	; 4
    3d3a:	a8 0e       	add	r10, r24
    3d3c:	b1 1c       	adc	r11, r1
    3d3e:	f6 01       	movw	r30, r12
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	08 c0       	rjmp	.+16     	; 0x3d5a <vfprintf+0x56c>
    3d4a:	f2 e0       	ldi	r31, 0x02	; 2
    3d4c:	af 0e       	add	r10, r31
    3d4e:	b1 1c       	adc	r11, r1
    3d50:	f6 01       	movw	r30, r12
    3d52:	60 81       	ld	r22, Z
    3d54:	71 81       	ldd	r23, Z+1	; 0x01
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	a3 01       	movw	r20, r6
    3d5c:	0e 94 50 21 	call	0x42a0	; 0x42a0 <__ultoa_invert>
    3d60:	c8 2e       	mov	r12, r24
    3d62:	c6 18       	sub	r12, r6
    3d64:	0f 77       	andi	r16, 0x7F	; 127
    3d66:	90 2e       	mov	r9, r16
    3d68:	96 fe       	sbrs	r9, 6
    3d6a:	0b c0       	rjmp	.+22     	; 0x3d82 <vfprintf+0x594>
    3d6c:	09 2d       	mov	r16, r9
    3d6e:	0e 7f       	andi	r16, 0xFE	; 254
    3d70:	c1 16       	cp	r12, r17
    3d72:	50 f4       	brcc	.+20     	; 0x3d88 <vfprintf+0x59a>
    3d74:	94 fe       	sbrs	r9, 4
    3d76:	0a c0       	rjmp	.+20     	; 0x3d8c <vfprintf+0x59e>
    3d78:	92 fc       	sbrc	r9, 2
    3d7a:	08 c0       	rjmp	.+16     	; 0x3d8c <vfprintf+0x59e>
    3d7c:	09 2d       	mov	r16, r9
    3d7e:	0e 7e       	andi	r16, 0xEE	; 238
    3d80:	05 c0       	rjmp	.+10     	; 0x3d8c <vfprintf+0x59e>
    3d82:	dc 2c       	mov	r13, r12
    3d84:	09 2d       	mov	r16, r9
    3d86:	03 c0       	rjmp	.+6      	; 0x3d8e <vfprintf+0x5a0>
    3d88:	dc 2c       	mov	r13, r12
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <vfprintf+0x5a0>
    3d8c:	d1 2e       	mov	r13, r17
    3d8e:	04 ff       	sbrs	r16, 4
    3d90:	0d c0       	rjmp	.+26     	; 0x3dac <vfprintf+0x5be>
    3d92:	fe 01       	movw	r30, r28
    3d94:	ec 0d       	add	r30, r12
    3d96:	f1 1d       	adc	r31, r1
    3d98:	80 81       	ld	r24, Z
    3d9a:	80 33       	cpi	r24, 0x30	; 48
    3d9c:	11 f4       	brne	.+4      	; 0x3da2 <vfprintf+0x5b4>
    3d9e:	09 7e       	andi	r16, 0xE9	; 233
    3da0:	09 c0       	rjmp	.+18     	; 0x3db4 <vfprintf+0x5c6>
    3da2:	02 ff       	sbrs	r16, 2
    3da4:	06 c0       	rjmp	.+12     	; 0x3db2 <vfprintf+0x5c4>
    3da6:	d3 94       	inc	r13
    3da8:	d3 94       	inc	r13
    3daa:	04 c0       	rjmp	.+8      	; 0x3db4 <vfprintf+0x5c6>
    3dac:	80 2f       	mov	r24, r16
    3dae:	86 78       	andi	r24, 0x86	; 134
    3db0:	09 f0       	breq	.+2      	; 0x3db4 <vfprintf+0x5c6>
    3db2:	d3 94       	inc	r13
    3db4:	03 fd       	sbrc	r16, 3
    3db6:	11 c0       	rjmp	.+34     	; 0x3dda <vfprintf+0x5ec>
    3db8:	00 ff       	sbrs	r16, 0
    3dba:	06 c0       	rjmp	.+12     	; 0x3dc8 <vfprintf+0x5da>
    3dbc:	1c 2d       	mov	r17, r12
    3dbe:	d5 14       	cp	r13, r5
    3dc0:	80 f4       	brcc	.+32     	; 0x3de2 <vfprintf+0x5f4>
    3dc2:	15 0d       	add	r17, r5
    3dc4:	1d 19       	sub	r17, r13
    3dc6:	0d c0       	rjmp	.+26     	; 0x3de2 <vfprintf+0x5f4>
    3dc8:	d5 14       	cp	r13, r5
    3dca:	58 f4       	brcc	.+22     	; 0x3de2 <vfprintf+0x5f4>
    3dcc:	b7 01       	movw	r22, r14
    3dce:	80 e2       	ldi	r24, 0x20	; 32
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3dd6:	d3 94       	inc	r13
    3dd8:	f7 cf       	rjmp	.-18     	; 0x3dc8 <vfprintf+0x5da>
    3dda:	d5 14       	cp	r13, r5
    3ddc:	10 f4       	brcc	.+4      	; 0x3de2 <vfprintf+0x5f4>
    3dde:	5d 18       	sub	r5, r13
    3de0:	01 c0       	rjmp	.+2      	; 0x3de4 <vfprintf+0x5f6>
    3de2:	51 2c       	mov	r5, r1
    3de4:	04 ff       	sbrs	r16, 4
    3de6:	10 c0       	rjmp	.+32     	; 0x3e08 <vfprintf+0x61a>
    3de8:	b7 01       	movw	r22, r14
    3dea:	80 e3       	ldi	r24, 0x30	; 48
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3df2:	02 ff       	sbrs	r16, 2
    3df4:	17 c0       	rjmp	.+46     	; 0x3e24 <vfprintf+0x636>
    3df6:	01 fd       	sbrc	r16, 1
    3df8:	03 c0       	rjmp	.+6      	; 0x3e00 <vfprintf+0x612>
    3dfa:	88 e7       	ldi	r24, 0x78	; 120
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <vfprintf+0x616>
    3e00:	88 e5       	ldi	r24, 0x58	; 88
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	b7 01       	movw	r22, r14
    3e06:	0c c0       	rjmp	.+24     	; 0x3e20 <vfprintf+0x632>
    3e08:	80 2f       	mov	r24, r16
    3e0a:	86 78       	andi	r24, 0x86	; 134
    3e0c:	59 f0       	breq	.+22     	; 0x3e24 <vfprintf+0x636>
    3e0e:	01 ff       	sbrs	r16, 1
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <vfprintf+0x628>
    3e12:	8b e2       	ldi	r24, 0x2B	; 43
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <vfprintf+0x62a>
    3e16:	80 e2       	ldi	r24, 0x20	; 32
    3e18:	07 fd       	sbrc	r16, 7
    3e1a:	8d e2       	ldi	r24, 0x2D	; 45
    3e1c:	b7 01       	movw	r22, r14
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3e24:	c1 16       	cp	r12, r17
    3e26:	38 f4       	brcc	.+14     	; 0x3e36 <vfprintf+0x648>
    3e28:	b7 01       	movw	r22, r14
    3e2a:	80 e3       	ldi	r24, 0x30	; 48
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3e32:	11 50       	subi	r17, 0x01	; 1
    3e34:	f7 cf       	rjmp	.-18     	; 0x3e24 <vfprintf+0x636>
    3e36:	ca 94       	dec	r12
    3e38:	f3 01       	movw	r30, r6
    3e3a:	ec 0d       	add	r30, r12
    3e3c:	f1 1d       	adc	r31, r1
    3e3e:	80 81       	ld	r24, Z
    3e40:	b7 01       	movw	r22, r14
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3e48:	c1 10       	cpse	r12, r1
    3e4a:	f5 cf       	rjmp	.-22     	; 0x3e36 <vfprintf+0x648>
    3e4c:	15 c0       	rjmp	.+42     	; 0x3e78 <vfprintf+0x68a>
    3e4e:	f4 e0       	ldi	r31, 0x04	; 4
    3e50:	f5 15       	cp	r31, r5
    3e52:	60 f5       	brcc	.+88     	; 0x3eac <vfprintf+0x6be>
    3e54:	84 e0       	ldi	r24, 0x04	; 4
    3e56:	58 1a       	sub	r5, r24
    3e58:	93 fe       	sbrs	r9, 3
    3e5a:	1f c0       	rjmp	.+62     	; 0x3e9a <vfprintf+0x6ac>
    3e5c:	01 11       	cpse	r16, r1
    3e5e:	27 c0       	rjmp	.+78     	; 0x3eae <vfprintf+0x6c0>
    3e60:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e62:	23 ff       	sbrs	r18, 3
    3e64:	2a c0       	rjmp	.+84     	; 0x3eba <vfprintf+0x6cc>
    3e66:	04 ed       	ldi	r16, 0xD4	; 212
    3e68:	12 e0       	ldi	r17, 0x02	; 2
    3e6a:	39 2d       	mov	r19, r9
    3e6c:	30 71       	andi	r19, 0x10	; 16
    3e6e:	93 2e       	mov	r9, r19
    3e70:	f8 01       	movw	r30, r16
    3e72:	84 91       	lpm	r24, Z
    3e74:	81 11       	cpse	r24, r1
    3e76:	24 c0       	rjmp	.+72     	; 0x3ec0 <vfprintf+0x6d2>
    3e78:	55 20       	and	r5, r5
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <vfprintf+0x690>
    3e7c:	e4 cc       	rjmp	.-1592   	; 0x3846 <vfprintf+0x58>
    3e7e:	b7 01       	movw	r22, r14
    3e80:	80 e2       	ldi	r24, 0x20	; 32
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3e88:	5a 94       	dec	r5
    3e8a:	f6 cf       	rjmp	.-20     	; 0x3e78 <vfprintf+0x68a>
    3e8c:	f7 01       	movw	r30, r14
    3e8e:	86 81       	ldd	r24, Z+6	; 0x06
    3e90:	97 81       	ldd	r25, Z+7	; 0x07
    3e92:	26 c0       	rjmp	.+76     	; 0x3ee0 <vfprintf+0x6f2>
    3e94:	8f ef       	ldi	r24, 0xFF	; 255
    3e96:	9f ef       	ldi	r25, 0xFF	; 255
    3e98:	23 c0       	rjmp	.+70     	; 0x3ee0 <vfprintf+0x6f2>
    3e9a:	b7 01       	movw	r22, r14
    3e9c:	80 e2       	ldi	r24, 0x20	; 32
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3ea4:	5a 94       	dec	r5
    3ea6:	51 10       	cpse	r5, r1
    3ea8:	f8 cf       	rjmp	.-16     	; 0x3e9a <vfprintf+0x6ac>
    3eaa:	d8 cf       	rjmp	.-80     	; 0x3e5c <vfprintf+0x66e>
    3eac:	51 2c       	mov	r5, r1
    3eae:	b7 01       	movw	r22, r14
    3eb0:	80 2f       	mov	r24, r16
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3eb8:	d3 cf       	rjmp	.-90     	; 0x3e60 <vfprintf+0x672>
    3eba:	08 ed       	ldi	r16, 0xD8	; 216
    3ebc:	12 e0       	ldi	r17, 0x02	; 2
    3ebe:	d5 cf       	rjmp	.-86     	; 0x3e6a <vfprintf+0x67c>
    3ec0:	91 10       	cpse	r9, r1
    3ec2:	80 52       	subi	r24, 0x20	; 32
    3ec4:	b7 01       	movw	r22, r14
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <fputc>
    3ecc:	0f 5f       	subi	r16, 0xFF	; 255
    3ece:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed0:	cf cf       	rjmp	.-98     	; 0x3e70 <vfprintf+0x682>
    3ed2:	23 e0       	ldi	r18, 0x03	; 3
    3ed4:	25 15       	cp	r18, r5
    3ed6:	10 f4       	brcc	.+4      	; 0x3edc <vfprintf+0x6ee>
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	bd cf       	rjmp	.-134    	; 0x3e56 <vfprintf+0x668>
    3edc:	51 2c       	mov	r5, r1
    3ede:	c0 cf       	rjmp	.-128    	; 0x3e60 <vfprintf+0x672>
    3ee0:	60 96       	adiw	r28, 0x10	; 16
    3ee2:	e2 e1       	ldi	r30, 0x12	; 18
    3ee4:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__epilogue_restores__>

00003ee8 <__divmodhi4>:
    3ee8:	97 fb       	bst	r25, 7
    3eea:	07 2e       	mov	r0, r23
    3eec:	16 f4       	brtc	.+4      	; 0x3ef2 <__divmodhi4+0xa>
    3eee:	00 94       	com	r0
    3ef0:	07 d0       	rcall	.+14     	; 0x3f00 <__divmodhi4_neg1>
    3ef2:	77 fd       	sbrc	r23, 7
    3ef4:	09 d0       	rcall	.+18     	; 0x3f08 <__divmodhi4_neg2>
    3ef6:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__udivmodhi4>
    3efa:	07 fc       	sbrc	r0, 7
    3efc:	05 d0       	rcall	.+10     	; 0x3f08 <__divmodhi4_neg2>
    3efe:	3e f4       	brtc	.+14     	; 0x3f0e <__divmodhi4_exit>

00003f00 <__divmodhi4_neg1>:
    3f00:	90 95       	com	r25
    3f02:	81 95       	neg	r24
    3f04:	9f 4f       	sbci	r25, 0xFF	; 255
    3f06:	08 95       	ret

00003f08 <__divmodhi4_neg2>:
    3f08:	70 95       	com	r23
    3f0a:	61 95       	neg	r22
    3f0c:	7f 4f       	sbci	r23, 0xFF	; 255

00003f0e <__divmodhi4_exit>:
    3f0e:	08 95       	ret

00003f10 <__udivmodsi4>:
    3f10:	a1 e2       	ldi	r26, 0x21	; 33
    3f12:	1a 2e       	mov	r1, r26
    3f14:	aa 1b       	sub	r26, r26
    3f16:	bb 1b       	sub	r27, r27
    3f18:	fd 01       	movw	r30, r26
    3f1a:	0d c0       	rjmp	.+26     	; 0x3f36 <__udivmodsi4_ep>

00003f1c <__udivmodsi4_loop>:
    3f1c:	aa 1f       	adc	r26, r26
    3f1e:	bb 1f       	adc	r27, r27
    3f20:	ee 1f       	adc	r30, r30
    3f22:	ff 1f       	adc	r31, r31
    3f24:	a2 17       	cp	r26, r18
    3f26:	b3 07       	cpc	r27, r19
    3f28:	e4 07       	cpc	r30, r20
    3f2a:	f5 07       	cpc	r31, r21
    3f2c:	20 f0       	brcs	.+8      	; 0x3f36 <__udivmodsi4_ep>
    3f2e:	a2 1b       	sub	r26, r18
    3f30:	b3 0b       	sbc	r27, r19
    3f32:	e4 0b       	sbc	r30, r20
    3f34:	f5 0b       	sbc	r31, r21

00003f36 <__udivmodsi4_ep>:
    3f36:	66 1f       	adc	r22, r22
    3f38:	77 1f       	adc	r23, r23
    3f3a:	88 1f       	adc	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	1a 94       	dec	r1
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <__udivmodsi4_loop>
    3f42:	60 95       	com	r22
    3f44:	70 95       	com	r23
    3f46:	80 95       	com	r24
    3f48:	90 95       	com	r25
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	bd 01       	movw	r22, r26
    3f50:	cf 01       	movw	r24, r30
    3f52:	08 95       	ret

00003f54 <__tablejump2__>:
    3f54:	ee 0f       	add	r30, r30
    3f56:	ff 1f       	adc	r31, r31
    3f58:	05 90       	lpm	r0, Z+
    3f5a:	f4 91       	lpm	r31, Z
    3f5c:	e0 2d       	mov	r30, r0
    3f5e:	09 94       	ijmp

00003f60 <__umulhisi3>:
    3f60:	a2 9f       	mul	r26, r18
    3f62:	b0 01       	movw	r22, r0
    3f64:	b3 9f       	mul	r27, r19
    3f66:	c0 01       	movw	r24, r0
    3f68:	a3 9f       	mul	r26, r19
    3f6a:	70 0d       	add	r23, r0
    3f6c:	81 1d       	adc	r24, r1
    3f6e:	11 24       	eor	r1, r1
    3f70:	91 1d       	adc	r25, r1
    3f72:	b2 9f       	mul	r27, r18
    3f74:	70 0d       	add	r23, r0
    3f76:	81 1d       	adc	r24, r1
    3f78:	11 24       	eor	r1, r1
    3f7a:	91 1d       	adc	r25, r1
    3f7c:	08 95       	ret

00003f7e <__prologue_saves__>:
    3f7e:	2f 92       	push	r2
    3f80:	3f 92       	push	r3
    3f82:	4f 92       	push	r4
    3f84:	5f 92       	push	r5
    3f86:	6f 92       	push	r6
    3f88:	7f 92       	push	r7
    3f8a:	8f 92       	push	r8
    3f8c:	9f 92       	push	r9
    3f8e:	af 92       	push	r10
    3f90:	bf 92       	push	r11
    3f92:	cf 92       	push	r12
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	ca 1b       	sub	r28, r26
    3fa8:	db 0b       	sbc	r29, r27
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	09 94       	ijmp

00003fb6 <__epilogue_restores__>:
    3fb6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb8:	39 88       	ldd	r3, Y+17	; 0x11
    3fba:	48 88       	ldd	r4, Y+16	; 0x10
    3fbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc8:	b9 84       	ldd	r11, Y+9	; 0x09
    3fca:	c8 84       	ldd	r12, Y+8	; 0x08
    3fcc:	df 80       	ldd	r13, Y+7	; 0x07
    3fce:	ee 80       	ldd	r14, Y+6	; 0x06
    3fd0:	fd 80       	ldd	r15, Y+5	; 0x05
    3fd2:	0c 81       	ldd	r16, Y+4	; 0x04
    3fd4:	1b 81       	ldd	r17, Y+3	; 0x03
    3fd6:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd8:	b9 81       	ldd	r27, Y+1	; 0x01
    3fda:	ce 0f       	add	r28, r30
    3fdc:	d1 1d       	adc	r29, r1
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	ed 01       	movw	r28, r26
    3fea:	08 95       	ret

00003fec <__udivmodhi4>:
    3fec:	aa 1b       	sub	r26, r26
    3fee:	bb 1b       	sub	r27, r27
    3ff0:	51 e1       	ldi	r21, 0x11	; 17
    3ff2:	07 c0       	rjmp	.+14     	; 0x4002 <__udivmodhi4_ep>

00003ff4 <__udivmodhi4_loop>:
    3ff4:	aa 1f       	adc	r26, r26
    3ff6:	bb 1f       	adc	r27, r27
    3ff8:	a6 17       	cp	r26, r22
    3ffa:	b7 07       	cpc	r27, r23
    3ffc:	10 f0       	brcs	.+4      	; 0x4002 <__udivmodhi4_ep>
    3ffe:	a6 1b       	sub	r26, r22
    4000:	b7 0b       	sbc	r27, r23

00004002 <__udivmodhi4_ep>:
    4002:	88 1f       	adc	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	5a 95       	dec	r21
    4008:	a9 f7       	brne	.-22     	; 0x3ff4 <__udivmodhi4_loop>
    400a:	80 95       	com	r24
    400c:	90 95       	com	r25
    400e:	bc 01       	movw	r22, r24
    4010:	cd 01       	movw	r24, r26
    4012:	08 95       	ret

00004014 <__ftoa_engine>:
    4014:	28 30       	cpi	r18, 0x08	; 8
    4016:	08 f0       	brcs	.+2      	; 0x401a <__ftoa_engine+0x6>
    4018:	27 e0       	ldi	r18, 0x07	; 7
    401a:	33 27       	eor	r19, r19
    401c:	da 01       	movw	r26, r20
    401e:	99 0f       	add	r25, r25
    4020:	31 1d       	adc	r19, r1
    4022:	87 fd       	sbrc	r24, 7
    4024:	91 60       	ori	r25, 0x01	; 1
    4026:	00 96       	adiw	r24, 0x00	; 0
    4028:	61 05       	cpc	r22, r1
    402a:	71 05       	cpc	r23, r1
    402c:	39 f4       	brne	.+14     	; 0x403c <__ftoa_engine+0x28>
    402e:	32 60       	ori	r19, 0x02	; 2
    4030:	2e 5f       	subi	r18, 0xFE	; 254
    4032:	3d 93       	st	X+, r19
    4034:	30 e3       	ldi	r19, 0x30	; 48
    4036:	2a 95       	dec	r18
    4038:	e1 f7       	brne	.-8      	; 0x4032 <__ftoa_engine+0x1e>
    403a:	08 95       	ret
    403c:	9f 3f       	cpi	r25, 0xFF	; 255
    403e:	30 f0       	brcs	.+12     	; 0x404c <__ftoa_engine+0x38>
    4040:	80 38       	cpi	r24, 0x80	; 128
    4042:	71 05       	cpc	r23, r1
    4044:	61 05       	cpc	r22, r1
    4046:	09 f0       	breq	.+2      	; 0x404a <__ftoa_engine+0x36>
    4048:	3c 5f       	subi	r19, 0xFC	; 252
    404a:	3c 5f       	subi	r19, 0xFC	; 252
    404c:	3d 93       	st	X+, r19
    404e:	91 30       	cpi	r25, 0x01	; 1
    4050:	08 f0       	brcs	.+2      	; 0x4054 <__ftoa_engine+0x40>
    4052:	80 68       	ori	r24, 0x80	; 128
    4054:	91 1d       	adc	r25, r1
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	1f 93       	push	r17
    405c:	0f 93       	push	r16
    405e:	ff 92       	push	r15
    4060:	ef 92       	push	r14
    4062:	19 2f       	mov	r17, r25
    4064:	98 7f       	andi	r25, 0xF8	; 248
    4066:	96 95       	lsr	r25
    4068:	e9 2f       	mov	r30, r25
    406a:	96 95       	lsr	r25
    406c:	96 95       	lsr	r25
    406e:	e9 0f       	add	r30, r25
    4070:	ff 27       	eor	r31, r31
    4072:	ea 5c       	subi	r30, 0xCA	; 202
    4074:	fc 4f       	sbci	r31, 0xFC	; 252
    4076:	99 27       	eor	r25, r25
    4078:	33 27       	eor	r19, r19
    407a:	ee 24       	eor	r14, r14
    407c:	ff 24       	eor	r15, r15
    407e:	a7 01       	movw	r20, r14
    4080:	e7 01       	movw	r28, r14
    4082:	05 90       	lpm	r0, Z+
    4084:	08 94       	sec
    4086:	07 94       	ror	r0
    4088:	28 f4       	brcc	.+10     	; 0x4094 <__ftoa_engine+0x80>
    408a:	36 0f       	add	r19, r22
    408c:	e7 1e       	adc	r14, r23
    408e:	f8 1e       	adc	r15, r24
    4090:	49 1f       	adc	r20, r25
    4092:	51 1d       	adc	r21, r1
    4094:	66 0f       	add	r22, r22
    4096:	77 1f       	adc	r23, r23
    4098:	88 1f       	adc	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	06 94       	lsr	r0
    409e:	a1 f7       	brne	.-24     	; 0x4088 <__ftoa_engine+0x74>
    40a0:	05 90       	lpm	r0, Z+
    40a2:	07 94       	ror	r0
    40a4:	28 f4       	brcc	.+10     	; 0x40b0 <__ftoa_engine+0x9c>
    40a6:	e7 0e       	add	r14, r23
    40a8:	f8 1e       	adc	r15, r24
    40aa:	49 1f       	adc	r20, r25
    40ac:	56 1f       	adc	r21, r22
    40ae:	c1 1d       	adc	r28, r1
    40b0:	77 0f       	add	r23, r23
    40b2:	88 1f       	adc	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	66 1f       	adc	r22, r22
    40b8:	06 94       	lsr	r0
    40ba:	a1 f7       	brne	.-24     	; 0x40a4 <__ftoa_engine+0x90>
    40bc:	05 90       	lpm	r0, Z+
    40be:	07 94       	ror	r0
    40c0:	28 f4       	brcc	.+10     	; 0x40cc <__ftoa_engine+0xb8>
    40c2:	f8 0e       	add	r15, r24
    40c4:	49 1f       	adc	r20, r25
    40c6:	56 1f       	adc	r21, r22
    40c8:	c7 1f       	adc	r28, r23
    40ca:	d1 1d       	adc	r29, r1
    40cc:	88 0f       	add	r24, r24
    40ce:	99 1f       	adc	r25, r25
    40d0:	66 1f       	adc	r22, r22
    40d2:	77 1f       	adc	r23, r23
    40d4:	06 94       	lsr	r0
    40d6:	a1 f7       	brne	.-24     	; 0x40c0 <__ftoa_engine+0xac>
    40d8:	05 90       	lpm	r0, Z+
    40da:	07 94       	ror	r0
    40dc:	20 f4       	brcc	.+8      	; 0x40e6 <__ftoa_engine+0xd2>
    40de:	49 0f       	add	r20, r25
    40e0:	56 1f       	adc	r21, r22
    40e2:	c7 1f       	adc	r28, r23
    40e4:	d8 1f       	adc	r29, r24
    40e6:	99 0f       	add	r25, r25
    40e8:	66 1f       	adc	r22, r22
    40ea:	77 1f       	adc	r23, r23
    40ec:	88 1f       	adc	r24, r24
    40ee:	06 94       	lsr	r0
    40f0:	a9 f7       	brne	.-22     	; 0x40dc <__ftoa_engine+0xc8>
    40f2:	84 91       	lpm	r24, Z
    40f4:	10 95       	com	r17
    40f6:	17 70       	andi	r17, 0x07	; 7
    40f8:	41 f0       	breq	.+16     	; 0x410a <__ftoa_engine+0xf6>
    40fa:	d6 95       	lsr	r29
    40fc:	c7 95       	ror	r28
    40fe:	57 95       	ror	r21
    4100:	47 95       	ror	r20
    4102:	f7 94       	ror	r15
    4104:	e7 94       	ror	r14
    4106:	1a 95       	dec	r17
    4108:	c1 f7       	brne	.-16     	; 0x40fa <__ftoa_engine+0xe6>
    410a:	ec ed       	ldi	r30, 0xDC	; 220
    410c:	f2 e0       	ldi	r31, 0x02	; 2
    410e:	68 94       	set
    4110:	15 90       	lpm	r1, Z+
    4112:	15 91       	lpm	r17, Z+
    4114:	35 91       	lpm	r19, Z+
    4116:	65 91       	lpm	r22, Z+
    4118:	95 91       	lpm	r25, Z+
    411a:	05 90       	lpm	r0, Z+
    411c:	7f e2       	ldi	r23, 0x2F	; 47
    411e:	73 95       	inc	r23
    4120:	e1 18       	sub	r14, r1
    4122:	f1 0a       	sbc	r15, r17
    4124:	43 0b       	sbc	r20, r19
    4126:	56 0b       	sbc	r21, r22
    4128:	c9 0b       	sbc	r28, r25
    412a:	d0 09       	sbc	r29, r0
    412c:	c0 f7       	brcc	.-16     	; 0x411e <__ftoa_engine+0x10a>
    412e:	e1 0c       	add	r14, r1
    4130:	f1 1e       	adc	r15, r17
    4132:	43 1f       	adc	r20, r19
    4134:	56 1f       	adc	r21, r22
    4136:	c9 1f       	adc	r28, r25
    4138:	d0 1d       	adc	r29, r0
    413a:	7e f4       	brtc	.+30     	; 0x415a <__ftoa_engine+0x146>
    413c:	70 33       	cpi	r23, 0x30	; 48
    413e:	11 f4       	brne	.+4      	; 0x4144 <__ftoa_engine+0x130>
    4140:	8a 95       	dec	r24
    4142:	e6 cf       	rjmp	.-52     	; 0x4110 <__ftoa_engine+0xfc>
    4144:	e8 94       	clt
    4146:	01 50       	subi	r16, 0x01	; 1
    4148:	30 f0       	brcs	.+12     	; 0x4156 <__ftoa_engine+0x142>
    414a:	08 0f       	add	r16, r24
    414c:	0a f4       	brpl	.+2      	; 0x4150 <__ftoa_engine+0x13c>
    414e:	00 27       	eor	r16, r16
    4150:	02 17       	cp	r16, r18
    4152:	08 f4       	brcc	.+2      	; 0x4156 <__ftoa_engine+0x142>
    4154:	20 2f       	mov	r18, r16
    4156:	23 95       	inc	r18
    4158:	02 2f       	mov	r16, r18
    415a:	7a 33       	cpi	r23, 0x3A	; 58
    415c:	28 f0       	brcs	.+10     	; 0x4168 <__ftoa_engine+0x154>
    415e:	79 e3       	ldi	r23, 0x39	; 57
    4160:	7d 93       	st	X+, r23
    4162:	2a 95       	dec	r18
    4164:	e9 f7       	brne	.-6      	; 0x4160 <__ftoa_engine+0x14c>
    4166:	10 c0       	rjmp	.+32     	; 0x4188 <__ftoa_engine+0x174>
    4168:	7d 93       	st	X+, r23
    416a:	2a 95       	dec	r18
    416c:	89 f6       	brne	.-94     	; 0x4110 <__ftoa_engine+0xfc>
    416e:	06 94       	lsr	r0
    4170:	97 95       	ror	r25
    4172:	67 95       	ror	r22
    4174:	37 95       	ror	r19
    4176:	17 95       	ror	r17
    4178:	17 94       	ror	r1
    417a:	e1 18       	sub	r14, r1
    417c:	f1 0a       	sbc	r15, r17
    417e:	43 0b       	sbc	r20, r19
    4180:	56 0b       	sbc	r21, r22
    4182:	c9 0b       	sbc	r28, r25
    4184:	d0 09       	sbc	r29, r0
    4186:	98 f0       	brcs	.+38     	; 0x41ae <__ftoa_engine+0x19a>
    4188:	23 95       	inc	r18
    418a:	7e 91       	ld	r23, -X
    418c:	73 95       	inc	r23
    418e:	7a 33       	cpi	r23, 0x3A	; 58
    4190:	08 f0       	brcs	.+2      	; 0x4194 <__ftoa_engine+0x180>
    4192:	70 e3       	ldi	r23, 0x30	; 48
    4194:	7c 93       	st	X, r23
    4196:	20 13       	cpse	r18, r16
    4198:	b8 f7       	brcc	.-18     	; 0x4188 <__ftoa_engine+0x174>
    419a:	7e 91       	ld	r23, -X
    419c:	70 61       	ori	r23, 0x10	; 16
    419e:	7d 93       	st	X+, r23
    41a0:	30 f0       	brcs	.+12     	; 0x41ae <__ftoa_engine+0x19a>
    41a2:	83 95       	inc	r24
    41a4:	71 e3       	ldi	r23, 0x31	; 49
    41a6:	7d 93       	st	X+, r23
    41a8:	70 e3       	ldi	r23, 0x30	; 48
    41aa:	2a 95       	dec	r18
    41ac:	e1 f7       	brne	.-8      	; 0x41a6 <__ftoa_engine+0x192>
    41ae:	11 24       	eor	r1, r1
    41b0:	ef 90       	pop	r14
    41b2:	ff 90       	pop	r15
    41b4:	0f 91       	pop	r16
    41b6:	1f 91       	pop	r17
    41b8:	cf 91       	pop	r28
    41ba:	df 91       	pop	r29
    41bc:	99 27       	eor	r25, r25
    41be:	87 fd       	sbrc	r24, 7
    41c0:	90 95       	com	r25
    41c2:	08 95       	ret

000041c4 <strnlen_P>:
    41c4:	fc 01       	movw	r30, r24
    41c6:	05 90       	lpm	r0, Z+
    41c8:	61 50       	subi	r22, 0x01	; 1
    41ca:	70 40       	sbci	r23, 0x00	; 0
    41cc:	01 10       	cpse	r0, r1
    41ce:	d8 f7       	brcc	.-10     	; 0x41c6 <strnlen_P+0x2>
    41d0:	80 95       	com	r24
    41d2:	90 95       	com	r25
    41d4:	8e 0f       	add	r24, r30
    41d6:	9f 1f       	adc	r25, r31
    41d8:	08 95       	ret

000041da <strnlen>:
    41da:	fc 01       	movw	r30, r24
    41dc:	61 50       	subi	r22, 0x01	; 1
    41de:	70 40       	sbci	r23, 0x00	; 0
    41e0:	01 90       	ld	r0, Z+
    41e2:	01 10       	cpse	r0, r1
    41e4:	d8 f7       	brcc	.-10     	; 0x41dc <strnlen+0x2>
    41e6:	80 95       	com	r24
    41e8:	90 95       	com	r25
    41ea:	8e 0f       	add	r24, r30
    41ec:	9f 1f       	adc	r25, r31
    41ee:	08 95       	ret

000041f0 <fputc>:
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	fb 01       	movw	r30, r22
    41fa:	23 81       	ldd	r18, Z+3	; 0x03
    41fc:	21 fd       	sbrc	r18, 1
    41fe:	03 c0       	rjmp	.+6      	; 0x4206 <fputc+0x16>
    4200:	8f ef       	ldi	r24, 0xFF	; 255
    4202:	9f ef       	ldi	r25, 0xFF	; 255
    4204:	2c c0       	rjmp	.+88     	; 0x425e <fputc+0x6e>
    4206:	22 ff       	sbrs	r18, 2
    4208:	16 c0       	rjmp	.+44     	; 0x4236 <fputc+0x46>
    420a:	46 81       	ldd	r20, Z+6	; 0x06
    420c:	57 81       	ldd	r21, Z+7	; 0x07
    420e:	24 81       	ldd	r18, Z+4	; 0x04
    4210:	35 81       	ldd	r19, Z+5	; 0x05
    4212:	42 17       	cp	r20, r18
    4214:	53 07       	cpc	r21, r19
    4216:	44 f4       	brge	.+16     	; 0x4228 <fputc+0x38>
    4218:	a0 81       	ld	r26, Z
    421a:	b1 81       	ldd	r27, Z+1	; 0x01
    421c:	9d 01       	movw	r18, r26
    421e:	2f 5f       	subi	r18, 0xFF	; 255
    4220:	3f 4f       	sbci	r19, 0xFF	; 255
    4222:	31 83       	std	Z+1, r19	; 0x01
    4224:	20 83       	st	Z, r18
    4226:	8c 93       	st	X, r24
    4228:	26 81       	ldd	r18, Z+6	; 0x06
    422a:	37 81       	ldd	r19, Z+7	; 0x07
    422c:	2f 5f       	subi	r18, 0xFF	; 255
    422e:	3f 4f       	sbci	r19, 0xFF	; 255
    4230:	37 83       	std	Z+7, r19	; 0x07
    4232:	26 83       	std	Z+6, r18	; 0x06
    4234:	14 c0       	rjmp	.+40     	; 0x425e <fputc+0x6e>
    4236:	8b 01       	movw	r16, r22
    4238:	ec 01       	movw	r28, r24
    423a:	fb 01       	movw	r30, r22
    423c:	00 84       	ldd	r0, Z+8	; 0x08
    423e:	f1 85       	ldd	r31, Z+9	; 0x09
    4240:	e0 2d       	mov	r30, r0
    4242:	09 95       	icall
    4244:	89 2b       	or	r24, r25
    4246:	e1 f6       	brne	.-72     	; 0x4200 <fputc+0x10>
    4248:	d8 01       	movw	r26, r16
    424a:	16 96       	adiw	r26, 0x06	; 6
    424c:	8d 91       	ld	r24, X+
    424e:	9c 91       	ld	r25, X
    4250:	17 97       	sbiw	r26, 0x07	; 7
    4252:	01 96       	adiw	r24, 0x01	; 1
    4254:	17 96       	adiw	r26, 0x07	; 7
    4256:	9c 93       	st	X, r25
    4258:	8e 93       	st	-X, r24
    425a:	16 97       	sbiw	r26, 0x06	; 6
    425c:	ce 01       	movw	r24, r28
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	1f 91       	pop	r17
    4264:	0f 91       	pop	r16
    4266:	08 95       	ret

00004268 <vsprintf>:
    4268:	ae e0       	ldi	r26, 0x0E	; 14
    426a:	b0 e0       	ldi	r27, 0x00	; 0
    426c:	ea e3       	ldi	r30, 0x3A	; 58
    426e:	f1 e2       	ldi	r31, 0x21	; 33
    4270:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x1c>
    4274:	8c 01       	movw	r16, r24
    4276:	86 e0       	ldi	r24, 0x06	; 6
    4278:	8c 83       	std	Y+4, r24	; 0x04
    427a:	1a 83       	std	Y+2, r17	; 0x02
    427c:	09 83       	std	Y+1, r16	; 0x01
    427e:	8f ef       	ldi	r24, 0xFF	; 255
    4280:	9f e7       	ldi	r25, 0x7F	; 127
    4282:	9e 83       	std	Y+6, r25	; 0x06
    4284:	8d 83       	std	Y+5, r24	; 0x05
    4286:	ce 01       	movw	r24, r28
    4288:	01 96       	adiw	r24, 0x01	; 1
    428a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <vfprintf>
    428e:	ef 81       	ldd	r30, Y+7	; 0x07
    4290:	f8 85       	ldd	r31, Y+8	; 0x08
    4292:	e0 0f       	add	r30, r16
    4294:	f1 1f       	adc	r31, r17
    4296:	10 82       	st	Z, r1
    4298:	2e 96       	adiw	r28, 0x0e	; 14
    429a:	e4 e0       	ldi	r30, 0x04	; 4
    429c:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x1c>

000042a0 <__ultoa_invert>:
    42a0:	fa 01       	movw	r30, r20
    42a2:	aa 27       	eor	r26, r26
    42a4:	28 30       	cpi	r18, 0x08	; 8
    42a6:	51 f1       	breq	.+84     	; 0x42fc <__ultoa_invert+0x5c>
    42a8:	20 31       	cpi	r18, 0x10	; 16
    42aa:	81 f1       	breq	.+96     	; 0x430c <__ultoa_invert+0x6c>
    42ac:	e8 94       	clt
    42ae:	6f 93       	push	r22
    42b0:	6e 7f       	andi	r22, 0xFE	; 254
    42b2:	6e 5f       	subi	r22, 0xFE	; 254
    42b4:	7f 4f       	sbci	r23, 0xFF	; 255
    42b6:	8f 4f       	sbci	r24, 0xFF	; 255
    42b8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ba:	af 4f       	sbci	r26, 0xFF	; 255
    42bc:	b1 e0       	ldi	r27, 0x01	; 1
    42be:	3e d0       	rcall	.+124    	; 0x433c <__ultoa_invert+0x9c>
    42c0:	b4 e0       	ldi	r27, 0x04	; 4
    42c2:	3c d0       	rcall	.+120    	; 0x433c <__ultoa_invert+0x9c>
    42c4:	67 0f       	add	r22, r23
    42c6:	78 1f       	adc	r23, r24
    42c8:	89 1f       	adc	r24, r25
    42ca:	9a 1f       	adc	r25, r26
    42cc:	a1 1d       	adc	r26, r1
    42ce:	68 0f       	add	r22, r24
    42d0:	79 1f       	adc	r23, r25
    42d2:	8a 1f       	adc	r24, r26
    42d4:	91 1d       	adc	r25, r1
    42d6:	a1 1d       	adc	r26, r1
    42d8:	6a 0f       	add	r22, r26
    42da:	71 1d       	adc	r23, r1
    42dc:	81 1d       	adc	r24, r1
    42de:	91 1d       	adc	r25, r1
    42e0:	a1 1d       	adc	r26, r1
    42e2:	20 d0       	rcall	.+64     	; 0x4324 <__ultoa_invert+0x84>
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <__ultoa_invert+0x48>
    42e6:	68 94       	set
    42e8:	3f 91       	pop	r19
    42ea:	2a e0       	ldi	r18, 0x0A	; 10
    42ec:	26 9f       	mul	r18, r22
    42ee:	11 24       	eor	r1, r1
    42f0:	30 19       	sub	r19, r0
    42f2:	30 5d       	subi	r19, 0xD0	; 208
    42f4:	31 93       	st	Z+, r19
    42f6:	de f6       	brtc	.-74     	; 0x42ae <__ultoa_invert+0xe>
    42f8:	cf 01       	movw	r24, r30
    42fa:	08 95       	ret
    42fc:	46 2f       	mov	r20, r22
    42fe:	47 70       	andi	r20, 0x07	; 7
    4300:	40 5d       	subi	r20, 0xD0	; 208
    4302:	41 93       	st	Z+, r20
    4304:	b3 e0       	ldi	r27, 0x03	; 3
    4306:	0f d0       	rcall	.+30     	; 0x4326 <__ultoa_invert+0x86>
    4308:	c9 f7       	brne	.-14     	; 0x42fc <__ultoa_invert+0x5c>
    430a:	f6 cf       	rjmp	.-20     	; 0x42f8 <__ultoa_invert+0x58>
    430c:	46 2f       	mov	r20, r22
    430e:	4f 70       	andi	r20, 0x0F	; 15
    4310:	40 5d       	subi	r20, 0xD0	; 208
    4312:	4a 33       	cpi	r20, 0x3A	; 58
    4314:	18 f0       	brcs	.+6      	; 0x431c <__ultoa_invert+0x7c>
    4316:	49 5d       	subi	r20, 0xD9	; 217
    4318:	31 fd       	sbrc	r19, 1
    431a:	40 52       	subi	r20, 0x20	; 32
    431c:	41 93       	st	Z+, r20
    431e:	02 d0       	rcall	.+4      	; 0x4324 <__ultoa_invert+0x84>
    4320:	a9 f7       	brne	.-22     	; 0x430c <__ultoa_invert+0x6c>
    4322:	ea cf       	rjmp	.-44     	; 0x42f8 <__ultoa_invert+0x58>
    4324:	b4 e0       	ldi	r27, 0x04	; 4
    4326:	a6 95       	lsr	r26
    4328:	97 95       	ror	r25
    432a:	87 95       	ror	r24
    432c:	77 95       	ror	r23
    432e:	67 95       	ror	r22
    4330:	ba 95       	dec	r27
    4332:	c9 f7       	brne	.-14     	; 0x4326 <__ultoa_invert+0x86>
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	61 05       	cpc	r22, r1
    4338:	71 05       	cpc	r23, r1
    433a:	08 95       	ret
    433c:	9b 01       	movw	r18, r22
    433e:	ac 01       	movw	r20, r24
    4340:	0a 2e       	mov	r0, r26
    4342:	06 94       	lsr	r0
    4344:	57 95       	ror	r21
    4346:	47 95       	ror	r20
    4348:	37 95       	ror	r19
    434a:	27 95       	ror	r18
    434c:	ba 95       	dec	r27
    434e:	c9 f7       	brne	.-14     	; 0x4342 <__ultoa_invert+0xa2>
    4350:	62 0f       	add	r22, r18
    4352:	73 1f       	adc	r23, r19
    4354:	84 1f       	adc	r24, r20
    4356:	95 1f       	adc	r25, r21
    4358:	a0 1d       	adc	r26, r0
    435a:	08 95       	ret

0000435c <_exit>:
    435c:	f8 94       	cli

0000435e <__stop_program>:
    435e:	ff cf       	rjmp	.-2      	; 0x435e <__stop_program>
