
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000202  00800060  000033f2  00003486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000263  00800262  00800262  00003688  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000528  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cc5  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cc7  00000000  00000000  0000890d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033e5  00000000  00000000  0000a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bac  00000000  00000000  0000d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000178a  00000000  00000000  0000e568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002124  00000000  00000000  0000fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00011e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 01 	jmp	0x252	; 0x252 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_10>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      34:	0c 94 45 14 	jmp	0x288a	; 0x288a <__vector_13>
      38:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__vector_14>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      48:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      54:	b4 05       	cpc	r27, r4
      56:	bb 05       	cpc	r27, r11
      58:	be 05       	cpc	r27, r14
      5a:	c4 05       	cpc	r28, r4
      5c:	ca 05       	cpc	r28, r10
      5e:	cf 05       	cpc	r28, r15
      60:	d5 05       	cpc	r29, r5
      62:	dc 05       	cpc	r29, r12
      64:	e0 05       	cpc	r30, r0
      66:	e8 05       	cpc	r30, r8
      68:	37 06       	cpc	r3, r23
      6a:	37 06       	cpc	r3, r23
      6c:	37 06       	cpc	r3, r23
      6e:	37 06       	cpc	r3, r23
      70:	37 06       	cpc	r3, r23
      72:	37 06       	cpc	r3, r23
      74:	37 06       	cpc	r3, r23
      76:	37 06       	cpc	r3, r23
      78:	37 06       	cpc	r3, r23
      7a:	37 06       	cpc	r3, r23
      7c:	37 06       	cpc	r3, r23
      7e:	37 06       	cpc	r3, r23
      80:	37 06       	cpc	r3, r23
      82:	37 06       	cpc	r3, r23
      84:	37 06       	cpc	r3, r23
      86:	37 06       	cpc	r3, r23
      88:	37 06       	cpc	r3, r23
      8a:	37 06       	cpc	r3, r23
      8c:	37 06       	cpc	r3, r23
      8e:	37 06       	cpc	r3, r23
      90:	37 06       	cpc	r3, r23
      92:	37 06       	cpc	r3, r23
      94:	37 06       	cpc	r3, r23
      96:	37 06       	cpc	r3, r23
      98:	37 06       	cpc	r3, r23
      9a:	37 06       	cpc	r3, r23
      9c:	37 06       	cpc	r3, r23
      9e:	37 06       	cpc	r3, r23
      a0:	37 06       	cpc	r3, r23
      a2:	37 06       	cpc	r3, r23
      a4:	37 06       	cpc	r3, r23
      a6:	37 06       	cpc	r3, r23
      a8:	37 06       	cpc	r3, r23
      aa:	37 06       	cpc	r3, r23
      ac:	37 06       	cpc	r3, r23
      ae:	37 06       	cpc	r3, r23
      b0:	37 06       	cpc	r3, r23
      b2:	37 06       	cpc	r3, r23
      b4:	37 06       	cpc	r3, r23
      b6:	37 06       	cpc	r3, r23
      b8:	37 06       	cpc	r3, r23
      ba:	37 06       	cpc	r3, r23
      bc:	37 06       	cpc	r3, r23
      be:	37 06       	cpc	r3, r23
      c0:	37 06       	cpc	r3, r23
      c2:	37 06       	cpc	r3, r23
      c4:	37 06       	cpc	r3, r23
      c6:	37 06       	cpc	r3, r23
      c8:	37 06       	cpc	r3, r23
      ca:	37 06       	cpc	r3, r23
      cc:	37 06       	cpc	r3, r23
      ce:	37 06       	cpc	r3, r23
      d0:	37 06       	cpc	r3, r23
      d2:	37 06       	cpc	r3, r23
      d4:	37 06       	cpc	r3, r23
      d6:	37 06       	cpc	r3, r23
      d8:	37 06       	cpc	r3, r23
      da:	37 06       	cpc	r3, r23
      dc:	37 06       	cpc	r3, r23
      de:	37 06       	cpc	r3, r23
      e0:	37 06       	cpc	r3, r23
      e2:	37 06       	cpc	r3, r23
      e4:	37 06       	cpc	r3, r23
      e6:	37 06       	cpc	r3, r23
      e8:	37 06       	cpc	r3, r23
      ea:	37 06       	cpc	r3, r23
      ec:	37 06       	cpc	r3, r23
      ee:	37 06       	cpc	r3, r23
      f0:	37 06       	cpc	r3, r23
      f2:	37 06       	cpc	r3, r23
      f4:	37 06       	cpc	r3, r23
      f6:	37 06       	cpc	r3, r23
      f8:	37 06       	cpc	r3, r23
      fa:	37 06       	cpc	r3, r23
      fc:	37 06       	cpc	r3, r23
      fe:	37 06       	cpc	r3, r23
     100:	37 06       	cpc	r3, r23
     102:	37 06       	cpc	r3, r23
     104:	37 06       	cpc	r3, r23
     106:	37 06       	cpc	r3, r23
     108:	37 06       	cpc	r3, r23
     10a:	37 06       	cpc	r3, r23
     10c:	37 06       	cpc	r3, r23
     10e:	37 06       	cpc	r3, r23
     110:	37 06       	cpc	r3, r23
     112:	37 06       	cpc	r3, r23
     114:	37 06       	cpc	r3, r23
     116:	ef 05       	cpc	r30, r15
     118:	f6 05       	cpc	r31, r6
     11a:	fc 05       	cpc	r31, r12
     11c:	01 06       	cpc	r0, r17
     11e:	07 06       	cpc	r0, r23
     120:	0d 06       	cpc	r0, r29
     122:	37 06       	cpc	r3, r23
     124:	37 06       	cpc	r3, r23
     126:	37 06       	cpc	r3, r23
     128:	37 06       	cpc	r3, r23
     12a:	37 06       	cpc	r3, r23
     12c:	26 06       	cpc	r2, r22
     12e:	37 06       	cpc	r3, r23
     130:	37 06       	cpc	r3, r23
     132:	15 06       	cpc	r1, r21
     134:	1a 06       	cpc	r1, r26
     136:	37 06       	cpc	r3, r23
     138:	12 06       	cpc	r1, r18
     13a:	20 06       	cpc	r2, r16
     13c:	37 06       	cpc	r3, r23
     13e:	37 06       	cpc	r3, r23
     140:	37 06       	cpc	r3, r23
     142:	37 06       	cpc	r3, r23
     144:	37 06       	cpc	r3, r23
     146:	37 06       	cpc	r3, r23
     148:	37 06       	cpc	r3, r23
     14a:	37 06       	cpc	r3, r23
     14c:	37 06       	cpc	r3, r23
     14e:	37 06       	cpc	r3, r23
     150:	37 06       	cpc	r3, r23
     152:	37 06       	cpc	r3, r23
     154:	37 06       	cpc	r3, r23
     156:	37 06       	cpc	r3, r23
     158:	37 06       	cpc	r3, r23
     15a:	37 06       	cpc	r3, r23
     15c:	37 06       	cpc	r3, r23
     15e:	37 06       	cpc	r3, r23
     160:	37 06       	cpc	r3, r23
     162:	37 06       	cpc	r3, r23
     164:	37 06       	cpc	r3, r23
     166:	37 06       	cpc	r3, r23
     168:	37 06       	cpc	r3, r23
     16a:	37 06       	cpc	r3, r23
     16c:	37 06       	cpc	r3, r23
     16e:	37 06       	cpc	r3, r23
     170:	37 06       	cpc	r3, r23
     172:	37 06       	cpc	r3, r23
     174:	37 06       	cpc	r3, r23
     176:	37 06       	cpc	r3, r23
     178:	37 06       	cpc	r3, r23
     17a:	37 06       	cpc	r3, r23
     17c:	37 06       	cpc	r3, r23
     17e:	37 06       	cpc	r3, r23
     180:	37 06       	cpc	r3, r23
     182:	37 06       	cpc	r3, r23
     184:	37 06       	cpc	r3, r23
     186:	37 06       	cpc	r3, r23
     188:	37 06       	cpc	r3, r23
     18a:	37 06       	cpc	r3, r23
     18c:	37 06       	cpc	r3, r23
     18e:	37 06       	cpc	r3, r23
     190:	37 06       	cpc	r3, r23
     192:	37 06       	cpc	r3, r23
     194:	37 06       	cpc	r3, r23
     196:	37 06       	cpc	r3, r23
     198:	37 06       	cpc	r3, r23
     19a:	37 06       	cpc	r3, r23
     19c:	37 06       	cpc	r3, r23
     19e:	37 06       	cpc	r3, r23
     1a0:	37 06       	cpc	r3, r23
     1a2:	37 06       	cpc	r3, r23
     1a4:	37 06       	cpc	r3, r23
     1a6:	37 06       	cpc	r3, r23
     1a8:	37 06       	cpc	r3, r23
     1aa:	37 06       	cpc	r3, r23
     1ac:	37 06       	cpc	r3, r23
     1ae:	37 06       	cpc	r3, r23
     1b0:	37 06       	cpc	r3, r23
     1b2:	37 06       	cpc	r3, r23
     1b4:	37 06       	cpc	r3, r23
     1b6:	37 06       	cpc	r3, r23
     1b8:	37 06       	cpc	r3, r23
     1ba:	37 06       	cpc	r3, r23
     1bc:	37 06       	cpc	r3, r23
     1be:	37 06       	cpc	r3, r23
     1c0:	37 06       	cpc	r3, r23
     1c2:	37 06       	cpc	r3, r23
     1c4:	37 06       	cpc	r3, r23
     1c6:	37 06       	cpc	r3, r23
     1c8:	37 06       	cpc	r3, r23
     1ca:	37 06       	cpc	r3, r23
     1cc:	37 06       	cpc	r3, r23
     1ce:	37 06       	cpc	r3, r23
     1d0:	37 06       	cpc	r3, r23
     1d2:	37 06       	cpc	r3, r23
     1d4:	37 06       	cpc	r3, r23
     1d6:	37 06       	cpc	r3, r23
     1d8:	37 06       	cpc	r3, r23
     1da:	37 06       	cpc	r3, r23
     1dc:	37 06       	cpc	r3, r23
     1de:	37 06       	cpc	r3, r23
     1e0:	37 06       	cpc	r3, r23
     1e2:	37 06       	cpc	r3, r23
     1e4:	37 06       	cpc	r3, r23
     1e6:	37 06       	cpc	r3, r23
     1e8:	37 06       	cpc	r3, r23
     1ea:	37 06       	cpc	r3, r23
     1ec:	37 06       	cpc	r3, r23
     1ee:	37 06       	cpc	r3, r23
     1f0:	37 06       	cpc	r3, r23
     1f2:	37 06       	cpc	r3, r23
     1f4:	37 06       	cpc	r3, r23
     1f6:	37 06       	cpc	r3, r23
     1f8:	37 06       	cpc	r3, r23
     1fa:	37 06       	cpc	r3, r23
     1fc:	37 06       	cpc	r3, r23
     1fe:	37 06       	cpc	r3, r23
     200:	37 06       	cpc	r3, r23
     202:	37 06       	cpc	r3, r23
     204:	37 06       	cpc	r3, r23
     206:	37 06       	cpc	r3, r23
     208:	37 06       	cpc	r3, r23
     20a:	37 06       	cpc	r3, r23
     20c:	37 06       	cpc	r3, r23
     20e:	37 06       	cpc	r3, r23
     210:	37 06       	cpc	r3, r23
     212:	37 06       	cpc	r3, r23
     214:	37 06       	cpc	r3, r23
     216:	37 06       	cpc	r3, r23
     218:	37 06       	cpc	r3, r23
     21a:	37 06       	cpc	r3, r23
     21c:	37 06       	cpc	r3, r23
     21e:	37 06       	cpc	r3, r23
     220:	37 06       	cpc	r3, r23
     222:	37 06       	cpc	r3, r23
     224:	37 06       	cpc	r3, r23
     226:	37 06       	cpc	r3, r23
     228:	37 06       	cpc	r3, r23
     22a:	37 06       	cpc	r3, r23
     22c:	37 06       	cpc	r3, r23
     22e:	37 06       	cpc	r3, r23
     230:	37 06       	cpc	r3, r23
     232:	37 06       	cpc	r3, r23
     234:	37 06       	cpc	r3, r23
     236:	37 06       	cpc	r3, r23
     238:	37 06       	cpc	r3, r23
     23a:	37 06       	cpc	r3, r23
     23c:	37 06       	cpc	r3, r23
     23e:	37 06       	cpc	r3, r23
     240:	37 06       	cpc	r3, r23
     242:	37 06       	cpc	r3, r23
     244:	2a 06       	cpc	r2, r26
     246:	36 06       	cpc	r3, r22
     248:	34 06       	cpc	r3, r20
     24a:	32 06       	cpc	r3, r18
     24c:	30 06       	cpc	r3, r16
     24e:	2e 06       	cpc	r2, r30
     250:	2c 06       	cpc	r2, r28

00000252 <__ctors_end>:
     252:	11 24       	eor	r1, r1
     254:	1f be       	out	0x3f, r1	; 63
     256:	cf e5       	ldi	r28, 0x5F	; 95
     258:	d8 e0       	ldi	r29, 0x08	; 8
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	cd bf       	out	0x3d, r28	; 61

0000025e <__do_copy_data>:
     25e:	12 e0       	ldi	r17, 0x02	; 2
     260:	a0 e6       	ldi	r26, 0x60	; 96
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e2 ef       	ldi	r30, 0xF2	; 242
     266:	f3 e3       	ldi	r31, 0x33	; 51
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x10>
     26a:	05 90       	lpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	a2 36       	cpi	r26, 0x62	; 98
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0xc>

00000274 <__do_clear_bss>:
     274:	24 e0       	ldi	r18, 0x04	; 4
     276:	a2 e6       	ldi	r26, 0x62	; 98
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a5 3c       	cpi	r26, 0xC5	; 197
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
     288:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	ae 01       	movw	r20, r28
     29a:	4b 5f       	subi	r20, 0xFB	; 251
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	fa 01       	movw	r30, r20
     2a0:	61 91       	ld	r22, Z+
     2a2:	71 91       	ld	r23, Z+
     2a4:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     2a6:	80 eb       	ldi	r24, 0xB0	; 176
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     2b4:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     2b6:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     2b8:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     2ba:	89 9a       	sbi	0x11, 1	; 17
     2bc:	08 95       	ret

000002be <init_driver>:
}

void init_driver(void)
{
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     2be:	62 e3       	ldi	r22, 0x32	; 50
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 98 13 	call	0x2730	; 0x2730 <timer0_init>
	init_display_drv();
     2c6:	0e 94 6b 05 	call	0xad6	; 0xad6 <init_display_drv>
	init_buttons();
     2ca:	0e 94 02 04 	call	0x804	; 0x804 <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	init_system();
     2ce:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <init_system>
	init_measure();
     2d2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     2d6:	80 b7       	in	r24, 0x30	; 48
     2d8:	8b 7f       	andi	r24, 0xFB	; 251
     2da:	80 bf       	out	0x30, r24	; 48
     2dc:	08 95       	ret

000002de <main>:
}

int main(void)
{
	init_pin();
     2de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <init_pin>
	sei();
     2e2:	78 94       	sei
	init_driver();
     2e4:	0e 94 5f 01 	call	0x2be	; 0x2be <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     2e8:	87 e7       	ldi	r24, 0x77	; 119
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     2f8:	0e 94 52 07 	call	0xea4	; 0xea4 <disp_process>
		animation();
     2fc:	0e 94 ae 08 	call	0x115c	; 0x115c <animation>
		process_button();
     300:	0e 94 58 03 	call	0x6b0	; 0x6b0 <process_button>
		disp_fast_process();
     304:	0e 94 35 12 	call	0x246a	; 0x246a <disp_fast_process>
		disp_very_fast_process();
     308:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <disp_very_fast_process>
		dcmotor_process(motor_value);
     30c:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <motor_value>
     310:	0e 94 ef 04 	call	0x9de	; 0x9de <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     314:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
     318:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <servo_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     31c:	0e 94 80 09 	call	0x1300	; 0x1300 <error_event>
		error_led_blink();
     320:	0e 94 de 0c 	call	0x19bc	; 0x19bc <error_led_blink>
		measure_process();
     324:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <measure_process>
		accumulator_process();
     328:	0e 94 bd 01 	call	0x37a	; 0x37a <accumulator_process>
		accum_led_process();
     32c:	0e 94 06 02 	call	0x40c	; 0x40c <accum_led_process>
		buzzer_process();
     330:	0e 94 19 04 	call	0x832	; 0x832 <buzzer_process>
     334:	e1 cf       	rjmp	.-62     	; 0x2f8 <main+0x1a>

00000336 <accum_get_voltage>:

static float voltage = 0;

float accum_get_voltage(void)
{
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <measure_get_filtered_value>
    return voltage;
     33c:	bc 01       	movw	r22, r24
     33e:	66 0f       	add	r22, r22
     340:	77 1f       	adc	r23, r23
     342:	66 0f       	add	r22, r22
     344:	77 1f       	adc	r23, r23
     346:	86 0f       	add	r24, r22
     348:	97 1f       	adc	r25, r23
     34a:	bc 01       	movw	r22, r24
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
     354:	26 e6       	ldi	r18, 0x66	; 102
     356:	36 e6       	ldi	r19, 0x66	; 102
     358:	46 eb       	ldi	r20, 0xB6	; 182
     35a:	50 e4       	ldi	r21, 0x40	; 64
     35c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5a e3       	ldi	r21, 0x3A	; 58
     368:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
     36c:	23 e3       	ldi	r18, 0x33	; 51
     36e:	33 e3       	ldi	r19, 0x33	; 51
     370:	43 e3       	ldi	r20, 0x33	; 51
     372:	5f e3       	ldi	r21, 0x3F	; 63
     374:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
}
     378:	08 95       	ret

0000037a <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     37a:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
     37e:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
     382:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
     386:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
     38a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <accumulator_timer.1911>
     38e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <accumulator_timer.1911+0x1>
     392:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <accumulator_timer.1911+0x2>
     396:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <accumulator_timer.1911+0x3>
     39a:	84 17       	cp	r24, r20
     39c:	95 07       	cpc	r25, r21
     39e:	a6 07       	cpc	r26, r22
     3a0:	b7 07       	cpc	r27, r23
     3a2:	98 f5       	brcc	.+102    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     3aa:	89 35       	cpi	r24, 0x59	; 89
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	92 07       	cpc	r25, r18
     3b0:	18 f0       	brcs	.+6      	; 0x3b8 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     3b8:	8b 38       	cpi	r24, 0x8B	; 139
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	92 07       	cpc	r25, r18
     3be:	18 f4       	brcc	.+6      	; 0x3c6 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     3c0:	22 e0       	ldi	r18, 0x02	; 2
     3c2:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     3c6:	8e 35       	cpi	r24, 0x5E	; 94
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	92 07       	cpc	r25, r18
     3cc:	18 f4       	brcc	.+6      	; 0x3d4 <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     3ce:	23 e0       	ldi	r18, 0x03	; 3
     3d0:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     3d4:	8c 58       	subi	r24, 0x8C	; 140
     3d6:	91 40       	sbci	r25, 0x01	; 1
     3d8:	8c 3c       	cpi	r24, 0xCC	; 204
     3da:	91 05       	cpc	r25, r1
     3dc:	10 f4       	brcc	.+4      	; 0x3e2 <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     3de:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     3e2:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
     3e6:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
     3ea:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
     3ee:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
     3f2:	8c 59       	subi	r24, 0x9C	; 156
     3f4:	9f 4f       	sbci	r25, 0xFF	; 255
     3f6:	af 4f       	sbci	r26, 0xFF	; 255
     3f8:	bf 4f       	sbci	r27, 0xFF	; 255
     3fa:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <accumulator_timer.1911>
     3fe:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <accumulator_timer.1911+0x1>
     402:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <accumulator_timer.1911+0x2>
     406:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <accumulator_timer.1911+0x3>
     40a:	08 95       	ret

0000040c <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     40c:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
     410:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
     414:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
     418:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
     41c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     420:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     424:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     428:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     42c:	84 17       	cp	r24, r20
     42e:	95 07       	cpc	r25, r21
     430:	a6 07       	cpc	r26, r22
     432:	b7 07       	cpc	r27, r23
     434:	08 f0       	brcs	.+2      	; 0x438 <accum_led_process+0x2c>
     436:	86 c0       	rjmp	.+268    	; 0x544 <accum_led_process+0x138>
	{
        switch (accumulator_state)
     438:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <accumulator_state>
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	e9 f0       	breq	.+58     	; 0x47a <accum_led_process+0x6e>
     440:	30 f0       	brcs	.+12     	; 0x44e <accum_led_process+0x42>
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	99 f1       	breq	.+102    	; 0x4ac <accum_led_process+0xa0>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	09 f4       	brne	.+2      	; 0x44c <accum_led_process+0x40>
     44a:	67 c0       	rjmp	.+206    	; 0x51a <accum_led_process+0x10e>
     44c:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     44e:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     450:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     454:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     458:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     45c:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     460:	88 53       	subi	r24, 0x38	; 56
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	af 4f       	sbci	r26, 0xFF	; 255
     466:	bf 4f       	sbci	r27, 0xFF	; 255
     468:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <process_timer.1915>
     46c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <process_timer.1915+0x1>
     470:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <process_timer.1915+0x2>
     474:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <process_timer.1915+0x3>
            break;
     478:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     47a:	98 b3       	in	r25, 0x18	; 24
     47c:	80 e2       	ldi	r24, 0x20	; 32
     47e:	89 27       	eor	r24, r25
     480:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     482:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     486:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     48a:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     48e:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     492:	86 50       	subi	r24, 0x06	; 6
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	af 4f       	sbci	r26, 0xFF	; 255
     498:	bf 4f       	sbci	r27, 0xFF	; 255
     49a:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <process_timer.1915>
     49e:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <process_timer.1915+0x1>
     4a2:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <process_timer.1915+0x2>
     4a6:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <process_timer.1915+0x3>
            break;
     4aa:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     4ac:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     4b0:	81 11       	cpse	r24, r1
     4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <accum_led_process+0xda>
            {
                state_led = 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
                LED_ACUM_ON;
     4ba:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     4bc:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     4c0:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     4c4:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     4c8:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     4cc:	8c 50       	subi	r24, 0x0C	; 12
     4ce:	9e 4f       	sbci	r25, 0xFE	; 254
     4d0:	af 4f       	sbci	r26, 0xFF	; 255
     4d2:	bf 4f       	sbci	r27, 0xFF	; 255
     4d4:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <process_timer.1915>
     4d8:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <process_timer.1915+0x1>
     4dc:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <process_timer.1915+0x2>
     4e0:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <process_timer.1915+0x3>
     4e4:	08 95       	ret
            }
            else if (state_led == 1)
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	69 f5       	brne	.+90     	; 0x544 <accum_led_process+0x138>
            {
                state_led = 0;
     4ea:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <__data_end>
                LED_ACUM_OFF;
     4ee:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     4f0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     4f4:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     4f8:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     4fc:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     500:	84 52       	subi	r24, 0x24	; 36
     502:	9a 4f       	sbci	r25, 0xFA	; 250
     504:	af 4f       	sbci	r26, 0xFF	; 255
     506:	bf 4f       	sbci	r27, 0xFF	; 255
     508:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <process_timer.1915>
     50c:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <process_timer.1915+0x1>
     510:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <process_timer.1915+0x2>
     514:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <process_timer.1915+0x3>
     518:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     51a:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     51c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <process_timer.1915>
     520:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <process_timer.1915+0x1>
     524:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <process_timer.1915+0x2>
     528:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <process_timer.1915+0x3>
     52c:	88 51       	subi	r24, 0x18	; 24
     52e:	9c 4f       	sbci	r25, 0xFC	; 252
     530:	af 4f       	sbci	r26, 0xFF	; 255
     532:	bf 4f       	sbci	r27, 0xFF	; 255
     534:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <process_timer.1915>
     538:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <process_timer.1915+0x1>
     53c:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <process_timer.1915+0x2>
     540:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <process_timer.1915+0x3>
     544:	08 95       	ret

00000546 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     546:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     548:	97 b1       	in	r25, 0x07	; 7
     54a:	98 7f       	andi	r25, 0xF8	; 248
     54c:	87 70       	andi	r24, 0x07	; 7
     54e:	89 2b       	or	r24, r25
     550:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     552:	37 9a       	sbi	0x06, 7	; 6
     554:	08 95       	ret

00000556 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     556:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     558:	36 99       	sbic	0x06, 6	; 6
     55a:	fe cf       	rjmp	.-4      	; 0x558 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     55c:	84 b1       	in	r24, 0x04	; 4
     55e:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     560:	08 95       	ret

00000562 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     562:	0e 94 a3 02 	call	0x546	; 0x546 <adc_setchannel>
	return adc_readsel();
     566:	0e 94 ab 02 	call	0x556	; 0x556 <adc_readsel>
}
     56a:	08 95       	ret

0000056c <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     56c:	dc 01       	movw	r26, r24
     56e:	16 96       	adiw	r26, 0x06	; 6
     570:	ed 91       	ld	r30, X+
     572:	fc 91       	ld	r31, X
     574:	17 97       	sbiw	r26, 0x07	; 7
     576:	20 81       	ld	r18, Z
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	18 96       	adiw	r26, 0x08	; 8
     57e:	0c 90       	ld	r0, X
     580:	02 c0       	rjmp	.+4      	; 0x586 <read_button+0x1a>
     582:	f5 95       	asr	r31
     584:	e7 95       	ror	r30
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <read_button+0x16>
     58a:	cf 01       	movw	r24, r30
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	08 95       	ret

00000590 <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     590:	ed e5       	ldi	r30, 0x5D	; 93
     592:	f4 e0       	ldi	r31, 0x04	; 4
     594:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     59a:	14 86       	std	Z+12, r1	; 0x0c
     59c:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     59e:	12 86       	std	Z+10, r1	; 0x0a
     5a0:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     5a2:	16 86       	std	Z+14, r1	; 0x0e
     5a4:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     5a6:	26 e3       	ldi	r18, 0x36	; 54
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	37 83       	std	Z+7, r19	; 0x07
     5ac:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     5b2:	e0 e3       	ldi	r30, 0x30	; 48
     5b4:	f4 e0       	ldi	r31, 0x04	; 4
     5b6:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     5b8:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     5ba:	14 86       	std	Z+12, r1	; 0x0c
     5bc:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     5be:	12 86       	std	Z+10, r1	; 0x0a
     5c0:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     5c2:	16 86       	std	Z+14, r1	; 0x0e
     5c4:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     5c6:	37 83       	std	Z+7, r19	; 0x07
     5c8:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     5ca:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     5cc:	ef e3       	ldi	r30, 0x3F	; 63
     5ce:	f4 e0       	ldi	r31, 0x04	; 4
     5d0:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     5d2:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     5d4:	14 86       	std	Z+12, r1	; 0x0c
     5d6:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     5d8:	12 86       	std	Z+10, r1	; 0x0a
     5da:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     5dc:	16 86       	std	Z+14, r1	; 0x0e
     5de:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     5e0:	37 83       	std	Z+7, r19	; 0x07
     5e2:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     5e4:	96 e0       	ldi	r25, 0x06	; 6
     5e6:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     5e8:	ed e1       	ldi	r30, 0x1D	; 29
     5ea:	f4 e0       	ldi	r31, 0x04	; 4
     5ec:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     5ee:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     5f0:	14 86       	std	Z+12, r1	; 0x0c
     5f2:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     5f4:	12 86       	std	Z+10, r1	; 0x0a
     5f6:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     5f8:	16 86       	std	Z+14, r1	; 0x0e
     5fa:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     5fc:	40 e3       	ldi	r20, 0x30	; 48
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	57 83       	std	Z+7, r21	; 0x07
     602:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     608:	ee e0       	ldi	r30, 0x0E	; 14
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     60e:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     610:	14 86       	std	Z+12, r1	; 0x0c
     612:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     614:	12 86       	std	Z+10, r1	; 0x0a
     616:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     618:	16 86       	std	Z+14, r1	; 0x0e
     61a:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     61c:	37 83       	std	Z+7, r19	; 0x07
     61e:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     620:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     622:	ee e4       	ldi	r30, 0x4E	; 78
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     628:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     62a:	14 86       	std	Z+12, r1	; 0x0c
     62c:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     62e:	12 86       	std	Z+10, r1	; 0x0a
     630:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     632:	16 86       	std	Z+14, r1	; 0x0e
     634:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     636:	69 e3       	ldi	r22, 0x39	; 57
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	77 83       	std	Z+7, r23	; 0x07
     63c:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     63e:	a4 e0       	ldi	r26, 0x04	; 4
     640:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     642:	ec e6       	ldi	r30, 0x6C	; 108
     644:	f4 e0       	ldi	r31, 0x04	; 4
     646:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     648:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     64a:	14 86       	std	Z+12, r1	; 0x0c
     64c:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     64e:	12 86       	std	Z+10, r1	; 0x0a
     650:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     652:	16 86       	std	Z+14, r1	; 0x0e
     654:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     656:	43 e3       	ldi	r20, 0x33	; 51
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	57 83       	std	Z+7, r21	; 0x07
     65c:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     65e:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     660:	eb e7       	ldi	r30, 0x7B	; 123
     662:	f4 e0       	ldi	r31, 0x04	; 4
     664:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     666:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     668:	14 86       	std	Z+12, r1	; 0x0c
     66a:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     66c:	12 86       	std	Z+10, r1	; 0x0a
     66e:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     670:	16 86       	std	Z+14, r1	; 0x0e
     672:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     674:	37 83       	std	Z+7, r19	; 0x07
     676:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     678:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     67a:	e0 ef       	ldi	r30, 0xF0	; 240
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     680:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     682:	14 86       	std	Z+12, r1	; 0x0c
     684:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     686:	12 86       	std	Z+10, r1	; 0x0a
     688:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     68a:	16 86       	std	Z+14, r1	; 0x0e
     68c:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     68e:	77 83       	std	Z+7, r23	; 0x07
     690:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     692:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     694:	ef ef       	ldi	r30, 0xFF	; 255
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     69a:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     69c:	14 86       	std	Z+12, r1	; 0x0c
     69e:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     6a0:	12 86       	std	Z+10, r1	; 0x0a
     6a2:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     6a4:	16 86       	std	Z+14, r1	; 0x0e
     6a6:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     6a8:	57 83       	std	Z+7, r21	; 0x07
     6aa:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     6ac:	10 86       	std	Z+8, r1	; 0x08
     6ae:	08 95       	ret

000006b0 <process_button>:
}

void process_button(void)
{
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     6be:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
     6c2:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
     6c6:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
     6ca:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
     6ce:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <timer_button>
     6d2:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <timer_button+0x1>
     6d6:	a0 91 2e 04 	lds	r26, 0x042E	; 0x80042e <timer_button+0x2>
     6da:	b0 91 2f 04 	lds	r27, 0x042F	; 0x80042f <timer_button+0x3>
     6de:	84 17       	cp	r24, r20
     6e0:	95 07       	cpc	r25, r21
     6e2:	a6 07       	cpc	r26, r22
     6e4:	b7 07       	cpc	r27, r23
     6e6:	08 f0       	brcs	.+2      	; 0x6ea <process_button+0x3a>
     6e8:	85 c0       	rjmp	.+266    	; 0x7f4 <process_button+0x144>
	{
		timer_button = mktime.ms + 20;
     6ea:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
     6ee:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
     6f2:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
     6f6:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
     6fa:	44 96       	adiw	r24, 0x14	; 20
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <timer_button>
     704:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <timer_button+0x1>
     708:	a0 93 2e 04 	sts	0x042E, r26	; 0x80042e <timer_button+0x2>
     70c:	b0 93 2f 04 	sts	0x042F, r27	; 0x80042f <timer_button+0x3>
     710:	c0 e6       	ldi	r28, 0x60	; 96
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	0f 2e       	mov	r0, r31
     716:	f4 e7       	ldi	r31, 0x74	; 116
     718:	ef 2e       	mov	r14, r31
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ff 2e       	mov	r15, r31
     71e:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     720:	dd 24       	eor	r13, r13
     722:	d3 94       	inc	r13
     724:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     726:	88 81       	ld	r24, Y
     728:	99 81       	ldd	r25, Y+1	; 0x01
     72a:	0e 94 b6 02 	call	0x56c	; 0x56c <read_button>
			if(red_val != but_tab[i]->value)
     72e:	e8 81       	ld	r30, Y
     730:	f9 81       	ldd	r31, Y+1	; 0x01
     732:	95 81       	ldd	r25, Z+5	; 0x05
     734:	89 17       	cp	r24, r25
     736:	e1 f0       	breq	.+56     	; 0x770 <process_button+0xc0>
			{
				but_tab[i]->value = red_val;
     738:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	61 f4       	brne	.+24     	; 0x756 <process_button+0xa6>
     73e:	88 81       	ld	r24, Y
     740:	99 81       	ldd	r25, Y+1	; 0x01
     742:	dc 01       	movw	r26, r24
     744:	19 96       	adiw	r26, 0x09	; 9
     746:	ed 91       	ld	r30, X+
     748:	fc 91       	ld	r31, X
     74a:	1a 97       	sbiw	r26, 0x0a	; 10
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	09 f4       	brne	.+2      	; 0x752 <process_button+0xa2>
     750:	41 c0       	rjmp	.+130    	; 0x7d4 <process_button+0x124>
				but_tab[i]->rise_callback(but_tab[i]);
     752:	09 95       	icall
     754:	3f c0       	rjmp	.+126    	; 0x7d4 <process_button+0x124>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     756:	81 11       	cpse	r24, r1
     758:	3d c0       	rjmp	.+122    	; 0x7d4 <process_button+0x124>
     75a:	88 81       	ld	r24, Y
     75c:	99 81       	ldd	r25, Y+1	; 0x01
     75e:	dc 01       	movw	r26, r24
     760:	1b 96       	adiw	r26, 0x0b	; 11
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	1c 97       	sbiw	r26, 0x0c	; 12
     768:	30 97       	sbiw	r30, 0x00	; 0
     76a:	21 f0       	breq	.+8      	; 0x774 <process_button+0xc4>
				but_tab[i]->fall_callback(but_tab[i]);
     76c:	09 95       	icall
     76e:	02 c0       	rjmp	.+4      	; 0x774 <process_button+0xc4>
			}
			//timer
			if (red_val == 0)
     770:	81 11       	cpse	r24, r1
     772:	30 c0       	rjmp	.+96     	; 0x7d4 <process_button+0x124>
			{
				but_tab[i]->tim_cnt++;
     774:	d8 01       	movw	r26, r16
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	a2 81       	ldd	r26, Z+2	; 0x02
     780:	b3 81       	ldd	r27, Z+3	; 0x03
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	a1 1d       	adc	r26, r1
     786:	b1 1d       	adc	r27, r1
     788:	80 83       	st	Z, r24
     78a:	91 83       	std	Z+1, r25	; 0x01
     78c:	a2 83       	std	Z+2, r26	; 0x02
     78e:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     790:	d8 01       	movw	r26, r16
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	a2 81       	ldd	r26, Z+2	; 0x02
     79c:	b3 81       	ldd	r27, Z+3	; 0x03
     79e:	88 97       	sbiw	r24, 0x28	; 40
     7a0:	a1 05       	cpc	r26, r1
     7a2:	b1 05       	cpc	r27, r1
     7a4:	10 f1       	brcs	.+68     	; 0x7ea <process_button+0x13a>
     7a6:	84 81       	ldd	r24, Z+4	; 0x04
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	f9 f0       	breq	.+62     	; 0x7ea <process_button+0x13a>
				{
					if (but_tab[i]->timer_callback != 0)
     7ac:	05 84       	ldd	r0, Z+13	; 0x0d
     7ae:	f6 85       	ldd	r31, Z+14	; 0x0e
     7b0:	e0 2d       	mov	r30, r0
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	19 f0       	breq	.+6      	; 0x7bc <process_button+0x10c>
					but_tab[i]->timer_callback(&button1);
     7b6:	8d e5       	ldi	r24, 0x5D	; 93
     7b8:	94 e0       	ldi	r25, 0x04	; 4
     7ba:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     7bc:	d8 01       	movw	r26, r16
     7be:	ed 91       	ld	r30, X+
     7c0:	fc 91       	ld	r31, X
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	10 82       	st	Z, r1
     7c6:	11 82       	std	Z+1, r1	; 0x01
     7c8:	12 82       	std	Z+2, r1	; 0x02
     7ca:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	d4 82       	std	Z+4, r13	; 0x04
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <process_button+0x13a>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     7d4:	d8 01       	movw	r26, r16
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	10 82       	st	Z, r1
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	14 82       	std	Z+4, r1	; 0x04
     7ea:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     7ec:	ce 15       	cp	r28, r14
     7ee:	df 05       	cpc	r29, r15
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <process_button+0x144>
     7f2:	98 cf       	rjmp	.-208    	; 0x724 <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	08 95       	ret

00000804 <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     804:	0e 94 c8 02 	call	0x590	; 0x590 <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     808:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     80a:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     80c:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     80e:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     810:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     812:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     814:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     816:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     818:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     81a:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     81c:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     81e:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     820:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     822:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     824:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     826:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     828:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     82a:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     82c:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     82e:	a8 9a       	sbi	0x15, 0	; 21
     830:	08 95       	ret

00000832 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     832:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
     836:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
     83a:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
     83e:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
     842:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <buzzer_timer>
     846:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <buzzer_timer+0x1>
     84a:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <buzzer_timer+0x2>
     84e:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <buzzer_timer+0x3>
     852:	84 17       	cp	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	a6 07       	cpc	r26, r22
     858:	b7 07       	cpc	r27, r23
     85a:	08 f0       	brcs	.+2      	; 0x85e <buzzer_process+0x2c>
     85c:	59 c0       	rjmp	.+178    	; 0x910 <__stack+0xb1>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     85e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
     862:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
     866:	95 ff       	sbrs	r25, 5
     868:	37 c0       	rjmp	.+110    	; 0x8d8 <__stack+0x79>
     86a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <buzzer_state>
     86e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <buzzer_state+0x1>
     872:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <buzzer_state+0x2>
     876:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <buzzer_state+0x3>
     87a:	89 2b       	or	r24, r25
     87c:	8a 2b       	or	r24, r26
     87e:	8b 2b       	or	r24, r27
     880:	59 f5       	brne	.+86     	; 0x8d8 <__stack+0x79>
		{
			ON_BUZZER;
     882:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     884:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
     888:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
     88c:	9f 7d       	andi	r25, 0xDF	; 223
     88e:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
     892:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
			buzzer_state = 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <buzzer_state>
     8a2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <buzzer_state+0x1>
     8a6:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <buzzer_state+0x2>
     8aa:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <buzzer_state+0x3>
			buzzer_timer += 100;
     8ae:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <buzzer_timer>
     8b2:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <buzzer_timer+0x1>
     8b6:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <buzzer_timer+0x2>
     8ba:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <buzzer_timer+0x3>
     8be:	8c 59       	subi	r24, 0x9C	; 156
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	af 4f       	sbci	r26, 0xFF	; 255
     8c4:	bf 4f       	sbci	r27, 0xFF	; 255
     8c6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <buzzer_timer>
     8ca:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <buzzer_timer+0x1>
     8ce:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <buzzer_timer+0x2>
     8d2:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <buzzer_timer+0x3>
     8d6:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     8d8:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     8da:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <buzzer_state>
     8de:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <buzzer_state+0x1>
     8e2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <buzzer_state+0x2>
     8e6:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <buzzer_state+0x3>
			buzzer_timer += 50;
     8ea:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <buzzer_timer>
     8ee:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <buzzer_timer+0x1>
     8f2:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <buzzer_timer+0x2>
     8f6:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <buzzer_timer+0x3>
     8fa:	c2 96       	adiw	r24, 0x32	; 50
     8fc:	a1 1d       	adc	r26, r1
     8fe:	b1 1d       	adc	r27, r1
     900:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <buzzer_timer>
     904:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <buzzer_timer+0x1>
     908:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <buzzer_timer+0x2>
     90c:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <buzzer_timer+0x3>
     910:	08 95       	ret

00000912 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     912:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     914:	c0 98       	cbi	0x18, 0	; 24
     916:	08 95       	ret

00000918 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     918:	8e e8       	ldi	r24, 0x8E	; 142
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 c4 13 	call	0x2788	; 0x2788 <evTime_init>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <motorD>
     926:	94 98       	cbi	0x12, 4	; 18
     928:	15 bc       	out	0x25, r1	; 37
     92a:	8f 9a       	sbi	0x11, 7	; 17
     92c:	97 98       	cbi	0x12, 7	; 18
     92e:	08 95       	ret

00000930 <dcmotorpwm_deinit>:
     930:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <motorD>
     934:	15 bc       	out	0x25, r1	; 37
     936:	97 98       	cbi	0x12, 7	; 18
     938:	94 98       	cbi	0x12, 4	; 18
     93a:	08 95       	ret

0000093c <dcmotor_is_on>:
     93c:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <motorD>
     940:	92 50       	subi	r25, 0x02	; 2
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	93 30       	cpi	r25, 0x03	; 3
     948:	10 f0       	brcs	.+4      	; 0x94e <dcmotor_is_on+0x12>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	c9 01       	movw	r24, r18
     950:	08 95       	ret

00000952 <dcmotorpwm_stop>:
     952:	0e 94 9e 04 	call	0x93c	; 0x93c <dcmotor_is_on>
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	59 f0       	breq	.+22     	; 0x970 <dcmotorpwm_stop+0x1e>
     95a:	15 bc       	out	0x25, r1	; 37
     95c:	97 98       	cbi	0x12, 7	; 18
     95e:	94 98       	cbi	0x12, 4	; 18
     960:	ea e8       	ldi	r30, 0x8A	; 138
     962:	f4 e0       	ldi	r31, 0x04	; 4
     964:	80 81       	ld	r24, Z
     966:	81 83       	std	Z+1, r24	; 0x01
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 83       	st	Z, r24
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	08 95       	ret

00000972 <dcmotorpwm_start>:
     972:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <motorD>
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	d9 f4       	brne	.+54     	; 0x9b0 <dcmotorpwm_start+0x3e>
     97a:	94 9a       	sbi	0x12, 4	; 18
     97c:	85 b5       	in	r24, 0x25	; 37
     97e:	80 62       	ori	r24, 0x20	; 32
     980:	85 bd       	out	0x25, r24	; 37
     982:	85 b5       	in	r24, 0x25	; 37
     984:	80 64       	ori	r24, 0x40	; 64
     986:	85 bd       	out	0x25, r24	; 37
     988:	85 b5       	in	r24, 0x25	; 37
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	85 bd       	out	0x25, r24	; 37
     98e:	ea e8       	ldi	r30, 0x8A	; 138
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	80 81       	ld	r24, Z
     994:	81 83       	std	Z+1, r24	; 0x01
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	80 83       	st	Z, r24
     99a:	48 ee       	ldi	r20, 0xE8	; 232
     99c:	53 e0       	ldi	r21, 0x03	; 3
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8e e8       	ldi	r24, 0x8E	; 142
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	08 95       	ret

000009b6 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     9b6:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <motorD+0x3>
}
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	08 95       	ret

000009be <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	//debug_msg("dcmotor error\n");
	dcmotorpwm_stop();
     9be:	0e 94 a9 04 	call	0x952	; 0x952 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     9c2:	85 e0       	ldi	r24, 0x05	; 5
     9c4:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <motorD>
     9c8:	08 95       	ret

000009ca <dcmotor_set_try>:
}

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     9ca:	0e 94 9e 04 	call	0x93c	; 0x93c <dcmotor_is_on>
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	29 f0       	breq	.+10     	; 0x9dc <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <motorD>
		return 1;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     9dc:	08 95       	ret

000009de <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     9de:	cf 93       	push	r28
     9e0:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     9e2:	46 e9       	ldi	r20, 0x96	; 150
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	84 e7       	ldi	r24, 0x74	; 116
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 0e 14 	call	0x281c	; 0x281c <evTime_process_period>
     9f2:	89 2b       	or	r24, r25
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <dcmotor_process+0x1a>
     9f6:	58 c0       	rjmp	.+176    	; 0xaa8 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     9f8:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <motorD>
     9fc:	93 30       	cpi	r25, 0x03	; 3
     9fe:	e9 f0       	breq	.+58     	; 0xa3a <dcmotor_process+0x5c>
     a00:	28 f4       	brcc	.+10     	; 0xa0c <dcmotor_process+0x2e>
     a02:	91 30       	cpi	r25, 0x01	; 1
     a04:	b9 f0       	breq	.+46     	; 0xa34 <dcmotor_process+0x56>
     a06:	92 30       	cpi	r25, 0x02	; 2
     a08:	41 f0       	breq	.+16     	; 0xa1a <dcmotor_process+0x3c>
     a0a:	4e c0       	rjmp	.+156    	; 0xaa8 <dcmotor_process+0xca>
     a0c:	94 30       	cpi	r25, 0x04	; 4
     a0e:	09 f4       	brne	.+2      	; 0xa12 <dcmotor_process+0x34>
     a10:	48 c0       	rjmp	.+144    	; 0xaa2 <dcmotor_process+0xc4>
     a12:	95 30       	cpi	r25, 0x05	; 5
     a14:	09 f4       	brne	.+2      	; 0xa18 <dcmotor_process+0x3a>
     a16:	42 c0       	rjmp	.+132    	; 0xa9c <dcmotor_process+0xbe>
     a18:	47 c0       	rjmp	.+142    	; 0xaa8 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     a1a:	c0 93 8d 04 	sts	0x048D, r28	; 0x80048d <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     a1e:	27 e3       	ldi	r18, 0x37	; 55
     a20:	c2 9f       	mul	r28, r18
     a22:	c0 01       	movw	r24, r0
     a24:	11 24       	eor	r1, r1
     a26:	63 e6       	ldi	r22, 0x63	; 99
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__divmodhi4>
     a2e:	68 53       	subi	r22, 0x38	; 56
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     a30:	63 bd       	out	0x23, r22	; 35
			break;
     a32:	3a c0       	rjmp	.+116    	; 0xaa8 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     a34:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <motorD+0x3>
			break;
     a38:	37 c0       	rjmp	.+110    	; 0xaa8 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     a3a:	c3 33       	cpi	r28, 0x33	; 51
     a3c:	78 f4       	brcc	.+30     	; 0xa5c <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     a3e:	84 e1       	ldi	r24, 0x14	; 20
     a40:	8c 0f       	add	r24, r28
     a42:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     a46:	27 e3       	ldi	r18, 0x37	; 55
     a48:	82 9f       	mul	r24, r18
     a4a:	c0 01       	movw	r24, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	63 e6       	ldi	r22, 0x63	; 99
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__divmodhi4>
     a56:	68 53       	subi	r22, 0x38	; 56

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     a58:	63 bd       	out	0x23, r22	; 35
     a5a:	26 c0       	rjmp	.+76     	; 0xaa8 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     a5c:	8d ec       	ldi	r24, 0xCD	; 205
     a5e:	8c 0f       	add	r24, r28
     a60:	84 31       	cpi	r24, 0x14	; 20
     a62:	78 f4       	brcc	.+30     	; 0xa82 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     a64:	8f e0       	ldi	r24, 0x0F	; 15
     a66:	8c 0f       	add	r24, r28
     a68:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     a6c:	27 e3       	ldi	r18, 0x37	; 55
     a6e:	82 9f       	mul	r24, r18
     a70:	c0 01       	movw	r24, r0
     a72:	11 24       	eor	r1, r1
     a74:	63 e6       	ldi	r22, 0x63	; 99
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__divmodhi4>
     a7c:	68 53       	subi	r22, 0x38	; 56
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     a7e:	63 bd       	out	0x23, r22	; 35
     a80:	13 c0       	rjmp	.+38     	; 0xaa8 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     a82:	c0 93 8d 04 	sts	0x048D, r28	; 0x80048d <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     a86:	27 e3       	ldi	r18, 0x37	; 55
     a88:	c2 9f       	mul	r28, r18
     a8a:	c0 01       	movw	r24, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	63 e6       	ldi	r22, 0x63	; 99
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__divmodhi4>
     a96:	68 53       	subi	r22, 0x38	; 56
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     a98:	63 bd       	out	0x23, r22	; 35
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			#if !TEST_APP
			TCCR2 = 0;
     a9c:	15 bc       	out	0x25, r1	; 37
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     a9e:	97 98       	cbi	0x12, 7	; 18
			#endif
			break;
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     aac:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     aae:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     ab0:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     ab2:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     ab4:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     ab6:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     ab8:	af 9a       	sbi	0x15, 7	; 21
     aba:	08 95       	ret

00000abc <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     abc:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     abe:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     ac2:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     ac4:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     ac8:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     aca:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     ace:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     ad0:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <DispD4+0x1>
     ad4:	08 95       	ret

00000ad6 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     ad6:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
     ad8:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
     ada:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
     adc:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
     ade:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
     ae0:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
     ae2:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
     ae4:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
     ae6:	e2 ea       	ldi	r30, 0xA2	; 162
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
     af2:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
     af4:	2c ea       	ldi	r18, 0xAC	; 172
     af6:	34 e0       	ldi	r19, 0x04	; 4
     af8:	33 83       	std	Z+3, r19	; 0x03
     afa:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
     afc:	a9 e9       	ldi	r26, 0x99	; 153
     afe:	b4 e0       	ldi	r27, 0x04	; 4
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	3c 93       	st	X, r19
     b04:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
     b0e:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
     b10:	2e e9       	ldi	r18, 0x9E	; 158
     b12:	34 e0       	ldi	r19, 0x04	; 4
     b14:	35 83       	std	Z+5, r19	; 0x05
     b16:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
     b18:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
     b1a:	8a ea       	ldi	r24, 0xAA	; 170
     b1c:	94 e0       	ldi	r25, 0x04	; 4
     b1e:	97 83       	std	Z+7, r25	; 0x07
     b20:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
     b22:	e4 e9       	ldi	r30, 0x94	; 148
     b24:	f4 e0       	ldi	r31, 0x04	; 4
     b26:	31 83       	std	Z+1, r19	; 0x01
     b28:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
     b2a:	93 83       	std	Z+3, r25	; 0x03
     b2c:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
     b2e:	0e 94 5e 05 	call	0xabc	; 0xabc <off_all_displays>
	clear_display();
     b32:	0e 94 56 05 	call	0xaac	; 0xaac <clear_display>
     b36:	08 95       	ret

00000b38 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
	if (DispD->value != displaying_value)
     b3c:	fc 01       	movw	r30, r24
     b3e:	30 81       	ld	r19, Z
     b40:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
     b44:	32 17       	cp	r19, r18
     b46:	09 f4       	brne	.+2      	; 0xb4a <display_set_value+0x12>
     b48:	95 c0       	rjmp	.+298    	; 0xc74 <display_set_value+0x13c>
     b4a:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
     b4c:	0e 94 56 05 	call	0xaac	; 0xaac <clear_display>
		switch(DispD->value)
     b50:	e8 81       	ld	r30, Y
     b52:	8e 2f       	mov	r24, r30
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	8f 3f       	cpi	r24, 0xFF	; 255
     b58:	91 05       	cpc	r25, r1
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <display_set_value+0x26>
     b5c:	88 c0       	rjmp	.+272    	; 0xc6e <display_set_value+0x136>
     b5e:	fc 01       	movw	r30, r24
     b60:	e6 5d       	subi	r30, 0xD6	; 214
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
     b68:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b6a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b6c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b6e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     b70:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     b72:	aa 98       	cbi	0x15, 2	; 21
			break;
     b74:	7c c0       	rjmp	.+248    	; 0xc6e <display_set_value+0x136>
			case 1:
			LED_ON_B;
     b76:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b78:	dd 98       	cbi	0x1b, 5	; 27
			break;
     b7a:	79 c0       	rjmp	.+242    	; 0xc6e <display_set_value+0x136>
			case 2:
			LED_ON_A;
     b7c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b7e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     b80:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
     b82:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
     b84:	df 98       	cbi	0x1b, 7	; 27
			break;
     b86:	73 c0       	rjmp	.+230    	; 0xc6e <display_set_value+0x136>
			case 3:
			LED_ON_A;
     b88:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b8a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     b8c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     b8e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b90:	df 98       	cbi	0x1b, 7	; 27
			break;
     b92:	6d c0       	rjmp	.+218    	; 0xc6e <display_set_value+0x136>
			case 4:
			LED_ON_F;
     b94:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     b96:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
     b98:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b9a:	dd 98       	cbi	0x1b, 5	; 27
			break;
     b9c:	68 c0       	rjmp	.+208    	; 0xc6e <display_set_value+0x136>
			case 5:
			LED_ON_A;
     b9e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     ba0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     ba2:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     ba4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     ba6:	df 98       	cbi	0x1b, 7	; 27
			break;
     ba8:	62 c0       	rjmp	.+196    	; 0xc6e <display_set_value+0x136>
			case 6:
			LED_ON_A;
     baa:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     bac:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bae:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     bb0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bb2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bb4:	de 98       	cbi	0x1b, 6	; 27
			break;
     bb6:	5b c0       	rjmp	.+182    	; 0xc6e <display_set_value+0x136>
			case 7:
			LED_ON_A;
     bb8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     bba:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     bbc:	dd 98       	cbi	0x1b, 5	; 27
			break;
     bbe:	57 c0       	rjmp	.+174    	; 0xc6e <display_set_value+0x136>
			case 8:
			LED_ON_A;
     bc0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     bc2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     bc4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bc6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bc8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bca:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bcc:	af 98       	cbi	0x15, 7	; 21
			break;
     bce:	4f c0       	rjmp	.+158    	; 0xc6e <display_set_value+0x136>
			case 9:
			LED_ON_A;
     bd0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     bd2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     bd4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bd6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     bd8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bda:	af 98       	cbi	0x15, 7	; 21
			break;
     bdc:	48 c0       	rjmp	.+144    	; 0xc6e <display_set_value+0x136>
			case 'a':
			LED_ON_A;
     bde:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     be0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     be2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
     be4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     be6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     be8:	af 98       	cbi	0x15, 7	; 21
			break;
     bea:	41 c0       	rjmp	.+130    	; 0xc6e <display_set_value+0x136>
			case 'b':
			LED_ON_C;
     bec:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bee:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bf0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bf2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bf4:	af 98       	cbi	0x15, 7	; 21
			break;
     bf6:	3b c0       	rjmp	.+118    	; 0xc6e <display_set_value+0x136>
			case 'c':
			LED_ON_A;
     bf8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     bfa:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bfc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bfe:	aa 98       	cbi	0x15, 2	; 21
			break;
     c00:	36 c0       	rjmp	.+108    	; 0xc6e <display_set_value+0x136>
			case 'd':
			LED_ON_B;
     c02:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     c04:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c06:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c08:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     c0a:	af 98       	cbi	0x15, 7	; 21
			break;
     c0c:	30 c0       	rjmp	.+96     	; 0xc6e <display_set_value+0x136>
			case 'e':
			LED_ON_A;
     c0e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     c10:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c12:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c14:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c16:	af 98       	cbi	0x15, 7	; 21
			break;
     c18:	2a c0       	rjmp	.+84     	; 0xc6e <display_set_value+0x136>
			case 'f':
			LED_ON_A;
     c1a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
     c1c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c1e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c20:	af 98       	cbi	0x15, 7	; 21
			break;
     c22:	25 c0       	rjmp	.+74     	; 0xc6e <display_set_value+0x136>
			case 'r':
			LED_ON_E;
     c24:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     c26:	af 98       	cbi	0x15, 7	; 21
			break;
     c28:	22 c0       	rjmp	.+68     	; 0xc6e <display_set_value+0x136>
			case 'o':
			LED_ON_C;
     c2a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c2c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c2e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     c30:	af 98       	cbi	0x15, 7	; 21
			break;
     c32:	1d c0       	rjmp	.+58     	; 0xc6e <display_set_value+0x136>
			case 'p':
			LED_ON_A;
     c34:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     c36:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
     c38:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c3a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c3c:	af 98       	cbi	0x15, 7	; 21
			break;
     c3e:	17 c0       	rjmp	.+46     	; 0xc6e <display_set_value+0x136>
			case 's':
			LED_ON_A;
     c40:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
     c42:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c44:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     c46:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c48:	af 98       	cbi	0x15, 7	; 21
			break;
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <display_set_value+0x136>
			case 'l':
			LED_ON_D;
     c4c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c4e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c50:	aa 98       	cbi	0x15, 2	; 21
			break;
     c52:	0d c0       	rjmp	.+26     	; 0xc6e <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
     c54:	af 98       	cbi	0x15, 7	; 21
			break;
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <display_set_value+0x136>
			case 254:
			LED_ON_F;
     c58:	aa 98       	cbi	0x15, 2	; 21
			break;
     c5a:	09 c0       	rjmp	.+18     	; 0xc6e <display_set_value+0x136>
			case 253:
			LED_ON_E;
     c5c:	de 98       	cbi	0x1b, 6	; 27
			break;
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <display_set_value+0x136>
			case 252:
			LED_ON_D;
     c60:	df 98       	cbi	0x1b, 7	; 27
			break;
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <display_set_value+0x136>
			case 251:
			LED_ON_C;
     c64:	dd 98       	cbi	0x1b, 5	; 27
			break;
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <display_set_value+0x136>
			case 250:
			LED_ON_B;
     c68:	ad 98       	cbi	0x15, 5	; 21
			break;
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <display_set_value+0x136>
			case 249:
			LED_ON_A;
     c6c:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
     c6e:	88 81       	ld	r24, Y
     c70:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <on_display>:
void on_display(disp_drv *DispD)
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ec 01       	movw	r28, r24
	off_all_displays();
     c80:	0e 94 5e 05 	call	0xabc	; 0xabc <off_all_displays>
	display_set_value(DispD);
     c84:	ce 01       	movw	r24, r28
     c86:	0e 94 9c 05 	call	0xb38	; 0xb38 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	c0 3a       	cpi	r28, 0xA0	; 160
     c8e:	d8 07       	cpc	r29, r24
     c90:	29 f4       	brne	.+10     	; 0xc9c <on_display+0x22>
	{
		LED_ON_DISP1;
     c92:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <DispD1+0x1>
     c9a:	19 c0       	rjmp	.+50     	; 0xcce <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	cc 3a       	cpi	r28, 0xAC	; 172
     ca0:	d8 07       	cpc	r29, r24
     ca2:	29 f4       	brne	.+10     	; 0xcae <on_display+0x34>
	{
		LED_ON_DISP2;
     ca4:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <DispD2+0x1>
     cac:	10 c0       	rjmp	.+32     	; 0xcce <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	ce 39       	cpi	r28, 0x9E	; 158
     cb2:	d8 07       	cpc	r29, r24
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <on_display+0x46>
	{
		LED_ON_DISP3;
     cb6:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <DispD3+0x1>
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
     cc0:	ca 5a       	subi	r28, 0xAA	; 170
     cc2:	d4 40       	sbci	r29, 0x04	; 4
     cc4:	21 f4       	brne	.+8      	; 0xcce <on_display+0x54>
	{
		LED_ON_DISP4;
     cc6:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <DispD4+0x1>
	}
	#endif
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
     ce0:	c0 81       	ld	r28, Z
     ce2:	d1 81       	ldd	r29, Z+1	; 0x01
     ce4:	21 96       	adiw	r28, 0x01	; 1
     ce6:	d1 83       	std	Z+1, r29	; 0x01
     ce8:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
     cea:	9e 01       	movw	r18, r28
     cec:	ad ec       	ldi	r26, 0xCD	; 205
     cee:	bc ec       	ldi	r27, 0xCC	; 204
     cf0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__umulhisi3>
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	9c 01       	movw	r18, r24
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	c8 17       	cp	r28, r24
     d18:	d9 07       	cpc	r29, r25
     d1a:	01 f5       	brne	.+64     	; 0xd5c <display_process+0x88>
     d1c:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
     d1e:	10 91 79 02 	lds	r17, 0x0279	; 0x800279 <iteration>
     d22:	14 30       	cpi	r17, 0x04	; 4
     d24:	58 f4       	brcc	.+22     	; 0xd3c <display_process+0x68>
			on_display(disp_tab[iteration]);
     d26:	e1 2f       	mov	r30, r17
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	ee 55       	subi	r30, 0x5E	; 94
     d30:	fb 4f       	sbci	r31, 0xFB	; 251
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	0e 94 3d 06 	call	0xc7a	; 0xc7a <on_display>
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <display_process+0x6c>
		else
			off_all_displays();
     d3c:	0e 94 5e 05 	call	0xabc	; 0xabc <off_all_displays>
		iteration++;
     d40:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     d42:	15 30       	cpi	r17, 0x05	; 5
     d44:	19 f0       	breq	.+6      	; 0xd4c <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
     d46:	10 93 79 02 	sts	0x0279, r17	; 0x800279 <iteration>
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     d4c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
     d50:	c0 39       	cpi	r28, 0x90	; 144
     d52:	d1 40       	sbci	r29, 0x01	; 1
     d54:	19 f4       	brne	.+6      	; 0xd5c <display_process+0x88>
     d56:	f7 01       	movw	r30, r14
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	10 82       	st	Z, r1
	}
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	08 95       	ret

00000d68 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
     d68:	fc 01       	movw	r30, r24
	if (number >= 100) return;
     d6a:	64 36       	cpi	r22, 0x64	; 100
     d6c:	f8 f4       	brcc	.+62     	; 0xdac <disp_set_number+0x44>
	else if (number == 0)
     d6e:	61 11       	cpse	r22, r1
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
     d72:	a0 81       	ld	r26, Z
     d74:	b1 81       	ldd	r27, Z+1	; 0x01
     d76:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
     d78:	02 80       	ldd	r0, Z+2	; 0x02
     d7a:	f3 81       	ldd	r31, Z+3	; 0x03
     d7c:	e0 2d       	mov	r30, r0
     d7e:	10 82       	st	Z, r1
     d80:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
     d82:	a0 81       	ld	r26, Z
     d84:	b1 81       	ldd	r27, Z+1	; 0x01
     d86:	9d ec       	ldi	r25, 0xCD	; 205
     d88:	69 9f       	mul	r22, r25
     d8a:	91 2d       	mov	r25, r1
     d8c:	11 24       	eor	r1, r1
     d8e:	96 95       	lsr	r25
     d90:	96 95       	lsr	r25
     d92:	96 95       	lsr	r25
     d94:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
     d96:	02 80       	ldd	r0, Z+2	; 0x02
     d98:	f3 81       	ldd	r31, Z+3	; 0x03
     d9a:	e0 2d       	mov	r30, r0
     d9c:	89 2f       	mov	r24, r25
     d9e:	88 0f       	add	r24, r24
     da0:	98 2f       	mov	r25, r24
     da2:	99 0f       	add	r25, r25
     da4:	99 0f       	add	r25, r25
     da6:	89 0f       	add	r24, r25
     da8:	68 1b       	sub	r22, r24
     daa:	60 83       	st	Z, r22
     dac:	08 95       	ret

00000dae <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
     dae:	fc 01       	movw	r30, r24
     db0:	60 83       	st	Z, r22
     db2:	08 95       	ret

00000db4 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	39 f0       	breq	.+14     	; 0xdc6 <dip_set_value+0x12>
     db8:	18 f0       	brcs	.+6      	; 0xdc0 <dip_set_value+0xc>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	39 f0       	breq	.+14     	; 0xdcc <dip_set_value+0x18>
     dbe:	08 95       	ret
     dc0:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <motor_disp_value>
     dc4:	08 95       	ret
     dc6:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <servo_disp_value>
     dca:	08 95       	ret
     dcc:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <servo_disp_value>
     dd0:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <motor_disp_value>
     dd4:	08 95       	ret

00000dd6 <disp_get_state>:
     dd6:	88 23       	and	r24, r24
     dd8:	19 f0       	breq	.+6      	; 0xde0 <disp_get_state+0xa>
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	29 f0       	breq	.+10     	; 0xde8 <disp_get_state+0x12>
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <disp_get_state+0x1a>
     de0:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	08 95       	ret
     de8:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 95       	ret
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	9f ef       	ldi	r25, 0xFF	; 255
     df4:	08 95       	ret

00000df6 <disp_disable_voltage>:
     df6:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     dfa:	86 30       	cpi	r24, 0x06	; 6
     dfc:	21 f4       	brne	.+8      	; 0xe06 <disp_disable_voltage+0x10>
     dfe:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <disp1_last_state>
     e02:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <segment1+0x4>
     e06:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     e0a:	86 30       	cpi	r24, 0x06	; 6
     e0c:	21 f4       	brne	.+8      	; 0xe16 <disp_disable_voltage+0x20>
     e0e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <disp2_last_state>
     e12:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <segment2+0x4>
     e16:	08 95       	ret

00000e18 <disp_set_state>:
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f0       	breq	.+40     	; 0xe44 <disp_set_state+0x2c>
     e1c:	18 f0       	brcs	.+6      	; 0xe24 <disp_set_state+0xc>
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	09 f1       	breq	.+66     	; 0xe64 <disp_set_state+0x4c>
     e22:	08 95       	ret
     e24:	66 30       	cpi	r22, 0x06	; 6
     e26:	21 f4       	brne	.+8      	; 0xe30 <disp_set_state+0x18>
     e28:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     e2c:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <disp1_last_state>
     e30:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     e34:	86 30       	cpi	r24, 0x06	; 6
     e36:	19 f4       	brne	.+6      	; 0xe3e <disp_set_state+0x26>
     e38:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <disp1_last_state>
     e3c:	08 95       	ret
     e3e:	60 93 9d 04 	sts	0x049D, r22	; 0x80049d <segment1+0x4>
     e42:	08 95       	ret
     e44:	66 30       	cpi	r22, 0x06	; 6
     e46:	21 f4       	brne	.+8      	; 0xe50 <disp_set_state+0x38>
     e48:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     e4c:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <disp2_last_state>
     e50:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     e54:	86 30       	cpi	r24, 0x06	; 6
     e56:	19 f4       	brne	.+6      	; 0xe5e <disp_set_state+0x46>
     e58:	60 93 af 04 	sts	0x04AF, r22	; 0x8004af <disp2_last_state>
     e5c:	08 95       	ret
     e5e:	60 93 98 04 	sts	0x0498, r22	; 0x800498 <segment2+0x4>
     e62:	08 95       	ret
     e64:	66 30       	cpi	r22, 0x06	; 6
     e66:	41 f4       	brne	.+16     	; 0xe78 <disp_set_state+0x60>
     e68:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     e6c:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <disp1_last_state>
     e70:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     e74:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <disp2_last_state>
     e78:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     e7c:	86 30       	cpi	r24, 0x06	; 6
     e7e:	29 f4       	brne	.+10     	; 0xe8a <disp_set_state+0x72>
     e80:	60 93 af 04 	sts	0x04AF, r22	; 0x8004af <disp2_last_state>
     e84:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <disp1_last_state>
     e88:	08 95       	ret
     e8a:	60 93 9d 04 	sts	0x049D, r22	; 0x80049d <segment1+0x4>
     e8e:	60 93 98 04 	sts	0x0498, r22	; 0x800498 <segment2+0x4>
     e92:	08 95       	ret

00000e94 <display_set_error>:
     e94:	95 e0       	ldi	r25, 0x05	; 5
     e96:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <segment1+0x4>
     e9a:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <segment2+0x4>
     e9e:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <error_reason>
     ea2:	08 95       	ret

00000ea4 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
     ea4:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
     ea8:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
     eac:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
     eb0:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
     eb4:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <timer_disp_process.1974>
     eb8:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <timer_disp_process.1974+0x1>
     ebc:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <timer_disp_process.1974+0x2>
     ec0:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <timer_disp_process.1974+0x3>
     ec4:	48 17       	cp	r20, r24
     ec6:	59 07       	cpc	r21, r25
     ec8:	6a 07       	cpc	r22, r26
     eca:	7b 07       	cpc	r23, r27
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <disp_process+0x2c>
     ece:	26 c1       	rjmp	.+588    	; 0x111c <disp_process+0x278>
	{
        
        switch(segment1.state)
     ed0:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	09 f4       	brne	.+2      	; 0xeda <disp_process+0x36>
     ed8:	59 c0       	rjmp	.+178    	; 0xf8c <disp_process+0xe8>
     eda:	30 f4       	brcc	.+12     	; 0xee8 <disp_process+0x44>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <disp_process+0x3e>
     ee0:	87 c0       	rjmp	.+270    	; 0xff0 <disp_process+0x14c>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	39 f1       	breq	.+78     	; 0xf34 <disp_process+0x90>
     ee6:	8e c0       	rjmp	.+284    	; 0x1004 <disp_process+0x160>
     ee8:	85 30       	cpi	r24, 0x05	; 5
     eea:	09 f4       	brne	.+2      	; 0xeee <disp_process+0x4a>
     eec:	74 c0       	rjmp	.+232    	; 0xfd6 <disp_process+0x132>
     eee:	48 f1       	brcs	.+82     	; 0xf42 <disp_process+0x9e>
     ef0:	86 30       	cpi	r24, 0x06	; 6
     ef2:	09 f0       	breq	.+2      	; 0xef6 <disp_process+0x52>
     ef4:	87 c0       	rjmp	.+270    	; 0x1004 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
     ef6:	0e 94 9b 01 	call	0x336	; 0x336 <accum_get_voltage>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 ec       	ldi	r20, 0xC8	; 200
     f00:	52 e4       	ldi	r21, 0x42	; 66
     f02:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
     f06:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__fixsfsi>
     f0a:	70 93 8e 02 	sts	0x028E, r23	; 0x80028e <voltage+0x1>
     f0e:	60 93 8d 02 	sts	0x028D, r22	; 0x80028d <voltage>
            disp_set_number(&segment1, voltage/100);
     f12:	9b 01       	movw	r18, r22
     f14:	36 95       	lsr	r19
     f16:	27 95       	ror	r18
     f18:	36 95       	lsr	r19
     f1a:	27 95       	ror	r18
     f1c:	ab e7       	ldi	r26, 0x7B	; 123
     f1e:	b4 e1       	ldi	r27, 0x14	; 20
     f20:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__umulhisi3>
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	68 2f       	mov	r22, r24
     f2a:	89 e9       	ldi	r24, 0x99	; 153
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
            break;
     f32:	68 c0       	rjmp	.+208    	; 0x1004 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
     f34:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <motor_disp_value>
     f38:	89 e9       	ldi	r24, 0x99	; 153
     f3a:	94 e0       	ldi	r25, 0x04	; 4
     f3c:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
            break;
     f40:	61 c0       	rjmp	.+194    	; 0x1004 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
     f42:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	31 f0       	breq	.+12     	; 0xf56 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <segment1+0x4>
			    segment2.state = SEG_VALUE;
     f50:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <segment2+0x4>
                break;
     f54:	57 c0       	rjmp	.+174    	; 0x1004 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
     f56:	48 51       	subi	r20, 0x18	; 24
     f58:	5c 4f       	sbci	r21, 0xFC	; 252
     f5a:	6f 4f       	sbci	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <timer_disp_process.1974>
     f62:	50 93 7f 02 	sts	0x027F, r21	; 0x80027f <timer_disp_process.1974+0x1>
     f66:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <timer_disp_process.1974+0x2>
     f6a:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <timer_disp_process.1974+0x3>
			DispD2.value = 's';
     f6e:	83 e7       	ldi	r24, 0x73	; 115
     f70:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <DispD2>
			DispD1.value = 'a';
     f74:	81 e6       	ldi	r24, 0x61	; 97
     f76:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <DispD1>
			DispD3.value = 'p';
     f7a:	80 e7       	ldi	r24, 0x70	; 112
     f7c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <DispD3>
			segment1.state = SEG_VALUE;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <segment1+0x4>
			segment2.state = SEG_VALUE;
     f86:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <segment2+0x4>
			return;
     f8a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
     f8c:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	31 f0       	breq	.+12     	; 0xfa0 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <segment1+0x4>
        	    segment2.state = SEG_VALUE;
     f9a:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <segment2+0x4>
                break;
     f9e:	32 c0       	rjmp	.+100    	; 0x1004 <disp_process+0x160>
            }
			timer_disp_process += 1000;
     fa0:	48 51       	subi	r20, 0x18	; 24
     fa2:	5c 4f       	sbci	r21, 0xFC	; 252
     fa4:	6f 4f       	sbci	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <timer_disp_process.1974>
     fac:	50 93 7f 02 	sts	0x027F, r21	; 0x80027f <timer_disp_process.1974+0x1>
     fb0:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <timer_disp_process.1974+0x2>
     fb4:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
     fb8:	8c e6       	ldi	r24, 0x6C	; 108
     fba:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <DispD2>
			DispD1.value = 'o';
     fbe:	8f e6       	ldi	r24, 0x6F	; 111
     fc0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <DispD1>
			DispD3.value = 'p';
     fc4:	80 e7       	ldi	r24, 0x70	; 112
     fc6:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <DispD3>
			segment1.state = SEG_VALUE;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <segment1+0x4>
			segment2.state = SEG_VALUE;
     fd0:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <segment2+0x4>
            break;
     fd4:	17 c0       	rjmp	.+46     	; 0x1004 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
     fd6:	85 e6       	ldi	r24, 0x65	; 101
     fd8:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <DispD2>
			DispD1.value = 'r';
     fdc:	82 e7       	ldi	r24, 0x72	; 114
     fde:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <DispD1>
			disp_set_number(&segment2, error_reason);
     fe2:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <error_reason>
     fe6:	84 e9       	ldi	r24, 0x94	; 148
     fe8:	94 e0       	ldi	r25, 0x04	; 4
     fea:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
            break;
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
     ff0:	68 ef       	ldi	r22, 0xF8	; 248
     ff2:	80 ea       	ldi	r24, 0xA0	; 160
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
     ffa:	68 ef       	ldi	r22, 0xF8	; 248
     ffc:	8c ea       	ldi	r24, 0xAC	; 172
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1004:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	19 f1       	breq	.+70     	; 0x1052 <disp_process+0x1ae>
    100c:	48 f1       	brcs	.+82     	; 0x1060 <disp_process+0x1bc>
    100e:	86 30       	cpi	r24, 0x06	; 6
    1010:	19 f0       	breq	.+6      	; 0x1018 <disp_process+0x174>
    1012:	8d 30       	cpi	r24, 0x0D	; 13
    1014:	81 f1       	breq	.+96     	; 0x1076 <disp_process+0x1d2>
    1016:	6f c0       	rjmp	.+222    	; 0x10f6 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1018:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <voltage>
    101c:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <voltage+0x1>
    1020:	9a 01       	movw	r18, r20
    1022:	36 95       	lsr	r19
    1024:	27 95       	ror	r18
    1026:	36 95       	lsr	r19
    1028:	27 95       	ror	r18
    102a:	ab e7       	ldi	r26, 0x7B	; 123
    102c:	b4 e1       	ldi	r27, 0x14	; 20
    102e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__umulhisi3>
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	64 e6       	ldi	r22, 0x64	; 100
    1038:	68 9f       	mul	r22, r24
    103a:	90 01       	movw	r18, r0
    103c:	69 9f       	mul	r22, r25
    103e:	30 0d       	add	r19, r0
    1040:	11 24       	eor	r1, r1
    1042:	ba 01       	movw	r22, r20
    1044:	62 1b       	sub	r22, r18
    1046:	73 0b       	sbc	r23, r19
    1048:	84 e9       	ldi	r24, 0x94	; 148
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
            break;
    1050:	52 c0       	rjmp	.+164    	; 0x10f6 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1052:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <servo_disp_value>
    1056:	84 e9       	ldi	r24, 0x94	; 148
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
            break;
    105e:	4b c0       	rjmp	.+150    	; 0x10f6 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1060:	68 ef       	ldi	r22, 0xF8	; 248
    1062:	8e e9       	ldi	r24, 0x9E	; 158
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    106a:	68 ef       	ldi	r22, 0xF8	; 248
    106c:	8a ea       	ldi	r24, 0xAA	; 170
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
            break;
    1074:	40 c0       	rjmp	.+128    	; 0x10f6 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1076:	44 ef       	ldi	r20, 0xF4	; 244
    1078:	51 e0       	ldi	r21, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	88 e8       	ldi	r24, 0x88	; 136
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	0e 94 0e 14 	call	0x281c	; 0x281c <evTime_process_period>
    1086:	89 2b       	or	r24, r25
    1088:	b1 f1       	breq	.+108    	; 0x10f6 <disp_process+0x252>
			{
				if (blink_state == 0)
    108a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <blink_state>
    108e:	81 11       	cpse	r24, r1
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <disp_process+0x20a>
				{
					blink_state = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1098:	67 ef       	ldi	r22, 0xF7	; 247
    109a:	8e e9       	ldi	r24, 0x9E	; 158
    109c:	94 e0       	ldi	r25, 0x04	; 4
    109e:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    10a2:	67 ef       	ldi	r22, 0xF7	; 247
    10a4:	8a ea       	ldi	r24, 0xAA	; 170
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
    10ac:	24 c0       	rjmp	.+72     	; 0x10f6 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    10ae:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <blink_state>
					if (blink_cnt == 0) 
    10b2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <blink_cnt>
    10b6:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <blink_cnt+0x1>
    10ba:	a0 91 85 02 	lds	r26, 0x0285	; 0x800285 <blink_cnt+0x2>
    10be:	b0 91 86 02 	lds	r27, 0x0286	; 0x800286 <blink_cnt+0x3>
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	a1 05       	cpc	r26, r1
    10c6:	b1 05       	cpc	r27, r1
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
						break;
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <disp_process+0x252>
					}
					blink_cnt--;
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	a1 09       	sbc	r26, r1
    10d8:	b1 09       	sbc	r27, r1
    10da:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <blink_cnt>
    10de:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <blink_cnt+0x1>
    10e2:	a0 93 85 02 	sts	0x0285, r26	; 0x800285 <blink_cnt+0x2>
    10e6:	b0 93 86 02 	sts	0x0286, r27	; 0x800286 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    10ea:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <second_disp_blink_val>
    10ee:	84 e9       	ldi	r24, 0x94	; 148
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	0e 94 b4 06 	call	0xd68	; 0xd68 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    10f6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer_disp_process.1974>
    10fa:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <timer_disp_process.1974+0x1>
    10fe:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <timer_disp_process.1974+0x2>
    1102:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <timer_disp_process.1974+0x3>
    1106:	c2 96       	adiw	r24, 0x32	; 50
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
    110c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <timer_disp_process.1974>
    1110:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <timer_disp_process.1974+0x1>
    1114:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <timer_disp_process.1974+0x2>
    1118:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <timer_disp_process.1974+0x3>
    111c:	08 95       	ret

0000111e <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1122:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <mktime+0x2>
    1126:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <mktime+0x3>
    112a:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <mktime+0x4>
    112e:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <mktime+0x5>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	80 0f       	add	r24, r16
    1138:	91 1f       	adc	r25, r17
    113a:	a2 1f       	adc	r26, r18
    113c:	b3 1f       	adc	r27, r19
    113e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <animation_time>
    1142:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <animation_time+0x1>
    1146:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <animation_time+0x2>
    114a:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	84 2f       	mov	r24, r20
    1152:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
}
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    115c:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	29 f0       	breq	.+10     	; 0x116e <animation+0x12>
    1164:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	09 f0       	breq	.+2      	; 0x116e <animation+0x12>
    116c:	78 c0       	rjmp	.+240    	; 0x125e <animation+0x102>
    116e:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    1172:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    1176:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    117a:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    117e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <timer_anim.1994>
    1182:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <timer_anim.1994+0x1>
    1186:	a0 91 7c 02 	lds	r26, 0x027C	; 0x80027c <timer_anim.1994+0x2>
    118a:	b0 91 7d 02 	lds	r27, 0x027D	; 0x80027d <timer_anim.1994+0x3>
    118e:	84 17       	cp	r24, r20
    1190:	95 07       	cpc	r25, r21
    1192:	a6 07       	cpc	r26, r22
    1194:	b7 07       	cpc	r27, r23
    1196:	08 f0       	brcs	.+2      	; 0x119a <animation+0x3e>
    1198:	62 c0       	rjmp	.+196    	; 0x125e <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    119a:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
    119e:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
    11a2:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
    11a6:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
    11aa:	81 55       	subi	r24, 0x51	; 81
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	af 4f       	sbci	r26, 0xFF	; 255
    11b0:	bf 4f       	sbci	r27, 0xFF	; 255
    11b2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <timer_anim.1994>
    11b6:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <timer_anim.1994+0x1>
    11ba:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <timer_anim.1994+0x2>
    11be:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    11c2:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <segment1+0x4>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	61 f4       	brne	.+24     	; 0x11e2 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    11ca:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    11ce:	80 ea       	ldi	r24, 0xA0	; 160
    11d0:	94 e0       	ldi	r25, 0x04	; 4
    11d2:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    11d6:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    11da:	8c ea       	ldi	r24, 0xAC	; 172
    11dc:	94 e0       	ldi	r25, 0x04	; 4
    11de:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    11e2:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <segment2+0x4>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	61 f4       	brne	.+24     	; 0x1202 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    11ea:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    11ee:	8e e9       	ldi	r24, 0x9E	; 158
    11f0:	94 e0       	ldi	r25, 0x04	; 4
    11f2:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    11f6:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    11fa:	8a ea       	ldi	r24, 0xAA	; 170
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	0e 94 d7 06 	call	0xdae	; 0xdae <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1202:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    1206:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    120a:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    120e:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    1212:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <animation_time>
    1216:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <animation_time+0x1>
    121a:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <animation_time+0x2>
    121e:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <animation_time+0x3>
    1222:	84 17       	cp	r24, r20
    1224:	95 07       	cpc	r25, r21
    1226:	a6 07       	cpc	r26, r22
    1228:	b7 07       	cpc	r27, r23
    122a:	28 f4       	brcc	.+10     	; 0x1236 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
			LED_ACUM_OFF;
    1234:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1236:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    123a:	9f 5f       	subi	r25, 0xFF	; 255
    123c:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    1240:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    124a:	9f 3f       	cpi	r25, 0xFF	; 255
    124c:	19 f4       	brne	.+6      	; 0x1254 <animation+0xf8>
    124e:	99 ef       	ldi	r25, 0xF9	; 249
    1250:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1254:	88 3f       	cpi	r24, 0xF8	; 248
    1256:	19 f4       	brne	.+6      	; 0x125e <animation+0x102>
    1258:	8e ef       	ldi	r24, 0xFE	; 254
    125a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    125e:	08 95       	ret

00001260 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1260:	e1 99       	sbic	0x1c, 1	; 28
    1262:	fe cf       	rjmp	.-4      	; 0x1260 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1264:	9f bb       	out	0x1f, r25	; 31
    1266:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1268:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    126a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    126c:	e1 9a       	sbi	0x1c, 1	; 28
    126e:	08 95       	ret

00001270 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1270:	e1 99       	sbic	0x1c, 1	; 28
    1272:	fe cf       	rjmp	.-4      	; 0x1270 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1274:	9f bb       	out	0x1f, r25	; 31
    1276:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1278:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    127a:	8d b3       	in	r24, 0x1d	; 29
    127c:	08 95       	ret

0000127e <set_error_state>:
}

uint16_t errorGetMotorVal(void)
{
	return motor_error_value;
}
    127e:	cf 93       	push	r28
    1280:	c8 2f       	mov	r28, r24
    1282:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    1286:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    1290:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    1294:	8c 2f       	mov	r24, r28
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 4a 07 	call	0xe94	; 0xe94 <display_set_error>
    129c:	0e 94 df 04 	call	0x9be	; 0x9be <dcmotor_set_error>
    12a0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <system_error>
    12a4:	c0 93 b0 04 	sts	0x04B0, r28	; 0x8004b0 <led_blink>
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <error_init>:
    12ac:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <error_motor_state>
    12b0:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <error_motor_last_state>
    12b4:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <error_motor_status>
    12b8:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <error_servo_status>
    12bc:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <error_servo_state>
    12c0:	8b ea       	ldi	r24, 0xAB	; 171
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	0e 94 04 14 	call	0x2808	; 0x2808 <evTime_off>
    12c8:	8f e9       	ldi	r24, 0x9F	; 159
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	0e 94 04 14 	call	0x2808	; 0x2808 <evTime_off>
    12d0:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <led_blink>
    12d4:	08 95       	ret

000012d6 <error_deinit>:
    12d6:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <error_motor_state>
    12da:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <error_motor_last_state>
    12de:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <error_motor_status>
    12e2:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <error_servo_status>
    12e6:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <error_servo_state>
    12ea:	8b ea       	ldi	r24, 0xAB	; 171
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	0e 94 04 14 	call	0x2808	; 0x2808 <evTime_off>
    12f2:	8f e9       	ldi	r24, 0x9F	; 159
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 04 14 	call	0x2808	; 0x2808 <evTime_off>
    12fa:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <led_blink>
    12fe:	08 95       	ret

00001300 <error_event>:

void error_event(void)
{
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    130c:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    1310:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    1314:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    1318:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    131c:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <error_event_timer.1846>
    1320:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <error_event_timer.1846+0x1>
    1324:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <error_event_timer.1846+0x2>
    1328:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <error_event_timer.1846+0x3>
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	a6 07       	cpc	r26, r22
    1332:	b7 07       	cpc	r27, r23
    1334:	08 f0       	brcs	.+2      	; 0x1338 <error_event+0x38>
    1336:	3b c3       	rjmp	.+1654   	; 0x19ae <error_event+0x6ae>
    1338:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    133c:	80 ff       	sbrs	r24, 0
    133e:	37 c3       	rjmp	.+1646   	; 0x19ae <error_event+0x6ae>
	{
		error_event_timer = mktime.ms + 500;
    1340:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    1344:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    1348:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    134c:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    1350:	4c 50       	subi	r20, 0x0C	; 12
    1352:	5e 4f       	sbci	r21, 0xFE	; 254
    1354:	6f 4f       	sbci	r22, 0xFF	; 255
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	40 93 9b 02 	sts	0x029B, r20	; 0x80029b <error_event_timer.1846>
    135c:	50 93 9c 02 	sts	0x029C, r21	; 0x80029c <error_event_timer.1846+0x1>
    1360:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <error_event_timer.1846+0x2>
    1364:	70 93 9e 02 	sts	0x029E, r23	; 0x80029e <error_event_timer.1846+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1368:	81 fd       	sbrc	r24, 1
    136a:	21 c3       	rjmp	.+1602   	; 0x19ae <error_event+0x6ae>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    136c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <dcmotor_get_pwm>
    1370:	ec 01       	movw	r28, r24


static uint16_t count_motor_error_value(uint16_t x)
{
	uint16_t error_max_voltage;
	float voltage = accum_get_voltage();
    1372:	0e 94 9b 01 	call	0x336	; 0x336 <accum_get_voltage>
    1376:	6b 01       	movw	r12, r22
    1378:	7c 01       	movw	r14, r24
	if (voltage < 9) voltage = 9;
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e1       	ldi	r20, 0x10	; 16
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <__cmpsf2>
    1386:	88 23       	and	r24, r24
    1388:	44 f4       	brge	.+16     	; 0x139a <error_event+0x9a>
    138a:	0f 2e       	mov	r0, r31
    138c:	c1 2c       	mov	r12, r1
    138e:	d1 2c       	mov	r13, r1
    1390:	f0 e1       	ldi	r31, 0x10	; 16
    1392:	ef 2e       	mov	r14, r31
    1394:	f1 e4       	ldi	r31, 0x41	; 65
    1396:	ff 2e       	mov	r15, r31
    1398:	f0 2d       	mov	r31, r0
	if (x >=10 && x < 15)
    139a:	ce 01       	movw	r24, r28
    139c:	0a 97       	sbiw	r24, 0x0a	; 10
    139e:	05 97       	sbiw	r24, 0x05	; 5
    13a0:	78 f5       	brcc	.+94     	; 0x1400 <error_event+0x100>
	error_max_voltage = 2*x-15 + (voltage-9)*x/6;
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e1       	ldi	r20, 0x10	; 16
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	c7 01       	movw	r24, r14
    13ac:	b6 01       	movw	r22, r12
    13ae:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    13b2:	6b 01       	movw	r12, r22
    13b4:	7c 01       	movw	r14, r24
    13b6:	be 01       	movw	r22, r28
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    13c0:	9b 01       	movw	r18, r22
    13c2:	ac 01       	movw	r20, r24
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 ec       	ldi	r20, 0xC0	; 192
    13d2:	50 e4       	ldi	r21, 0x40	; 64
    13d4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    13d8:	6b 01       	movw	r12, r22
    13da:	7c 01       	movw	r14, r24
    13dc:	be 01       	movw	r22, r28
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	6f 50       	subi	r22, 0x0F	; 15
    13e4:	71 09       	sbc	r23, r1
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	c7 01       	movw	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    13fa:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    13fe:	00 c1       	rjmp	.+512    	; 0x1600 <error_event+0x300>
	else if (x >=15 && x < 25)
    1400:	ce 01       	movw	r24, r28
    1402:	0f 97       	sbiw	r24, 0x0f	; 15
    1404:	0a 97       	sbiw	r24, 0x0a	; 10
    1406:	78 f5       	brcc	.+94     	; 0x1466 <error_event+0x166>
	error_max_voltage = 2*x-20 + (voltage-9)*x/6;
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e1       	ldi	r20, 0x10	; 16
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
    141c:	be 01       	movw	r22, r28
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 ec       	ldi	r20, 0xC0	; 192
    1438:	50 e4       	ldi	r21, 0x40	; 64
    143a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    143e:	6b 01       	movw	r12, r22
    1440:	7c 01       	movw	r14, r24
    1442:	be 01       	movw	r22, r28
    1444:	6a 50       	subi	r22, 0x0A	; 10
    1446:	70 48       	sbci	r23, 0x80	; 128
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    1460:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    1464:	cd c0       	rjmp	.+410    	; 0x1600 <error_event+0x300>
	else if (x >=25 && x < 40)
    1466:	ce 01       	movw	r24, r28
    1468:	49 97       	sbiw	r24, 0x19	; 25
    146a:	0f 97       	sbiw	r24, 0x0f	; 15
    146c:	78 f5       	brcc	.+94     	; 0x14cc <error_event+0x1cc>
	error_max_voltage = 2*x-25 + (voltage-9)*x/6;
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e1       	ldi	r20, 0x10	; 16
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    147e:	6b 01       	movw	r12, r22
    1480:	7c 01       	movw	r14, r24
    1482:	be 01       	movw	r22, r28
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	c7 01       	movw	r24, r14
    1492:	b6 01       	movw	r22, r12
    1494:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 ec       	ldi	r20, 0xC0	; 192
    149e:	50 e4       	ldi	r21, 0x40	; 64
    14a0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    14a4:	6b 01       	movw	r12, r22
    14a6:	7c 01       	movw	r14, r24
    14a8:	be 01       	movw	r22, r28
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	69 51       	subi	r22, 0x19	; 25
    14b0:	71 09       	sbc	r23, r1
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	c7 01       	movw	r24, r14
    14c0:	b6 01       	movw	r22, r12
    14c2:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    14c6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    14ca:	9a c0       	rjmp	.+308    	; 0x1600 <error_event+0x300>
	else if (x >=40 && x < 50)
    14cc:	ce 01       	movw	r24, r28
    14ce:	88 97       	sbiw	r24, 0x28	; 40
    14d0:	0a 97       	sbiw	r24, 0x0a	; 10
    14d2:	78 f5       	brcc	.+94     	; 0x1532 <error_event+0x232>
	error_max_voltage = 2*x-10 + (voltage-9)*x/6;
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e1       	ldi	r20, 0x10	; 16
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	c7 01       	movw	r24, r14
    14de:	b6 01       	movw	r22, r12
    14e0:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    14e4:	6b 01       	movw	r12, r22
    14e6:	7c 01       	movw	r14, r24
    14e8:	be 01       	movw	r22, r28
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    14f2:	9b 01       	movw	r18, r22
    14f4:	ac 01       	movw	r20, r24
    14f6:	c7 01       	movw	r24, r14
    14f8:	b6 01       	movw	r22, r12
    14fa:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 ec       	ldi	r20, 0xC0	; 192
    1504:	50 e4       	ldi	r21, 0x40	; 64
    1506:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
    150e:	be 01       	movw	r22, r28
    1510:	65 50       	subi	r22, 0x05	; 5
    1512:	70 48       	sbci	r23, 0x80	; 128
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	c7 01       	movw	r24, r14
    1526:	b6 01       	movw	r22, r12
    1528:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    152c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    1530:	67 c0       	rjmp	.+206    	; 0x1600 <error_event+0x300>
	else if (x >=50 && x < 70)
    1532:	ce 01       	movw	r24, r28
    1534:	c2 97       	sbiw	r24, 0x32	; 50
    1536:	44 97       	sbiw	r24, 0x14	; 20
    1538:	78 f5       	brcc	.+94     	; 0x1598 <error_event+0x298>
	error_max_voltage = 2*x+10 + (voltage-9)*x/6;
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e1       	ldi	r20, 0x10	; 16
    1540:	51 e4       	ldi	r21, 0x41	; 65
    1542:	c7 01       	movw	r24, r14
    1544:	b6 01       	movw	r22, r12
    1546:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    154a:	6b 01       	movw	r12, r22
    154c:	7c 01       	movw	r14, r24
    154e:	be 01       	movw	r22, r28
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	c7 01       	movw	r24, r14
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 ec       	ldi	r20, 0xC0	; 192
    156a:	50 e4       	ldi	r21, 0x40	; 64
    156c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    1570:	6b 01       	movw	r12, r22
    1572:	7c 01       	movw	r14, r24
    1574:	be 01       	movw	r22, r28
    1576:	6b 5f       	subi	r22, 0xFB	; 251
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	66 0f       	add	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1586:	9b 01       	movw	r18, r22
    1588:	ac 01       	movw	r20, r24
    158a:	c7 01       	movw	r24, r14
    158c:	b6 01       	movw	r22, r12
    158e:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    1592:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    1596:	34 c0       	rjmp	.+104    	; 0x1600 <error_event+0x300>
	else if (x >= 70)
    1598:	c6 34       	cpi	r28, 0x46	; 70
    159a:	d1 05       	cpc	r29, r1
    159c:	78 f1       	brcs	.+94     	; 0x15fc <error_event+0x2fc>
	error_max_voltage = 2*x+20 + (voltage-9)*x/6;
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e1       	ldi	r20, 0x10	; 16
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	c7 01       	movw	r24, r14
    15a8:	b6 01       	movw	r22, r12
    15aa:	0e 94 9d 14 	call	0x293a	; 0x293a <__subsf3>
    15ae:	6b 01       	movw	r12, r22
    15b0:	7c 01       	movw	r14, r24
    15b2:	be 01       	movw	r22, r28
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	c7 01       	movw	r24, r14
    15c2:	b6 01       	movw	r22, r12
    15c4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 ec       	ldi	r20, 0xC0	; 192
    15ce:	50 e4       	ldi	r21, 0x40	; 64
    15d0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__divsf3>
    15d4:	6b 01       	movw	r12, r22
    15d6:	7c 01       	movw	r14, r24
    15d8:	be 01       	movw	r22, r28
    15da:	66 5f       	subi	r22, 0xF6	; 246
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	66 0f       	add	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	c7 01       	movw	r24, r14
    15f0:	b6 01       	movw	r22, r12
    15f2:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    15f6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <error_event+0x300>
	else
	error_max_voltage = 10;
    15fc:	6a e0       	ldi	r22, 0x0A	; 10
    15fe:	70 e0       	ldi	r23, 0x00	; 0
	
	error_max_voltage = error_max_voltage + get_calibration_value(0);
    1600:	6c 59       	subi	r22, 0x9C	; 156
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    1604:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <motor_error_value+0x1>
    1608:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <motor_error_value>
		if (servo_vibro_value*5 > motor_error_value) //measure_get_filtered_value(MEAS_MOTOR)
    160c:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 01       	movw	r18, r24
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	68 17       	cp	r22, r24
    1622:	79 07       	cpc	r23, r25
    1624:	10 f5       	brcc	.+68     	; 0x166a <error_event+0x36a>
		{
			debug_msg("motor_error_value: %d\n", motor_error_value);
    1626:	7f 93       	push	r23
    1628:	6f 93       	push	r22
    162a:	8e e9       	ldi	r24, 0x9E	; 158
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9f 93       	push	r25
    1630:	8f 93       	push	r24
    1632:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			error_motor_status = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <error_motor_status>
			error_motor_status = 0;
		}
		
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <error_motor_state>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	09 f4       	brne	.+2      	; 0x164e <error_event+0x34e>
    164c:	84 c0       	rjmp	.+264    	; 0x1756 <error_event+0x456>
    164e:	30 f4       	brcc	.+12     	; 0x165c <error_event+0x35c>
    1650:	88 23       	and	r24, r24
    1652:	f1 f0       	breq	.+60     	; 0x1690 <error_event+0x390>
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	09 f4       	brne	.+2      	; 0x165a <error_event+0x35a>
    1658:	48 c0       	rjmp	.+144    	; 0x16ea <error_event+0x3ea>
    165a:	ff c0       	rjmp	.+510    	; 0x185a <error_event+0x55a>
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	09 f4       	brne	.+2      	; 0x1662 <error_event+0x362>
    1660:	8d c0       	rjmp	.+282    	; 0x177c <error_event+0x47c>
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	09 f4       	brne	.+2      	; 0x1668 <error_event+0x368>
    1666:	8e c0       	rjmp	.+284    	; 0x1784 <error_event+0x484>
    1668:	f8 c0       	rjmp	.+496    	; 0x185a <error_event+0x55a>
			debug_msg("motor_error_value: %d\n", motor_error_value);
			error_motor_status = 1;
		}
		else
		{
			error_motor_status = 0;
    166a:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <error_motor_status>
			}
		}
		else
		{
			//toDo
			switch(error_motor_state)
    166e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <error_motor_state>
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	09 f4       	brne	.+2      	; 0x1678 <error_event+0x378>
    1676:	c0 c0       	rjmp	.+384    	; 0x17f8 <error_event+0x4f8>
    1678:	20 f4       	brcc	.+8      	; 0x1682 <error_event+0x382>
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	09 f4       	brne	.+2      	; 0x1680 <error_event+0x380>
    167e:	9e c0       	rjmp	.+316    	; 0x17bc <error_event+0x4bc>
    1680:	ec c0       	rjmp	.+472    	; 0x185a <error_event+0x55a>
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	09 f4       	brne	.+2      	; 0x1688 <error_event+0x388>
    1686:	d5 c0       	rjmp	.+426    	; 0x1832 <error_event+0x532>
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	09 f4       	brne	.+2      	; 0x168e <error_event+0x38e>
    168c:	d6 c0       	rjmp	.+428    	; 0x183a <error_event+0x53a>
    168e:	e5 c0       	rjmp	.+458    	; 0x185a <error_event+0x55a>
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1696:	85 eb       	ldi	r24, 0xB5	; 181
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9f 93       	push	r25
    169c:	8f 93       	push	r24
    169e:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    16a2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <dcmotor_get_pwm>
	return error_max_voltage;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    16a6:	2e e1       	ldi	r18, 0x1E	; 30
    16a8:	ac 01       	movw	r20, r24
    16aa:	24 9f       	mul	r18, r20
    16ac:	c0 01       	movw	r24, r0
    16ae:	25 9f       	mul	r18, r21
    16b0:	90 0d       	add	r25, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	48 e8       	ldi	r20, 0x88	; 136
    16b6:	53 e1       	ldi	r21, 0x13	; 19
    16b8:	ea 01       	movw	r28, r20
    16ba:	c8 1b       	sub	r28, r24
    16bc:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	80 ed       	ldi	r24, 0xD0	; 208
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9f 93       	push	r25
    16c8:	8f 93       	push	r24
    16ca:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    16ce:	ae 01       	movw	r20, r28
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	8b ea       	ldi	r24, 0xAB	; 171
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
				break;
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	b8 c0       	rjmp	.+368    	; 0x185a <error_event+0x55a>
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    16ea:	8b ea       	ldi	r24, 0xAB	; 171
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    16f2:	89 2b       	or	r24, r25
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <error_event+0x3f8>
    16f6:	b1 c0       	rjmp	.+354    	; 0x185a <error_event+0x55a>
					{
						dcmotor_set_try();
    16f8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <dcmotor_set_try>
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    16fc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1700:	2e e1       	ldi	r18, 0x1E	; 30
    1702:	ac 01       	movw	r20, r24
    1704:	24 9f       	mul	r18, r20
    1706:	c0 01       	movw	r24, r0
    1708:	25 9f       	mul	r18, r21
    170a:	90 0d       	add	r25, r0
    170c:	11 24       	eor	r1, r1
    170e:	48 e8       	ldi	r20, 0x88	; 136
    1710:	53 e1       	ldi	r21, 0x13	; 19
    1712:	ea 01       	movw	r28, r20
    1714:	c8 1b       	sub	r28, r24
    1716:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	8f ee       	ldi	r24, 0xEF	; 239
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9f 93       	push	r25
    1722:	8f 93       	push	r24
    1724:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
				break;
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
					{
						dcmotor_set_try();
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1728:	ae 01       	movw	r20, r28
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	8b ea       	ldi	r24, 0xAB	; 171
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
						error_motor_state = ERR_M_AXELERATE;
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    173c:	83 e1       	ldi	r24, 0x13	; 19
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	9f 93       	push	r25
    1742:	8f 93       	push	r24
    1744:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	82 c0       	rjmp	.+260    	; 0x185a <error_event+0x55a>
					}
				break;
				case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1756:	8b ea       	ldi	r24, 0xAB	; 171
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    175e:	89 2b       	or	r24, r25
    1760:	09 f4       	brne	.+2      	; 0x1764 <error_event+0x464>
    1762:	7b c0       	rjmp	.+246    	; 0x185a <error_event+0x55a>
					{
						error_motor_state = ERR_M_ERROR;
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    176a:	83 e3       	ldi	r24, 0x33	; 51
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	6f c0       	rjmp	.+222    	; 0x185a <error_event+0x55a>
					}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 3f 09 	call	0x127e	; 0x127e <set_error_state>
				break;
    1782:	6b c0       	rjmp	.+214    	; 0x185a <error_event+0x55a>
				case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1784:	8b ea       	ldi	r24, 0xAB	; 171
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    178c:	89 2b       	or	r24, r25
    178e:	09 f4       	brne	.+2      	; 0x1792 <error_event+0x492>
    1790:	64 c0       	rjmp	.+200    	; 0x185a <error_event+0x55a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1792:	40 ed       	ldi	r20, 0xD0	; 208
    1794:	57 e0       	ldi	r21, 0x07	; 7
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	8b ea       	ldi	r24, 0xAB	; 171
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
						error_motor_state = error_motor_last_state;
    17a2:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <error_motor_last_state>
    17a6:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
						debug_msg("ERROR STATUS: go to last before wait\n\r");
    17aa:	8f e4       	ldi	r24, 0x4F	; 79
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	9f 93       	push	r25
    17b0:	8f 93       	push	r24
    17b2:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	4f c0       	rjmp	.+158    	; 0x185a <error_event+0x55a>
			switch(error_motor_state)
			{
				case ERR_M_OK:
				break;
				case ERR_M_WAIT:
				if (evTime_check(&motor_timer))
    17bc:	8b ea       	ldi	r24, 0xAB	; 171
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    17c4:	89 2b       	or	r24, r25
    17c6:	09 f4       	brne	.+2      	; 0x17ca <error_event+0x4ca>
    17c8:	48 c0       	rjmp	.+144    	; 0x185a <error_event+0x55a>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    17ca:	40 ed       	ldi	r20, 0xD0	; 208
    17cc:	57 e0       	ldi	r21, 0x07	; 7
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	8b ea       	ldi	r24, 0xAB	; 171
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
					error_motor_last_state = ERR_M_WAIT;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    17e6:	86 e7       	ldi	r24, 0x76	; 118
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	9f 93       	push	r25
    17ec:	8f 93       	push	r24
    17ee:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	31 c0       	rjmp	.+98     	; 0x185a <error_event+0x55a>
				}
				break;
				case ERR_M_AXELERATE:
				if (evTime_check(&motor_timer))
    17f8:	8b ea       	ldi	r24, 0xAB	; 171
    17fa:	92 e0       	ldi	r25, 0x02	; 2
    17fc:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    1800:	89 2b       	or	r24, r25
    1802:	59 f1       	breq	.+86     	; 0x185a <error_event+0x55a>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1804:	40 ed       	ldi	r20, 0xD0	; 208
    1806:	57 e0       	ldi	r21, 0x07	; 7
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	8b ea       	ldi	r24, 0xAB	; 171
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <error_motor_state>
					error_motor_last_state = ERR_M_AXELERATE;
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1820:	86 e7       	ldi	r24, 0x76	; 118
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	9f 93       	push	r25
    1826:	8f 93       	push	r24
    1828:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	14 c0       	rjmp	.+40     	; 0x185a <error_event+0x55a>
				}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 3f 09 	call	0x127e	; 0x127e <set_error_state>
				break;
    1838:	10 c0       	rjmp	.+32     	; 0x185a <error_event+0x55a>
				case ERR_M_EXIT:
				if (evTime_check(&motor_timer))
    183a:	8b ea       	ldi	r24, 0xAB	; 171
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    1842:	89 2b       	or	r24, r25
    1844:	51 f0       	breq	.+20     	; 0x185a <error_event+0x55a>
				{
					debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1846:	81 e9       	ldi	r24, 0x91	; 145
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					error_motor_state = ERR_M_OK;
    1852:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <error_motor_state>
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
		
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		
		servo_error_value = count_servo_error_value();
		if (servo_vibro_value*5 > servo_error_value) //measure_get_filtered_value(MEAS_SERVO)
    185a:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 01       	movw	r18, r24
    1862:	22 0f       	add	r18, r18
    1864:	33 1f       	adc	r19, r19
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	85 36       	cpi	r24, 0x65	; 101
    1870:	91 05       	cpc	r25, r1
    1872:	e0 f0       	brcs	.+56     	; 0x18ac <error_event+0x5ac>
		{
			debug_msg("servo_error_value: %d\n", servo_error_value);
    1874:	1f 92       	push	r1
    1876:	84 e6       	ldi	r24, 0x64	; 100
    1878:	8f 93       	push	r24
    187a:	8a ea       	ldi	r24, 0xAA	; 170
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	9f 93       	push	r25
    1880:	8f 93       	push	r24
    1882:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			error_servo_status = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <error_servo_status>
			error_servo_status = 0;
		}
		
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <error_servo_state>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	51 f1       	breq	.+84     	; 0x18f0 <error_event+0x5f0>
    189c:	a8 f0       	brcs	.+42     	; 0x18c8 <error_event+0x5c8>
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <error_event+0x5a4>
    18a2:	4b c0       	rjmp	.+150    	; 0x193a <error_event+0x63a>
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	09 f4       	brne	.+2      	; 0x18aa <error_event+0x5aa>
    18a8:	51 c0       	rjmp	.+162    	; 0x194c <error_event+0x64c>
    18aa:	81 c0       	rjmp	.+258    	; 0x19ae <error_event+0x6ae>
			debug_msg("servo_error_value: %d\n", servo_error_value);
			error_servo_status = 1;
		}
		else
		{
			error_servo_status = 0;
    18ac:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <error_servo_status>
			} //switch
		}// if (error_servo_status == 1)
		else
		{
			//toDo
			switch(error_servo_state)
    18b0:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <error_servo_state>
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	09 f4       	brne	.+2      	; 0x18ba <error_event+0x5ba>
    18b8:	66 c0       	rjmp	.+204    	; 0x1986 <error_event+0x686>
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <error_event+0x5c0>
    18be:	74 c0       	rjmp	.+232    	; 0x19a8 <error_event+0x6a8>
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <error_event+0x5c6>
    18c4:	74 c0       	rjmp	.+232    	; 0x19ae <error_event+0x6ae>
    18c6:	46 c0       	rjmp	.+140    	; 0x1954 <error_event+0x654>
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
			{
				case ERR_S_OK:
					error_servo_state = ERR_S_WAIT;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    18ce:	81 ec       	ldi	r24, 0xC1	; 193
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	9f 93       	push	r25
    18d4:	8f 93       	push	r24
    18d6:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    18da:	44 ef       	ldi	r20, 0xF4	; 244
    18dc:	51 e0       	ldi	r21, 0x01	; 1
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	8f e9       	ldi	r24, 0x9F	; 159
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
				break;
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	5f c0       	rjmp	.+190    	; 0x19ae <error_event+0x6ae>
				case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    18f0:	8f e9       	ldi	r24, 0x9F	; 159
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    18f8:	89 2b       	or	r24, r25
    18fa:	09 f4       	brne	.+2      	; 0x18fe <error_event+0x5fe>
    18fc:	58 c0       	rjmp	.+176    	; 0x19ae <error_event+0x6ae>
					{
						if (servo_get_try_cnt() > SERVO_TRY_CNT)
    18fe:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <servo_get_try_cnt>
    1902:	04 97       	sbiw	r24, 0x04	; 4
    1904:	24 f0       	brlt	.+8      	; 0x190e <error_event+0x60e>
						{
							error_servo_state = ERR_S_ERROR;
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <error_servo_state>
							break;
    190c:	50 c0       	rjmp	.+160    	; 0x19ae <error_event+0x6ae>
						}
						evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    190e:	4c ed       	ldi	r20, 0xDC	; 220
    1910:	55 e0       	ldi	r21, 0x05	; 5
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	8f e9       	ldi	r24, 0x9F	; 159
    1918:	92 e0       	ldi	r25, 0x02	; 2
    191a:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
						error_servo_state = ERR_S_TRY;
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <error_servo_state>
						servo_enable_try();
    1924:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <servo_enable_try>
						debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1928:	8c ed       	ldi	r24, 0xDC	; 220
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	9f 93       	push	r25
    192e:	8f 93       	push	r24
    1930:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	3a c0       	rjmp	.+116    	; 0x19ae <error_event+0x6ae>
					}
				break;
				case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    193a:	8f e9       	ldi	r24, 0x9F	; 159
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    1942:	89 2b       	or	r24, r25
    1944:	a1 f1       	breq	.+104    	; 0x19ae <error_event+0x6ae>
					{
						error_servo_state = ERR_S_OK;
    1946:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <error_servo_state>
    194a:	31 c0       	rjmp	.+98     	; 0x19ae <error_event+0x6ae>
					}
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	0e 94 3f 09 	call	0x127e	; 0x127e <set_error_state>
				break;
    1952:	2d c0       	rjmp	.+90     	; 0x19ae <error_event+0x6ae>
			switch(error_servo_state)
			{
				case ERR_S_OK:
				break;
				case ERR_S_WAIT:
				if (evTime_check(&servo_timer))
    1954:	8f e9       	ldi	r24, 0x9F	; 159
    1956:	92 e0       	ldi	r25, 0x02	; 2
    1958:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    195c:	89 2b       	or	r24, r25
    195e:	39 f1       	breq	.+78     	; 0x19ae <error_event+0x6ae>
				{
					evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1960:	40 ed       	ldi	r20, 0xD0	; 208
    1962:	57 e0       	ldi	r21, 0x07	; 7
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	8f e9       	ldi	r24, 0x9F	; 159
    196a:	92 e0       	ldi	r25, 0x02	; 2
    196c:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
					error_servo_state = ERR_M_OK;
    1970:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1974:	86 ef       	ldi	r24, 0xF6	; 246
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <error_event+0x6ae>
				}
				break;
				case ERR_S_TRY:
				if (evTime_check(&servo_timer))
    1986:	8f e9       	ldi	r24, 0x9F	; 159
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    198e:	89 2b       	or	r24, r25
    1990:	71 f0       	breq	.+28     	; 0x19ae <error_event+0x6ae>
				{
					error_servo_state = ERR_S_OK;
    1992:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1996:	86 ef       	ldi	r24, 0xF6	; 246
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <error_event+0x6ae>
				}
				break;
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 3f 09 	call	0x127e	; 0x127e <set_error_state>
				break;
			} //switch
		} //else (error_servo_status == 1)
	} //error_event_timer
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	08 95       	ret

000019bc <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    19bc:	4e e5       	ldi	r20, 0x5E	; 94
    19be:	51 e0       	ldi	r21, 0x01	; 1
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	86 e9       	ldi	r24, 0x96	; 150
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 0e 14 	call	0x281c	; 0x281c <evTime_process_period>
    19cc:	89 2b       	or	r24, r25
    19ce:	09 f1       	breq	.+66     	; 0x1a12 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    19d0:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <led_blink>
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    19d8:	92 b3       	in	r25, 0x12	; 18
    19da:	80 e1       	ldi	r24, 0x10	; 16
    19dc:	89 27       	eor	r24, r25
    19de:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    19e0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    19e4:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    19e8:	90 62       	ori	r25, 0x20	; 32
    19ea:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    19ee:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    19f2:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    19f4:	82 30       	cpi	r24, 0x02	; 2
    19f6:	69 f4       	brne	.+26     	; 0x1a12 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    19f8:	92 b3       	in	r25, 0x12	; 18
    19fa:	80 e4       	ldi	r24, 0x40	; 64
    19fc:	89 27       	eor	r24, r25
    19fe:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1a00:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    1a04:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    1a08:	90 62       	ori	r25, 0x20	; 32
    1a0a:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    1a0e:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    1a12:	08 95       	ret

00001a14 <filtered_value>:
static uint8_t s_o_t_iteration_adc_table = 0;
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 81       	ld	r18, Z
    1a18:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
    1a1a:	62 30       	cpi	r22, 0x02	; 2
    1a1c:	58 f0       	brcs	.+22     	; 0x1a34 <filtered_value+0x20>
    1a1e:	32 96       	adiw	r30, 0x02	; 2
    1a20:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
    1a22:	41 91       	ld	r20, Z+
    1a24:	51 91       	ld	r21, Z+
    1a26:	24 0f       	add	r18, r20
    1a28:	35 1f       	adc	r19, r21
    1a2a:	36 95       	lsr	r19
    1a2c:	27 95       	ror	r18
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
    1a2e:	9f 5f       	subi	r25, 0xFF	; 255
    1a30:	69 13       	cpse	r22, r25
    1a32:	f7 cf       	rjmp	.-18     	; 0x1a22 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
    1a34:	c9 01       	movw	r24, r18
    1a36:	08 95       	ret

00001a38 <init_measure>:

void init_measure(void)
{
    1a38:	e0 ee       	ldi	r30, 0xE0	; 224
    1a3a:	f2 e0       	ldi	r31, 0x02	; 2
    1a3c:	28 e0       	ldi	r18, 0x08	; 8
    1a3e:	33 e0       	ldi	r19, 0x03	; 3
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
    1a40:	81 ef       	ldi	r24, 0xF1	; 241
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	81 93       	st	Z+, r24
    1a46:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
    1a48:	2e 17       	cp	r18, r30
    1a4a:	3f 07       	cpc	r19, r31
    1a4c:	d9 f7       	brne	.-10     	; 0x1a44 <init_measure+0xc>
    1a4e:	ef ec       	ldi	r30, 0xCF	; 207
    1a50:	f2 e0       	ldi	r31, 0x02	; 2
    1a52:	8d ed       	ldi	r24, 0xDD	; 221
    1a54:	92 e0       	ldi	r25, 0x02	; 2
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
    1a56:	11 92       	st	Z+, r1
    1a58:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
    1a5a:	8e 17       	cp	r24, r30
    1a5c:	9f 07       	cpc	r25, r31
    1a5e:	d9 f7       	brne	.-10     	; 0x1a56 <init_measure+0x1e>
    1a60:	e7 eb       	ldi	r30, 0xB7	; 183
    1a62:	f2 e0       	ldi	r31, 0x02	; 2
    1a64:	8b ec       	ldi	r24, 0xCB	; 203
    1a66:	92 e0       	ldi	r25, 0x02	; 2
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
    1a68:	11 92       	st	Z+, r1
    1a6a:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
    1a6c:	8e 17       	cp	r24, r30
    1a6e:	9f 07       	cpc	r25, r31
    1a70:	d9 f7       	brne	.-10     	; 0x1a68 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
    1a72:	08 95       	ret

00001a74 <measure_process>:
static timer_t measure_timer;
void measure_process(void)
{
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
	if (measure_timer < mktime.ms)
    1a80:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    1a84:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    1a88:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    1a8c:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    1a90:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <measure_timer>
    1a94:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <measure_timer+0x1>
    1a98:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <measure_timer+0x2>
    1a9c:	b0 91 b3 02 	lds	r27, 0x02B3	; 0x8002b3 <measure_timer+0x3>
    1aa0:	84 17       	cp	r24, r20
    1aa2:	95 07       	cpc	r25, r21
    1aa4:	a6 07       	cpc	r26, r22
    1aa6:	b7 07       	cpc	r27, r23
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <measure_process+0x38>
    1aaa:	98 c0       	rjmp	.+304    	; 0x1bdc <measure_process+0x168>
	{
		measure_timer = mktime.ms + 50;
    1aac:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
    1ab0:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
    1ab4:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
    1ab8:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
    1abc:	c2 96       	adiw	r24, 0x32	; 50
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	b1 1d       	adc	r27, r1
    1ac2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <measure_timer>
    1ac6:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <measure_timer+0x1>
    1aca:	a0 93 b2 02 	sts	0x02B2, r26	; 0x8002b2 <measure_timer+0x2>
    1ace:	b0 93 b3 02 	sts	0x02B3, r27	; 0x8002b3 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1ad8:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
    1ada:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <motor_filter_value>
    1ade:	70 91 de 02 	lds	r23, 0x02DE	; 0x8002de <motor_filter_value+0x1>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1aea:	21 e7       	ldi	r18, 0x71	; 113
    1aec:	3d e3       	ldi	r19, 0x3D	; 61
    1aee:	4a e8       	ldi	r20, 0x8A	; 138
    1af0:	5e e3       	ldi	r21, 0x3E	; 62
    1af2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__mulsf3>
    1af6:	6b 01       	movw	r12, r22
    1af8:	7c 01       	movw	r14, r24
    1afa:	be 01       	movw	r22, r28
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__floatunsisf>
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	c7 01       	movw	r24, r14
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	0e 94 9e 14 	call	0x293c	; 0x293c <__addsf3>
    1b10:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    1b14:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <accum_adc+0x1>
    1b18:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
    1b1c:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <iteration_adc_accum_table>
    1b20:	e2 2f       	mov	r30, r18
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	e0 52       	subi	r30, 0x20	; 32
    1b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2c:	71 83       	std	Z+1, r23	; 0x01
    1b2e:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	82 0f       	add	r24, r18
    1b34:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1b3e:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <motor_adc+0x1>
    1b42:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
    1b46:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <iteration_adc_motor_table>
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	e1 53       	subi	r30, 0x31	; 49
    1b52:	fd 4f       	sbci	r31, 0xFD	; 253
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1b5e:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <s_o_t_adc+0x1>
    1b62:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <s_o_t_adc>

		//if (s_o_t_adc < SERVO_CALIBRATION_VALUE) s_o_t_adc = 0;
		//else s_o_t_adc = s_o_t_adc - SERVO_CALIBRATION_VALUE;

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
    1b66:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <s_o_t_iteration_adc_table>
    1b6a:	ec 2f       	mov	r30, r28
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	e9 54       	subi	r30, 0x49	; 73
    1b74:	fd 4f       	sbci	r31, 0xFD	; 253
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
    1b7a:	d0 91 df 02 	lds	r29, 0x02DF	; 0x8002df <iteration_adc_motor_table>
    1b7e:	df 5f       	subi	r29, 0xFF	; 255
    1b80:	d0 93 df 02 	sts	0x02DF, r29	; 0x8002df <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
    1b84:	cf 5f       	subi	r28, 0xFF	; 255
    1b86:	c0 93 b6 02 	sts	0x02B6, r28	; 0x8002b6 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
    1b8a:	64 e1       	ldi	r22, 0x14	; 20
    1b8c:	80 ee       	ldi	r24, 0xE0	; 224
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <filtered_value>
    1b94:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <filtered_accum_adc_val+0x1>
    1b98:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
    1b9c:	67 e0       	ldi	r22, 0x07	; 7
    1b9e:	8f ec       	ldi	r24, 0xCF	; 207
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <filtered_value>
    1ba6:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <motor_filter_value+0x1>
    1baa:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
    1bae:	6a e0       	ldi	r22, 0x0A	; 10
    1bb0:	87 eb       	ldi	r24, 0xB7	; 183
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <filtered_value>
    1bb8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <s_o_t_filter_value+0x1>
    1bbc:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <s_o_t_filter_value>
		//debug_msg("accum %d, servo %d, motor %d\n",accum_adc, s_o_t_adc, motor_adc);
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
    1bc0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <iteration_adc_accum_table>
    1bc4:	84 31       	cpi	r24, 0x14	; 20
    1bc6:	11 f4       	brne	.+4      	; 0x1bcc <measure_process+0x158>
    1bc8:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
    1bcc:	ca 30       	cpi	r28, 0x0A	; 10
    1bce:	11 f4       	brne	.+4      	; 0x1bd4 <measure_process+0x160>
    1bd0:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
    1bd4:	d7 30       	cpi	r29, 0x07	; 7
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <measure_process+0x168>
    1bd8:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <iteration_adc_motor_table>
	}
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	08 95       	ret

00001bea <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	18 f4       	brcc	.+6      	; 0x1bf4 <measure_get_filtered_value+0xa>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	40 f0       	brcs	.+16     	; 0x1c02 <measure_get_filtered_value+0x18>
    1bf2:	0c c0       	rjmp	.+24     	; 0x1c0c <measure_get_filtered_value+0x22>
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	79 f4       	brne	.+30     	; 0x1c16 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
    1bf8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <filtered_accum_adc_val>
    1bfc:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <filtered_accum_adc_val+0x1>
    1c00:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
    1c02:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <motor_filter_value>
    1c06:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <motor_filter_value+0x1>
    1c0a:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
    1c0c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <s_o_t_filter_value>
    1c10:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <s_o_t_filter_value+0x1>
    1c14:	08 95       	ret
        break;
    }
	return 0;
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
}
    1c1a:	08 95       	ret

00001c1c <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	59 f0       	breq	.+22     	; 0x1c42 <mem_save_data+0x26>
    1c2c:	28 f4       	brcc	.+10     	; 0x1c38 <mem_save_data+0x1c>
    1c2e:	88 23       	and	r24, r24
    1c30:	91 f0       	breq	.+36     	; 0x1c56 <mem_save_data+0x3a>
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	19 f1       	breq	.+70     	; 0x1c7c <mem_save_data+0x60>
    1c36:	30 c0       	rjmp	.+96     	; 0x1c98 <mem_save_data+0x7c>
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	29 f1       	breq	.+74     	; 0x1c86 <mem_save_data+0x6a>
    1c3c:	84 30       	cpi	r24, 0x04	; 4
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <mem_save_data+0x30>
    1c40:	2b c0       	rjmp	.+86     	; 0x1c98 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1c42:	22 e0       	ldi	r18, 0x02	; 2
    1c44:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1c46:	84 e0       	ldi	r24, 0x04	; 4
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	21 c0       	rjmp	.+66     	; 0x1c8e <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1c4c:	23 e0       	ldi	r18, 0x03	; 3
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1c50:	88 e0       	ldi	r24, 0x08	; 8
    1c52:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1c54:	1c c0       	rjmp	.+56     	; 0x1c8e <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c56:	68 94       	set
    1c58:	ee 24       	eor	r14, r14
    1c5a:	e1 f8       	bld	r14, 1
    1c5c:	f1 2c       	mov	r15, r1
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    1c60:	f8 01       	movw	r30, r16
    1c62:	61 91       	ld	r22, Z+
    1c64:	8f 01       	movw	r16, r30
    1c66:	8c 2f       	mov	r24, r28
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 30 09 	call	0x1260	; 0x1260 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c6e:	cf 5f       	subi	r28, 0xFF	; 255
    1c70:	8c 2f       	mov	r24, r28
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	8e 15       	cp	r24, r14
    1c76:	9f 05       	cpc	r25, r15
    1c78:	9c f3       	brlt	.-26     	; 0x1c60 <mem_save_data+0x44>
    1c7a:	0e c0       	rjmp	.+28     	; 0x1c98 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1c7c:	22 e0       	ldi	r18, 0x02	; 2
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1c86:	22 e0       	ldi	r18, 0x02	; 2
    1c88:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1c8a:	86 e0       	ldi	r24, 0x06	; 6
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c8e:	c8 2f       	mov	r28, r24
    1c90:	79 01       	movw	r14, r18
    1c92:	e8 0e       	add	r14, r24
    1c94:	f9 1e       	adc	r15, r25
    1c96:	e4 cf       	rjmp	.-56     	; 0x1c60 <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	08 95       	ret

00001ca4 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	59 f0       	breq	.+22     	; 0x1cca <mem_read_data+0x26>
    1cb4:	28 f4       	brcc	.+10     	; 0x1cc0 <mem_read_data+0x1c>
    1cb6:	88 23       	and	r24, r24
    1cb8:	91 f0       	breq	.+36     	; 0x1cde <mem_read_data+0x3a>
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	19 f1       	breq	.+70     	; 0x1d04 <mem_read_data+0x60>
    1cbe:	30 c0       	rjmp	.+96     	; 0x1d20 <mem_read_data+0x7c>
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	29 f1       	breq	.+74     	; 0x1d0e <mem_read_data+0x6a>
    1cc4:	84 30       	cpi	r24, 0x04	; 4
    1cc6:	31 f0       	breq	.+12     	; 0x1cd4 <mem_read_data+0x30>
    1cc8:	2b c0       	rjmp	.+86     	; 0x1d20 <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1cca:	22 e0       	ldi	r18, 0x02	; 2
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1cce:	84 e0       	ldi	r24, 0x04	; 4
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	21 c0       	rjmp	.+66     	; 0x1d16 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1cd4:	23 e0       	ldi	r18, 0x03	; 3
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1cd8:	88 e0       	ldi	r24, 0x08	; 8
    1cda:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1cdc:	1c c0       	rjmp	.+56     	; 0x1d16 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1cde:	68 94       	set
    1ce0:	ee 24       	eor	r14, r14
    1ce2:	e1 f8       	bld	r14, 1
    1ce4:	f1 2c       	mov	r15, r1
    1ce6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    1ce8:	8c 2f       	mov	r24, r28
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 38 09 	call	0x1270	; 0x1270 <EEPROM_read>
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	81 93       	st	Z+, r24
    1cf4:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1cf6:	cf 5f       	subi	r28, 0xFF	; 255
    1cf8:	8c 2f       	mov	r24, r28
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	8e 15       	cp	r24, r14
    1cfe:	9f 05       	cpc	r25, r15
    1d00:	9c f3       	brlt	.-26     	; 0x1ce8 <mem_read_data+0x44>
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1d04:	22 e0       	ldi	r18, 0x02	; 2
    1d06:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1d0e:	22 e0       	ldi	r18, 0x02	; 2
    1d10:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1d12:	86 e0       	ldi	r24, 0x06	; 6
    1d14:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1d16:	c8 2f       	mov	r28, r24
    1d18:	79 01       	movw	r14, r18
    1d1a:	e8 0e       	add	r14, r24
    1d1c:	f9 1e       	adc	r15, r25
    1d1e:	e4 cf       	rjmp	.-56     	; 0x1ce8 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	08 95       	ret

00001d2c <servo_init>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	2f e1       	ldi	r18, 0x1F	; 31
    1d32:	3e e4       	ldi	r19, 0x4E	; 78
    1d34:	37 bd       	out	0x27, r19	; 39
    1d36:	26 bd       	out	0x26, r18	; 38
    1d38:	81 b3       	in	r24, 0x11	; 17
    1d3a:	80 63       	ori	r24, 0x30	; 48
    1d3c:	81 bb       	out	0x11, r24	; 17
    1d3e:	19 bc       	out	0x29, r1	; 41
    1d40:	18 bc       	out	0x28, r1	; 40
    1d42:	1b bc       	out	0x2b, r1	; 43
    1d44:	1a bc       	out	0x2a, r1	; 42
    1d46:	8f b5       	in	r24, 0x2f	; 47
    1d48:	82 60       	ori	r24, 0x02	; 2
    1d4a:	8f bd       	out	0x2f, r24	; 47
    1d4c:	8e b5       	in	r24, 0x2e	; 46
    1d4e:	88 61       	ori	r24, 0x18	; 24
    1d50:	8e bd       	out	0x2e, r24	; 46
    1d52:	8f b5       	in	r24, 0x2f	; 47
    1d54:	80 68       	ori	r24, 0x80	; 128
    1d56:	8f bd       	out	0x2f, r24	; 47
    1d58:	8e b5       	in	r24, 0x2e	; 46
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	8e bd       	out	0x2e, r24	; 46
    1d5e:	3b bd       	out	0x2b, r19	; 43
    1d60:	2a bd       	out	0x2a, r18	; 42
    1d62:	96 98       	cbi	0x12, 6	; 18
    1d64:	c1 eb       	ldi	r28, 0xB1	; 177
    1d66:	d4 e0       	ldi	r29, 0x04	; 4
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	88 83       	st	Y, r24
    1d6c:	1b 82       	std	Y+3, r1	; 0x03
    1d6e:	85 eb       	ldi	r24, 0xB5	; 181
    1d70:	94 e0       	ldi	r25, 0x04	; 4
    1d72:	0e 94 c4 13 	call	0x2788	; 0x2788 <evTime_init>
    1d76:	19 86       	std	Y+9, r1	; 0x09
    1d78:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <try_count>
    1d7c:	8f e0       	ldi	r24, 0x0F	; 15
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	9f 93       	push	r25
    1d82:	8f 93       	push	r24
    1d84:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	08 95       	ret

00001d92 <servo_is_open>:
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <servoD>
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	11 f0       	breq	.+4      	; 0x1da2 <servo_is_open+0x10>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	08 95       	ret

00001da4 <servo_enable_try>:
    1da4:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <servoD>
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	98 0f       	add	r25, r24
    1dac:	92 30       	cpi	r25, 0x02	; 2
    1dae:	28 f4       	brcc	.+10     	; 0x1dba <servo_enable_try+0x16>
    1db0:	e1 eb       	ldi	r30, 0xB1	; 177
    1db2:	f4 e0       	ldi	r31, 0x04	; 4
    1db4:	81 83       	std	Z+1, r24	; 0x01
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	80 83       	st	Z, r24
    1dba:	08 95       	ret

00001dbc <servo_get_try_cnt>:
    1dbc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <servoD+0x9>
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	08 95       	ret

00001dc4 <servo_close>:
    1dc4:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <servoD>
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	b9 f4       	brne	.+46     	; 0x1dfa <servo_close+0x36>
    1dcc:	1b bc       	out	0x2b, r1	; 43
    1dce:	1a bc       	out	0x2a, r1	; 42
    1dd0:	e1 eb       	ldi	r30, 0xB1	; 177
    1dd2:	f4 e0       	ldi	r31, 0x04	; 4
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	80 83       	st	Z, r24
    1dd8:	13 82       	std	Z+3, r1	; 0x03
    1dda:	1f 92       	push	r1
    1ddc:	1f 92       	push	r1
    1dde:	8c e1       	ldi	r24, 0x1C	; 28
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	9f 93       	push	r25
    1de4:	8f 93       	push	r24
    1de6:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1dea:	96 98       	cbi	0x12, 6	; 18
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	08 95       	ret
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <servo_close+0x44>
    1dfe:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <servo_exit_try>
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	08 95       	ret
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	08 95       	ret

00001e0e <servo_exit_try>:
    1e0e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <servoD+0x1>
    1e12:	82 30       	cpi	r24, 0x02	; 2
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <servo_exit_try+0x12>
    1e16:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <servoD>
    1e1a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <servo_close>
    1e1e:	09 c0       	rjmp	.+18     	; 0x1e32 <servo_exit_try+0x24>
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	71 f4       	brne	.+28     	; 0x1e40 <servo_exit_try+0x32>
    1e24:	e1 eb       	ldi	r30, 0xB1	; 177
    1e26:	f4 e0       	ldi	r31, 0x04	; 4
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 83       	st	Z, r24
    1e2c:	83 81       	ldd	r24, Z+3	; 0x03
    1e2e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <servo_open>
    1e32:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <try_count>
    1e36:	e1 eb       	ldi	r30, 0xB1	; 177
    1e38:	f4 e0       	ldi	r31, 0x04	; 4
    1e3a:	81 85       	ldd	r24, Z+9	; 0x09
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	81 87       	std	Z+9, r24	; 0x09
    1e40:	08 95       	ret

00001e42 <servo_open>:
    1e42:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <servoD>
    1e46:	2f ef       	ldi	r18, 0xFF	; 255
    1e48:	29 0f       	add	r18, r25
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	c8 f4       	brcc	.+50     	; 0x1e80 <servo_open+0x3e>
    1e4e:	e1 eb       	ldi	r30, 0xB1	; 177
    1e50:	f4 e0       	ldi	r31, 0x04	; 4
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	90 83       	st	Z, r25
    1e56:	83 83       	std	Z+3, r24	; 0x03
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3b bd       	out	0x2b, r19	; 43
    1e5e:	2a bd       	out	0x2a, r18	; 42
    1e60:	1f 92       	push	r1
    1e62:	8f 93       	push	r24
    1e64:	8d e2       	ldi	r24, 0x2D	; 45
    1e66:	92 e0       	ldi	r25, 0x02	; 2
    1e68:	9f 93       	push	r25
    1e6a:	8f 93       	push	r24
    1e6c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1e70:	96 9a       	sbi	0x12, 6	; 18
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	08 95       	ret
    1e80:	93 30       	cpi	r25, 0x03	; 3
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <servo_open+0x4c>
    1e84:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <servo_exit_try>
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	08 95       	ret
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	08 95       	ret

00001e94 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    1e94:	cf 93       	push	r28
    1e96:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 500))
    1e98:	44 ef       	ldi	r20, 0xF4	; 244
    1e9a:	51 e0       	ldi	r21, 0x01	; 1
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	82 e1       	ldi	r24, 0x12	; 18
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	0e 94 0e 14 	call	0x281c	; 0x281c <evTime_process_period>
    1ea8:	89 2b       	or	r24, r25
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <servo_process+0x1a>
    1eac:	75 c0       	rjmp	.+234    	; 0x1f98 <servo_process+0x104>
	{
		switch(servoD.state)
    1eae:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <servoD>
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	19 f0       	breq	.+6      	; 0x1ebc <servo_process+0x28>
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	41 f0       	breq	.+16     	; 0x1eca <servo_process+0x36>
    1eba:	5e c0       	rjmp	.+188    	; 0x1f78 <servo_process+0xe4>
		{
			case SERVO_OPEN:
			servoD.value = value;
    1ebc:	c0 93 b4 04 	sts	0x04B4, r28	; 0x8004b4 <servoD+0x3>
			set_pwm((uint16_t)value);
    1ec0:	8c 2f       	mov	r24, r28
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1ec4:	9b bd       	out	0x2b, r25	; 43
    1ec6:	8a bd       	out	0x2a, r24	; 42
    1ec8:	57 c0       	rjmp	.+174    	; 0x1f78 <servo_process+0xe4>


static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    1eca:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <try_count>
    1ece:	81 11       	cpse	r24, r1
    1ed0:	15 c0       	rjmp	.+42     	; 0x1efc <servo_process+0x68>
	{
		evTime_start(&timeout, 100);
    1ed2:	44 e6       	ldi	r20, 0x64	; 100
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	8d e0       	ldi	r24, 0x0D	; 13
    1edc:	93 e0       	ldi	r25, 0x03	; 3
    1ede:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
		try_count++;
    1ee2:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <try_count>
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <try_count>
		set_pwm(servoD.value + try_count);
    1eec:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <servoD+0x3>
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	82 0f       	add	r24, r18
    1ef4:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1ef6:	9b bd       	out	0x2b, r25	; 43
    1ef8:	8a bd       	out	0x2a, r24	; 42
    1efa:	2b c0       	rjmp	.+86     	; 0x1f52 <servo_process+0xbe>
	{
		evTime_start(&timeout, 100);
		try_count++;
		set_pwm(servoD.value + try_count);
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    1efc:	81 50       	subi	r24, 0x01	; 1
    1efe:	89 30       	cpi	r24, 0x09	; 9
    1f00:	d8 f4       	brcc	.+54     	; 0x1f38 <servo_process+0xa4>
	{
		if (evTime_check(&timeout) == 1)
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	11 f5       	brne	.+68     	; 0x1f52 <servo_process+0xbe>
		{
			evTime_start(&timeout, 100);
    1f0e:	44 e6       	ldi	r20, 0x64	; 100
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	8d e0       	ldi	r24, 0x0D	; 13
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
			try_count++;
    1f1e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <try_count>
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <try_count>
			set_pwm(servoD.value + try_count);
    1f28:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <servoD+0x3>
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	82 0f       	add	r24, r18
    1f30:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1f32:	9b bd       	out	0x2b, r25	; 43
    1f34:	8a bd       	out	0x2a, r24	; 42
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <servo_process+0xbe>
			set_pwm(servoD.value + try_count);
		}
	}
	else
	{
		try_count = 0;
    1f38:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <try_count>
		set_pwm(servoD.value);
    1f3c:	e1 eb       	ldi	r30, 0xB1	; 177
    1f3e:	f4 e0       	ldi	r31, 0x04	; 4
    1f40:	83 81       	ldd	r24, Z+3	; 0x03
    1f42:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1f44:	9b bd       	out	0x2b, r25	; 43
    1f46:	8a bd       	out	0x2a, r24	; 42
	}
	else
	{
		try_count = 0;
		set_pwm(servoD.value);
		servoD.state = servoD.last_state;
    1f48:	81 81       	ldd	r24, Z+1	; 0x01
    1f4a:	80 83       	st	Z, r24
		servoD.try_cnt++;
    1f4c:	81 85       	ldd	r24, Z+9	; 0x09
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	81 87       	std	Z+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    1f52:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <servoD+0x3>
    1f56:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <try_count>
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	82 0f       	add	r24, r18
    1f5e:	91 1d       	adc	r25, r1
    1f60:	9f 93       	push	r25
    1f62:	8f 93       	push	r24
    1f64:	8f e3       	ldi	r24, 0x3F	; 63
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
			break;
			case SERVO_TRY:
			servo_try_process();
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    1f78:	85 eb       	ldi	r24, 0xB5	; 181
    1f7a:	94 e0       	ldi	r25, 0x04	; 4
    1f7c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	51 f4       	brne	.+20     	; 0x1f98 <servo_process+0x104>
		{
			servoD.try_cnt = 0;
    1f84:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    1f88:	8d e4       	ldi	r24, 0x4D	; 77
    1f8a:	92 e0       	ldi	r25, 0x02	; 2
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
		}
	}
}
    1f98:	cf 91       	pop	r28
    1f9a:	08 95       	ret

00001f9c <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    1f9c:	ed e5       	ldi	r30, 0x5D	; 93
    1f9e:	f4 e0       	ldi	r31, 0x04	; 4
    1fa0:	16 86       	std	Z+14, r1	; 0x0e
    1fa2:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    1fa4:	12 86       	std	Z+10, r1	; 0x0a
    1fa6:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    1fa8:	14 86       	std	Z+12, r1	; 0x0c
    1faa:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    1fac:	e0 e3       	ldi	r30, 0x30	; 48
    1fae:	f4 e0       	ldi	r31, 0x04	; 4
    1fb0:	16 86       	std	Z+14, r1	; 0x0e
    1fb2:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    1fb4:	12 86       	std	Z+10, r1	; 0x0a
    1fb6:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    1fb8:	14 86       	std	Z+12, r1	; 0x0c
    1fba:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    1fbc:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <button3+0xc>
    1fc0:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <button3+0xb>
	
	button5.timer_callback = 0;
    1fc4:	ee e0       	ldi	r30, 0x0E	; 14
    1fc6:	f4 e0       	ldi	r31, 0x04	; 4
    1fc8:	16 86       	std	Z+14, r1	; 0x0e
    1fca:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    1fcc:	14 86       	std	Z+12, r1	; 0x0c
    1fce:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    1fd0:	12 86       	std	Z+10, r1	; 0x0a
    1fd2:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    1fd4:	ee e4       	ldi	r30, 0x4E	; 78
    1fd6:	f4 e0       	ldi	r31, 0x04	; 4
    1fd8:	16 86       	std	Z+14, r1	; 0x0e
    1fda:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    1fdc:	14 86       	std	Z+12, r1	; 0x0c
    1fde:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    1fe0:	12 86       	std	Z+10, r1	; 0x0a
    1fe2:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    1fe4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <button7+0xc>
    1fe8:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <button7+0xb>
	
	button8.fall_callback = 0;
    1fec:	eb e7       	ldi	r30, 0x7B	; 123
    1fee:	f4 e0       	ldi	r31, 0x04	; 4
    1ff0:	14 86       	std	Z+12, r1	; 0x0c
    1ff2:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    1ff4:	16 86       	std	Z+14, r1	; 0x0e
    1ff6:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    1ff8:	12 86       	std	Z+10, r1	; 0x0a
    1ffa:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    1ffc:	e0 ef       	ldi	r30, 0xF0	; 240
    1ffe:	f3 e0       	ldi	r31, 0x03	; 3
    2000:	14 86       	std	Z+12, r1	; 0x0c
    2002:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    2004:	16 86       	std	Z+14, r1	; 0x0e
    2006:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    2008:	12 86       	std	Z+10, r1	; 0x0a
    200a:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    200c:	ef ef       	ldi	r30, 0xFF	; 255
    200e:	f3 e0       	ldi	r31, 0x03	; 3
    2010:	14 86       	std	Z+12, r1	; 0x0c
    2012:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    2014:	16 86       	std	Z+14, r1	; 0x0e
    2016:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    2018:	12 86       	std	Z+10, r1	; 0x0a
    201a:	11 86       	std	Z+9, r1	; 0x09
    201c:	08 95       	ret

0000201e <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    201e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	49 f0       	breq	.+18     	; 0x2038 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2026:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    202a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    202e:	98 60       	ori	r25, 0x08	; 8
    2030:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2034:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    2038:	08 95       	ret

0000203a <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    203a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	49 f0       	breq	.+18     	; 0x2054 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2042:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2046:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    204a:	80 68       	ori	r24, 0x80	; 128
    204c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2050:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    2054:	08 95       	ret

00002056 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2056:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    205a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    205e:	92 60       	ori	r25, 0x02	; 2
    2060:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2064:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    2068:	08 95       	ret

0000206a <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    206a:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    206e:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2072:	99 7f       	andi	r25, 0xF9	; 249
    2074:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2078:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	counter_very_fast_motor_sub = 0;
    207c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter_very_fast_motor_sub>
    2080:	08 95       	ret

00002082 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2082:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2086:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    208a:	80 62       	ori	r24, 0x20	; 32
    208c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2090:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    2094:	08 95       	ret

00002096 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2096:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    209a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    209e:	8f 79       	andi	r24, 0x9F	; 159
    20a0:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    20a4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	counter_very_fast_motor_sub = 0;
    20a8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter_very_fast_motor_sub>
    20ac:	08 95       	ret

000020ae <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    20ae:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    20b2:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    20b6:	90 62       	ori	r25, 0x20	; 32
    20b8:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    20bc:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    20c0:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    20c4:	8b 30       	cpi	r24, 0x0B	; 11
    20c6:	18 f0       	brcs	.+6      	; 0x20ce <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    20c8:	81 50       	subi	r24, 0x01	; 1
    20ca:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    20ce:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    20e0:	08 95       	ret

000020e2 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    20e2:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    20e6:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    20ea:	90 62       	ori	r25, 0x20	; 32
    20ec:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    20f0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    20f4:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    20f8:	83 36       	cpi	r24, 0x63	; 99
    20fa:	18 f4       	brcc	.+6      	; 0x2102 <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2102:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2114:	08 95       	ret

00002116 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2116:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    211a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    211e:	90 62       	ori	r25, 0x20	; 32
    2120:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2124:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	if (motor_value > 10)
    2128:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <motor_value>
    212c:	8b 30       	cpi	r24, 0x0B	; 11
    212e:	18 f0       	brcs	.+6      	; 0x2136 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2130:	81 50       	subi	r24, 0x01	; 1
    2132:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2136:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <disp_get_state>
    2146:	02 97       	sbiw	r24, 0x02	; 2
    2148:	29 f4       	brne	.+10     	; 0x2154 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2152:	04 c0       	rjmp	.+8      	; 0x215c <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
	state_measure_volt++;
    215c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <state_measure_volt>
	if (state_measure_volt == 2)
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	19 f4       	brne	.+6      	; 0x2170 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    216a:	66 e0       	ldi	r22, 0x06	; 6
    216c:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2170:	08 95       	ret

00002172 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2172:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2176:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    217a:	90 62       	ori	r25, 0x20	; 32
    217c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2180:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	if (motor_value < 99)
    2184:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <motor_value>
    2188:	83 36       	cpi	r24, 0x63	; 99
    218a:	18 f4       	brcc	.+6      	; 0x2192 <button_motor_add_fall_cb+0x20>
		motor_value++;
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2192:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <disp_get_state>
    21a2:	02 97       	sbiw	r24, 0x02	; 2
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
	state_measure_volt++;
    21b8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <state_measure_volt>
	if (state_measure_volt == 2)
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	19 f4       	brne	.+6      	; 0x21cc <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    21c6:	66 e0       	ldi	r22, 0x06	; 6
    21c8:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    21cc:	08 95       	ret

000021ce <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    21ce:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    21d2:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    21d6:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    21da:	97 7e       	andi	r25, 0xE7	; 231
    21dc:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    21e0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	counter_very_fast_motor_sub = 0;
    21e4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    21e8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    21ec:	88 23       	and	r24, r24
    21ee:	19 f0       	breq	.+6      	; 0x21f6 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <disp_get_state>
    21fc:	02 97       	sbiw	r24, 0x02	; 2
    21fe:	29 f4       	brne	.+10     	; 0x220a <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2208:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2212:	08 95       	ret

00002214 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2214:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2218:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    221c:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2220:	8f 77       	andi	r24, 0x7F	; 127
    2222:	9e 7f       	andi	r25, 0xFE	; 254
    2224:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2228:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	counter_very_fast_motor_sub = 0;
    222c:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2230:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <state_measure_volt>
    2234:	88 23       	and	r24, r24
    2236:	19 f0       	breq	.+6      	; 0x223e <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2238:	81 50       	subi	r24, 0x01	; 1
    223a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <disp_get_state>
    2244:	02 97       	sbiw	r24, 0x02	; 2
    2246:	29 f4       	brne	.+10     	; 0x2252 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    2250:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
    225a:	08 95       	ret

0000225c <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    225c:	ed eb       	ldi	r30, 0xBD	; 189
    225e:	f4 e0       	ldi	r31, 0x04	; 4
    2260:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <motor_value>
    2264:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2266:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    226a:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    226c:	bf 01       	movw	r22, r30
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <mem_save_data>
    2274:	08 95       	ret

00002276 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2276:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    227a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    227e:	90 62       	ori	r25, 0x20	; 32
    2280:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2284:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	if (motor_value < 10)
    2288:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <motor_value>
    228c:	8a 30       	cpi	r24, 0x0A	; 10
    228e:	38 f4       	brcc	.+14     	; 0x229e <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2290:	8a e0       	ldi	r24, 0x0A	; 10
    2292:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2296:	6a e0       	ldi	r22, 0x0A	; 10
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	}
	sys_save_display();
    229e:	0e 94 2e 11 	call	0x225c	; 0x225c <sys_save_display>
	if(!dcmotor_is_on()) dcmotorpwm_start();
    22a2:	0e 94 9e 04 	call	0x93c	; 0x93c <dcmotor_is_on>
    22a6:	89 2b       	or	r24, r25
    22a8:	19 f4       	brne	.+6      	; 0x22b0 <button_dcmotor_cb+0x3a>
    22aa:	0e 94 b9 04 	call	0x972	; 0x972 <dcmotorpwm_start>
    22ae:	08 95       	ret
	else dcmotorpwm_stop();
    22b0:	0e 94 a9 04 	call	0x952	; 0x952 <dcmotorpwm_stop>
    22b4:	08 95       	ret

000022b6 <button_on_off_pwm>:
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    22b6:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    22ba:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    22be:	90 62       	ori	r25, 0x20	; 32
    22c0:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    22c4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
	if (servo_vibro_value < 10)
    22c8:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    22cc:	8a 30       	cpi	r24, 0x0A	; 10
    22ce:	38 f4       	brcc	.+14     	; 0x22de <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    22d0:	8a e0       	ldi	r24, 0x0A	; 10
    22d2:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    22d6:	6a e0       	ldi	r22, 0x0A	; 10
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    22de:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <servo_is_open>
    22e2:	89 2b       	or	r24, r25
    22e4:	19 f0       	breq	.+6      	; 0x22ec <button_on_off_pwm+0x36>
    22e6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <servo_close>
    22ea:	08 95       	ret
	else servo_open(servo_vibro_value);
    22ec:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <servo_vibro_value>
    22f0:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <servo_open>
    22f4:	08 95       	ret

000022f6 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    22f6:	80 e2       	ldi	r24, 0x20	; 32
    22f8:	92 e1       	ldi	r25, 0x12	; 18
    22fa:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <button4+0xa>
    22fe:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    230a:	6b eb       	ldi	r22, 0xBB	; 187
    230c:	74 e0       	ldi	r23, 0x04	; 4
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2314:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <mem_last_save+0x1>
    2318:	96 ef       	ldi	r25, 0xF6	; 246
    231a:	98 0f       	add	r25, r24
    231c:	9a 35       	cpi	r25, 0x5A	; 90
    231e:	10 f4       	brcc	.+4      	; 0x2324 <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    2320:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2324:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <mem_last_save>
    2328:	96 ef       	ldi	r25, 0xF6	; 246
    232a:	98 0f       	add	r25, r24
    232c:	9a 35       	cpi	r25, 0x5A	; 90
    232e:	10 f4       	brcc	.+4      	; 0x2334 <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    2330:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <motor_value>
    2334:	08 95       	ret

00002336 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2336:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    233a:	42 e0       	ldi	r20, 0x02	; 2
    233c:	68 ee       	ldi	r22, 0xE8	; 232
    233e:	73 e0       	ldi	r23, 0x03	; 3
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 8f 08 	call	0x111e	; 0x111e <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2348:	0e 94 8c 04 	call	0x918	; 0x918 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <servo_init>
	#endif
	error_init();
    2352:	0e 94 56 09 	call	0x12ac	; 0x12ac <error_init>
	init_measure();
    2356:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <init_measure>
	init_buzzer();
    235a:	0e 94 89 04 	call	0x912	; 0x912 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2366:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    236a:	ed e5       	ldi	r30, 0x5D	; 93
    236c:	f4 e0       	ldi	r31, 0x04	; 4
    236e:	8f e0       	ldi	r24, 0x0F	; 15
    2370:	90 e1       	ldi	r25, 0x10	; 16
    2372:	96 87       	std	Z+14, r25	; 0x0e
    2374:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2376:	8b e8       	ldi	r24, 0x8B	; 139
    2378:	90 e1       	ldi	r25, 0x10	; 16
    237a:	94 87       	std	Z+12, r25	; 0x0c
    237c:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    237e:	87 ee       	ldi	r24, 0xE7	; 231
    2380:	90 e1       	ldi	r25, 0x10	; 16
    2382:	92 87       	std	Z+10, r25	; 0x0a
    2384:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2386:	e0 e3       	ldi	r30, 0x30	; 48
    2388:	f4 e0       	ldi	r31, 0x04	; 4
    238a:	8d e1       	ldi	r24, 0x1D	; 29
    238c:	90 e1       	ldi	r25, 0x10	; 16
    238e:	96 87       	std	Z+14, r25	; 0x0e
    2390:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2392:	89 eb       	ldi	r24, 0xB9	; 185
    2394:	90 e1       	ldi	r25, 0x10	; 16
    2396:	94 87       	std	Z+12, r25	; 0x0c
    2398:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    239a:	8a e0       	ldi	r24, 0x0A	; 10
    239c:	91 e1       	ldi	r25, 0x11	; 17
    239e:	92 87       	std	Z+10, r25	; 0x0a
    23a0:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    23a2:	8b e3       	ldi	r24, 0x3B	; 59
    23a4:	91 e1       	ldi	r25, 0x11	; 17
    23a6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <button3+0xc>
    23aa:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    23ae:	ee e0       	ldi	r30, 0x0E	; 14
    23b0:	f4 e0       	ldi	r31, 0x04	; 4
    23b2:	8b e2       	ldi	r24, 0x2B	; 43
    23b4:	90 e1       	ldi	r25, 0x10	; 16
    23b6:	96 87       	std	Z+14, r25	; 0x0e
    23b8:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    23ba:	85 e3       	ldi	r24, 0x35	; 53
    23bc:	90 e1       	ldi	r25, 0x10	; 16
    23be:	92 87       	std	Z+10, r25	; 0x0a
    23c0:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    23c2:	87 e5       	ldi	r24, 0x57	; 87
    23c4:	90 e1       	ldi	r25, 0x10	; 16
    23c6:	94 87       	std	Z+12, r25	; 0x0c
    23c8:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    23ca:	ee e4       	ldi	r30, 0x4E	; 78
    23cc:	f4 e0       	ldi	r31, 0x04	; 4
    23ce:	81 e4       	ldi	r24, 0x41	; 65
    23d0:	90 e1       	ldi	r25, 0x10	; 16
    23d2:	96 87       	std	Z+14, r25	; 0x0e
    23d4:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    23d6:	8b e4       	ldi	r24, 0x4B	; 75
    23d8:	90 e1       	ldi	r25, 0x10	; 16
    23da:	92 87       	std	Z+10, r25	; 0x0a
    23dc:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    23de:	81 e7       	ldi	r24, 0x71	; 113
    23e0:	90 e1       	ldi	r25, 0x10	; 16
    23e2:	94 87       	std	Z+12, r25	; 0x0c
    23e4:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    23e6:	8b e5       	ldi	r24, 0x5B	; 91
    23e8:	91 e1       	ldi	r25, 0x11	; 17
    23ea:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <button7+0xc>
    23ee:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    23f2:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    23fc:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
    2406:	08 95       	ret

00002408 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2408:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <state_measure_volt>
	dcmotorpwm_deinit();
    240c:	0e 94 98 04 	call	0x930	; 0x930 <dcmotorpwm_deinit>
	off_button();
    2410:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <off_button>
	error_deinit();
    2414:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2418:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    241c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <system_events+0x1>
    2420:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	0e 94 0c 07 	call	0xe18	; 0xe18 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    242c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2430:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2434:	8e 7f       	andi	r24, 0xFE	; 254
    2436:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    243a:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    243e:	08 95       	ret

00002440 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2440:	0e 94 2e 11 	call	0x225c	; 0x225c <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2444:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2448:	80 ff       	sbrs	r24, 0
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <button4_toggle_system+0x12>
	{
		off_system();
    244c:	0e 94 04 12 	call	0x2408	; 0x2408 <off_system>
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2452:	0e 94 9b 11 	call	0x2336	; 0x2336 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2456:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    245a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    245e:	90 62       	ori	r25, 0x20	; 32
    2460:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2464:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
    2468:	08 95       	ret

0000246a <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    246a:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    246e:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    2472:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    2476:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    247a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <disp_fast_timer.2066>
    247e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <disp_fast_timer.2066+0x1>
    2482:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <disp_fast_timer.2066+0x2>
    2486:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <disp_fast_timer.2066+0x3>
    248a:	84 17       	cp	r24, r20
    248c:	95 07       	cpc	r25, r21
    248e:	a6 07       	cpc	r26, r22
    2490:	b7 07       	cpc	r27, r23
    2492:	08 f0       	brcs	.+2      	; 0x2496 <disp_fast_process+0x2c>
    2494:	9c c0       	rjmp	.+312    	; 0x25ce <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2496:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    249a:	85 ff       	sbrs	r24, 5
    249c:	1d c0       	rjmp	.+58     	; 0x24d8 <disp_fast_process+0x6e>
    249e:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    24a2:	63 36       	cpi	r22, 0x63	; 99
    24a4:	c8 f4       	brcc	.+50     	; 0x24d8 <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    24a6:	6f 5f       	subi	r22, 0xFF	; 255
    24a8:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <servo_vibro_value>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    24b2:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <counter_very_fast_servo_add>
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    24bc:	8f 30       	cpi	r24, 0x0F	; 15
    24be:	60 f0       	brcs	.+24     	; 0x24d8 <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    24c0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    24c4:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    24c8:	8f 7d       	andi	r24, 0xDF	; 223
    24ca:	80 64       	ori	r24, 0x40	; 64
    24cc:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    24d0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
				counter_very_fast_servo_add = 0;
    24d4:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    24d8:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    24dc:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    24e0:	91 ff       	sbrs	r25, 1
    24e2:	1d c0       	rjmp	.+58     	; 0x251e <disp_fast_process+0xb4>
    24e4:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    24e8:	66 23       	and	r22, r22
    24ea:	c9 f0       	breq	.+50     	; 0x251e <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    24ec:	61 50       	subi	r22, 0x01	; 1
    24ee:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <servo_vibro_value>
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    24f8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <counter_very_fast_servo_sub>
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2502:	8f 30       	cpi	r24, 0x0F	; 15
    2504:	60 f0       	brcs	.+24     	; 0x251e <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2506:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    250a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    250e:	9d 7f       	andi	r25, 0xFD	; 253
    2510:	94 60       	ori	r25, 0x04	; 4
    2512:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2516:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
				counter_very_fast_servo_sub = 0;
    251a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    251e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2522:	87 ff       	sbrs	r24, 7
    2524:	1d c0       	rjmp	.+58     	; 0x2560 <disp_fast_process+0xf6>
    2526:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    252a:	63 36       	cpi	r22, 0x63	; 99
    252c:	c8 f4       	brcc	.+50     	; 0x2560 <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    252e:	6f 5f       	subi	r22, 0xFF	; 255
    2530:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <motor_value>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			counter_very_fast_motor_add++;
    253a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <counter_very_fast_motor_add>
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2544:	8f 30       	cpi	r24, 0x0F	; 15
    2546:	60 f0       	brcs	.+24     	; 0x2560 <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2548:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    254c:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2550:	8f 77       	andi	r24, 0x7F	; 127
    2552:	91 60       	ori	r25, 0x01	; 1
    2554:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    2558:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
				counter_very_fast_motor_add = 0;
    255c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2560:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2564:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2568:	93 ff       	sbrs	r25, 3
    256a:	1d c0       	rjmp	.+58     	; 0x25a6 <disp_fast_process+0x13c>
    256c:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    2570:	6b 30       	cpi	r22, 0x0B	; 11
    2572:	c8 f0       	brcs	.+50     	; 0x25a6 <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2574:	61 50       	subi	r22, 0x01	; 1
    2576:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <motor_value>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			counter_very_fast_motor_sub++;
    2580:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <counter_very_fast_motor_sub>
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    258a:	8f 30       	cpi	r24, 0x0F	; 15
    258c:	60 f0       	brcs	.+24     	; 0x25a6 <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    258e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2592:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2596:	97 7f       	andi	r25, 0xF7	; 247
    2598:	90 61       	ori	r25, 0x10	; 16
    259a:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <system_events+0x1>
    259e:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <system_events>
				counter_very_fast_motor_sub = 0;
    25a2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    25a6:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <disp_fast_timer.2066>
    25aa:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <disp_fast_timer.2066+0x1>
    25ae:	a0 91 1a 03 	lds	r26, 0x031A	; 0x80031a <disp_fast_timer.2066+0x2>
    25b2:	b0 91 1b 03 	lds	r27, 0x031B	; 0x80031b <disp_fast_timer.2066+0x3>
    25b6:	80 5b       	subi	r24, 0xB0	; 176
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	af 4f       	sbci	r26, 0xFF	; 255
    25bc:	bf 4f       	sbci	r27, 0xFF	; 255
    25be:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <disp_fast_timer.2066>
    25c2:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <disp_fast_timer.2066+0x1>
    25c6:	a0 93 1a 03 	sts	0x031A, r26	; 0x80031a <disp_fast_timer.2066+0x2>
    25ca:	b0 93 1b 03 	sts	0x031B, r27	; 0x80031b <disp_fast_timer.2066+0x3>
    25ce:	08 95       	ret

000025d0 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    25d0:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <mktime+0x2>
    25d4:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <mktime+0x3>
    25d8:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <mktime+0x4>
    25dc:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <mktime+0x5>
    25e0:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <disp_very_fast_timer>
    25e4:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <disp_very_fast_timer+0x1>
    25e8:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <disp_very_fast_timer+0x2>
    25ec:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <disp_very_fast_timer+0x3>
    25f0:	84 17       	cp	r24, r20
    25f2:	95 07       	cpc	r25, r21
    25f4:	a6 07       	cpc	r26, r22
    25f6:	b7 07       	cpc	r27, r23
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <disp_very_fast_process+0x2c>
    25fa:	51 c0       	rjmp	.+162    	; 0x269e <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    25fc:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    2600:	63 36       	cpi	r22, 0x63	; 99
    2602:	50 f4       	brcc	.+20     	; 0x2618 <disp_very_fast_process+0x48>
    2604:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2608:	86 ff       	sbrs	r24, 6
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    260c:	6f 5f       	subi	r22, 0xFF	; 255
    260e:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <servo_vibro_value>
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2618:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <servo_vibro_value>
    261c:	66 23       	and	r22, r22
    261e:	61 f0       	breq	.+24     	; 0x2638 <disp_very_fast_process+0x68>
    2620:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2624:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2628:	92 ff       	sbrs	r25, 2
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    262c:	61 50       	subi	r22, 0x01	; 1
    262e:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <servo_vibro_value>
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2638:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    263c:	63 36       	cpi	r22, 0x63	; 99
    263e:	60 f4       	brcc	.+24     	; 0x2658 <disp_very_fast_process+0x88>
    2640:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2644:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2648:	90 ff       	sbrs	r25, 0
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    264c:	6f 5f       	subi	r22, 0xFF	; 255
    264e:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <motor_value>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2658:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <motor_value>
    265c:	6b 30       	cpi	r22, 0x0B	; 11
    265e:	60 f0       	brcs	.+24     	; 0x2678 <disp_very_fast_process+0xa8>
    2660:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <system_events>
    2664:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <system_events+0x1>
    2668:	94 ff       	sbrs	r25, 4
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    266c:	61 50       	subi	r22, 0x01	; 1
    266e:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <motor_value>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	0e 94 da 06 	call	0xdb4	; 0xdb4 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2678:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <disp_very_fast_timer>
    267c:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <disp_very_fast_timer+0x1>
    2680:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <disp_very_fast_timer+0x2>
    2684:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <disp_very_fast_timer+0x3>
    2688:	4e 96       	adiw	r24, 0x1e	; 30
    268a:	a1 1d       	adc	r26, r1
    268c:	b1 1d       	adc	r27, r1
    268e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <disp_very_fast_timer>
    2692:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <disp_very_fast_timer+0x1>
    2696:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <disp_very_fast_timer+0x2>
    269a:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <disp_very_fast_timer+0x3>
    269e:	08 95       	ret

000026a0 <system_error>:
}


void system_error(void)
{
	off_button();
    26a0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <off_button>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    26a4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <servo_close>
    26a8:	08 95       	ret

000026aa <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	2f 93       	push	r18
    26b6:	3f 93       	push	r19
    26b8:	4f 93       	push	r20
    26ba:	5f 93       	push	r21
    26bc:	6f 93       	push	r22
    26be:	7f 93       	push	r23
    26c0:	8f 93       	push	r24
    26c2:	9f 93       	push	r25
    26c4:	af 93       	push	r26
    26c6:	bf 93       	push	r27
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
    26cc:	ef eb       	ldi	r30, 0xBF	; 191
    26ce:	f4 e0       	ldi	r31, 0x04	; 4
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	c2 96       	adiw	r24, 0x32	; 50
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	88 3e       	cpi	r24, 0xE8	; 232
    26e0:	93 40       	sbci	r25, 0x03	; 3
    26e2:	88 f0       	brcs	.+34     	; 0x2706 <__vector_10+0x5c>
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	a4 81       	ldd	r26, Z+4	; 0x04
    26ea:	b5 81       	ldd	r27, Z+5	; 0x05
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	a1 1d       	adc	r26, r1
    26f0:	b1 1d       	adc	r27, r1
    26f2:	82 83       	std	Z+2, r24	; 0x02
    26f4:	93 83       	std	Z+3, r25	; 0x03
    26f6:	a4 83       	std	Z+4, r26	; 0x04
    26f8:	b5 83       	std	Z+5, r27	; 0x05
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	88 5e       	subi	r24, 0xE8	; 232
    2700:	93 40       	sbci	r25, 0x03	; 3
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	80 83       	st	Z, r24
    2706:	85 e2       	ldi	r24, 0x25	; 37
    2708:	93 e0       	ldi	r25, 0x03	; 3
    270a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <display_process>
    270e:	ff 91       	pop	r31
    2710:	ef 91       	pop	r30
    2712:	bf 91       	pop	r27
    2714:	af 91       	pop	r26
    2716:	9f 91       	pop	r25
    2718:	8f 91       	pop	r24
    271a:	7f 91       	pop	r23
    271c:	6f 91       	pop	r22
    271e:	5f 91       	pop	r21
    2720:	4f 91       	pop	r20
    2722:	3f 91       	pop	r19
    2724:	2f 91       	pop	r18
    2726:	0f 90       	pop	r0
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	0f 90       	pop	r0
    272c:	1f 90       	pop	r1
    272e:	18 95       	reti

00002730 <timer0_init>:
    2730:	93 b7       	in	r25, 0x33	; 51
    2732:	98 60       	ori	r25, 0x08	; 8
    2734:	93 bf       	out	0x33, r25	; 51
    2736:	6c bf       	out	0x3c, r22	; 60
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	99 f0       	breq	.+38     	; 0x2762 <timer0_init+0x32>
    273c:	28 f4       	brcc	.+10     	; 0x2748 <timer0_init+0x18>
    273e:	88 23       	and	r24, r24
    2740:	41 f0       	breq	.+16     	; 0x2752 <timer0_init+0x22>
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	51 f0       	breq	.+20     	; 0x275a <timer0_init+0x2a>
    2746:	19 c0       	rjmp	.+50     	; 0x277a <timer0_init+0x4a>
    2748:	83 30       	cpi	r24, 0x03	; 3
    274a:	79 f0       	breq	.+30     	; 0x276a <timer0_init+0x3a>
    274c:	84 30       	cpi	r24, 0x04	; 4
    274e:	89 f0       	breq	.+34     	; 0x2772 <timer0_init+0x42>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <timer0_init+0x4a>
    2752:	83 b7       	in	r24, 0x33	; 51
    2754:	81 60       	ori	r24, 0x01	; 1
    2756:	83 bf       	out	0x33, r24	; 51
    2758:	13 c0       	rjmp	.+38     	; 0x2780 <timer0_init+0x50>
    275a:	83 b7       	in	r24, 0x33	; 51
    275c:	82 60       	ori	r24, 0x02	; 2
    275e:	83 bf       	out	0x33, r24	; 51
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <timer0_init+0x50>
    2762:	83 b7       	in	r24, 0x33	; 51
    2764:	83 60       	ori	r24, 0x03	; 3
    2766:	83 bf       	out	0x33, r24	; 51
    2768:	0b c0       	rjmp	.+22     	; 0x2780 <timer0_init+0x50>
    276a:	83 b7       	in	r24, 0x33	; 51
    276c:	84 60       	ori	r24, 0x04	; 4
    276e:	83 bf       	out	0x33, r24	; 51
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <timer0_init+0x50>
    2772:	83 b7       	in	r24, 0x33	; 51
    2774:	85 60       	ori	r24, 0x05	; 5
    2776:	83 bf       	out	0x33, r24	; 51
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <timer0_init+0x50>
    277a:	83 b7       	in	r24, 0x33	; 51
    277c:	81 60       	ori	r24, 0x01	; 1
    277e:	83 bf       	out	0x33, r24	; 51
    2780:	89 b7       	in	r24, 0x39	; 57
    2782:	82 60       	ori	r24, 0x02	; 2
    2784:	89 bf       	out	0x39, r24	; 57
    2786:	08 95       	ret

00002788 <evTime_init>:
    2788:	23 e0       	ldi	r18, 0x03	; 3
    278a:	fc 01       	movw	r30, r24
    278c:	24 83       	std	Z+4, r18	; 0x04
    278e:	10 82       	st	Z, r1
    2790:	11 82       	std	Z+1, r1	; 0x01
    2792:	12 82       	std	Z+2, r1	; 0x02
    2794:	13 82       	std	Z+3, r1	; 0x03
    2796:	08 95       	ret

00002798 <evTime_start>:
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	fc 01       	movw	r30, r24
    27a0:	24 83       	std	Z+4, r18	; 0x04
    27a2:	00 91 c1 04 	lds	r16, 0x04C1	; 0x8004c1 <mktime+0x2>
    27a6:	10 91 c2 04 	lds	r17, 0x04C2	; 0x8004c2 <mktime+0x3>
    27aa:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <mktime+0x4>
    27ae:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <mktime+0x5>
    27b2:	40 0f       	add	r20, r16
    27b4:	51 1f       	adc	r21, r17
    27b6:	62 1f       	adc	r22, r18
    27b8:	73 1f       	adc	r23, r19
    27ba:	40 83       	st	Z, r20
    27bc:	51 83       	std	Z+1, r21	; 0x01
    27be:	62 83       	std	Z+2, r22	; 0x02
    27c0:	73 83       	std	Z+3, r23	; 0x03
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <evTime_check>:

int evTime_check(evTime * evt)
{
    27c8:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    27ca:	84 81       	ldd	r24, Z+4	; 0x04
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	b1 f4       	brne	.+44     	; 0x27fc <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    27d0:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <mktime+0x2>
    27d4:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <mktime+0x3>
    27d8:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <mktime+0x4>
    27dc:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <mktime+0x5>
    27e0:	40 81       	ld	r20, Z
    27e2:	51 81       	ldd	r21, Z+1	; 0x01
    27e4:	62 81       	ldd	r22, Z+2	; 0x02
    27e6:	73 81       	ldd	r23, Z+3	; 0x03
    27e8:	48 17       	cp	r20, r24
    27ea:	59 07       	cpc	r21, r25
    27ec:	6a 07       	cpc	r22, r26
    27ee:	7b 07       	cpc	r23, r27
    27f0:	40 f4       	brcc	.+16     	; 0x2802 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	9f ef       	ldi	r25, 0xFF	; 255
    2800:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2806:	08 95       	ret

00002808 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2808:	21 e0       	ldi	r18, 0x01	; 1
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	fc 01       	movw	r30, r24
    280e:	84 81       	ldd	r24, Z+4	; 0x04
    2810:	83 30       	cpi	r24, 0x03	; 3
    2812:	11 f0       	breq	.+4      	; 0x2818 <evTime_off+0x10>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
}
    2818:	c9 01       	movw	r24, r18
    281a:	08 95       	ret

0000281c <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    281c:	cf 92       	push	r12
    281e:	df 92       	push	r13
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	ec 01       	movw	r28, r24
    282e:	6a 01       	movw	r12, r20
    2830:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	81 11       	cpse	r24, r1
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    283c:	18 82       	st	Y, r1
    283e:	19 82       	std	Y+1, r1	; 0x01
    2840:	1a 82       	std	Y+2, r1	; 0x02
    2842:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2844:	ce 01       	movw	r24, r28
    2846:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <evTime_check>
    284a:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	31 f4       	brne	.+12     	; 0x285c <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2850:	b7 01       	movw	r22, r14
    2852:	a6 01       	movw	r20, r12
    2854:	ce 01       	movw	r24, r28
    2856:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
		return 1;
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    285c:	8c 81       	ldd	r24, Y+4	; 0x04
    285e:	83 30       	cpi	r24, 0x03	; 3
    2860:	41 f4       	brne	.+16     	; 0x2872 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2862:	b7 01       	movw	r22, r14
    2864:	a6 01       	movw	r20, r12
    2866:	ce 01       	movw	r24, r28
    2868:	0e 94 cc 13 	call	0x2798	; 0x2798 <evTime_start>
	}
	return 0;
    286c:	00 e0       	ldi	r16, 0x00	; 0
    286e:	10 e0       	ldi	r17, 0x00	; 0
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <evTime_process_period+0x5a>
    2872:	00 e0       	ldi	r16, 0x00	; 0
    2874:	10 e0       	ldi	r17, 0x00	; 0
}
    2876:	c8 01       	movw	r24, r16
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	08 95       	ret

0000288a <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    288a:	1f 92       	push	r1
    288c:	0f 92       	push	r0
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	0f 92       	push	r0
    2892:	11 24       	eor	r1, r1
    2894:	2f 93       	push	r18
    2896:	3f 93       	push	r19
    2898:	4f 93       	push	r20
    289a:	5f 93       	push	r21
    289c:	8f 93       	push	r24
    289e:	9f 93       	push	r25
    28a0:	ef 93       	push	r30
    28a2:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    28a4:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    28a6:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    28a8:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    28aa:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <UART_RxHead>
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    28b2:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <UART_RxTail>
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	84 17       	cp	r24, r20
    28ba:	95 07       	cpc	r25, r21
    28bc:	39 f0       	breq	.+14     	; 0x28cc <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    28be:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    28c2:	fc 01       	movw	r30, r24
    28c4:	e4 5d       	subi	r30, 0xD4	; 212
    28c6:	fc 4f       	sbci	r31, 0xFC	; 252
    28c8:	30 83       	st	Z, r19
    28ca:	01 c0       	rjmp	.+2      	; 0x28ce <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    28cc:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    28ce:	20 93 27 03 	sts	0x0327, r18	; 0x800327 <UART_LastRxError>
}
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	9f 91       	pop	r25
    28d8:	8f 91       	pop	r24
    28da:	5f 91       	pop	r21
    28dc:	4f 91       	pop	r20
    28de:	3f 91       	pop	r19
    28e0:	2f 91       	pop	r18
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    28ec:	1f 92       	push	r1
    28ee:	0f 92       	push	r0
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	0f 92       	push	r0
    28f4:	11 24       	eor	r1, r1
    28f6:	8f 93       	push	r24
    28f8:	9f 93       	push	r25
    28fa:	ef 93       	push	r30
    28fc:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    28fe:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <UART_TxHead>
    2902:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <UART_TxTail>
    2906:	98 17       	cp	r25, r24
    2908:	71 f0       	breq	.+28     	; 0x2926 <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    290a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <UART_TxTail>
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	8f 77       	andi	r24, 0x7F	; 127
    2914:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    2916:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    291a:	fc 01       	movw	r30, r24
    291c:	e4 5d       	subi	r30, 0xD4	; 212
    291e:	fc 4f       	sbci	r31, 0xFC	; 252
    2920:	80 81       	ld	r24, Z
    2922:	8c b9       	out	0x0c, r24	; 12
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2926:	55 98       	cbi	0x0a, 5	; 10
    }
}
    2928:	ff 91       	pop	r31
    292a:	ef 91       	pop	r30
    292c:	9f 91       	pop	r25
    292e:	8f 91       	pop	r24
    2930:	0f 90       	pop	r0
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	0f 90       	pop	r0
    2936:	1f 90       	pop	r1
    2938:	18 95       	reti

0000293a <__subsf3>:
    293a:	50 58       	subi	r21, 0x80	; 128

0000293c <__addsf3>:
    293c:	bb 27       	eor	r27, r27
    293e:	aa 27       	eor	r26, r26
    2940:	0e 94 b5 14 	call	0x296a	; 0x296a <__addsf3x>
    2944:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__fp_round>
    2948:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fp_pscA>
    294c:	38 f0       	brcs	.+14     	; 0x295c <__addsf3+0x20>
    294e:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__fp_pscB>
    2952:	20 f0       	brcs	.+8      	; 0x295c <__addsf3+0x20>
    2954:	39 f4       	brne	.+14     	; 0x2964 <__addsf3+0x28>
    2956:	9f 3f       	cpi	r25, 0xFF	; 255
    2958:	19 f4       	brne	.+6      	; 0x2960 <__addsf3+0x24>
    295a:	26 f4       	brtc	.+8      	; 0x2964 <__addsf3+0x28>
    295c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_nan>
    2960:	0e f4       	brtc	.+2      	; 0x2964 <__addsf3+0x28>
    2962:	e0 95       	com	r30
    2964:	e7 fb       	bst	r30, 7
    2966:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_inf>

0000296a <__addsf3x>:
    296a:	e9 2f       	mov	r30, r25
    296c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__fp_split3>
    2970:	58 f3       	brcs	.-42     	; 0x2948 <__addsf3+0xc>
    2972:	ba 17       	cp	r27, r26
    2974:	62 07       	cpc	r22, r18
    2976:	73 07       	cpc	r23, r19
    2978:	84 07       	cpc	r24, r20
    297a:	95 07       	cpc	r25, r21
    297c:	20 f0       	brcs	.+8      	; 0x2986 <__addsf3x+0x1c>
    297e:	79 f4       	brne	.+30     	; 0x299e <__addsf3x+0x34>
    2980:	a6 f5       	brtc	.+104    	; 0x29ea <__addsf3x+0x80>
    2982:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__fp_zero>
    2986:	0e f4       	brtc	.+2      	; 0x298a <__addsf3x+0x20>
    2988:	e0 95       	com	r30
    298a:	0b 2e       	mov	r0, r27
    298c:	ba 2f       	mov	r27, r26
    298e:	a0 2d       	mov	r26, r0
    2990:	0b 01       	movw	r0, r22
    2992:	b9 01       	movw	r22, r18
    2994:	90 01       	movw	r18, r0
    2996:	0c 01       	movw	r0, r24
    2998:	ca 01       	movw	r24, r20
    299a:	a0 01       	movw	r20, r0
    299c:	11 24       	eor	r1, r1
    299e:	ff 27       	eor	r31, r31
    29a0:	59 1b       	sub	r21, r25
    29a2:	99 f0       	breq	.+38     	; 0x29ca <__addsf3x+0x60>
    29a4:	59 3f       	cpi	r21, 0xF9	; 249
    29a6:	50 f4       	brcc	.+20     	; 0x29bc <__addsf3x+0x52>
    29a8:	50 3e       	cpi	r21, 0xE0	; 224
    29aa:	68 f1       	brcs	.+90     	; 0x2a06 <__addsf3x+0x9c>
    29ac:	1a 16       	cp	r1, r26
    29ae:	f0 40       	sbci	r31, 0x00	; 0
    29b0:	a2 2f       	mov	r26, r18
    29b2:	23 2f       	mov	r18, r19
    29b4:	34 2f       	mov	r19, r20
    29b6:	44 27       	eor	r20, r20
    29b8:	58 5f       	subi	r21, 0xF8	; 248
    29ba:	f3 cf       	rjmp	.-26     	; 0x29a2 <__addsf3x+0x38>
    29bc:	46 95       	lsr	r20
    29be:	37 95       	ror	r19
    29c0:	27 95       	ror	r18
    29c2:	a7 95       	ror	r26
    29c4:	f0 40       	sbci	r31, 0x00	; 0
    29c6:	53 95       	inc	r21
    29c8:	c9 f7       	brne	.-14     	; 0x29bc <__addsf3x+0x52>
    29ca:	7e f4       	brtc	.+30     	; 0x29ea <__addsf3x+0x80>
    29cc:	1f 16       	cp	r1, r31
    29ce:	ba 0b       	sbc	r27, r26
    29d0:	62 0b       	sbc	r22, r18
    29d2:	73 0b       	sbc	r23, r19
    29d4:	84 0b       	sbc	r24, r20
    29d6:	ba f0       	brmi	.+46     	; 0x2a06 <__addsf3x+0x9c>
    29d8:	91 50       	subi	r25, 0x01	; 1
    29da:	a1 f0       	breq	.+40     	; 0x2a04 <__addsf3x+0x9a>
    29dc:	ff 0f       	add	r31, r31
    29de:	bb 1f       	adc	r27, r27
    29e0:	66 1f       	adc	r22, r22
    29e2:	77 1f       	adc	r23, r23
    29e4:	88 1f       	adc	r24, r24
    29e6:	c2 f7       	brpl	.-16     	; 0x29d8 <__addsf3x+0x6e>
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <__addsf3x+0x9c>
    29ea:	ba 0f       	add	r27, r26
    29ec:	62 1f       	adc	r22, r18
    29ee:	73 1f       	adc	r23, r19
    29f0:	84 1f       	adc	r24, r20
    29f2:	48 f4       	brcc	.+18     	; 0x2a06 <__addsf3x+0x9c>
    29f4:	87 95       	ror	r24
    29f6:	77 95       	ror	r23
    29f8:	67 95       	ror	r22
    29fa:	b7 95       	ror	r27
    29fc:	f7 95       	ror	r31
    29fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2a00:	08 f0       	brcs	.+2      	; 0x2a04 <__addsf3x+0x9a>
    2a02:	b0 cf       	rjmp	.-160    	; 0x2964 <__addsf3+0x28>
    2a04:	93 95       	inc	r25
    2a06:	88 0f       	add	r24, r24
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <__addsf3x+0xa2>
    2a0a:	99 27       	eor	r25, r25
    2a0c:	ee 0f       	add	r30, r30
    2a0e:	97 95       	ror	r25
    2a10:	87 95       	ror	r24
    2a12:	08 95       	ret

00002a14 <__cmpsf2>:
    2a14:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__fp_cmp>
    2a18:	08 f4       	brcc	.+2      	; 0x2a1c <__cmpsf2+0x8>
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	08 95       	ret

00002a1e <__divsf3>:
    2a1e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__divsf3x>
    2a22:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__fp_round>
    2a26:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__fp_pscB>
    2a2a:	58 f0       	brcs	.+22     	; 0x2a42 <__divsf3+0x24>
    2a2c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fp_pscA>
    2a30:	40 f0       	brcs	.+16     	; 0x2a42 <__divsf3+0x24>
    2a32:	29 f4       	brne	.+10     	; 0x2a3e <__divsf3+0x20>
    2a34:	5f 3f       	cpi	r21, 0xFF	; 255
    2a36:	29 f0       	breq	.+10     	; 0x2a42 <__divsf3+0x24>
    2a38:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_inf>
    2a3c:	51 11       	cpse	r21, r1
    2a3e:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__fp_szero>
    2a42:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_nan>

00002a46 <__divsf3x>:
    2a46:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__fp_split3>
    2a4a:	68 f3       	brcs	.-38     	; 0x2a26 <__divsf3+0x8>

00002a4c <__divsf3_pse>:
    2a4c:	99 23       	and	r25, r25
    2a4e:	b1 f3       	breq	.-20     	; 0x2a3c <__divsf3+0x1e>
    2a50:	55 23       	and	r21, r21
    2a52:	91 f3       	breq	.-28     	; 0x2a38 <__divsf3+0x1a>
    2a54:	95 1b       	sub	r25, r21
    2a56:	55 0b       	sbc	r21, r21
    2a58:	bb 27       	eor	r27, r27
    2a5a:	aa 27       	eor	r26, r26
    2a5c:	62 17       	cp	r22, r18
    2a5e:	73 07       	cpc	r23, r19
    2a60:	84 07       	cpc	r24, r20
    2a62:	38 f0       	brcs	.+14     	; 0x2a72 <__divsf3_pse+0x26>
    2a64:	9f 5f       	subi	r25, 0xFF	; 255
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	22 0f       	add	r18, r18
    2a6a:	33 1f       	adc	r19, r19
    2a6c:	44 1f       	adc	r20, r20
    2a6e:	aa 1f       	adc	r26, r26
    2a70:	a9 f3       	breq	.-22     	; 0x2a5c <__divsf3_pse+0x10>
    2a72:	35 d0       	rcall	.+106    	; 0x2ade <__divsf3_pse+0x92>
    2a74:	0e 2e       	mov	r0, r30
    2a76:	3a f0       	brmi	.+14     	; 0x2a86 <__divsf3_pse+0x3a>
    2a78:	e0 e8       	ldi	r30, 0x80	; 128
    2a7a:	32 d0       	rcall	.+100    	; 0x2ae0 <__divsf3_pse+0x94>
    2a7c:	91 50       	subi	r25, 0x01	; 1
    2a7e:	50 40       	sbci	r21, 0x00	; 0
    2a80:	e6 95       	lsr	r30
    2a82:	00 1c       	adc	r0, r0
    2a84:	ca f7       	brpl	.-14     	; 0x2a78 <__divsf3_pse+0x2c>
    2a86:	2b d0       	rcall	.+86     	; 0x2ade <__divsf3_pse+0x92>
    2a88:	fe 2f       	mov	r31, r30
    2a8a:	29 d0       	rcall	.+82     	; 0x2ade <__divsf3_pse+0x92>
    2a8c:	66 0f       	add	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	88 1f       	adc	r24, r24
    2a92:	bb 1f       	adc	r27, r27
    2a94:	26 17       	cp	r18, r22
    2a96:	37 07       	cpc	r19, r23
    2a98:	48 07       	cpc	r20, r24
    2a9a:	ab 07       	cpc	r26, r27
    2a9c:	b0 e8       	ldi	r27, 0x80	; 128
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <__divsf3_pse+0x56>
    2aa0:	bb 0b       	sbc	r27, r27
    2aa2:	80 2d       	mov	r24, r0
    2aa4:	bf 01       	movw	r22, r30
    2aa6:	ff 27       	eor	r31, r31
    2aa8:	93 58       	subi	r25, 0x83	; 131
    2aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    2aac:	3a f0       	brmi	.+14     	; 0x2abc <__divsf3_pse+0x70>
    2aae:	9e 3f       	cpi	r25, 0xFE	; 254
    2ab0:	51 05       	cpc	r21, r1
    2ab2:	78 f0       	brcs	.+30     	; 0x2ad2 <__divsf3_pse+0x86>
    2ab4:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_inf>
    2ab8:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__fp_szero>
    2abc:	5f 3f       	cpi	r21, 0xFF	; 255
    2abe:	e4 f3       	brlt	.-8      	; 0x2ab8 <__divsf3_pse+0x6c>
    2ac0:	98 3e       	cpi	r25, 0xE8	; 232
    2ac2:	d4 f3       	brlt	.-12     	; 0x2ab8 <__divsf3_pse+0x6c>
    2ac4:	86 95       	lsr	r24
    2ac6:	77 95       	ror	r23
    2ac8:	67 95       	ror	r22
    2aca:	b7 95       	ror	r27
    2acc:	f7 95       	ror	r31
    2ace:	9f 5f       	subi	r25, 0xFF	; 255
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <__divsf3_pse+0x78>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	91 1d       	adc	r25, r1
    2ad6:	96 95       	lsr	r25
    2ad8:	87 95       	ror	r24
    2ada:	97 f9       	bld	r25, 7
    2adc:	08 95       	ret
    2ade:	e1 e0       	ldi	r30, 0x01	; 1
    2ae0:	66 0f       	add	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	62 17       	cp	r22, r18
    2aea:	73 07       	cpc	r23, r19
    2aec:	84 07       	cpc	r24, r20
    2aee:	ba 07       	cpc	r27, r26
    2af0:	20 f0       	brcs	.+8      	; 0x2afa <__divsf3_pse+0xae>
    2af2:	62 1b       	sub	r22, r18
    2af4:	73 0b       	sbc	r23, r19
    2af6:	84 0b       	sbc	r24, r20
    2af8:	ba 0b       	sbc	r27, r26
    2afa:	ee 1f       	adc	r30, r30
    2afc:	88 f7       	brcc	.-30     	; 0x2ae0 <__divsf3_pse+0x94>
    2afe:	e0 95       	com	r30
    2b00:	08 95       	ret

00002b02 <__fixsfsi>:
    2b02:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fixunssfsi>
    2b06:	68 94       	set
    2b08:	b1 11       	cpse	r27, r1
    2b0a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__fp_szero>
    2b0e:	08 95       	ret

00002b10 <__fixunssfsi>:
    2b10:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__fp_splitA>
    2b14:	88 f0       	brcs	.+34     	; 0x2b38 <__fixunssfsi+0x28>
    2b16:	9f 57       	subi	r25, 0x7F	; 127
    2b18:	98 f0       	brcs	.+38     	; 0x2b40 <__fixunssfsi+0x30>
    2b1a:	b9 2f       	mov	r27, r25
    2b1c:	99 27       	eor	r25, r25
    2b1e:	b7 51       	subi	r27, 0x17	; 23
    2b20:	b0 f0       	brcs	.+44     	; 0x2b4e <__fixunssfsi+0x3e>
    2b22:	e1 f0       	breq	.+56     	; 0x2b5c <__fixunssfsi+0x4c>
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	1a f0       	brmi	.+6      	; 0x2b34 <__fixunssfsi+0x24>
    2b2e:	ba 95       	dec	r27
    2b30:	c9 f7       	brne	.-14     	; 0x2b24 <__fixunssfsi+0x14>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <__fixunssfsi+0x4c>
    2b34:	b1 30       	cpi	r27, 0x01	; 1
    2b36:	91 f0       	breq	.+36     	; 0x2b5c <__fixunssfsi+0x4c>
    2b38:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__fp_zero>
    2b3c:	b1 e0       	ldi	r27, 0x01	; 1
    2b3e:	08 95       	ret
    2b40:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__fp_zero>
    2b44:	67 2f       	mov	r22, r23
    2b46:	78 2f       	mov	r23, r24
    2b48:	88 27       	eor	r24, r24
    2b4a:	b8 5f       	subi	r27, 0xF8	; 248
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <__fixunssfsi+0x4c>
    2b4e:	b9 3f       	cpi	r27, 0xF9	; 249
    2b50:	cc f3       	brlt	.-14     	; 0x2b44 <__fixunssfsi+0x34>
    2b52:	86 95       	lsr	r24
    2b54:	77 95       	ror	r23
    2b56:	67 95       	ror	r22
    2b58:	b3 95       	inc	r27
    2b5a:	d9 f7       	brne	.-10     	; 0x2b52 <__fixunssfsi+0x42>
    2b5c:	3e f4       	brtc	.+14     	; 0x2b6c <__fixunssfsi+0x5c>
    2b5e:	90 95       	com	r25
    2b60:	80 95       	com	r24
    2b62:	70 95       	com	r23
    2b64:	61 95       	neg	r22
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6c:	08 95       	ret

00002b6e <__floatunsisf>:
    2b6e:	e8 94       	clt
    2b70:	09 c0       	rjmp	.+18     	; 0x2b84 <__floatsisf+0x12>

00002b72 <__floatsisf>:
    2b72:	97 fb       	bst	r25, 7
    2b74:	3e f4       	brtc	.+14     	; 0x2b84 <__floatsisf+0x12>
    2b76:	90 95       	com	r25
    2b78:	80 95       	com	r24
    2b7a:	70 95       	com	r23
    2b7c:	61 95       	neg	r22
    2b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b80:	8f 4f       	sbci	r24, 0xFF	; 255
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	99 23       	and	r25, r25
    2b86:	a9 f0       	breq	.+42     	; 0x2bb2 <__floatsisf+0x40>
    2b88:	f9 2f       	mov	r31, r25
    2b8a:	96 e9       	ldi	r25, 0x96	; 150
    2b8c:	bb 27       	eor	r27, r27
    2b8e:	93 95       	inc	r25
    2b90:	f6 95       	lsr	r31
    2b92:	87 95       	ror	r24
    2b94:	77 95       	ror	r23
    2b96:	67 95       	ror	r22
    2b98:	b7 95       	ror	r27
    2b9a:	f1 11       	cpse	r31, r1
    2b9c:	f8 cf       	rjmp	.-16     	; 0x2b8e <__floatsisf+0x1c>
    2b9e:	fa f4       	brpl	.+62     	; 0x2bde <__floatsisf+0x6c>
    2ba0:	bb 0f       	add	r27, r27
    2ba2:	11 f4       	brne	.+4      	; 0x2ba8 <__floatsisf+0x36>
    2ba4:	60 ff       	sbrs	r22, 0
    2ba6:	1b c0       	rjmp	.+54     	; 0x2bde <__floatsisf+0x6c>
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	8f 4f       	sbci	r24, 0xFF	; 255
    2bae:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb0:	16 c0       	rjmp	.+44     	; 0x2bde <__floatsisf+0x6c>
    2bb2:	88 23       	and	r24, r24
    2bb4:	11 f0       	breq	.+4      	; 0x2bba <__floatsisf+0x48>
    2bb6:	96 e9       	ldi	r25, 0x96	; 150
    2bb8:	11 c0       	rjmp	.+34     	; 0x2bdc <__floatsisf+0x6a>
    2bba:	77 23       	and	r23, r23
    2bbc:	21 f0       	breq	.+8      	; 0x2bc6 <__floatsisf+0x54>
    2bbe:	9e e8       	ldi	r25, 0x8E	; 142
    2bc0:	87 2f       	mov	r24, r23
    2bc2:	76 2f       	mov	r23, r22
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <__floatsisf+0x5e>
    2bc6:	66 23       	and	r22, r22
    2bc8:	71 f0       	breq	.+28     	; 0x2be6 <__floatsisf+0x74>
    2bca:	96 e8       	ldi	r25, 0x86	; 134
    2bcc:	86 2f       	mov	r24, r22
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	2a f0       	brmi	.+10     	; 0x2bde <__floatsisf+0x6c>
    2bd4:	9a 95       	dec	r25
    2bd6:	66 0f       	add	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 1f       	adc	r24, r24
    2bdc:	da f7       	brpl	.-10     	; 0x2bd4 <__floatsisf+0x62>
    2bde:	88 0f       	add	r24, r24
    2be0:	96 95       	lsr	r25
    2be2:	87 95       	ror	r24
    2be4:	97 f9       	bld	r25, 7
    2be6:	08 95       	ret

00002be8 <__fp_cmp>:
    2be8:	99 0f       	add	r25, r25
    2bea:	00 08       	sbc	r0, r0
    2bec:	55 0f       	add	r21, r21
    2bee:	aa 0b       	sbc	r26, r26
    2bf0:	e0 e8       	ldi	r30, 0x80	; 128
    2bf2:	fe ef       	ldi	r31, 0xFE	; 254
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	e8 07       	cpc	r30, r24
    2bfa:	f9 07       	cpc	r31, r25
    2bfc:	c0 f0       	brcs	.+48     	; 0x2c2e <__fp_cmp+0x46>
    2bfe:	12 16       	cp	r1, r18
    2c00:	13 06       	cpc	r1, r19
    2c02:	e4 07       	cpc	r30, r20
    2c04:	f5 07       	cpc	r31, r21
    2c06:	98 f0       	brcs	.+38     	; 0x2c2e <__fp_cmp+0x46>
    2c08:	62 1b       	sub	r22, r18
    2c0a:	73 0b       	sbc	r23, r19
    2c0c:	84 0b       	sbc	r24, r20
    2c0e:	95 0b       	sbc	r25, r21
    2c10:	39 f4       	brne	.+14     	; 0x2c20 <__fp_cmp+0x38>
    2c12:	0a 26       	eor	r0, r26
    2c14:	61 f0       	breq	.+24     	; 0x2c2e <__fp_cmp+0x46>
    2c16:	23 2b       	or	r18, r19
    2c18:	24 2b       	or	r18, r20
    2c1a:	25 2b       	or	r18, r21
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <__fp_cmp+0x3e>
    2c1e:	08 95       	ret
    2c20:	0a 26       	eor	r0, r26
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <__fp_cmp+0x3e>
    2c24:	a1 40       	sbci	r26, 0x01	; 1
    2c26:	a6 95       	lsr	r26
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	81 1d       	adc	r24, r1
    2c2c:	81 1d       	adc	r24, r1
    2c2e:	08 95       	ret

00002c30 <__fp_inf>:
    2c30:	97 f9       	bld	r25, 7
    2c32:	9f 67       	ori	r25, 0x7F	; 127
    2c34:	80 e8       	ldi	r24, 0x80	; 128
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	08 95       	ret

00002c3c <__fp_nan>:
    2c3c:	9f ef       	ldi	r25, 0xFF	; 255
    2c3e:	80 ec       	ldi	r24, 0xC0	; 192
    2c40:	08 95       	ret

00002c42 <__fp_pscA>:
    2c42:	00 24       	eor	r0, r0
    2c44:	0a 94       	dec	r0
    2c46:	16 16       	cp	r1, r22
    2c48:	17 06       	cpc	r1, r23
    2c4a:	18 06       	cpc	r1, r24
    2c4c:	09 06       	cpc	r0, r25
    2c4e:	08 95       	ret

00002c50 <__fp_pscB>:
    2c50:	00 24       	eor	r0, r0
    2c52:	0a 94       	dec	r0
    2c54:	12 16       	cp	r1, r18
    2c56:	13 06       	cpc	r1, r19
    2c58:	14 06       	cpc	r1, r20
    2c5a:	05 06       	cpc	r0, r21
    2c5c:	08 95       	ret

00002c5e <__fp_round>:
    2c5e:	09 2e       	mov	r0, r25
    2c60:	03 94       	inc	r0
    2c62:	00 0c       	add	r0, r0
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <__fp_round+0xc>
    2c66:	88 23       	and	r24, r24
    2c68:	52 f0       	brmi	.+20     	; 0x2c7e <__fp_round+0x20>
    2c6a:	bb 0f       	add	r27, r27
    2c6c:	40 f4       	brcc	.+16     	; 0x2c7e <__fp_round+0x20>
    2c6e:	bf 2b       	or	r27, r31
    2c70:	11 f4       	brne	.+4      	; 0x2c76 <__fp_round+0x18>
    2c72:	60 ff       	sbrs	r22, 0
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <__fp_round+0x20>
    2c76:	6f 5f       	subi	r22, 0xFF	; 255
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	08 95       	ret

00002c80 <__fp_split3>:
    2c80:	57 fd       	sbrc	r21, 7
    2c82:	90 58       	subi	r25, 0x80	; 128
    2c84:	44 0f       	add	r20, r20
    2c86:	55 1f       	adc	r21, r21
    2c88:	59 f0       	breq	.+22     	; 0x2ca0 <__fp_splitA+0x10>
    2c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c8c:	71 f0       	breq	.+28     	; 0x2caa <__fp_splitA+0x1a>
    2c8e:	47 95       	ror	r20

00002c90 <__fp_splitA>:
    2c90:	88 0f       	add	r24, r24
    2c92:	97 fb       	bst	r25, 7
    2c94:	99 1f       	adc	r25, r25
    2c96:	61 f0       	breq	.+24     	; 0x2cb0 <__fp_splitA+0x20>
    2c98:	9f 3f       	cpi	r25, 0xFF	; 255
    2c9a:	79 f0       	breq	.+30     	; 0x2cba <__fp_splitA+0x2a>
    2c9c:	87 95       	ror	r24
    2c9e:	08 95       	ret
    2ca0:	12 16       	cp	r1, r18
    2ca2:	13 06       	cpc	r1, r19
    2ca4:	14 06       	cpc	r1, r20
    2ca6:	55 1f       	adc	r21, r21
    2ca8:	f2 cf       	rjmp	.-28     	; 0x2c8e <__fp_split3+0xe>
    2caa:	46 95       	lsr	r20
    2cac:	f1 df       	rcall	.-30     	; 0x2c90 <__fp_splitA>
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <__fp_splitA+0x30>
    2cb0:	16 16       	cp	r1, r22
    2cb2:	17 06       	cpc	r1, r23
    2cb4:	18 06       	cpc	r1, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	f1 cf       	rjmp	.-30     	; 0x2c9c <__fp_splitA+0xc>
    2cba:	86 95       	lsr	r24
    2cbc:	71 05       	cpc	r23, r1
    2cbe:	61 05       	cpc	r22, r1
    2cc0:	08 94       	sec
    2cc2:	08 95       	ret

00002cc4 <__fp_zero>:
    2cc4:	e8 94       	clt

00002cc6 <__fp_szero>:
    2cc6:	bb 27       	eor	r27, r27
    2cc8:	66 27       	eor	r22, r22
    2cca:	77 27       	eor	r23, r23
    2ccc:	cb 01       	movw	r24, r22
    2cce:	97 f9       	bld	r25, 7
    2cd0:	08 95       	ret

00002cd2 <__mulsf3>:
    2cd2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__mulsf3x>
    2cd6:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__fp_round>
    2cda:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fp_pscA>
    2cde:	38 f0       	brcs	.+14     	; 0x2cee <__mulsf3+0x1c>
    2ce0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__fp_pscB>
    2ce4:	20 f0       	brcs	.+8      	; 0x2cee <__mulsf3+0x1c>
    2ce6:	95 23       	and	r25, r21
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <__mulsf3+0x1c>
    2cea:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_inf>
    2cee:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_nan>
    2cf2:	11 24       	eor	r1, r1
    2cf4:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__fp_szero>

00002cf8 <__mulsf3x>:
    2cf8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__fp_split3>
    2cfc:	70 f3       	brcs	.-36     	; 0x2cda <__mulsf3+0x8>

00002cfe <__mulsf3_pse>:
    2cfe:	95 9f       	mul	r25, r21
    2d00:	c1 f3       	breq	.-16     	; 0x2cf2 <__mulsf3+0x20>
    2d02:	95 0f       	add	r25, r21
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	55 1f       	adc	r21, r21
    2d08:	62 9f       	mul	r22, r18
    2d0a:	f0 01       	movw	r30, r0
    2d0c:	72 9f       	mul	r23, r18
    2d0e:	bb 27       	eor	r27, r27
    2d10:	f0 0d       	add	r31, r0
    2d12:	b1 1d       	adc	r27, r1
    2d14:	63 9f       	mul	r22, r19
    2d16:	aa 27       	eor	r26, r26
    2d18:	f0 0d       	add	r31, r0
    2d1a:	b1 1d       	adc	r27, r1
    2d1c:	aa 1f       	adc	r26, r26
    2d1e:	64 9f       	mul	r22, r20
    2d20:	66 27       	eor	r22, r22
    2d22:	b0 0d       	add	r27, r0
    2d24:	a1 1d       	adc	r26, r1
    2d26:	66 1f       	adc	r22, r22
    2d28:	82 9f       	mul	r24, r18
    2d2a:	22 27       	eor	r18, r18
    2d2c:	b0 0d       	add	r27, r0
    2d2e:	a1 1d       	adc	r26, r1
    2d30:	62 1f       	adc	r22, r18
    2d32:	73 9f       	mul	r23, r19
    2d34:	b0 0d       	add	r27, r0
    2d36:	a1 1d       	adc	r26, r1
    2d38:	62 1f       	adc	r22, r18
    2d3a:	83 9f       	mul	r24, r19
    2d3c:	a0 0d       	add	r26, r0
    2d3e:	61 1d       	adc	r22, r1
    2d40:	22 1f       	adc	r18, r18
    2d42:	74 9f       	mul	r23, r20
    2d44:	33 27       	eor	r19, r19
    2d46:	a0 0d       	add	r26, r0
    2d48:	61 1d       	adc	r22, r1
    2d4a:	23 1f       	adc	r18, r19
    2d4c:	84 9f       	mul	r24, r20
    2d4e:	60 0d       	add	r22, r0
    2d50:	21 1d       	adc	r18, r1
    2d52:	82 2f       	mov	r24, r18
    2d54:	76 2f       	mov	r23, r22
    2d56:	6a 2f       	mov	r22, r26
    2d58:	11 24       	eor	r1, r1
    2d5a:	9f 57       	subi	r25, 0x7F	; 127
    2d5c:	50 40       	sbci	r21, 0x00	; 0
    2d5e:	9a f0       	brmi	.+38     	; 0x2d86 <__mulsf3_pse+0x88>
    2d60:	f1 f0       	breq	.+60     	; 0x2d9e <__mulsf3_pse+0xa0>
    2d62:	88 23       	and	r24, r24
    2d64:	4a f0       	brmi	.+18     	; 0x2d78 <__mulsf3_pse+0x7a>
    2d66:	ee 0f       	add	r30, r30
    2d68:	ff 1f       	adc	r31, r31
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	66 1f       	adc	r22, r22
    2d6e:	77 1f       	adc	r23, r23
    2d70:	88 1f       	adc	r24, r24
    2d72:	91 50       	subi	r25, 0x01	; 1
    2d74:	50 40       	sbci	r21, 0x00	; 0
    2d76:	a9 f7       	brne	.-22     	; 0x2d62 <__mulsf3_pse+0x64>
    2d78:	9e 3f       	cpi	r25, 0xFE	; 254
    2d7a:	51 05       	cpc	r21, r1
    2d7c:	80 f0       	brcs	.+32     	; 0x2d9e <__mulsf3_pse+0xa0>
    2d7e:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_inf>
    2d82:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__fp_szero>
    2d86:	5f 3f       	cpi	r21, 0xFF	; 255
    2d88:	e4 f3       	brlt	.-8      	; 0x2d82 <__mulsf3_pse+0x84>
    2d8a:	98 3e       	cpi	r25, 0xE8	; 232
    2d8c:	d4 f3       	brlt	.-12     	; 0x2d82 <__mulsf3_pse+0x84>
    2d8e:	86 95       	lsr	r24
    2d90:	77 95       	ror	r23
    2d92:	67 95       	ror	r22
    2d94:	b7 95       	ror	r27
    2d96:	f7 95       	ror	r31
    2d98:	e7 95       	ror	r30
    2d9a:	9f 5f       	subi	r25, 0xFF	; 255
    2d9c:	c1 f7       	brne	.-16     	; 0x2d8e <__mulsf3_pse+0x90>
    2d9e:	fe 2b       	or	r31, r30
    2da0:	88 0f       	add	r24, r24
    2da2:	91 1d       	adc	r25, r1
    2da4:	96 95       	lsr	r25
    2da6:	87 95       	ror	r24
    2da8:	97 f9       	bld	r25, 7
    2daa:	08 95       	ret

00002dac <__divmodhi4>:
    2dac:	97 fb       	bst	r25, 7
    2dae:	07 2e       	mov	r0, r23
    2db0:	16 f4       	brtc	.+4      	; 0x2db6 <__divmodhi4+0xa>
    2db2:	00 94       	com	r0
    2db4:	07 d0       	rcall	.+14     	; 0x2dc4 <__divmodhi4_neg1>
    2db6:	77 fd       	sbrc	r23, 7
    2db8:	09 d0       	rcall	.+18     	; 0x2dcc <__divmodhi4_neg2>
    2dba:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__udivmodhi4>
    2dbe:	07 fc       	sbrc	r0, 7
    2dc0:	05 d0       	rcall	.+10     	; 0x2dcc <__divmodhi4_neg2>
    2dc2:	3e f4       	brtc	.+14     	; 0x2dd2 <__divmodhi4_exit>

00002dc4 <__divmodhi4_neg1>:
    2dc4:	90 95       	com	r25
    2dc6:	81 95       	neg	r24
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	08 95       	ret

00002dcc <__divmodhi4_neg2>:
    2dcc:	70 95       	com	r23
    2dce:	61 95       	neg	r22
    2dd0:	7f 4f       	sbci	r23, 0xFF	; 255

00002dd2 <__divmodhi4_exit>:
    2dd2:	08 95       	ret

00002dd4 <__tablejump2__>:
    2dd4:	ee 0f       	add	r30, r30
    2dd6:	ff 1f       	adc	r31, r31
    2dd8:	05 90       	lpm	r0, Z+
    2dda:	f4 91       	lpm	r31, Z
    2ddc:	e0 2d       	mov	r30, r0
    2dde:	09 94       	ijmp

00002de0 <__umulhisi3>:
    2de0:	a2 9f       	mul	r26, r18
    2de2:	b0 01       	movw	r22, r0
    2de4:	b3 9f       	mul	r27, r19
    2de6:	c0 01       	movw	r24, r0
    2de8:	a3 9f       	mul	r26, r19
    2dea:	70 0d       	add	r23, r0
    2dec:	81 1d       	adc	r24, r1
    2dee:	11 24       	eor	r1, r1
    2df0:	91 1d       	adc	r25, r1
    2df2:	b2 9f       	mul	r27, r18
    2df4:	70 0d       	add	r23, r0
    2df6:	81 1d       	adc	r24, r1
    2df8:	11 24       	eor	r1, r1
    2dfa:	91 1d       	adc	r25, r1
    2dfc:	08 95       	ret

00002dfe <__udivmodhi4>:
    2dfe:	aa 1b       	sub	r26, r26
    2e00:	bb 1b       	sub	r27, r27
    2e02:	51 e1       	ldi	r21, 0x11	; 17
    2e04:	07 c0       	rjmp	.+14     	; 0x2e14 <__udivmodhi4_ep>

00002e06 <__udivmodhi4_loop>:
    2e06:	aa 1f       	adc	r26, r26
    2e08:	bb 1f       	adc	r27, r27
    2e0a:	a6 17       	cp	r26, r22
    2e0c:	b7 07       	cpc	r27, r23
    2e0e:	10 f0       	brcs	.+4      	; 0x2e14 <__udivmodhi4_ep>
    2e10:	a6 1b       	sub	r26, r22
    2e12:	b7 0b       	sbc	r27, r23

00002e14 <__udivmodhi4_ep>:
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	5a 95       	dec	r21
    2e1a:	a9 f7       	brne	.-22     	; 0x2e06 <__udivmodhi4_loop>
    2e1c:	80 95       	com	r24
    2e1e:	90 95       	com	r25
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	08 95       	ret

00002e26 <vsprintf>:
    2e26:	ae e0       	ldi	r26, 0x0E	; 14
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e9 e1       	ldi	r30, 0x19	; 25
    2e2c:	f7 e1       	ldi	r31, 0x17	; 23
    2e2e:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__prologue_saves__+0x1c>
    2e32:	8c 01       	movw	r16, r24
    2e34:	86 e0       	ldi	r24, 0x06	; 6
    2e36:	8c 83       	std	Y+4, r24	; 0x04
    2e38:	1a 83       	std	Y+2, r17	; 0x02
    2e3a:	09 83       	std	Y+1, r16	; 0x01
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	9f e7       	ldi	r25, 0x7F	; 127
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	ce 01       	movw	r24, r28
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <vfprintf>
    2e4c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e4e:	f8 85       	ldd	r31, Y+8	; 0x08
    2e50:	e0 0f       	add	r30, r16
    2e52:	f1 1f       	adc	r31, r17
    2e54:	10 82       	st	Z, r1
    2e56:	2e 96       	adiw	r28, 0x0e	; 14
    2e58:	e4 e0       	ldi	r30, 0x04	; 4
    2e5a:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__epilogue_restores__+0x1c>

00002e5e <vfprintf>:
    2e5e:	ab e0       	ldi	r26, 0x0B	; 11
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e5 e3       	ldi	r30, 0x35	; 53
    2e64:	f7 e1       	ldi	r31, 0x17	; 23
    2e66:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__prologue_saves__>
    2e6a:	6c 01       	movw	r12, r24
    2e6c:	7b 01       	movw	r14, r22
    2e6e:	8a 01       	movw	r16, r20
    2e70:	fc 01       	movw	r30, r24
    2e72:	17 82       	std	Z+7, r1	; 0x07
    2e74:	16 82       	std	Z+6, r1	; 0x06
    2e76:	83 81       	ldd	r24, Z+3	; 0x03
    2e78:	81 ff       	sbrs	r24, 1
    2e7a:	cc c1       	rjmp	.+920    	; 0x3214 <vfprintf+0x3b6>
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	01 96       	adiw	r24, 0x01	; 1
    2e80:	3c 01       	movw	r6, r24
    2e82:	f6 01       	movw	r30, r12
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	f7 01       	movw	r30, r14
    2e88:	93 fd       	sbrc	r25, 3
    2e8a:	85 91       	lpm	r24, Z+
    2e8c:	93 ff       	sbrs	r25, 3
    2e8e:	81 91       	ld	r24, Z+
    2e90:	7f 01       	movw	r14, r30
    2e92:	88 23       	and	r24, r24
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <vfprintf+0x3a>
    2e96:	ba c1       	rjmp	.+884    	; 0x320c <vfprintf+0x3ae>
    2e98:	85 32       	cpi	r24, 0x25	; 37
    2e9a:	39 f4       	brne	.+14     	; 0x2eaa <vfprintf+0x4c>
    2e9c:	93 fd       	sbrc	r25, 3
    2e9e:	85 91       	lpm	r24, Z+
    2ea0:	93 ff       	sbrs	r25, 3
    2ea2:	81 91       	ld	r24, Z+
    2ea4:	7f 01       	movw	r14, r30
    2ea6:	85 32       	cpi	r24, 0x25	; 37
    2ea8:	29 f4       	brne	.+10     	; 0x2eb4 <vfprintf+0x56>
    2eaa:	b6 01       	movw	r22, r12
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    2eb2:	e7 cf       	rjmp	.-50     	; 0x2e82 <vfprintf+0x24>
    2eb4:	91 2c       	mov	r9, r1
    2eb6:	21 2c       	mov	r2, r1
    2eb8:	31 2c       	mov	r3, r1
    2eba:	ff e1       	ldi	r31, 0x1F	; 31
    2ebc:	f3 15       	cp	r31, r3
    2ebe:	d8 f0       	brcs	.+54     	; 0x2ef6 <vfprintf+0x98>
    2ec0:	8b 32       	cpi	r24, 0x2B	; 43
    2ec2:	79 f0       	breq	.+30     	; 0x2ee2 <vfprintf+0x84>
    2ec4:	38 f4       	brcc	.+14     	; 0x2ed4 <vfprintf+0x76>
    2ec6:	80 32       	cpi	r24, 0x20	; 32
    2ec8:	79 f0       	breq	.+30     	; 0x2ee8 <vfprintf+0x8a>
    2eca:	83 32       	cpi	r24, 0x23	; 35
    2ecc:	a1 f4       	brne	.+40     	; 0x2ef6 <vfprintf+0x98>
    2ece:	23 2d       	mov	r18, r3
    2ed0:	20 61       	ori	r18, 0x10	; 16
    2ed2:	1d c0       	rjmp	.+58     	; 0x2f0e <vfprintf+0xb0>
    2ed4:	8d 32       	cpi	r24, 0x2D	; 45
    2ed6:	61 f0       	breq	.+24     	; 0x2ef0 <vfprintf+0x92>
    2ed8:	80 33       	cpi	r24, 0x30	; 48
    2eda:	69 f4       	brne	.+26     	; 0x2ef6 <vfprintf+0x98>
    2edc:	23 2d       	mov	r18, r3
    2ede:	21 60       	ori	r18, 0x01	; 1
    2ee0:	16 c0       	rjmp	.+44     	; 0x2f0e <vfprintf+0xb0>
    2ee2:	83 2d       	mov	r24, r3
    2ee4:	82 60       	ori	r24, 0x02	; 2
    2ee6:	38 2e       	mov	r3, r24
    2ee8:	e3 2d       	mov	r30, r3
    2eea:	e4 60       	ori	r30, 0x04	; 4
    2eec:	3e 2e       	mov	r3, r30
    2eee:	2a c0       	rjmp	.+84     	; 0x2f44 <vfprintf+0xe6>
    2ef0:	f3 2d       	mov	r31, r3
    2ef2:	f8 60       	ori	r31, 0x08	; 8
    2ef4:	1d c0       	rjmp	.+58     	; 0x2f30 <vfprintf+0xd2>
    2ef6:	37 fc       	sbrc	r3, 7
    2ef8:	2d c0       	rjmp	.+90     	; 0x2f54 <vfprintf+0xf6>
    2efa:	20 ed       	ldi	r18, 0xD0	; 208
    2efc:	28 0f       	add	r18, r24
    2efe:	2a 30       	cpi	r18, 0x0A	; 10
    2f00:	40 f0       	brcs	.+16     	; 0x2f12 <vfprintf+0xb4>
    2f02:	8e 32       	cpi	r24, 0x2E	; 46
    2f04:	b9 f4       	brne	.+46     	; 0x2f34 <vfprintf+0xd6>
    2f06:	36 fc       	sbrc	r3, 6
    2f08:	81 c1       	rjmp	.+770    	; 0x320c <vfprintf+0x3ae>
    2f0a:	23 2d       	mov	r18, r3
    2f0c:	20 64       	ori	r18, 0x40	; 64
    2f0e:	32 2e       	mov	r3, r18
    2f10:	19 c0       	rjmp	.+50     	; 0x2f44 <vfprintf+0xe6>
    2f12:	36 fe       	sbrs	r3, 6
    2f14:	06 c0       	rjmp	.+12     	; 0x2f22 <vfprintf+0xc4>
    2f16:	8a e0       	ldi	r24, 0x0A	; 10
    2f18:	98 9e       	mul	r9, r24
    2f1a:	20 0d       	add	r18, r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	92 2e       	mov	r9, r18
    2f20:	11 c0       	rjmp	.+34     	; 0x2f44 <vfprintf+0xe6>
    2f22:	ea e0       	ldi	r30, 0x0A	; 10
    2f24:	2e 9e       	mul	r2, r30
    2f26:	20 0d       	add	r18, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	22 2e       	mov	r2, r18
    2f2c:	f3 2d       	mov	r31, r3
    2f2e:	f0 62       	ori	r31, 0x20	; 32
    2f30:	3f 2e       	mov	r3, r31
    2f32:	08 c0       	rjmp	.+16     	; 0x2f44 <vfprintf+0xe6>
    2f34:	8c 36       	cpi	r24, 0x6C	; 108
    2f36:	21 f4       	brne	.+8      	; 0x2f40 <vfprintf+0xe2>
    2f38:	83 2d       	mov	r24, r3
    2f3a:	80 68       	ori	r24, 0x80	; 128
    2f3c:	38 2e       	mov	r3, r24
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <vfprintf+0xe6>
    2f40:	88 36       	cpi	r24, 0x68	; 104
    2f42:	41 f4       	brne	.+16     	; 0x2f54 <vfprintf+0xf6>
    2f44:	f7 01       	movw	r30, r14
    2f46:	93 fd       	sbrc	r25, 3
    2f48:	85 91       	lpm	r24, Z+
    2f4a:	93 ff       	sbrs	r25, 3
    2f4c:	81 91       	ld	r24, Z+
    2f4e:	7f 01       	movw	r14, r30
    2f50:	81 11       	cpse	r24, r1
    2f52:	b3 cf       	rjmp	.-154    	; 0x2eba <vfprintf+0x5c>
    2f54:	98 2f       	mov	r25, r24
    2f56:	9f 7d       	andi	r25, 0xDF	; 223
    2f58:	95 54       	subi	r25, 0x45	; 69
    2f5a:	93 30       	cpi	r25, 0x03	; 3
    2f5c:	28 f4       	brcc	.+10     	; 0x2f68 <vfprintf+0x10a>
    2f5e:	0c 5f       	subi	r16, 0xFC	; 252
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	9f e3       	ldi	r25, 0x3F	; 63
    2f64:	99 83       	std	Y+1, r25	; 0x01
    2f66:	0d c0       	rjmp	.+26     	; 0x2f82 <vfprintf+0x124>
    2f68:	83 36       	cpi	r24, 0x63	; 99
    2f6a:	31 f0       	breq	.+12     	; 0x2f78 <vfprintf+0x11a>
    2f6c:	83 37       	cpi	r24, 0x73	; 115
    2f6e:	71 f0       	breq	.+28     	; 0x2f8c <vfprintf+0x12e>
    2f70:	83 35       	cpi	r24, 0x53	; 83
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <vfprintf+0x118>
    2f74:	59 c0       	rjmp	.+178    	; 0x3028 <vfprintf+0x1ca>
    2f76:	21 c0       	rjmp	.+66     	; 0x2fba <vfprintf+0x15c>
    2f78:	f8 01       	movw	r30, r16
    2f7a:	80 81       	ld	r24, Z
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	0e 5f       	subi	r16, 0xFE	; 254
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	88 24       	eor	r8, r8
    2f84:	83 94       	inc	r8
    2f86:	91 2c       	mov	r9, r1
    2f88:	53 01       	movw	r10, r6
    2f8a:	13 c0       	rjmp	.+38     	; 0x2fb2 <vfprintf+0x154>
    2f8c:	28 01       	movw	r4, r16
    2f8e:	f2 e0       	ldi	r31, 0x02	; 2
    2f90:	4f 0e       	add	r4, r31
    2f92:	51 1c       	adc	r5, r1
    2f94:	f8 01       	movw	r30, r16
    2f96:	a0 80       	ld	r10, Z
    2f98:	b1 80       	ldd	r11, Z+1	; 0x01
    2f9a:	36 fe       	sbrs	r3, 6
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <vfprintf+0x146>
    2f9e:	69 2d       	mov	r22, r9
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <vfprintf+0x14a>
    2fa4:	6f ef       	ldi	r22, 0xFF	; 255
    2fa6:	7f ef       	ldi	r23, 0xFF	; 255
    2fa8:	c5 01       	movw	r24, r10
    2faa:	0e 94 1b 19 	call	0x3236	; 0x3236 <strnlen>
    2fae:	4c 01       	movw	r8, r24
    2fb0:	82 01       	movw	r16, r4
    2fb2:	f3 2d       	mov	r31, r3
    2fb4:	ff 77       	andi	r31, 0x7F	; 127
    2fb6:	3f 2e       	mov	r3, r31
    2fb8:	16 c0       	rjmp	.+44     	; 0x2fe6 <vfprintf+0x188>
    2fba:	28 01       	movw	r4, r16
    2fbc:	22 e0       	ldi	r18, 0x02	; 2
    2fbe:	42 0e       	add	r4, r18
    2fc0:	51 1c       	adc	r5, r1
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	a0 80       	ld	r10, Z
    2fc6:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc8:	36 fe       	sbrs	r3, 6
    2fca:	03 c0       	rjmp	.+6      	; 0x2fd2 <vfprintf+0x174>
    2fcc:	69 2d       	mov	r22, r9
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <vfprintf+0x178>
    2fd2:	6f ef       	ldi	r22, 0xFF	; 255
    2fd4:	7f ef       	ldi	r23, 0xFF	; 255
    2fd6:	c5 01       	movw	r24, r10
    2fd8:	0e 94 10 19 	call	0x3220	; 0x3220 <strnlen_P>
    2fdc:	4c 01       	movw	r8, r24
    2fde:	f3 2d       	mov	r31, r3
    2fe0:	f0 68       	ori	r31, 0x80	; 128
    2fe2:	3f 2e       	mov	r3, r31
    2fe4:	82 01       	movw	r16, r4
    2fe6:	33 fc       	sbrc	r3, 3
    2fe8:	1b c0       	rjmp	.+54     	; 0x3020 <vfprintf+0x1c2>
    2fea:	82 2d       	mov	r24, r2
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	88 16       	cp	r8, r24
    2ff0:	99 06       	cpc	r9, r25
    2ff2:	b0 f4       	brcc	.+44     	; 0x3020 <vfprintf+0x1c2>
    2ff4:	b6 01       	movw	r22, r12
    2ff6:	80 e2       	ldi	r24, 0x20	; 32
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    2ffe:	2a 94       	dec	r2
    3000:	f4 cf       	rjmp	.-24     	; 0x2fea <vfprintf+0x18c>
    3002:	f5 01       	movw	r30, r10
    3004:	37 fc       	sbrc	r3, 7
    3006:	85 91       	lpm	r24, Z+
    3008:	37 fe       	sbrs	r3, 7
    300a:	81 91       	ld	r24, Z+
    300c:	5f 01       	movw	r10, r30
    300e:	b6 01       	movw	r22, r12
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3016:	21 10       	cpse	r2, r1
    3018:	2a 94       	dec	r2
    301a:	21 e0       	ldi	r18, 0x01	; 1
    301c:	82 1a       	sub	r8, r18
    301e:	91 08       	sbc	r9, r1
    3020:	81 14       	cp	r8, r1
    3022:	91 04       	cpc	r9, r1
    3024:	71 f7       	brne	.-36     	; 0x3002 <vfprintf+0x1a4>
    3026:	e8 c0       	rjmp	.+464    	; 0x31f8 <vfprintf+0x39a>
    3028:	84 36       	cpi	r24, 0x64	; 100
    302a:	11 f0       	breq	.+4      	; 0x3030 <vfprintf+0x1d2>
    302c:	89 36       	cpi	r24, 0x69	; 105
    302e:	41 f5       	brne	.+80     	; 0x3080 <vfprintf+0x222>
    3030:	f8 01       	movw	r30, r16
    3032:	37 fe       	sbrs	r3, 7
    3034:	07 c0       	rjmp	.+14     	; 0x3044 <vfprintf+0x1e6>
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	0c 5f       	subi	r16, 0xFC	; 252
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	08 c0       	rjmp	.+16     	; 0x3054 <vfprintf+0x1f6>
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	07 2e       	mov	r0, r23
    304a:	00 0c       	add	r0, r0
    304c:	88 0b       	sbc	r24, r24
    304e:	99 0b       	sbc	r25, r25
    3050:	0e 5f       	subi	r16, 0xFE	; 254
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	f3 2d       	mov	r31, r3
    3056:	ff 76       	andi	r31, 0x6F	; 111
    3058:	3f 2e       	mov	r3, r31
    305a:	97 ff       	sbrs	r25, 7
    305c:	09 c0       	rjmp	.+18     	; 0x3070 <vfprintf+0x212>
    305e:	90 95       	com	r25
    3060:	80 95       	com	r24
    3062:	70 95       	com	r23
    3064:	61 95       	neg	r22
    3066:	7f 4f       	sbci	r23, 0xFF	; 255
    3068:	8f 4f       	sbci	r24, 0xFF	; 255
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	f0 68       	ori	r31, 0x80	; 128
    306e:	3f 2e       	mov	r3, r31
    3070:	2a e0       	ldi	r18, 0x0A	; 10
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	a3 01       	movw	r20, r6
    3076:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__ultoa_invert>
    307a:	88 2e       	mov	r8, r24
    307c:	86 18       	sub	r8, r6
    307e:	45 c0       	rjmp	.+138    	; 0x310a <vfprintf+0x2ac>
    3080:	85 37       	cpi	r24, 0x75	; 117
    3082:	31 f4       	brne	.+12     	; 0x3090 <vfprintf+0x232>
    3084:	23 2d       	mov	r18, r3
    3086:	2f 7e       	andi	r18, 0xEF	; 239
    3088:	b2 2e       	mov	r11, r18
    308a:	2a e0       	ldi	r18, 0x0A	; 10
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	25 c0       	rjmp	.+74     	; 0x30da <vfprintf+0x27c>
    3090:	93 2d       	mov	r25, r3
    3092:	99 7f       	andi	r25, 0xF9	; 249
    3094:	b9 2e       	mov	r11, r25
    3096:	8f 36       	cpi	r24, 0x6F	; 111
    3098:	c1 f0       	breq	.+48     	; 0x30ca <vfprintf+0x26c>
    309a:	18 f4       	brcc	.+6      	; 0x30a2 <vfprintf+0x244>
    309c:	88 35       	cpi	r24, 0x58	; 88
    309e:	79 f0       	breq	.+30     	; 0x30be <vfprintf+0x260>
    30a0:	b5 c0       	rjmp	.+362    	; 0x320c <vfprintf+0x3ae>
    30a2:	80 37       	cpi	r24, 0x70	; 112
    30a4:	19 f0       	breq	.+6      	; 0x30ac <vfprintf+0x24e>
    30a6:	88 37       	cpi	r24, 0x78	; 120
    30a8:	21 f0       	breq	.+8      	; 0x30b2 <vfprintf+0x254>
    30aa:	b0 c0       	rjmp	.+352    	; 0x320c <vfprintf+0x3ae>
    30ac:	e9 2f       	mov	r30, r25
    30ae:	e0 61       	ori	r30, 0x10	; 16
    30b0:	be 2e       	mov	r11, r30
    30b2:	b4 fe       	sbrs	r11, 4
    30b4:	0d c0       	rjmp	.+26     	; 0x30d0 <vfprintf+0x272>
    30b6:	fb 2d       	mov	r31, r11
    30b8:	f4 60       	ori	r31, 0x04	; 4
    30ba:	bf 2e       	mov	r11, r31
    30bc:	09 c0       	rjmp	.+18     	; 0x30d0 <vfprintf+0x272>
    30be:	34 fe       	sbrs	r3, 4
    30c0:	0a c0       	rjmp	.+20     	; 0x30d6 <vfprintf+0x278>
    30c2:	29 2f       	mov	r18, r25
    30c4:	26 60       	ori	r18, 0x06	; 6
    30c6:	b2 2e       	mov	r11, r18
    30c8:	06 c0       	rjmp	.+12     	; 0x30d6 <vfprintf+0x278>
    30ca:	28 e0       	ldi	r18, 0x08	; 8
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <vfprintf+0x27c>
    30d0:	20 e1       	ldi	r18, 0x10	; 16
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <vfprintf+0x27c>
    30d6:	20 e1       	ldi	r18, 0x10	; 16
    30d8:	32 e0       	ldi	r19, 0x02	; 2
    30da:	f8 01       	movw	r30, r16
    30dc:	b7 fe       	sbrs	r11, 7
    30de:	07 c0       	rjmp	.+14     	; 0x30ee <vfprintf+0x290>
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	0c 5f       	subi	r16, 0xFC	; 252
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <vfprintf+0x29c>
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 5f       	subi	r16, 0xFE	; 254
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	a3 01       	movw	r20, r6
    30fc:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__ultoa_invert>
    3100:	88 2e       	mov	r8, r24
    3102:	86 18       	sub	r8, r6
    3104:	fb 2d       	mov	r31, r11
    3106:	ff 77       	andi	r31, 0x7F	; 127
    3108:	3f 2e       	mov	r3, r31
    310a:	36 fe       	sbrs	r3, 6
    310c:	0d c0       	rjmp	.+26     	; 0x3128 <vfprintf+0x2ca>
    310e:	23 2d       	mov	r18, r3
    3110:	2e 7f       	andi	r18, 0xFE	; 254
    3112:	a2 2e       	mov	r10, r18
    3114:	89 14       	cp	r8, r9
    3116:	58 f4       	brcc	.+22     	; 0x312e <vfprintf+0x2d0>
    3118:	34 fe       	sbrs	r3, 4
    311a:	0b c0       	rjmp	.+22     	; 0x3132 <vfprintf+0x2d4>
    311c:	32 fc       	sbrc	r3, 2
    311e:	09 c0       	rjmp	.+18     	; 0x3132 <vfprintf+0x2d4>
    3120:	83 2d       	mov	r24, r3
    3122:	8e 7e       	andi	r24, 0xEE	; 238
    3124:	a8 2e       	mov	r10, r24
    3126:	05 c0       	rjmp	.+10     	; 0x3132 <vfprintf+0x2d4>
    3128:	b8 2c       	mov	r11, r8
    312a:	a3 2c       	mov	r10, r3
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <vfprintf+0x2d6>
    312e:	b8 2c       	mov	r11, r8
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <vfprintf+0x2d6>
    3132:	b9 2c       	mov	r11, r9
    3134:	a4 fe       	sbrs	r10, 4
    3136:	0f c0       	rjmp	.+30     	; 0x3156 <vfprintf+0x2f8>
    3138:	fe 01       	movw	r30, r28
    313a:	e8 0d       	add	r30, r8
    313c:	f1 1d       	adc	r31, r1
    313e:	80 81       	ld	r24, Z
    3140:	80 33       	cpi	r24, 0x30	; 48
    3142:	21 f4       	brne	.+8      	; 0x314c <vfprintf+0x2ee>
    3144:	9a 2d       	mov	r25, r10
    3146:	99 7e       	andi	r25, 0xE9	; 233
    3148:	a9 2e       	mov	r10, r25
    314a:	09 c0       	rjmp	.+18     	; 0x315e <vfprintf+0x300>
    314c:	a2 fe       	sbrs	r10, 2
    314e:	06 c0       	rjmp	.+12     	; 0x315c <vfprintf+0x2fe>
    3150:	b3 94       	inc	r11
    3152:	b3 94       	inc	r11
    3154:	04 c0       	rjmp	.+8      	; 0x315e <vfprintf+0x300>
    3156:	8a 2d       	mov	r24, r10
    3158:	86 78       	andi	r24, 0x86	; 134
    315a:	09 f0       	breq	.+2      	; 0x315e <vfprintf+0x300>
    315c:	b3 94       	inc	r11
    315e:	a3 fc       	sbrc	r10, 3
    3160:	11 c0       	rjmp	.+34     	; 0x3184 <vfprintf+0x326>
    3162:	a0 fe       	sbrs	r10, 0
    3164:	06 c0       	rjmp	.+12     	; 0x3172 <vfprintf+0x314>
    3166:	b2 14       	cp	r11, r2
    3168:	88 f4       	brcc	.+34     	; 0x318c <vfprintf+0x32e>
    316a:	28 0c       	add	r2, r8
    316c:	92 2c       	mov	r9, r2
    316e:	9b 18       	sub	r9, r11
    3170:	0e c0       	rjmp	.+28     	; 0x318e <vfprintf+0x330>
    3172:	b2 14       	cp	r11, r2
    3174:	60 f4       	brcc	.+24     	; 0x318e <vfprintf+0x330>
    3176:	b6 01       	movw	r22, r12
    3178:	80 e2       	ldi	r24, 0x20	; 32
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3180:	b3 94       	inc	r11
    3182:	f7 cf       	rjmp	.-18     	; 0x3172 <vfprintf+0x314>
    3184:	b2 14       	cp	r11, r2
    3186:	18 f4       	brcc	.+6      	; 0x318e <vfprintf+0x330>
    3188:	2b 18       	sub	r2, r11
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <vfprintf+0x332>
    318c:	98 2c       	mov	r9, r8
    318e:	21 2c       	mov	r2, r1
    3190:	a4 fe       	sbrs	r10, 4
    3192:	10 c0       	rjmp	.+32     	; 0x31b4 <vfprintf+0x356>
    3194:	b6 01       	movw	r22, r12
    3196:	80 e3       	ldi	r24, 0x30	; 48
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    319e:	a2 fe       	sbrs	r10, 2
    31a0:	17 c0       	rjmp	.+46     	; 0x31d0 <vfprintf+0x372>
    31a2:	a1 fc       	sbrc	r10, 1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <vfprintf+0x34e>
    31a6:	88 e7       	ldi	r24, 0x78	; 120
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <vfprintf+0x352>
    31ac:	88 e5       	ldi	r24, 0x58	; 88
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	b6 01       	movw	r22, r12
    31b2:	0c c0       	rjmp	.+24     	; 0x31cc <vfprintf+0x36e>
    31b4:	8a 2d       	mov	r24, r10
    31b6:	86 78       	andi	r24, 0x86	; 134
    31b8:	59 f0       	breq	.+22     	; 0x31d0 <vfprintf+0x372>
    31ba:	a1 fe       	sbrs	r10, 1
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x364>
    31be:	8b e2       	ldi	r24, 0x2B	; 43
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <vfprintf+0x366>
    31c2:	80 e2       	ldi	r24, 0x20	; 32
    31c4:	a7 fc       	sbrc	r10, 7
    31c6:	8d e2       	ldi	r24, 0x2D	; 45
    31c8:	b6 01       	movw	r22, r12
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31d0:	89 14       	cp	r8, r9
    31d2:	38 f4       	brcc	.+14     	; 0x31e2 <vfprintf+0x384>
    31d4:	b6 01       	movw	r22, r12
    31d6:	80 e3       	ldi	r24, 0x30	; 48
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31de:	9a 94       	dec	r9
    31e0:	f7 cf       	rjmp	.-18     	; 0x31d0 <vfprintf+0x372>
    31e2:	8a 94       	dec	r8
    31e4:	f3 01       	movw	r30, r6
    31e6:	e8 0d       	add	r30, r8
    31e8:	f1 1d       	adc	r31, r1
    31ea:	80 81       	ld	r24, Z
    31ec:	b6 01       	movw	r22, r12
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    31f4:	81 10       	cpse	r8, r1
    31f6:	f5 cf       	rjmp	.-22     	; 0x31e2 <vfprintf+0x384>
    31f8:	22 20       	and	r2, r2
    31fa:	09 f4       	brne	.+2      	; 0x31fe <vfprintf+0x3a0>
    31fc:	42 ce       	rjmp	.-892    	; 0x2e82 <vfprintf+0x24>
    31fe:	b6 01       	movw	r22, r12
    3200:	80 e2       	ldi	r24, 0x20	; 32
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 26 19 	call	0x324c	; 0x324c <fputc>
    3208:	2a 94       	dec	r2
    320a:	f6 cf       	rjmp	.-20     	; 0x31f8 <vfprintf+0x39a>
    320c:	f6 01       	movw	r30, r12
    320e:	86 81       	ldd	r24, Z+6	; 0x06
    3210:	97 81       	ldd	r25, Z+7	; 0x07
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <vfprintf+0x3ba>
    3214:	8f ef       	ldi	r24, 0xFF	; 255
    3216:	9f ef       	ldi	r25, 0xFF	; 255
    3218:	2b 96       	adiw	r28, 0x0b	; 11
    321a:	e2 e1       	ldi	r30, 0x12	; 18
    321c:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__epilogue_restores__>

00003220 <strnlen_P>:
    3220:	fc 01       	movw	r30, r24
    3222:	05 90       	lpm	r0, Z+
    3224:	61 50       	subi	r22, 0x01	; 1
    3226:	70 40       	sbci	r23, 0x00	; 0
    3228:	01 10       	cpse	r0, r1
    322a:	d8 f7       	brcc	.-10     	; 0x3222 <strnlen_P+0x2>
    322c:	80 95       	com	r24
    322e:	90 95       	com	r25
    3230:	8e 0f       	add	r24, r30
    3232:	9f 1f       	adc	r25, r31
    3234:	08 95       	ret

00003236 <strnlen>:
    3236:	fc 01       	movw	r30, r24
    3238:	61 50       	subi	r22, 0x01	; 1
    323a:	70 40       	sbci	r23, 0x00	; 0
    323c:	01 90       	ld	r0, Z+
    323e:	01 10       	cpse	r0, r1
    3240:	d8 f7       	brcc	.-10     	; 0x3238 <strnlen+0x2>
    3242:	80 95       	com	r24
    3244:	90 95       	com	r25
    3246:	8e 0f       	add	r24, r30
    3248:	9f 1f       	adc	r25, r31
    324a:	08 95       	ret

0000324c <fputc>:
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	fb 01       	movw	r30, r22
    3256:	23 81       	ldd	r18, Z+3	; 0x03
    3258:	21 fd       	sbrc	r18, 1
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <fputc+0x16>
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	9f ef       	ldi	r25, 0xFF	; 255
    3260:	2c c0       	rjmp	.+88     	; 0x32ba <fputc+0x6e>
    3262:	22 ff       	sbrs	r18, 2
    3264:	16 c0       	rjmp	.+44     	; 0x3292 <fputc+0x46>
    3266:	46 81       	ldd	r20, Z+6	; 0x06
    3268:	57 81       	ldd	r21, Z+7	; 0x07
    326a:	24 81       	ldd	r18, Z+4	; 0x04
    326c:	35 81       	ldd	r19, Z+5	; 0x05
    326e:	42 17       	cp	r20, r18
    3270:	53 07       	cpc	r21, r19
    3272:	44 f4       	brge	.+16     	; 0x3284 <fputc+0x38>
    3274:	a0 81       	ld	r26, Z
    3276:	b1 81       	ldd	r27, Z+1	; 0x01
    3278:	9d 01       	movw	r18, r26
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	31 83       	std	Z+1, r19	; 0x01
    3280:	20 83       	st	Z, r18
    3282:	8c 93       	st	X, r24
    3284:	26 81       	ldd	r18, Z+6	; 0x06
    3286:	37 81       	ldd	r19, Z+7	; 0x07
    3288:	2f 5f       	subi	r18, 0xFF	; 255
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	37 83       	std	Z+7, r19	; 0x07
    328e:	26 83       	std	Z+6, r18	; 0x06
    3290:	14 c0       	rjmp	.+40     	; 0x32ba <fputc+0x6e>
    3292:	8b 01       	movw	r16, r22
    3294:	ec 01       	movw	r28, r24
    3296:	fb 01       	movw	r30, r22
    3298:	00 84       	ldd	r0, Z+8	; 0x08
    329a:	f1 85       	ldd	r31, Z+9	; 0x09
    329c:	e0 2d       	mov	r30, r0
    329e:	09 95       	icall
    32a0:	89 2b       	or	r24, r25
    32a2:	e1 f6       	brne	.-72     	; 0x325c <fputc+0x10>
    32a4:	d8 01       	movw	r26, r16
    32a6:	16 96       	adiw	r26, 0x06	; 6
    32a8:	8d 91       	ld	r24, X+
    32aa:	9c 91       	ld	r25, X
    32ac:	17 97       	sbiw	r26, 0x07	; 7
    32ae:	01 96       	adiw	r24, 0x01	; 1
    32b0:	17 96       	adiw	r26, 0x07	; 7
    32b2:	9c 93       	st	X, r25
    32b4:	8e 93       	st	-X, r24
    32b6:	16 97       	sbiw	r26, 0x06	; 6
    32b8:	ce 01       	movw	r24, r28
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	08 95       	ret

000032c4 <__ultoa_invert>:
    32c4:	fa 01       	movw	r30, r20
    32c6:	aa 27       	eor	r26, r26
    32c8:	28 30       	cpi	r18, 0x08	; 8
    32ca:	51 f1       	breq	.+84     	; 0x3320 <__ultoa_invert+0x5c>
    32cc:	20 31       	cpi	r18, 0x10	; 16
    32ce:	81 f1       	breq	.+96     	; 0x3330 <__ultoa_invert+0x6c>
    32d0:	e8 94       	clt
    32d2:	6f 93       	push	r22
    32d4:	6e 7f       	andi	r22, 0xFE	; 254
    32d6:	6e 5f       	subi	r22, 0xFE	; 254
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	8f 4f       	sbci	r24, 0xFF	; 255
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	af 4f       	sbci	r26, 0xFF	; 255
    32e0:	b1 e0       	ldi	r27, 0x01	; 1
    32e2:	3e d0       	rcall	.+124    	; 0x3360 <__ultoa_invert+0x9c>
    32e4:	b4 e0       	ldi	r27, 0x04	; 4
    32e6:	3c d0       	rcall	.+120    	; 0x3360 <__ultoa_invert+0x9c>
    32e8:	67 0f       	add	r22, r23
    32ea:	78 1f       	adc	r23, r24
    32ec:	89 1f       	adc	r24, r25
    32ee:	9a 1f       	adc	r25, r26
    32f0:	a1 1d       	adc	r26, r1
    32f2:	68 0f       	add	r22, r24
    32f4:	79 1f       	adc	r23, r25
    32f6:	8a 1f       	adc	r24, r26
    32f8:	91 1d       	adc	r25, r1
    32fa:	a1 1d       	adc	r26, r1
    32fc:	6a 0f       	add	r22, r26
    32fe:	71 1d       	adc	r23, r1
    3300:	81 1d       	adc	r24, r1
    3302:	91 1d       	adc	r25, r1
    3304:	a1 1d       	adc	r26, r1
    3306:	20 d0       	rcall	.+64     	; 0x3348 <__ultoa_invert+0x84>
    3308:	09 f4       	brne	.+2      	; 0x330c <__ultoa_invert+0x48>
    330a:	68 94       	set
    330c:	3f 91       	pop	r19
    330e:	2a e0       	ldi	r18, 0x0A	; 10
    3310:	26 9f       	mul	r18, r22
    3312:	11 24       	eor	r1, r1
    3314:	30 19       	sub	r19, r0
    3316:	30 5d       	subi	r19, 0xD0	; 208
    3318:	31 93       	st	Z+, r19
    331a:	de f6       	brtc	.-74     	; 0x32d2 <__ultoa_invert+0xe>
    331c:	cf 01       	movw	r24, r30
    331e:	08 95       	ret
    3320:	46 2f       	mov	r20, r22
    3322:	47 70       	andi	r20, 0x07	; 7
    3324:	40 5d       	subi	r20, 0xD0	; 208
    3326:	41 93       	st	Z+, r20
    3328:	b3 e0       	ldi	r27, 0x03	; 3
    332a:	0f d0       	rcall	.+30     	; 0x334a <__ultoa_invert+0x86>
    332c:	c9 f7       	brne	.-14     	; 0x3320 <__ultoa_invert+0x5c>
    332e:	f6 cf       	rjmp	.-20     	; 0x331c <__ultoa_invert+0x58>
    3330:	46 2f       	mov	r20, r22
    3332:	4f 70       	andi	r20, 0x0F	; 15
    3334:	40 5d       	subi	r20, 0xD0	; 208
    3336:	4a 33       	cpi	r20, 0x3A	; 58
    3338:	18 f0       	brcs	.+6      	; 0x3340 <__ultoa_invert+0x7c>
    333a:	49 5d       	subi	r20, 0xD9	; 217
    333c:	31 fd       	sbrc	r19, 1
    333e:	40 52       	subi	r20, 0x20	; 32
    3340:	41 93       	st	Z+, r20
    3342:	02 d0       	rcall	.+4      	; 0x3348 <__ultoa_invert+0x84>
    3344:	a9 f7       	brne	.-22     	; 0x3330 <__ultoa_invert+0x6c>
    3346:	ea cf       	rjmp	.-44     	; 0x331c <__ultoa_invert+0x58>
    3348:	b4 e0       	ldi	r27, 0x04	; 4
    334a:	a6 95       	lsr	r26
    334c:	97 95       	ror	r25
    334e:	87 95       	ror	r24
    3350:	77 95       	ror	r23
    3352:	67 95       	ror	r22
    3354:	ba 95       	dec	r27
    3356:	c9 f7       	brne	.-14     	; 0x334a <__ultoa_invert+0x86>
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	61 05       	cpc	r22, r1
    335c:	71 05       	cpc	r23, r1
    335e:	08 95       	ret
    3360:	9b 01       	movw	r18, r22
    3362:	ac 01       	movw	r20, r24
    3364:	0a 2e       	mov	r0, r26
    3366:	06 94       	lsr	r0
    3368:	57 95       	ror	r21
    336a:	47 95       	ror	r20
    336c:	37 95       	ror	r19
    336e:	27 95       	ror	r18
    3370:	ba 95       	dec	r27
    3372:	c9 f7       	brne	.-14     	; 0x3366 <__ultoa_invert+0xa2>
    3374:	62 0f       	add	r22, r18
    3376:	73 1f       	adc	r23, r19
    3378:	84 1f       	adc	r24, r20
    337a:	95 1f       	adc	r25, r21
    337c:	a0 1d       	adc	r26, r0
    337e:	08 95       	ret

00003380 <__prologue_saves__>:
    3380:	2f 92       	push	r2
    3382:	3f 92       	push	r3
    3384:	4f 92       	push	r4
    3386:	5f 92       	push	r5
    3388:	6f 92       	push	r6
    338a:	7f 92       	push	r7
    338c:	8f 92       	push	r8
    338e:	9f 92       	push	r9
    3390:	af 92       	push	r10
    3392:	bf 92       	push	r11
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	ca 1b       	sub	r28, r26
    33aa:	db 0b       	sbc	r29, r27
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	09 94       	ijmp

000033b8 <__epilogue_restores__>:
    33b8:	2a 88       	ldd	r2, Y+18	; 0x12
    33ba:	39 88       	ldd	r3, Y+17	; 0x11
    33bc:	48 88       	ldd	r4, Y+16	; 0x10
    33be:	5f 84       	ldd	r5, Y+15	; 0x0f
    33c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    33c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    33c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    33c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ca:	b9 84       	ldd	r11, Y+9	; 0x09
    33cc:	c8 84       	ldd	r12, Y+8	; 0x08
    33ce:	df 80       	ldd	r13, Y+7	; 0x07
    33d0:	ee 80       	ldd	r14, Y+6	; 0x06
    33d2:	fd 80       	ldd	r15, Y+5	; 0x05
    33d4:	0c 81       	ldd	r16, Y+4	; 0x04
    33d6:	1b 81       	ldd	r17, Y+3	; 0x03
    33d8:	aa 81       	ldd	r26, Y+2	; 0x02
    33da:	b9 81       	ldd	r27, Y+1	; 0x01
    33dc:	ce 0f       	add	r28, r30
    33de:	d1 1d       	adc	r29, r1
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	ed 01       	movw	r28, r26
    33ec:	08 95       	ret

000033ee <_exit>:
    33ee:	f8 94       	cli

000033f0 <__stop_program>:
    33f0:	ff cf       	rjmp	.-2      	; 0x33f0 <__stop_program>
