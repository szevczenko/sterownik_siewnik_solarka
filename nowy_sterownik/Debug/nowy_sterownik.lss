
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000443a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  0000443a  000044ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a2  0080021a  0080021a  00004688  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000046e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061cf  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002104  00000000  00000000  0000af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ced  00000000  00000000  0000d033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ecc  00000000  00000000  00010d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cd3  00000000  00000000  00011bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c06  00000000  00000000  000138bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  000164c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__vector_13>
      38:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	b1 08       	sbc	r11, r1
      56:	b8 08       	sbc	r11, r8
      58:	bb 08       	sbc	r11, r11
      5a:	c1 08       	sbc	r12, r1
      5c:	c7 08       	sbc	r12, r7
      5e:	cc 08       	sbc	r12, r12
      60:	d2 08       	sbc	r13, r2
      62:	d9 08       	sbc	r13, r9
      64:	dd 08       	sbc	r13, r13
      66:	e5 08       	sbc	r14, r5
      68:	34 09       	sbc	r19, r4
      6a:	34 09       	sbc	r19, r4
      6c:	34 09       	sbc	r19, r4
      6e:	34 09       	sbc	r19, r4
      70:	34 09       	sbc	r19, r4
      72:	34 09       	sbc	r19, r4
      74:	34 09       	sbc	r19, r4
      76:	34 09       	sbc	r19, r4
      78:	34 09       	sbc	r19, r4
      7a:	34 09       	sbc	r19, r4
      7c:	34 09       	sbc	r19, r4
      7e:	34 09       	sbc	r19, r4
      80:	34 09       	sbc	r19, r4
      82:	34 09       	sbc	r19, r4
      84:	34 09       	sbc	r19, r4
      86:	34 09       	sbc	r19, r4
      88:	34 09       	sbc	r19, r4
      8a:	34 09       	sbc	r19, r4
      8c:	34 09       	sbc	r19, r4
      8e:	34 09       	sbc	r19, r4
      90:	34 09       	sbc	r19, r4
      92:	34 09       	sbc	r19, r4
      94:	34 09       	sbc	r19, r4
      96:	34 09       	sbc	r19, r4
      98:	34 09       	sbc	r19, r4
      9a:	34 09       	sbc	r19, r4
      9c:	34 09       	sbc	r19, r4
      9e:	34 09       	sbc	r19, r4
      a0:	34 09       	sbc	r19, r4
      a2:	34 09       	sbc	r19, r4
      a4:	34 09       	sbc	r19, r4
      a6:	34 09       	sbc	r19, r4
      a8:	34 09       	sbc	r19, r4
      aa:	34 09       	sbc	r19, r4
      ac:	34 09       	sbc	r19, r4
      ae:	34 09       	sbc	r19, r4
      b0:	34 09       	sbc	r19, r4
      b2:	34 09       	sbc	r19, r4
      b4:	34 09       	sbc	r19, r4
      b6:	34 09       	sbc	r19, r4
      b8:	34 09       	sbc	r19, r4
      ba:	34 09       	sbc	r19, r4
      bc:	34 09       	sbc	r19, r4
      be:	34 09       	sbc	r19, r4
      c0:	34 09       	sbc	r19, r4
      c2:	34 09       	sbc	r19, r4
      c4:	34 09       	sbc	r19, r4
      c6:	34 09       	sbc	r19, r4
      c8:	34 09       	sbc	r19, r4
      ca:	34 09       	sbc	r19, r4
      cc:	34 09       	sbc	r19, r4
      ce:	34 09       	sbc	r19, r4
      d0:	34 09       	sbc	r19, r4
      d2:	34 09       	sbc	r19, r4
      d4:	34 09       	sbc	r19, r4
      d6:	34 09       	sbc	r19, r4
      d8:	34 09       	sbc	r19, r4
      da:	34 09       	sbc	r19, r4
      dc:	34 09       	sbc	r19, r4
      de:	34 09       	sbc	r19, r4
      e0:	34 09       	sbc	r19, r4
      e2:	34 09       	sbc	r19, r4
      e4:	34 09       	sbc	r19, r4
      e6:	34 09       	sbc	r19, r4
      e8:	34 09       	sbc	r19, r4
      ea:	34 09       	sbc	r19, r4
      ec:	34 09       	sbc	r19, r4
      ee:	34 09       	sbc	r19, r4
      f0:	34 09       	sbc	r19, r4
      f2:	34 09       	sbc	r19, r4
      f4:	34 09       	sbc	r19, r4
      f6:	34 09       	sbc	r19, r4
      f8:	34 09       	sbc	r19, r4
      fa:	34 09       	sbc	r19, r4
      fc:	34 09       	sbc	r19, r4
      fe:	34 09       	sbc	r19, r4
     100:	34 09       	sbc	r19, r4
     102:	34 09       	sbc	r19, r4
     104:	34 09       	sbc	r19, r4
     106:	34 09       	sbc	r19, r4
     108:	34 09       	sbc	r19, r4
     10a:	34 09       	sbc	r19, r4
     10c:	34 09       	sbc	r19, r4
     10e:	34 09       	sbc	r19, r4
     110:	34 09       	sbc	r19, r4
     112:	34 09       	sbc	r19, r4
     114:	34 09       	sbc	r19, r4
     116:	ec 08       	sbc	r14, r12
     118:	f3 08       	sbc	r15, r3
     11a:	f9 08       	sbc	r15, r9
     11c:	fe 08       	sbc	r15, r14
     11e:	04 09       	sbc	r16, r4
     120:	0a 09       	sbc	r16, r10
     122:	34 09       	sbc	r19, r4
     124:	34 09       	sbc	r19, r4
     126:	34 09       	sbc	r19, r4
     128:	34 09       	sbc	r19, r4
     12a:	34 09       	sbc	r19, r4
     12c:	23 09       	sbc	r18, r3
     12e:	34 09       	sbc	r19, r4
     130:	34 09       	sbc	r19, r4
     132:	12 09       	sbc	r17, r2
     134:	17 09       	sbc	r17, r7
     136:	34 09       	sbc	r19, r4
     138:	0f 09       	sbc	r16, r15
     13a:	1d 09       	sbc	r17, r13
     13c:	34 09       	sbc	r19, r4
     13e:	34 09       	sbc	r19, r4
     140:	34 09       	sbc	r19, r4
     142:	34 09       	sbc	r19, r4
     144:	34 09       	sbc	r19, r4
     146:	34 09       	sbc	r19, r4
     148:	34 09       	sbc	r19, r4
     14a:	34 09       	sbc	r19, r4
     14c:	34 09       	sbc	r19, r4
     14e:	34 09       	sbc	r19, r4
     150:	34 09       	sbc	r19, r4
     152:	34 09       	sbc	r19, r4
     154:	34 09       	sbc	r19, r4
     156:	34 09       	sbc	r19, r4
     158:	34 09       	sbc	r19, r4
     15a:	34 09       	sbc	r19, r4
     15c:	34 09       	sbc	r19, r4
     15e:	34 09       	sbc	r19, r4
     160:	34 09       	sbc	r19, r4
     162:	34 09       	sbc	r19, r4
     164:	34 09       	sbc	r19, r4
     166:	34 09       	sbc	r19, r4
     168:	34 09       	sbc	r19, r4
     16a:	34 09       	sbc	r19, r4
     16c:	34 09       	sbc	r19, r4
     16e:	34 09       	sbc	r19, r4
     170:	34 09       	sbc	r19, r4
     172:	34 09       	sbc	r19, r4
     174:	34 09       	sbc	r19, r4
     176:	34 09       	sbc	r19, r4
     178:	34 09       	sbc	r19, r4
     17a:	34 09       	sbc	r19, r4
     17c:	34 09       	sbc	r19, r4
     17e:	34 09       	sbc	r19, r4
     180:	34 09       	sbc	r19, r4
     182:	34 09       	sbc	r19, r4
     184:	34 09       	sbc	r19, r4
     186:	34 09       	sbc	r19, r4
     188:	34 09       	sbc	r19, r4
     18a:	34 09       	sbc	r19, r4
     18c:	34 09       	sbc	r19, r4
     18e:	34 09       	sbc	r19, r4
     190:	34 09       	sbc	r19, r4
     192:	34 09       	sbc	r19, r4
     194:	34 09       	sbc	r19, r4
     196:	34 09       	sbc	r19, r4
     198:	34 09       	sbc	r19, r4
     19a:	34 09       	sbc	r19, r4
     19c:	34 09       	sbc	r19, r4
     19e:	34 09       	sbc	r19, r4
     1a0:	34 09       	sbc	r19, r4
     1a2:	34 09       	sbc	r19, r4
     1a4:	34 09       	sbc	r19, r4
     1a6:	34 09       	sbc	r19, r4
     1a8:	34 09       	sbc	r19, r4
     1aa:	34 09       	sbc	r19, r4
     1ac:	34 09       	sbc	r19, r4
     1ae:	34 09       	sbc	r19, r4
     1b0:	34 09       	sbc	r19, r4
     1b2:	34 09       	sbc	r19, r4
     1b4:	34 09       	sbc	r19, r4
     1b6:	34 09       	sbc	r19, r4
     1b8:	34 09       	sbc	r19, r4
     1ba:	34 09       	sbc	r19, r4
     1bc:	34 09       	sbc	r19, r4
     1be:	34 09       	sbc	r19, r4
     1c0:	34 09       	sbc	r19, r4
     1c2:	34 09       	sbc	r19, r4
     1c4:	34 09       	sbc	r19, r4
     1c6:	34 09       	sbc	r19, r4
     1c8:	34 09       	sbc	r19, r4
     1ca:	34 09       	sbc	r19, r4
     1cc:	34 09       	sbc	r19, r4
     1ce:	34 09       	sbc	r19, r4
     1d0:	34 09       	sbc	r19, r4
     1d2:	34 09       	sbc	r19, r4
     1d4:	34 09       	sbc	r19, r4
     1d6:	34 09       	sbc	r19, r4
     1d8:	34 09       	sbc	r19, r4
     1da:	34 09       	sbc	r19, r4
     1dc:	34 09       	sbc	r19, r4
     1de:	34 09       	sbc	r19, r4
     1e0:	34 09       	sbc	r19, r4
     1e2:	34 09       	sbc	r19, r4
     1e4:	34 09       	sbc	r19, r4
     1e6:	34 09       	sbc	r19, r4
     1e8:	34 09       	sbc	r19, r4
     1ea:	34 09       	sbc	r19, r4
     1ec:	34 09       	sbc	r19, r4
     1ee:	34 09       	sbc	r19, r4
     1f0:	34 09       	sbc	r19, r4
     1f2:	34 09       	sbc	r19, r4
     1f4:	34 09       	sbc	r19, r4
     1f6:	34 09       	sbc	r19, r4
     1f8:	34 09       	sbc	r19, r4
     1fa:	34 09       	sbc	r19, r4
     1fc:	34 09       	sbc	r19, r4
     1fe:	34 09       	sbc	r19, r4
     200:	34 09       	sbc	r19, r4
     202:	34 09       	sbc	r19, r4
     204:	34 09       	sbc	r19, r4
     206:	34 09       	sbc	r19, r4
     208:	34 09       	sbc	r19, r4
     20a:	34 09       	sbc	r19, r4
     20c:	34 09       	sbc	r19, r4
     20e:	34 09       	sbc	r19, r4
     210:	34 09       	sbc	r19, r4
     212:	34 09       	sbc	r19, r4
     214:	34 09       	sbc	r19, r4
     216:	34 09       	sbc	r19, r4
     218:	34 09       	sbc	r19, r4
     21a:	34 09       	sbc	r19, r4
     21c:	34 09       	sbc	r19, r4
     21e:	34 09       	sbc	r19, r4
     220:	34 09       	sbc	r19, r4
     222:	34 09       	sbc	r19, r4
     224:	34 09       	sbc	r19, r4
     226:	34 09       	sbc	r19, r4
     228:	34 09       	sbc	r19, r4
     22a:	34 09       	sbc	r19, r4
     22c:	34 09       	sbc	r19, r4
     22e:	34 09       	sbc	r19, r4
     230:	34 09       	sbc	r19, r4
     232:	34 09       	sbc	r19, r4
     234:	34 09       	sbc	r19, r4
     236:	34 09       	sbc	r19, r4
     238:	34 09       	sbc	r19, r4
     23a:	34 09       	sbc	r19, r4
     23c:	34 09       	sbc	r19, r4
     23e:	34 09       	sbc	r19, r4
     240:	34 09       	sbc	r19, r4
     242:	34 09       	sbc	r19, r4
     244:	27 09       	sbc	r18, r7
     246:	33 09       	sbc	r19, r3
     248:	31 09       	sbc	r19, r1
     24a:	2f 09       	sbc	r18, r15
     24c:	2d 09       	sbc	r18, r13
     24e:	2b 09       	sbc	r18, r11
     250:	29 09       	sbc	r18, r9
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_5_menu>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ea e3       	ldi	r30, 0x3A	; 58
     3ea:	f4 e4       	ldi	r31, 0x44	; 68
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	aa 31       	cpi	r26, 0x1A	; 26
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	aa e1       	ldi	r26, 0x1A	; 26
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	ac 3b       	cpi	r26, 0xBC	; 188
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 31 02 	call	0x462	; 0x462 <main>
     40c:	0c 94 1b 22 	jmp	0x4436	; 0x4436 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	84 e9       	ldi	r24, 0x94	; 148
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 a1 21 	call	0x4342	; 0x4342 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     438:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     43a:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     43c:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     43e:	89 9a       	sbi	0x11, 1	; 17
     440:	08 95       	ret

00000442 <init_driver>:
void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     442:	62 e3       	ldi	r22, 0x32	; 50
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <timer0_init>
	init_display_drv();
     44a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <init_display_drv>
	init_buttons();
     44e:	0e 94 c7 04 	call	0x98e	; 0x98e <init_buttons>
	init_system();
     452:	0e 94 7f 15 	call	0x2afe	; 0x2afe <init_system>
	init_measure();
     456:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     45a:	80 b7       	in	r24, 0x30	; 48
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	80 bf       	out	0x30, r24	; 48
     460:	08 95       	ret

00000462 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 16 12 	call	0x242c	; 0x242c <servo_init>
	#endif
	init_pin();
     468:	0e 94 1c 02 	call	0x438	; 0x438 <init_pin>
	sei();
     46c:	78 94       	sei
	init_driver();
     46e:	0e 94 21 02 	call	0x442	; 0x442 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     472:	8b e8       	ldi	r24, 0x8B	; 139
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     47e:	0e 94 ef 06 	call	0xdde	; 0xdde <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     482:	0e 94 75 10 	call	0x20ea	; 0x20ea <measure_get_servo_calibration>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     48a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <disp_process>
		animation();
     48e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <animation>
		process_button();
     492:	0e 94 1d 04 	call	0x83a	; 0x83a <process_button>
		disp_fast_process();
     496:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <disp_fast_process>
		disp_very_fast_process();
     49a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <disp_very_fast_process>
		dcmotor_process(motor_value);
     49e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
     4a2:	0e 94 fb 07 	call	0xff6	; 0xff6 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4a6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
     4aa:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <servo_process>
		menu_process();
     4ae:	0e 94 10 06 	call	0xc20	; 0xc20 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4b2:	0e 94 af 0c 	call	0x195e	; 0x195e <error_event>
		error_led_blink();
     4b6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <error_led_blink>
		measure_process();
     4ba:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <measure_process>
		accumulator_process();
     4be:	0e 94 82 02 	call	0x504	; 0x504 <accumulator_process>
		accum_led_process();
     4c2:	0e 94 cb 02 	call	0x596	; 0x596 <accum_led_process>
		buzzer_process();
     4c6:	0e 94 de 04 	call	0x9bc	; 0x9bc <buzzer_process>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <main+0x28>

000004cc <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 b1 10 	call	0x2162	; 0x2162 <measure_get_filtered_value>
	#endif
    return voltage;
     4d2:	bc 01       	movw	r22, r24
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	86 0f       	add	r24, r22
     4de:	97 1f       	adc	r25, r23
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
     4ea:	26 e6       	ldi	r18, 0x66	; 102
     4ec:	36 e6       	ldi	r19, 0x66	; 102
     4ee:	46 eb       	ldi	r20, 0xB6	; 182
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	5a e3       	ldi	r21, 0x3A	; 58
     4fe:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
}
     502:	08 95       	ret

00000504 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     504:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     508:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     50c:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     510:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     514:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <accumulator_timer.1914>
     518:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <accumulator_timer.1914+0x1>
     51c:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <accumulator_timer.1914+0x2>
     520:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <accumulator_timer.1914+0x3>
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	a6 07       	cpc	r26, r22
     52a:	b7 07       	cpc	r27, r23
     52c:	98 f5       	brcc	.+102    	; 0x594 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	0e 94 b1 10 	call	0x2162	; 0x2162 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     534:	89 35       	cpi	r24, 0x59	; 89
     536:	22 e0       	ldi	r18, 0x02	; 2
     538:	92 07       	cpc	r25, r18
     53a:	18 f0       	brcs	.+6      	; 0x542 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     542:	8b 38       	cpi	r24, 0x8B	; 139
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	92 07       	cpc	r25, r18
     548:	18 f4       	brcc	.+6      	; 0x550 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     54a:	22 e0       	ldi	r18, 0x02	; 2
     54c:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     550:	8e 35       	cpi	r24, 0x5E	; 94
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	92 07       	cpc	r25, r18
     556:	18 f4       	brcc	.+6      	; 0x55e <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     558:	23 e0       	ldi	r18, 0x03	; 3
     55a:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     55e:	8c 58       	subi	r24, 0x8C	; 140
     560:	91 40       	sbci	r25, 0x01	; 1
     562:	8c 3c       	cpi	r24, 0xCC	; 204
     564:	91 05       	cpc	r25, r1
     566:	10 f4       	brcc	.+4      	; 0x56c <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     568:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     56c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
     570:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
     574:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
     578:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
     57c:	8c 59       	subi	r24, 0x9C	; 156
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	af 4f       	sbci	r26, 0xFF	; 255
     582:	bf 4f       	sbci	r27, 0xFF	; 255
     584:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <accumulator_timer.1914>
     588:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <accumulator_timer.1914+0x1>
     58c:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <accumulator_timer.1914+0x2>
     590:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <accumulator_timer.1914+0x3>
     594:	08 95       	ret

00000596 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     596:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     59a:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     59e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     5a2:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     5a6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     5aa:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     5ae:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     5b2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     5b6:	84 17       	cp	r24, r20
     5b8:	95 07       	cpc	r25, r21
     5ba:	a6 07       	cpc	r26, r22
     5bc:	b7 07       	cpc	r27, r23
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <accum_led_process+0x2c>
     5c0:	86 c0       	rjmp	.+268    	; 0x6ce <accum_led_process+0x138>
	{
        switch (accumulator_state)
     5c2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <accumulator_state>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	e9 f0       	breq	.+58     	; 0x604 <accum_led_process+0x6e>
     5ca:	30 f0       	brcs	.+12     	; 0x5d8 <accum_led_process+0x42>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	99 f1       	breq	.+102    	; 0x636 <accum_led_process+0xa0>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <accum_led_process+0x40>
     5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <accum_led_process+0x10e>
     5d6:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     5d8:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     5da:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     5de:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     5e2:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     5e6:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     5ea:	88 53       	subi	r24, 0x38	; 56
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	af 4f       	sbci	r26, 0xFF	; 255
     5f0:	bf 4f       	sbci	r27, 0xFF	; 255
     5f2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1918>
     5f6:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1918+0x1>
     5fa:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1918+0x2>
     5fe:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1918+0x3>
            break;
     602:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     604:	98 b3       	in	r25, 0x18	; 24
     606:	80 e2       	ldi	r24, 0x20	; 32
     608:	89 27       	eor	r24, r25
     60a:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     60c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     610:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     614:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     618:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     61c:	86 50       	subi	r24, 0x06	; 6
     61e:	9f 4f       	sbci	r25, 0xFF	; 255
     620:	af 4f       	sbci	r26, 0xFF	; 255
     622:	bf 4f       	sbci	r27, 0xFF	; 255
     624:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1918>
     628:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1918+0x1>
     62c:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1918+0x2>
     630:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1918+0x3>
            break;
     634:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     636:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     63a:	81 11       	cpse	r24, r1
     63c:	19 c0       	rjmp	.+50     	; 0x670 <accum_led_process+0xda>
            {
                state_led = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
                LED_ACUM_ON;
     644:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     646:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     64a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     64e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     652:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     656:	8c 50       	subi	r24, 0x0C	; 12
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	af 4f       	sbci	r26, 0xFF	; 255
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1918>
     662:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1918+0x1>
     666:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1918+0x2>
     66a:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1918+0x3>
     66e:	08 95       	ret
            }
            else if (state_led == 1)
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	69 f5       	brne	.+90     	; 0x6ce <accum_led_process+0x138>
            {
                state_led = 0;
     674:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
                LED_ACUM_OFF;
     678:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     67a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     67e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     682:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     686:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     68a:	84 52       	subi	r24, 0x24	; 36
     68c:	9a 4f       	sbci	r25, 0xFA	; 250
     68e:	af 4f       	sbci	r26, 0xFF	; 255
     690:	bf 4f       	sbci	r27, 0xFF	; 255
     692:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1918>
     696:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1918+0x1>
     69a:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1918+0x2>
     69e:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1918+0x3>
     6a2:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     6a4:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     6a6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1918>
     6aa:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1918+0x1>
     6ae:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1918+0x2>
     6b2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1918+0x3>
     6b6:	88 51       	subi	r24, 0x18	; 24
     6b8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ba:	af 4f       	sbci	r26, 0xFF	; 255
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1918>
     6c2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1918+0x1>
     6c6:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1918+0x2>
     6ca:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1918+0x3>
     6ce:	08 95       	ret

000006d0 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     6d0:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     6d2:	97 b1       	in	r25, 0x07	; 7
     6d4:	98 7f       	andi	r25, 0xF8	; 248
     6d6:	87 70       	andi	r24, 0x07	; 7
     6d8:	89 2b       	or	r24, r25
     6da:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     6dc:	37 9a       	sbi	0x06, 7	; 6
     6de:	08 95       	ret

000006e0 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     6e0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     6e2:	36 99       	sbic	0x06, 6	; 6
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     6e6:	84 b1       	in	r24, 0x04	; 4
     6e8:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     6ea:	08 95       	ret

000006ec <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     6ec:	0e 94 68 03 	call	0x6d0	; 0x6d0 <adc_setchannel>
	return adc_readsel();
     6f0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_readsel>
}
     6f4:	08 95       	ret

000006f6 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     6f6:	dc 01       	movw	r26, r24
     6f8:	16 96       	adiw	r26, 0x06	; 6
     6fa:	ed 91       	ld	r30, X+
     6fc:	fc 91       	ld	r31, X
     6fe:	17 97       	sbiw	r26, 0x07	; 7
     700:	20 81       	ld	r18, Z
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	18 96       	adiw	r26, 0x08	; 8
     708:	0c 90       	ld	r0, X
     70a:	02 c0       	rjmp	.+4      	; 0x710 <read_button+0x1a>
     70c:	f5 95       	asr	r31
     70e:	e7 95       	ror	r30
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <read_button+0x16>
     714:	cf 01       	movw	r24, r30
     716:	81 70       	andi	r24, 0x01	; 1
     718:	08 95       	ret

0000071a <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     71a:	e1 e4       	ldi	r30, 0x41	; 65
     71c:	f4 e0       	ldi	r31, 0x04	; 4
     71e:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     724:	14 86       	std	Z+12, r1	; 0x0c
     726:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     728:	12 86       	std	Z+10, r1	; 0x0a
     72a:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     72c:	16 86       	std	Z+14, r1	; 0x0e
     72e:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     730:	26 e3       	ldi	r18, 0x36	; 54
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	37 83       	std	Z+7, r19	; 0x07
     736:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     73c:	e4 e1       	ldi	r30, 0x14	; 20
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     742:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     744:	14 86       	std	Z+12, r1	; 0x0c
     746:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     748:	12 86       	std	Z+10, r1	; 0x0a
     74a:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     74c:	16 86       	std	Z+14, r1	; 0x0e
     74e:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     750:	37 83       	std	Z+7, r19	; 0x07
     752:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     754:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     756:	e3 e2       	ldi	r30, 0x23	; 35
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     75c:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     75e:	14 86       	std	Z+12, r1	; 0x0c
     760:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     762:	12 86       	std	Z+10, r1	; 0x0a
     764:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     766:	16 86       	std	Z+14, r1	; 0x0e
     768:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     76a:	37 83       	std	Z+7, r19	; 0x07
     76c:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     772:	e1 e0       	ldi	r30, 0x01	; 1
     774:	f4 e0       	ldi	r31, 0x04	; 4
     776:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     778:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     77a:	14 86       	std	Z+12, r1	; 0x0c
     77c:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     77e:	12 86       	std	Z+10, r1	; 0x0a
     780:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     782:	16 86       	std	Z+14, r1	; 0x0e
     784:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     786:	40 e3       	ldi	r20, 0x30	; 48
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	57 83       	std	Z+7, r21	; 0x07
     78c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     792:	e2 ef       	ldi	r30, 0xF2	; 242
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     798:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     79a:	14 86       	std	Z+12, r1	; 0x0c
     79c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     79e:	12 86       	std	Z+10, r1	; 0x0a
     7a0:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     7a2:	16 86       	std	Z+14, r1	; 0x0e
     7a4:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     7a6:	37 83       	std	Z+7, r19	; 0x07
     7a8:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     7aa:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     7ac:	e2 e3       	ldi	r30, 0x32	; 50
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     7b2:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     7b4:	14 86       	std	Z+12, r1	; 0x0c
     7b6:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     7b8:	12 86       	std	Z+10, r1	; 0x0a
     7ba:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     7bc:	16 86       	std	Z+14, r1	; 0x0e
     7be:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     7c0:	69 e3       	ldi	r22, 0x39	; 57
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	77 83       	std	Z+7, r23	; 0x07
     7c6:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     7c8:	a4 e0       	ldi	r26, 0x04	; 4
     7ca:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     7cc:	e0 e5       	ldi	r30, 0x50	; 80
     7ce:	f4 e0       	ldi	r31, 0x04	; 4
     7d0:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     7d2:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     7d4:	14 86       	std	Z+12, r1	; 0x0c
     7d6:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     7d8:	12 86       	std	Z+10, r1	; 0x0a
     7da:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     7dc:	16 86       	std	Z+14, r1	; 0x0e
     7de:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     7e0:	43 e3       	ldi	r20, 0x33	; 51
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	57 83       	std	Z+7, r21	; 0x07
     7e6:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     7e8:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     7ea:	ef e5       	ldi	r30, 0x5F	; 95
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     7f0:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     7f2:	14 86       	std	Z+12, r1	; 0x0c
     7f4:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     7f6:	12 86       	std	Z+10, r1	; 0x0a
     7f8:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     7fa:	16 86       	std	Z+14, r1	; 0x0e
     7fc:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     7fe:	37 83       	std	Z+7, r19	; 0x07
     800:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     802:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     804:	e4 ed       	ldi	r30, 0xD4	; 212
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     80a:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     80c:	14 86       	std	Z+12, r1	; 0x0c
     80e:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     810:	12 86       	std	Z+10, r1	; 0x0a
     812:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     814:	16 86       	std	Z+14, r1	; 0x0e
     816:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     818:	77 83       	std	Z+7, r23	; 0x07
     81a:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     81c:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     81e:	e3 ee       	ldi	r30, 0xE3	; 227
     820:	f3 e0       	ldi	r31, 0x03	; 3
     822:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     824:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     826:	14 86       	std	Z+12, r1	; 0x0c
     828:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     82a:	12 86       	std	Z+10, r1	; 0x0a
     82c:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     82e:	16 86       	std	Z+14, r1	; 0x0e
     830:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     832:	57 83       	std	Z+7, r21	; 0x07
     834:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	08 95       	ret

0000083a <process_button>:
}

void process_button(void)
{
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     848:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     84c:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     850:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     854:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     858:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer_button>
     85c:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer_button+0x1>
     860:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <timer_button+0x2>
     864:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <timer_button+0x3>
     868:	84 17       	cp	r24, r20
     86a:	95 07       	cpc	r25, r21
     86c:	a6 07       	cpc	r26, r22
     86e:	b7 07       	cpc	r27, r23
     870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
     872:	85 c0       	rjmp	.+266    	; 0x97e <__stack+0x11f>
	{
		timer_button = mktime.ms + 20;
     874:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
     878:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
     87c:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
     880:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
     884:	44 96       	adiw	r24, 0x14	; 20
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
     88a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <timer_button>
     88e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <timer_button+0x1>
     892:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <timer_button+0x2>
     896:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <timer_button+0x3>
     89a:	c0 e6       	ldi	r28, 0x60	; 96
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	0f 2e       	mov	r0, r31
     8a0:	f4 e7       	ldi	r31, 0x74	; 116
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
     8ae:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     8b0:	88 81       	ld	r24, Y
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
			if(red_val != but_tab[i]->value)
     8b8:	e8 81       	ld	r30, Y
     8ba:	f9 81       	ldd	r31, Y+1	; 0x01
     8bc:	95 81       	ldd	r25, Z+5	; 0x05
     8be:	89 17       	cp	r24, r25
     8c0:	e1 f0       	breq	.+56     	; 0x8fa <__stack+0x9b>
			{
				but_tab[i]->value = red_val;
     8c2:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <__stack+0x81>
     8c8:	88 81       	ld	r24, Y
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	dc 01       	movw	r26, r24
     8ce:	19 96       	adiw	r26, 0x09	; 9
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	1a 97       	sbiw	r26, 0x0a	; 10
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__stack+0x7d>
     8da:	41 c0       	rjmp	.+130    	; 0x95e <__stack+0xff>
				but_tab[i]->rise_callback(but_tab[i]);
     8dc:	09 95       	icall
     8de:	3f c0       	rjmp	.+126    	; 0x95e <__stack+0xff>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     8e0:	81 11       	cpse	r24, r1
     8e2:	3d c0       	rjmp	.+122    	; 0x95e <__stack+0xff>
     8e4:	88 81       	ld	r24, Y
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	dc 01       	movw	r26, r24
     8ea:	1b 96       	adiw	r26, 0x0b	; 11
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	1c 97       	sbiw	r26, 0x0c	; 12
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	21 f0       	breq	.+8      	; 0x8fe <__stack+0x9f>
				but_tab[i]->fall_callback(but_tab[i]);
     8f6:	09 95       	icall
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
			}
			//timer
			if (red_val == 0)
     8fa:	81 11       	cpse	r24, r1
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__stack+0xff>
			{
				but_tab[i]->tim_cnt++;
     8fe:	d8 01       	movw	r26, r16
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	a2 81       	ldd	r26, Z+2	; 0x02
     90a:	b3 81       	ldd	r27, Z+3	; 0x03
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	a1 1d       	adc	r26, r1
     910:	b1 1d       	adc	r27, r1
     912:	80 83       	st	Z, r24
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	a2 83       	std	Z+2, r26	; 0x02
     918:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     91a:	d8 01       	movw	r26, r16
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	a2 81       	ldd	r26, Z+2	; 0x02
     926:	b3 81       	ldd	r27, Z+3	; 0x03
     928:	88 97       	sbiw	r24, 0x28	; 40
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	10 f1       	brcs	.+68     	; 0x974 <__stack+0x115>
     930:	84 81       	ldd	r24, Z+4	; 0x04
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	f9 f0       	breq	.+62     	; 0x974 <__stack+0x115>
				{
					if (but_tab[i]->timer_callback != 0)
     936:	05 84       	ldd	r0, Z+13	; 0x0d
     938:	f6 85       	ldd	r31, Z+14	; 0x0e
     93a:	e0 2d       	mov	r30, r0
     93c:	30 97       	sbiw	r30, 0x00	; 0
     93e:	19 f0       	breq	.+6      	; 0x946 <__stack+0xe7>
					but_tab[i]->timer_callback(&button1);
     940:	81 e4       	ldi	r24, 0x41	; 65
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     946:	d8 01       	movw	r26, r16
     948:	ed 91       	ld	r30, X+
     94a:	fc 91       	ld	r31, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	10 82       	st	Z, r1
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	d4 82       	std	Z+4, r13	; 0x04
     95c:	0b c0       	rjmp	.+22     	; 0x974 <__stack+0x115>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     95e:	d8 01       	movw	r26, r16
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	10 82       	st	Z, r1
     968:	11 82       	std	Z+1, r1	; 0x01
     96a:	12 82       	std	Z+2, r1	; 0x02
     96c:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	14 82       	std	Z+4, r1	; 0x04
     974:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     976:	ce 15       	cp	r28, r14
     978:	df 05       	cpc	r29, r15
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x11f>
     97c:	98 cf       	rjmp	.-208    	; 0x8ae <__stack+0x4f>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	08 95       	ret

0000098e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     98e:	0e 94 8d 03 	call	0x71a	; 0x71a <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     992:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     994:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     996:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     998:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     99a:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     99c:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     99e:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     9a0:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     9a2:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     9a4:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     9a6:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     9a8:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     9aa:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     9ac:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     9ae:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     9b0:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     9b2:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     9b4:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     9b6:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     9b8:	a8 9a       	sbi	0x15, 0	; 21
     9ba:	08 95       	ret

000009bc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9bc:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     9c0:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     9c4:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     9c8:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     9cc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     9d0:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     9d4:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     9d8:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     9dc:	84 17       	cp	r24, r20
     9de:	95 07       	cpc	r25, r21
     9e0:	a6 07       	cpc	r26, r22
     9e2:	b7 07       	cpc	r27, r23
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <buzzer_process+0x2c>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <buzzer_process+0xea>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER))
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <buzzer_process+0x38>
     9f2:	59 c0       	rjmp	.+178    	; 0xaa6 <buzzer_process+0xea>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9f4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     9f8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     9fc:	95 ff       	sbrs	r25, 5
     9fe:	37 c0       	rjmp	.+110    	; 0xa6e <buzzer_process+0xb2>
     a00:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_state>
     a04:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_state+0x1>
     a08:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_state+0x2>
     a0c:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_state+0x3>
     a10:	89 2b       	or	r24, r25
     a12:	8a 2b       	or	r24, r26
     a14:	8b 2b       	or	r24, r27
     a16:	59 f5       	brne	.+86     	; 0xa6e <buzzer_process+0xb2>
			{
				ON_BUZZER;
     a18:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a1a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     a1e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     a22:	9f 7d       	andi	r25, 0xDF	; 223
     a24:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
     a28:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				buzzer_state = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_state>
     a38:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_state+0x1>
     a3c:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <buzzer_state+0x2>
     a40:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 100;
     a44:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     a48:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     a4c:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     a50:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     a54:	8c 59       	subi	r24, 0x9C	; 156
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	af 4f       	sbci	r26, 0xFF	; 255
     a5a:	bf 4f       	sbci	r27, 0xFF	; 255
     a5c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     a60:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     a64:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     a68:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     a6c:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a6e:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a70:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buzzer_state>
     a74:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <buzzer_state+0x1>
     a78:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <buzzer_state+0x2>
     a7c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 50;
     a80:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     a84:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     a88:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     a8c:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     a90:	c2 96       	adiw	r24, 0x32	; 50
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     a9a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     a9e:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     aa2:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     aa6:	08 95       	ret

00000aa8 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     aa8:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     aaa:	c0 98       	cbi	0x18, 0	; 24
     aac:	08 95       	ret

00000aae <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     aae:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     ab2:	88 23       	and	r24, r24
     ab4:	19 f0       	breq	.+6      	; 0xabc <button_1_menu+0xe>
		configured_parameter--;
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <configured_parameter>
     abc:	08 95       	ret

00000abe <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     abe:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     ac2:	89 30       	cpi	r24, 0x09	; 9
     ac4:	18 f4       	brcc	.+6      	; 0xacc <button_2_menu+0xe>
		configured_parameter++;
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <configured_parameter>
     acc:	08 95       	ret

00000ace <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     ace:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	ec 58       	subi	r30, 0x8C	; 140
     ad8:	fb 4f       	sbci	r31, 0xFB	; 251
     ada:	20 81       	ld	r18, Z
     adc:	22 23       	and	r18, r18
     ade:	29 f0       	breq	.+10     	; 0xaea <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     ae0:	fc 01       	movw	r30, r24
     ae2:	ec 58       	subi	r30, 0x8C	; 140
     ae4:	fb 4f       	sbci	r31, 0xFB	; 251
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	20 83       	st	Z, r18
     aea:	08 95       	ret

00000aec <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     aec:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	ec 58       	subi	r30, 0x8C	; 140
     af6:	fb 4f       	sbci	r31, 0xFB	; 251
     af8:	20 81       	ld	r18, Z
     afa:	fc 01       	movw	r30, r24
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ec 58       	subi	r30, 0x8C	; 140
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	30 81       	ld	r19, Z
     b06:	23 17       	cp	r18, r19
     b08:	28 f4       	brcc	.+10     	; 0xb14 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b0a:	fc 01       	movw	r30, r24
     b0c:	ec 58       	subi	r30, 0x8C	; 140
     b0e:	fb 4f       	sbci	r31, 0xFB	; 251
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	20 83       	st	Z, r18
     b14:	08 95       	ret

00000b16 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     b16:	a5 e7       	ldi	r26, 0x75	; 117
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e4 e7       	ldi	r30, 0x74	; 116
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	2e e7       	ldi	r18, 0x7E	; 126
     b20:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     b22:	8c 91       	ld	r24, X
     b24:	81 93       	st	Z+, r24
     b26:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     b28:	e2 17       	cp	r30, r18
     b2a:	f3 07       	cpc	r31, r19
     b2c:	d1 f7       	brne	.-12     	; 0xb22 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     b2e:	08 95       	ret

00000b30 <enter_to_menu>:
	return 0;
}

static void enter_to_menu(menuState_t state)
{
	dark_menu_state = state;
     b30:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     b34:	87 e5       	ldi	r24, 0x57	; 87
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <button1+0xc>
     b3c:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <button1+0xb>
	button2.fall_callback = button_2_menu;
     b40:	8f e5       	ldi	r24, 0x5F	; 95
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <button2+0xc>
     b48:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <button2+0xb>
	button3.fall_callback = button_3_menu;
     b4c:	83 ec       	ldi	r24, 0xC3	; 195
     b4e:	95 e0       	ldi	r25, 0x05	; 5
     b50:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <button3+0xc>
     b54:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <button3+0xb>
	button5.fall_callback = button_5_menu;
     b58:	87 e6       	ldi	r24, 0x67	; 103
     b5a:	95 e0       	ldi	r25, 0x05	; 5
     b5c:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <button5+0xc>
     b60:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <button5+0xb>
	button6.fall_callback = button_6_menu;
     b64:	86 e7       	ldi	r24, 0x76	; 118
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <button6+0xc>
     b6c:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <button6+0xb>
	button7.fall_callback = button_7_menu;
     b70:	8b e8       	ldi	r24, 0x8B	; 139
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <button7+0xc>
     b78:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
     b84:	08 95       	ret

00000b86 <button_3_menu>:

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b86:	64 e7       	ldi	r22, 0x74	; 116
     b88:	74 e0       	ldi	r23, 0x04	; 4
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	0e 94 06 11 	call	0x220c	; 0x220c <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     b96:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
	LED_MOTOR_OFF;
     b9a:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     b9c:	96 98       	cbi	0x12, 6	; 18
     b9e:	08 95       	ret

00000ba0 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     ba0:	cf 93       	push	r28
	pass[pass_len++] = number;
     ba2:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <pass_len>
     ba6:	c1 e0       	ldi	r28, 0x01	; 1
     ba8:	ce 0f       	add	r28, r30
     baa:	c0 93 7f 04 	sts	0x047F, r28	; 0x80047f <pass_len>
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e2 59       	subi	r30, 0x92	; 146
     bb2:	fb 4f       	sbci	r31, 0xFB	; 251
     bb4:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     bb6:	4c 2f       	mov	r20, r28
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	67 ec       	ldi	r22, 0xC7	; 199
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	8e e6       	ldi	r24, 0x6E	; 110
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	0e 94 4d 21 	call	0x429a	; 0x429a <memcmp>
     bc6:	89 2b       	or	r24, r25
     bc8:	51 f0       	breq	.+20     	; 0xbde <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     bca:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <pass_len>
	memset(pass, 0, sizeof(pass));
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	ee e6       	ldi	r30, 0x6E	; 110
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	df 01       	movw	r26, r30
     bd6:	1d 92       	st	X+, r1
     bd8:	8a 95       	dec	r24
     bda:	e9 f7       	brne	.-6      	; 0xbd6 <pass_add_number+0x36>
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <pass_add_number+0x48>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     bde:	c6 30       	cpi	r28, 0x06	; 6
     be0:	19 f4       	brne	.+6      	; 0xbe8 <pass_add_number+0x48>
		//debug_msg("enter_to_menu\n");
		enter_to_menu(MENU_PARAMETERS);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 98 05 	call	0xb30	; 0xb30 <enter_to_menu>
	}
}
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     bf2:	08 95       	ret

00000bf4 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     bfa:	08 95       	ret

00000bfc <button_5_number>:
	pass_add_number(2);
}

static void button_5_number(void *pv)
{
	pass_add_number(3);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c02:	08 95       	ret

00000c04 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c0a:	08 95       	ret

00000c0c <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c12:	08 95       	ret

00000c14 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c1a:	08 95       	ret

00000c1c <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	08 95       	ret

00000c20 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state > MENU_PASSWORD)
     c20:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     c24:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     c28:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     c2c:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     c30:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <menu_timer.2280>
     c34:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <menu_timer.2280+0x1>
     c38:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <menu_timer.2280+0x2>
     c3c:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <menu_timer.2280+0x3>
     c40:	84 17       	cp	r24, r20
     c42:	95 07       	cpc	r25, r21
     c44:	a6 07       	cpc	r26, r22
     c46:	b7 07       	cpc	r27, r23
     c48:	08 f0       	brcs	.+2      	; 0xc4c <menu_process+0x2c>
     c4a:	90 c0       	rjmp	.+288    	; 0xd6c <menu_process+0x14c>
     c4c:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <dark_menu_state>
     c50:	88 23       	and	r24, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <menu_process+0x36>
     c54:	8b c0       	rjmp	.+278    	; 0xd6c <menu_process+0x14c>
	{
		menu_timer = mktime.ms + 250;
     c56:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
     c5a:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
     c5e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
     c62:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
     c66:	46 50       	subi	r20, 0x06	; 6
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	6f 4f       	sbci	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <menu_timer.2280>
     c72:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <menu_timer.2280+0x1>
     c76:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <menu_timer.2280+0x2>
     c7a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <menu_timer.2280+0x3>
		if (dark_menu_state == MENU_SERVO)
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	39 f4       	brne	.+14     	; 0xc90 <menu_process+0x70>
		{
			if (configured_parameter < MENU_CLOSE_SERVO_REGULATION)
				configured_parameter = MENU_CLOSE_SERVO_REGULATION;
			if (configured_parameter > MENU_OPEN_SERVO_REGULATION)
     c82:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	18 f0       	brcs	.+6      	; 0xc90 <menu_process+0x70>
				configured_parameter = MENU_OPEN_SERVO_REGULATION;	
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <configured_parameter>
		}
		if (segment1.state == SEG_MENU)
     c90:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
     c94:	87 30       	cpi	r24, 0x07	; 7
     c96:	31 f4       	brne	.+12     	; 0xca4 <menu_process+0x84>
			disp_set_number(&segment1, configured_parameter);
     c98:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <configured_parameter>
     c9c:	80 e9       	ldi	r24, 0x90	; 144
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
		if (segment2.state == SEG_MENU)
     ca4:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
     ca8:	87 30       	cpi	r24, 0x07	; 7
     caa:	51 f4       	brne	.+20     	; 0xcc0 <menu_process+0xa0>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     cac:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <configured_parameter>
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ec 58       	subi	r30, 0x8C	; 140
     cb4:	fb 4f       	sbci	r31, 0xFB	; 251
     cb6:	60 81       	ld	r22, Z
     cb8:	8b e8       	ldi	r24, 0x8B	; 139
     cba:	94 e0       	ldi	r25, 0x04	; 4
     cbc:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     cc0:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	49 f5       	brne	.+82     	; 0xd1a <menu_process+0xfa>
     cc8:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
     ccc:	88 30       	cpi	r24, 0x08	; 8
     cce:	29 f5       	brne	.+74     	; 0xd1a <menu_process+0xfa>
		{
			menu_timer = 1000 + mktime.ms;
     cd0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
     cd4:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
     cd8:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
     cdc:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
     ce0:	88 51       	subi	r24, 0x18	; 24
     ce2:	9c 4f       	sbci	r25, 0xFC	; 252
     ce4:	af 4f       	sbci	r26, 0xFF	; 255
     ce6:	bf 4f       	sbci	r27, 0xFF	; 255
     ce8:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <menu_timer.2280>
     cec:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <menu_timer.2280+0x1>
     cf0:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <menu_timer.2280+0x2>
     cf4:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <menu_timer.2280+0x3>
			DispD2.value = 's';
     cf8:	83 e7       	ldi	r24, 0x73	; 115
     cfa:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD2>
			DispD1.value = 'a';
     cfe:	81 e6       	ldi	r24, 0x61	; 97
     d00:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD1>
			DispD3.value = 'p';
     d04:	80 e7       	ldi	r24, 0x70	; 112
     d06:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <DispD3>
			DispD4.value = 0;
     d0a:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d0e:	8a e0       	ldi	r24, 0x0A	; 10
     d10:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d14:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
			
			return;
     d18:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d1a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
     d1e:	8a 30       	cpi	r24, 0x0A	; 10
     d20:	51 f4       	brne	.+20     	; 0xd36 <menu_process+0x116>
     d22:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
     d26:	8a 30       	cpi	r24, 0x0A	; 10
     d28:	31 f4       	brne	.+12     	; 0xd36 <menu_process+0x116>
		{
			segment1.state = SEG_OFF;
     d2a:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <segment1+0x4>
			segment2.state = SEG_OFF;
     d2e:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <segment2+0x4>
			dark_menu_state = MENU_PASSWORD;
     d32:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     d36:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     d3a:	81 11       	cpse	r24, r1
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <menu_process+0x122>
		{
			servo_regulation(0);
     d3e:	0e 94 06 12 	call	0x240c	; 0x240c <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     d42:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	19 f4       	brne	.+6      	; 0xd50 <menu_process+0x130>
		{
			servo_regulation(99);
     d4a:	83 e6       	ldi	r24, 0x63	; 99
     d4c:	0e 94 06 12 	call	0x240c	; 0x240c <servo_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MINIMUM_REGULATION) {
     d50:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     d54:	88 30       	cpi	r24, 0x08	; 8
     d56:	19 f4       	brne	.+6      	; 0xd5e <menu_process+0x13e>
			motor_regulation(10);
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	0e 94 f5 07 	call	0xfea	; 0xfea <motor_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MAXIMUM_REGULATION) {
     d5e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <configured_parameter>
     d62:	89 30       	cpi	r24, 0x09	; 9
     d64:	19 f4       	brne	.+6      	; 0xd6c <menu_process+0x14c>
			motor_regulation(99);
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	0e 94 f5 07 	call	0xfea	; 0xfea <motor_regulation>
     d6c:	08 95       	ret

00000d6e <check_servo_config_menu>:
	enter_to_menu(MENU_SERVO);
	debug_msg("enter_to_menu_servo\n");
}

void check_servo_config_menu(void)
{
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
	timer_t menu_timer = mktime.ms + 20;
     d7a:	c0 90 b8 04 	lds	r12, 0x04B8	; 0x8004b8 <mktime+0x2>
     d7e:	d0 90 b9 04 	lds	r13, 0x04B9	; 0x8004b9 <mktime+0x3>
     d82:	e0 90 ba 04 	lds	r14, 0x04BA	; 0x8004ba <mktime+0x4>
     d86:	f0 90 bb 04 	lds	r15, 0x04BB	; 0x8004bb <mktime+0x5>
     d8a:	84 e1       	ldi	r24, 0x14	; 20
     d8c:	c8 0e       	add	r12, r24
     d8e:	d1 1c       	adc	r13, r1
     d90:	e1 1c       	adc	r14, r1
     d92:	f1 1c       	adc	r15, r1
	while (menu_timer > mktime.ms)
     d94:	c6 eb       	ldi	r28, 0xB6	; 182
     d96:	d4 e0       	ldi	r29, 0x04	; 4
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <check_servo_config_menu+0x50>
	{
		if (read_button(&button1) == 0) {
     d9a:	81 e4       	ldi	r24, 0x41	; 65
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
     da2:	81 11       	cpse	r24, r1
     da4:	0c c0       	rjmp	.+24     	; 0xdbe <check_servo_config_menu+0x50>
	}
}

static void enter_servo_config(void *pv)
{
	enter_to_menu(MENU_SERVO);
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 98 05 	call	0xb30	; 0xb30 <enter_to_menu>
	debug_msg("enter_to_menu_servo\n");
     dac:	82 eb       	ldi	r24, 0xB2	; 178
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <check_servo_config_menu+0x62>
}

void check_servo_config_menu(void)
{
	timer_t menu_timer = mktime.ms + 20;
	while (menu_timer > mktime.ms)
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	ac 81       	ldd	r26, Y+4	; 0x04
     dc4:	bd 81       	ldd	r27, Y+5	; 0x05
     dc6:	8c 15       	cp	r24, r12
     dc8:	9d 05       	cpc	r25, r13
     dca:	ae 05       	cpc	r26, r14
     dcc:	bf 05       	cpc	r27, r15
     dce:	28 f3       	brcs	.-54     	; 0xd9a <check_servo_config_menu+0x2c>
		if (read_button(&button1) == 0) {
			enter_servo_config(NULL);
			break;
		}
	}
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <init_menu>:
void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <button1+0xc>
     de6:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <button1+0xb>
	button2.fall_callback = button_2_number;
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <button2+0xc>
     df2:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <button2+0xb>
	button3.fall_callback = button_3_number;
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <button3+0xc>
     dfe:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <button3+0xb>
	button5.fall_callback = button_5_number;
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	95 e0       	ldi	r25, 0x05	; 5
     e06:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <button5+0xc>
     e0a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <button5+0xb>
	button6.fall_callback = button_6_number;
     e0e:	8a ef       	ldi	r24, 0xFA	; 250
     e10:	95 e0       	ldi	r25, 0x05	; 5
     e12:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <button6+0xc>
     e16:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <button6+0xb>
	button7.fall_callback = button_7_number;
     e1a:	86 ef       	ldi	r24, 0xF6	; 246
     e1c:	95 e0       	ldi	r25, 0x05	; 5
     e1e:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <button7+0xc>
     e22:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e26:	64 e7       	ldi	r22, 0x74	; 116
     e28:	74 e0       	ldi	r23, 0x04	; 4
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	0e 94 4e 11 	call	0x229c	; 0x229c <mem_read_data>
     e30:	a4 e7       	ldi	r26, 0x74	; 116
     e32:	b4 e0       	ldi	r27, 0x04	; 4
     e34:	e4 e7       	ldi	r30, 0x74	; 116
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	48 e8       	ldi	r20, 0x88	; 136
     e3a:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e3c:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e3e:	9c 91       	ld	r25, X
     e40:	80 81       	ld	r24, Z
     e42:	89 17       	cp	r24, r25
     e44:	18 f4       	brcc	.+6      	; 0xe4c <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	8c 93       	st	X, r24
			check_error++;
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e50:	e4 17       	cp	r30, r20
     e52:	f5 07       	cpc	r31, r21
     e54:	a1 f7       	brne	.-24     	; 0xe3e <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e56:	22 23       	and	r18, r18
     e58:	29 f0       	breq	.+10     	; 0xe64 <init_menu+0x86>

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e5a:	64 e7       	ldi	r22, 0x74	; 116
     e5c:	74 e0       	ldi	r23, 0x04	; 4
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	0e 94 06 11 	call	0x220c	; 0x220c <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e64:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <pass_len>
	memset(pass, 0, sizeof(pass));
     e68:	86 e0       	ldi	r24, 0x06	; 6
     e6a:	ee e6       	ldi	r30, 0x6E	; 110
     e6c:	f4 e0       	ldi	r31, 0x04	; 4
     e6e:	df 01       	movw	r26, r30
     e70:	1d 92       	st	X+, r1
     e72:	8a 95       	dec	r24
     e74:	e9 f7       	brne	.-6      	; 0xe70 <init_menu+0x92>
	button6.fall_callback = button_6_number;
	button7.fall_callback = button_7_number;
	read_menu_parametrs();
	check_menu_parameters();
	clear_password();
	check_servo_config_menu();
     e76:	0e 94 b7 06 	call	0xd6e	; 0xd6e <check_servo_config_menu>
     e7a:	08 95       	ret

00000e7c <dark_menu_get_value>:
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e7c:	8a 30       	cpi	r24, 0x0A	; 10
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e80:	e8 2f       	mov	r30, r24
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ec 58       	subi	r30, 0x8C	; 140
     e86:	fb 4f       	sbci	r31, 0xFB	; 251
     e88:	80 81       	ld	r24, Z
     e8a:	08 95       	ret
	}
	return 0;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
}
     e8e:	08 95       	ret

00000e90 <count_pwm>:
	}
	else
	{
		return 0;
	}
}
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	8c 01       	movw	r16, r24
     e9a:	88 e0       	ldi	r24, 0x08	; 8
     e9c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     ea0:	d8 2f       	mov	r29, r24
     ea2:	89 e0       	ldi	r24, 0x09	; 9
     ea4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     ea8:	c8 2f       	mov	r28, r24
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     eb0:	2c 2f       	mov	r18, r28
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	24 56       	subi	r18, 0x64	; 100
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	28 1b       	sub	r18, r24
     eba:	31 09       	sbc	r19, r1
     ebc:	20 9f       	mul	r18, r16
     ebe:	c0 01       	movw	r24, r0
     ec0:	21 9f       	mul	r18, r17
     ec2:	90 0d       	add	r25, r0
     ec4:	30 9f       	mul	r19, r16
     ec6:	90 0d       	add	r25, r0
     ec8:	11 24       	eor	r1, r1
     eca:	63 e6       	ldi	r22, 0x63	; 99
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__divmodhi4>
     ed2:	8d 2f       	mov	r24, r29
     ed4:	86 0f       	add	r24, r22
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <dcmotorpwm_init>:
     ee0:	8d ec       	ldi	r24, 0xCD	; 205
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     eec:	85 e8       	ldi	r24, 0x85	; 133
     eee:	94 e0       	ldi	r25, 0x04	; 4
     ef0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <evTime_init>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <motorD>
     efa:	94 98       	cbi	0x12, 4	; 18
     efc:	15 bc       	out	0x25, r1	; 37
     efe:	8f 9a       	sbi	0x11, 7	; 17
     f00:	97 9a       	sbi	0x12, 7	; 18
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	08 95       	ret

00000f08 <dcmotorpwm_deinit>:
     f08:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <motorD>
     f0c:	15 bc       	out	0x25, r1	; 37
     f0e:	97 9a       	sbi	0x12, 7	; 18
     f10:	94 98       	cbi	0x12, 4	; 18
     f12:	08 95       	ret

00000f14 <dcmotor_is_on>:
     f14:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <motorD>
     f18:	92 50       	subi	r25, 0x02	; 2
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	93 30       	cpi	r25, 0x03	; 3
     f20:	10 f0       	brcs	.+4      	; 0xf26 <dcmotor_is_on+0x12>
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	c9 01       	movw	r24, r18
     f28:	08 95       	ret

00000f2a <dcmotorpwm_stop>:
     f2a:	0e 94 8a 07 	call	0xf14	; 0xf14 <dcmotor_is_on>
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	99 f0       	breq	.+38     	; 0xf58 <dcmotorpwm_stop+0x2e>
     f32:	8b ed       	ldi	r24, 0xDB	; 219
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9f 93       	push	r25
     f38:	8f 93       	push	r24
     f3a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f3e:	15 bc       	out	0x25, r1	; 37
     f40:	97 9a       	sbi	0x12, 7	; 18
     f42:	94 98       	cbi	0x12, 4	; 18
     f44:	e1 e8       	ldi	r30, 0x81	; 129
     f46:	f4 e0       	ldi	r31, 0x04	; 4
     f48:	80 81       	ld	r24, Z
     f4a:	81 83       	std	Z+1, r24	; 0x01
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 83       	st	Z, r24
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	08 95       	ret

00000f5a <dcmotorpwm_start>:
     f5a:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <motorD>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	d9 f4       	brne	.+54     	; 0xf98 <dcmotorpwm_start+0x3e>
     f62:	94 9a       	sbi	0x12, 4	; 18
     f64:	85 b5       	in	r24, 0x25	; 37
     f66:	80 63       	ori	r24, 0x30	; 48
     f68:	85 bd       	out	0x25, r24	; 37
     f6a:	85 b5       	in	r24, 0x25	; 37
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	85 bd       	out	0x25, r24	; 37
     f70:	85 b5       	in	r24, 0x25	; 37
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	85 bd       	out	0x25, r24	; 37
     f76:	e1 e8       	ldi	r30, 0x81	; 129
     f78:	f4 e0       	ldi	r31, 0x04	; 4
     f7a:	80 81       	ld	r24, Z
     f7c:	81 83       	std	Z+1, r24	; 0x01
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	80 83       	st	Z, r24
     f82:	48 ee       	ldi	r20, 0xE8	; 232
     f84:	53 e0       	ldi	r21, 0x03	; 3
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	85 e8       	ldi	r24, 0x85	; 133
     f8c:	94 e0       	ldi	r25, 0x04	; 4
     f8e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	08 95       	ret
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	08 95       	ret

00000f9e <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f9e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <motorD+0x3>
}
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	08 95       	ret

00000fa6 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     fa6:	89 ee       	ldi	r24, 0xE9	; 233
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     fb2:	0e 94 95 07 	call	0xf2a	; 0xf2a <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <motorD>
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	08 95       	ret

00000fc2 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     fc2:	0e 94 8a 07 	call	0xf14	; 0xf14 <dcmotor_is_on>
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <motorD>
		return 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fd4:	08 95       	ret

00000fd6 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     fd6:	0e 94 8a 07 	call	0xf14	; 0xf14 <dcmotor_is_on>
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	29 f0       	breq	.+10     	; 0xfe8 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <motorD>
		return 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fe8:	08 95       	ret

00000fea <motor_regulation>:

void motor_regulation(uint8_t pwm) {
	motorD.state = MOTOR_REGULATION;
     fea:	e1 e8       	ldi	r30, 0x81	; 129
     fec:	f4 e0       	ldi	r31, 0x04	; 4
     fee:	96 e0       	ldi	r25, 0x06	; 6
     ff0:	90 83       	st	Z, r25
	motorD.pwm_value = pwm;
     ff2:	83 83       	std	Z+3, r24	; 0x03
     ff4:	08 95       	ret

00000ff6 <dcmotor_process>:
}

void dcmotor_process(uint8_t value)
{
     ff6:	cf 93       	push	r28
     ff8:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     ffa:	46 e9       	ldi	r20, 0x96	; 150
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e3       	ldi	r24, 0x30	; 48
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 2c 18 	call	0x3058	; 0x3058 <evTime_process_period>
    100a:	89 2b       	or	r24, r25
    100c:	09 f4       	brne	.+2      	; 0x1010 <dcmotor_process+0x1a>
    100e:	49 c0       	rjmp	.+146    	; 0x10a2 <dcmotor_process+0xac>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
    1010:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <motorD>
    1014:	93 30       	cpi	r25, 0x03	; 3
    1016:	b9 f0       	breq	.+46     	; 0x1046 <dcmotor_process+0x50>
    1018:	28 f4       	brcc	.+10     	; 0x1024 <dcmotor_process+0x2e>
    101a:	91 30       	cpi	r25, 0x01	; 1
    101c:	89 f0       	breq	.+34     	; 0x1040 <dcmotor_process+0x4a>
    101e:	92 30       	cpi	r25, 0x02	; 2
    1020:	39 f0       	breq	.+14     	; 0x1030 <dcmotor_process+0x3a>
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <dcmotor_process+0xac>
    1024:	95 30       	cpi	r25, 0x05	; 5
    1026:	79 f1       	breq	.+94     	; 0x1086 <dcmotor_process+0x90>
    1028:	88 f1       	brcs	.+98     	; 0x108c <dcmotor_process+0x96>
    102a:	96 30       	cpi	r25, 0x06	; 6
    102c:	99 f1       	breq	.+102    	; 0x1094 <dcmotor_process+0x9e>
    102e:	39 c0       	rjmp	.+114    	; 0x10a2 <dcmotor_process+0xac>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
    1030:	c0 93 84 04 	sts	0x0484, r28	; 0x800484 <motorD+0x3>
			OCR2 = count_pwm(value);
    1034:	8c 2f       	mov	r24, r28
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    103c:	83 bd       	out	0x23, r24	; 35
			break;
    103e:	31 c0       	rjmp	.+98     	; 0x10a2 <dcmotor_process+0xac>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    1040:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <motorD+0x3>
			break;
    1044:	2e c0       	rjmp	.+92     	; 0x10a2 <dcmotor_process+0xac>

			case MOTOR_TRY:
				if (value <= 50)
    1046:	c3 33       	cpi	r28, 0x33	; 51
    1048:	48 f4       	brcc	.+18     	; 0x105c <dcmotor_process+0x66>
				{
					motorD.pwm_value = value + 20;
    104a:	84 e1       	ldi	r24, 0x14	; 20
    104c:	8c 0f       	add	r24, r28
    104e:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    1058:	83 bd       	out	0x23, r24	; 35
    105a:	23 c0       	rjmp	.+70     	; 0x10a2 <dcmotor_process+0xac>
				}
				else if ((value > 50) && (value <= 70))
    105c:	8d ec       	ldi	r24, 0xCD	; 205
    105e:	8c 0f       	add	r24, r28
    1060:	84 31       	cpi	r24, 0x14	; 20
    1062:	48 f4       	brcc	.+18     	; 0x1076 <dcmotor_process+0x80>
				{
					motorD.pwm_value = value + 15;
    1064:	8f e0       	ldi	r24, 0x0F	; 15
    1066:	8c 0f       	add	r24, r28
    1068:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    1072:	83 bd       	out	0x23, r24	; 35
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <dcmotor_process+0xac>
				}
				else
				{
					motorD.pwm_value = value;
    1076:	c0 93 84 04 	sts	0x0484, r28	; 0x800484 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    107a:	8c 2f       	mov	r24, r28
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    1082:	83 bd       	out	0x23, r24	; 35
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <dcmotor_process+0xac>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1086:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1088:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <dcmotor_process+0xac>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <motorD>
			return;					 //!
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <dcmotor_process+0xac>
				motorD.state = MOTOR_ON;
			}
			break;
			
			case MOTOR_REGULATION:
				motorD.pwm_value = value;
    1094:	c0 93 84 04 	sts	0x0484, r28	; 0x800484 <motorD+0x3>
				OCR2 = count_pwm(value);
    1098:	8c 2f       	mov	r24, r28
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    10a0:	83 bd       	out	0x23, r24	; 35
		
	}
	#if !TEST_APP
	
	#endif
}
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    10a6:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    10a8:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    10aa:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    10ac:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    10ae:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    10b0:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    10b2:	af 9a       	sbi	0x15, 7	; 21
    10b4:	08 95       	ret

000010b6 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    10b6:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    10b8:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    10bc:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    10be:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    10c2:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    10c4:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    10c8:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    10ca:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <DispD4+0x1>
    10ce:	08 95       	ret

000010d0 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    10d0:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    10d2:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    10d4:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    10d6:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    10d8:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10da:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10dc:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10de:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10e0:	e9 e9       	ldi	r30, 0x99	; 153
    10e2:	f4 e0       	ldi	r31, 0x04	; 4
    10e4:	87 e9       	ldi	r24, 0x97	; 151
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10ec:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10ee:	23 ea       	ldi	r18, 0xA3	; 163
    10f0:	34 e0       	ldi	r19, 0x04	; 4
    10f2:	33 83       	std	Z+3, r19	; 0x03
    10f4:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10f6:	a0 e9       	ldi	r26, 0x90	; 144
    10f8:	b4 e0       	ldi	r27, 0x04	; 4
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	3c 93       	st	X, r19
    10fe:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	9c 93       	st	X, r25
    1104:	8e 93       	st	-X, r24
    1106:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    1108:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    110a:	25 e9       	ldi	r18, 0x95	; 149
    110c:	34 e0       	ldi	r19, 0x04	; 4
    110e:	35 83       	std	Z+5, r19	; 0x05
    1110:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    1112:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    1114:	81 ea       	ldi	r24, 0xA1	; 161
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	97 83       	std	Z+7, r25	; 0x07
    111a:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    111c:	eb e8       	ldi	r30, 0x8B	; 139
    111e:	f4 e0       	ldi	r31, 0x04	; 4
    1120:	31 83       	std	Z+1, r19	; 0x01
    1122:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1124:	93 83       	std	Z+3, r25	; 0x03
    1126:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1128:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <off_all_displays>
	clear_display();
    112c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clear_display>
    1130:	08 95       	ret

00001132 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
	if (DispD->value != displaying_value)
    1136:	fc 01       	movw	r30, r24
    1138:	30 81       	ld	r19, Z
    113a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <displaying_value>
    113e:	32 17       	cp	r19, r18
    1140:	09 f4       	brne	.+2      	; 0x1144 <display_set_value+0x12>
    1142:	95 c0       	rjmp	.+298    	; 0x126e <display_set_value+0x13c>
    1144:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1146:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clear_display>
		switch(DispD->value)
    114a:	e8 81       	ld	r30, Y
    114c:	8e 2f       	mov	r24, r30
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	91 05       	cpc	r25, r1
    1154:	08 f0       	brcs	.+2      	; 0x1158 <display_set_value+0x26>
    1156:	88 c0       	rjmp	.+272    	; 0x1268 <display_set_value+0x136>
    1158:	fc 01       	movw	r30, r24
    115a:	e6 5d       	subi	r30, 0xD6	; 214
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    1162:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1164:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1166:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1168:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    116a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    116c:	aa 98       	cbi	0x15, 2	; 21
			break;
    116e:	7c c0       	rjmp	.+248    	; 0x1268 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    1170:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1172:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1174:	79 c0       	rjmp	.+242    	; 0x1268 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1176:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1178:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    117a:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    117c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    117e:	df 98       	cbi	0x1b, 7	; 27
			break;
    1180:	73 c0       	rjmp	.+230    	; 0x1268 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    1182:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1184:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1186:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1188:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    118a:	df 98       	cbi	0x1b, 7	; 27
			break;
    118c:	6d c0       	rjmp	.+218    	; 0x1268 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    118e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1190:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    1192:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1194:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1196:	68 c0       	rjmp	.+208    	; 0x1268 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1198:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    119a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    119c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    119e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11a0:	df 98       	cbi	0x1b, 7	; 27
			break;
    11a2:	62 c0       	rjmp	.+196    	; 0x1268 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    11a4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    11a6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11a8:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    11aa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ac:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ae:	de 98       	cbi	0x1b, 6	; 27
			break;
    11b0:	5b c0       	rjmp	.+182    	; 0x1268 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    11b2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11b4:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11b6:	dd 98       	cbi	0x1b, 5	; 27
			break;
    11b8:	57 c0       	rjmp	.+174    	; 0x1268 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    11ba:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11bc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11be:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11c0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11c2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11c6:	af 98       	cbi	0x15, 7	; 21
			break;
    11c8:	4f c0       	rjmp	.+158    	; 0x1268 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    11ca:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11cc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11ce:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11d0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11d2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11d4:	af 98       	cbi	0x15, 7	; 21
			break;
    11d6:	48 c0       	rjmp	.+144    	; 0x1268 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    11d8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11da:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11dc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11de:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11e0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11e2:	af 98       	cbi	0x15, 7	; 21
			break;
    11e4:	41 c0       	rjmp	.+130    	; 0x1268 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11e6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11e8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ea:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11ec:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ee:	af 98       	cbi	0x15, 7	; 21
			break;
    11f0:	3b c0       	rjmp	.+118    	; 0x1268 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11f2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11f4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11f6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f8:	aa 98       	cbi	0x15, 2	; 21
			break;
    11fa:	36 c0       	rjmp	.+108    	; 0x1268 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11fc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11fe:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1200:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1202:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1204:	af 98       	cbi	0x15, 7	; 21
			break;
    1206:	30 c0       	rjmp	.+96     	; 0x1268 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    1208:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    120a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    120c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    120e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1210:	af 98       	cbi	0x15, 7	; 21
			break;
    1212:	2a c0       	rjmp	.+84     	; 0x1268 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    1214:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    1216:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1218:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    121a:	af 98       	cbi	0x15, 7	; 21
			break;
    121c:	25 c0       	rjmp	.+74     	; 0x1268 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    121e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1220:	af 98       	cbi	0x15, 7	; 21
			break;
    1222:	22 c0       	rjmp	.+68     	; 0x1268 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1224:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1226:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1228:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    122a:	af 98       	cbi	0x15, 7	; 21
			break;
    122c:	1d c0       	rjmp	.+58     	; 0x1268 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    122e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1230:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    1232:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1234:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1236:	af 98       	cbi	0x15, 7	; 21
			break;
    1238:	17 c0       	rjmp	.+46     	; 0x1268 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    123a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    123c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    123e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1240:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1242:	af 98       	cbi	0x15, 7	; 21
			break;
    1244:	11 c0       	rjmp	.+34     	; 0x1268 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1246:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1248:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    124a:	aa 98       	cbi	0x15, 2	; 21
			break;
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    124e:	af 98       	cbi	0x15, 7	; 21
			break;
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1252:	aa 98       	cbi	0x15, 2	; 21
			break;
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1256:	de 98       	cbi	0x1b, 6	; 27
			break;
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    125a:	df 98       	cbi	0x1b, 7	; 27
			break;
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    125e:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    1262:	ad 98       	cbi	0x15, 5	; 21
			break;
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1266:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1268:	88 81       	ld	r24, Y
    126a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <displaying_value>
	}
	
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <on_display>:
void on_display(disp_drv *DispD)
{
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
	off_all_displays();
    127a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <off_all_displays>
	display_set_value(DispD);
    127e:	ce 01       	movw	r24, r28
    1280:	0e 94 99 08 	call	0x1132	; 0x1132 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	c7 39       	cpi	r28, 0x97	; 151
    1288:	d8 07       	cpc	r29, r24
    128a:	29 f4       	brne	.+10     	; 0x1296 <on_display+0x22>
	{
		LED_ON_DISP1;
    128c:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1+0x1>
    1294:	19 c0       	rjmp	.+50     	; 0x12c8 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	c3 3a       	cpi	r28, 0xA3	; 163
    129a:	d8 07       	cpc	r29, r24
    129c:	29 f4       	brne	.+10     	; 0x12a8 <on_display+0x34>
	{
		LED_ON_DISP2;
    129e:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2+0x1>
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	c5 39       	cpi	r28, 0x95	; 149
    12ac:	d8 07       	cpc	r29, r24
    12ae:	29 f4       	brne	.+10     	; 0x12ba <on_display+0x46>
	{
		LED_ON_DISP3;
    12b0:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3+0x1>
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    12ba:	c1 5a       	subi	r28, 0xA1	; 161
    12bc:	d4 40       	sbci	r29, 0x04	; 4
    12be:	21 f4       	brne	.+8      	; 0x12c8 <on_display+0x54>
	{
		LED_ON_DISP4;
    12c0:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <DispD4+0x1>
	}
	#endif
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12da:	c0 81       	ld	r28, Z
    12dc:	d1 81       	ldd	r29, Z+1	; 0x01
    12de:	21 96       	adiw	r28, 0x01	; 1
    12e0:	d1 83       	std	Z+1, r29	; 0x01
    12e2:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12e4:	9e 01       	movw	r18, r28
    12e6:	ad ec       	ldi	r26, 0xCD	; 205
    12e8:	bc ec       	ldi	r27, 0xCC	; 204
    12ea:	0e 94 10 20 	call	0x4020	; 0x4020 <__umulhisi3>
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	9c 01       	movw	r18, r24
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	c8 17       	cp	r28, r24
    1312:	d9 07       	cpc	r29, r25
    1314:	01 f5       	brne	.+64     	; 0x1356 <display_process+0x88>
    1316:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    1318:	10 91 35 02 	lds	r17, 0x0235	; 0x800235 <iteration>
    131c:	14 30       	cpi	r17, 0x04	; 4
    131e:	58 f4       	brcc	.+22     	; 0x1336 <display_process+0x68>
			on_display(disp_tab[iteration]);
    1320:	e1 2f       	mov	r30, r17
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	e7 56       	subi	r30, 0x67	; 103
    132a:	fb 4f       	sbci	r31, 0xFB	; 251
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	0e 94 3a 09 	call	0x1274	; 0x1274 <on_display>
    1334:	02 c0       	rjmp	.+4      	; 0x133a <display_process+0x6c>
		else
			off_all_displays();
    1336:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <off_all_displays>
		iteration++;
    133a:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    133c:	15 30       	cpi	r17, 0x05	; 5
    133e:	19 f0       	breq	.+6      	; 0x1346 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    1340:	10 93 35 02 	sts	0x0235, r17	; 0x800235 <iteration>
    1344:	02 c0       	rjmp	.+4      	; 0x134a <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1346:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    134a:	c0 39       	cpi	r28, 0x90	; 144
    134c:	d1 40       	sbci	r29, 0x01	; 1
    134e:	19 f4       	brne	.+6      	; 0x1356 <display_process+0x88>
    1350:	f7 01       	movw	r30, r14
    1352:	11 82       	std	Z+1, r1	; 0x01
    1354:	10 82       	st	Z, r1
	}
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	08 95       	ret

00001362 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    1362:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1364:	64 36       	cpi	r22, 0x64	; 100
    1366:	f8 f4       	brcc	.+62     	; 0x13a6 <disp_set_number+0x44>
	else if (number == 0)
    1368:	61 11       	cpse	r22, r1
    136a:	08 c0       	rjmp	.+16     	; 0x137c <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    136c:	a0 81       	ld	r26, Z
    136e:	b1 81       	ldd	r27, Z+1	; 0x01
    1370:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    1372:	02 80       	ldd	r0, Z+2	; 0x02
    1374:	f3 81       	ldd	r31, Z+3	; 0x03
    1376:	e0 2d       	mov	r30, r0
    1378:	10 82       	st	Z, r1
    137a:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    137c:	a0 81       	ld	r26, Z
    137e:	b1 81       	ldd	r27, Z+1	; 0x01
    1380:	9d ec       	ldi	r25, 0xCD	; 205
    1382:	69 9f       	mul	r22, r25
    1384:	91 2d       	mov	r25, r1
    1386:	11 24       	eor	r1, r1
    1388:	96 95       	lsr	r25
    138a:	96 95       	lsr	r25
    138c:	96 95       	lsr	r25
    138e:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    1390:	02 80       	ldd	r0, Z+2	; 0x02
    1392:	f3 81       	ldd	r31, Z+3	; 0x03
    1394:	e0 2d       	mov	r30, r0
    1396:	89 2f       	mov	r24, r25
    1398:	88 0f       	add	r24, r24
    139a:	98 2f       	mov	r25, r24
    139c:	99 0f       	add	r25, r25
    139e:	99 0f       	add	r25, r25
    13a0:	89 0f       	add	r24, r25
    13a2:	68 1b       	sub	r22, r24
    13a4:	60 83       	st	Z, r22
    13a6:	08 95       	ret

000013a8 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    13a8:	fc 01       	movw	r30, r24
    13aa:	60 83       	st	Z, r22
    13ac:	08 95       	ret

000013ae <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <dip_set_value+0x12>
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <dip_set_value+0xc>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <dip_set_value+0x18>
    13b8:	08 95       	ret
    13ba:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    13be:	08 95       	ret
    13c0:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    13c4:	08 95       	ret
    13c6:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    13ca:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    13ce:	08 95       	ret

000013d0 <disp_get_state>:
    13d0:	88 23       	and	r24, r24
    13d2:	19 f0       	breq	.+6      	; 0x13da <disp_get_state+0xa>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	29 f0       	breq	.+10     	; 0x13e2 <disp_get_state+0x12>
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <disp_get_state+0x1a>
    13da:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	08 95       	ret
    13e2:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 95       	ret
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <disp_disable_voltage>:
    13f0:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    13f4:	86 30       	cpi	r24, 0x06	; 6
    13f6:	21 f4       	brne	.+8      	; 0x1400 <disp_disable_voltage+0x10>
    13f8:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <disp1_last_state>
    13fc:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
    1400:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    1404:	86 30       	cpi	r24, 0x06	; 6
    1406:	21 f4       	brne	.+8      	; 0x1410 <disp_disable_voltage+0x20>
    1408:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <disp2_last_state>
    140c:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
    1410:	08 95       	ret

00001412 <disp_set_state>:
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	a1 f0       	breq	.+40     	; 0x143e <disp_set_state+0x2c>
    1416:	18 f0       	brcs	.+6      	; 0x141e <disp_set_state+0xc>
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	09 f1       	breq	.+66     	; 0x145e <disp_set_state+0x4c>
    141c:	08 95       	ret
    141e:	66 30       	cpi	r22, 0x06	; 6
    1420:	21 f4       	brne	.+8      	; 0x142a <disp_set_state+0x18>
    1422:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    1426:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <disp1_last_state>
    142a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    142e:	86 30       	cpi	r24, 0x06	; 6
    1430:	19 f4       	brne	.+6      	; 0x1438 <disp_set_state+0x26>
    1432:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <disp1_last_state>
    1436:	08 95       	ret
    1438:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <segment1+0x4>
    143c:	08 95       	ret
    143e:	66 30       	cpi	r22, 0x06	; 6
    1440:	21 f4       	brne	.+8      	; 0x144a <disp_set_state+0x38>
    1442:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    1446:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp2_last_state>
    144a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    144e:	86 30       	cpi	r24, 0x06	; 6
    1450:	19 f4       	brne	.+6      	; 0x1458 <disp_set_state+0x46>
    1452:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp2_last_state>
    1456:	08 95       	ret
    1458:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <segment2+0x4>
    145c:	08 95       	ret
    145e:	66 30       	cpi	r22, 0x06	; 6
    1460:	41 f4       	brne	.+16     	; 0x1472 <disp_set_state+0x60>
    1462:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    1466:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <disp1_last_state>
    146a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    146e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp2_last_state>
    1472:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    1476:	86 30       	cpi	r24, 0x06	; 6
    1478:	29 f4       	brne	.+10     	; 0x1484 <disp_set_state+0x72>
    147a:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp2_last_state>
    147e:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <disp1_last_state>
    1482:	08 95       	ret
    1484:	60 93 94 04 	sts	0x0494, r22	; 0x800494 <segment1+0x4>
    1488:	60 93 8f 04 	sts	0x048F, r22	; 0x80048f <segment2+0x4>
    148c:	08 95       	ret

0000148e <display_set_error>:
    148e:	95 e0       	ldi	r25, 0x05	; 5
    1490:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <segment1+0x4>
    1494:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <segment2+0x4>
    1498:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <error_reason>
    149c:	08 95       	ret

0000149e <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    149e:	68 ef       	ldi	r22, 0xF8	; 248
    14a0:	87 e9       	ldi	r24, 0x97	; 151
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    14a8:	68 ef       	ldi	r22, 0xF8	; 248
    14aa:	83 ea       	ldi	r24, 0xA3	; 163
    14ac:	94 e0       	ldi	r25, 0x04	; 4
    14ae:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    14b2:	68 ef       	ldi	r22, 0xF8	; 248
    14b4:	85 e9       	ldi	r24, 0x95	; 149
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    14bc:	68 ef       	ldi	r22, 0xF8	; 248
    14be:	81 ea       	ldi	r24, 0xA1	; 161
    14c0:	94 e0       	ldi	r25, 0x04	; 4
    14c2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
    14c6:	08 95       	ret

000014c8 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    14c8:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
    14cc:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
    14d0:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
    14d4:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
    14d8:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <timer_disp_process.1979>
    14dc:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <timer_disp_process.1979+0x1>
    14e0:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <timer_disp_process.1979+0x2>
    14e4:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <timer_disp_process.1979+0x3>
    14e8:	48 17       	cp	r20, r24
    14ea:	59 07       	cpc	r21, r25
    14ec:	6a 07       	cpc	r22, r26
    14ee:	7b 07       	cpc	r23, r27
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <disp_process+0x2c>
    14f2:	26 c1       	rjmp	.+588    	; 0x1740 <disp_process+0x278>
	{
        
        switch(segment1.state)
    14f4:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	09 f4       	brne	.+2      	; 0x14fe <disp_process+0x36>
    14fc:	59 c0       	rjmp	.+178    	; 0x15b0 <disp_process+0xe8>
    14fe:	30 f4       	brcc	.+12     	; 0x150c <disp_process+0x44>
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <disp_process+0x3e>
    1504:	87 c0       	rjmp	.+270    	; 0x1614 <disp_process+0x14c>
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	39 f1       	breq	.+78     	; 0x1558 <disp_process+0x90>
    150a:	8e c0       	rjmp	.+284    	; 0x1628 <disp_process+0x160>
    150c:	85 30       	cpi	r24, 0x05	; 5
    150e:	09 f4       	brne	.+2      	; 0x1512 <disp_process+0x4a>
    1510:	74 c0       	rjmp	.+232    	; 0x15fa <disp_process+0x132>
    1512:	48 f1       	brcs	.+82     	; 0x1566 <disp_process+0x9e>
    1514:	86 30       	cpi	r24, 0x06	; 6
    1516:	09 f0       	breq	.+2      	; 0x151a <disp_process+0x52>
    1518:	87 c0       	rjmp	.+270    	; 0x1628 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    151a:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	48 ec       	ldi	r20, 0xC8	; 200
    1524:	52 e4       	ldi	r21, 0x42	; 66
    1526:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    152a:	0e 94 9a 19 	call	0x3334	; 0x3334 <__fixsfsi>
    152e:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <voltage+0x1>
    1532:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <voltage>
            disp_set_number(&segment1, voltage/100);
    1536:	9b 01       	movw	r18, r22
    1538:	36 95       	lsr	r19
    153a:	27 95       	ror	r18
    153c:	36 95       	lsr	r19
    153e:	27 95       	ror	r18
    1540:	ab e7       	ldi	r26, 0x7B	; 123
    1542:	b4 e1       	ldi	r27, 0x14	; 20
    1544:	0e 94 10 20 	call	0x4020	; 0x4020 <__umulhisi3>
    1548:	96 95       	lsr	r25
    154a:	87 95       	ror	r24
    154c:	68 2f       	mov	r22, r24
    154e:	80 e9       	ldi	r24, 0x90	; 144
    1550:	94 e0       	ldi	r25, 0x04	; 4
    1552:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
            break;
    1556:	68 c0       	rjmp	.+208    	; 0x1628 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1558:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <motor_disp_value>
    155c:	80 e9       	ldi	r24, 0x90	; 144
    155e:	94 e0       	ldi	r25, 0x04	; 4
    1560:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
            break;
    1564:	61 c0       	rjmp	.+194    	; 0x1628 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1566:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	31 f0       	breq	.+12     	; 0x157a <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1574:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
                break;
    1578:	57 c0       	rjmp	.+174    	; 0x1628 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    157a:	48 51       	subi	r20, 0x18	; 24
    157c:	5c 4f       	sbci	r21, 0xFC	; 252
    157e:	6f 4f       	sbci	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1979>
    1586:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1979+0x1>
    158a:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1979+0x2>
    158e:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    1592:	83 e7       	ldi	r24, 0x73	; 115
    1594:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD2>
			DispD1.value = 'a';
    1598:	81 e6       	ldi	r24, 0x61	; 97
    159a:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD1>
			DispD3.value = 'p';
    159e:	80 e7       	ldi	r24, 0x70	; 112
    15a0:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <DispD3>
			segment1.state = SEG_VALUE;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
			segment2.state = SEG_VALUE;
    15aa:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
			return;
    15ae:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    15b0:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    15be:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
                break;
    15c2:	32 c0       	rjmp	.+100    	; 0x1628 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    15c4:	48 51       	subi	r20, 0x18	; 24
    15c6:	5c 4f       	sbci	r21, 0xFC	; 252
    15c8:	6f 4f       	sbci	r22, 0xFF	; 255
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1979>
    15d0:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1979+0x1>
    15d4:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1979+0x2>
    15d8:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15dc:	8c e6       	ldi	r24, 0x6C	; 108
    15de:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD2>
			DispD1.value = 'o';
    15e2:	8f e6       	ldi	r24, 0x6F	; 111
    15e4:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD1>
			DispD3.value = 'p';
    15e8:	80 e7       	ldi	r24, 0x70	; 112
    15ea:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <DispD3>
			segment1.state = SEG_VALUE;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <segment1+0x4>
			segment2.state = SEG_VALUE;
    15f4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <segment2+0x4>
            break;
    15f8:	17 c0       	rjmp	.+46     	; 0x1628 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15fa:	85 e6       	ldi	r24, 0x65	; 101
    15fc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD2>
			DispD1.value = 'r';
    1600:	82 e7       	ldi	r24, 0x72	; 114
    1602:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD1>
			disp_set_number(&segment2, error_reason);
    1606:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <error_reason>
    160a:	8b e8       	ldi	r24, 0x8B	; 139
    160c:	94 e0       	ldi	r25, 0x04	; 4
    160e:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
            break;
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1614:	68 ef       	ldi	r22, 0xF8	; 248
    1616:	87 e9       	ldi	r24, 0x97	; 151
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    161e:	68 ef       	ldi	r22, 0xF8	; 248
    1620:	83 ea       	ldi	r24, 0xA3	; 163
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1628:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	19 f1       	breq	.+70     	; 0x1676 <disp_process+0x1ae>
    1630:	48 f1       	brcs	.+82     	; 0x1684 <disp_process+0x1bc>
    1632:	86 30       	cpi	r24, 0x06	; 6
    1634:	19 f0       	breq	.+6      	; 0x163c <disp_process+0x174>
    1636:	8d 30       	cpi	r24, 0x0D	; 13
    1638:	81 f1       	breq	.+96     	; 0x169a <disp_process+0x1d2>
    163a:	6f c0       	rjmp	.+222    	; 0x171a <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    163c:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <voltage>
    1640:	50 91 4a 02 	lds	r21, 0x024A	; 0x80024a <voltage+0x1>
    1644:	9a 01       	movw	r18, r20
    1646:	36 95       	lsr	r19
    1648:	27 95       	ror	r18
    164a:	36 95       	lsr	r19
    164c:	27 95       	ror	r18
    164e:	ab e7       	ldi	r26, 0x7B	; 123
    1650:	b4 e1       	ldi	r27, 0x14	; 20
    1652:	0e 94 10 20 	call	0x4020	; 0x4020 <__umulhisi3>
    1656:	96 95       	lsr	r25
    1658:	87 95       	ror	r24
    165a:	64 e6       	ldi	r22, 0x64	; 100
    165c:	68 9f       	mul	r22, r24
    165e:	90 01       	movw	r18, r0
    1660:	69 9f       	mul	r22, r25
    1662:	30 0d       	add	r19, r0
    1664:	11 24       	eor	r1, r1
    1666:	ba 01       	movw	r22, r20
    1668:	62 1b       	sub	r22, r18
    166a:	73 0b       	sbc	r23, r19
    166c:	8b e8       	ldi	r24, 0x8B	; 139
    166e:	94 e0       	ldi	r25, 0x04	; 4
    1670:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
            break;
    1674:	52 c0       	rjmp	.+164    	; 0x171a <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1676:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <servo_disp_value>
    167a:	8b e8       	ldi	r24, 0x8B	; 139
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
            break;
    1682:	4b c0       	rjmp	.+150    	; 0x171a <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1684:	68 ef       	ldi	r22, 0xF8	; 248
    1686:	85 e9       	ldi	r24, 0x95	; 149
    1688:	94 e0       	ldi	r25, 0x04	; 4
    168a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    168e:	68 ef       	ldi	r22, 0xF8	; 248
    1690:	81 ea       	ldi	r24, 0xA1	; 161
    1692:	94 e0       	ldi	r25, 0x04	; 4
    1694:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
            break;
    1698:	40 c0       	rjmp	.+128    	; 0x171a <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    169a:	44 ef       	ldi	r20, 0xF4	; 244
    169c:	51 e0       	ldi	r21, 0x01	; 1
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	84 e4       	ldi	r24, 0x44	; 68
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	0e 94 2c 18 	call	0x3058	; 0x3058 <evTime_process_period>
    16aa:	89 2b       	or	r24, r25
    16ac:	b1 f1       	breq	.+108    	; 0x171a <disp_process+0x252>
			{
				if (blink_state == 0)
    16ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <blink_state>
    16b2:	81 11       	cpse	r24, r1
    16b4:	0e c0       	rjmp	.+28     	; 0x16d2 <disp_process+0x20a>
				{
					blink_state = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    16bc:	67 ef       	ldi	r22, 0xF7	; 247
    16be:	85 e9       	ldi	r24, 0x95	; 149
    16c0:	94 e0       	ldi	r25, 0x04	; 4
    16c2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    16c6:	67 ef       	ldi	r22, 0xF7	; 247
    16c8:	81 ea       	ldi	r24, 0xA1	; 161
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
    16d0:	24 c0       	rjmp	.+72     	; 0x171a <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    16d2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <blink_state>
					if (blink_cnt == 0) 
    16d6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <blink_cnt>
    16da:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <blink_cnt+0x1>
    16de:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <blink_cnt+0x2>
    16e2:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <blink_cnt+0x3>
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	a1 05       	cpc	r26, r1
    16ea:	b1 05       	cpc	r27, r1
    16ec:	29 f4       	brne	.+10     	; 0x16f8 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
						break;
    16f6:	11 c0       	rjmp	.+34     	; 0x171a <disp_process+0x252>
					}
					blink_cnt--;
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	a1 09       	sbc	r26, r1
    16fc:	b1 09       	sbc	r27, r1
    16fe:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <blink_cnt>
    1702:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <blink_cnt+0x1>
    1706:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <blink_cnt+0x2>
    170a:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    170e:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <second_disp_blink_val>
    1712:	8b e8       	ldi	r24, 0x8B	; 139
    1714:	94 e0       	ldi	r25, 0x04	; 4
    1716:	0e 94 b1 09 	call	0x1362	; 0x1362 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    171a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer_disp_process.1979>
    171e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer_disp_process.1979+0x1>
    1722:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <timer_disp_process.1979+0x2>
    1726:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <timer_disp_process.1979+0x3>
    172a:	c2 96       	adiw	r24, 0x32	; 50
    172c:	a1 1d       	adc	r26, r1
    172e:	b1 1d       	adc	r27, r1
    1730:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <timer_disp_process.1979>
    1734:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <timer_disp_process.1979+0x1>
    1738:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <timer_disp_process.1979+0x2>
    173c:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <timer_disp_process.1979+0x3>
    1740:	08 95       	ret

00001742 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1746:	00 91 b8 04 	lds	r16, 0x04B8	; 0x8004b8 <mktime+0x2>
    174a:	10 91 b9 04 	lds	r17, 0x04B9	; 0x8004b9 <mktime+0x3>
    174e:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <mktime+0x4>
    1752:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <mktime+0x5>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	80 0f       	add	r24, r16
    175c:	91 1f       	adc	r25, r17
    175e:	a2 1f       	adc	r26, r18
    1760:	b3 1f       	adc	r27, r19
    1762:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <animation_time>
    1766:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <animation_time+0x1>
    176a:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <animation_time+0x2>
    176e:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	84 2f       	mov	r24, r20
    1776:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
}
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1780:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	29 f0       	breq	.+10     	; 0x1792 <animation+0x12>
    1788:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	09 f0       	breq	.+2      	; 0x1792 <animation+0x12>
    1790:	78 c0       	rjmp	.+240    	; 0x1882 <animation+0x102>
    1792:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    1796:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    179a:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    179e:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    17a2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer_anim.1999>
    17a6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer_anim.1999+0x1>
    17aa:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer_anim.1999+0x2>
    17ae:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer_anim.1999+0x3>
    17b2:	84 17       	cp	r24, r20
    17b4:	95 07       	cpc	r25, r21
    17b6:	a6 07       	cpc	r26, r22
    17b8:	b7 07       	cpc	r27, r23
    17ba:	08 f0       	brcs	.+2      	; 0x17be <animation+0x3e>
    17bc:	62 c0       	rjmp	.+196    	; 0x1882 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    17be:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
    17c2:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
    17c6:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
    17ca:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
    17ce:	81 55       	subi	r24, 0x51	; 81
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	af 4f       	sbci	r26, 0xFF	; 255
    17d4:	bf 4f       	sbci	r27, 0xFF	; 255
    17d6:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer_anim.1999>
    17da:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer_anim.1999+0x1>
    17de:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer_anim.1999+0x2>
    17e2:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17e6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <segment1+0x4>
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	61 f4       	brne	.+24     	; 0x1806 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17ee:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2000>
    17f2:	87 e9       	ldi	r24, 0x97	; 151
    17f4:	94 e0       	ldi	r25, 0x04	; 4
    17f6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17fa:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2000>
    17fe:	83 ea       	ldi	r24, 0xA3	; 163
    1800:	94 e0       	ldi	r25, 0x04	; 4
    1802:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    1806:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <segment2+0x4>
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	61 f4       	brne	.+24     	; 0x1826 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    180e:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2001>
    1812:	85 e9       	ldi	r24, 0x95	; 149
    1814:	94 e0       	ldi	r25, 0x04	; 4
    1816:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    181a:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2001>
    181e:	81 ea       	ldi	r24, 0xA1	; 161
    1820:	94 e0       	ldi	r25, 0x04	; 4
    1822:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1826:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    182a:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    182e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    1832:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    1836:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <animation_time>
    183a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <animation_time+0x1>
    183e:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <animation_time+0x2>
    1842:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <animation_time+0x3>
    1846:	84 17       	cp	r24, r20
    1848:	95 07       	cpc	r25, r21
    184a:	a6 07       	cpc	r26, r22
    184c:	b7 07       	cpc	r27, r23
    184e:	28 f4       	brcc	.+10     	; 0x185a <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
			LED_ACUM_OFF;
    1858:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    185a:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <anim_iteration.2000>
    185e:	9f 5f       	subi	r25, 0xFF	; 255
    1860:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2000>
		anim_iteration2--;
    1864:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <anim_iteration2.2001>
    1868:	81 50       	subi	r24, 0x01	; 1
    186a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    186e:	9f 3f       	cpi	r25, 0xFF	; 255
    1870:	19 f4       	brne	.+6      	; 0x1878 <animation+0xf8>
    1872:	99 ef       	ldi	r25, 0xF9	; 249
    1874:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1878:	88 3f       	cpi	r24, 0xF8	; 248
    187a:	19 f4       	brne	.+6      	; 0x1882 <animation+0x102>
    187c:	8e ef       	ldi	r24, 0xFE	; 254
    187e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2001>
    1882:	08 95       	ret

00001884 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1884:	e1 99       	sbic	0x1c, 1	; 28
    1886:	fe cf       	rjmp	.-4      	; 0x1884 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1888:	9f bb       	out	0x1f, r25	; 31
    188a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    188c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    188e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1890:	e1 9a       	sbi	0x1c, 1	; 28
    1892:	08 95       	ret

00001894 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1894:	e1 99       	sbic	0x1c, 1	; 28
    1896:	fe cf       	rjmp	.-4      	; 0x1894 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1898:	9f bb       	out	0x1f, r25	; 31
    189a:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    189c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    189e:	8d b3       	in	r24, 0x1d	; 29
    18a0:	08 95       	ret

000018a2 <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    18a2:	cf 93       	push	r28
    18a4:	c8 2f       	mov	r28, r24
    18a6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    18aa:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    18ae:	82 60       	ori	r24, 0x02	; 2
    18b0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    18b4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    18b8:	8c 2f       	mov	r24, r28
    18ba:	0e 94 47 0a 	call	0x148e	; 0x148e <display_set_error>
    18be:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <dcmotor_set_error>
    18c2:	c1 30       	cpi	r28, 0x01	; 1
    18c4:	21 f4       	brne	.+8      	; 0x18ce <set_error_state+0x2c>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	0e 94 0c 12 	call	0x2418	; 0x2418 <servo_error>
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <set_error_state+0x32>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 0c 12 	call	0x2418	; 0x2418 <servo_error>
    18d4:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <system_error>
    18d8:	c0 93 a7 04 	sts	0x04A7, r28	; 0x8004a7 <led_blink>
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <error_init>:
    18e0:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    18e4:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    18e8:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    18ec:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    18f0:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    18f4:	8f e6       	ldi	r24, 0x6F	; 111
    18f6:	92 e0       	ldi	r25, 0x02	; 2
    18f8:	0e 94 22 18 	call	0x3044	; 0x3044 <evTime_off>
    18fc:	8f e5       	ldi	r24, 0x5F	; 95
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	0e 94 22 18 	call	0x3044	; 0x3044 <evTime_off>
    1904:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <led_blink>
    1908:	08 95       	ret

0000190a <error_deinit>:
    190a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    190e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    1912:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    1916:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    191a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    191e:	8f e6       	ldi	r24, 0x6F	; 111
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	0e 94 22 18 	call	0x3044	; 0x3044 <evTime_off>
    1926:	8f e5       	ldi	r24, 0x5F	; 95
    1928:	92 e0       	ldi	r25, 0x02	; 2
    192a:	0e 94 22 18 	call	0x3044	; 0x3044 <evTime_off>
    192e:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <led_blink>
    1932:	08 95       	ret

00001934 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    1934:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
    1938:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
    193c:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
    1940:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
    1944:	80 53       	subi	r24, 0x30	; 48
    1946:	98 4f       	sbci	r25, 0xF8	; 248
    1948:	af 4f       	sbci	r26, 0xFF	; 255
    194a:	bf 4f       	sbci	r27, 0xFF	; 255
    194c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <error_servo_tim>
    1950:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <error_servo_tim+0x1>
    1954:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <error_servo_tim+0x2>
    1958:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <error_servo_tim+0x3>
    195c:	08 95       	ret

0000195e <error_event>:
}

void error_event(void)
{
    195e:	4f 92       	push	r4
    1960:	5f 92       	push	r5
    1962:	6f 92       	push	r6
    1964:	7f 92       	push	r7
    1966:	8f 92       	push	r8
    1968:	9f 92       	push	r9
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1976:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    197a:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    197e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    1982:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    1986:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <error_event_timer.2082>
    198a:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <error_event_timer.2082+0x1>
    198e:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <error_event_timer.2082+0x2>
    1992:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <error_event_timer.2082+0x3>
    1996:	84 17       	cp	r24, r20
    1998:	95 07       	cpc	r25, r21
    199a:	a6 07       	cpc	r26, r22
    199c:	b7 07       	cpc	r27, r23
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <error_event+0x44>
    19a0:	47 c2       	rjmp	.+1166   	; 0x1e30 <error_event+0x4d2>
    19a2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    19a6:	80 ff       	sbrs	r24, 0
    19a8:	43 c2       	rjmp	.+1158   	; 0x1e30 <error_event+0x4d2>
	{
		error_event_timer = mktime.ms + 250;
    19aa:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    19ae:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    19b2:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    19b6:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    19ba:	46 50       	subi	r20, 0x06	; 6
    19bc:	5f 4f       	sbci	r21, 0xFF	; 255
    19be:	6f 4f       	sbci	r22, 0xFF	; 255
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <error_event_timer.2082>
    19c6:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <error_event_timer.2082+0x1>
    19ca:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <error_event_timer.2082+0x2>
    19ce:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <error_event_timer.2082+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    19d2:	81 fd       	sbrc	r24, 1
    19d4:	2d c2       	rjmp	.+1114   	; 0x1e30 <error_event+0x4d2>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    19d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    19da:	4b 01       	movw	r8, r22
    19dc:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    19de:	0e 94 cf 07 	call	0xf9e	; 0xf9e <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    19e2:	bc 01       	movw	r22, r24
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
    19ec:	6b 01       	movw	r12, r22
    19ee:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    19f0:	25 e9       	ldi	r18, 0x95	; 149
    19f2:	35 e6       	ldi	r19, 0x65	; 101
    19f4:	40 ed       	ldi	r20, 0xD0	; 208
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <pow>
    19fc:	2b 01       	movw	r4, r22
    19fe:	3c 01       	movw	r6, r24
    1a00:	a7 01       	movw	r20, r14
    1a02:	96 01       	movw	r18, r12
    1a04:	c5 01       	movw	r24, r10
    1a06:	b4 01       	movw	r22, r8
    1a08:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	48 ec       	ldi	r20, 0xC8	; 200
    1a12:	52 e4       	ldi	r21, 0x42	; 66
    1a14:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    1a18:	4b 01       	movw	r8, r22
    1a1a:	5c 01       	movw	r10, r24
    1a1c:	23 e3       	ldi	r18, 0x33	; 51
    1a1e:	33 e3       	ldi	r19, 0x33	; 51
    1a20:	43 e6       	ldi	r20, 0x63	; 99
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	c7 01       	movw	r24, r14
    1a26:	b6 01       	movw	r22, r12
    1a28:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	48 ec       	ldi	r20, 0xC8	; 200
    1a32:	52 e4       	ldi	r21, 0x42	; 66
    1a34:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    1a38:	9b 01       	movw	r18, r22
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	c5 01       	movw	r24, r10
    1a3e:	b4 01       	movw	r22, r8
    1a40:	0e 94 bb 18 	call	0x3176	; 0x3176 <__subsf3>
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e4       	ldi	r20, 0x40	; 64
    1a4a:	50 e4       	ldi	r21, 0x40	; 64
    1a4c:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    1a50:	4b 01       	movw	r8, r22
    1a52:	5c 01       	movw	r10, r24
    1a54:	28 e5       	ldi	r18, 0x58	; 88
    1a56:	39 e3       	ldi	r19, 0x39	; 57
    1a58:	44 e3       	ldi	r20, 0x34	; 52
    1a5a:	5c e3       	ldi	r21, 0x3C	; 60
    1a5c:	c3 01       	movw	r24, r6
    1a5e:	b2 01       	movw	r22, r4
    1a60:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    1a64:	9b 01       	movw	r18, r22
    1a66:	ac 01       	movw	r20, r24
    1a68:	c5 01       	movw	r24, r10
    1a6a:	b4 01       	movw	r22, r8
    1a6c:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    1a70:	4b 01       	movw	r8, r22
    1a72:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1a74:	85 e0       	ldi	r24, 0x05	; 5
    1a76:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a7a:	68 2f       	mov	r22, r24
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	62 53       	subi	r22, 0x32	; 50
    1a80:	71 09       	sbc	r23, r1
    1a82:	07 2e       	mov	r0, r23
    1a84:	00 0c       	add	r0, r0
    1a86:	88 0b       	sbc	r24, r24
    1a88:	99 0b       	sbc	r25, r25
    1a8a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__floatsisf>
    1a8e:	a7 01       	movw	r20, r14
    1a90:	96 01       	movw	r18, r12
    1a92:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	48 ec       	ldi	r20, 0xC8	; 200
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    1aa2:	a5 01       	movw	r20, r10
    1aa4:	94 01       	movw	r18, r8
    1aa6:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    1aaa:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <motor_error_value>
    1aae:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <motor_error_value+0x1>
    1ab2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <motor_error_value+0x2>
    1ab6:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	0e 94 b1 10 	call	0x2162	; 0x2162 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1ac0:	42 e0       	ldi	r20, 0x02	; 2
    1ac2:	5b e2       	ldi	r21, 0x2B	; 43
    1ac4:	67 e0       	ldi	r22, 0x07	; 7
    1ac6:	7d e3       	ldi	r23, 0x3D	; 61
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 ca 10 	call	0x2194	; 0x2194 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1ace:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <motor_error_value>
    1ad2:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <motor_error_value+0x1>
    1ad6:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <motor_error_value+0x2>
    1ada:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <motor_error_value+0x3>
    1ade:	0e 94 82 1a 	call	0x3504	; 0x3504 <__gesf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	44 f4       	brge	.+16     	; 0x1af6 <error_event+0x198>
    1ae6:	0e 94 8a 07 	call	0xf14	; 0xf14 <dcmotor_is_on>
    1aea:	89 2b       	or	r24, r25
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <error_event+0x198>
		{
			error_motor_status = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <error_motor_status>
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1af6:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR))
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <error_event+0x1a8>
    1b04:	d2 c0       	rjmp	.+420    	; 0x1caa <error_event+0x34c>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1b06:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <error_motor_status>
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <error_event+0x1b2>
    1b0e:	88 c0       	rjmp	.+272    	; 0x1c20 <error_event+0x2c2>
			{
				switch(error_motor_state)
    1b10:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <error_event+0x1bc>
    1b18:	60 c0       	rjmp	.+192    	; 0x1bda <error_event+0x27c>
    1b1a:	28 f4       	brcc	.+10     	; 0x1b26 <error_event+0x1c8>
    1b1c:	88 23       	and	r24, r24
    1b1e:	51 f0       	breq	.+20     	; 0x1b34 <error_event+0x1d6>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	69 f1       	breq	.+90     	; 0x1b7e <error_event+0x220>
    1b24:	c2 c0       	rjmp	.+388    	; 0x1caa <error_event+0x34c>
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <error_event+0x1ce>
    1b2a:	62 c0       	rjmp	.+196    	; 0x1bf0 <error_event+0x292>
    1b2c:	84 30       	cpi	r24, 0x04	; 4
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <error_event+0x1d4>
    1b30:	63 c0       	rjmp	.+198    	; 0x1bf8 <error_event+0x29a>
    1b32:	bb c0       	rjmp	.+374    	; 0x1caa <error_event+0x34c>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b3a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b3e:	2e e1       	ldi	r18, 0x1E	; 30
    1b40:	ac 01       	movw	r20, r24
    1b42:	24 9f       	mul	r18, r20
    1b44:	c0 01       	movw	r24, r0
    1b46:	25 9f       	mul	r18, r21
    1b48:	90 0d       	add	r25, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	48 e8       	ldi	r20, 0x88	; 136
    1b4e:	53 e1       	ldi	r21, 0x13	; 19
    1b50:	7a 01       	movw	r14, r20
    1b52:	e8 1a       	sub	r14, r24
    1b54:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b56:	ff 92       	push	r15
    1b58:	ef 92       	push	r14
    1b5a:	88 ef       	ldi	r24, 0xF8	; 248
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b66:	a7 01       	movw	r20, r14
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	8f e6       	ldi	r24, 0x6F	; 111
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
					break;
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	96 c0       	rjmp	.+300    	; 0x1caa <error_event+0x34c>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b7e:	8f e6       	ldi	r24, 0x6F	; 111
    1b80:	92 e0       	ldi	r25, 0x02	; 2
    1b82:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1b86:	89 2b       	or	r24, r25
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <error_event+0x22e>
    1b8a:	8f c0       	rjmp	.+286    	; 0x1caa <error_event+0x34c>
						{
							dcmotor_set_try();
    1b8c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b90:	0e 94 cf 07 	call	0xf9e	; 0xf9e <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b94:	2e e1       	ldi	r18, 0x1E	; 30
    1b96:	ac 01       	movw	r20, r24
    1b98:	24 9f       	mul	r18, r20
    1b9a:	c0 01       	movw	r24, r0
    1b9c:	25 9f       	mul	r18, r21
    1b9e:	90 0d       	add	r25, r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	48 e8       	ldi	r20, 0x88	; 136
    1ba4:	53 e1       	ldi	r21, 0x13	; 19
    1ba6:	7a 01       	movw	r14, r20
    1ba8:	e8 1a       	sub	r14, r24
    1baa:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1bac:	ff 92       	push	r15
    1bae:	ef 92       	push	r14
    1bb0:	87 e1       	ldi	r24, 0x17	; 23
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1bbc:	a7 01       	movw	r20, r14
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	8f e6       	ldi	r24, 0x6F	; 111
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	68 c0       	rjmp	.+208    	; 0x1caa <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1bda:	8f e6       	ldi	r24, 0x6F	; 111
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1be2:	89 2b       	or	r24, r25
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <error_event+0x28a>
    1be6:	61 c0       	rjmp	.+194    	; 0x1caa <error_event+0x34c>
						{
							error_motor_state = ERR_M_ERROR;
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1bee:	5d c0       	rjmp	.+186    	; 0x1caa <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <set_error_state>
					break;
    1bf6:	59 c0       	rjmp	.+178    	; 0x1caa <error_event+0x34c>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1bf8:	8f e6       	ldi	r24, 0x6F	; 111
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1c00:	89 2b       	or	r24, r25
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <error_event+0x2a8>
    1c04:	52 c0       	rjmp	.+164    	; 0x1caa <error_event+0x34c>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c06:	40 ed       	ldi	r20, 0xD0	; 208
    1c08:	57 e0       	ldi	r21, 0x07	; 7
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	8f e6       	ldi	r24, 0x6F	; 111
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
							error_motor_state = error_motor_last_state;
    1c16:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <error_motor_last_state>
    1c1a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1c1e:	45 c0       	rjmp	.+138    	; 0x1caa <error_event+0x34c>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1c20:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	f1 f0       	breq	.+60     	; 0x1c64 <error_event+0x306>
    1c28:	18 f4       	brcc	.+6      	; 0x1c30 <error_event+0x2d2>
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <error_event+0x2dc>
    1c2e:	3d c0       	rjmp	.+122    	; 0x1caa <error_event+0x34c>
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	79 f1       	breq	.+94     	; 0x1c92 <error_event+0x334>
    1c34:	84 30       	cpi	r24, 0x04	; 4
    1c36:	89 f1       	breq	.+98     	; 0x1c9a <error_event+0x33c>
    1c38:	38 c0       	rjmp	.+112    	; 0x1caa <error_event+0x34c>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1c3a:	8f e6       	ldi	r24, 0x6F	; 111
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1c42:	89 2b       	or	r24, r25
    1c44:	91 f1       	breq	.+100    	; 0x1caa <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c46:	40 ed       	ldi	r20, 0xD0	; 208
    1c48:	57 e0       	ldi	r21, 0x07	; 7
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	8f e6       	ldi	r24, 0x6F	; 111
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1c62:	23 c0       	rjmp	.+70     	; 0x1caa <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c64:	8f e6       	ldi	r24, 0x6F	; 111
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1c6c:	89 2b       	or	r24, r25
    1c6e:	e9 f0       	breq	.+58     	; 0x1caa <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c70:	40 ed       	ldi	r20, 0xD0	; 208
    1c72:	57 e0       	ldi	r21, 0x07	; 7
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	8f e6       	ldi	r24, 0x6F	; 111
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
						dcmotor_set_normal_state();
    1c80:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1c90:	0c c0       	rjmp	.+24     	; 0x1caa <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <set_error_state>
					break;
    1c98:	08 c0       	rjmp	.+16     	; 0x1caa <error_event+0x34c>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c9a:	8f e6       	ldi	r24, 0x6F	; 111
    1c9c:	92 e0       	ldi	r25, 0x02	; 2
    1c9e:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1ca2:	89 2b       	or	r24, r25
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <error_event+0x34c>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1ca6:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    1cb0:	88 23       	and	r24, r24
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <error_event+0x358>
    1cb4:	bd c0       	rjmp	.+378    	; 0x1e30 <error_event+0x4d2>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1cb6:	84 e0       	ldi	r24, 0x04	; 4
    1cb8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <servo_error_value+0x1>
    1cc2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	0e 94 b1 10 	call	0x2162	; 0x2162 <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1ccc:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <servo_error_value>
    1cd0:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <servo_error_value+0x1>
    1cd4:	28 17       	cp	r18, r24
    1cd6:	39 07       	cpc	r19, r25
    1cd8:	20 f5       	brcc	.+72     	; 0x1d22 <error_event+0x3c4>
    1cda:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    1cde:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    1ce2:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    1ce6:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    1cea:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <error_servo_tim>
    1cee:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <error_servo_tim+0x1>
    1cf2:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <error_servo_tim+0x2>
    1cf6:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <error_servo_tim+0x3>
    1cfa:	84 17       	cp	r24, r20
    1cfc:	95 07       	cpc	r25, r21
    1cfe:	a6 07       	cpc	r26, r22
    1d00:	b7 07       	cpc	r27, r23
    1d02:	78 f4       	brcc	.+30     	; 0x1d22 <error_event+0x3c4>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1d0a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	51 f1       	breq	.+84     	; 0x1d66 <error_event+0x408>
    1d12:	a8 f0       	brcs	.+42     	; 0x1d3e <error_event+0x3e0>
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <error_event+0x3bc>
    1d18:	4b c0       	rjmp	.+150    	; 0x1db0 <error_event+0x452>
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <error_event+0x3c2>
    1d1e:	51 c0       	rjmp	.+162    	; 0x1dc2 <error_event+0x464>
    1d20:	87 c0       	rjmp	.+270    	; 0x1e30 <error_event+0x4d2>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1d22:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1d26:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1d2a:	82 30       	cpi	r24, 0x02	; 2
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <error_event+0x3d2>
    1d2e:	66 c0       	rjmp	.+204    	; 0x1dfc <error_event+0x49e>
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <error_event+0x3d8>
    1d34:	7a c0       	rjmp	.+244    	; 0x1e2a <error_event+0x4cc>
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <error_event+0x3de>
    1d3a:	7a c0       	rjmp	.+244    	; 0x1e30 <error_event+0x4d2>
    1d3c:	46 c0       	rjmp	.+140    	; 0x1dca <error_event+0x46c>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1d44:	8b e3       	ldi	r24, 0x3B	; 59
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	9f 93       	push	r25
    1d4a:	8f 93       	push	r24
    1d4c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1d50:	4c ed       	ldi	r20, 0xDC	; 220
    1d52:	55 e0       	ldi	r21, 0x05	; 5
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	8f e5       	ldi	r24, 0x5F	; 95
    1d5a:	92 e0       	ldi	r25, 0x02	; 2
    1d5c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
					break;
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	65 c0       	rjmp	.+202    	; 0x1e30 <error_event+0x4d2>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d66:	8f e5       	ldi	r24, 0x5F	; 95
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1d6e:	89 2b       	or	r24, r25
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <error_event+0x416>
    1d72:	5e c0       	rjmp	.+188    	; 0x1e30 <error_event+0x4d2>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1d74:	0e 94 7e 12 	call	0x24fc	; 0x24fc <servo_get_try_cnt>
    1d78:	04 97       	sbiw	r24, 0x04	; 4
    1d7a:	24 f0       	brlt	.+8      	; 0x1d84 <error_event+0x426>
							{
								error_servo_state = ERR_S_ERROR;
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
								break;
    1d82:	56 c0       	rjmp	.+172    	; 0x1e30 <error_event+0x4d2>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1d84:	40 ed       	ldi	r20, 0xD0	; 208
    1d86:	57 e0       	ldi	r21, 0x07	; 7
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	8f e5       	ldi	r24, 0x5F	; 95
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
							error_servo_state = ERR_S_TRY;
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
							servo_enable_try();
    1d9a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1d9e:	86 e5       	ldi	r24, 0x56	; 86
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	40 c0       	rjmp	.+128    	; 0x1e30 <error_event+0x4d2>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1db0:	8f e5       	ldi	r24, 0x5F	; 95
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1db8:	89 2b       	or	r24, r25
    1dba:	d1 f1       	breq	.+116    	; 0x1e30 <error_event+0x4d2>
						{
							error_servo_state = ERR_S_OK;
    1dbc:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1dc0:	37 c0       	rjmp	.+110    	; 0x1e30 <error_event+0x4d2>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <set_error_state>
					break;
    1dc8:	33 c0       	rjmp	.+102    	; 0x1e30 <error_event+0x4d2>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1dca:	8f e5       	ldi	r24, 0x5F	; 95
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1dd2:	89 2b       	or	r24, r25
    1dd4:	69 f1       	breq	.+90     	; 0x1e30 <error_event+0x4d2>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1dd6:	40 ed       	ldi	r20, 0xD0	; 208
    1dd8:	57 e0       	ldi	r21, 0x07	; 7
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	8f e5       	ldi	r24, 0x5F	; 95
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
						error_servo_state = ERR_M_OK;
    1de6:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dea:	80 e7       	ldi	r24, 0x70	; 112
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	9f 93       	push	r25
    1df0:	8f 93       	push	r24
    1df2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	1a c0       	rjmp	.+52     	; 0x1e30 <error_event+0x4d2>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1dfc:	8f e5       	ldi	r24, 0x5F	; 95
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    1e04:	89 2b       	or	r24, r25
    1e06:	a1 f0       	breq	.+40     	; 0x1e30 <error_event+0x4d2>
					{
						error_servo_state = ERR_S_OK;
    1e08:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e0c:	80 e7       	ldi	r24, 0x70	; 112
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	9f 93       	push	r25
    1e12:	8f 93       	push	r24
    1e14:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1e18:	6c ea       	ldi	r22, 0xAC	; 172
    1e1a:	7d e0       	ldi	r23, 0x0D	; 13
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <servo_try_reset_timeout>
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <error_event+0x4d2>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	df 90       	pop	r13
    1e36:	cf 90       	pop	r12
    1e38:	bf 90       	pop	r11
    1e3a:	af 90       	pop	r10
    1e3c:	9f 90       	pop	r9
    1e3e:	8f 90       	pop	r8
    1e40:	7f 90       	pop	r7
    1e42:	6f 90       	pop	r6
    1e44:	5f 90       	pop	r5
    1e46:	4f 90       	pop	r4
    1e48:	08 95       	ret

00001e4a <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1e4a:	4e e5       	ldi	r20, 0x5E	; 94
    1e4c:	51 e0       	ldi	r21, 0x01	; 1
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	82 e5       	ldi	r24, 0x52	; 82
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	0e 94 2c 18 	call	0x3058	; 0x3058 <evTime_process_period>
    1e5a:	89 2b       	or	r24, r25
    1e5c:	09 f1       	breq	.+66     	; 0x1ea0 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e5e:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <led_blink>
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	71 f4       	brne	.+28     	; 0x1e82 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e66:	92 b3       	in	r25, 0x12	; 18
    1e68:	80 e1       	ldi	r24, 0x10	; 16
    1e6a:	89 27       	eor	r24, r25
    1e6c:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e6e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1e72:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1e76:	90 62       	ori	r25, 0x20	; 32
    1e78:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1e7c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1e80:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	69 f4       	brne	.+26     	; 0x1ea0 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1e86:	92 b3       	in	r25, 0x12	; 18
    1e88:	80 e4       	ldi	r24, 0x40	; 64
    1e8a:	89 27       	eor	r24, r25
    1e8c:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e8e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1e92:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1e96:	90 62       	ori	r25, 0x20	; 32
    1e98:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1e9c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1ea0:	08 95       	ret

00001ea2 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 81       	ld	r18, Z
    1ea6:	31 81       	ldd	r19, Z+1	; 0x01
    1ea8:	62 30       	cpi	r22, 0x02	; 2
    1eaa:	58 f0       	brcs	.+22     	; 0x1ec2 <filtered_value+0x20>
    1eac:	32 96       	adiw	r30, 0x02	; 2
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	41 91       	ld	r20, Z+
    1eb2:	51 91       	ld	r21, Z+
    1eb4:	24 0f       	add	r18, r20
    1eb6:	35 1f       	adc	r19, r21
    1eb8:	36 95       	lsr	r19
    1eba:	27 95       	ror	r18
    1ebc:	9f 5f       	subi	r25, 0xFF	; 255
    1ebe:	69 13       	cpse	r22, r25
    1ec0:	f7 cf       	rjmp	.-18     	; 0x1eb0 <filtered_value+0xe>
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	08 95       	ret

00001ec6 <init_measure>:
    1ec6:	ea eb       	ldi	r30, 0xBA	; 186
    1ec8:	f2 e0       	ldi	r31, 0x02	; 2
    1eca:	22 ee       	ldi	r18, 0xE2	; 226
    1ecc:	32 e0       	ldi	r19, 0x02	; 2
    1ece:	81 ef       	ldi	r24, 0xF1	; 241
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	81 93       	st	Z+, r24
    1ed4:	91 93       	st	Z+, r25
    1ed6:	2e 17       	cp	r18, r30
    1ed8:	3f 07       	cpc	r19, r31
    1eda:	d9 f7       	brne	.-10     	; 0x1ed2 <init_measure+0xc>
    1edc:	e9 e9       	ldi	r30, 0x99	; 153
    1ede:	f2 e0       	ldi	r31, 0x02	; 2
    1ee0:	87 eb       	ldi	r24, 0xB7	; 183
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	11 92       	st	Z+, r1
    1ee6:	11 92       	st	Z+, r1
    1ee8:	8e 17       	cp	r24, r30
    1eea:	9f 07       	cpc	r25, r31
    1eec:	d9 f7       	brne	.-10     	; 0x1ee4 <init_measure+0x1e>
    1eee:	e1 e8       	ldi	r30, 0x81	; 129
    1ef0:	f2 e0       	ldi	r31, 0x02	; 2
    1ef2:	85 e9       	ldi	r24, 0x95	; 149
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	11 92       	st	Z+, r1
    1ef8:	11 92       	st	Z+, r1
    1efa:	8e 17       	cp	r24, r30
    1efc:	9f 07       	cpc	r25, r31
    1efe:	d9 f7       	brne	.-10     	; 0x1ef6 <init_measure+0x30>
    1f00:	08 95       	ret

00001f02 <measure_process>:
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    1f12:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    1f16:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    1f1a:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    1f1e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <measure_timer>
    1f22:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <measure_timer+0x1>
    1f26:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <measure_timer+0x2>
    1f2a:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <measure_timer+0x3>
    1f2e:	84 17       	cp	r24, r20
    1f30:	95 07       	cpc	r25, r21
    1f32:	a6 07       	cpc	r26, r22
    1f34:	b7 07       	cpc	r27, r23
    1f36:	08 f0       	brcs	.+2      	; 0x1f3a <measure_process+0x38>
    1f38:	d1 c0       	rjmp	.+418    	; 0x20dc <measure_process+0x1da>
    1f3a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
    1f3e:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
    1f42:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
    1f46:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
    1f4a:	44 96       	adiw	r24, 0x14	; 20
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	b1 1d       	adc	r27, r1
    1f50:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <measure_timer>
    1f54:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <measure_timer+0x1>
    1f58:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <measure_timer+0x2>
    1f5c:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <measure_timer+0x3>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1f66:	ec 01       	movw	r28, r24
    1f68:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    1f6c:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
    1f78:	21 e7       	ldi	r18, 0x71	; 113
    1f7a:	3d e3       	ldi	r19, 0x3D	; 61
    1f7c:	4a e8       	ldi	r20, 0x8A	; 138
    1f7e:	5e e3       	ldi	r21, 0x3E	; 62
    1f80:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    1f84:	6b 01       	movw	r12, r22
    1f86:	7c 01       	movw	r14, r24
    1f88:	be 01       	movw	r22, r28
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
    1f92:	9b 01       	movw	r18, r22
    1f94:	ac 01       	movw	r20, r24
    1f96:	c7 01       	movw	r24, r14
    1f98:	b6 01       	movw	r22, r12
    1f9a:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    1f9e:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fixunssfsi>
    1fa2:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <accum_adc+0x1>
    1fa6:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <accum_adc>
    1faa:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    1fae:	e2 2f       	mov	r30, r18
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e6 54       	subi	r30, 0x46	; 70
    1fb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fba:	71 83       	std	Z+1, r23	; 0x01
    1fbc:	60 83       	st	Z, r22
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	82 0f       	add	r24, r18
    1fc2:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <iteration_adc_accum_table>
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	91 05       	cpc	r25, r1
    1fd0:	30 f0       	brcs	.+12     	; 0x1fde <measure_process+0xdc>
    1fd2:	4f 97       	sbiw	r24, 0x1f	; 31
    1fd4:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <motor_adc+0x1>
    1fd8:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <motor_adc>
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <measure_process+0xe4>
    1fde:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <motor_adc+0x1>
    1fe2:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <motor_adc>
    1fe6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e7 56       	subi	r30, 0x67	; 103
    1ff2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <motor_adc>
    1ff8:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <motor_adc+0x1>
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    2006:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <s_o_t_adc+0x1>
    200a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <s_o_t_adc>
    200e:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <calibration_value>
    2012:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <calibration_value+0x1>
    2016:	21 15       	cp	r18, r1
    2018:	31 05       	cpc	r19, r1
    201a:	71 f0       	breq	.+28     	; 0x2038 <measure_process+0x136>
    201c:	28 17       	cp	r18, r24
    201e:	39 07       	cpc	r19, r25
    2020:	28 f4       	brcc	.+10     	; 0x202c <measure_process+0x12a>
    2022:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <s_o_t_adc+0x1>
    2026:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <s_o_t_adc>
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <measure_process+0x136>
    202c:	28 1b       	sub	r18, r24
    202e:	39 0b       	sbc	r19, r25
    2030:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <s_o_t_adc+0x1>
    2034:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <s_o_t_adc>
    2038:	c0 91 80 02 	lds	r28, 0x0280	; 0x800280 <s_o_t_iteration_adc_table>
    203c:	ec 2f       	mov	r30, r28
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ef 57       	subi	r30, 0x7F	; 127
    2046:	fd 4f       	sbci	r31, 0xFD	; 253
    2048:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <s_o_t_adc>
    204c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <s_o_t_adc+0x1>
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	d0 91 b9 02 	lds	r29, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    2058:	df 5f       	subi	r29, 0xFF	; 255
    205a:	d0 93 b9 02 	sts	0x02B9, r29	; 0x8002b9 <iteration_adc_motor_table>
    205e:	cf 5f       	subi	r28, 0xFF	; 255
    2060:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <s_o_t_iteration_adc_table>
    2064:	64 e1       	ldi	r22, 0x14	; 20
    2066:	8a eb       	ldi	r24, 0xBA	; 186
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <filtered_value>
    206e:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2072:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <filtered_accum_adc_val>
    2076:	6f e0       	ldi	r22, 0x0F	; 15
    2078:	89 e9       	ldi	r24, 0x99	; 153
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <filtered_value>
    2080:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <motor_filter_value+0x1>
    2084:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <motor_filter_value>
    2088:	6a e0       	ldi	r22, 0x0A	; 10
    208a:	81 e8       	ldi	r24, 0x81	; 129
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <filtered_value>
    2092:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <s_o_t_filter_value+0x1>
    2096:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <s_o_t_filter_value>
    209a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <debug_msg_counter>
    209e:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <debug_msg_counter+0x1>
    20a2:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <debug_msg_counter+0x2>
    20a6:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <debug_msg_counter+0x3>
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	a1 1d       	adc	r26, r1
    20ae:	b1 1d       	adc	r27, r1
    20b0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <debug_msg_counter>
    20b4:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <debug_msg_counter+0x1>
    20b8:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <debug_msg_counter+0x2>
    20bc:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <debug_msg_counter+0x3>
    20c0:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    20c4:	84 31       	cpi	r24, 0x14	; 20
    20c6:	11 f4       	brne	.+4      	; 0x20cc <measure_process+0x1ca>
    20c8:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <iteration_adc_accum_table>
    20cc:	ca 30       	cpi	r28, 0x0A	; 10
    20ce:	11 f4       	brne	.+4      	; 0x20d4 <measure_process+0x1d2>
    20d0:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <s_o_t_iteration_adc_table>
    20d4:	df 30       	cpi	r29, 0x0F	; 15
    20d6:	11 f4       	brne	.+4      	; 0x20dc <measure_process+0x1da>
    20d8:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <iteration_adc_motor_table>
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	08 95       	ret

000020ea <measure_get_servo_calibration>:
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	c0 90 b8 04 	lds	r12, 0x04B8	; 0x8004b8 <mktime+0x2>
    20fa:	d0 90 b9 04 	lds	r13, 0x04B9	; 0x8004b9 <mktime+0x3>
    20fe:	e0 90 ba 04 	lds	r14, 0x04BA	; 0x8004ba <mktime+0x4>
    2102:	f0 90 bb 04 	lds	r15, 0x04BB	; 0x8004bb <mktime+0x5>
    2106:	8c ed       	ldi	r24, 0xDC	; 220
    2108:	c8 0e       	add	r12, r24
    210a:	85 e0       	ldi	r24, 0x05	; 5
    210c:	d8 1e       	adc	r13, r24
    210e:	e1 1c       	adc	r14, r1
    2110:	f1 1c       	adc	r15, r1
    2112:	c6 eb       	ldi	r28, 0xB6	; 182
    2114:	d4 e0       	ldi	r29, 0x04	; 4
    2116:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <measure_process>
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	ac 81       	ldd	r26, Y+4	; 0x04
    2120:	bd 81       	ldd	r27, Y+5	; 0x05
    2122:	c8 16       	cp	r12, r24
    2124:	d9 06       	cpc	r13, r25
    2126:	ea 06       	cpc	r14, r26
    2128:	fb 06       	cpc	r15, r27
    212a:	a8 f7       	brcc	.-22     	; 0x2116 <measure_get_servo_calibration+0x2c>
    212c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    2130:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    2134:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <calibration_value>
    2138:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <calibration_value+0x1>
    213c:	9f 93       	push	r25
    213e:	8f 93       	push	r24
    2140:	89 e8       	ldi	r24, 0x89	; 137
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9f 93       	push	r25
    2146:	8f 93       	push	r24
    2148:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	08 95       	ret

00002162 <measure_get_filtered_value>:
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	18 f4       	brcc	.+6      	; 0x216c <measure_get_filtered_value+0xa>
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	40 f0       	brcs	.+16     	; 0x217a <measure_get_filtered_value+0x18>
    216a:	0c c0       	rjmp	.+24     	; 0x2184 <measure_get_filtered_value+0x22>
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	79 f4       	brne	.+30     	; 0x218e <measure_get_filtered_value+0x2c>
    2170:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    2174:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2178:	08 95       	ret
    217a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <motor_filter_value>
    217e:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    2182:	08 95       	ret
    2184:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    2188:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    218c:	08 95       	ret
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	08 95       	ret

00002194 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2194:	cf 92       	push	r12
    2196:	df 92       	push	r13
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	6a 01       	movw	r12, r20
    219e:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	18 f4       	brcc	.+6      	; 0x21aa <measure_get_current+0x16>
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	50 f0       	brcs	.+20     	; 0x21bc <measure_get_current+0x28>
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <measure_get_current+0x36>
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	a9 f4       	brne	.+42     	; 0x21d8 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    21ae:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    21b2:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21ba:	11 c0       	rjmp	.+34     	; 0x21de <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    21bc:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    21c0:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21c8:	0a c0       	rjmp	.+20     	; 0x21de <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    21ca:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <s_o_t_filter_value>
    21ce:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <measure_get_current+0x4a>
		
		default:
		adc = 0;
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    21de:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5a e3       	ldi	r21, 0x3A	; 58
    21ea:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 ea       	ldi	r20, 0xA0	; 160
    21f4:	50 e4       	ldi	r21, 0x40	; 64
    21f6:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    21fa:	a7 01       	movw	r20, r14
    21fc:	96 01       	movw	r18, r12
    21fe:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    2202:	ff 90       	pop	r15
    2204:	ef 90       	pop	r14
    2206:	df 90       	pop	r13
    2208:	cf 90       	pop	r12
    220a:	08 95       	ret

0000220c <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	59 f0       	breq	.+22     	; 0x2232 <mem_save_data+0x26>
    221c:	28 f4       	brcc	.+10     	; 0x2228 <mem_save_data+0x1c>
    221e:	88 23       	and	r24, r24
    2220:	91 f0       	breq	.+36     	; 0x2246 <mem_save_data+0x3a>
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	51 f1       	breq	.+84     	; 0x227a <mem_save_data+0x6e>
    2226:	34 c0       	rjmp	.+104    	; 0x2290 <mem_save_data+0x84>
    2228:	83 30       	cpi	r24, 0x03	; 3
    222a:	51 f1       	breq	.+84     	; 0x2280 <mem_save_data+0x74>
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	21 f0       	breq	.+8      	; 0x2238 <mem_save_data+0x2c>
    2230:	2f c0       	rjmp	.+94     	; 0x2290 <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2232:	84 e0       	ldi	r24, 0x04	; 4
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	26 c0       	rjmp	.+76     	; 0x2284 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    2238:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dark_menu_parameters_len>
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2240:	88 e0       	ldi	r24, 0x08	; 8
    2242:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    2244:	04 c0       	rjmp	.+8      	; 0x224e <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2246:	22 e0       	ldi	r18, 0x02	; 2
    2248:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    224e:	c8 2f       	mov	r28, r24
    2250:	7c 01       	movw	r14, r24
    2252:	e2 0e       	add	r14, r18
    2254:	f3 1e       	adc	r15, r19
    2256:	99 27       	eor	r25, r25
    2258:	8e 15       	cp	r24, r14
    225a:	9f 05       	cpc	r25, r15
    225c:	cc f4       	brge	.+50     	; 0x2290 <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    225e:	f8 01       	movw	r30, r16
    2260:	61 91       	ld	r22, Z+
    2262:	8f 01       	movw	r16, r30
    2264:	8c 2f       	mov	r24, r28
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 42 0c 	call	0x1884	; 0x1884 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    226c:	cf 5f       	subi	r28, 0xFF	; 255
    226e:	8c 2f       	mov	r24, r28
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	8e 15       	cp	r24, r14
    2274:	9f 05       	cpc	r25, r15
    2276:	9c f3       	brlt	.-26     	; 0x225e <mem_save_data+0x52>
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2280:	86 e0       	ldi	r24, 0x06	; 6
    2282:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2284:	c8 2f       	mov	r28, r24
    2286:	7c 01       	movw	r14, r24
    2288:	f2 e0       	ldi	r31, 0x02	; 2
    228a:	ef 0e       	add	r14, r31
    228c:	f1 1c       	adc	r15, r1
    228e:	e7 cf       	rjmp	.-50     	; 0x225e <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	08 95       	ret

0000229c <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <mem_read_data+0x26>
    22ac:	28 f4       	brcc	.+10     	; 0x22b8 <mem_read_data+0x1c>
    22ae:	88 23       	and	r24, r24
    22b0:	91 f0       	breq	.+36     	; 0x22d6 <mem_read_data+0x3a>
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	51 f1       	breq	.+84     	; 0x230a <mem_read_data+0x6e>
    22b6:	34 c0       	rjmp	.+104    	; 0x2320 <mem_read_data+0x84>
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	51 f1       	breq	.+84     	; 0x2310 <mem_read_data+0x74>
    22bc:	84 30       	cpi	r24, 0x04	; 4
    22be:	21 f0       	breq	.+8      	; 0x22c8 <mem_read_data+0x2c>
    22c0:	2f c0       	rjmp	.+94     	; 0x2320 <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	26 c0       	rjmp	.+76     	; 0x2314 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    22c8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dark_menu_parameters_len>
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    22d0:	88 e0       	ldi	r24, 0x08	; 8
    22d2:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    22d6:	22 e0       	ldi	r18, 0x02	; 2
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22de:	c8 2f       	mov	r28, r24
    22e0:	7c 01       	movw	r14, r24
    22e2:	e2 0e       	add	r14, r18
    22e4:	f3 1e       	adc	r15, r19
    22e6:	99 27       	eor	r25, r25
    22e8:	8e 15       	cp	r24, r14
    22ea:	9f 05       	cpc	r25, r15
    22ec:	cc f4       	brge	.+50     	; 0x2320 <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    22ee:	8c 2f       	mov	r24, r28
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <EEPROM_read>
    22f6:	f8 01       	movw	r30, r16
    22f8:	81 93       	st	Z+, r24
    22fa:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22fc:	cf 5f       	subi	r28, 0xFF	; 255
    22fe:	8c 2f       	mov	r24, r28
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	8e 15       	cp	r24, r14
    2304:	9f 05       	cpc	r25, r15
    2306:	9c f3       	brlt	.-26     	; 0x22ee <mem_read_data+0x52>
    2308:	0b c0       	rjmp	.+22     	; 0x2320 <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2310:	86 e0       	ldi	r24, 0x06	; 6
    2312:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2314:	c8 2f       	mov	r28, r24
    2316:	7c 01       	movw	r14, r24
    2318:	f2 e0       	ldi	r31, 0x02	; 2
    231a:	ef 0e       	add	r14, r31
    231c:	f1 1c       	adc	r15, r1
    231e:	e7 cf       	rjmp	.-50     	; 0x22ee <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	08 95       	ret

0000232c <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    234c:	c2 e3       	ldi	r28, 0x32	; 50
    234e:	d0 e0       	ldi	r29, 0x00	; 0
    2350:	9e 01       	movw	r18, r28
    2352:	28 1b       	sub	r18, r24
    2354:	31 09       	sbc	r19, r1
    2356:	c9 01       	movw	r24, r18
    2358:	89 01       	movw	r16, r18
    235a:	00 0f       	add	r16, r16
    235c:	11 1f       	adc	r17, r17
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	08 0f       	add	r16, r24
    236c:	19 1f       	adc	r17, r25
    236e:	00 53       	subi	r16, 0x30	; 48
    2370:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    2378:	c8 1b       	sub	r28, r24
    237a:	d1 09       	sbc	r29, r1
    237c:	be 01       	movw	r22, r28
    237e:	66 0f       	add	r22, r22
    2380:	77 1f       	adc	r23, r23
    2382:	cc 0f       	add	r28, r28
    2384:	dd 1f       	adc	r29, r29
    2386:	cc 0f       	add	r28, r28
    2388:	dd 1f       	adc	r29, r29
    238a:	cc 0f       	add	r28, r28
    238c:	dd 1f       	adc	r29, r29
    238e:	6c 0f       	add	r22, r28
    2390:	7d 1f       	adc	r23, r29
    2392:	65 50       	subi	r22, 0x05	; 5
    2394:	7b 4f       	sbci	r23, 0xFB	; 251
    2396:	60 1b       	sub	r22, r16
    2398:	71 0b       	sbc	r23, r17
    239a:	07 2e       	mov	r0, r23
    239c:	00 0c       	add	r0, r0
    239e:	88 0b       	sbc	r24, r24
    23a0:	99 0b       	sbc	r25, r25
    23a2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__floatsisf>
    23a6:	4b 01       	movw	r8, r22
    23a8:	5c 01       	movw	r10, r24
    23aa:	6f 2d       	mov	r22, r15
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__floatunsisf>
    23b6:	9b 01       	movw	r18, r22
    23b8:	ac 01       	movw	r20, r24
    23ba:	c5 01       	movw	r24, r10
    23bc:	b4 01       	movw	r22, r8
    23be:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	46 ec       	ldi	r20, 0xC6	; 198
    23c8:	52 e4       	ldi	r21, 0x42	; 66
    23ca:	0e 94 28 19 	call	0x3250	; 0x3250 <__divsf3>
    23ce:	6b 01       	movw	r12, r22
    23d0:	7c 01       	movw	r14, r24
    23d2:	b8 01       	movw	r22, r16
    23d4:	11 0f       	add	r17, r17
    23d6:	88 0b       	sbc	r24, r24
    23d8:	99 0b       	sbc	r25, r25
    23da:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__floatsisf>
    23de:	9b 01       	movw	r18, r22
    23e0:	ac 01       	movw	r20, r24
    23e2:	c7 01       	movw	r24, r14
    23e4:	b6 01       	movw	r22, r12
    23e6:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    23ea:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    23ee:	7b bd       	out	0x2b, r23	; 43
    23f0:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	bf 90       	pop	r11
    2404:	af 90       	pop	r10
    2406:	9f 90       	pop	r9
    2408:	8f 90       	pop	r8
    240a:	08 95       	ret

0000240c <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    240c:	94 e0       	ldi	r25, 0x04	; 4
    240e:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <servoD>
	servo_set_pwm_val(value);
    2412:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
    2416:	08 95       	ret

00002418 <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    2418:	88 23       	and	r24, r24
    241a:	19 f0       	breq	.+6      	; 0x2422 <servo_error+0xa>
		servo_set_pwm_val(0);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
	LED_SERVO_OFF;
    2422:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    2424:	86 e0       	ldi	r24, 0x06	; 6
    2426:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <servoD>
    242a:	08 95       	ret

0000242c <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    2430:	2f e1       	ldi	r18, 0x1F	; 31
    2432:	3e e4       	ldi	r19, 0x4E	; 78
    2434:	37 bd       	out	0x27, r19	; 39
    2436:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    2438:	81 b3       	in	r24, 0x11	; 17
    243a:	80 63       	ori	r24, 0x30	; 48
    243c:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    243e:	19 bc       	out	0x29, r1	; 41
    2440:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    2442:	1b bc       	out	0x2b, r1	; 43
    2444:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    2446:	8f b5       	in	r24, 0x2f	; 47
    2448:	82 60       	ori	r24, 0x02	; 2
    244a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    244c:	8e b5       	in	r24, 0x2e	; 46
    244e:	88 61       	ori	r24, 0x18	; 24
    2450:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    2452:	8f b5       	in	r24, 0x2f	; 47
    2454:	80 68       	ori	r24, 0x80	; 128
    2456:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    2458:	8e b5       	in	r24, 0x2e	; 46
    245a:	82 60       	ori	r24, 0x02	; 2
    245c:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    245e:	3b bd       	out	0x2b, r19	; 43
    2460:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    2462:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    246a:	c8 ea       	ldi	r28, 0xA8	; 168
    246c:	d4 e0       	ldi	r29, 0x04	; 4
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	88 83       	st	Y, r24
	servoD.value = 0;
    2472:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    2474:	8c ea       	ldi	r24, 0xAC	; 172
    2476:	94 e0       	ldi	r25, 0x04	; 4
    2478:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <evTime_init>
	servoD.try_cnt = 0;
    247c:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    247e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	debug_msg("SERVO: init\n");
    2482:	8f ea       	ldi	r24, 0xAF	; 175
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	9f 93       	push	r25
    2488:	8f 93       	push	r24
    248a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    2498:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <servoD>
    249c:	92 50       	subi	r25, 0x02	; 2
    249e:	21 e0       	ldi	r18, 0x01	; 1
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	92 30       	cpi	r25, 0x02	; 2
    24a4:	10 f0       	brcs	.+4      	; 0x24aa <servo_is_open+0x12>
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
}
    24aa:	c9 01       	movw	r24, r18
    24ac:	08 95       	ret

000024ae <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    24ae:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <servoD>
    24b2:	91 30       	cpi	r25, 0x01	; 1
    24b4:	a1 f4       	brne	.+40     	; 0x24de <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    24b6:	e8 ea       	ldi	r30, 0xA8	; 168
    24b8:	f4 e0       	ldi	r31, 0x04	; 4
    24ba:	93 e0       	ldi	r25, 0x03	; 3
    24bc:	90 83       	st	Z, r25
		servoD.value = value;
    24be:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    24c0:	1f 92       	push	r1
    24c2:	8f 93       	push	r24
    24c4:	8c eb       	ldi	r24, 0xBC	; 188
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	9f 93       	push	r25
    24ca:	8f 93       	push	r24
    24cc:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
}
    24e2:	08 95       	ret

000024e4 <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    24e4:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <servoD>
    24e8:	9f ef       	ldi	r25, 0xFF	; 255
    24ea:	98 0f       	add	r25, r24
    24ec:	92 30       	cpi	r25, 0x02	; 2
    24ee:	28 f4       	brcc	.+10     	; 0x24fa <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    24f0:	e8 ea       	ldi	r30, 0xA8	; 168
    24f2:	f4 e0       	ldi	r31, 0x04	; 4
    24f4:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    24f6:	85 e0       	ldi	r24, 0x05	; 5
    24f8:	80 83       	st	Z, r24
    24fa:	08 95       	ret

000024fc <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    24fc:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <servoD+0x9>
}
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	08 95       	ret

00002504 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    2504:	0e 94 4c 12 	call	0x2498	; 0x2498 <servo_is_open>
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	d1 f0       	breq	.+52     	; 0x2540 <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    2512:	e8 ea       	ldi	r30, 0xA8	; 168
    2514:	f4 e0       	ldi	r31, 0x04	; 4
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	80 83       	st	Z, r24
		servoD.value = 0;
    251a:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    251c:	1f 92       	push	r1
    251e:	1f 92       	push	r1
    2520:	83 ed       	ldi	r24, 0xD3	; 211
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	9f 93       	push	r25
    2526:	8f 93       	push	r24
    2528:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    252c:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    252e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
		return 1;
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    2540:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <servoD>
    2544:	25 30       	cpi	r18, 0x05	; 5
    2546:	31 f4       	brne	.+12     	; 0x2554 <servo_close+0x50>
	{
		servo_exit_try();
    2548:	0e 94 ab 12 	call	0x2556	; 0x2556 <servo_exit_try>
		error_servo_timer();
    254c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
		return 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    2554:	08 95       	ret

00002556 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    2556:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD+0x1>
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	29 f4       	brne	.+10     	; 0x2568 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    255e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <servoD>
		servo_close();
    2562:	0e 94 82 12 	call	0x2504	; 0x2504 <servo_close>
    2566:	09 c0       	rjmp	.+18     	; 0x257a <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	71 f4       	brne	.+28     	; 0x2588 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    256c:	e8 ea       	ldi	r30, 0xA8	; 168
    256e:	f4 e0       	ldi	r31, 0x04	; 4
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	80 83       	st	Z, r24
		servo_open(servoD.value);
    2574:	83 81       	ldd	r24, Z+3	; 0x03
    2576:	0e 94 c5 12 	call	0x258a	; 0x258a <servo_open>
	}
	else return;
	try_count = 0;
    257a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	servoD.try_cnt++;
    257e:	e8 ea       	ldi	r30, 0xA8	; 168
    2580:	f4 e0       	ldi	r31, 0x04	; 4
    2582:	81 85       	ldd	r24, Z+9	; 0x09
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	81 87       	std	Z+9, r24	; 0x09
    2588:	08 95       	ret

0000258a <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    258a:	cf 93       	push	r28
    258c:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    258e:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <servoD>
    2592:	9f ef       	ldi	r25, 0xFF	; 255
    2594:	98 0f       	add	r25, r24
    2596:	93 30       	cpi	r25, 0x03	; 3
    2598:	d0 f4       	brcc	.+52     	; 0x25ce <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    259a:	e8 ea       	ldi	r30, 0xA8	; 168
    259c:	f4 e0       	ldi	r31, 0x04	; 4
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	80 83       	st	Z, r24
		servoD.value = value;
    25a2:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    25a4:	8c 2f       	mov	r24, r28
    25a6:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    25aa:	1f 92       	push	r1
    25ac:	cf 93       	push	r28
    25ae:	84 ee       	ldi	r24, 0xE4	; 228
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	9f 93       	push	r25
    25b4:	8f 93       	push	r24
    25b6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    25ba:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    25bc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
		return 1;
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0b c0       	rjmp	.+22     	; 0x25e4 <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    25ce:	85 30       	cpi	r24, 0x05	; 5
    25d0:	39 f4       	brne	.+14     	; 0x25e0 <servo_open+0x56>
	{
		servo_exit_try();
    25d2:	0e 94 ab 12 	call	0x2556	; 0x2556 <servo_exit_try>
		error_servo_timer();
    25d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
		return 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <servo_open+0x5a>
	}
	else return 0;
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
}
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    25e8:	ab 01       	movw	r20, r22
    25ea:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    25ec:	8c ea       	ldi	r24, 0xAC	; 172
    25ee:	94 e0       	ldi	r25, 0x04	; 4
    25f0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
    25f4:	08 95       	ret

000025f6 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    25fc:	4b e4       	ldi	r20, 0x4B	; 75
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	86 ef       	ldi	r24, 0xF6	; 246
    2606:	92 e0       	ldi	r25, 0x02	; 2
    2608:	0e 94 2c 18 	call	0x3058	; 0x3058 <evTime_process_period>
    260c:	89 2b       	or	r24, r25
    260e:	09 f4       	brne	.+2      	; 0x2612 <servo_process+0x1c>
    2610:	be c0       	rjmp	.+380    	; 0x278e <servo_process+0x198>
	{
		switch(servoD.state)
    2612:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <servoD>
    2616:	85 30       	cpi	r24, 0x05	; 5
    2618:	a1 f0       	breq	.+40     	; 0x2642 <servo_process+0x4c>
    261a:	30 f4       	brcc	.+12     	; 0x2628 <servo_process+0x32>
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	59 f0       	breq	.+22     	; 0x2636 <servo_process+0x40>
    2620:	83 30       	cpi	r24, 0x03	; 3
    2622:	09 f4       	brne	.+2      	; 0x2626 <servo_process+0x30>
    2624:	69 c0       	rjmp	.+210    	; 0x26f8 <servo_process+0x102>
    2626:	a3 c0       	rjmp	.+326    	; 0x276e <servo_process+0x178>
    2628:	86 30       	cpi	r24, 0x06	; 6
    262a:	09 f4       	brne	.+2      	; 0x262e <servo_process+0x38>
    262c:	7f c0       	rjmp	.+254    	; 0x272c <servo_process+0x136>
    262e:	87 30       	cpi	r24, 0x07	; 7
    2630:	09 f4       	brne	.+2      	; 0x2634 <servo_process+0x3e>
    2632:	99 c0       	rjmp	.+306    	; 0x2766 <servo_process+0x170>
    2634:	9c c0       	rjmp	.+312    	; 0x276e <servo_process+0x178>
		{
			case SERVO_OPEN:
			servoD.value = value;
    2636:	c0 93 ab 04 	sts	0x04AB, r28	; 0x8004ab <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    263a:	8c 2f       	mov	r24, r28
    263c:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
			break;
    2640:	96 c0       	rjmp	.+300    	; 0x276e <servo_process+0x178>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    2642:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2646:	81 11       	cpse	r24, r1
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	81 ef       	ldi	r24, 0xF1	; 241
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
		try_count++;
    265a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    2664:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <servoD+0x3>
    2668:	89 0f       	add	r24, r25
    266a:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
    266e:	30 c0       	rjmp	.+96     	; 0x26d0 <servo_process+0xda>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	89 30       	cpi	r24, 0x09	; 9
    2674:	08 f5       	brcc	.+66     	; 0x26b8 <servo_process+0xc2>
	{
		if (evTime_check(&timeout) == 1)
    2676:	81 ef       	ldi	r24, 0xF1	; 241
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	39 f5       	brne	.+78     	; 0x26d0 <servo_process+0xda>
		{
			evTime_start(&timeout, 250);
    2682:	4a ef       	ldi	r20, 0xFA	; 250
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	81 ef       	ldi	r24, 0xF1	; 241
    268c:	92 e0       	ldi	r25, 0x02	; 2
    268e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
			try_count++;
    2692:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
			servo_set_pwm_val(servoD.value + try_count*dark_menu_get_value(MENU_TRY_OPEN_CALIBRATION));
    269c:	c0 91 ab 04 	lds	r28, 0x04AB	; 0x8004ab <servoD+0x3>
    26a0:	87 e0       	ldi	r24, 0x07	; 7
    26a2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    26a6:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <try_count>
    26aa:	89 9f       	mul	r24, r25
    26ac:	c0 0d       	add	r28, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	8c 2f       	mov	r24, r28
    26b2:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
    26b6:	0c c0       	rjmp	.+24     	; 0x26d0 <servo_process+0xda>
		}
	}
	else
	{
		try_count = 0;
    26b8:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value);
    26bc:	c8 ea       	ldi	r28, 0xA8	; 168
    26be:	d4 e0       	ldi	r29, 0x04	; 4
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	0e 94 96 11 	call	0x232c	; 0x232c <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	88 83       	st	Y, r24
		servoD.try_cnt++;
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    26d0:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <servoD+0x3>
    26d4:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	82 0f       	add	r24, r18
    26dc:	91 1d       	adc	r25, r1
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	86 ef       	ldi	r24, 0xF6	; 246
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	9f 93       	push	r25
    26e8:	8f 93       	push	r24
    26ea:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	3b c0       	rjmp	.+118    	; 0x276e <servo_process+0x178>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26f8:	8c ee       	ldi	r24, 0xEC	; 236
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <evTime_is_stated>
    2700:	89 2b       	or	r24, r25
    2702:	59 f0       	breq	.+22     	; 0x271a <servo_process+0x124>
	{
		if (evTime_check(&timeout) == 1)
    2704:	8c ee       	ldi	r24, 0xEC	; 236
    2706:	92 e0       	ldi	r25, 0x02	; 2
    2708:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	79 f5       	brne	.+94     	; 0x276e <servo_process+0x178>
		{
			servoD.state = SERVO_OPEN;
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <servoD>
			LED_SERVO_ON;
    2716:	96 9a       	sbi	0x12, 6	; 18
    2718:	2a c0       	rjmp	.+84     	; 0x276e <servo_process+0x178>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    271a:	48 eb       	ldi	r20, 0xB8	; 184
    271c:	5b e0       	ldi	r21, 0x0B	; 11
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	8c ee       	ldi	r24, 0xEC	; 236
    2724:	92 e0       	ldi	r25, 0x02	; 2
    2726:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
    272a:	21 c0       	rjmp	.+66     	; 0x276e <servo_process+0x178>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    272c:	87 ee       	ldi	r24, 0xE7	; 231
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <evTime_is_stated>
    2734:	89 2b       	or	r24, r25
    2736:	71 f0       	breq	.+28     	; 0x2754 <servo_process+0x15e>
	{
		if (evTime_check(&timeout) == 1)
    2738:	87 ee       	ldi	r24, 0xE7	; 231
    273a:	92 e0       	ldi	r25, 0x02	; 2
    273c:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	a9 f4       	brne	.+42     	; 0x276e <servo_process+0x178>
		{
			servoD.state = SERVO_ERROR;
    2744:	87 e0       	ldi	r24, 0x07	; 7
    2746:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    274a:	8f e1       	ldi	r24, 0x1F	; 31
    274c:	9e e4       	ldi	r25, 0x4E	; 78
    274e:	9b bd       	out	0x2b, r25	; 43
    2750:	8a bd       	out	0x2a, r24	; 42
    2752:	0d c0       	rjmp	.+26     	; 0x276e <servo_process+0x178>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    2754:	4c ea       	ldi	r20, 0xAC	; 172
    2756:	5d e0       	ldi	r21, 0x0D	; 13
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	87 ee       	ldi	r24, 0xE7	; 231
    275e:	92 e0       	ldi	r25, 0x02	; 2
    2760:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
    2764:	04 c0       	rjmp	.+8      	; 0x276e <servo_process+0x178>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2766:	8f e1       	ldi	r24, 0x1F	; 31
    2768:	9e e4       	ldi	r25, 0x4E	; 78
    276a:	9b bd       	out	0x2b, r25	; 43
    276c:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    276e:	8c ea       	ldi	r24, 0xAC	; 172
    2770:	94 e0       	ldi	r25, 0x04	; 4
    2772:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	51 f4       	brne	.+20     	; 0x278e <servo_process+0x198>
		{
			servoD.try_cnt = 0;
    277a:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	92 e0       	ldi	r25, 0x02	; 2
    2782:	9f 93       	push	r25
    2784:	8f 93       	push	r24
    2786:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
		}
	}
}
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2794:	e1 e4       	ldi	r30, 0x41	; 65
    2796:	f4 e0       	ldi	r31, 0x04	; 4
    2798:	16 86       	std	Z+14, r1	; 0x0e
    279a:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    279c:	12 86       	std	Z+10, r1	; 0x0a
    279e:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    27a0:	14 86       	std	Z+12, r1	; 0x0c
    27a2:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    27a4:	e4 e1       	ldi	r30, 0x14	; 20
    27a6:	f4 e0       	ldi	r31, 0x04	; 4
    27a8:	16 86       	std	Z+14, r1	; 0x0e
    27aa:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    27ac:	12 86       	std	Z+10, r1	; 0x0a
    27ae:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    27b0:	14 86       	std	Z+12, r1	; 0x0c
    27b2:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    27b4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <button3+0xc>
    27b8:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <button3+0xb>
	
	button5.timer_callback = 0;
    27bc:	e2 ef       	ldi	r30, 0xF2	; 242
    27be:	f3 e0       	ldi	r31, 0x03	; 3
    27c0:	16 86       	std	Z+14, r1	; 0x0e
    27c2:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    27c4:	14 86       	std	Z+12, r1	; 0x0c
    27c6:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    27c8:	12 86       	std	Z+10, r1	; 0x0a
    27ca:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    27cc:	e2 e3       	ldi	r30, 0x32	; 50
    27ce:	f4 e0       	ldi	r31, 0x04	; 4
    27d0:	16 86       	std	Z+14, r1	; 0x0e
    27d2:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    27d4:	14 86       	std	Z+12, r1	; 0x0c
    27d6:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    27d8:	12 86       	std	Z+10, r1	; 0x0a
    27da:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    27dc:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <button7+0xc>
    27e0:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <button7+0xb>
	
	button8.fall_callback = 0;
    27e4:	ef e5       	ldi	r30, 0x5F	; 95
    27e6:	f4 e0       	ldi	r31, 0x04	; 4
    27e8:	14 86       	std	Z+12, r1	; 0x0c
    27ea:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    27ec:	16 86       	std	Z+14, r1	; 0x0e
    27ee:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    27f0:	12 86       	std	Z+10, r1	; 0x0a
    27f2:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    27f4:	e4 ed       	ldi	r30, 0xD4	; 212
    27f6:	f3 e0       	ldi	r31, 0x03	; 3
    27f8:	14 86       	std	Z+12, r1	; 0x0c
    27fa:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    27fc:	16 86       	std	Z+14, r1	; 0x0e
    27fe:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    2800:	12 86       	std	Z+10, r1	; 0x0a
    2802:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2804:	e3 ee       	ldi	r30, 0xE3	; 227
    2806:	f3 e0       	ldi	r31, 0x03	; 3
    2808:	14 86       	std	Z+12, r1	; 0x0c
    280a:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    280c:	16 86       	std	Z+14, r1	; 0x0e
    280e:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    2810:	12 86       	std	Z+10, r1	; 0x0a
    2812:	11 86       	std	Z+9, r1	; 0x09
    2814:	08 95       	ret

00002816 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2816:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    281a:	82 30       	cpi	r24, 0x02	; 2
    281c:	49 f0       	breq	.+18     	; 0x2830 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    281e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2822:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2826:	98 60       	ori	r25, 0x08	; 8
    2828:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    282c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2830:	08 95       	ret

00002832 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2832:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	49 f0       	breq	.+18     	; 0x284c <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    283a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    283e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2842:	80 68       	ori	r24, 0x80	; 128
    2844:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2848:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    284c:	08 95       	ret

0000284e <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    284e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2852:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2856:	92 60       	ori	r25, 0x02	; 2
    2858:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    285c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2860:	08 95       	ret

00002862 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2862:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2866:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    286a:	99 7f       	andi	r25, 0xF9	; 249
    286c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2870:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2874:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    2878:	08 95       	ret

0000287a <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    287a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    287e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2882:	80 62       	ori	r24, 0x20	; 32
    2884:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2888:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    288c:	08 95       	ret

0000288e <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    288e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2892:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2896:	8f 79       	andi	r24, 0x9F	; 159
    2898:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    289c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    28a0:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    28a4:	08 95       	ret

000028a6 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    28a6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    28aa:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    28ae:	90 62       	ori	r25, 0x20	; 32
    28b0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    28b4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    28b8:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    28bc:	8b 30       	cpi	r24, 0x0B	; 11
    28be:	18 f0       	brcs	.+6      	; 0x28c6 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    28c0:	81 50       	subi	r24, 0x01	; 1
    28c2:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    28c6:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    28d8:	08 95       	ret

000028da <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    28da:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    28de:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    28e2:	90 62       	ori	r25, 0x20	; 32
    28e4:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    28e8:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value > 10)
    28ec:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    28f0:	8b 30       	cpi	r24, 0x0B	; 11
    28f2:	18 f0       	brcs	.+6      	; 0x28fa <button_motor_sub_fall_cb+0x20>
		motor_value--;
    28f4:	81 50       	subi	r24, 0x01	; 1
    28f6:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    28fa:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <disp_get_state>
    290a:	02 97       	sbiw	r24, 0x02	; 2
    290c:	29 f4       	brne	.+10     	; 0x2918 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2916:	04 c0       	rjmp	.+8      	; 0x2920 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
	state_measure_volt++;
    2920:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	19 f4       	brne	.+6      	; 0x2934 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    292e:	66 e0       	ldi	r22, 0x06	; 6
    2930:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2934:	08 95       	ret

00002936 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2936:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    293a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    293e:	90 62       	ori	r25, 0x20	; 32
    2940:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2944:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 99)
    2948:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    294c:	83 36       	cpi	r24, 0x63	; 99
    294e:	18 f4       	brcc	.+6      	; 0x2956 <button_motor_add_fall_cb+0x20>
		motor_value++;
    2950:	8f 5f       	subi	r24, 0xFF	; 255
    2952:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2956:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <disp_get_state>
    2966:	02 97       	sbiw	r24, 0x02	; 2
    2968:	29 f4       	brne	.+10     	; 0x2974 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    296a:	61 e0       	ldi	r22, 0x01	; 1
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2972:	04 c0       	rjmp	.+8      	; 0x297c <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2974:	61 e0       	ldi	r22, 0x01	; 1
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
	state_measure_volt++;
    297c:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	19 f4       	brne	.+6      	; 0x2990 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    298a:	66 e0       	ldi	r22, 0x06	; 6
    298c:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2990:	08 95       	ret

00002992 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2992:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2996:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    299a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    299e:	97 7e       	andi	r25, 0xE7	; 231
    29a0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29a4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    29a8:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    29ac:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    29b0:	88 23       	and	r24, r24
    29b2:	19 f0       	breq	.+6      	; 0x29ba <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    29b4:	81 50       	subi	r24, 0x01	; 1
    29b6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <disp_get_state>
    29c0:	02 97       	sbiw	r24, 0x02	; 2
    29c2:	29 f4       	brne	.+10     	; 0x29ce <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    29cc:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    29d6:	08 95       	ret

000029d8 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    29d8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    29dc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29e0:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29e4:	8f 77       	andi	r24, 0x7F	; 127
    29e6:	9e 7f       	andi	r25, 0xFE	; 254
    29e8:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29ec:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    29f0:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    29f4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    29f8:	88 23       	and	r24, r24
    29fa:	19 f0       	breq	.+6      	; 0x2a02 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    29fc:	81 50       	subi	r24, 0x01	; 1
    29fe:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <disp_get_state>
    2a08:	02 97       	sbiw	r24, 0x02	; 2
    2a0a:	29 f4       	brne	.+10     	; 0x2a16 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2a14:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a16:	61 e0       	ldi	r22, 0x01	; 1
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2a1e:	08 95       	ret

00002a20 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a20:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a24:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a28:	90 62       	ori	r25, 0x20	; 32
    2a2a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a2e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2a32:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2a36:	83 36       	cpi	r24, 0x63	; 99
    2a38:	28 f4       	brcc	.+10     	; 0x2a44 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    2a3a:	8f 5f       	subi	r24, 0xFF	; 255
    2a3c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		error_servo_timer();
    2a40:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2a44:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
    2a56:	08 95       	ret

00002a58 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2a58:	e4 eb       	ldi	r30, 0xB4	; 180
    2a5a:	f4 e0       	ldi	r31, 0x04	; 4
    2a5c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2a60:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2a62:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2a66:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2a68:	bf 01       	movw	r22, r30
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	0e 94 06 11 	call	0x220c	; 0x220c <mem_save_data>
    2a70:	08 95       	ret

00002a72 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a72:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a76:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a7a:	90 62       	ori	r25, 0x20	; 32
    2a7c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a80:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 10)
    2a84:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2a88:	8a 30       	cpi	r24, 0x0A	; 10
    2a8a:	38 f4       	brcc	.+14     	; 0x2a9a <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2a8c:	8a e0       	ldi	r24, 0x0A	; 10
    2a8e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2a92:	6a e0       	ldi	r22, 0x0A	; 10
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	}
	sys_save_display();
    2a9a:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <sys_save_display>
	if(!dcmotor_is_on())
    2a9e:	0e 94 8a 07 	call	0xf14	; 0xf14 <dcmotor_is_on>
    2aa2:	89 2b       	or	r24, r25
    2aa4:	39 f4       	brne	.+14     	; 0x2ab4 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2aa6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2aaa:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2aae:	0e 94 57 12 	call	0x24ae	; 0x24ae <servo_delayed_open>
    2ab2:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2ab4:	0e 94 95 07 	call	0xf2a	; 0xf2a <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2ab8:	0e 94 82 12 	call	0x2504	; 0x2504 <servo_close>
    2abc:	08 95       	ret

00002abe <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2abe:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ac2:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2ac6:	90 62       	ori	r25, 0x20	; 32
    2ac8:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2acc:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (servo_vibro_value < 10)
    2ad0:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2ad4:	8a 30       	cpi	r24, 0x0A	; 10
    2ad6:	38 f4       	brcc	.+14     	; 0x2ae6 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2ad8:	8a e0       	ldi	r24, 0x0A	; 10
    2ada:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2ade:	6a e0       	ldi	r22, 0x0A	; 10
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2ae6:	0e 94 4c 12 	call	0x2498	; 0x2498 <servo_is_open>
    2aea:	89 2b       	or	r24, r25
    2aec:	19 f0       	breq	.+6      	; 0x2af4 <button_on_off_pwm+0x36>
    2aee:	0e 94 82 12 	call	0x2504	; 0x2504 <servo_close>
    2af2:	08 95       	ret
	else servo_open(servo_vibro_value);
    2af4:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2af8:	0e 94 c5 12 	call	0x258a	; 0x258a <servo_open>
    2afc:	08 95       	ret

00002afe <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.fall_callback = button4_toggle_system;
    2afe:	88 e2       	ldi	r24, 0x28	; 40
    2b00:	96 e1       	ldi	r25, 0x16	; 22
    2b02:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <button4+0xc>
    2b06:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <button4+0xb>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
	disp_off_segments();
    2b12:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2b16:	62 eb       	ldi	r22, 0xB2	; 178
    2b18:	74 e0       	ldi	r23, 0x04	; 4
    2b1a:	83 e0       	ldi	r24, 0x03	; 3
    2b1c:	0e 94 4e 11 	call	0x229c	; 0x229c <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2b20:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <mem_last_save+0x1>
    2b24:	96 ef       	ldi	r25, 0xF6	; 246
    2b26:	98 0f       	add	r25, r24
    2b28:	9a 35       	cpi	r25, 0x5A	; 90
    2b2a:	10 f4       	brcc	.+4      	; 0x2b30 <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2b2c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2b30:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mem_last_save>
    2b34:	96 ef       	ldi	r25, 0xF6	; 246
    2b36:	98 0f       	add	r25, r24
    2b38:	9a 35       	cpi	r25, 0x5A	; 90
    2b3a:	10 f4       	brcc	.+4      	; 0x2b40 <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2b3c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
    2b40:	08 95       	ret

00002b42 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2b42:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2b46:	42 e0       	ldi	r20, 0x02	; 2
    2b48:	68 ee       	ldi	r22, 0xE8	; 232
    2b4a:	73 e0       	ldi	r23, 0x03	; 3
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 a1 0b 	call	0x1742	; 0x1742 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2b54:	0e 94 70 07 	call	0xee0	; 0xee0 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	0e 94 16 12 	call	0x242c	; 0x242c <servo_init>
	#endif
	error_init();
    2b5e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <error_init>
	init_measure();
    2b62:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <init_measure>
	init_buzzer();
    2b66:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2b72:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2b76:	e1 e4       	ldi	r30, 0x41	; 65
    2b78:	f4 e0       	ldi	r31, 0x04	; 4
    2b7a:	8b e0       	ldi	r24, 0x0B	; 11
    2b7c:	94 e1       	ldi	r25, 0x14	; 20
    2b7e:	96 87       	std	Z+14, r25	; 0x0e
    2b80:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2b82:	8d e6       	ldi	r24, 0x6D	; 109
    2b84:	94 e1       	ldi	r25, 0x14	; 20
    2b86:	94 87       	std	Z+12, r25	; 0x0c
    2b88:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2b8a:	89 ec       	ldi	r24, 0xC9	; 201
    2b8c:	94 e1       	ldi	r25, 0x14	; 20
    2b8e:	92 87       	std	Z+10, r25	; 0x0a
    2b90:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2b92:	e4 e1       	ldi	r30, 0x14	; 20
    2b94:	f4 e0       	ldi	r31, 0x04	; 4
    2b96:	89 e1       	ldi	r24, 0x19	; 25
    2b98:	94 e1       	ldi	r25, 0x14	; 20
    2b9a:	96 87       	std	Z+14, r25	; 0x0e
    2b9c:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2b9e:	8b e9       	ldi	r24, 0x9B	; 155
    2ba0:	94 e1       	ldi	r25, 0x14	; 20
    2ba2:	94 87       	std	Z+12, r25	; 0x0c
    2ba4:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2ba6:	8c ee       	ldi	r24, 0xEC	; 236
    2ba8:	94 e1       	ldi	r25, 0x14	; 20
    2baa:	92 87       	std	Z+10, r25	; 0x0a
    2bac:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2bae:	89 e3       	ldi	r24, 0x39	; 57
    2bb0:	95 e1       	ldi	r25, 0x15	; 21
    2bb2:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <button3+0xc>
    2bb6:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2bba:	e2 ef       	ldi	r30, 0xF2	; 242
    2bbc:	f3 e0       	ldi	r31, 0x03	; 3
    2bbe:	87 e2       	ldi	r24, 0x27	; 39
    2bc0:	94 e1       	ldi	r25, 0x14	; 20
    2bc2:	96 87       	std	Z+14, r25	; 0x0e
    2bc4:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2bc6:	81 e3       	ldi	r24, 0x31	; 49
    2bc8:	94 e1       	ldi	r25, 0x14	; 20
    2bca:	92 87       	std	Z+10, r25	; 0x0a
    2bcc:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2bce:	83 e5       	ldi	r24, 0x53	; 83
    2bd0:	94 e1       	ldi	r25, 0x14	; 20
    2bd2:	94 87       	std	Z+12, r25	; 0x0c
    2bd4:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2bd6:	e2 e3       	ldi	r30, 0x32	; 50
    2bd8:	f4 e0       	ldi	r31, 0x04	; 4
    2bda:	8d e3       	ldi	r24, 0x3D	; 61
    2bdc:	94 e1       	ldi	r25, 0x14	; 20
    2bde:	96 87       	std	Z+14, r25	; 0x0e
    2be0:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2be2:	87 e4       	ldi	r24, 0x47	; 71
    2be4:	94 e1       	ldi	r25, 0x14	; 20
    2be6:	92 87       	std	Z+10, r25	; 0x0a
    2be8:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2bea:	80 e1       	ldi	r24, 0x10	; 16
    2bec:	95 e1       	ldi	r25, 0x15	; 21
    2bee:	94 87       	std	Z+12, r25	; 0x0c
    2bf0:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2bf2:	8f e5       	ldi	r24, 0x5F	; 95
    2bf4:	95 e1       	ldi	r25, 0x15	; 21
    2bf6:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <button7+0xc>
    2bfa:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2bfe:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2c08:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
    2c12:	08 95       	ret

00002c14 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2c14:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	dcmotorpwm_deinit();
    2c18:	0e 94 84 07 	call	0xf08	; 0xf08 <dcmotorpwm_deinit>
	off_button();
    2c1c:	0e 94 ca 13 	call	0x2794	; 0x2794 <off_button>
	error_deinit();
    2c20:	0e 94 85 0c 	call	0x190a	; 0x190a <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2c24:	0e 94 82 12 	call	0x2504	; 0x2504 <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2c28:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <system_events+0x1>
    2c2c:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	0e 94 09 0a 	call	0x1412	; 0x1412 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2c38:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2c3c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2c40:	8e 7f       	andi	r24, 0xFE	; 254
    2c42:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2c46:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
	init_menu();
    2c4a:	0e 94 ef 06 	call	0xdde	; 0xdde <init_menu>
    2c4e:	08 95       	ret

00002c50 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2c50:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2c54:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2c58:	80 ff       	sbrs	r24, 0
    2c5a:	03 c0       	rjmp	.+6      	; 0x2c62 <button4_toggle_system+0x12>
	{
		off_system();
    2c5c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <off_system>
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2c62:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2c66:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2c6a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2c6e:	90 62       	ori	r25, 0x20	; 32
    2c70:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2c74:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2c78:	08 95       	ret

00002c7a <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2c7a:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    2c7e:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    2c82:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    2c86:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    2c8a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2125>
    2c8e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2125+0x1>
    2c92:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2125+0x2>
    2c96:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2125+0x3>
    2c9a:	84 17       	cp	r24, r20
    2c9c:	95 07       	cpc	r25, r21
    2c9e:	a6 07       	cpc	r26, r22
    2ca0:	b7 07       	cpc	r27, r23
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <disp_fast_process+0x2c>
    2ca4:	a4 c0       	rjmp	.+328    	; 0x2dee <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2ca6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2caa:	85 ff       	sbrs	r24, 5
    2cac:	21 c0       	rjmp	.+66     	; 0x2cf0 <disp_fast_process+0x76>
    2cae:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2cb2:	63 36       	cpi	r22, 0x63	; 99
    2cb4:	e8 f4       	brcc	.+58     	; 0x2cf0 <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2cb6:	6b 30       	cpi	r22, 0x0B	; 11
    2cb8:	40 f0       	brcs	.+16     	; 0x2cca <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2cba:	6f 5f       	subi	r22, 0xFF	; 255
    2cbc:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
				error_servo_timer();
    2cc6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2cca:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <counter_very_fast_servo_add>
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2cd4:	8f 30       	cpi	r24, 0x0F	; 15
    2cd6:	60 f0       	brcs	.+24     	; 0x2cf0 <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2cd8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2cdc:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2ce0:	8f 7d       	andi	r24, 0xDF	; 223
    2ce2:	80 64       	ori	r24, 0x40	; 64
    2ce4:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2ce8:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_add = 0;
    2cec:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2cf0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2cf4:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2cf8:	91 ff       	sbrs	r25, 1
    2cfa:	21 c0       	rjmp	.+66     	; 0x2d3e <disp_fast_process+0xc4>
    2cfc:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2d00:	66 23       	and	r22, r22
    2d02:	e9 f0       	breq	.+58     	; 0x2d3e <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2d04:	6b 30       	cpi	r22, 0x0B	; 11
    2d06:	40 f0       	brcs	.+16     	; 0x2d18 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2d08:	61 50       	subi	r22, 0x01	; 1
    2d0a:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
				error_servo_timer();
    2d14:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2d18:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <counter_very_fast_servo_sub>
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2d22:	8f 30       	cpi	r24, 0x0F	; 15
    2d24:	60 f0       	brcs	.+24     	; 0x2d3e <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2d26:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d2a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2d2e:	9d 7f       	andi	r25, 0xFD	; 253
    2d30:	94 60       	ori	r25, 0x04	; 4
    2d32:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2d36:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_sub = 0;
    2d3a:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2d3e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d42:	87 ff       	sbrs	r24, 7
    2d44:	1d c0       	rjmp	.+58     	; 0x2d80 <disp_fast_process+0x106>
    2d46:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2d4a:	63 36       	cpi	r22, 0x63	; 99
    2d4c:	c8 f4       	brcc	.+50     	; 0x2d80 <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2d4e:	6f 5f       	subi	r22, 0xFF	; 255
    2d50:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
			counter_very_fast_motor_add++;
    2d5a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <counter_very_fast_motor_add>
    2d5e:	8f 5f       	subi	r24, 0xFF	; 255
    2d60:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2d64:	8f 30       	cpi	r24, 0x0F	; 15
    2d66:	60 f0       	brcs	.+24     	; 0x2d80 <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2d68:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d6c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2d70:	8f 77       	andi	r24, 0x7F	; 127
    2d72:	91 60       	ori	r25, 0x01	; 1
    2d74:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2d78:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_add = 0;
    2d7c:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2d80:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d84:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2d88:	93 ff       	sbrs	r25, 3
    2d8a:	1d c0       	rjmp	.+58     	; 0x2dc6 <disp_fast_process+0x14c>
    2d8c:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2d90:	6b 30       	cpi	r22, 0x0B	; 11
    2d92:	c8 f0       	brcs	.+50     	; 0x2dc6 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2d94:	61 50       	subi	r22, 0x01	; 1
    2d96:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
			counter_very_fast_motor_sub++;
    2da0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <counter_very_fast_motor_sub>
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2daa:	8f 30       	cpi	r24, 0x0F	; 15
    2dac:	60 f0       	brcs	.+24     	; 0x2dc6 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2dae:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2db2:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2db6:	97 7f       	andi	r25, 0xF7	; 247
    2db8:	90 61       	ori	r25, 0x10	; 16
    2dba:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2dbe:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_sub = 0;
    2dc2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2dc6:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2125>
    2dca:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2125+0x1>
    2dce:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2125+0x2>
    2dd2:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2125+0x3>
    2dd6:	80 5b       	subi	r24, 0xB0	; 176
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	af 4f       	sbci	r26, 0xFF	; 255
    2ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dde:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <disp_fast_timer.2125>
    2de2:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <disp_fast_timer.2125+0x1>
    2de6:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <disp_fast_timer.2125+0x2>
    2dea:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <disp_fast_timer.2125+0x3>
    2dee:	08 95       	ret

00002df0 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2df0:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <mktime+0x2>
    2df4:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <mktime+0x3>
    2df8:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <mktime+0x4>
    2dfc:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <mktime+0x5>
    2e00:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    2e04:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    2e08:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    2e0c:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    2e10:	84 17       	cp	r24, r20
    2e12:	95 07       	cpc	r25, r21
    2e14:	a6 07       	cpc	r26, r22
    2e16:	b7 07       	cpc	r27, r23
    2e18:	08 f0       	brcs	.+2      	; 0x2e1c <disp_very_fast_process+0x2c>
    2e1a:	57 c0       	rjmp	.+174    	; 0x2eca <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2e1c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2e20:	83 36       	cpi	r24, 0x63	; 99
    2e22:	70 f4       	brcc	.+28     	; 0x2e40 <disp_very_fast_process+0x50>
    2e24:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e28:	86 ff       	sbrs	r24, 6
    2e2a:	0a c0       	rjmp	.+20     	; 0x2e40 <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2e2c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2e30:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2e34:	6f 5f       	subi	r22, 0xFF	; 255
    2e36:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2e40:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2e44:	6b 30       	cpi	r22, 0x0B	; 11
    2e46:	70 f0       	brcs	.+28     	; 0x2e64 <disp_very_fast_process+0x74>
    2e48:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e4c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e50:	92 ff       	sbrs	r25, 2
    2e52:	08 c0       	rjmp	.+16     	; 0x2e64 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2e54:	61 50       	subi	r22, 0x01	; 1
    2e56:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
				error_servo_timer();
    2e60:	0e 94 9a 0c 	call	0x1934	; 0x1934 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2e64:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2e68:	63 36       	cpi	r22, 0x63	; 99
    2e6a:	60 f4       	brcc	.+24     	; 0x2e84 <disp_very_fast_process+0x94>
    2e6c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e70:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e74:	90 ff       	sbrs	r25, 0
    2e76:	06 c0       	rjmp	.+12     	; 0x2e84 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2e78:	6f 5f       	subi	r22, 0xFF	; 255
    2e7a:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2e84:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2e88:	6b 30       	cpi	r22, 0x0B	; 11
    2e8a:	60 f0       	brcs	.+24     	; 0x2ea4 <disp_very_fast_process+0xb4>
    2e8c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e90:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e94:	94 ff       	sbrs	r25, 4
    2e96:	06 c0       	rjmp	.+12     	; 0x2ea4 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2e98:	61 50       	subi	r22, 0x01	; 1
    2e9a:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2ea4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    2ea8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    2eac:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    2eb0:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    2eb4:	4e 96       	adiw	r24, 0x1e	; 30
    2eb6:	a1 1d       	adc	r26, r1
    2eb8:	b1 1d       	adc	r27, r1
    2eba:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <disp_very_fast_timer>
    2ebe:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <disp_very_fast_timer+0x1>
    2ec2:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <disp_very_fast_timer+0x2>
    2ec6:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <disp_very_fast_timer+0x3>
    2eca:	08 95       	ret

00002ecc <system_error>:
}


void system_error(void)
{
	off_button();
    2ecc:	0e 94 ca 13 	call	0x2794	; 0x2794 <off_button>
    2ed0:	08 95       	ret

00002ed2 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2ed2:	1f 92       	push	r1
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	0f 92       	push	r0
    2eda:	11 24       	eor	r1, r1
    2edc:	2f 93       	push	r18
    2ede:	3f 93       	push	r19
    2ee0:	4f 93       	push	r20
    2ee2:	5f 93       	push	r21
    2ee4:	6f 93       	push	r22
    2ee6:	7f 93       	push	r23
    2ee8:	8f 93       	push	r24
    2eea:	9f 93       	push	r25
    2eec:	af 93       	push	r26
    2eee:	bf 93       	push	r27
    2ef0:	ef 93       	push	r30
    2ef2:	ff 93       	push	r31
    2ef4:	e6 eb       	ldi	r30, 0xB6	; 182
    2ef6:	f4 e0       	ldi	r31, 0x04	; 4
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	c2 96       	adiw	r24, 0x32	; 50
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	88 3e       	cpi	r24, 0xE8	; 232
    2f08:	93 40       	sbci	r25, 0x03	; 3
    2f0a:	88 f0       	brcs	.+34     	; 0x2f2e <__vector_10+0x5c>
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	a4 81       	ldd	r26, Z+4	; 0x04
    2f12:	b5 81       	ldd	r27, Z+5	; 0x05
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	a1 1d       	adc	r26, r1
    2f18:	b1 1d       	adc	r27, r1
    2f1a:	82 83       	std	Z+2, r24	; 0x02
    2f1c:	93 83       	std	Z+3, r25	; 0x03
    2f1e:	a4 83       	std	Z+4, r26	; 0x04
    2f20:	b5 83       	std	Z+5, r27	; 0x05
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	88 5e       	subi	r24, 0xE8	; 232
    2f28:	93 40       	sbci	r25, 0x03	; 3
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	89 e0       	ldi	r24, 0x09	; 9
    2f30:	93 e0       	ldi	r25, 0x03	; 3
    2f32:	0e 94 67 09 	call	0x12ce	; 0x12ce <display_process>
    2f36:	ff 91       	pop	r31
    2f38:	ef 91       	pop	r30
    2f3a:	bf 91       	pop	r27
    2f3c:	af 91       	pop	r26
    2f3e:	9f 91       	pop	r25
    2f40:	8f 91       	pop	r24
    2f42:	7f 91       	pop	r23
    2f44:	6f 91       	pop	r22
    2f46:	5f 91       	pop	r21
    2f48:	4f 91       	pop	r20
    2f4a:	3f 91       	pop	r19
    2f4c:	2f 91       	pop	r18
    2f4e:	0f 90       	pop	r0
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	0f 90       	pop	r0
    2f54:	1f 90       	pop	r1
    2f56:	18 95       	reti

00002f58 <timer0_init>:
    2f58:	93 b7       	in	r25, 0x33	; 51
    2f5a:	98 60       	ori	r25, 0x08	; 8
    2f5c:	93 bf       	out	0x33, r25	; 51
    2f5e:	6c bf       	out	0x3c, r22	; 60
    2f60:	82 30       	cpi	r24, 0x02	; 2
    2f62:	99 f0       	breq	.+38     	; 0x2f8a <timer0_init+0x32>
    2f64:	28 f4       	brcc	.+10     	; 0x2f70 <timer0_init+0x18>
    2f66:	88 23       	and	r24, r24
    2f68:	41 f0       	breq	.+16     	; 0x2f7a <timer0_init+0x22>
    2f6a:	81 30       	cpi	r24, 0x01	; 1
    2f6c:	51 f0       	breq	.+20     	; 0x2f82 <timer0_init+0x2a>
    2f6e:	19 c0       	rjmp	.+50     	; 0x2fa2 <timer0_init+0x4a>
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	79 f0       	breq	.+30     	; 0x2f92 <timer0_init+0x3a>
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	89 f0       	breq	.+34     	; 0x2f9a <timer0_init+0x42>
    2f78:	14 c0       	rjmp	.+40     	; 0x2fa2 <timer0_init+0x4a>
    2f7a:	83 b7       	in	r24, 0x33	; 51
    2f7c:	81 60       	ori	r24, 0x01	; 1
    2f7e:	83 bf       	out	0x33, r24	; 51
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <timer0_init+0x50>
    2f82:	83 b7       	in	r24, 0x33	; 51
    2f84:	82 60       	ori	r24, 0x02	; 2
    2f86:	83 bf       	out	0x33, r24	; 51
    2f88:	0f c0       	rjmp	.+30     	; 0x2fa8 <timer0_init+0x50>
    2f8a:	83 b7       	in	r24, 0x33	; 51
    2f8c:	83 60       	ori	r24, 0x03	; 3
    2f8e:	83 bf       	out	0x33, r24	; 51
    2f90:	0b c0       	rjmp	.+22     	; 0x2fa8 <timer0_init+0x50>
    2f92:	83 b7       	in	r24, 0x33	; 51
    2f94:	84 60       	ori	r24, 0x04	; 4
    2f96:	83 bf       	out	0x33, r24	; 51
    2f98:	07 c0       	rjmp	.+14     	; 0x2fa8 <timer0_init+0x50>
    2f9a:	83 b7       	in	r24, 0x33	; 51
    2f9c:	85 60       	ori	r24, 0x05	; 5
    2f9e:	83 bf       	out	0x33, r24	; 51
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <timer0_init+0x50>
    2fa2:	83 b7       	in	r24, 0x33	; 51
    2fa4:	81 60       	ori	r24, 0x01	; 1
    2fa6:	83 bf       	out	0x33, r24	; 51
    2fa8:	89 b7       	in	r24, 0x39	; 57
    2faa:	82 60       	ori	r24, 0x02	; 2
    2fac:	89 bf       	out	0x39, r24	; 57
    2fae:	08 95       	ret

00002fb0 <evTime_init>:
    2fb0:	23 e0       	ldi	r18, 0x03	; 3
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	24 83       	std	Z+4, r18	; 0x04
    2fb6:	10 82       	st	Z, r1
    2fb8:	11 82       	std	Z+1, r1	; 0x01
    2fba:	12 82       	std	Z+2, r1	; 0x02
    2fbc:	13 82       	std	Z+3, r1	; 0x03
    2fbe:	08 95       	ret

00002fc0 <evTime_start>:
    2fc0:	0f 93       	push	r16
    2fc2:	1f 93       	push	r17
    2fc4:	21 e0       	ldi	r18, 0x01	; 1
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	24 83       	std	Z+4, r18	; 0x04
    2fca:	00 91 b8 04 	lds	r16, 0x04B8	; 0x8004b8 <mktime+0x2>
    2fce:	10 91 b9 04 	lds	r17, 0x04B9	; 0x8004b9 <mktime+0x3>
    2fd2:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <mktime+0x4>
    2fd6:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <mktime+0x5>
    2fda:	40 0f       	add	r20, r16
    2fdc:	51 1f       	adc	r21, r17
    2fde:	62 1f       	adc	r22, r18
    2fe0:	73 1f       	adc	r23, r19
    2fe2:	40 83       	st	Z, r20
    2fe4:	51 83       	std	Z+1, r21	; 0x01
    2fe6:	62 83       	std	Z+2, r22	; 0x02
    2fe8:	73 83       	std	Z+3, r23	; 0x03
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	08 95       	ret

00002ff0 <evTime_is_stated>:
    2ff0:	21 e0       	ldi	r18, 0x01	; 1
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	84 81       	ldd	r24, Z+4	; 0x04
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <evTime_is_stated+0x10>
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	c9 01       	movw	r24, r18
    3002:	08 95       	ret

00003004 <evTime_check>:

int evTime_check(evTime * evt)
{
    3004:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    3006:	84 81       	ldd	r24, Z+4	; 0x04
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	b1 f4       	brne	.+44     	; 0x3038 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    300c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <mktime+0x2>
    3010:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <mktime+0x3>
    3014:	a0 91 ba 04 	lds	r26, 0x04BA	; 0x8004ba <mktime+0x4>
    3018:	b0 91 bb 04 	lds	r27, 0x04BB	; 0x8004bb <mktime+0x5>
    301c:	40 81       	ld	r20, Z
    301e:	51 81       	ldd	r21, Z+1	; 0x01
    3020:	62 81       	ldd	r22, Z+2	; 0x02
    3022:	73 81       	ldd	r23, Z+3	; 0x03
    3024:	48 17       	cp	r20, r24
    3026:	59 07       	cpc	r21, r25
    3028:	6a 07       	cpc	r22, r26
    302a:	7b 07       	cpc	r23, r27
    302c:	40 f4       	brcc	.+16     	; 0x303e <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    302e:	82 e0       	ldi	r24, 0x02	; 2
    3030:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	9f ef       	ldi	r25, 0xFF	; 255
    303c:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    3042:	08 95       	ret

00003044 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    3044:	21 e0       	ldi	r18, 0x01	; 1
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	fc 01       	movw	r30, r24
    304a:	84 81       	ldd	r24, Z+4	; 0x04
    304c:	83 30       	cpi	r24, 0x03	; 3
    304e:	11 f0       	breq	.+4      	; 0x3054 <evTime_off+0x10>
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
}
    3054:	c9 01       	movw	r24, r18
    3056:	08 95       	ret

00003058 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    3058:	cf 92       	push	r12
    305a:	df 92       	push	r13
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	ec 01       	movw	r28, r24
    306a:	6a 01       	movw	r12, r20
    306c:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	81 11       	cpse	r24, r1
    3072:	06 c0       	rjmp	.+12     	; 0x3080 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    3078:	18 82       	st	Y, r1
    307a:	19 82       	std	Y+1, r1	; 0x01
    307c:	1a 82       	std	Y+2, r1	; 0x02
    307e:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    3080:	ce 01       	movw	r24, r28
    3082:	0e 94 02 18 	call	0x3004	; 0x3004 <evTime_check>
    3086:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	31 f4       	brne	.+12     	; 0x3098 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    308c:	b7 01       	movw	r22, r14
    308e:	a6 01       	movw	r20, r12
    3090:	ce 01       	movw	r24, r28
    3092:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
		return 1;
    3096:	0d c0       	rjmp	.+26     	; 0x30b2 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    3098:	8c 81       	ldd	r24, Y+4	; 0x04
    309a:	83 30       	cpi	r24, 0x03	; 3
    309c:	41 f4       	brne	.+16     	; 0x30ae <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    309e:	b7 01       	movw	r22, r14
    30a0:	a6 01       	movw	r20, r12
    30a2:	ce 01       	movw	r24, r28
    30a4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <evTime_start>
	}
	return 0;
    30a8:	00 e0       	ldi	r16, 0x00	; 0
    30aa:	10 e0       	ldi	r17, 0x00	; 0
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <evTime_process_period+0x5a>
    30ae:	00 e0       	ldi	r16, 0x00	; 0
    30b0:	10 e0       	ldi	r17, 0x00	; 0
}
    30b2:	c8 01       	movw	r24, r16
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	df 90       	pop	r13
    30c2:	cf 90       	pop	r12
    30c4:	08 95       	ret

000030c6 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    30c6:	1f 92       	push	r1
    30c8:	0f 92       	push	r0
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	0f 92       	push	r0
    30ce:	11 24       	eor	r1, r1
    30d0:	2f 93       	push	r18
    30d2:	3f 93       	push	r19
    30d4:	4f 93       	push	r20
    30d6:	5f 93       	push	r21
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	ef 93       	push	r30
    30de:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    30e0:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    30e2:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    30e4:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    30e6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <UART_RxHead>
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    30ee:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <UART_RxTail>
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	84 17       	cp	r24, r20
    30f6:	95 07       	cpc	r25, r21
    30f8:	39 f0       	breq	.+14     	; 0x3108 <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    30fa:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    30fe:	fc 01       	movw	r30, r24
    3100:	e0 5f       	subi	r30, 0xF0	; 240
    3102:	fc 4f       	sbci	r31, 0xFC	; 252
    3104:	30 83       	st	Z, r19
    3106:	01 c0       	rjmp	.+2      	; 0x310a <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3108:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    310a:	20 93 0b 03 	sts	0x030B, r18	; 0x80030b <UART_LastRxError>
}
    310e:	ff 91       	pop	r31
    3110:	ef 91       	pop	r30
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	5f 91       	pop	r21
    3118:	4f 91       	pop	r20
    311a:	3f 91       	pop	r19
    311c:	2f 91       	pop	r18
    311e:	0f 90       	pop	r0
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	0f 90       	pop	r0
    3124:	1f 90       	pop	r1
    3126:	18 95       	reti

00003128 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    3128:	1f 92       	push	r1
    312a:	0f 92       	push	r0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	0f 92       	push	r0
    3130:	11 24       	eor	r1, r1
    3132:	8f 93       	push	r24
    3134:	9f 93       	push	r25
    3136:	ef 93       	push	r30
    3138:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    313a:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <UART_TxHead>
    313e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    3142:	98 17       	cp	r25, r24
    3144:	71 f0       	breq	.+28     	; 0x3162 <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    3146:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	8f 77       	andi	r24, 0x7F	; 127
    3150:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    3152:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    3156:	fc 01       	movw	r30, r24
    3158:	e0 5f       	subi	r30, 0xF0	; 240
    315a:	fc 4f       	sbci	r31, 0xFC	; 252
    315c:	80 81       	ld	r24, Z
    315e:	8c b9       	out	0x0c, r24	; 12
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    3162:	55 98       	cbi	0x0a, 5	; 10
    }
}
    3164:	ff 91       	pop	r31
    3166:	ef 91       	pop	r30
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	0f 90       	pop	r0
    3172:	1f 90       	pop	r1
    3174:	18 95       	reti

00003176 <__subsf3>:
    3176:	50 58       	subi	r21, 0x80	; 128

00003178 <__addsf3>:
    3178:	bb 27       	eor	r27, r27
    317a:	aa 27       	eor	r26, r26
    317c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__addsf3x>
    3180:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__fp_round>
    3184:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fp_pscA>
    3188:	38 f0       	brcs	.+14     	; 0x3198 <__addsf3+0x20>
    318a:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_pscB>
    318e:	20 f0       	brcs	.+8      	; 0x3198 <__addsf3+0x20>
    3190:	39 f4       	brne	.+14     	; 0x31a0 <__addsf3+0x28>
    3192:	9f 3f       	cpi	r25, 0xFF	; 255
    3194:	19 f4       	brne	.+6      	; 0x319c <__addsf3+0x24>
    3196:	26 f4       	brtc	.+8      	; 0x31a0 <__addsf3+0x28>
    3198:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>
    319c:	0e f4       	brtc	.+2      	; 0x31a0 <__addsf3+0x28>
    319e:	e0 95       	com	r30
    31a0:	e7 fb       	bst	r30, 7
    31a2:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>

000031a6 <__addsf3x>:
    31a6:	e9 2f       	mov	r30, r25
    31a8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_split3>
    31ac:	58 f3       	brcs	.-42     	; 0x3184 <__addsf3+0xc>
    31ae:	ba 17       	cp	r27, r26
    31b0:	62 07       	cpc	r22, r18
    31b2:	73 07       	cpc	r23, r19
    31b4:	84 07       	cpc	r24, r20
    31b6:	95 07       	cpc	r25, r21
    31b8:	20 f0       	brcs	.+8      	; 0x31c2 <__addsf3x+0x1c>
    31ba:	79 f4       	brne	.+30     	; 0x31da <__addsf3x+0x34>
    31bc:	a6 f5       	brtc	.+104    	; 0x3226 <__addsf3x+0x80>
    31be:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__fp_zero>
    31c2:	0e f4       	brtc	.+2      	; 0x31c6 <__addsf3x+0x20>
    31c4:	e0 95       	com	r30
    31c6:	0b 2e       	mov	r0, r27
    31c8:	ba 2f       	mov	r27, r26
    31ca:	a0 2d       	mov	r26, r0
    31cc:	0b 01       	movw	r0, r22
    31ce:	b9 01       	movw	r22, r18
    31d0:	90 01       	movw	r18, r0
    31d2:	0c 01       	movw	r0, r24
    31d4:	ca 01       	movw	r24, r20
    31d6:	a0 01       	movw	r20, r0
    31d8:	11 24       	eor	r1, r1
    31da:	ff 27       	eor	r31, r31
    31dc:	59 1b       	sub	r21, r25
    31de:	99 f0       	breq	.+38     	; 0x3206 <__addsf3x+0x60>
    31e0:	59 3f       	cpi	r21, 0xF9	; 249
    31e2:	50 f4       	brcc	.+20     	; 0x31f8 <__addsf3x+0x52>
    31e4:	50 3e       	cpi	r21, 0xE0	; 224
    31e6:	68 f1       	brcs	.+90     	; 0x3242 <__addsf3x+0x9c>
    31e8:	1a 16       	cp	r1, r26
    31ea:	f0 40       	sbci	r31, 0x00	; 0
    31ec:	a2 2f       	mov	r26, r18
    31ee:	23 2f       	mov	r18, r19
    31f0:	34 2f       	mov	r19, r20
    31f2:	44 27       	eor	r20, r20
    31f4:	58 5f       	subi	r21, 0xF8	; 248
    31f6:	f3 cf       	rjmp	.-26     	; 0x31de <__addsf3x+0x38>
    31f8:	46 95       	lsr	r20
    31fa:	37 95       	ror	r19
    31fc:	27 95       	ror	r18
    31fe:	a7 95       	ror	r26
    3200:	f0 40       	sbci	r31, 0x00	; 0
    3202:	53 95       	inc	r21
    3204:	c9 f7       	brne	.-14     	; 0x31f8 <__addsf3x+0x52>
    3206:	7e f4       	brtc	.+30     	; 0x3226 <__addsf3x+0x80>
    3208:	1f 16       	cp	r1, r31
    320a:	ba 0b       	sbc	r27, r26
    320c:	62 0b       	sbc	r22, r18
    320e:	73 0b       	sbc	r23, r19
    3210:	84 0b       	sbc	r24, r20
    3212:	ba f0       	brmi	.+46     	; 0x3242 <__addsf3x+0x9c>
    3214:	91 50       	subi	r25, 0x01	; 1
    3216:	a1 f0       	breq	.+40     	; 0x3240 <__addsf3x+0x9a>
    3218:	ff 0f       	add	r31, r31
    321a:	bb 1f       	adc	r27, r27
    321c:	66 1f       	adc	r22, r22
    321e:	77 1f       	adc	r23, r23
    3220:	88 1f       	adc	r24, r24
    3222:	c2 f7       	brpl	.-16     	; 0x3214 <__addsf3x+0x6e>
    3224:	0e c0       	rjmp	.+28     	; 0x3242 <__addsf3x+0x9c>
    3226:	ba 0f       	add	r27, r26
    3228:	62 1f       	adc	r22, r18
    322a:	73 1f       	adc	r23, r19
    322c:	84 1f       	adc	r24, r20
    322e:	48 f4       	brcc	.+18     	; 0x3242 <__addsf3x+0x9c>
    3230:	87 95       	ror	r24
    3232:	77 95       	ror	r23
    3234:	67 95       	ror	r22
    3236:	b7 95       	ror	r27
    3238:	f7 95       	ror	r31
    323a:	9e 3f       	cpi	r25, 0xFE	; 254
    323c:	08 f0       	brcs	.+2      	; 0x3240 <__addsf3x+0x9a>
    323e:	b0 cf       	rjmp	.-160    	; 0x31a0 <__addsf3+0x28>
    3240:	93 95       	inc	r25
    3242:	88 0f       	add	r24, r24
    3244:	08 f0       	brcs	.+2      	; 0x3248 <__addsf3x+0xa2>
    3246:	99 27       	eor	r25, r25
    3248:	ee 0f       	add	r30, r30
    324a:	97 95       	ror	r25
    324c:	87 95       	ror	r24
    324e:	08 95       	ret

00003250 <__divsf3>:
    3250:	0e 94 3c 19 	call	0x3278	; 0x3278 <__divsf3x>
    3254:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__fp_round>
    3258:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_pscB>
    325c:	58 f0       	brcs	.+22     	; 0x3274 <__divsf3+0x24>
    325e:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fp_pscA>
    3262:	40 f0       	brcs	.+16     	; 0x3274 <__divsf3+0x24>
    3264:	29 f4       	brne	.+10     	; 0x3270 <__divsf3+0x20>
    3266:	5f 3f       	cpi	r21, 0xFF	; 255
    3268:	29 f0       	breq	.+10     	; 0x3274 <__divsf3+0x24>
    326a:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    326e:	51 11       	cpse	r21, r1
    3270:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>
    3274:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>

00003278 <__divsf3x>:
    3278:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_split3>
    327c:	68 f3       	brcs	.-38     	; 0x3258 <__divsf3+0x8>

0000327e <__divsf3_pse>:
    327e:	99 23       	and	r25, r25
    3280:	b1 f3       	breq	.-20     	; 0x326e <__divsf3+0x1e>
    3282:	55 23       	and	r21, r21
    3284:	91 f3       	breq	.-28     	; 0x326a <__divsf3+0x1a>
    3286:	95 1b       	sub	r25, r21
    3288:	55 0b       	sbc	r21, r21
    328a:	bb 27       	eor	r27, r27
    328c:	aa 27       	eor	r26, r26
    328e:	62 17       	cp	r22, r18
    3290:	73 07       	cpc	r23, r19
    3292:	84 07       	cpc	r24, r20
    3294:	38 f0       	brcs	.+14     	; 0x32a4 <__divsf3_pse+0x26>
    3296:	9f 5f       	subi	r25, 0xFF	; 255
    3298:	5f 4f       	sbci	r21, 0xFF	; 255
    329a:	22 0f       	add	r18, r18
    329c:	33 1f       	adc	r19, r19
    329e:	44 1f       	adc	r20, r20
    32a0:	aa 1f       	adc	r26, r26
    32a2:	a9 f3       	breq	.-22     	; 0x328e <__divsf3_pse+0x10>
    32a4:	35 d0       	rcall	.+106    	; 0x3310 <__divsf3_pse+0x92>
    32a6:	0e 2e       	mov	r0, r30
    32a8:	3a f0       	brmi	.+14     	; 0x32b8 <__divsf3_pse+0x3a>
    32aa:	e0 e8       	ldi	r30, 0x80	; 128
    32ac:	32 d0       	rcall	.+100    	; 0x3312 <__divsf3_pse+0x94>
    32ae:	91 50       	subi	r25, 0x01	; 1
    32b0:	50 40       	sbci	r21, 0x00	; 0
    32b2:	e6 95       	lsr	r30
    32b4:	00 1c       	adc	r0, r0
    32b6:	ca f7       	brpl	.-14     	; 0x32aa <__divsf3_pse+0x2c>
    32b8:	2b d0       	rcall	.+86     	; 0x3310 <__divsf3_pse+0x92>
    32ba:	fe 2f       	mov	r31, r30
    32bc:	29 d0       	rcall	.+82     	; 0x3310 <__divsf3_pse+0x92>
    32be:	66 0f       	add	r22, r22
    32c0:	77 1f       	adc	r23, r23
    32c2:	88 1f       	adc	r24, r24
    32c4:	bb 1f       	adc	r27, r27
    32c6:	26 17       	cp	r18, r22
    32c8:	37 07       	cpc	r19, r23
    32ca:	48 07       	cpc	r20, r24
    32cc:	ab 07       	cpc	r26, r27
    32ce:	b0 e8       	ldi	r27, 0x80	; 128
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <__divsf3_pse+0x56>
    32d2:	bb 0b       	sbc	r27, r27
    32d4:	80 2d       	mov	r24, r0
    32d6:	bf 01       	movw	r22, r30
    32d8:	ff 27       	eor	r31, r31
    32da:	93 58       	subi	r25, 0x83	; 131
    32dc:	5f 4f       	sbci	r21, 0xFF	; 255
    32de:	3a f0       	brmi	.+14     	; 0x32ee <__divsf3_pse+0x70>
    32e0:	9e 3f       	cpi	r25, 0xFE	; 254
    32e2:	51 05       	cpc	r21, r1
    32e4:	78 f0       	brcs	.+30     	; 0x3304 <__divsf3_pse+0x86>
    32e6:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    32ea:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>
    32ee:	5f 3f       	cpi	r21, 0xFF	; 255
    32f0:	e4 f3       	brlt	.-8      	; 0x32ea <__divsf3_pse+0x6c>
    32f2:	98 3e       	cpi	r25, 0xE8	; 232
    32f4:	d4 f3       	brlt	.-12     	; 0x32ea <__divsf3_pse+0x6c>
    32f6:	86 95       	lsr	r24
    32f8:	77 95       	ror	r23
    32fa:	67 95       	ror	r22
    32fc:	b7 95       	ror	r27
    32fe:	f7 95       	ror	r31
    3300:	9f 5f       	subi	r25, 0xFF	; 255
    3302:	c9 f7       	brne	.-14     	; 0x32f6 <__divsf3_pse+0x78>
    3304:	88 0f       	add	r24, r24
    3306:	91 1d       	adc	r25, r1
    3308:	96 95       	lsr	r25
    330a:	87 95       	ror	r24
    330c:	97 f9       	bld	r25, 7
    330e:	08 95       	ret
    3310:	e1 e0       	ldi	r30, 0x01	; 1
    3312:	66 0f       	add	r22, r22
    3314:	77 1f       	adc	r23, r23
    3316:	88 1f       	adc	r24, r24
    3318:	bb 1f       	adc	r27, r27
    331a:	62 17       	cp	r22, r18
    331c:	73 07       	cpc	r23, r19
    331e:	84 07       	cpc	r24, r20
    3320:	ba 07       	cpc	r27, r26
    3322:	20 f0       	brcs	.+8      	; 0x332c <__divsf3_pse+0xae>
    3324:	62 1b       	sub	r22, r18
    3326:	73 0b       	sbc	r23, r19
    3328:	84 0b       	sbc	r24, r20
    332a:	ba 0b       	sbc	r27, r26
    332c:	ee 1f       	adc	r30, r30
    332e:	88 f7       	brcc	.-30     	; 0x3312 <__divsf3_pse+0x94>
    3330:	e0 95       	com	r30
    3332:	08 95       	ret

00003334 <__fixsfsi>:
    3334:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fixunssfsi>
    3338:	68 94       	set
    333a:	b1 11       	cpse	r27, r1
    333c:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>
    3340:	08 95       	ret

00003342 <__fixunssfsi>:
    3342:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_splitA>
    3346:	88 f0       	brcs	.+34     	; 0x336a <__fixunssfsi+0x28>
    3348:	9f 57       	subi	r25, 0x7F	; 127
    334a:	98 f0       	brcs	.+38     	; 0x3372 <__fixunssfsi+0x30>
    334c:	b9 2f       	mov	r27, r25
    334e:	99 27       	eor	r25, r25
    3350:	b7 51       	subi	r27, 0x17	; 23
    3352:	b0 f0       	brcs	.+44     	; 0x3380 <__fixunssfsi+0x3e>
    3354:	e1 f0       	breq	.+56     	; 0x338e <__fixunssfsi+0x4c>
    3356:	66 0f       	add	r22, r22
    3358:	77 1f       	adc	r23, r23
    335a:	88 1f       	adc	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	1a f0       	brmi	.+6      	; 0x3366 <__fixunssfsi+0x24>
    3360:	ba 95       	dec	r27
    3362:	c9 f7       	brne	.-14     	; 0x3356 <__fixunssfsi+0x14>
    3364:	14 c0       	rjmp	.+40     	; 0x338e <__fixunssfsi+0x4c>
    3366:	b1 30       	cpi	r27, 0x01	; 1
    3368:	91 f0       	breq	.+36     	; 0x338e <__fixunssfsi+0x4c>
    336a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__fp_zero>
    336e:	b1 e0       	ldi	r27, 0x01	; 1
    3370:	08 95       	ret
    3372:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__fp_zero>
    3376:	67 2f       	mov	r22, r23
    3378:	78 2f       	mov	r23, r24
    337a:	88 27       	eor	r24, r24
    337c:	b8 5f       	subi	r27, 0xF8	; 248
    337e:	39 f0       	breq	.+14     	; 0x338e <__fixunssfsi+0x4c>
    3380:	b9 3f       	cpi	r27, 0xF9	; 249
    3382:	cc f3       	brlt	.-14     	; 0x3376 <__fixunssfsi+0x34>
    3384:	86 95       	lsr	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b3 95       	inc	r27
    338c:	d9 f7       	brne	.-10     	; 0x3384 <__fixunssfsi+0x42>
    338e:	3e f4       	brtc	.+14     	; 0x339e <__fixunssfsi+0x5c>
    3390:	90 95       	com	r25
    3392:	80 95       	com	r24
    3394:	70 95       	com	r23
    3396:	61 95       	neg	r22
    3398:	7f 4f       	sbci	r23, 0xFF	; 255
    339a:	8f 4f       	sbci	r24, 0xFF	; 255
    339c:	9f 4f       	sbci	r25, 0xFF	; 255
    339e:	08 95       	ret

000033a0 <__floatunsisf>:
    33a0:	e8 94       	clt
    33a2:	09 c0       	rjmp	.+18     	; 0x33b6 <__floatsisf+0x12>

000033a4 <__floatsisf>:
    33a4:	97 fb       	bst	r25, 7
    33a6:	3e f4       	brtc	.+14     	; 0x33b6 <__floatsisf+0x12>
    33a8:	90 95       	com	r25
    33aa:	80 95       	com	r24
    33ac:	70 95       	com	r23
    33ae:	61 95       	neg	r22
    33b0:	7f 4f       	sbci	r23, 0xFF	; 255
    33b2:	8f 4f       	sbci	r24, 0xFF	; 255
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	99 23       	and	r25, r25
    33b8:	a9 f0       	breq	.+42     	; 0x33e4 <__floatsisf+0x40>
    33ba:	f9 2f       	mov	r31, r25
    33bc:	96 e9       	ldi	r25, 0x96	; 150
    33be:	bb 27       	eor	r27, r27
    33c0:	93 95       	inc	r25
    33c2:	f6 95       	lsr	r31
    33c4:	87 95       	ror	r24
    33c6:	77 95       	ror	r23
    33c8:	67 95       	ror	r22
    33ca:	b7 95       	ror	r27
    33cc:	f1 11       	cpse	r31, r1
    33ce:	f8 cf       	rjmp	.-16     	; 0x33c0 <__floatsisf+0x1c>
    33d0:	fa f4       	brpl	.+62     	; 0x3410 <__floatsisf+0x6c>
    33d2:	bb 0f       	add	r27, r27
    33d4:	11 f4       	brne	.+4      	; 0x33da <__floatsisf+0x36>
    33d6:	60 ff       	sbrs	r22, 0
    33d8:	1b c0       	rjmp	.+54     	; 0x3410 <__floatsisf+0x6c>
    33da:	6f 5f       	subi	r22, 0xFF	; 255
    33dc:	7f 4f       	sbci	r23, 0xFF	; 255
    33de:	8f 4f       	sbci	r24, 0xFF	; 255
    33e0:	9f 4f       	sbci	r25, 0xFF	; 255
    33e2:	16 c0       	rjmp	.+44     	; 0x3410 <__floatsisf+0x6c>
    33e4:	88 23       	and	r24, r24
    33e6:	11 f0       	breq	.+4      	; 0x33ec <__floatsisf+0x48>
    33e8:	96 e9       	ldi	r25, 0x96	; 150
    33ea:	11 c0       	rjmp	.+34     	; 0x340e <__floatsisf+0x6a>
    33ec:	77 23       	and	r23, r23
    33ee:	21 f0       	breq	.+8      	; 0x33f8 <__floatsisf+0x54>
    33f0:	9e e8       	ldi	r25, 0x8E	; 142
    33f2:	87 2f       	mov	r24, r23
    33f4:	76 2f       	mov	r23, r22
    33f6:	05 c0       	rjmp	.+10     	; 0x3402 <__floatsisf+0x5e>
    33f8:	66 23       	and	r22, r22
    33fa:	71 f0       	breq	.+28     	; 0x3418 <__floatsisf+0x74>
    33fc:	96 e8       	ldi	r25, 0x86	; 134
    33fe:	86 2f       	mov	r24, r22
    3400:	70 e0       	ldi	r23, 0x00	; 0
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	2a f0       	brmi	.+10     	; 0x3410 <__floatsisf+0x6c>
    3406:	9a 95       	dec	r25
    3408:	66 0f       	add	r22, r22
    340a:	77 1f       	adc	r23, r23
    340c:	88 1f       	adc	r24, r24
    340e:	da f7       	brpl	.-10     	; 0x3406 <__floatsisf+0x62>
    3410:	88 0f       	add	r24, r24
    3412:	96 95       	lsr	r25
    3414:	87 95       	ror	r24
    3416:	97 f9       	bld	r25, 7
    3418:	08 95       	ret

0000341a <__fp_cmp>:
    341a:	99 0f       	add	r25, r25
    341c:	00 08       	sbc	r0, r0
    341e:	55 0f       	add	r21, r21
    3420:	aa 0b       	sbc	r26, r26
    3422:	e0 e8       	ldi	r30, 0x80	; 128
    3424:	fe ef       	ldi	r31, 0xFE	; 254
    3426:	16 16       	cp	r1, r22
    3428:	17 06       	cpc	r1, r23
    342a:	e8 07       	cpc	r30, r24
    342c:	f9 07       	cpc	r31, r25
    342e:	c0 f0       	brcs	.+48     	; 0x3460 <__fp_cmp+0x46>
    3430:	12 16       	cp	r1, r18
    3432:	13 06       	cpc	r1, r19
    3434:	e4 07       	cpc	r30, r20
    3436:	f5 07       	cpc	r31, r21
    3438:	98 f0       	brcs	.+38     	; 0x3460 <__fp_cmp+0x46>
    343a:	62 1b       	sub	r22, r18
    343c:	73 0b       	sbc	r23, r19
    343e:	84 0b       	sbc	r24, r20
    3440:	95 0b       	sbc	r25, r21
    3442:	39 f4       	brne	.+14     	; 0x3452 <__fp_cmp+0x38>
    3444:	0a 26       	eor	r0, r26
    3446:	61 f0       	breq	.+24     	; 0x3460 <__fp_cmp+0x46>
    3448:	23 2b       	or	r18, r19
    344a:	24 2b       	or	r18, r20
    344c:	25 2b       	or	r18, r21
    344e:	21 f4       	brne	.+8      	; 0x3458 <__fp_cmp+0x3e>
    3450:	08 95       	ret
    3452:	0a 26       	eor	r0, r26
    3454:	09 f4       	brne	.+2      	; 0x3458 <__fp_cmp+0x3e>
    3456:	a1 40       	sbci	r26, 0x01	; 1
    3458:	a6 95       	lsr	r26
    345a:	8f ef       	ldi	r24, 0xFF	; 255
    345c:	81 1d       	adc	r24, r1
    345e:	81 1d       	adc	r24, r1
    3460:	08 95       	ret

00003462 <__fp_inf>:
    3462:	97 f9       	bld	r25, 7
    3464:	9f 67       	ori	r25, 0x7F	; 127
    3466:	80 e8       	ldi	r24, 0x80	; 128
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	08 95       	ret

0000346e <__fp_nan>:
    346e:	9f ef       	ldi	r25, 0xFF	; 255
    3470:	80 ec       	ldi	r24, 0xC0	; 192
    3472:	08 95       	ret

00003474 <__fp_pscA>:
    3474:	00 24       	eor	r0, r0
    3476:	0a 94       	dec	r0
    3478:	16 16       	cp	r1, r22
    347a:	17 06       	cpc	r1, r23
    347c:	18 06       	cpc	r1, r24
    347e:	09 06       	cpc	r0, r25
    3480:	08 95       	ret

00003482 <__fp_pscB>:
    3482:	00 24       	eor	r0, r0
    3484:	0a 94       	dec	r0
    3486:	12 16       	cp	r1, r18
    3488:	13 06       	cpc	r1, r19
    348a:	14 06       	cpc	r1, r20
    348c:	05 06       	cpc	r0, r21
    348e:	08 95       	ret

00003490 <__fp_round>:
    3490:	09 2e       	mov	r0, r25
    3492:	03 94       	inc	r0
    3494:	00 0c       	add	r0, r0
    3496:	11 f4       	brne	.+4      	; 0x349c <__fp_round+0xc>
    3498:	88 23       	and	r24, r24
    349a:	52 f0       	brmi	.+20     	; 0x34b0 <__fp_round+0x20>
    349c:	bb 0f       	add	r27, r27
    349e:	40 f4       	brcc	.+16     	; 0x34b0 <__fp_round+0x20>
    34a0:	bf 2b       	or	r27, r31
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <__fp_round+0x18>
    34a4:	60 ff       	sbrs	r22, 0
    34a6:	04 c0       	rjmp	.+8      	; 0x34b0 <__fp_round+0x20>
    34a8:	6f 5f       	subi	r22, 0xFF	; 255
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	8f 4f       	sbci	r24, 0xFF	; 255
    34ae:	9f 4f       	sbci	r25, 0xFF	; 255
    34b0:	08 95       	ret

000034b2 <__fp_split3>:
    34b2:	57 fd       	sbrc	r21, 7
    34b4:	90 58       	subi	r25, 0x80	; 128
    34b6:	44 0f       	add	r20, r20
    34b8:	55 1f       	adc	r21, r21
    34ba:	59 f0       	breq	.+22     	; 0x34d2 <__fp_splitA+0x10>
    34bc:	5f 3f       	cpi	r21, 0xFF	; 255
    34be:	71 f0       	breq	.+28     	; 0x34dc <__fp_splitA+0x1a>
    34c0:	47 95       	ror	r20

000034c2 <__fp_splitA>:
    34c2:	88 0f       	add	r24, r24
    34c4:	97 fb       	bst	r25, 7
    34c6:	99 1f       	adc	r25, r25
    34c8:	61 f0       	breq	.+24     	; 0x34e2 <__fp_splitA+0x20>
    34ca:	9f 3f       	cpi	r25, 0xFF	; 255
    34cc:	79 f0       	breq	.+30     	; 0x34ec <__fp_splitA+0x2a>
    34ce:	87 95       	ror	r24
    34d0:	08 95       	ret
    34d2:	12 16       	cp	r1, r18
    34d4:	13 06       	cpc	r1, r19
    34d6:	14 06       	cpc	r1, r20
    34d8:	55 1f       	adc	r21, r21
    34da:	f2 cf       	rjmp	.-28     	; 0x34c0 <__fp_split3+0xe>
    34dc:	46 95       	lsr	r20
    34de:	f1 df       	rcall	.-30     	; 0x34c2 <__fp_splitA>
    34e0:	08 c0       	rjmp	.+16     	; 0x34f2 <__fp_splitA+0x30>
    34e2:	16 16       	cp	r1, r22
    34e4:	17 06       	cpc	r1, r23
    34e6:	18 06       	cpc	r1, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	f1 cf       	rjmp	.-30     	; 0x34ce <__fp_splitA+0xc>
    34ec:	86 95       	lsr	r24
    34ee:	71 05       	cpc	r23, r1
    34f0:	61 05       	cpc	r22, r1
    34f2:	08 94       	sec
    34f4:	08 95       	ret

000034f6 <__fp_zero>:
    34f6:	e8 94       	clt

000034f8 <__fp_szero>:
    34f8:	bb 27       	eor	r27, r27
    34fa:	66 27       	eor	r22, r22
    34fc:	77 27       	eor	r23, r23
    34fe:	cb 01       	movw	r24, r22
    3500:	97 f9       	bld	r25, 7
    3502:	08 95       	ret

00003504 <__gesf2>:
    3504:	0e 94 0d 1a 	call	0x341a	; 0x341a <__fp_cmp>
    3508:	08 f4       	brcc	.+2      	; 0x350c <__gesf2+0x8>
    350a:	8f ef       	ldi	r24, 0xFF	; 255
    350c:	08 95       	ret

0000350e <__mulsf3>:
    350e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__mulsf3x>
    3512:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__fp_round>
    3516:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__fp_pscA>
    351a:	38 f0       	brcs	.+14     	; 0x352a <__mulsf3+0x1c>
    351c:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_pscB>
    3520:	20 f0       	brcs	.+8      	; 0x352a <__mulsf3+0x1c>
    3522:	95 23       	and	r25, r21
    3524:	11 f0       	breq	.+4      	; 0x352a <__mulsf3+0x1c>
    3526:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    352a:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>
    352e:	11 24       	eor	r1, r1
    3530:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>

00003534 <__mulsf3x>:
    3534:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__fp_split3>
    3538:	70 f3       	brcs	.-36     	; 0x3516 <__mulsf3+0x8>

0000353a <__mulsf3_pse>:
    353a:	95 9f       	mul	r25, r21
    353c:	c1 f3       	breq	.-16     	; 0x352e <__mulsf3+0x20>
    353e:	95 0f       	add	r25, r21
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	55 1f       	adc	r21, r21
    3544:	62 9f       	mul	r22, r18
    3546:	f0 01       	movw	r30, r0
    3548:	72 9f       	mul	r23, r18
    354a:	bb 27       	eor	r27, r27
    354c:	f0 0d       	add	r31, r0
    354e:	b1 1d       	adc	r27, r1
    3550:	63 9f       	mul	r22, r19
    3552:	aa 27       	eor	r26, r26
    3554:	f0 0d       	add	r31, r0
    3556:	b1 1d       	adc	r27, r1
    3558:	aa 1f       	adc	r26, r26
    355a:	64 9f       	mul	r22, r20
    355c:	66 27       	eor	r22, r22
    355e:	b0 0d       	add	r27, r0
    3560:	a1 1d       	adc	r26, r1
    3562:	66 1f       	adc	r22, r22
    3564:	82 9f       	mul	r24, r18
    3566:	22 27       	eor	r18, r18
    3568:	b0 0d       	add	r27, r0
    356a:	a1 1d       	adc	r26, r1
    356c:	62 1f       	adc	r22, r18
    356e:	73 9f       	mul	r23, r19
    3570:	b0 0d       	add	r27, r0
    3572:	a1 1d       	adc	r26, r1
    3574:	62 1f       	adc	r22, r18
    3576:	83 9f       	mul	r24, r19
    3578:	a0 0d       	add	r26, r0
    357a:	61 1d       	adc	r22, r1
    357c:	22 1f       	adc	r18, r18
    357e:	74 9f       	mul	r23, r20
    3580:	33 27       	eor	r19, r19
    3582:	a0 0d       	add	r26, r0
    3584:	61 1d       	adc	r22, r1
    3586:	23 1f       	adc	r18, r19
    3588:	84 9f       	mul	r24, r20
    358a:	60 0d       	add	r22, r0
    358c:	21 1d       	adc	r18, r1
    358e:	82 2f       	mov	r24, r18
    3590:	76 2f       	mov	r23, r22
    3592:	6a 2f       	mov	r22, r26
    3594:	11 24       	eor	r1, r1
    3596:	9f 57       	subi	r25, 0x7F	; 127
    3598:	50 40       	sbci	r21, 0x00	; 0
    359a:	9a f0       	brmi	.+38     	; 0x35c2 <__mulsf3_pse+0x88>
    359c:	f1 f0       	breq	.+60     	; 0x35da <__mulsf3_pse+0xa0>
    359e:	88 23       	and	r24, r24
    35a0:	4a f0       	brmi	.+18     	; 0x35b4 <__mulsf3_pse+0x7a>
    35a2:	ee 0f       	add	r30, r30
    35a4:	ff 1f       	adc	r31, r31
    35a6:	bb 1f       	adc	r27, r27
    35a8:	66 1f       	adc	r22, r22
    35aa:	77 1f       	adc	r23, r23
    35ac:	88 1f       	adc	r24, r24
    35ae:	91 50       	subi	r25, 0x01	; 1
    35b0:	50 40       	sbci	r21, 0x00	; 0
    35b2:	a9 f7       	brne	.-22     	; 0x359e <__mulsf3_pse+0x64>
    35b4:	9e 3f       	cpi	r25, 0xFE	; 254
    35b6:	51 05       	cpc	r21, r1
    35b8:	80 f0       	brcs	.+32     	; 0x35da <__mulsf3_pse+0xa0>
    35ba:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    35be:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>
    35c2:	5f 3f       	cpi	r21, 0xFF	; 255
    35c4:	e4 f3       	brlt	.-8      	; 0x35be <__mulsf3_pse+0x84>
    35c6:	98 3e       	cpi	r25, 0xE8	; 232
    35c8:	d4 f3       	brlt	.-12     	; 0x35be <__mulsf3_pse+0x84>
    35ca:	86 95       	lsr	r24
    35cc:	77 95       	ror	r23
    35ce:	67 95       	ror	r22
    35d0:	b7 95       	ror	r27
    35d2:	f7 95       	ror	r31
    35d4:	e7 95       	ror	r30
    35d6:	9f 5f       	subi	r25, 0xFF	; 255
    35d8:	c1 f7       	brne	.-16     	; 0x35ca <__mulsf3_pse+0x90>
    35da:	fe 2b       	or	r31, r30
    35dc:	88 0f       	add	r24, r24
    35de:	91 1d       	adc	r25, r1
    35e0:	96 95       	lsr	r25
    35e2:	87 95       	ror	r24
    35e4:	97 f9       	bld	r25, 7
    35e6:	08 95       	ret

000035e8 <pow>:
    35e8:	fa 01       	movw	r30, r20
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	30 96       	adiw	r30, 0x00	; 0
    35f0:	21 05       	cpc	r18, r1
    35f2:	31 05       	cpc	r19, r1
    35f4:	a1 f1       	breq	.+104    	; 0x365e <pow+0x76>
    35f6:	61 15       	cp	r22, r1
    35f8:	71 05       	cpc	r23, r1
    35fa:	61 f4       	brne	.+24     	; 0x3614 <pow+0x2c>
    35fc:	80 38       	cpi	r24, 0x80	; 128
    35fe:	bf e3       	ldi	r27, 0x3F	; 63
    3600:	9b 07       	cpc	r25, r27
    3602:	49 f1       	breq	.+82     	; 0x3656 <pow+0x6e>
    3604:	68 94       	set
    3606:	90 38       	cpi	r25, 0x80	; 128
    3608:	81 05       	cpc	r24, r1
    360a:	61 f0       	breq	.+24     	; 0x3624 <pow+0x3c>
    360c:	80 38       	cpi	r24, 0x80	; 128
    360e:	bf ef       	ldi	r27, 0xFF	; 255
    3610:	9b 07       	cpc	r25, r27
    3612:	41 f0       	breq	.+16     	; 0x3624 <pow+0x3c>
    3614:	99 23       	and	r25, r25
    3616:	4a f5       	brpl	.+82     	; 0x366a <pow+0x82>
    3618:	ff 3f       	cpi	r31, 0xFF	; 255
    361a:	e1 05       	cpc	r30, r1
    361c:	31 05       	cpc	r19, r1
    361e:	21 05       	cpc	r18, r1
    3620:	19 f1       	breq	.+70     	; 0x3668 <pow+0x80>
    3622:	e8 94       	clt
    3624:	08 94       	sec
    3626:	e7 95       	ror	r30
    3628:	d9 01       	movw	r26, r18
    362a:	aa 23       	and	r26, r26
    362c:	29 f4       	brne	.+10     	; 0x3638 <pow+0x50>
    362e:	ab 2f       	mov	r26, r27
    3630:	be 2f       	mov	r27, r30
    3632:	f8 5f       	subi	r31, 0xF8	; 248
    3634:	d0 f3       	brcs	.-12     	; 0x362a <pow+0x42>
    3636:	10 c0       	rjmp	.+32     	; 0x3658 <pow+0x70>
    3638:	ff 5f       	subi	r31, 0xFF	; 255
    363a:	70 f4       	brcc	.+28     	; 0x3658 <pow+0x70>
    363c:	a6 95       	lsr	r26
    363e:	e0 f7       	brcc	.-8      	; 0x3638 <pow+0x50>
    3640:	f7 39       	cpi	r31, 0x97	; 151
    3642:	50 f0       	brcs	.+20     	; 0x3658 <pow+0x70>
    3644:	19 f0       	breq	.+6      	; 0x364c <pow+0x64>
    3646:	ff 3a       	cpi	r31, 0xAF	; 175
    3648:	38 f4       	brcc	.+14     	; 0x3658 <pow+0x70>
    364a:	9f 77       	andi	r25, 0x7F	; 127
    364c:	9f 93       	push	r25
    364e:	0d d0       	rcall	.+26     	; 0x366a <pow+0x82>
    3650:	0f 90       	pop	r0
    3652:	07 fc       	sbrc	r0, 7
    3654:	90 58       	subi	r25, 0x80	; 128
    3656:	08 95       	ret
    3658:	46 f0       	brts	.+16     	; 0x366a <pow+0x82>
    365a:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	80 e8       	ldi	r24, 0x80	; 128
    3664:	9f e3       	ldi	r25, 0x3F	; 63
    3666:	08 95       	ret
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	9f 77       	andi	r25, 0x7F	; 127
    366c:	5f 93       	push	r21
    366e:	4f 93       	push	r20
    3670:	3f 93       	push	r19
    3672:	2f 93       	push	r18
    3674:	0e 94 ef 1b 	call	0x37de	; 0x37de <log>
    3678:	2f 91       	pop	r18
    367a:	3f 91       	pop	r19
    367c:	4f 91       	pop	r20
    367e:	5f 91       	pop	r21
    3680:	0e 94 87 1a 	call	0x350e	; 0x350e <__mulsf3>
    3684:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <exp>
    3688:	29 f4       	brne	.+10     	; 0x3694 <pow+0xac>
    368a:	16 f0       	brts	.+4      	; 0x3690 <pow+0xa8>
    368c:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    3690:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__fp_zero>
    3694:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>

00003698 <exp>:
    3698:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_splitA>
    369c:	a8 f3       	brcs	.-22     	; 0x3688 <pow+0xa0>
    369e:	96 38       	cpi	r25, 0x86	; 134
    36a0:	a0 f7       	brcc	.-24     	; 0x368a <pow+0xa2>
    36a2:	07 f8       	bld	r0, 7
    36a4:	0f 92       	push	r0
    36a6:	e8 94       	clt
    36a8:	2b e3       	ldi	r18, 0x3B	; 59
    36aa:	3a ea       	ldi	r19, 0xAA	; 170
    36ac:	48 eb       	ldi	r20, 0xB8	; 184
    36ae:	5f e7       	ldi	r21, 0x7F	; 127
    36b0:	0e 94 9d 1a 	call	0x353a	; 0x353a <__mulsf3_pse>
    36b4:	0f 92       	push	r0
    36b6:	0f 92       	push	r0
    36b8:	0f 92       	push	r0
    36ba:	4d b7       	in	r20, 0x3d	; 61
    36bc:	5e b7       	in	r21, 0x3e	; 62
    36be:	0f 92       	push	r0
    36c0:	0e 94 37 1c 	call	0x386e	; 0x386e <modf>
    36c4:	e2 e5       	ldi	r30, 0x52	; 82
    36c6:	f2 e0       	ldi	r31, 0x02	; 2
    36c8:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__fp_powser>
    36cc:	4f 91       	pop	r20
    36ce:	5f 91       	pop	r21
    36d0:	ef 91       	pop	r30
    36d2:	ff 91       	pop	r31
    36d4:	e5 95       	asr	r30
    36d6:	ee 1f       	adc	r30, r30
    36d8:	ff 1f       	adc	r31, r31
    36da:	49 f0       	breq	.+18     	; 0x36ee <exp+0x56>
    36dc:	fe 57       	subi	r31, 0x7E	; 126
    36de:	e0 68       	ori	r30, 0x80	; 128
    36e0:	44 27       	eor	r20, r20
    36e2:	ee 0f       	add	r30, r30
    36e4:	44 1f       	adc	r20, r20
    36e6:	fa 95       	dec	r31
    36e8:	e1 f7       	brne	.-8      	; 0x36e2 <exp+0x4a>
    36ea:	41 95       	neg	r20
    36ec:	55 0b       	sbc	r21, r21
    36ee:	0e 94 b1 1b 	call	0x3762	; 0x3762 <ldexp>
    36f2:	0f 90       	pop	r0
    36f4:	07 fe       	sbrs	r0, 7
    36f6:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <inverse>
    36fa:	08 95       	ret

000036fc <__fp_powser>:
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	1f 93       	push	r17
    3702:	0f 93       	push	r16
    3704:	ff 92       	push	r15
    3706:	ef 92       	push	r14
    3708:	df 92       	push	r13
    370a:	7b 01       	movw	r14, r22
    370c:	8c 01       	movw	r16, r24
    370e:	68 94       	set
    3710:	06 c0       	rjmp	.+12     	; 0x371e <__fp_powser+0x22>
    3712:	da 2e       	mov	r13, r26
    3714:	ef 01       	movw	r28, r30
    3716:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__mulsf3x>
    371a:	fe 01       	movw	r30, r28
    371c:	e8 94       	clt
    371e:	a5 91       	lpm	r26, Z+
    3720:	25 91       	lpm	r18, Z+
    3722:	35 91       	lpm	r19, Z+
    3724:	45 91       	lpm	r20, Z+
    3726:	55 91       	lpm	r21, Z+
    3728:	a6 f3       	brts	.-24     	; 0x3712 <__fp_powser+0x16>
    372a:	ef 01       	movw	r28, r30
    372c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__addsf3x>
    3730:	fe 01       	movw	r30, r28
    3732:	97 01       	movw	r18, r14
    3734:	a8 01       	movw	r20, r16
    3736:	da 94       	dec	r13
    3738:	69 f7       	brne	.-38     	; 0x3714 <__fp_powser+0x18>
    373a:	df 90       	pop	r13
    373c:	ef 90       	pop	r14
    373e:	ff 90       	pop	r15
    3740:	0f 91       	pop	r16
    3742:	1f 91       	pop	r17
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <inverse>:
    374a:	9b 01       	movw	r18, r22
    374c:	ac 01       	movw	r20, r24
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	80 e8       	ldi	r24, 0x80	; 128
    3754:	9f e3       	ldi	r25, 0x3F	; 63
    3756:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__divsf3>
    375a:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>
    375e:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__fp_mpack>

00003762 <ldexp>:
    3762:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_splitA>
    3766:	d8 f3       	brcs	.-10     	; 0x375e <inverse+0x14>
    3768:	99 23       	and	r25, r25
    376a:	c9 f3       	breq	.-14     	; 0x375e <inverse+0x14>
    376c:	94 0f       	add	r25, r20
    376e:	51 1d       	adc	r21, r1
    3770:	a3 f3       	brvs	.-24     	; 0x375a <inverse+0x10>
    3772:	91 50       	subi	r25, 0x01	; 1
    3774:	50 40       	sbci	r21, 0x00	; 0
    3776:	94 f0       	brlt	.+36     	; 0x379c <ldexp+0x3a>
    3778:	59 f0       	breq	.+22     	; 0x3790 <ldexp+0x2e>
    377a:	88 23       	and	r24, r24
    377c:	32 f0       	brmi	.+12     	; 0x378a <ldexp+0x28>
    377e:	66 0f       	add	r22, r22
    3780:	77 1f       	adc	r23, r23
    3782:	88 1f       	adc	r24, r24
    3784:	91 50       	subi	r25, 0x01	; 1
    3786:	50 40       	sbci	r21, 0x00	; 0
    3788:	c1 f7       	brne	.-16     	; 0x377a <ldexp+0x18>
    378a:	9e 3f       	cpi	r25, 0xFE	; 254
    378c:	51 05       	cpc	r21, r1
    378e:	2c f7       	brge	.-54     	; 0x375a <inverse+0x10>
    3790:	88 0f       	add	r24, r24
    3792:	91 1d       	adc	r25, r1
    3794:	96 95       	lsr	r25
    3796:	87 95       	ror	r24
    3798:	97 f9       	bld	r25, 7
    379a:	08 95       	ret
    379c:	5f 3f       	cpi	r21, 0xFF	; 255
    379e:	ac f0       	brlt	.+42     	; 0x37ca <ldexp+0x68>
    37a0:	98 3e       	cpi	r25, 0xE8	; 232
    37a2:	9c f0       	brlt	.+38     	; 0x37ca <ldexp+0x68>
    37a4:	bb 27       	eor	r27, r27
    37a6:	86 95       	lsr	r24
    37a8:	77 95       	ror	r23
    37aa:	67 95       	ror	r22
    37ac:	b7 95       	ror	r27
    37ae:	08 f4       	brcc	.+2      	; 0x37b2 <ldexp+0x50>
    37b0:	b1 60       	ori	r27, 0x01	; 1
    37b2:	93 95       	inc	r25
    37b4:	c1 f7       	brne	.-16     	; 0x37a6 <ldexp+0x44>
    37b6:	bb 0f       	add	r27, r27
    37b8:	58 f7       	brcc	.-42     	; 0x3790 <ldexp+0x2e>
    37ba:	11 f4       	brne	.+4      	; 0x37c0 <ldexp+0x5e>
    37bc:	60 ff       	sbrs	r22, 0
    37be:	e8 cf       	rjmp	.-48     	; 0x3790 <ldexp+0x2e>
    37c0:	6f 5f       	subi	r22, 0xFF	; 255
    37c2:	7f 4f       	sbci	r23, 0xFF	; 255
    37c4:	8f 4f       	sbci	r24, 0xFF	; 255
    37c6:	9f 4f       	sbci	r25, 0xFF	; 255
    37c8:	e3 cf       	rjmp	.-58     	; 0x3790 <ldexp+0x2e>
    37ca:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__fp_szero>
    37ce:	16 f0       	brts	.+4      	; 0x37d4 <ldexp+0x72>
    37d0:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__fp_mpack>
    37d4:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__fp_nan>
    37d8:	68 94       	set
    37da:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <__fp_inf>

000037de <log>:
    37de:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_splitA>
    37e2:	a8 f3       	brcs	.-22     	; 0x37ce <ldexp+0x6c>
    37e4:	99 23       	and	r25, r25
    37e6:	c1 f3       	breq	.-16     	; 0x37d8 <ldexp+0x76>
    37e8:	ae f3       	brts	.-22     	; 0x37d4 <ldexp+0x72>
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	1f 93       	push	r17
    37f0:	0f 93       	push	r16
    37f2:	ff 92       	push	r15
    37f4:	c9 2f       	mov	r28, r25
    37f6:	dd 27       	eor	r29, r29
    37f8:	88 23       	and	r24, r24
    37fa:	2a f0       	brmi	.+10     	; 0x3806 <log+0x28>
    37fc:	21 97       	sbiw	r28, 0x01	; 1
    37fe:	66 0f       	add	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	da f7       	brpl	.-10     	; 0x37fc <log+0x1e>
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f eb       	ldi	r21, 0xBF	; 191
    380e:	9f e3       	ldi	r25, 0x3F	; 63
    3810:	88 39       	cpi	r24, 0x98	; 152
    3812:	20 f0       	brcs	.+8      	; 0x381c <log+0x3e>
    3814:	80 3e       	cpi	r24, 0xE0	; 224
    3816:	38 f0       	brcs	.+14     	; 0x3826 <log+0x48>
    3818:	21 96       	adiw	r28, 0x01	; 1
    381a:	8f 77       	andi	r24, 0x7F	; 127
    381c:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    3820:	ea e7       	ldi	r30, 0x7A	; 122
    3822:	f2 e0       	ldi	r31, 0x02	; 2
    3824:	04 c0       	rjmp	.+8      	; 0x382e <log+0x50>
    3826:	0e 94 bc 18 	call	0x3178	; 0x3178 <__addsf3>
    382a:	e7 ea       	ldi	r30, 0xA7	; 167
    382c:	f2 e0       	ldi	r31, 0x02	; 2
    382e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <__fp_powser>
    3832:	8b 01       	movw	r16, r22
    3834:	be 01       	movw	r22, r28
    3836:	ec 01       	movw	r28, r24
    3838:	fb 2e       	mov	r15, r27
    383a:	6f 57       	subi	r22, 0x7F	; 127
    383c:	71 09       	sbc	r23, r1
    383e:	75 95       	asr	r23
    3840:	77 1f       	adc	r23, r23
    3842:	88 0b       	sbc	r24, r24
    3844:	99 0b       	sbc	r25, r25
    3846:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__floatsisf>
    384a:	28 e1       	ldi	r18, 0x18	; 24
    384c:	32 e7       	ldi	r19, 0x72	; 114
    384e:	41 e3       	ldi	r20, 0x31	; 49
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__mulsf3x>
    3856:	af 2d       	mov	r26, r15
    3858:	98 01       	movw	r18, r16
    385a:	ae 01       	movw	r20, r28
    385c:	ff 90       	pop	r15
    385e:	0f 91       	pop	r16
    3860:	1f 91       	pop	r17
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__addsf3x>
    386a:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__fp_round>

0000386e <modf>:
    386e:	fa 01       	movw	r30, r20
    3870:	dc 01       	movw	r26, r24
    3872:	aa 0f       	add	r26, r26
    3874:	bb 1f       	adc	r27, r27
    3876:	9b 01       	movw	r18, r22
    3878:	ac 01       	movw	r20, r24
    387a:	bf 57       	subi	r27, 0x7F	; 127
    387c:	28 f4       	brcc	.+10     	; 0x3888 <modf+0x1a>
    387e:	22 27       	eor	r18, r18
    3880:	33 27       	eor	r19, r19
    3882:	44 27       	eor	r20, r20
    3884:	50 78       	andi	r21, 0x80	; 128
    3886:	20 c0       	rjmp	.+64     	; 0x38c8 <modf+0x5a>
    3888:	b7 51       	subi	r27, 0x17	; 23
    388a:	90 f4       	brcc	.+36     	; 0x38b0 <modf+0x42>
    388c:	ab 2f       	mov	r26, r27
    388e:	00 24       	eor	r0, r0
    3890:	46 95       	lsr	r20
    3892:	37 95       	ror	r19
    3894:	27 95       	ror	r18
    3896:	01 1c       	adc	r0, r1
    3898:	a3 95       	inc	r26
    389a:	d2 f3       	brmi	.-12     	; 0x3890 <modf+0x22>
    389c:	00 20       	and	r0, r0
    389e:	71 f0       	breq	.+28     	; 0x38bc <modf+0x4e>
    38a0:	22 0f       	add	r18, r18
    38a2:	33 1f       	adc	r19, r19
    38a4:	44 1f       	adc	r20, r20
    38a6:	b3 95       	inc	r27
    38a8:	da f3       	brmi	.-10     	; 0x38a0 <modf+0x32>
    38aa:	0e d0       	rcall	.+28     	; 0x38c8 <modf+0x5a>
    38ac:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__subsf3>
    38b0:	61 30       	cpi	r22, 0x01	; 1
    38b2:	71 05       	cpc	r23, r1
    38b4:	a0 e8       	ldi	r26, 0x80	; 128
    38b6:	8a 07       	cpc	r24, r26
    38b8:	b9 46       	sbci	r27, 0x69	; 105
    38ba:	30 f4       	brcc	.+12     	; 0x38c8 <modf+0x5a>
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24
    38c0:	66 27       	eor	r22, r22
    38c2:	77 27       	eor	r23, r23
    38c4:	88 27       	eor	r24, r24
    38c6:	90 78       	andi	r25, 0x80	; 128
    38c8:	30 96       	adiw	r30, 0x00	; 0
    38ca:	21 f0       	breq	.+8      	; 0x38d4 <modf+0x66>
    38cc:	20 83       	st	Z, r18
    38ce:	31 83       	std	Z+1, r19	; 0x01
    38d0:	42 83       	std	Z+2, r20	; 0x02
    38d2:	53 83       	std	Z+3, r21	; 0x03
    38d4:	08 95       	ret

000038d6 <__fp_mpack>:
    38d6:	9f 3f       	cpi	r25, 0xFF	; 255
    38d8:	31 f0       	breq	.+12     	; 0x38e6 <__fp_mpack_finite+0xc>

000038da <__fp_mpack_finite>:
    38da:	91 50       	subi	r25, 0x01	; 1
    38dc:	20 f4       	brcc	.+8      	; 0x38e6 <__fp_mpack_finite+0xc>
    38de:	87 95       	ror	r24
    38e0:	77 95       	ror	r23
    38e2:	67 95       	ror	r22
    38e4:	b7 95       	ror	r27
    38e6:	88 0f       	add	r24, r24
    38e8:	91 1d       	adc	r25, r1
    38ea:	96 95       	lsr	r25
    38ec:	87 95       	ror	r24
    38ee:	97 f9       	bld	r25, 7
    38f0:	08 95       	ret

000038f2 <vfprintf>:
    38f2:	a0 e1       	ldi	r26, 0x10	; 16
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	ef e7       	ldi	r30, 0x7F	; 127
    38f8:	fc e1       	ldi	r31, 0x1C	; 28
    38fa:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__prologue_saves__>
    38fe:	7c 01       	movw	r14, r24
    3900:	1b 01       	movw	r2, r22
    3902:	6a 01       	movw	r12, r20
    3904:	fc 01       	movw	r30, r24
    3906:	17 82       	std	Z+7, r1	; 0x07
    3908:	16 82       	std	Z+6, r1	; 0x06
    390a:	83 81       	ldd	r24, Z+3	; 0x03
    390c:	81 ff       	sbrs	r24, 1
    390e:	44 c3       	rjmp	.+1672   	; 0x3f98 <vfprintf+0x6a6>
    3910:	9e 01       	movw	r18, r28
    3912:	2f 5f       	subi	r18, 0xFF	; 255
    3914:	3f 4f       	sbci	r19, 0xFF	; 255
    3916:	39 01       	movw	r6, r18
    3918:	f7 01       	movw	r30, r14
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	f1 01       	movw	r30, r2
    391e:	93 fd       	sbrc	r25, 3
    3920:	85 91       	lpm	r24, Z+
    3922:	93 ff       	sbrs	r25, 3
    3924:	81 91       	ld	r24, Z+
    3926:	1f 01       	movw	r2, r30
    3928:	88 23       	and	r24, r24
    392a:	09 f4       	brne	.+2      	; 0x392e <vfprintf+0x3c>
    392c:	31 c3       	rjmp	.+1634   	; 0x3f90 <vfprintf+0x69e>
    392e:	85 32       	cpi	r24, 0x25	; 37
    3930:	39 f4       	brne	.+14     	; 0x3940 <vfprintf+0x4e>
    3932:	93 fd       	sbrc	r25, 3
    3934:	85 91       	lpm	r24, Z+
    3936:	93 ff       	sbrs	r25, 3
    3938:	81 91       	ld	r24, Z+
    393a:	1f 01       	movw	r2, r30
    393c:	85 32       	cpi	r24, 0x25	; 37
    393e:	39 f4       	brne	.+14     	; 0x394e <vfprintf+0x5c>
    3940:	b7 01       	movw	r22, r14
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3948:	56 01       	movw	r10, r12
    394a:	65 01       	movw	r12, r10
    394c:	e5 cf       	rjmp	.-54     	; 0x3918 <vfprintf+0x26>
    394e:	10 e0       	ldi	r17, 0x00	; 0
    3950:	51 2c       	mov	r5, r1
    3952:	91 2c       	mov	r9, r1
    3954:	ff e1       	ldi	r31, 0x1F	; 31
    3956:	f9 15       	cp	r31, r9
    3958:	d8 f0       	brcs	.+54     	; 0x3990 <vfprintf+0x9e>
    395a:	8b 32       	cpi	r24, 0x2B	; 43
    395c:	79 f0       	breq	.+30     	; 0x397c <vfprintf+0x8a>
    395e:	38 f4       	brcc	.+14     	; 0x396e <vfprintf+0x7c>
    3960:	80 32       	cpi	r24, 0x20	; 32
    3962:	79 f0       	breq	.+30     	; 0x3982 <vfprintf+0x90>
    3964:	83 32       	cpi	r24, 0x23	; 35
    3966:	a1 f4       	brne	.+40     	; 0x3990 <vfprintf+0x9e>
    3968:	f9 2d       	mov	r31, r9
    396a:	f0 61       	ori	r31, 0x10	; 16
    396c:	2e c0       	rjmp	.+92     	; 0x39ca <vfprintf+0xd8>
    396e:	8d 32       	cpi	r24, 0x2D	; 45
    3970:	61 f0       	breq	.+24     	; 0x398a <vfprintf+0x98>
    3972:	80 33       	cpi	r24, 0x30	; 48
    3974:	69 f4       	brne	.+26     	; 0x3990 <vfprintf+0x9e>
    3976:	29 2d       	mov	r18, r9
    3978:	21 60       	ori	r18, 0x01	; 1
    397a:	2d c0       	rjmp	.+90     	; 0x39d6 <vfprintf+0xe4>
    397c:	39 2d       	mov	r19, r9
    397e:	32 60       	ori	r19, 0x02	; 2
    3980:	93 2e       	mov	r9, r19
    3982:	89 2d       	mov	r24, r9
    3984:	84 60       	ori	r24, 0x04	; 4
    3986:	98 2e       	mov	r9, r24
    3988:	2a c0       	rjmp	.+84     	; 0x39de <vfprintf+0xec>
    398a:	e9 2d       	mov	r30, r9
    398c:	e8 60       	ori	r30, 0x08	; 8
    398e:	15 c0       	rjmp	.+42     	; 0x39ba <vfprintf+0xc8>
    3990:	97 fc       	sbrc	r9, 7
    3992:	2d c0       	rjmp	.+90     	; 0x39ee <vfprintf+0xfc>
    3994:	20 ed       	ldi	r18, 0xD0	; 208
    3996:	28 0f       	add	r18, r24
    3998:	2a 30       	cpi	r18, 0x0A	; 10
    399a:	88 f4       	brcc	.+34     	; 0x39be <vfprintf+0xcc>
    399c:	96 fe       	sbrs	r9, 6
    399e:	06 c0       	rjmp	.+12     	; 0x39ac <vfprintf+0xba>
    39a0:	3a e0       	ldi	r19, 0x0A	; 10
    39a2:	13 9f       	mul	r17, r19
    39a4:	20 0d       	add	r18, r0
    39a6:	11 24       	eor	r1, r1
    39a8:	12 2f       	mov	r17, r18
    39aa:	19 c0       	rjmp	.+50     	; 0x39de <vfprintf+0xec>
    39ac:	8a e0       	ldi	r24, 0x0A	; 10
    39ae:	58 9e       	mul	r5, r24
    39b0:	20 0d       	add	r18, r0
    39b2:	11 24       	eor	r1, r1
    39b4:	52 2e       	mov	r5, r18
    39b6:	e9 2d       	mov	r30, r9
    39b8:	e0 62       	ori	r30, 0x20	; 32
    39ba:	9e 2e       	mov	r9, r30
    39bc:	10 c0       	rjmp	.+32     	; 0x39de <vfprintf+0xec>
    39be:	8e 32       	cpi	r24, 0x2E	; 46
    39c0:	31 f4       	brne	.+12     	; 0x39ce <vfprintf+0xdc>
    39c2:	96 fc       	sbrc	r9, 6
    39c4:	e5 c2       	rjmp	.+1482   	; 0x3f90 <vfprintf+0x69e>
    39c6:	f9 2d       	mov	r31, r9
    39c8:	f0 64       	ori	r31, 0x40	; 64
    39ca:	9f 2e       	mov	r9, r31
    39cc:	08 c0       	rjmp	.+16     	; 0x39de <vfprintf+0xec>
    39ce:	8c 36       	cpi	r24, 0x6C	; 108
    39d0:	21 f4       	brne	.+8      	; 0x39da <vfprintf+0xe8>
    39d2:	29 2d       	mov	r18, r9
    39d4:	20 68       	ori	r18, 0x80	; 128
    39d6:	92 2e       	mov	r9, r18
    39d8:	02 c0       	rjmp	.+4      	; 0x39de <vfprintf+0xec>
    39da:	88 36       	cpi	r24, 0x68	; 104
    39dc:	41 f4       	brne	.+16     	; 0x39ee <vfprintf+0xfc>
    39de:	f1 01       	movw	r30, r2
    39e0:	93 fd       	sbrc	r25, 3
    39e2:	85 91       	lpm	r24, Z+
    39e4:	93 ff       	sbrs	r25, 3
    39e6:	81 91       	ld	r24, Z+
    39e8:	1f 01       	movw	r2, r30
    39ea:	81 11       	cpse	r24, r1
    39ec:	b3 cf       	rjmp	.-154    	; 0x3954 <vfprintf+0x62>
    39ee:	9b eb       	ldi	r25, 0xBB	; 187
    39f0:	98 0f       	add	r25, r24
    39f2:	93 30       	cpi	r25, 0x03	; 3
    39f4:	20 f4       	brcc	.+8      	; 0x39fe <vfprintf+0x10c>
    39f6:	99 2d       	mov	r25, r9
    39f8:	90 61       	ori	r25, 0x10	; 16
    39fa:	80 5e       	subi	r24, 0xE0	; 224
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <vfprintf+0x11a>
    39fe:	9b e9       	ldi	r25, 0x9B	; 155
    3a00:	98 0f       	add	r25, r24
    3a02:	93 30       	cpi	r25, 0x03	; 3
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <vfprintf+0x116>
    3a06:	66 c1       	rjmp	.+716    	; 0x3cd4 <vfprintf+0x3e2>
    3a08:	99 2d       	mov	r25, r9
    3a0a:	9f 7e       	andi	r25, 0xEF	; 239
    3a0c:	96 ff       	sbrs	r25, 6
    3a0e:	16 e0       	ldi	r17, 0x06	; 6
    3a10:	9f 73       	andi	r25, 0x3F	; 63
    3a12:	99 2e       	mov	r9, r25
    3a14:	85 36       	cpi	r24, 0x65	; 101
    3a16:	19 f4       	brne	.+6      	; 0x3a1e <vfprintf+0x12c>
    3a18:	90 64       	ori	r25, 0x40	; 64
    3a1a:	99 2e       	mov	r9, r25
    3a1c:	08 c0       	rjmp	.+16     	; 0x3a2e <vfprintf+0x13c>
    3a1e:	86 36       	cpi	r24, 0x66	; 102
    3a20:	21 f4       	brne	.+8      	; 0x3a2a <vfprintf+0x138>
    3a22:	39 2f       	mov	r19, r25
    3a24:	30 68       	ori	r19, 0x80	; 128
    3a26:	93 2e       	mov	r9, r19
    3a28:	02 c0       	rjmp	.+4      	; 0x3a2e <vfprintf+0x13c>
    3a2a:	11 11       	cpse	r17, r1
    3a2c:	11 50       	subi	r17, 0x01	; 1
    3a2e:	97 fe       	sbrs	r9, 7
    3a30:	07 c0       	rjmp	.+14     	; 0x3a40 <vfprintf+0x14e>
    3a32:	1c 33       	cpi	r17, 0x3C	; 60
    3a34:	50 f4       	brcc	.+20     	; 0x3a4a <vfprintf+0x158>
    3a36:	44 24       	eor	r4, r4
    3a38:	43 94       	inc	r4
    3a3a:	41 0e       	add	r4, r17
    3a3c:	27 e0       	ldi	r18, 0x07	; 7
    3a3e:	0b c0       	rjmp	.+22     	; 0x3a56 <vfprintf+0x164>
    3a40:	18 30       	cpi	r17, 0x08	; 8
    3a42:	38 f0       	brcs	.+14     	; 0x3a52 <vfprintf+0x160>
    3a44:	27 e0       	ldi	r18, 0x07	; 7
    3a46:	17 e0       	ldi	r17, 0x07	; 7
    3a48:	05 c0       	rjmp	.+10     	; 0x3a54 <vfprintf+0x162>
    3a4a:	27 e0       	ldi	r18, 0x07	; 7
    3a4c:	9c e3       	ldi	r25, 0x3C	; 60
    3a4e:	49 2e       	mov	r4, r25
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <vfprintf+0x164>
    3a52:	21 2f       	mov	r18, r17
    3a54:	41 2c       	mov	r4, r1
    3a56:	56 01       	movw	r10, r12
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	a8 0e       	add	r10, r24
    3a5c:	b1 1c       	adc	r11, r1
    3a5e:	f6 01       	movw	r30, r12
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	04 2d       	mov	r16, r4
    3a6a:	a3 01       	movw	r20, r6
    3a6c:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__ftoa_engine>
    3a70:	6c 01       	movw	r12, r24
    3a72:	f9 81       	ldd	r31, Y+1	; 0x01
    3a74:	fc 87       	std	Y+12, r31	; 0x0c
    3a76:	f0 ff       	sbrs	r31, 0
    3a78:	02 c0       	rjmp	.+4      	; 0x3a7e <vfprintf+0x18c>
    3a7a:	f3 ff       	sbrs	r31, 3
    3a7c:	06 c0       	rjmp	.+12     	; 0x3a8a <vfprintf+0x198>
    3a7e:	91 fc       	sbrc	r9, 1
    3a80:	06 c0       	rjmp	.+12     	; 0x3a8e <vfprintf+0x19c>
    3a82:	92 fe       	sbrs	r9, 2
    3a84:	06 c0       	rjmp	.+12     	; 0x3a92 <vfprintf+0x1a0>
    3a86:	00 e2       	ldi	r16, 0x20	; 32
    3a88:	05 c0       	rjmp	.+10     	; 0x3a94 <vfprintf+0x1a2>
    3a8a:	0d e2       	ldi	r16, 0x2D	; 45
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <vfprintf+0x1a2>
    3a8e:	0b e2       	ldi	r16, 0x2B	; 43
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <vfprintf+0x1a2>
    3a92:	00 e0       	ldi	r16, 0x00	; 0
    3a94:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a96:	8c 70       	andi	r24, 0x0C	; 12
    3a98:	19 f0       	breq	.+6      	; 0x3aa0 <vfprintf+0x1ae>
    3a9a:	01 11       	cpse	r16, r1
    3a9c:	5a c2       	rjmp	.+1204   	; 0x3f52 <vfprintf+0x660>
    3a9e:	9b c2       	rjmp	.+1334   	; 0x3fd6 <vfprintf+0x6e4>
    3aa0:	97 fe       	sbrs	r9, 7
    3aa2:	10 c0       	rjmp	.+32     	; 0x3ac4 <vfprintf+0x1d2>
    3aa4:	4c 0c       	add	r4, r12
    3aa6:	fc 85       	ldd	r31, Y+12	; 0x0c
    3aa8:	f4 ff       	sbrs	r31, 4
    3aaa:	04 c0       	rjmp	.+8      	; 0x3ab4 <vfprintf+0x1c2>
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	81 33       	cpi	r24, 0x31	; 49
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <vfprintf+0x1c2>
    3ab2:	4a 94       	dec	r4
    3ab4:	14 14       	cp	r1, r4
    3ab6:	74 f5       	brge	.+92     	; 0x3b14 <vfprintf+0x222>
    3ab8:	28 e0       	ldi	r18, 0x08	; 8
    3aba:	24 15       	cp	r18, r4
    3abc:	78 f5       	brcc	.+94     	; 0x3b1c <vfprintf+0x22a>
    3abe:	88 e0       	ldi	r24, 0x08	; 8
    3ac0:	48 2e       	mov	r4, r24
    3ac2:	2c c0       	rjmp	.+88     	; 0x3b1c <vfprintf+0x22a>
    3ac4:	96 fc       	sbrc	r9, 6
    3ac6:	2a c0       	rjmp	.+84     	; 0x3b1c <vfprintf+0x22a>
    3ac8:	81 2f       	mov	r24, r17
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	8c 15       	cp	r24, r12
    3ace:	9d 05       	cpc	r25, r13
    3ad0:	9c f0       	brlt	.+38     	; 0x3af8 <vfprintf+0x206>
    3ad2:	3c ef       	ldi	r19, 0xFC	; 252
    3ad4:	c3 16       	cp	r12, r19
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	d3 06       	cpc	r13, r19
    3ada:	74 f0       	brlt	.+28     	; 0x3af8 <vfprintf+0x206>
    3adc:	89 2d       	mov	r24, r9
    3ade:	80 68       	ori	r24, 0x80	; 128
    3ae0:	98 2e       	mov	r9, r24
    3ae2:	0a c0       	rjmp	.+20     	; 0x3af8 <vfprintf+0x206>
    3ae4:	e2 e0       	ldi	r30, 0x02	; 2
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	ec 0f       	add	r30, r28
    3aea:	fd 1f       	adc	r31, r29
    3aec:	e1 0f       	add	r30, r17
    3aee:	f1 1d       	adc	r31, r1
    3af0:	80 81       	ld	r24, Z
    3af2:	80 33       	cpi	r24, 0x30	; 48
    3af4:	19 f4       	brne	.+6      	; 0x3afc <vfprintf+0x20a>
    3af6:	11 50       	subi	r17, 0x01	; 1
    3af8:	11 11       	cpse	r17, r1
    3afa:	f4 cf       	rjmp	.-24     	; 0x3ae4 <vfprintf+0x1f2>
    3afc:	97 fe       	sbrs	r9, 7
    3afe:	0e c0       	rjmp	.+28     	; 0x3b1c <vfprintf+0x22a>
    3b00:	44 24       	eor	r4, r4
    3b02:	43 94       	inc	r4
    3b04:	41 0e       	add	r4, r17
    3b06:	81 2f       	mov	r24, r17
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	c8 16       	cp	r12, r24
    3b0c:	d9 06       	cpc	r13, r25
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <vfprintf+0x228>
    3b10:	1c 19       	sub	r17, r12
    3b12:	04 c0       	rjmp	.+8      	; 0x3b1c <vfprintf+0x22a>
    3b14:	44 24       	eor	r4, r4
    3b16:	43 94       	inc	r4
    3b18:	01 c0       	rjmp	.+2      	; 0x3b1c <vfprintf+0x22a>
    3b1a:	10 e0       	ldi	r17, 0x00	; 0
    3b1c:	97 fe       	sbrs	r9, 7
    3b1e:	06 c0       	rjmp	.+12     	; 0x3b2c <vfprintf+0x23a>
    3b20:	1c 14       	cp	r1, r12
    3b22:	1d 04       	cpc	r1, r13
    3b24:	34 f4       	brge	.+12     	; 0x3b32 <vfprintf+0x240>
    3b26:	c6 01       	movw	r24, r12
    3b28:	01 96       	adiw	r24, 0x01	; 1
    3b2a:	05 c0       	rjmp	.+10     	; 0x3b36 <vfprintf+0x244>
    3b2c:	85 e0       	ldi	r24, 0x05	; 5
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <vfprintf+0x244>
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	01 11       	cpse	r16, r1
    3b38:	01 96       	adiw	r24, 0x01	; 1
    3b3a:	11 23       	and	r17, r17
    3b3c:	31 f0       	breq	.+12     	; 0x3b4a <vfprintf+0x258>
    3b3e:	21 2f       	mov	r18, r17
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	2f 5f       	subi	r18, 0xFF	; 255
    3b44:	3f 4f       	sbci	r19, 0xFF	; 255
    3b46:	82 0f       	add	r24, r18
    3b48:	93 1f       	adc	r25, r19
    3b4a:	25 2d       	mov	r18, r5
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	82 17       	cp	r24, r18
    3b50:	93 07       	cpc	r25, r19
    3b52:	14 f4       	brge	.+4      	; 0x3b58 <vfprintf+0x266>
    3b54:	58 1a       	sub	r5, r24
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <vfprintf+0x268>
    3b58:	51 2c       	mov	r5, r1
    3b5a:	89 2d       	mov	r24, r9
    3b5c:	89 70       	andi	r24, 0x09	; 9
    3b5e:	49 f4       	brne	.+18     	; 0x3b72 <vfprintf+0x280>
    3b60:	55 20       	and	r5, r5
    3b62:	39 f0       	breq	.+14     	; 0x3b72 <vfprintf+0x280>
    3b64:	b7 01       	movw	r22, r14
    3b66:	80 e2       	ldi	r24, 0x20	; 32
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3b6e:	5a 94       	dec	r5
    3b70:	f7 cf       	rjmp	.-18     	; 0x3b60 <vfprintf+0x26e>
    3b72:	00 23       	and	r16, r16
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <vfprintf+0x28e>
    3b76:	b7 01       	movw	r22, r14
    3b78:	80 2f       	mov	r24, r16
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3b80:	93 fc       	sbrc	r9, 3
    3b82:	09 c0       	rjmp	.+18     	; 0x3b96 <vfprintf+0x2a4>
    3b84:	55 20       	and	r5, r5
    3b86:	39 f0       	breq	.+14     	; 0x3b96 <vfprintf+0x2a4>
    3b88:	b7 01       	movw	r22, r14
    3b8a:	80 e3       	ldi	r24, 0x30	; 48
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3b92:	5a 94       	dec	r5
    3b94:	f7 cf       	rjmp	.-18     	; 0x3b84 <vfprintf+0x292>
    3b96:	97 fe       	sbrs	r9, 7
    3b98:	4c c0       	rjmp	.+152    	; 0x3c32 <vfprintf+0x340>
    3b9a:	46 01       	movw	r8, r12
    3b9c:	d7 fe       	sbrs	r13, 7
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <vfprintf+0x2b2>
    3ba0:	81 2c       	mov	r8, r1
    3ba2:	91 2c       	mov	r9, r1
    3ba4:	c6 01       	movw	r24, r12
    3ba6:	88 19       	sub	r24, r8
    3ba8:	99 09       	sbc	r25, r9
    3baa:	f3 01       	movw	r30, r6
    3bac:	e8 0f       	add	r30, r24
    3bae:	f9 1f       	adc	r31, r25
    3bb0:	fe 87       	std	Y+14, r31	; 0x0e
    3bb2:	ed 87       	std	Y+13, r30	; 0x0d
    3bb4:	96 01       	movw	r18, r12
    3bb6:	24 19       	sub	r18, r4
    3bb8:	31 09       	sbc	r19, r1
    3bba:	38 8b       	std	Y+16, r19	; 0x10
    3bbc:	2f 87       	std	Y+15, r18	; 0x0f
    3bbe:	01 2f       	mov	r16, r17
    3bc0:	10 e0       	ldi	r17, 0x00	; 0
    3bc2:	11 95       	neg	r17
    3bc4:	01 95       	neg	r16
    3bc6:	11 09       	sbc	r17, r1
    3bc8:	3f ef       	ldi	r19, 0xFF	; 255
    3bca:	83 16       	cp	r8, r19
    3bcc:	93 06       	cpc	r9, r19
    3bce:	29 f4       	brne	.+10     	; 0x3bda <vfprintf+0x2e8>
    3bd0:	b7 01       	movw	r22, r14
    3bd2:	8e e2       	ldi	r24, 0x2E	; 46
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3bda:	c8 14       	cp	r12, r8
    3bdc:	d9 04       	cpc	r13, r9
    3bde:	4c f0       	brlt	.+18     	; 0x3bf2 <vfprintf+0x300>
    3be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be2:	98 89       	ldd	r25, Y+16	; 0x10
    3be4:	88 15       	cp	r24, r8
    3be6:	99 05       	cpc	r25, r9
    3be8:	24 f4       	brge	.+8      	; 0x3bf2 <vfprintf+0x300>
    3bea:	ed 85       	ldd	r30, Y+13	; 0x0d
    3bec:	fe 85       	ldd	r31, Y+14	; 0x0e
    3bee:	81 81       	ldd	r24, Z+1	; 0x01
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <vfprintf+0x302>
    3bf2:	80 e3       	ldi	r24, 0x30	; 48
    3bf4:	f1 e0       	ldi	r31, 0x01	; 1
    3bf6:	8f 1a       	sub	r8, r31
    3bf8:	91 08       	sbc	r9, r1
    3bfa:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bfc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bfe:	2f 5f       	subi	r18, 0xFF	; 255
    3c00:	3f 4f       	sbci	r19, 0xFF	; 255
    3c02:	3e 87       	std	Y+14, r19	; 0x0e
    3c04:	2d 87       	std	Y+13, r18	; 0x0d
    3c06:	80 16       	cp	r8, r16
    3c08:	91 06       	cpc	r9, r17
    3c0a:	2c f0       	brlt	.+10     	; 0x3c16 <vfprintf+0x324>
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3c14:	d9 cf       	rjmp	.-78     	; 0x3bc8 <vfprintf+0x2d6>
    3c16:	c8 14       	cp	r12, r8
    3c18:	d9 04       	cpc	r13, r9
    3c1a:	41 f4       	brne	.+16     	; 0x3c2c <vfprintf+0x33a>
    3c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1e:	96 33       	cpi	r25, 0x36	; 54
    3c20:	20 f4       	brcc	.+8      	; 0x3c2a <vfprintf+0x338>
    3c22:	95 33       	cpi	r25, 0x35	; 53
    3c24:	19 f4       	brne	.+6      	; 0x3c2c <vfprintf+0x33a>
    3c26:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c28:	34 ff       	sbrs	r19, 4
    3c2a:	81 e3       	ldi	r24, 0x31	; 49
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	4e c0       	rjmp	.+156    	; 0x3cce <vfprintf+0x3dc>
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	81 33       	cpi	r24, 0x31	; 49
    3c36:	19 f0       	breq	.+6      	; 0x3c3e <vfprintf+0x34c>
    3c38:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c3a:	9f 7e       	andi	r25, 0xEF	; 239
    3c3c:	9c 87       	std	Y+12, r25	; 0x0c
    3c3e:	b7 01       	movw	r22, r14
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3c46:	11 11       	cpse	r17, r1
    3c48:	05 c0       	rjmp	.+10     	; 0x3c54 <vfprintf+0x362>
    3c4a:	94 fc       	sbrc	r9, 4
    3c4c:	18 c0       	rjmp	.+48     	; 0x3c7e <vfprintf+0x38c>
    3c4e:	85 e6       	ldi	r24, 0x65	; 101
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	17 c0       	rjmp	.+46     	; 0x3c82 <vfprintf+0x390>
    3c54:	b7 01       	movw	r22, r14
    3c56:	8e e2       	ldi	r24, 0x2E	; 46
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3c5e:	1e 5f       	subi	r17, 0xFE	; 254
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	01 e0       	ldi	r16, 0x01	; 1
    3c64:	08 0f       	add	r16, r24
    3c66:	f3 01       	movw	r30, r6
    3c68:	e8 0f       	add	r30, r24
    3c6a:	f1 1d       	adc	r31, r1
    3c6c:	80 81       	ld	r24, Z
    3c6e:	b7 01       	movw	r22, r14
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3c76:	80 2f       	mov	r24, r16
    3c78:	01 13       	cpse	r16, r17
    3c7a:	f3 cf       	rjmp	.-26     	; 0x3c62 <vfprintf+0x370>
    3c7c:	e6 cf       	rjmp	.-52     	; 0x3c4a <vfprintf+0x358>
    3c7e:	85 e4       	ldi	r24, 0x45	; 69
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	b7 01       	movw	r22, r14
    3c84:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3c88:	d7 fc       	sbrc	r13, 7
    3c8a:	06 c0       	rjmp	.+12     	; 0x3c98 <vfprintf+0x3a6>
    3c8c:	c1 14       	cp	r12, r1
    3c8e:	d1 04       	cpc	r13, r1
    3c90:	41 f4       	brne	.+16     	; 0x3ca2 <vfprintf+0x3b0>
    3c92:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c94:	e4 ff       	sbrs	r30, 4
    3c96:	05 c0       	rjmp	.+10     	; 0x3ca2 <vfprintf+0x3b0>
    3c98:	d1 94       	neg	r13
    3c9a:	c1 94       	neg	r12
    3c9c:	d1 08       	sbc	r13, r1
    3c9e:	8d e2       	ldi	r24, 0x2D	; 45
    3ca0:	01 c0       	rjmp	.+2      	; 0x3ca4 <vfprintf+0x3b2>
    3ca2:	8b e2       	ldi	r24, 0x2B	; 43
    3ca4:	b7 01       	movw	r22, r14
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3cac:	80 e3       	ldi	r24, 0x30	; 48
    3cae:	2a e0       	ldi	r18, 0x0A	; 10
    3cb0:	c2 16       	cp	r12, r18
    3cb2:	d1 04       	cpc	r13, r1
    3cb4:	2c f0       	brlt	.+10     	; 0x3cc0 <vfprintf+0x3ce>
    3cb6:	8f 5f       	subi	r24, 0xFF	; 255
    3cb8:	fa e0       	ldi	r31, 0x0A	; 10
    3cba:	cf 1a       	sub	r12, r31
    3cbc:	d1 08       	sbc	r13, r1
    3cbe:	f7 cf       	rjmp	.-18     	; 0x3cae <vfprintf+0x3bc>
    3cc0:	b7 01       	movw	r22, r14
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3cc8:	b7 01       	movw	r22, r14
    3cca:	c6 01       	movw	r24, r12
    3ccc:	c0 96       	adiw	r24, 0x30	; 48
    3cce:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3cd2:	54 c1       	rjmp	.+680    	; 0x3f7c <vfprintf+0x68a>
    3cd4:	83 36       	cpi	r24, 0x63	; 99
    3cd6:	31 f0       	breq	.+12     	; 0x3ce4 <vfprintf+0x3f2>
    3cd8:	83 37       	cpi	r24, 0x73	; 115
    3cda:	79 f0       	breq	.+30     	; 0x3cfa <vfprintf+0x408>
    3cdc:	83 35       	cpi	r24, 0x53	; 83
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <vfprintf+0x3f0>
    3ce0:	56 c0       	rjmp	.+172    	; 0x3d8e <vfprintf+0x49c>
    3ce2:	20 c0       	rjmp	.+64     	; 0x3d24 <vfprintf+0x432>
    3ce4:	56 01       	movw	r10, r12
    3ce6:	32 e0       	ldi	r19, 0x02	; 2
    3ce8:	a3 0e       	add	r10, r19
    3cea:	b1 1c       	adc	r11, r1
    3cec:	f6 01       	movw	r30, r12
    3cee:	80 81       	ld	r24, Z
    3cf0:	89 83       	std	Y+1, r24	; 0x01
    3cf2:	01 e0       	ldi	r16, 0x01	; 1
    3cf4:	10 e0       	ldi	r17, 0x00	; 0
    3cf6:	63 01       	movw	r12, r6
    3cf8:	12 c0       	rjmp	.+36     	; 0x3d1e <vfprintf+0x42c>
    3cfa:	56 01       	movw	r10, r12
    3cfc:	f2 e0       	ldi	r31, 0x02	; 2
    3cfe:	af 0e       	add	r10, r31
    3d00:	b1 1c       	adc	r11, r1
    3d02:	f6 01       	movw	r30, r12
    3d04:	c0 80       	ld	r12, Z
    3d06:	d1 80       	ldd	r13, Z+1	; 0x01
    3d08:	96 fe       	sbrs	r9, 6
    3d0a:	03 c0       	rjmp	.+6      	; 0x3d12 <vfprintf+0x420>
    3d0c:	61 2f       	mov	r22, r17
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <vfprintf+0x424>
    3d12:	6f ef       	ldi	r22, 0xFF	; 255
    3d14:	7f ef       	ldi	r23, 0xFF	; 255
    3d16:	c6 01       	movw	r24, r12
    3d18:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <strnlen>
    3d1c:	8c 01       	movw	r16, r24
    3d1e:	f9 2d       	mov	r31, r9
    3d20:	ff 77       	andi	r31, 0x7F	; 127
    3d22:	14 c0       	rjmp	.+40     	; 0x3d4c <vfprintf+0x45a>
    3d24:	56 01       	movw	r10, r12
    3d26:	22 e0       	ldi	r18, 0x02	; 2
    3d28:	a2 0e       	add	r10, r18
    3d2a:	b1 1c       	adc	r11, r1
    3d2c:	f6 01       	movw	r30, r12
    3d2e:	c0 80       	ld	r12, Z
    3d30:	d1 80       	ldd	r13, Z+1	; 0x01
    3d32:	96 fe       	sbrs	r9, 6
    3d34:	03 c0       	rjmp	.+6      	; 0x3d3c <vfprintf+0x44a>
    3d36:	61 2f       	mov	r22, r17
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <vfprintf+0x44e>
    3d3c:	6f ef       	ldi	r22, 0xFF	; 255
    3d3e:	7f ef       	ldi	r23, 0xFF	; 255
    3d40:	c6 01       	movw	r24, r12
    3d42:	0e 94 42 21 	call	0x4284	; 0x4284 <strnlen_P>
    3d46:	8c 01       	movw	r16, r24
    3d48:	f9 2d       	mov	r31, r9
    3d4a:	f0 68       	ori	r31, 0x80	; 128
    3d4c:	9f 2e       	mov	r9, r31
    3d4e:	f3 fd       	sbrc	r31, 3
    3d50:	1a c0       	rjmp	.+52     	; 0x3d86 <vfprintf+0x494>
    3d52:	85 2d       	mov	r24, r5
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	08 17       	cp	r16, r24
    3d58:	19 07       	cpc	r17, r25
    3d5a:	a8 f4       	brcc	.+42     	; 0x3d86 <vfprintf+0x494>
    3d5c:	b7 01       	movw	r22, r14
    3d5e:	80 e2       	ldi	r24, 0x20	; 32
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3d66:	5a 94       	dec	r5
    3d68:	f4 cf       	rjmp	.-24     	; 0x3d52 <vfprintf+0x460>
    3d6a:	f6 01       	movw	r30, r12
    3d6c:	97 fc       	sbrc	r9, 7
    3d6e:	85 91       	lpm	r24, Z+
    3d70:	97 fe       	sbrs	r9, 7
    3d72:	81 91       	ld	r24, Z+
    3d74:	6f 01       	movw	r12, r30
    3d76:	b7 01       	movw	r22, r14
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3d7e:	51 10       	cpse	r5, r1
    3d80:	5a 94       	dec	r5
    3d82:	01 50       	subi	r16, 0x01	; 1
    3d84:	11 09       	sbc	r17, r1
    3d86:	01 15       	cp	r16, r1
    3d88:	11 05       	cpc	r17, r1
    3d8a:	79 f7       	brne	.-34     	; 0x3d6a <vfprintf+0x478>
    3d8c:	f7 c0       	rjmp	.+494    	; 0x3f7c <vfprintf+0x68a>
    3d8e:	84 36       	cpi	r24, 0x64	; 100
    3d90:	11 f0       	breq	.+4      	; 0x3d96 <vfprintf+0x4a4>
    3d92:	89 36       	cpi	r24, 0x69	; 105
    3d94:	61 f5       	brne	.+88     	; 0x3dee <vfprintf+0x4fc>
    3d96:	56 01       	movw	r10, r12
    3d98:	97 fe       	sbrs	r9, 7
    3d9a:	09 c0       	rjmp	.+18     	; 0x3dae <vfprintf+0x4bc>
    3d9c:	24 e0       	ldi	r18, 0x04	; 4
    3d9e:	a2 0e       	add	r10, r18
    3da0:	b1 1c       	adc	r11, r1
    3da2:	f6 01       	movw	r30, r12
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	0a c0       	rjmp	.+20     	; 0x3dc2 <vfprintf+0x4d0>
    3dae:	f2 e0       	ldi	r31, 0x02	; 2
    3db0:	af 0e       	add	r10, r31
    3db2:	b1 1c       	adc	r11, r1
    3db4:	f6 01       	movw	r30, r12
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	07 2e       	mov	r0, r23
    3dbc:	00 0c       	add	r0, r0
    3dbe:	88 0b       	sbc	r24, r24
    3dc0:	99 0b       	sbc	r25, r25
    3dc2:	f9 2d       	mov	r31, r9
    3dc4:	ff 76       	andi	r31, 0x6F	; 111
    3dc6:	9f 2e       	mov	r9, r31
    3dc8:	97 ff       	sbrs	r25, 7
    3dca:	09 c0       	rjmp	.+18     	; 0x3dde <vfprintf+0x4ec>
    3dcc:	90 95       	com	r25
    3dce:	80 95       	com	r24
    3dd0:	70 95       	com	r23
    3dd2:	61 95       	neg	r22
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	f0 68       	ori	r31, 0x80	; 128
    3ddc:	9f 2e       	mov	r9, r31
    3dde:	2a e0       	ldi	r18, 0x0A	; 10
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	a3 01       	movw	r20, r6
    3de4:	0e 94 bd 21 	call	0x437a	; 0x437a <__ultoa_invert>
    3de8:	c8 2e       	mov	r12, r24
    3dea:	c6 18       	sub	r12, r6
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <vfprintf+0x57a>
    3dee:	09 2d       	mov	r16, r9
    3df0:	85 37       	cpi	r24, 0x75	; 117
    3df2:	21 f4       	brne	.+8      	; 0x3dfc <vfprintf+0x50a>
    3df4:	0f 7e       	andi	r16, 0xEF	; 239
    3df6:	2a e0       	ldi	r18, 0x0A	; 10
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	1d c0       	rjmp	.+58     	; 0x3e36 <vfprintf+0x544>
    3dfc:	09 7f       	andi	r16, 0xF9	; 249
    3dfe:	8f 36       	cpi	r24, 0x6F	; 111
    3e00:	91 f0       	breq	.+36     	; 0x3e26 <vfprintf+0x534>
    3e02:	18 f4       	brcc	.+6      	; 0x3e0a <vfprintf+0x518>
    3e04:	88 35       	cpi	r24, 0x58	; 88
    3e06:	59 f0       	breq	.+22     	; 0x3e1e <vfprintf+0x52c>
    3e08:	c3 c0       	rjmp	.+390    	; 0x3f90 <vfprintf+0x69e>
    3e0a:	80 37       	cpi	r24, 0x70	; 112
    3e0c:	19 f0       	breq	.+6      	; 0x3e14 <vfprintf+0x522>
    3e0e:	88 37       	cpi	r24, 0x78	; 120
    3e10:	11 f0       	breq	.+4      	; 0x3e16 <vfprintf+0x524>
    3e12:	be c0       	rjmp	.+380    	; 0x3f90 <vfprintf+0x69e>
    3e14:	00 61       	ori	r16, 0x10	; 16
    3e16:	04 ff       	sbrs	r16, 4
    3e18:	09 c0       	rjmp	.+18     	; 0x3e2c <vfprintf+0x53a>
    3e1a:	04 60       	ori	r16, 0x04	; 4
    3e1c:	07 c0       	rjmp	.+14     	; 0x3e2c <vfprintf+0x53a>
    3e1e:	94 fe       	sbrs	r9, 4
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <vfprintf+0x540>
    3e22:	06 60       	ori	r16, 0x06	; 6
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <vfprintf+0x540>
    3e26:	28 e0       	ldi	r18, 0x08	; 8
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <vfprintf+0x544>
    3e2c:	20 e1       	ldi	r18, 0x10	; 16
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <vfprintf+0x544>
    3e32:	20 e1       	ldi	r18, 0x10	; 16
    3e34:	32 e0       	ldi	r19, 0x02	; 2
    3e36:	56 01       	movw	r10, r12
    3e38:	07 ff       	sbrs	r16, 7
    3e3a:	09 c0       	rjmp	.+18     	; 0x3e4e <vfprintf+0x55c>
    3e3c:	84 e0       	ldi	r24, 0x04	; 4
    3e3e:	a8 0e       	add	r10, r24
    3e40:	b1 1c       	adc	r11, r1
    3e42:	f6 01       	movw	r30, r12
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <vfprintf+0x56c>
    3e4e:	f2 e0       	ldi	r31, 0x02	; 2
    3e50:	af 0e       	add	r10, r31
    3e52:	b1 1c       	adc	r11, r1
    3e54:	f6 01       	movw	r30, r12
    3e56:	60 81       	ld	r22, Z
    3e58:	71 81       	ldd	r23, Z+1	; 0x01
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	a3 01       	movw	r20, r6
    3e60:	0e 94 bd 21 	call	0x437a	; 0x437a <__ultoa_invert>
    3e64:	c8 2e       	mov	r12, r24
    3e66:	c6 18       	sub	r12, r6
    3e68:	0f 77       	andi	r16, 0x7F	; 127
    3e6a:	90 2e       	mov	r9, r16
    3e6c:	96 fe       	sbrs	r9, 6
    3e6e:	0b c0       	rjmp	.+22     	; 0x3e86 <vfprintf+0x594>
    3e70:	09 2d       	mov	r16, r9
    3e72:	0e 7f       	andi	r16, 0xFE	; 254
    3e74:	c1 16       	cp	r12, r17
    3e76:	50 f4       	brcc	.+20     	; 0x3e8c <vfprintf+0x59a>
    3e78:	94 fe       	sbrs	r9, 4
    3e7a:	0a c0       	rjmp	.+20     	; 0x3e90 <vfprintf+0x59e>
    3e7c:	92 fc       	sbrc	r9, 2
    3e7e:	08 c0       	rjmp	.+16     	; 0x3e90 <vfprintf+0x59e>
    3e80:	09 2d       	mov	r16, r9
    3e82:	0e 7e       	andi	r16, 0xEE	; 238
    3e84:	05 c0       	rjmp	.+10     	; 0x3e90 <vfprintf+0x59e>
    3e86:	dc 2c       	mov	r13, r12
    3e88:	09 2d       	mov	r16, r9
    3e8a:	03 c0       	rjmp	.+6      	; 0x3e92 <vfprintf+0x5a0>
    3e8c:	dc 2c       	mov	r13, r12
    3e8e:	01 c0       	rjmp	.+2      	; 0x3e92 <vfprintf+0x5a0>
    3e90:	d1 2e       	mov	r13, r17
    3e92:	04 ff       	sbrs	r16, 4
    3e94:	0d c0       	rjmp	.+26     	; 0x3eb0 <vfprintf+0x5be>
    3e96:	fe 01       	movw	r30, r28
    3e98:	ec 0d       	add	r30, r12
    3e9a:	f1 1d       	adc	r31, r1
    3e9c:	80 81       	ld	r24, Z
    3e9e:	80 33       	cpi	r24, 0x30	; 48
    3ea0:	11 f4       	brne	.+4      	; 0x3ea6 <vfprintf+0x5b4>
    3ea2:	09 7e       	andi	r16, 0xE9	; 233
    3ea4:	09 c0       	rjmp	.+18     	; 0x3eb8 <vfprintf+0x5c6>
    3ea6:	02 ff       	sbrs	r16, 2
    3ea8:	06 c0       	rjmp	.+12     	; 0x3eb6 <vfprintf+0x5c4>
    3eaa:	d3 94       	inc	r13
    3eac:	d3 94       	inc	r13
    3eae:	04 c0       	rjmp	.+8      	; 0x3eb8 <vfprintf+0x5c6>
    3eb0:	80 2f       	mov	r24, r16
    3eb2:	86 78       	andi	r24, 0x86	; 134
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <vfprintf+0x5c6>
    3eb6:	d3 94       	inc	r13
    3eb8:	03 fd       	sbrc	r16, 3
    3eba:	11 c0       	rjmp	.+34     	; 0x3ede <vfprintf+0x5ec>
    3ebc:	00 ff       	sbrs	r16, 0
    3ebe:	06 c0       	rjmp	.+12     	; 0x3ecc <vfprintf+0x5da>
    3ec0:	1c 2d       	mov	r17, r12
    3ec2:	d5 14       	cp	r13, r5
    3ec4:	80 f4       	brcc	.+32     	; 0x3ee6 <vfprintf+0x5f4>
    3ec6:	15 0d       	add	r17, r5
    3ec8:	1d 19       	sub	r17, r13
    3eca:	0d c0       	rjmp	.+26     	; 0x3ee6 <vfprintf+0x5f4>
    3ecc:	d5 14       	cp	r13, r5
    3ece:	58 f4       	brcc	.+22     	; 0x3ee6 <vfprintf+0x5f4>
    3ed0:	b7 01       	movw	r22, r14
    3ed2:	80 e2       	ldi	r24, 0x20	; 32
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3eda:	d3 94       	inc	r13
    3edc:	f7 cf       	rjmp	.-18     	; 0x3ecc <vfprintf+0x5da>
    3ede:	d5 14       	cp	r13, r5
    3ee0:	10 f4       	brcc	.+4      	; 0x3ee6 <vfprintf+0x5f4>
    3ee2:	5d 18       	sub	r5, r13
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <vfprintf+0x5f6>
    3ee6:	51 2c       	mov	r5, r1
    3ee8:	04 ff       	sbrs	r16, 4
    3eea:	10 c0       	rjmp	.+32     	; 0x3f0c <vfprintf+0x61a>
    3eec:	b7 01       	movw	r22, r14
    3eee:	80 e3       	ldi	r24, 0x30	; 48
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3ef6:	02 ff       	sbrs	r16, 2
    3ef8:	17 c0       	rjmp	.+46     	; 0x3f28 <vfprintf+0x636>
    3efa:	01 fd       	sbrc	r16, 1
    3efc:	03 c0       	rjmp	.+6      	; 0x3f04 <vfprintf+0x612>
    3efe:	88 e7       	ldi	r24, 0x78	; 120
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	02 c0       	rjmp	.+4      	; 0x3f08 <vfprintf+0x616>
    3f04:	88 e5       	ldi	r24, 0x58	; 88
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	b7 01       	movw	r22, r14
    3f0a:	0c c0       	rjmp	.+24     	; 0x3f24 <vfprintf+0x632>
    3f0c:	80 2f       	mov	r24, r16
    3f0e:	86 78       	andi	r24, 0x86	; 134
    3f10:	59 f0       	breq	.+22     	; 0x3f28 <vfprintf+0x636>
    3f12:	01 ff       	sbrs	r16, 1
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <vfprintf+0x628>
    3f16:	8b e2       	ldi	r24, 0x2B	; 43
    3f18:	01 c0       	rjmp	.+2      	; 0x3f1c <vfprintf+0x62a>
    3f1a:	80 e2       	ldi	r24, 0x20	; 32
    3f1c:	07 fd       	sbrc	r16, 7
    3f1e:	8d e2       	ldi	r24, 0x2D	; 45
    3f20:	b7 01       	movw	r22, r14
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3f28:	c1 16       	cp	r12, r17
    3f2a:	38 f4       	brcc	.+14     	; 0x3f3a <vfprintf+0x648>
    3f2c:	b7 01       	movw	r22, r14
    3f2e:	80 e3       	ldi	r24, 0x30	; 48
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3f36:	11 50       	subi	r17, 0x01	; 1
    3f38:	f7 cf       	rjmp	.-18     	; 0x3f28 <vfprintf+0x636>
    3f3a:	ca 94       	dec	r12
    3f3c:	f3 01       	movw	r30, r6
    3f3e:	ec 0d       	add	r30, r12
    3f40:	f1 1d       	adc	r31, r1
    3f42:	80 81       	ld	r24, Z
    3f44:	b7 01       	movw	r22, r14
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3f4c:	c1 10       	cpse	r12, r1
    3f4e:	f5 cf       	rjmp	.-22     	; 0x3f3a <vfprintf+0x648>
    3f50:	15 c0       	rjmp	.+42     	; 0x3f7c <vfprintf+0x68a>
    3f52:	f4 e0       	ldi	r31, 0x04	; 4
    3f54:	f5 15       	cp	r31, r5
    3f56:	60 f5       	brcc	.+88     	; 0x3fb0 <vfprintf+0x6be>
    3f58:	84 e0       	ldi	r24, 0x04	; 4
    3f5a:	58 1a       	sub	r5, r24
    3f5c:	93 fe       	sbrs	r9, 3
    3f5e:	1f c0       	rjmp	.+62     	; 0x3f9e <vfprintf+0x6ac>
    3f60:	01 11       	cpse	r16, r1
    3f62:	27 c0       	rjmp	.+78     	; 0x3fb2 <vfprintf+0x6c0>
    3f64:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f66:	23 ff       	sbrs	r18, 3
    3f68:	2a c0       	rjmp	.+84     	; 0x3fbe <vfprintf+0x6cc>
    3f6a:	04 ed       	ldi	r16, 0xD4	; 212
    3f6c:	12 e0       	ldi	r17, 0x02	; 2
    3f6e:	39 2d       	mov	r19, r9
    3f70:	30 71       	andi	r19, 0x10	; 16
    3f72:	93 2e       	mov	r9, r19
    3f74:	f8 01       	movw	r30, r16
    3f76:	84 91       	lpm	r24, Z
    3f78:	81 11       	cpse	r24, r1
    3f7a:	24 c0       	rjmp	.+72     	; 0x3fc4 <vfprintf+0x6d2>
    3f7c:	55 20       	and	r5, r5
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <vfprintf+0x690>
    3f80:	e4 cc       	rjmp	.-1592   	; 0x394a <vfprintf+0x58>
    3f82:	b7 01       	movw	r22, r14
    3f84:	80 e2       	ldi	r24, 0x20	; 32
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3f8c:	5a 94       	dec	r5
    3f8e:	f6 cf       	rjmp	.-20     	; 0x3f7c <vfprintf+0x68a>
    3f90:	f7 01       	movw	r30, r14
    3f92:	86 81       	ldd	r24, Z+6	; 0x06
    3f94:	97 81       	ldd	r25, Z+7	; 0x07
    3f96:	26 c0       	rjmp	.+76     	; 0x3fe4 <vfprintf+0x6f2>
    3f98:	8f ef       	ldi	r24, 0xFF	; 255
    3f9a:	9f ef       	ldi	r25, 0xFF	; 255
    3f9c:	23 c0       	rjmp	.+70     	; 0x3fe4 <vfprintf+0x6f2>
    3f9e:	b7 01       	movw	r22, r14
    3fa0:	80 e2       	ldi	r24, 0x20	; 32
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3fa8:	5a 94       	dec	r5
    3faa:	51 10       	cpse	r5, r1
    3fac:	f8 cf       	rjmp	.-16     	; 0x3f9e <vfprintf+0x6ac>
    3fae:	d8 cf       	rjmp	.-80     	; 0x3f60 <vfprintf+0x66e>
    3fb0:	51 2c       	mov	r5, r1
    3fb2:	b7 01       	movw	r22, r14
    3fb4:	80 2f       	mov	r24, r16
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3fbc:	d3 cf       	rjmp	.-90     	; 0x3f64 <vfprintf+0x672>
    3fbe:	08 ed       	ldi	r16, 0xD8	; 216
    3fc0:	12 e0       	ldi	r17, 0x02	; 2
    3fc2:	d5 cf       	rjmp	.-86     	; 0x3f6e <vfprintf+0x67c>
    3fc4:	91 10       	cpse	r9, r1
    3fc6:	80 52       	subi	r24, 0x20	; 32
    3fc8:	b7 01       	movw	r22, r14
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	0e 94 65 21 	call	0x42ca	; 0x42ca <fputc>
    3fd0:	0f 5f       	subi	r16, 0xFF	; 255
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	cf cf       	rjmp	.-98     	; 0x3f74 <vfprintf+0x682>
    3fd6:	23 e0       	ldi	r18, 0x03	; 3
    3fd8:	25 15       	cp	r18, r5
    3fda:	10 f4       	brcc	.+4      	; 0x3fe0 <vfprintf+0x6ee>
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	bd cf       	rjmp	.-134    	; 0x3f5a <vfprintf+0x668>
    3fe0:	51 2c       	mov	r5, r1
    3fe2:	c0 cf       	rjmp	.-128    	; 0x3f64 <vfprintf+0x672>
    3fe4:	60 96       	adiw	r28, 0x10	; 16
    3fe6:	e2 e1       	ldi	r30, 0x12	; 18
    3fe8:	0c 94 3b 20 	jmp	0x4076	; 0x4076 <__epilogue_restores__>

00003fec <__divmodhi4>:
    3fec:	97 fb       	bst	r25, 7
    3fee:	07 2e       	mov	r0, r23
    3ff0:	16 f4       	brtc	.+4      	; 0x3ff6 <__divmodhi4+0xa>
    3ff2:	00 94       	com	r0
    3ff4:	07 d0       	rcall	.+14     	; 0x4004 <__divmodhi4_neg1>
    3ff6:	77 fd       	sbrc	r23, 7
    3ff8:	09 d0       	rcall	.+18     	; 0x400c <__divmodhi4_neg2>
    3ffa:	0e 94 56 20 	call	0x40ac	; 0x40ac <__udivmodhi4>
    3ffe:	07 fc       	sbrc	r0, 7
    4000:	05 d0       	rcall	.+10     	; 0x400c <__divmodhi4_neg2>
    4002:	3e f4       	brtc	.+14     	; 0x4012 <__divmodhi4_exit>

00004004 <__divmodhi4_neg1>:
    4004:	90 95       	com	r25
    4006:	81 95       	neg	r24
    4008:	9f 4f       	sbci	r25, 0xFF	; 255
    400a:	08 95       	ret

0000400c <__divmodhi4_neg2>:
    400c:	70 95       	com	r23
    400e:	61 95       	neg	r22
    4010:	7f 4f       	sbci	r23, 0xFF	; 255

00004012 <__divmodhi4_exit>:
    4012:	08 95       	ret

00004014 <__tablejump2__>:
    4014:	ee 0f       	add	r30, r30
    4016:	ff 1f       	adc	r31, r31
    4018:	05 90       	lpm	r0, Z+
    401a:	f4 91       	lpm	r31, Z
    401c:	e0 2d       	mov	r30, r0
    401e:	09 94       	ijmp

00004020 <__umulhisi3>:
    4020:	a2 9f       	mul	r26, r18
    4022:	b0 01       	movw	r22, r0
    4024:	b3 9f       	mul	r27, r19
    4026:	c0 01       	movw	r24, r0
    4028:	a3 9f       	mul	r26, r19
    402a:	70 0d       	add	r23, r0
    402c:	81 1d       	adc	r24, r1
    402e:	11 24       	eor	r1, r1
    4030:	91 1d       	adc	r25, r1
    4032:	b2 9f       	mul	r27, r18
    4034:	70 0d       	add	r23, r0
    4036:	81 1d       	adc	r24, r1
    4038:	11 24       	eor	r1, r1
    403a:	91 1d       	adc	r25, r1
    403c:	08 95       	ret

0000403e <__prologue_saves__>:
    403e:	2f 92       	push	r2
    4040:	3f 92       	push	r3
    4042:	4f 92       	push	r4
    4044:	5f 92       	push	r5
    4046:	6f 92       	push	r6
    4048:	7f 92       	push	r7
    404a:	8f 92       	push	r8
    404c:	9f 92       	push	r9
    404e:	af 92       	push	r10
    4050:	bf 92       	push	r11
    4052:	cf 92       	push	r12
    4054:	df 92       	push	r13
    4056:	ef 92       	push	r14
    4058:	ff 92       	push	r15
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	ca 1b       	sub	r28, r26
    4068:	db 0b       	sbc	r29, r27
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	f8 94       	cli
    406e:	de bf       	out	0x3e, r29	; 62
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	cd bf       	out	0x3d, r28	; 61
    4074:	09 94       	ijmp

00004076 <__epilogue_restores__>:
    4076:	2a 88       	ldd	r2, Y+18	; 0x12
    4078:	39 88       	ldd	r3, Y+17	; 0x11
    407a:	48 88       	ldd	r4, Y+16	; 0x10
    407c:	5f 84       	ldd	r5, Y+15	; 0x0f
    407e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4080:	7d 84       	ldd	r7, Y+13	; 0x0d
    4082:	8c 84       	ldd	r8, Y+12	; 0x0c
    4084:	9b 84       	ldd	r9, Y+11	; 0x0b
    4086:	aa 84       	ldd	r10, Y+10	; 0x0a
    4088:	b9 84       	ldd	r11, Y+9	; 0x09
    408a:	c8 84       	ldd	r12, Y+8	; 0x08
    408c:	df 80       	ldd	r13, Y+7	; 0x07
    408e:	ee 80       	ldd	r14, Y+6	; 0x06
    4090:	fd 80       	ldd	r15, Y+5	; 0x05
    4092:	0c 81       	ldd	r16, Y+4	; 0x04
    4094:	1b 81       	ldd	r17, Y+3	; 0x03
    4096:	aa 81       	ldd	r26, Y+2	; 0x02
    4098:	b9 81       	ldd	r27, Y+1	; 0x01
    409a:	ce 0f       	add	r28, r30
    409c:	d1 1d       	adc	r29, r1
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	ed 01       	movw	r28, r26
    40aa:	08 95       	ret

000040ac <__udivmodhi4>:
    40ac:	aa 1b       	sub	r26, r26
    40ae:	bb 1b       	sub	r27, r27
    40b0:	51 e1       	ldi	r21, 0x11	; 17
    40b2:	07 c0       	rjmp	.+14     	; 0x40c2 <__udivmodhi4_ep>

000040b4 <__udivmodhi4_loop>:
    40b4:	aa 1f       	adc	r26, r26
    40b6:	bb 1f       	adc	r27, r27
    40b8:	a6 17       	cp	r26, r22
    40ba:	b7 07       	cpc	r27, r23
    40bc:	10 f0       	brcs	.+4      	; 0x40c2 <__udivmodhi4_ep>
    40be:	a6 1b       	sub	r26, r22
    40c0:	b7 0b       	sbc	r27, r23

000040c2 <__udivmodhi4_ep>:
    40c2:	88 1f       	adc	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	5a 95       	dec	r21
    40c8:	a9 f7       	brne	.-22     	; 0x40b4 <__udivmodhi4_loop>
    40ca:	80 95       	com	r24
    40cc:	90 95       	com	r25
    40ce:	bc 01       	movw	r22, r24
    40d0:	cd 01       	movw	r24, r26
    40d2:	08 95       	ret

000040d4 <__ftoa_engine>:
    40d4:	28 30       	cpi	r18, 0x08	; 8
    40d6:	08 f0       	brcs	.+2      	; 0x40da <__ftoa_engine+0x6>
    40d8:	27 e0       	ldi	r18, 0x07	; 7
    40da:	33 27       	eor	r19, r19
    40dc:	da 01       	movw	r26, r20
    40de:	99 0f       	add	r25, r25
    40e0:	31 1d       	adc	r19, r1
    40e2:	87 fd       	sbrc	r24, 7
    40e4:	91 60       	ori	r25, 0x01	; 1
    40e6:	00 96       	adiw	r24, 0x00	; 0
    40e8:	61 05       	cpc	r22, r1
    40ea:	71 05       	cpc	r23, r1
    40ec:	39 f4       	brne	.+14     	; 0x40fc <__ftoa_engine+0x28>
    40ee:	32 60       	ori	r19, 0x02	; 2
    40f0:	2e 5f       	subi	r18, 0xFE	; 254
    40f2:	3d 93       	st	X+, r19
    40f4:	30 e3       	ldi	r19, 0x30	; 48
    40f6:	2a 95       	dec	r18
    40f8:	e1 f7       	brne	.-8      	; 0x40f2 <__ftoa_engine+0x1e>
    40fa:	08 95       	ret
    40fc:	9f 3f       	cpi	r25, 0xFF	; 255
    40fe:	30 f0       	brcs	.+12     	; 0x410c <__ftoa_engine+0x38>
    4100:	80 38       	cpi	r24, 0x80	; 128
    4102:	71 05       	cpc	r23, r1
    4104:	61 05       	cpc	r22, r1
    4106:	09 f0       	breq	.+2      	; 0x410a <__ftoa_engine+0x36>
    4108:	3c 5f       	subi	r19, 0xFC	; 252
    410a:	3c 5f       	subi	r19, 0xFC	; 252
    410c:	3d 93       	st	X+, r19
    410e:	91 30       	cpi	r25, 0x01	; 1
    4110:	08 f0       	brcs	.+2      	; 0x4114 <__ftoa_engine+0x40>
    4112:	80 68       	ori	r24, 0x80	; 128
    4114:	91 1d       	adc	r25, r1
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	1f 93       	push	r17
    411c:	0f 93       	push	r16
    411e:	ff 92       	push	r15
    4120:	ef 92       	push	r14
    4122:	19 2f       	mov	r17, r25
    4124:	98 7f       	andi	r25, 0xF8	; 248
    4126:	96 95       	lsr	r25
    4128:	e9 2f       	mov	r30, r25
    412a:	96 95       	lsr	r25
    412c:	96 95       	lsr	r25
    412e:	e9 0f       	add	r30, r25
    4130:	ff 27       	eor	r31, r31
    4132:	ea 5c       	subi	r30, 0xCA	; 202
    4134:	fc 4f       	sbci	r31, 0xFC	; 252
    4136:	99 27       	eor	r25, r25
    4138:	33 27       	eor	r19, r19
    413a:	ee 24       	eor	r14, r14
    413c:	ff 24       	eor	r15, r15
    413e:	a7 01       	movw	r20, r14
    4140:	e7 01       	movw	r28, r14
    4142:	05 90       	lpm	r0, Z+
    4144:	08 94       	sec
    4146:	07 94       	ror	r0
    4148:	28 f4       	brcc	.+10     	; 0x4154 <__ftoa_engine+0x80>
    414a:	36 0f       	add	r19, r22
    414c:	e7 1e       	adc	r14, r23
    414e:	f8 1e       	adc	r15, r24
    4150:	49 1f       	adc	r20, r25
    4152:	51 1d       	adc	r21, r1
    4154:	66 0f       	add	r22, r22
    4156:	77 1f       	adc	r23, r23
    4158:	88 1f       	adc	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	06 94       	lsr	r0
    415e:	a1 f7       	brne	.-24     	; 0x4148 <__ftoa_engine+0x74>
    4160:	05 90       	lpm	r0, Z+
    4162:	07 94       	ror	r0
    4164:	28 f4       	brcc	.+10     	; 0x4170 <__ftoa_engine+0x9c>
    4166:	e7 0e       	add	r14, r23
    4168:	f8 1e       	adc	r15, r24
    416a:	49 1f       	adc	r20, r25
    416c:	56 1f       	adc	r21, r22
    416e:	c1 1d       	adc	r28, r1
    4170:	77 0f       	add	r23, r23
    4172:	88 1f       	adc	r24, r24
    4174:	99 1f       	adc	r25, r25
    4176:	66 1f       	adc	r22, r22
    4178:	06 94       	lsr	r0
    417a:	a1 f7       	brne	.-24     	; 0x4164 <__ftoa_engine+0x90>
    417c:	05 90       	lpm	r0, Z+
    417e:	07 94       	ror	r0
    4180:	28 f4       	brcc	.+10     	; 0x418c <__ftoa_engine+0xb8>
    4182:	f8 0e       	add	r15, r24
    4184:	49 1f       	adc	r20, r25
    4186:	56 1f       	adc	r21, r22
    4188:	c7 1f       	adc	r28, r23
    418a:	d1 1d       	adc	r29, r1
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	66 1f       	adc	r22, r22
    4192:	77 1f       	adc	r23, r23
    4194:	06 94       	lsr	r0
    4196:	a1 f7       	brne	.-24     	; 0x4180 <__ftoa_engine+0xac>
    4198:	05 90       	lpm	r0, Z+
    419a:	07 94       	ror	r0
    419c:	20 f4       	brcc	.+8      	; 0x41a6 <__ftoa_engine+0xd2>
    419e:	49 0f       	add	r20, r25
    41a0:	56 1f       	adc	r21, r22
    41a2:	c7 1f       	adc	r28, r23
    41a4:	d8 1f       	adc	r29, r24
    41a6:	99 0f       	add	r25, r25
    41a8:	66 1f       	adc	r22, r22
    41aa:	77 1f       	adc	r23, r23
    41ac:	88 1f       	adc	r24, r24
    41ae:	06 94       	lsr	r0
    41b0:	a9 f7       	brne	.-22     	; 0x419c <__ftoa_engine+0xc8>
    41b2:	84 91       	lpm	r24, Z
    41b4:	10 95       	com	r17
    41b6:	17 70       	andi	r17, 0x07	; 7
    41b8:	41 f0       	breq	.+16     	; 0x41ca <__ftoa_engine+0xf6>
    41ba:	d6 95       	lsr	r29
    41bc:	c7 95       	ror	r28
    41be:	57 95       	ror	r21
    41c0:	47 95       	ror	r20
    41c2:	f7 94       	ror	r15
    41c4:	e7 94       	ror	r14
    41c6:	1a 95       	dec	r17
    41c8:	c1 f7       	brne	.-16     	; 0x41ba <__ftoa_engine+0xe6>
    41ca:	ec ed       	ldi	r30, 0xDC	; 220
    41cc:	f2 e0       	ldi	r31, 0x02	; 2
    41ce:	68 94       	set
    41d0:	15 90       	lpm	r1, Z+
    41d2:	15 91       	lpm	r17, Z+
    41d4:	35 91       	lpm	r19, Z+
    41d6:	65 91       	lpm	r22, Z+
    41d8:	95 91       	lpm	r25, Z+
    41da:	05 90       	lpm	r0, Z+
    41dc:	7f e2       	ldi	r23, 0x2F	; 47
    41de:	73 95       	inc	r23
    41e0:	e1 18       	sub	r14, r1
    41e2:	f1 0a       	sbc	r15, r17
    41e4:	43 0b       	sbc	r20, r19
    41e6:	56 0b       	sbc	r21, r22
    41e8:	c9 0b       	sbc	r28, r25
    41ea:	d0 09       	sbc	r29, r0
    41ec:	c0 f7       	brcc	.-16     	; 0x41de <__ftoa_engine+0x10a>
    41ee:	e1 0c       	add	r14, r1
    41f0:	f1 1e       	adc	r15, r17
    41f2:	43 1f       	adc	r20, r19
    41f4:	56 1f       	adc	r21, r22
    41f6:	c9 1f       	adc	r28, r25
    41f8:	d0 1d       	adc	r29, r0
    41fa:	7e f4       	brtc	.+30     	; 0x421a <__ftoa_engine+0x146>
    41fc:	70 33       	cpi	r23, 0x30	; 48
    41fe:	11 f4       	brne	.+4      	; 0x4204 <__ftoa_engine+0x130>
    4200:	8a 95       	dec	r24
    4202:	e6 cf       	rjmp	.-52     	; 0x41d0 <__ftoa_engine+0xfc>
    4204:	e8 94       	clt
    4206:	01 50       	subi	r16, 0x01	; 1
    4208:	30 f0       	brcs	.+12     	; 0x4216 <__ftoa_engine+0x142>
    420a:	08 0f       	add	r16, r24
    420c:	0a f4       	brpl	.+2      	; 0x4210 <__ftoa_engine+0x13c>
    420e:	00 27       	eor	r16, r16
    4210:	02 17       	cp	r16, r18
    4212:	08 f4       	brcc	.+2      	; 0x4216 <__ftoa_engine+0x142>
    4214:	20 2f       	mov	r18, r16
    4216:	23 95       	inc	r18
    4218:	02 2f       	mov	r16, r18
    421a:	7a 33       	cpi	r23, 0x3A	; 58
    421c:	28 f0       	brcs	.+10     	; 0x4228 <__ftoa_engine+0x154>
    421e:	79 e3       	ldi	r23, 0x39	; 57
    4220:	7d 93       	st	X+, r23
    4222:	2a 95       	dec	r18
    4224:	e9 f7       	brne	.-6      	; 0x4220 <__ftoa_engine+0x14c>
    4226:	10 c0       	rjmp	.+32     	; 0x4248 <__ftoa_engine+0x174>
    4228:	7d 93       	st	X+, r23
    422a:	2a 95       	dec	r18
    422c:	89 f6       	brne	.-94     	; 0x41d0 <__ftoa_engine+0xfc>
    422e:	06 94       	lsr	r0
    4230:	97 95       	ror	r25
    4232:	67 95       	ror	r22
    4234:	37 95       	ror	r19
    4236:	17 95       	ror	r17
    4238:	17 94       	ror	r1
    423a:	e1 18       	sub	r14, r1
    423c:	f1 0a       	sbc	r15, r17
    423e:	43 0b       	sbc	r20, r19
    4240:	56 0b       	sbc	r21, r22
    4242:	c9 0b       	sbc	r28, r25
    4244:	d0 09       	sbc	r29, r0
    4246:	98 f0       	brcs	.+38     	; 0x426e <__ftoa_engine+0x19a>
    4248:	23 95       	inc	r18
    424a:	7e 91       	ld	r23, -X
    424c:	73 95       	inc	r23
    424e:	7a 33       	cpi	r23, 0x3A	; 58
    4250:	08 f0       	brcs	.+2      	; 0x4254 <__ftoa_engine+0x180>
    4252:	70 e3       	ldi	r23, 0x30	; 48
    4254:	7c 93       	st	X, r23
    4256:	20 13       	cpse	r18, r16
    4258:	b8 f7       	brcc	.-18     	; 0x4248 <__ftoa_engine+0x174>
    425a:	7e 91       	ld	r23, -X
    425c:	70 61       	ori	r23, 0x10	; 16
    425e:	7d 93       	st	X+, r23
    4260:	30 f0       	brcs	.+12     	; 0x426e <__ftoa_engine+0x19a>
    4262:	83 95       	inc	r24
    4264:	71 e3       	ldi	r23, 0x31	; 49
    4266:	7d 93       	st	X+, r23
    4268:	70 e3       	ldi	r23, 0x30	; 48
    426a:	2a 95       	dec	r18
    426c:	e1 f7       	brne	.-8      	; 0x4266 <__ftoa_engine+0x192>
    426e:	11 24       	eor	r1, r1
    4270:	ef 90       	pop	r14
    4272:	ff 90       	pop	r15
    4274:	0f 91       	pop	r16
    4276:	1f 91       	pop	r17
    4278:	cf 91       	pop	r28
    427a:	df 91       	pop	r29
    427c:	99 27       	eor	r25, r25
    427e:	87 fd       	sbrc	r24, 7
    4280:	90 95       	com	r25
    4282:	08 95       	ret

00004284 <strnlen_P>:
    4284:	fc 01       	movw	r30, r24
    4286:	05 90       	lpm	r0, Z+
    4288:	61 50       	subi	r22, 0x01	; 1
    428a:	70 40       	sbci	r23, 0x00	; 0
    428c:	01 10       	cpse	r0, r1
    428e:	d8 f7       	brcc	.-10     	; 0x4286 <strnlen_P+0x2>
    4290:	80 95       	com	r24
    4292:	90 95       	com	r25
    4294:	8e 0f       	add	r24, r30
    4296:	9f 1f       	adc	r25, r31
    4298:	08 95       	ret

0000429a <memcmp>:
    429a:	fb 01       	movw	r30, r22
    429c:	dc 01       	movw	r26, r24
    429e:	04 c0       	rjmp	.+8      	; 0x42a8 <memcmp+0xe>
    42a0:	8d 91       	ld	r24, X+
    42a2:	01 90       	ld	r0, Z+
    42a4:	80 19       	sub	r24, r0
    42a6:	21 f4       	brne	.+8      	; 0x42b0 <memcmp+0x16>
    42a8:	41 50       	subi	r20, 0x01	; 1
    42aa:	50 40       	sbci	r21, 0x00	; 0
    42ac:	c8 f7       	brcc	.-14     	; 0x42a0 <memcmp+0x6>
    42ae:	88 1b       	sub	r24, r24
    42b0:	99 0b       	sbc	r25, r25
    42b2:	08 95       	ret

000042b4 <strnlen>:
    42b4:	fc 01       	movw	r30, r24
    42b6:	61 50       	subi	r22, 0x01	; 1
    42b8:	70 40       	sbci	r23, 0x00	; 0
    42ba:	01 90       	ld	r0, Z+
    42bc:	01 10       	cpse	r0, r1
    42be:	d8 f7       	brcc	.-10     	; 0x42b6 <strnlen+0x2>
    42c0:	80 95       	com	r24
    42c2:	90 95       	com	r25
    42c4:	8e 0f       	add	r24, r30
    42c6:	9f 1f       	adc	r25, r31
    42c8:	08 95       	ret

000042ca <fputc>:
    42ca:	0f 93       	push	r16
    42cc:	1f 93       	push	r17
    42ce:	cf 93       	push	r28
    42d0:	df 93       	push	r29
    42d2:	fb 01       	movw	r30, r22
    42d4:	23 81       	ldd	r18, Z+3	; 0x03
    42d6:	21 fd       	sbrc	r18, 1
    42d8:	03 c0       	rjmp	.+6      	; 0x42e0 <fputc+0x16>
    42da:	8f ef       	ldi	r24, 0xFF	; 255
    42dc:	9f ef       	ldi	r25, 0xFF	; 255
    42de:	2c c0       	rjmp	.+88     	; 0x4338 <fputc+0x6e>
    42e0:	22 ff       	sbrs	r18, 2
    42e2:	16 c0       	rjmp	.+44     	; 0x4310 <fputc+0x46>
    42e4:	46 81       	ldd	r20, Z+6	; 0x06
    42e6:	57 81       	ldd	r21, Z+7	; 0x07
    42e8:	24 81       	ldd	r18, Z+4	; 0x04
    42ea:	35 81       	ldd	r19, Z+5	; 0x05
    42ec:	42 17       	cp	r20, r18
    42ee:	53 07       	cpc	r21, r19
    42f0:	44 f4       	brge	.+16     	; 0x4302 <fputc+0x38>
    42f2:	a0 81       	ld	r26, Z
    42f4:	b1 81       	ldd	r27, Z+1	; 0x01
    42f6:	9d 01       	movw	r18, r26
    42f8:	2f 5f       	subi	r18, 0xFF	; 255
    42fa:	3f 4f       	sbci	r19, 0xFF	; 255
    42fc:	31 83       	std	Z+1, r19	; 0x01
    42fe:	20 83       	st	Z, r18
    4300:	8c 93       	st	X, r24
    4302:	26 81       	ldd	r18, Z+6	; 0x06
    4304:	37 81       	ldd	r19, Z+7	; 0x07
    4306:	2f 5f       	subi	r18, 0xFF	; 255
    4308:	3f 4f       	sbci	r19, 0xFF	; 255
    430a:	37 83       	std	Z+7, r19	; 0x07
    430c:	26 83       	std	Z+6, r18	; 0x06
    430e:	14 c0       	rjmp	.+40     	; 0x4338 <fputc+0x6e>
    4310:	8b 01       	movw	r16, r22
    4312:	ec 01       	movw	r28, r24
    4314:	fb 01       	movw	r30, r22
    4316:	00 84       	ldd	r0, Z+8	; 0x08
    4318:	f1 85       	ldd	r31, Z+9	; 0x09
    431a:	e0 2d       	mov	r30, r0
    431c:	09 95       	icall
    431e:	89 2b       	or	r24, r25
    4320:	e1 f6       	brne	.-72     	; 0x42da <fputc+0x10>
    4322:	d8 01       	movw	r26, r16
    4324:	16 96       	adiw	r26, 0x06	; 6
    4326:	8d 91       	ld	r24, X+
    4328:	9c 91       	ld	r25, X
    432a:	17 97       	sbiw	r26, 0x07	; 7
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	17 96       	adiw	r26, 0x07	; 7
    4330:	9c 93       	st	X, r25
    4332:	8e 93       	st	-X, r24
    4334:	16 97       	sbiw	r26, 0x06	; 6
    4336:	ce 01       	movw	r24, r28
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <vsprintf>:
    4342:	ae e0       	ldi	r26, 0x0E	; 14
    4344:	b0 e0       	ldi	r27, 0x00	; 0
    4346:	e7 ea       	ldi	r30, 0xA7	; 167
    4348:	f1 e2       	ldi	r31, 0x21	; 33
    434a:	0c 94 2d 20 	jmp	0x405a	; 0x405a <__prologue_saves__+0x1c>
    434e:	8c 01       	movw	r16, r24
    4350:	86 e0       	ldi	r24, 0x06	; 6
    4352:	8c 83       	std	Y+4, r24	; 0x04
    4354:	1a 83       	std	Y+2, r17	; 0x02
    4356:	09 83       	std	Y+1, r16	; 0x01
    4358:	8f ef       	ldi	r24, 0xFF	; 255
    435a:	9f e7       	ldi	r25, 0x7F	; 127
    435c:	9e 83       	std	Y+6, r25	; 0x06
    435e:	8d 83       	std	Y+5, r24	; 0x05
    4360:	ce 01       	movw	r24, r28
    4362:	01 96       	adiw	r24, 0x01	; 1
    4364:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vfprintf>
    4368:	ef 81       	ldd	r30, Y+7	; 0x07
    436a:	f8 85       	ldd	r31, Y+8	; 0x08
    436c:	e0 0f       	add	r30, r16
    436e:	f1 1f       	adc	r31, r17
    4370:	10 82       	st	Z, r1
    4372:	2e 96       	adiw	r28, 0x0e	; 14
    4374:	e4 e0       	ldi	r30, 0x04	; 4
    4376:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__epilogue_restores__+0x1c>

0000437a <__ultoa_invert>:
    437a:	fa 01       	movw	r30, r20
    437c:	aa 27       	eor	r26, r26
    437e:	28 30       	cpi	r18, 0x08	; 8
    4380:	51 f1       	breq	.+84     	; 0x43d6 <__ultoa_invert+0x5c>
    4382:	20 31       	cpi	r18, 0x10	; 16
    4384:	81 f1       	breq	.+96     	; 0x43e6 <__ultoa_invert+0x6c>
    4386:	e8 94       	clt
    4388:	6f 93       	push	r22
    438a:	6e 7f       	andi	r22, 0xFE	; 254
    438c:	6e 5f       	subi	r22, 0xFE	; 254
    438e:	7f 4f       	sbci	r23, 0xFF	; 255
    4390:	8f 4f       	sbci	r24, 0xFF	; 255
    4392:	9f 4f       	sbci	r25, 0xFF	; 255
    4394:	af 4f       	sbci	r26, 0xFF	; 255
    4396:	b1 e0       	ldi	r27, 0x01	; 1
    4398:	3e d0       	rcall	.+124    	; 0x4416 <__ultoa_invert+0x9c>
    439a:	b4 e0       	ldi	r27, 0x04	; 4
    439c:	3c d0       	rcall	.+120    	; 0x4416 <__ultoa_invert+0x9c>
    439e:	67 0f       	add	r22, r23
    43a0:	78 1f       	adc	r23, r24
    43a2:	89 1f       	adc	r24, r25
    43a4:	9a 1f       	adc	r25, r26
    43a6:	a1 1d       	adc	r26, r1
    43a8:	68 0f       	add	r22, r24
    43aa:	79 1f       	adc	r23, r25
    43ac:	8a 1f       	adc	r24, r26
    43ae:	91 1d       	adc	r25, r1
    43b0:	a1 1d       	adc	r26, r1
    43b2:	6a 0f       	add	r22, r26
    43b4:	71 1d       	adc	r23, r1
    43b6:	81 1d       	adc	r24, r1
    43b8:	91 1d       	adc	r25, r1
    43ba:	a1 1d       	adc	r26, r1
    43bc:	20 d0       	rcall	.+64     	; 0x43fe <__ultoa_invert+0x84>
    43be:	09 f4       	brne	.+2      	; 0x43c2 <__ultoa_invert+0x48>
    43c0:	68 94       	set
    43c2:	3f 91       	pop	r19
    43c4:	2a e0       	ldi	r18, 0x0A	; 10
    43c6:	26 9f       	mul	r18, r22
    43c8:	11 24       	eor	r1, r1
    43ca:	30 19       	sub	r19, r0
    43cc:	30 5d       	subi	r19, 0xD0	; 208
    43ce:	31 93       	st	Z+, r19
    43d0:	de f6       	brtc	.-74     	; 0x4388 <__ultoa_invert+0xe>
    43d2:	cf 01       	movw	r24, r30
    43d4:	08 95       	ret
    43d6:	46 2f       	mov	r20, r22
    43d8:	47 70       	andi	r20, 0x07	; 7
    43da:	40 5d       	subi	r20, 0xD0	; 208
    43dc:	41 93       	st	Z+, r20
    43de:	b3 e0       	ldi	r27, 0x03	; 3
    43e0:	0f d0       	rcall	.+30     	; 0x4400 <__ultoa_invert+0x86>
    43e2:	c9 f7       	brne	.-14     	; 0x43d6 <__ultoa_invert+0x5c>
    43e4:	f6 cf       	rjmp	.-20     	; 0x43d2 <__ultoa_invert+0x58>
    43e6:	46 2f       	mov	r20, r22
    43e8:	4f 70       	andi	r20, 0x0F	; 15
    43ea:	40 5d       	subi	r20, 0xD0	; 208
    43ec:	4a 33       	cpi	r20, 0x3A	; 58
    43ee:	18 f0       	brcs	.+6      	; 0x43f6 <__ultoa_invert+0x7c>
    43f0:	49 5d       	subi	r20, 0xD9	; 217
    43f2:	31 fd       	sbrc	r19, 1
    43f4:	40 52       	subi	r20, 0x20	; 32
    43f6:	41 93       	st	Z+, r20
    43f8:	02 d0       	rcall	.+4      	; 0x43fe <__ultoa_invert+0x84>
    43fa:	a9 f7       	brne	.-22     	; 0x43e6 <__ultoa_invert+0x6c>
    43fc:	ea cf       	rjmp	.-44     	; 0x43d2 <__ultoa_invert+0x58>
    43fe:	b4 e0       	ldi	r27, 0x04	; 4
    4400:	a6 95       	lsr	r26
    4402:	97 95       	ror	r25
    4404:	87 95       	ror	r24
    4406:	77 95       	ror	r23
    4408:	67 95       	ror	r22
    440a:	ba 95       	dec	r27
    440c:	c9 f7       	brne	.-14     	; 0x4400 <__ultoa_invert+0x86>
    440e:	00 97       	sbiw	r24, 0x00	; 0
    4410:	61 05       	cpc	r22, r1
    4412:	71 05       	cpc	r23, r1
    4414:	08 95       	ret
    4416:	9b 01       	movw	r18, r22
    4418:	ac 01       	movw	r20, r24
    441a:	0a 2e       	mov	r0, r26
    441c:	06 94       	lsr	r0
    441e:	57 95       	ror	r21
    4420:	47 95       	ror	r20
    4422:	37 95       	ror	r19
    4424:	27 95       	ror	r18
    4426:	ba 95       	dec	r27
    4428:	c9 f7       	brne	.-14     	; 0x441c <__ultoa_invert+0xa2>
    442a:	62 0f       	add	r22, r18
    442c:	73 1f       	adc	r23, r19
    442e:	84 1f       	adc	r24, r20
    4430:	95 1f       	adc	r25, r21
    4432:	a0 1d       	adc	r26, r0
    4434:	08 95       	ret

00004436 <_exit>:
    4436:	f8 94       	cli

00004438 <__stop_program>:
    4438:	ff cf       	rjmp	.-2      	; 0x4438 <__stop_program>
