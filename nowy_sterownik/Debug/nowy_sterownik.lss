
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000216  00800060  000043fe  00004492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029d  00800276  00800276  000046a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fb3  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002079  00000000  00000000  0000ad13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c58  00000000  00000000  0000cd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e94  00000000  00000000  000109e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c20  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca8  00000000  00000000  00013498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  00016140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__vector_13>
      38:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	a2 08       	sbc	r10, r2
      56:	a9 08       	sbc	r10, r9
      58:	ac 08       	sbc	r10, r12
      5a:	b2 08       	sbc	r11, r2
      5c:	b8 08       	sbc	r11, r8
      5e:	bd 08       	sbc	r11, r13
      60:	c3 08       	sbc	r12, r3
      62:	ca 08       	sbc	r12, r10
      64:	ce 08       	sbc	r12, r14
      66:	d6 08       	sbc	r13, r6
      68:	25 09       	sbc	r18, r5
      6a:	25 09       	sbc	r18, r5
      6c:	25 09       	sbc	r18, r5
      6e:	25 09       	sbc	r18, r5
      70:	25 09       	sbc	r18, r5
      72:	25 09       	sbc	r18, r5
      74:	25 09       	sbc	r18, r5
      76:	25 09       	sbc	r18, r5
      78:	25 09       	sbc	r18, r5
      7a:	25 09       	sbc	r18, r5
      7c:	25 09       	sbc	r18, r5
      7e:	25 09       	sbc	r18, r5
      80:	25 09       	sbc	r18, r5
      82:	25 09       	sbc	r18, r5
      84:	25 09       	sbc	r18, r5
      86:	25 09       	sbc	r18, r5
      88:	25 09       	sbc	r18, r5
      8a:	25 09       	sbc	r18, r5
      8c:	25 09       	sbc	r18, r5
      8e:	25 09       	sbc	r18, r5
      90:	25 09       	sbc	r18, r5
      92:	25 09       	sbc	r18, r5
      94:	25 09       	sbc	r18, r5
      96:	25 09       	sbc	r18, r5
      98:	25 09       	sbc	r18, r5
      9a:	25 09       	sbc	r18, r5
      9c:	25 09       	sbc	r18, r5
      9e:	25 09       	sbc	r18, r5
      a0:	25 09       	sbc	r18, r5
      a2:	25 09       	sbc	r18, r5
      a4:	25 09       	sbc	r18, r5
      a6:	25 09       	sbc	r18, r5
      a8:	25 09       	sbc	r18, r5
      aa:	25 09       	sbc	r18, r5
      ac:	25 09       	sbc	r18, r5
      ae:	25 09       	sbc	r18, r5
      b0:	25 09       	sbc	r18, r5
      b2:	25 09       	sbc	r18, r5
      b4:	25 09       	sbc	r18, r5
      b6:	25 09       	sbc	r18, r5
      b8:	25 09       	sbc	r18, r5
      ba:	25 09       	sbc	r18, r5
      bc:	25 09       	sbc	r18, r5
      be:	25 09       	sbc	r18, r5
      c0:	25 09       	sbc	r18, r5
      c2:	25 09       	sbc	r18, r5
      c4:	25 09       	sbc	r18, r5
      c6:	25 09       	sbc	r18, r5
      c8:	25 09       	sbc	r18, r5
      ca:	25 09       	sbc	r18, r5
      cc:	25 09       	sbc	r18, r5
      ce:	25 09       	sbc	r18, r5
      d0:	25 09       	sbc	r18, r5
      d2:	25 09       	sbc	r18, r5
      d4:	25 09       	sbc	r18, r5
      d6:	25 09       	sbc	r18, r5
      d8:	25 09       	sbc	r18, r5
      da:	25 09       	sbc	r18, r5
      dc:	25 09       	sbc	r18, r5
      de:	25 09       	sbc	r18, r5
      e0:	25 09       	sbc	r18, r5
      e2:	25 09       	sbc	r18, r5
      e4:	25 09       	sbc	r18, r5
      e6:	25 09       	sbc	r18, r5
      e8:	25 09       	sbc	r18, r5
      ea:	25 09       	sbc	r18, r5
      ec:	25 09       	sbc	r18, r5
      ee:	25 09       	sbc	r18, r5
      f0:	25 09       	sbc	r18, r5
      f2:	25 09       	sbc	r18, r5
      f4:	25 09       	sbc	r18, r5
      f6:	25 09       	sbc	r18, r5
      f8:	25 09       	sbc	r18, r5
      fa:	25 09       	sbc	r18, r5
      fc:	25 09       	sbc	r18, r5
      fe:	25 09       	sbc	r18, r5
     100:	25 09       	sbc	r18, r5
     102:	25 09       	sbc	r18, r5
     104:	25 09       	sbc	r18, r5
     106:	25 09       	sbc	r18, r5
     108:	25 09       	sbc	r18, r5
     10a:	25 09       	sbc	r18, r5
     10c:	25 09       	sbc	r18, r5
     10e:	25 09       	sbc	r18, r5
     110:	25 09       	sbc	r18, r5
     112:	25 09       	sbc	r18, r5
     114:	25 09       	sbc	r18, r5
     116:	dd 08       	sbc	r13, r13
     118:	e4 08       	sbc	r14, r4
     11a:	ea 08       	sbc	r14, r10
     11c:	ef 08       	sbc	r14, r15
     11e:	f5 08       	sbc	r15, r5
     120:	fb 08       	sbc	r15, r11
     122:	25 09       	sbc	r18, r5
     124:	25 09       	sbc	r18, r5
     126:	25 09       	sbc	r18, r5
     128:	25 09       	sbc	r18, r5
     12a:	25 09       	sbc	r18, r5
     12c:	14 09       	sbc	r17, r4
     12e:	25 09       	sbc	r18, r5
     130:	25 09       	sbc	r18, r5
     132:	03 09       	sbc	r16, r3
     134:	08 09       	sbc	r16, r8
     136:	25 09       	sbc	r18, r5
     138:	00 09       	sbc	r16, r0
     13a:	0e 09       	sbc	r16, r14
     13c:	25 09       	sbc	r18, r5
     13e:	25 09       	sbc	r18, r5
     140:	25 09       	sbc	r18, r5
     142:	25 09       	sbc	r18, r5
     144:	25 09       	sbc	r18, r5
     146:	25 09       	sbc	r18, r5
     148:	25 09       	sbc	r18, r5
     14a:	25 09       	sbc	r18, r5
     14c:	25 09       	sbc	r18, r5
     14e:	25 09       	sbc	r18, r5
     150:	25 09       	sbc	r18, r5
     152:	25 09       	sbc	r18, r5
     154:	25 09       	sbc	r18, r5
     156:	25 09       	sbc	r18, r5
     158:	25 09       	sbc	r18, r5
     15a:	25 09       	sbc	r18, r5
     15c:	25 09       	sbc	r18, r5
     15e:	25 09       	sbc	r18, r5
     160:	25 09       	sbc	r18, r5
     162:	25 09       	sbc	r18, r5
     164:	25 09       	sbc	r18, r5
     166:	25 09       	sbc	r18, r5
     168:	25 09       	sbc	r18, r5
     16a:	25 09       	sbc	r18, r5
     16c:	25 09       	sbc	r18, r5
     16e:	25 09       	sbc	r18, r5
     170:	25 09       	sbc	r18, r5
     172:	25 09       	sbc	r18, r5
     174:	25 09       	sbc	r18, r5
     176:	25 09       	sbc	r18, r5
     178:	25 09       	sbc	r18, r5
     17a:	25 09       	sbc	r18, r5
     17c:	25 09       	sbc	r18, r5
     17e:	25 09       	sbc	r18, r5
     180:	25 09       	sbc	r18, r5
     182:	25 09       	sbc	r18, r5
     184:	25 09       	sbc	r18, r5
     186:	25 09       	sbc	r18, r5
     188:	25 09       	sbc	r18, r5
     18a:	25 09       	sbc	r18, r5
     18c:	25 09       	sbc	r18, r5
     18e:	25 09       	sbc	r18, r5
     190:	25 09       	sbc	r18, r5
     192:	25 09       	sbc	r18, r5
     194:	25 09       	sbc	r18, r5
     196:	25 09       	sbc	r18, r5
     198:	25 09       	sbc	r18, r5
     19a:	25 09       	sbc	r18, r5
     19c:	25 09       	sbc	r18, r5
     19e:	25 09       	sbc	r18, r5
     1a0:	25 09       	sbc	r18, r5
     1a2:	25 09       	sbc	r18, r5
     1a4:	25 09       	sbc	r18, r5
     1a6:	25 09       	sbc	r18, r5
     1a8:	25 09       	sbc	r18, r5
     1aa:	25 09       	sbc	r18, r5
     1ac:	25 09       	sbc	r18, r5
     1ae:	25 09       	sbc	r18, r5
     1b0:	25 09       	sbc	r18, r5
     1b2:	25 09       	sbc	r18, r5
     1b4:	25 09       	sbc	r18, r5
     1b6:	25 09       	sbc	r18, r5
     1b8:	25 09       	sbc	r18, r5
     1ba:	25 09       	sbc	r18, r5
     1bc:	25 09       	sbc	r18, r5
     1be:	25 09       	sbc	r18, r5
     1c0:	25 09       	sbc	r18, r5
     1c2:	25 09       	sbc	r18, r5
     1c4:	25 09       	sbc	r18, r5
     1c6:	25 09       	sbc	r18, r5
     1c8:	25 09       	sbc	r18, r5
     1ca:	25 09       	sbc	r18, r5
     1cc:	25 09       	sbc	r18, r5
     1ce:	25 09       	sbc	r18, r5
     1d0:	25 09       	sbc	r18, r5
     1d2:	25 09       	sbc	r18, r5
     1d4:	25 09       	sbc	r18, r5
     1d6:	25 09       	sbc	r18, r5
     1d8:	25 09       	sbc	r18, r5
     1da:	25 09       	sbc	r18, r5
     1dc:	25 09       	sbc	r18, r5
     1de:	25 09       	sbc	r18, r5
     1e0:	25 09       	sbc	r18, r5
     1e2:	25 09       	sbc	r18, r5
     1e4:	25 09       	sbc	r18, r5
     1e6:	25 09       	sbc	r18, r5
     1e8:	25 09       	sbc	r18, r5
     1ea:	25 09       	sbc	r18, r5
     1ec:	25 09       	sbc	r18, r5
     1ee:	25 09       	sbc	r18, r5
     1f0:	25 09       	sbc	r18, r5
     1f2:	25 09       	sbc	r18, r5
     1f4:	25 09       	sbc	r18, r5
     1f6:	25 09       	sbc	r18, r5
     1f8:	25 09       	sbc	r18, r5
     1fa:	25 09       	sbc	r18, r5
     1fc:	25 09       	sbc	r18, r5
     1fe:	25 09       	sbc	r18, r5
     200:	25 09       	sbc	r18, r5
     202:	25 09       	sbc	r18, r5
     204:	25 09       	sbc	r18, r5
     206:	25 09       	sbc	r18, r5
     208:	25 09       	sbc	r18, r5
     20a:	25 09       	sbc	r18, r5
     20c:	25 09       	sbc	r18, r5
     20e:	25 09       	sbc	r18, r5
     210:	25 09       	sbc	r18, r5
     212:	25 09       	sbc	r18, r5
     214:	25 09       	sbc	r18, r5
     216:	25 09       	sbc	r18, r5
     218:	25 09       	sbc	r18, r5
     21a:	25 09       	sbc	r18, r5
     21c:	25 09       	sbc	r18, r5
     21e:	25 09       	sbc	r18, r5
     220:	25 09       	sbc	r18, r5
     222:	25 09       	sbc	r18, r5
     224:	25 09       	sbc	r18, r5
     226:	25 09       	sbc	r18, r5
     228:	25 09       	sbc	r18, r5
     22a:	25 09       	sbc	r18, r5
     22c:	25 09       	sbc	r18, r5
     22e:	25 09       	sbc	r18, r5
     230:	25 09       	sbc	r18, r5
     232:	25 09       	sbc	r18, r5
     234:	25 09       	sbc	r18, r5
     236:	25 09       	sbc	r18, r5
     238:	25 09       	sbc	r18, r5
     23a:	25 09       	sbc	r18, r5
     23c:	25 09       	sbc	r18, r5
     23e:	25 09       	sbc	r18, r5
     240:	25 09       	sbc	r18, r5
     242:	25 09       	sbc	r18, r5
     244:	18 09       	sbc	r17, r8
     246:	24 09       	sbc	r18, r4
     248:	22 09       	sbc	r18, r2
     24a:	20 09       	sbc	r18, r0
     24c:	1e 09       	sbc	r17, r14
     24e:	1c 09       	sbc	r17, r12
     250:	1a 09       	sbc	r17, r10
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_7_menu+0x12>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ee ef       	ldi	r30, 0xFE	; 254
     3ea:	f3 e4       	ldi	r31, 0x43	; 67
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a6 37       	cpi	r26, 0x76	; 118
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	25 e0       	ldi	r18, 0x05	; 5
     3fa:	a6 e7       	ldi	r26, 0x76	; 118
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a3 31       	cpi	r26, 0x13	; 19
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	80 ef       	ldi	r24, 0xF0	; 240
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 83 21 	call	0x4306	; 0x4306 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	80 ef       	ldi	r24, 0xF0	; 240
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	0e 94 8e 18 	call	0x311c	; 0x311c <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <timer0_init>
	init_display_drv();
     45a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <init_display_drv>
	init_buttons();
     45e:	0e 94 cf 04 	call	0x99e	; 0x99e <init_buttons>
	init_system();
     462:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <init_system>
	init_measure();
     466:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 c4 11 	call	0x2388	; 0x2388 <servo_init>
	#endif
	init_pin();
     478:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     47c:	78 94       	sei
	init_driver();
     47e:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     482:	81 e8       	ldi	r24, 0x81	; 129
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     48e:	0e 94 e5 06 	call	0xdca	; 0xdca <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     492:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <measure_get_servo_calibration>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     49a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <disp_process>
		animation();
     49e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <animation>
		process_button();
     4a2:	0e 94 25 04 	call	0x84a	; 0x84a <process_button>
		disp_fast_process();
     4a6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <disp_fast_process>
		disp_very_fast_process();
     4aa:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <disp_very_fast_process>
		dcmotor_process(motor_value);
     4ae:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <motor_value>
     4b2:	0e 94 dd 07 	call	0xfba	; 0xfba <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
     4ba:	0e 94 a9 12 	call	0x2552	; 0x2552 <servo_process>
		menu_process();
     4be:	0e 94 63 06 	call	0xcc6	; 0xcc6 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4c2:	0e 94 a8 0c 	call	0x1950	; 0x1950 <error_event>
		error_led_blink();
     4c6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <error_led_blink>
		measure_process();
     4ca:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <measure_process>
		accumulator_process();
     4ce:	0e 94 8a 02 	call	0x514	; 0x514 <accumulator_process>
		accum_led_process();
     4d2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <accum_led_process>
		buzzer_process();
     4d6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <buzzer_process>
     4da:	df cf       	rjmp	.-66     	; 0x49a <main+0x28>

000004dc <accum_get_voltage>:
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 a8 10 	call	0x2150	; 0x2150 <measure_get_filtered_value>
     4e2:	bc 01       	movw	r22, r24
     4e4:	66 0f       	add	r22, r22
     4e6:	77 1f       	adc	r23, r23
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	86 0f       	add	r24, r22
     4ee:	97 1f       	adc	r25, r23
     4f0:	bc 01       	movw	r22, r24
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatunsisf>
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 eb       	ldi	r20, 0xB6	; 182
     500:	50 e4       	ldi	r21, 0x40	; 64
     502:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	5a e3       	ldi	r21, 0x3A	; 58
     50e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
     512:	08 95       	ret

00000514 <accumulator_process>:
     514:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
     518:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
     51c:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
     520:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
     524:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <accumulator_timer.1914>
     528:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <accumulator_timer.1914+0x1>
     52c:	a0 91 7d 02 	lds	r26, 0x027D	; 0x80027d <accumulator_timer.1914+0x2>
     530:	b0 91 7e 02 	lds	r27, 0x027E	; 0x80027e <accumulator_timer.1914+0x3>
     534:	84 17       	cp	r24, r20
     536:	95 07       	cpc	r25, r21
     538:	a6 07       	cpc	r26, r22
     53a:	b7 07       	cpc	r27, r23
     53c:	98 f5       	brcc	.+102    	; 0x5a4 <accumulator_process+0x90>
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 a8 10 	call	0x2150	; 0x2150 <measure_get_filtered_value>
     544:	89 35       	cpi	r24, 0x59	; 89
     546:	22 e0       	ldi	r18, 0x02	; 2
     548:	92 07       	cpc	r25, r18
     54a:	18 f0       	brcs	.+6      	; 0x552 <accumulator_process+0x3e>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <accumulator_state>
     552:	8b 38       	cpi	r24, 0x8B	; 139
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	92 07       	cpc	r25, r18
     558:	18 f4       	brcc	.+6      	; 0x560 <accumulator_process+0x4c>
     55a:	22 e0       	ldi	r18, 0x02	; 2
     55c:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <accumulator_state>
     560:	8e 35       	cpi	r24, 0x5E	; 94
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	92 07       	cpc	r25, r18
     566:	18 f4       	brcc	.+6      	; 0x56e <accumulator_process+0x5a>
     568:	23 e0       	ldi	r18, 0x03	; 3
     56a:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <accumulator_state>
     56e:	8c 58       	subi	r24, 0x8C	; 140
     570:	91 40       	sbci	r25, 0x01	; 1
     572:	8c 3c       	cpi	r24, 0xCC	; 204
     574:	91 05       	cpc	r25, r1
     576:	10 f4       	brcc	.+4      	; 0x57c <accumulator_process+0x68>
     578:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <accumulator_state>
     57c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
     580:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
     584:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
     588:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
     58c:	8c 59       	subi	r24, 0x9C	; 156
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	af 4f       	sbci	r26, 0xFF	; 255
     592:	bf 4f       	sbci	r27, 0xFF	; 255
     594:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <accumulator_timer.1914>
     598:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <accumulator_timer.1914+0x1>
     59c:	a0 93 7d 02 	sts	0x027D, r26	; 0x80027d <accumulator_timer.1914+0x2>
     5a0:	b0 93 7e 02 	sts	0x027E, r27	; 0x80027e <accumulator_timer.1914+0x3>
     5a4:	08 95       	ret

000005a6 <accum_led_process>:
     5a6:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
     5aa:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
     5ae:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
     5b2:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
     5b6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     5ba:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     5be:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     5c2:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     5c6:	84 17       	cp	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	a6 07       	cpc	r26, r22
     5cc:	b7 07       	cpc	r27, r23
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <accum_led_process+0x2c>
     5d0:	86 c0       	rjmp	.+268    	; 0x6de <accum_led_process+0x138>
     5d2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <accumulator_state>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	e9 f0       	breq	.+58     	; 0x614 <accum_led_process+0x6e>
     5da:	30 f0       	brcs	.+12     	; 0x5e8 <accum_led_process+0x42>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	99 f1       	breq	.+102    	; 0x646 <accum_led_process+0xa0>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <accum_led_process+0x40>
     5e4:	67 c0       	rjmp	.+206    	; 0x6b4 <accum_led_process+0x10e>
     5e6:	08 95       	ret
     5e8:	c5 98       	cbi	0x18, 5	; 24
     5ea:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     5ee:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     5f2:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     5f6:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     5fa:	88 53       	subi	r24, 0x38	; 56
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	af 4f       	sbci	r26, 0xFF	; 255
     600:	bf 4f       	sbci	r27, 0xFF	; 255
     602:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <process_timer.1918>
     606:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <process_timer.1918+0x1>
     60a:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <process_timer.1918+0x2>
     60e:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <process_timer.1918+0x3>
     612:	08 95       	ret
     614:	98 b3       	in	r25, 0x18	; 24
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	89 27       	eor	r24, r25
     61a:	88 bb       	out	0x18, r24	; 24
     61c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     620:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     624:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     628:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     62c:	86 50       	subi	r24, 0x06	; 6
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	af 4f       	sbci	r26, 0xFF	; 255
     632:	bf 4f       	sbci	r27, 0xFF	; 255
     634:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <process_timer.1918>
     638:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <process_timer.1918+0x1>
     63c:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <process_timer.1918+0x2>
     640:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <process_timer.1918+0x3>
     644:	08 95       	ret
     646:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     64a:	81 11       	cpse	r24, r1
     64c:	19 c0       	rjmp	.+50     	; 0x680 <accum_led_process+0xda>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
     654:	c5 9a       	sbi	0x18, 5	; 24
     656:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     65a:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     65e:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     662:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     666:	8c 50       	subi	r24, 0x0C	; 12
     668:	9e 4f       	sbci	r25, 0xFE	; 254
     66a:	af 4f       	sbci	r26, 0xFF	; 255
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <process_timer.1918>
     672:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <process_timer.1918+0x1>
     676:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <process_timer.1918+0x2>
     67a:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <process_timer.1918+0x3>
     67e:	08 95       	ret
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	69 f5       	brne	.+90     	; 0x6de <accum_led_process+0x138>
     684:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
     688:	c5 98       	cbi	0x18, 5	; 24
     68a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     68e:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     692:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     696:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     69a:	84 52       	subi	r24, 0x24	; 36
     69c:	9a 4f       	sbci	r25, 0xFA	; 250
     69e:	af 4f       	sbci	r26, 0xFF	; 255
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <process_timer.1918>
     6a6:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <process_timer.1918+0x1>
     6aa:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <process_timer.1918+0x2>
     6ae:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <process_timer.1918+0x3>
     6b2:	08 95       	ret
     6b4:	c5 9a       	sbi	0x18, 5	; 24
     6b6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <process_timer.1918>
     6ba:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <process_timer.1918+0x1>
     6be:	a0 91 79 02 	lds	r26, 0x0279	; 0x800279 <process_timer.1918+0x2>
     6c2:	b0 91 7a 02 	lds	r27, 0x027A	; 0x80027a <process_timer.1918+0x3>
     6c6:	88 51       	subi	r24, 0x18	; 24
     6c8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ca:	af 4f       	sbci	r26, 0xFF	; 255
     6cc:	bf 4f       	sbci	r27, 0xFF	; 255
     6ce:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <process_timer.1918>
     6d2:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <process_timer.1918+0x1>
     6d6:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <process_timer.1918+0x2>
     6da:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <process_timer.1918+0x3>
     6de:	08 95       	ret

000006e0 <adc_setchannel>:
     6e0:	37 98       	cbi	0x06, 7	; 6
     6e2:	97 b1       	in	r25, 0x07	; 7
     6e4:	98 7f       	andi	r25, 0xF8	; 248
     6e6:	87 70       	andi	r24, 0x07	; 7
     6e8:	89 2b       	or	r24, r25
     6ea:	87 b9       	out	0x07, r24	; 7
     6ec:	37 9a       	sbi	0x06, 7	; 6
     6ee:	08 95       	ret

000006f0 <adc_readsel>:
     6f0:	36 9a       	sbi	0x06, 6	; 6
     6f2:	36 99       	sbic	0x06, 6	; 6
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <adc_readsel+0x2>
     6f6:	84 b1       	in	r24, 0x04	; 4
     6f8:	95 b1       	in	r25, 0x05	; 5
     6fa:	08 95       	ret

000006fc <adc_read>:
     6fc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_setchannel>
     700:	0e 94 78 03 	call	0x6f0	; 0x6f0 <adc_readsel>
     704:	08 95       	ret

00000706 <read_button>:
     706:	dc 01       	movw	r26, r24
     708:	16 96       	adiw	r26, 0x06	; 6
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	17 97       	sbiw	r26, 0x07	; 7
     710:	20 81       	ld	r18, Z
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	18 96       	adiw	r26, 0x08	; 8
     718:	0c 90       	ld	r0, X
     71a:	02 c0       	rjmp	.+4      	; 0x720 <read_button+0x1a>
     71c:	f5 95       	asr	r31
     71e:	e7 95       	ror	r30
     720:	0a 94       	dec	r0
     722:	e2 f7       	brpl	.-8      	; 0x71c <read_button+0x16>
     724:	cf 01       	movw	r24, r30
     726:	81 70       	andi	r24, 0x01	; 1
     728:	08 95       	ret

0000072a <init_but_struct>:
     72a:	ed e9       	ldi	r30, 0x9D	; 157
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	14 82       	std	Z+4, r1	; 0x04
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	85 83       	std	Z+5, r24	; 0x05
     734:	14 86       	std	Z+12, r1	; 0x0c
     736:	13 86       	std	Z+11, r1	; 0x0b
     738:	12 86       	std	Z+10, r1	; 0x0a
     73a:	11 86       	std	Z+9, r1	; 0x09
     73c:	16 86       	std	Z+14, r1	; 0x0e
     73e:	15 86       	std	Z+13, r1	; 0x0d
     740:	26 e3       	ldi	r18, 0x36	; 54
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	37 83       	std	Z+7, r19	; 0x07
     746:	26 83       	std	Z+6, r18	; 0x06
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	90 87       	std	Z+8, r25	; 0x08
     74c:	e0 e7       	ldi	r30, 0x70	; 112
     74e:	f4 e0       	ldi	r31, 0x04	; 4
     750:	14 82       	std	Z+4, r1	; 0x04
     752:	85 83       	std	Z+5, r24	; 0x05
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	13 86       	std	Z+11, r1	; 0x0b
     758:	12 86       	std	Z+10, r1	; 0x0a
     75a:	11 86       	std	Z+9, r1	; 0x09
     75c:	16 86       	std	Z+14, r1	; 0x0e
     75e:	15 86       	std	Z+13, r1	; 0x0d
     760:	37 83       	std	Z+7, r19	; 0x07
     762:	26 83       	std	Z+6, r18	; 0x06
     764:	80 87       	std	Z+8, r24	; 0x08
     766:	ef e7       	ldi	r30, 0x7F	; 127
     768:	f4 e0       	ldi	r31, 0x04	; 4
     76a:	14 82       	std	Z+4, r1	; 0x04
     76c:	85 83       	std	Z+5, r24	; 0x05
     76e:	14 86       	std	Z+12, r1	; 0x0c
     770:	13 86       	std	Z+11, r1	; 0x0b
     772:	12 86       	std	Z+10, r1	; 0x0a
     774:	11 86       	std	Z+9, r1	; 0x09
     776:	16 86       	std	Z+14, r1	; 0x0e
     778:	15 86       	std	Z+13, r1	; 0x0d
     77a:	37 83       	std	Z+7, r19	; 0x07
     77c:	26 83       	std	Z+6, r18	; 0x06
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	90 87       	std	Z+8, r25	; 0x08
     782:	ed e5       	ldi	r30, 0x5D	; 93
     784:	f4 e0       	ldi	r31, 0x04	; 4
     786:	14 82       	std	Z+4, r1	; 0x04
     788:	85 83       	std	Z+5, r24	; 0x05
     78a:	14 86       	std	Z+12, r1	; 0x0c
     78c:	13 86       	std	Z+11, r1	; 0x0b
     78e:	12 86       	std	Z+10, r1	; 0x0a
     790:	11 86       	std	Z+9, r1	; 0x09
     792:	16 86       	std	Z+14, r1	; 0x0e
     794:	15 86       	std	Z+13, r1	; 0x0d
     796:	40 e3       	ldi	r20, 0x30	; 48
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	57 83       	std	Z+7, r21	; 0x07
     79c:	46 83       	std	Z+6, r20	; 0x06
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	90 87       	std	Z+8, r25	; 0x08
     7a2:	ee e4       	ldi	r30, 0x4E	; 78
     7a4:	f4 e0       	ldi	r31, 0x04	; 4
     7a6:	14 82       	std	Z+4, r1	; 0x04
     7a8:	85 83       	std	Z+5, r24	; 0x05
     7aa:	14 86       	std	Z+12, r1	; 0x0c
     7ac:	13 86       	std	Z+11, r1	; 0x0b
     7ae:	12 86       	std	Z+10, r1	; 0x0a
     7b0:	11 86       	std	Z+9, r1	; 0x09
     7b2:	16 86       	std	Z+14, r1	; 0x0e
     7b4:	15 86       	std	Z+13, r1	; 0x0d
     7b6:	37 83       	std	Z+7, r19	; 0x07
     7b8:	26 83       	std	Z+6, r18	; 0x06
     7ba:	90 87       	std	Z+8, r25	; 0x08
     7bc:	ee e8       	ldi	r30, 0x8E	; 142
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	14 82       	std	Z+4, r1	; 0x04
     7c2:	85 83       	std	Z+5, r24	; 0x05
     7c4:	14 86       	std	Z+12, r1	; 0x0c
     7c6:	13 86       	std	Z+11, r1	; 0x0b
     7c8:	12 86       	std	Z+10, r1	; 0x0a
     7ca:	11 86       	std	Z+9, r1	; 0x09
     7cc:	16 86       	std	Z+14, r1	; 0x0e
     7ce:	15 86       	std	Z+13, r1	; 0x0d
     7d0:	69 e3       	ldi	r22, 0x39	; 57
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	77 83       	std	Z+7, r23	; 0x07
     7d6:	66 83       	std	Z+6, r22	; 0x06
     7d8:	a4 e0       	ldi	r26, 0x04	; 4
     7da:	a0 87       	std	Z+8, r26	; 0x08
     7dc:	ec ea       	ldi	r30, 0xAC	; 172
     7de:	f4 e0       	ldi	r31, 0x04	; 4
     7e0:	14 82       	std	Z+4, r1	; 0x04
     7e2:	85 83       	std	Z+5, r24	; 0x05
     7e4:	14 86       	std	Z+12, r1	; 0x0c
     7e6:	13 86       	std	Z+11, r1	; 0x0b
     7e8:	12 86       	std	Z+10, r1	; 0x0a
     7ea:	11 86       	std	Z+9, r1	; 0x09
     7ec:	16 86       	std	Z+14, r1	; 0x0e
     7ee:	15 86       	std	Z+13, r1	; 0x0d
     7f0:	43 e3       	ldi	r20, 0x33	; 51
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	57 83       	std	Z+7, r21	; 0x07
     7f6:	46 83       	std	Z+6, r20	; 0x06
     7f8:	80 87       	std	Z+8, r24	; 0x08
     7fa:	eb eb       	ldi	r30, 0xBB	; 187
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	14 82       	std	Z+4, r1	; 0x04
     800:	85 83       	std	Z+5, r24	; 0x05
     802:	14 86       	std	Z+12, r1	; 0x0c
     804:	13 86       	std	Z+11, r1	; 0x0b
     806:	12 86       	std	Z+10, r1	; 0x0a
     808:	11 86       	std	Z+9, r1	; 0x09
     80a:	16 86       	std	Z+14, r1	; 0x0e
     80c:	15 86       	std	Z+13, r1	; 0x0d
     80e:	37 83       	std	Z+7, r19	; 0x07
     810:	26 83       	std	Z+6, r18	; 0x06
     812:	a0 87       	std	Z+8, r26	; 0x08
     814:	e0 e3       	ldi	r30, 0x30	; 48
     816:	f4 e0       	ldi	r31, 0x04	; 4
     818:	14 82       	std	Z+4, r1	; 0x04
     81a:	85 83       	std	Z+5, r24	; 0x05
     81c:	14 86       	std	Z+12, r1	; 0x0c
     81e:	13 86       	std	Z+11, r1	; 0x0b
     820:	12 86       	std	Z+10, r1	; 0x0a
     822:	11 86       	std	Z+9, r1	; 0x09
     824:	16 86       	std	Z+14, r1	; 0x0e
     826:	15 86       	std	Z+13, r1	; 0x0d
     828:	77 83       	std	Z+7, r23	; 0x07
     82a:	66 83       	std	Z+6, r22	; 0x06
     82c:	90 87       	std	Z+8, r25	; 0x08
     82e:	ef e3       	ldi	r30, 0x3F	; 63
     830:	f4 e0       	ldi	r31, 0x04	; 4
     832:	14 82       	std	Z+4, r1	; 0x04
     834:	85 83       	std	Z+5, r24	; 0x05
     836:	14 86       	std	Z+12, r1	; 0x0c
     838:	13 86       	std	Z+11, r1	; 0x0b
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	11 86       	std	Z+9, r1	; 0x09
     83e:	16 86       	std	Z+14, r1	; 0x0e
     840:	15 86       	std	Z+13, r1	; 0x0d
     842:	57 83       	std	Z+7, r21	; 0x07
     844:	46 83       	std	Z+6, r20	; 0x06
     846:	10 86       	std	Z+8, r1	; 0x08
     848:	08 95       	ret

0000084a <process_button>:
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
     85c:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
     860:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
     864:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
     868:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <timer_button>
     86c:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <timer_button+0x1>
     870:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <timer_button+0x2>
     874:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <timer_button+0x3>
     878:	84 17       	cp	r24, r20
     87a:	95 07       	cpc	r25, r21
     87c:	a6 07       	cpc	r26, r22
     87e:	b7 07       	cpc	r27, r23
     880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
     882:	85 c0       	rjmp	.+266    	; 0x98e <__stack+0x12f>
     884:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
     888:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
     88c:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
     890:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
     894:	44 96       	adiw	r24, 0x14	; 20
     896:	a1 1d       	adc	r26, r1
     898:	b1 1d       	adc	r27, r1
     89a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <timer_button>
     89e:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <timer_button+0x1>
     8a2:	a0 93 6e 04 	sts	0x046E, r26	; 0x80046e <timer_button+0x2>
     8a6:	b0 93 6f 04 	sts	0x046F, r27	; 0x80046f <timer_button+0x3>
     8aa:	c0 e6       	ldi	r28, 0x60	; 96
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f4 e7       	ldi	r31, 0x74	; 116
     8b2:	ef 2e       	mov	r14, r31
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ff 2e       	mov	r15, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	dd 24       	eor	r13, r13
     8bc:	d3 94       	inc	r13
     8be:	8e 01       	movw	r16, r28
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	0e 94 83 03 	call	0x706	; 0x706 <read_button>
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	95 81       	ldd	r25, Z+5	; 0x05
     8ce:	89 17       	cp	r24, r25
     8d0:	e1 f0       	breq	.+56     	; 0x90a <__stack+0xab>
     8d2:	85 83       	std	Z+5, r24	; 0x05
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <__stack+0x91>
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	dc 01       	movw	r26, r24
     8de:	19 96       	adiw	r26, 0x09	; 9
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	1a 97       	sbiw	r26, 0x0a	; 10
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x10f>
     8ec:	09 95       	icall
     8ee:	3f c0       	rjmp	.+126    	; 0x96e <__stack+0x10f>
     8f0:	81 11       	cpse	r24, r1
     8f2:	3d c0       	rjmp	.+122    	; 0x96e <__stack+0x10f>
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	dc 01       	movw	r26, r24
     8fa:	1b 96       	adiw	r26, 0x0b	; 11
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	1c 97       	sbiw	r26, 0x0c	; 12
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xaf>
     906:	09 95       	icall
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
     90a:	81 11       	cpse	r24, r1
     90c:	30 c0       	rjmp	.+96     	; 0x96e <__stack+0x10f>
     90e:	d8 01       	movw	r26, r16
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	a2 81       	ldd	r26, Z+2	; 0x02
     91a:	b3 81       	ldd	r27, Z+3	; 0x03
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	a1 1d       	adc	r26, r1
     920:	b1 1d       	adc	r27, r1
     922:	80 83       	st	Z, r24
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	a2 83       	std	Z+2, r26	; 0x02
     928:	b3 83       	std	Z+3, r27	; 0x03
     92a:	d8 01       	movw	r26, r16
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	a2 81       	ldd	r26, Z+2	; 0x02
     936:	b3 81       	ldd	r27, Z+3	; 0x03
     938:	88 97       	sbiw	r24, 0x28	; 40
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	10 f1       	brcs	.+68     	; 0x984 <__stack+0x125>
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	f9 f0       	breq	.+62     	; 0x984 <__stack+0x125>
     946:	05 84       	ldd	r0, Z+13	; 0x0d
     948:	f6 85       	ldd	r31, Z+14	; 0x0e
     94a:	e0 2d       	mov	r30, r0
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0xf7>
     950:	8d e9       	ldi	r24, 0x9D	; 157
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	09 95       	icall
     956:	d8 01       	movw	r26, r16
     958:	ed 91       	ld	r30, X+
     95a:	fc 91       	ld	r31, X
     95c:	11 97       	sbiw	r26, 0x01	; 1
     95e:	10 82       	st	Z, r1
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	12 82       	std	Z+2, r1	; 0x02
     964:	13 82       	std	Z+3, r1	; 0x03
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	d4 82       	std	Z+4, r13	; 0x04
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x125>
     96e:	d8 01       	movw	r26, r16
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	11 97       	sbiw	r26, 0x01	; 1
     976:	10 82       	st	Z, r1
     978:	11 82       	std	Z+1, r1	; 0x01
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	13 82       	std	Z+3, r1	; 0x03
     97e:	ed 91       	ld	r30, X+
     980:	fc 91       	ld	r31, X
     982:	14 82       	std	Z+4, r1	; 0x04
     984:	22 96       	adiw	r28, 0x02	; 2
     986:	ce 15       	cp	r28, r14
     988:	df 05       	cpc	r29, r15
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x12f>
     98c:	98 cf       	rjmp	.-208    	; 0x8be <__stack+0x5f>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	08 95       	ret

0000099e <init_buttons>:
     99e:	0e 94 95 03 	call	0x72a	; 0x72a <init_but_struct>
     9a2:	ba 98       	cbi	0x17, 2	; 23
     9a4:	c2 9a       	sbi	0x18, 2	; 24
     9a6:	b9 98       	cbi	0x17, 1	; 23
     9a8:	c1 9a       	sbi	0x18, 1	; 24
     9aa:	be 98       	cbi	0x17, 6	; 23
     9ac:	c6 9a       	sbi	0x18, 6	; 24
     9ae:	8b 98       	cbi	0x11, 3	; 17
     9b0:	93 9a       	sbi	0x12, 3	; 18
     9b2:	bb 98       	cbi	0x17, 3	; 23
     9b4:	c3 9a       	sbi	0x18, 3	; 24
     9b6:	d4 98       	cbi	0x1a, 4	; 26
     9b8:	dc 9a       	sbi	0x1b, 4	; 27
     9ba:	a1 98       	cbi	0x14, 1	; 20
     9bc:	a9 9a       	sbi	0x15, 1	; 21
     9be:	bc 98       	cbi	0x17, 4	; 23
     9c0:	c4 9a       	sbi	0x18, 4	; 24
     9c2:	d3 98       	cbi	0x1a, 3	; 26
     9c4:	db 9a       	sbi	0x1b, 3	; 27
     9c6:	a0 98       	cbi	0x14, 0	; 20
     9c8:	a8 9a       	sbi	0x15, 0	; 21
     9ca:	08 95       	ret

000009cc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9cc:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
     9d0:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
     9d4:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
     9d8:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
     9dc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <buzzer_timer>
     9e0:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <buzzer_timer+0x1>
     9e4:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <buzzer_timer+0x2>
     9e8:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <buzzer_timer+0x3>
     9ec:	84 17       	cp	r24, r20
     9ee:	95 07       	cpc	r25, r21
     9f0:	a6 07       	cpc	r26, r22
     9f2:	b7 07       	cpc	r27, r23
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <buzzer_process+0x2c>
     9f6:	5e c0       	rjmp	.+188    	; 0xab4 <buzzer_process+0xe8>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER) == 0)
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	0e 94 4e 07 	call	0xe9c	; 0xe9c <dark_menu_get_value>
     9fe:	81 11       	cpse	r24, r1
     a00:	59 c0       	rjmp	.+178    	; 0xab4 <buzzer_process+0xe8>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     a02:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
     a06:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
     a0a:	95 ff       	sbrs	r25, 5
     a0c:	37 c0       	rjmp	.+110    	; 0xa7c <buzzer_process+0xb0>
     a0e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <buzzer_state>
     a12:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <buzzer_state+0x1>
     a16:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <buzzer_state+0x2>
     a1a:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <buzzer_state+0x3>
     a1e:	89 2b       	or	r24, r25
     a20:	8a 2b       	or	r24, r26
     a22:	8b 2b       	or	r24, r27
     a24:	59 f5       	brne	.+86     	; 0xa7c <buzzer_process+0xb0>
			{
				ON_BUZZER;
     a26:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a28:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
     a2c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
     a30:	9f 7d       	andi	r25, 0xDF	; 223
     a32:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
     a36:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
				buzzer_state = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <buzzer_state>
     a46:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <buzzer_state+0x1>
     a4a:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <buzzer_state+0x2>
     a4e:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <buzzer_state+0x3>
				buzzer_timer += 100;
     a52:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <buzzer_timer>
     a56:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <buzzer_timer+0x1>
     a5a:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <buzzer_timer+0x2>
     a5e:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <buzzer_timer+0x3>
     a62:	8c 59       	subi	r24, 0x9C	; 156
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	af 4f       	sbci	r26, 0xFF	; 255
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <buzzer_timer>
     a6e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <buzzer_timer+0x1>
     a72:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <buzzer_timer+0x2>
     a76:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <buzzer_timer+0x3>
     a7a:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a7c:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a7e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <buzzer_state>
     a82:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <buzzer_state+0x1>
     a86:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <buzzer_state+0x2>
     a8a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <buzzer_state+0x3>
				buzzer_timer += 50;
     a8e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <buzzer_timer>
     a92:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <buzzer_timer+0x1>
     a96:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <buzzer_timer+0x2>
     a9a:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <buzzer_timer+0x3>
     a9e:	c2 96       	adiw	r24, 0x32	; 50
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <buzzer_timer>
     aa8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <buzzer_timer+0x1>
     aac:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <buzzer_timer+0x2>
     ab0:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <buzzer_timer+0x3>
     ab4:	08 95       	ret

00000ab6 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     ab6:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     ab8:	c0 98       	cbi	0x18, 0	; 24
     aba:	08 95       	ret

00000abc <button_7_menu>:
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
		menuSaveParameters[configured_parameter]++;
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     abc:	a4 e7       	ldi	r26, 0x74	; 116
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e0 ed       	ldi	r30, 0xD0	; 208
     ac2:	f4 e0       	ldi	r31, 0x04	; 4
     ac4:	25 ed       	ldi	r18, 0xD5	; 213
     ac6:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	8c 91       	ld	r24, X
     acc:	11 97       	sbiw	r26, 0x01	; 1
     ace:	81 93       	st	Z+, r24
     ad0:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     ad2:	e2 17       	cp	r30, r18
     ad4:	f3 07       	cpc	r31, r19
     ad6:	c1 f7       	brne	.-16     	; 0xac8 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     ad8:	08 95       	ret

00000ada <button_debug_msg>:
	pass_add_number(5);
}

static void button_debug_msg(void)
{
	debug_msg("conf: %d\n", configured_parameter);
     ada:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <configured_parameter>
     ade:	1f 92       	push	r1
     ae0:	8f 93       	push	r24
     ae2:	88 ea       	ldi	r24, 0xA8	; 168
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     aee:	e0 ed       	ldi	r30, 0xD0	; 208
     af0:	f4 e0       	ldi	r31, 0x04	; 4
     af2:	83 81       	ldd	r24, Z+3	; 0x03
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	81 81       	ldd	r24, Z+1	; 0x01
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	80 81       	ld	r24, Z
     b06:	1f 92       	push	r1
     b08:	8f 93       	push	r24
     b0a:	82 eb       	ldi	r24, 0xB2	; 178
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
     b16:	8d b7       	in	r24, 0x3d	; 61
     b18:	9e b7       	in	r25, 0x3e	; 62
     b1a:	0e 96       	adiw	r24, 0x0e	; 14
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	9e bf       	out	0x3e, r25	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	8d bf       	out	0x3d, r24	; 61
     b26:	08 95       	ret

00000b28 <button_6_menu>:
		menuSaveParameters[configured_parameter]--;
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     b28:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <configured_parameter>
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	fc 01       	movw	r30, r24
     b30:	e0 53       	subi	r30, 0x30	; 48
     b32:	fb 4f       	sbci	r31, 0xFB	; 251
     b34:	20 81       	ld	r18, Z
     b36:	fc 01       	movw	r30, r24
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ec 58       	subi	r30, 0x8C	; 140
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	30 81       	ld	r19, Z
     b42:	23 17       	cp	r18, r19
     b44:	28 f4       	brcc	.+10     	; 0xb50 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b46:	fc 01       	movw	r30, r24
     b48:	e0 53       	subi	r30, 0x30	; 48
     b4a:	fb 4f       	sbci	r31, 0xFB	; 251
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	20 83       	st	Z, r18
	button_debug_msg();
     b50:	0e 94 6d 05 	call	0xada	; 0xada <button_debug_msg>
     b54:	08 95       	ret

00000b56 <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     b56:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <configured_parameter>
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	fc 01       	movw	r30, r24
     b5e:	e0 53       	subi	r30, 0x30	; 48
     b60:	fb 4f       	sbci	r31, 0xFB	; 251
     b62:	20 81       	ld	r18, Z
     b64:	22 23       	and	r18, r18
     b66:	29 f0       	breq	.+10     	; 0xb72 <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     b68:	fc 01       	movw	r30, r24
     b6a:	e0 53       	subi	r30, 0x30	; 48
     b6c:	fb 4f       	sbci	r31, 0xFB	; 251
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	20 83       	st	Z, r18
	button_debug_msg();
     b72:	0e 94 6d 05 	call	0xada	; 0xada <button_debug_msg>
     b76:	08 95       	ret

00000b78 <button_2_menu>:
		configured_parameter--;
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     b78:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <configured_parameter>
     b7c:	84 30       	cpi	r24, 0x04	; 4
     b7e:	18 f4       	brcc	.+6      	; 0xb86 <button_2_menu+0xe>
		configured_parameter++;
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <configured_parameter>
	button_debug_msg();
     b86:	0e 94 6d 05 	call	0xada	; 0xada <button_debug_msg>
     b8a:	08 95       	ret

00000b8c <button_1_menu>:
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     b8c:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <configured_parameter>
     b90:	88 23       	and	r24, r24
     b92:	19 f0       	breq	.+6      	; 0xb9a <button_1_menu+0xe>
		configured_parameter--;
     b94:	81 50       	subi	r24, 0x01	; 1
     b96:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <configured_parameter>
	button_debug_msg();
     b9a:	0e 94 6d 05 	call	0xada	; 0xada <button_debug_msg>
     b9e:	08 95       	ret

00000ba0 <button_3_menu>:

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     ba0:	60 ed       	ldi	r22, 0xD0	; 208
     ba2:	74 e0       	ldi	r23, 0x04	; 4
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	0e 94 fd 10 	call	0x21fa	; 0x21fa <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     bb0:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
	LED_MOTOR_OFF;
     bb4:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     bb6:	96 98       	cbi	0x12, 6	; 18
     bb8:	08 95       	ret

00000bba <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     bba:	cf 93       	push	r28
	pass[pass_len++] = number;
     bbc:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <pass_len>
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	9e 0f       	add	r25, r30
     bc4:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <pass_len>
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	e6 53       	subi	r30, 0x36	; 54
     bcc:	fb 4f       	sbci	r31, 0xFB	; 251
     bce:	80 83       	st	Z, r24
	debug_msg("pass %d\n", number);
     bd0:	1f 92       	push	r1
     bd2:	8f 93       	push	r24
     bd4:	81 ed       	ldi	r24, 0xD1	; 209
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	if (memcmp(pass, password, pass_len) != 0) {
     be0:	c0 91 d6 04 	lds	r28, 0x04D6	; 0x8004d6 <pass_len>
     be4:	4c 2f       	mov	r20, r28
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	61 e1       	ldi	r22, 0x11	; 17
     bea:	71 e0       	ldi	r23, 0x01	; 1
     bec:	8a ec       	ldi	r24, 0xCA	; 202
     bee:	94 e0       	ldi	r25, 0x04	; 4
     bf0:	0e 94 2f 21 	call	0x425e	; 0x425e <memcmp>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	89 2b       	or	r24, r25
     bfe:	91 f0       	breq	.+36     	; 0xc24 <pass_add_number+0x6a>
		debug_msg("clear_password\n");
     c00:	8a ed       	ldi	r24, 0xDA	; 218
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     c0c:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <pass_len>
	memset(pass, 0, sizeof(pass));
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	ea ec       	ldi	r30, 0xCA	; 202
     c14:	f4 e0       	ldi	r31, 0x04	; 4
     c16:	df 01       	movw	r26, r30
     c18:	1d 92       	st	X+, r1
     c1a:	8a 95       	dec	r24
     c1c:	e9 f7       	brne	.-6      	; 0xc18 <pass_add_number+0x5e>
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	35 c0       	rjmp	.+106    	; 0xc8e <pass_add_number+0xd4>
	if (memcmp(pass, password, pass_len) != 0) {
		debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     c24:	c6 30       	cpi	r28, 0x06	; 6
     c26:	99 f5       	brne	.+102    	; 0xc8e <pass_add_number+0xd4>
		debug_msg("enter_to_menu\n");
     c28:	8a ee       	ldi	r24, 0xEA	; 234
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	return 0;
}

static void enter_to_menu(void)
{
	dark_menu_state = MENU_PARAMETERS;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     c3a:	86 ec       	ldi	r24, 0xC6	; 198
     c3c:	95 e0       	ldi	r25, 0x05	; 5
     c3e:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <button1+0xc>
     c42:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <button1+0xb>
	button2.fall_callback = button_2_menu;
     c46:	8c eb       	ldi	r24, 0xBC	; 188
     c48:	95 e0       	ldi	r25, 0x05	; 5
     c4a:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <button2+0xc>
     c4e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <button2+0xb>
	button3.fall_callback = button_3_menu;
     c52:	80 ed       	ldi	r24, 0xD0	; 208
     c54:	95 e0       	ldi	r25, 0x05	; 5
     c56:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <button3+0xc>
     c5a:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <button3+0xb>
	button5.fall_callback = button_5_menu;
     c5e:	8b ea       	ldi	r24, 0xAB	; 171
     c60:	95 e0       	ldi	r25, 0x05	; 5
     c62:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <button5+0xc>
     c66:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <button5+0xb>
	button6.fall_callback = button_6_menu;
     c6a:	84 e9       	ldi	r24, 0x94	; 148
     c6c:	95 e0       	ldi	r25, 0x05	; 5
     c6e:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <button6+0xc>
     c72:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <button6+0xb>
	button7.fall_callback = button_7_menu;
     c76:	8e e5       	ldi	r24, 0x5E	; 94
     c78:	95 e0       	ldi	r25, 0x05	; 5
     c7a:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <button7+0xc>
     c7e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     c82:	67 e0       	ldi	r22, 0x07	; 7
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
	}
	if (pass_len == sizeof(pass)) {
		debug_msg("enter_to_menu\n");
		enter_to_menu();
	}
}
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     c92:	85 e0       	ldi	r24, 0x05	; 5
     c94:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     c98:	08 95       	ret

00000c9a <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     ca0:	08 95       	ret

00000ca2 <button_5_number>:
{
	pass_add_number(2);
}
static void button_5_number(void *pv)
{
	pass_add_number(3);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     ca8:	08 95       	ret

00000caa <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     cb0:	08 95       	ret

00000cb2 <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     cb8:	08 95       	ret

00000cba <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 dd 05 	call	0xbba	; 0xbba <pass_add_number>
     cc0:	08 95       	ret

00000cc2 <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	08 95       	ret

00000cc6 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state == 1)
     cc6:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
     cca:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
     cce:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
     cd2:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
     cd6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <menu_timer.2189>
     cda:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <menu_timer.2189+0x1>
     cde:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <menu_timer.2189+0x2>
     ce2:	b0 91 8b 02 	lds	r27, 0x028B	; 0x80028b <menu_timer.2189+0x3>
     ce6:	84 17       	cp	r24, r20
     ce8:	95 07       	cpc	r25, r21
     cea:	a6 07       	cpc	r26, r22
     cec:	b7 07       	cpc	r27, r23
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <menu_process+0x2c>
     cf0:	6b c0       	rjmp	.+214    	; 0xdc8 <menu_process+0x102>
     cf2:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <dark_menu_state>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <menu_process+0x36>
     cfa:	66 c0       	rjmp	.+204    	; 0xdc8 <menu_process+0x102>
	{
		menu_timer = mktime.ms + 50;
     cfc:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
     d00:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
     d04:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
     d08:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
     d0c:	c2 96       	adiw	r24, 0x32	; 50
     d0e:	a1 1d       	adc	r26, r1
     d10:	b1 1d       	adc	r27, r1
     d12:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <menu_timer.2189>
     d16:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <menu_timer.2189+0x1>
     d1a:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <menu_timer.2189+0x2>
     d1e:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <menu_timer.2189+0x3>
		if (segment1.state == SEG_MENU)
     d22:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
     d26:	87 30       	cpi	r24, 0x07	; 7
     d28:	31 f4       	brne	.+12     	; 0xd36 <menu_process+0x70>
			disp_set_number(&segment1, configured_parameter);
     d2a:	60 91 d5 04 	lds	r22, 0x04D5	; 0x8004d5 <configured_parameter>
     d2e:	87 ee       	ldi	r24, 0xE7	; 231
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
		if (segment2.state == SEG_MENU)
     d36:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
     d3a:	87 30       	cpi	r24, 0x07	; 7
     d3c:	51 f4       	brne	.+20     	; 0xd52 <menu_process+0x8c>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     d3e:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <configured_parameter>
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	e0 53       	subi	r30, 0x30	; 48
     d46:	fb 4f       	sbci	r31, 0xFB	; 251
     d48:	60 81       	ld	r22, Z
     d4a:	82 ee       	ldi	r24, 0xE2	; 226
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     d52:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	49 f5       	brne	.+82     	; 0xdac <menu_process+0xe6>
     d5a:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
     d5e:	88 30       	cpi	r24, 0x08	; 8
     d60:	29 f5       	brne	.+74     	; 0xdac <menu_process+0xe6>
		{
			menu_timer = 1000 + mktime.ms;
     d62:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
     d66:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
     d6a:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
     d6e:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
     d72:	88 51       	subi	r24, 0x18	; 24
     d74:	9c 4f       	sbci	r25, 0xFC	; 252
     d76:	af 4f       	sbci	r26, 0xFF	; 255
     d78:	bf 4f       	sbci	r27, 0xFF	; 255
     d7a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <menu_timer.2189>
     d7e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <menu_timer.2189+0x1>
     d82:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <menu_timer.2189+0x2>
     d86:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <menu_timer.2189+0x3>
			DispD2.value = 's';
     d8a:	83 e7       	ldi	r24, 0x73	; 115
     d8c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <DispD2>
			DispD1.value = 'a';
     d90:	81 e6       	ldi	r24, 0x61	; 97
     d92:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <DispD1>
			DispD3.value = 'p';
     d96:	80 e7       	ldi	r24, 0x70	; 112
     d98:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <DispD3>
			DispD4.value = 0;
     d9c:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <DispD4>
			segment1.state = SEG_MENU_OFF;
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     da6:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
			
			return;
     daa:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     dac:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	51 f4       	brne	.+20     	; 0xdc8 <menu_process+0x102>
     db4:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
     db8:	8a 30       	cpi	r24, 0x0A	; 10
     dba:	31 f4       	brne	.+12     	; 0xdc8 <menu_process+0x102>
		{
			segment1.state = SEG_OFF;
     dbc:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <segment1+0x4>
			segment2.state = SEG_OFF;
     dc0:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <segment2+0x4>
			dark_menu_state = 0;
     dc4:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <dark_menu_state>
     dc8:	08 95       	ret

00000dca <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dca:	8d e5       	ldi	r24, 0x5D	; 93
     dcc:	96 e0       	ldi	r25, 0x06	; 6
     dce:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <button1+0xc>
     dd2:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <button1+0xb>
	button2.fall_callback = button_2_number;
     dd6:	89 e5       	ldi	r24, 0x59	; 89
     dd8:	96 e0       	ldi	r25, 0x06	; 6
     dda:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <button2+0xc>
     dde:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <button2+0xb>
	button3.fall_callback = button_3_number;
     de2:	85 e5       	ldi	r24, 0x55	; 85
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <button3+0xc>
     dea:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <button3+0xb>
	button5.fall_callback = button_5_number;
     dee:	81 e5       	ldi	r24, 0x51	; 81
     df0:	96 e0       	ldi	r25, 0x06	; 6
     df2:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <button5+0xc>
     df6:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <button5+0xb>
	button6.fall_callback = button_6_number;
     dfa:	8d e4       	ldi	r24, 0x4D	; 77
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <button6+0xc>
     e02:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <button6+0xb>
	button7.fall_callback = button_7_number;
     e06:	89 e4       	ldi	r24, 0x49	; 73
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <button7+0xc>
     e0e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e12:	60 ed       	ldi	r22, 0xD0	; 208
     e14:	74 e0       	ldi	r23, 0x04	; 4
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	0e 94 45 11 	call	0x228a	; 0x228a <mem_read_data>
	debug_msg("menu_read %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     e1c:	e0 ed       	ldi	r30, 0xD0	; 208
     e1e:	f4 e0       	ldi	r31, 0x04	; 4
     e20:	83 81       	ldd	r24, Z+3	; 0x03
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	1f 92       	push	r1
     e2a:	8f 93       	push	r24
     e2c:	81 81       	ldd	r24, Z+1	; 0x01
     e2e:	1f 92       	push	r1
     e30:	8f 93       	push	r24
     e32:	80 81       	ld	r24, Z
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	89 ef       	ldi	r24, 0xF9	; 249
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e44:	a0 ed       	ldi	r26, 0xD0	; 208
     e46:	b4 e0       	ldi	r27, 0x04	; 4
     e48:	e4 e7       	ldi	r30, 0x74	; 116
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	4e e7       	ldi	r20, 0x7E	; 126
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	8d b7       	in	r24, 0x3d	; 61
     e52:	9e b7       	in	r25, 0x3e	; 62
     e54:	0a 96       	adiw	r24, 0x0a	; 10
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	9e bf       	out	0x3e, r25	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	8d bf       	out	0x3d, r24	; 61
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e60:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e62:	9c 91       	ld	r25, X
     e64:	80 81       	ld	r24, Z
     e66:	89 17       	cp	r24, r25
     e68:	18 f4       	brcc	.+6      	; 0xe70 <init_menu+0xa6>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	8c 93       	st	X, r24
			check_error++;
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	11 96       	adiw	r26, 0x01	; 1
     e72:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e74:	e4 17       	cp	r30, r20
     e76:	f5 07       	cpc	r31, r21
     e78:	a1 f7       	brne	.-24     	; 0xe62 <init_menu+0x98>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e7a:	22 23       	and	r18, r18
     e7c:	29 f0       	breq	.+10     	; 0xe88 <init_menu+0xbe>

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e7e:	60 ed       	ldi	r22, 0xD0	; 208
     e80:	74 e0       	ldi	r23, 0x04	; 4
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	0e 94 fd 10 	call	0x21fa	; 0x21fa <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e88:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <pass_len>
	memset(pass, 0, sizeof(pass));
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	ea ec       	ldi	r30, 0xCA	; 202
     e90:	f4 e0       	ldi	r31, 0x04	; 4
     e92:	df 01       	movw	r26, r30
     e94:	1d 92       	st	X+, r1
     e96:	8a 95       	dec	r24
     e98:	e9 f7       	brne	.-6      	; 0xe94 <init_menu+0xca>
     e9a:	08 95       	ret

00000e9c <dark_menu_get_value>:
	clear_password();
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	30 f4       	brcc	.+12     	; 0xeac <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     ea0:	e8 2f       	mov	r30, r24
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	e0 53       	subi	r30, 0x30	; 48
     ea6:	fb 4f       	sbci	r31, 0xFB	; 251
     ea8:	80 81       	ld	r24, Z
     eaa:	08 95       	ret
	}
	return 0;
     eac:	80 e0       	ldi	r24, 0x00	; 0
}
     eae:	08 95       	ret

00000eb0 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     eb0:	87 e1       	ldi	r24, 0x17	; 23
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	9f 93       	push	r25
     eb6:	8f 93       	push	r24
     eb8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     ebc:	8c ed       	ldi	r24, 0xDC	; 220
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <evTime_init>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <motorD>
     eca:	94 98       	cbi	0x12, 4	; 18
     ecc:	15 bc       	out	0x25, r1	; 37
     ece:	8f 9a       	sbi	0x11, 7	; 17
     ed0:	97 9a       	sbi	0x12, 7	; 18
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	08 95       	ret

00000ed8 <dcmotorpwm_deinit>:
     ed8:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <motorD>
     edc:	15 bc       	out	0x25, r1	; 37
     ede:	97 9a       	sbi	0x12, 7	; 18
     ee0:	94 98       	cbi	0x12, 4	; 18
     ee2:	08 95       	ret

00000ee4 <dcmotor_is_on>:
     ee4:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <motorD>
     ee8:	92 50       	subi	r25, 0x02	; 2
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	93 30       	cpi	r25, 0x03	; 3
     ef0:	10 f0       	brcs	.+4      	; 0xef6 <dcmotor_is_on+0x12>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	c9 01       	movw	r24, r18
     ef8:	08 95       	ret

00000efa <dcmotorpwm_stop>:
     efa:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_is_on>
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	99 f0       	breq	.+38     	; 0xf28 <dcmotorpwm_stop+0x2e>
     f02:	85 e2       	ldi	r24, 0x25	; 37
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f0e:	15 bc       	out	0x25, r1	; 37
     f10:	97 9a       	sbi	0x12, 7	; 18
     f12:	94 98       	cbi	0x12, 4	; 18
     f14:	e8 ed       	ldi	r30, 0xD8	; 216
     f16:	f4 e0       	ldi	r31, 0x04	; 4
     f18:	80 81       	ld	r24, Z
     f1a:	81 83       	std	Z+1, r24	; 0x01
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 83       	st	Z, r24
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	08 95       	ret

00000f2a <dcmotorpwm_start>:
     f2a:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <motorD>
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	d9 f4       	brne	.+54     	; 0xf68 <dcmotorpwm_start+0x3e>
     f32:	94 9a       	sbi	0x12, 4	; 18
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 63       	ori	r24, 0x30	; 48
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	85 b5       	in	r24, 0x25	; 37
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	85 bd       	out	0x25, r24	; 37
     f46:	e8 ed       	ldi	r30, 0xD8	; 216
     f48:	f4 e0       	ldi	r31, 0x04	; 4
     f4a:	80 81       	ld	r24, Z
     f4c:	81 83       	std	Z+1, r24	; 0x01
     f4e:	84 e0       	ldi	r24, 0x04	; 4
     f50:	80 83       	st	Z, r24
     f52:	48 ee       	ldi	r20, 0xE8	; 232
     f54:	53 e0       	ldi	r21, 0x03	; 3
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	8c ed       	ldi	r24, 0xDC	; 220
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	08 95       	ret
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	08 95       	ret

00000f6e <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f6e:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <motorD+0x3>
}
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	08 95       	ret

00000f76 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f76:	83 e3       	ldi	r24, 0x33	; 51
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f82:	0e 94 7d 07 	call	0xefa	; 0xefa <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f86:	85 e0       	ldi	r24, 0x05	; 5
     f88:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <motorD>
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	08 95       	ret

00000f92 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f92:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_is_on>
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	29 f0       	breq	.+10     	; 0xfa4 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <motorD>
		return 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fa4:	08 95       	ret

00000fa6 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     fa6:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_is_on>
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	29 f0       	breq	.+10     	; 0xfb8 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <motorD>
		return 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fb8:	08 95       	ret

00000fba <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     fba:	cf 93       	push	r28
     fbc:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     fbe:	46 e9       	ldi	r20, 0x96	; 150
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	8c e8       	ldi	r24, 0x8C	; 140
     fc8:	92 e0       	ldi	r25, 0x02	; 2
     fca:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <evTime_process_period>
     fce:	89 2b       	or	r24, r25
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <dcmotor_process+0x1a>
     fd2:	58 c0       	rjmp	.+176    	; 0x1084 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     fd4:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <motorD>
     fd8:	93 30       	cpi	r25, 0x03	; 3
     fda:	e9 f0       	breq	.+58     	; 0x1016 <dcmotor_process+0x5c>
     fdc:	28 f4       	brcc	.+10     	; 0xfe8 <dcmotor_process+0x2e>
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	b9 f0       	breq	.+46     	; 0x1010 <dcmotor_process+0x56>
     fe2:	92 30       	cpi	r25, 0x02	; 2
     fe4:	41 f0       	breq	.+16     	; 0xff6 <dcmotor_process+0x3c>
     fe6:	4e c0       	rjmp	.+156    	; 0x1084 <dcmotor_process+0xca>
     fe8:	94 30       	cpi	r25, 0x04	; 4
     fea:	09 f4       	brne	.+2      	; 0xfee <dcmotor_process+0x34>
     fec:	48 c0       	rjmp	.+144    	; 0x107e <dcmotor_process+0xc4>
     fee:	95 30       	cpi	r25, 0x05	; 5
     ff0:	09 f4       	brne	.+2      	; 0xff4 <dcmotor_process+0x3a>
     ff2:	42 c0       	rjmp	.+132    	; 0x1078 <dcmotor_process+0xbe>
     ff4:	47 c0       	rjmp	.+142    	; 0x1084 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     ff6:	c0 93 db 04 	sts	0x04DB, r28	; 0x8004db <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     ffa:	2b ee       	ldi	r18, 0xEB	; 235
     ffc:	c2 9f       	mul	r28, r18
     ffe:	c0 01       	movw	r24, r0
    1000:	11 24       	eor	r1, r1
    1002:	63 e6       	ldi	r22, 0x63	; 99
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__divmodhi4>
    100a:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
    100c:	63 bd       	out	0x23, r22	; 35
			break;
    100e:	3a c0       	rjmp	.+116    	; 0x1084 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    1010:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <motorD+0x3>
			break;
    1014:	37 c0       	rjmp	.+110    	; 0x1084 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
    1016:	c3 33       	cpi	r28, 0x33	; 51
    1018:	78 f4       	brcc	.+30     	; 0x1038 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
    101a:	84 e1       	ldi	r24, 0x14	; 20
    101c:	8c 0f       	add	r24, r28
    101e:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1022:	2b ee       	ldi	r18, 0xEB	; 235
    1024:	82 9f       	mul	r24, r18
    1026:	c0 01       	movw	r24, r0
    1028:	11 24       	eor	r1, r1
    102a:	63 e6       	ldi	r22, 0x63	; 99
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__divmodhi4>
    1032:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
    1034:	63 bd       	out	0x23, r22	; 35
    1036:	26 c0       	rjmp	.+76     	; 0x1084 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    1038:	8d ec       	ldi	r24, 0xCD	; 205
    103a:	8c 0f       	add	r24, r28
    103c:	84 31       	cpi	r24, 0x14	; 20
    103e:	78 f4       	brcc	.+30     	; 0x105e <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    1040:	8f e0       	ldi	r24, 0x0F	; 15
    1042:	8c 0f       	add	r24, r28
    1044:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1048:	2b ee       	ldi	r18, 0xEB	; 235
    104a:	82 9f       	mul	r24, r18
    104c:	c0 01       	movw	r24, r0
    104e:	11 24       	eor	r1, r1
    1050:	63 e6       	ldi	r22, 0x63	; 99
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__divmodhi4>
    1058:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    105a:	63 bd       	out	0x23, r22	; 35
    105c:	13 c0       	rjmp	.+38     	; 0x1084 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    105e:	c0 93 db 04 	sts	0x04DB, r28	; 0x8004db <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1062:	2b ee       	ldi	r18, 0xEB	; 235
    1064:	c2 9f       	mul	r28, r18
    1066:	c0 01       	movw	r24, r0
    1068:	11 24       	eor	r1, r1
    106a:	63 e6       	ldi	r22, 0x63	; 99
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__divmodhi4>
    1072:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    1074:	63 bd       	out	0x23, r22	; 35
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1078:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    107a:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1088:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    108a:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    108c:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    108e:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    1090:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    1092:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    1094:	af 9a       	sbi	0x15, 7	; 21
    1096:	08 95       	ret

00001098 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1098:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    109a:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    109e:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    10a0:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    10a4:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    10a6:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    10aa:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    10ac:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <DispD4+0x1>
    10b0:	08 95       	ret

000010b2 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    10b2:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    10b4:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    10b6:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    10b8:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    10ba:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10bc:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10be:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10c0:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10c2:	e0 ef       	ldi	r30, 0xF0	; 240
    10c4:	f4 e0       	ldi	r31, 0x04	; 4
    10c6:	8e ee       	ldi	r24, 0xEE	; 238
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10ce:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10d0:	2a ef       	ldi	r18, 0xFA	; 250
    10d2:	34 e0       	ldi	r19, 0x04	; 4
    10d4:	33 83       	std	Z+3, r19	; 0x03
    10d6:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10d8:	a7 ee       	ldi	r26, 0xE7	; 231
    10da:	b4 e0       	ldi	r27, 0x04	; 4
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	3c 93       	st	X, r19
    10e0:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10e2:	13 96       	adiw	r26, 0x03	; 3
    10e4:	9c 93       	st	X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10ea:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10ec:	2c ee       	ldi	r18, 0xEC	; 236
    10ee:	34 e0       	ldi	r19, 0x04	; 4
    10f0:	35 83       	std	Z+5, r19	; 0x05
    10f2:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10f4:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10f6:	88 ef       	ldi	r24, 0xF8	; 248
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	97 83       	std	Z+7, r25	; 0x07
    10fc:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10fe:	e2 ee       	ldi	r30, 0xE2	; 226
    1100:	f4 e0       	ldi	r31, 0x04	; 4
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1106:	93 83       	std	Z+3, r25	; 0x03
    1108:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    110a:	0e 94 4c 08 	call	0x1098	; 0x1098 <off_all_displays>
	clear_display();
    110e:	0e 94 44 08 	call	0x1088	; 0x1088 <clear_display>
    1112:	08 95       	ret

00001114 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
	if (DispD->value != displaying_value)
    1118:	fc 01       	movw	r30, r24
    111a:	30 81       	ld	r19, Z
    111c:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <displaying_value>
    1120:	32 17       	cp	r19, r18
    1122:	09 f4       	brne	.+2      	; 0x1126 <display_set_value+0x12>
    1124:	95 c0       	rjmp	.+298    	; 0x1250 <display_set_value+0x13c>
    1126:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1128:	0e 94 44 08 	call	0x1088	; 0x1088 <clear_display>
		switch(DispD->value)
    112c:	e8 81       	ld	r30, Y
    112e:	8e 2f       	mov	r24, r30
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	91 05       	cpc	r25, r1
    1136:	08 f0       	brcs	.+2      	; 0x113a <display_set_value+0x26>
    1138:	88 c0       	rjmp	.+272    	; 0x124a <display_set_value+0x136>
    113a:	fc 01       	movw	r30, r24
    113c:	e6 5d       	subi	r30, 0xD6	; 214
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    1144:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1146:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1148:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    114a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    114c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    114e:	aa 98       	cbi	0x15, 2	; 21
			break;
    1150:	7c c0       	rjmp	.+248    	; 0x124a <display_set_value+0x136>
			case 1:
			LED_ON_B;
    1152:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1154:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1156:	79 c0       	rjmp	.+242    	; 0x124a <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1158:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    115a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    115c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    115e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    1160:	df 98       	cbi	0x1b, 7	; 27
			break;
    1162:	73 c0       	rjmp	.+230    	; 0x124a <display_set_value+0x136>
			case 3:
			LED_ON_A;
    1164:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1166:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1168:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    116a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    116c:	df 98       	cbi	0x1b, 7	; 27
			break;
    116e:	6d c0       	rjmp	.+218    	; 0x124a <display_set_value+0x136>
			case 4:
			LED_ON_F;
    1170:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1172:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    1174:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1176:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1178:	68 c0       	rjmp	.+208    	; 0x124a <display_set_value+0x136>
			case 5:
			LED_ON_A;
    117a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    117c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    117e:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1180:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1182:	df 98       	cbi	0x1b, 7	; 27
			break;
    1184:	62 c0       	rjmp	.+196    	; 0x124a <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1186:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1188:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    118a:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    118c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    118e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1190:	de 98       	cbi	0x1b, 6	; 27
			break;
    1192:	5b c0       	rjmp	.+182    	; 0x124a <display_set_value+0x136>
			case 7:
			LED_ON_A;
    1194:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1196:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1198:	dd 98       	cbi	0x1b, 5	; 27
			break;
    119a:	57 c0       	rjmp	.+174    	; 0x124a <display_set_value+0x136>
			case 8:
			LED_ON_A;
    119c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    119e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11a0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11a2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11a4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11a6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11a8:	af 98       	cbi	0x15, 7	; 21
			break;
    11aa:	4f c0       	rjmp	.+158    	; 0x124a <display_set_value+0x136>
			case 9:
			LED_ON_A;
    11ac:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11ae:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11b0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11b2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11b4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11b6:	af 98       	cbi	0x15, 7	; 21
			break;
    11b8:	48 c0       	rjmp	.+144    	; 0x124a <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    11ba:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11bc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11be:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11c0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11c4:	af 98       	cbi	0x15, 7	; 21
			break;
    11c6:	41 c0       	rjmp	.+130    	; 0x124a <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11c8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ca:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11cc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11ce:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11d0:	af 98       	cbi	0x15, 7	; 21
			break;
    11d2:	3b c0       	rjmp	.+118    	; 0x124a <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11d4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11d6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11d8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11da:	aa 98       	cbi	0x15, 2	; 21
			break;
    11dc:	36 c0       	rjmp	.+108    	; 0x124a <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11de:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11e0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11e2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11e4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11e6:	af 98       	cbi	0x15, 7	; 21
			break;
    11e8:	30 c0       	rjmp	.+96     	; 0x124a <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11ea:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11ec:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ee:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11f2:	af 98       	cbi	0x15, 7	; 21
			break;
    11f4:	2a c0       	rjmp	.+84     	; 0x124a <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11f6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11f8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11fa:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11fc:	af 98       	cbi	0x15, 7	; 21
			break;
    11fe:	25 c0       	rjmp	.+74     	; 0x124a <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    1200:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1202:	af 98       	cbi	0x15, 7	; 21
			break;
    1204:	22 c0       	rjmp	.+68     	; 0x124a <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1206:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1208:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    120a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    120c:	af 98       	cbi	0x15, 7	; 21
			break;
    120e:	1d c0       	rjmp	.+58     	; 0x124a <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    1210:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1212:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    1214:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1216:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1218:	af 98       	cbi	0x15, 7	; 21
			break;
    121a:	17 c0       	rjmp	.+46     	; 0x124a <display_set_value+0x136>
			case 's':
			LED_ON_A;
    121c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    121e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1220:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1222:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1224:	af 98       	cbi	0x15, 7	; 21
			break;
    1226:	11 c0       	rjmp	.+34     	; 0x124a <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1228:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    122a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    122c:	aa 98       	cbi	0x15, 2	; 21
			break;
    122e:	0d c0       	rjmp	.+26     	; 0x124a <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    1230:	af 98       	cbi	0x15, 7	; 21
			break;
    1232:	0b c0       	rjmp	.+22     	; 0x124a <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1234:	aa 98       	cbi	0x15, 2	; 21
			break;
    1236:	09 c0       	rjmp	.+18     	; 0x124a <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1238:	de 98       	cbi	0x1b, 6	; 27
			break;
    123a:	07 c0       	rjmp	.+14     	; 0x124a <display_set_value+0x136>
			case 252:
			LED_ON_D;
    123c:	df 98       	cbi	0x1b, 7	; 27
			break;
    123e:	05 c0       	rjmp	.+10     	; 0x124a <display_set_value+0x136>
			case 251:
			LED_ON_C;
    1240:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1242:	03 c0       	rjmp	.+6      	; 0x124a <display_set_value+0x136>
			case 250:
			LED_ON_B;
    1244:	ad 98       	cbi	0x15, 5	; 21
			break;
    1246:	01 c0       	rjmp	.+2      	; 0x124a <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1248:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    124a:	88 81       	ld	r24, Y
    124c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displaying_value>
	}
	
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <on_display>:
void on_display(disp_drv *DispD)
{
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
	off_all_displays();
    125c:	0e 94 4c 08 	call	0x1098	; 0x1098 <off_all_displays>
	display_set_value(DispD);
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 8a 08 	call	0x1114	; 0x1114 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1266:	84 e0       	ldi	r24, 0x04	; 4
    1268:	ce 3e       	cpi	r28, 0xEE	; 238
    126a:	d8 07       	cpc	r29, r24
    126c:	29 f4       	brne	.+10     	; 0x1278 <on_display+0x22>
	{
		LED_ON_DISP1;
    126e:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <DispD1+0x1>
    1276:	19 c0       	rjmp	.+50     	; 0x12aa <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	ca 3f       	cpi	r28, 0xFA	; 250
    127c:	d8 07       	cpc	r29, r24
    127e:	29 f4       	brne	.+10     	; 0x128a <on_display+0x34>
	{
		LED_ON_DISP2;
    1280:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <DispD2+0x1>
    1288:	10 c0       	rjmp	.+32     	; 0x12aa <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	cc 3e       	cpi	r28, 0xEC	; 236
    128e:	d8 07       	cpc	r29, r24
    1290:	29 f4       	brne	.+10     	; 0x129c <on_display+0x46>
	{
		LED_ON_DISP3;
    1292:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <DispD3+0x1>
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    129c:	c8 5f       	subi	r28, 0xF8	; 248
    129e:	d4 40       	sbci	r29, 0x04	; 4
    12a0:	21 f4       	brne	.+8      	; 0x12aa <on_display+0x54>
	{
		LED_ON_DISP4;
    12a2:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <DispD4+0x1>
	}
	#endif
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12bc:	c0 81       	ld	r28, Z
    12be:	d1 81       	ldd	r29, Z+1	; 0x01
    12c0:	21 96       	adiw	r28, 0x01	; 1
    12c2:	d1 83       	std	Z+1, r29	; 0x01
    12c4:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12c6:	9e 01       	movw	r18, r28
    12c8:	ad ec       	ldi	r26, 0xCD	; 205
    12ca:	bc ec       	ldi	r27, 0xCC	; 204
    12cc:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	c8 17       	cp	r28, r24
    12f4:	d9 07       	cpc	r29, r25
    12f6:	01 f5       	brne	.+64     	; 0x1338 <display_process+0x88>
    12f8:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12fa:	10 91 91 02 	lds	r17, 0x0291	; 0x800291 <iteration>
    12fe:	14 30       	cpi	r17, 0x04	; 4
    1300:	58 f4       	brcc	.+22     	; 0x1318 <display_process+0x68>
			on_display(disp_tab[iteration]);
    1302:	e1 2f       	mov	r30, r17
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	e0 51       	subi	r30, 0x10	; 16
    130c:	fb 4f       	sbci	r31, 0xFB	; 251
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	0e 94 2b 09 	call	0x1256	; 0x1256 <on_display>
    1316:	02 c0       	rjmp	.+4      	; 0x131c <display_process+0x6c>
		else
			off_all_displays();
    1318:	0e 94 4c 08 	call	0x1098	; 0x1098 <off_all_displays>
		iteration++;
    131c:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    131e:	15 30       	cpi	r17, 0x05	; 5
    1320:	19 f0       	breq	.+6      	; 0x1328 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    1322:	10 93 91 02 	sts	0x0291, r17	; 0x800291 <iteration>
    1326:	02 c0       	rjmp	.+4      	; 0x132c <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1328:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    132c:	c0 39       	cpi	r28, 0x90	; 144
    132e:	d1 40       	sbci	r29, 0x01	; 1
    1330:	19 f4       	brne	.+6      	; 0x1338 <display_process+0x88>
    1332:	f7 01       	movw	r30, r14
    1334:	11 82       	std	Z+1, r1	; 0x01
    1336:	10 82       	st	Z, r1
	}
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    1344:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1346:	64 36       	cpi	r22, 0x64	; 100
    1348:	f8 f4       	brcc	.+62     	; 0x1388 <disp_set_number+0x44>
	else if (number == 0)
    134a:	61 11       	cpse	r22, r1
    134c:	08 c0       	rjmp	.+16     	; 0x135e <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    134e:	a0 81       	ld	r26, Z
    1350:	b1 81       	ldd	r27, Z+1	; 0x01
    1352:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    1354:	02 80       	ldd	r0, Z+2	; 0x02
    1356:	f3 81       	ldd	r31, Z+3	; 0x03
    1358:	e0 2d       	mov	r30, r0
    135a:	10 82       	st	Z, r1
    135c:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    135e:	a0 81       	ld	r26, Z
    1360:	b1 81       	ldd	r27, Z+1	; 0x01
    1362:	9d ec       	ldi	r25, 0xCD	; 205
    1364:	69 9f       	mul	r22, r25
    1366:	91 2d       	mov	r25, r1
    1368:	11 24       	eor	r1, r1
    136a:	96 95       	lsr	r25
    136c:	96 95       	lsr	r25
    136e:	96 95       	lsr	r25
    1370:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    1372:	02 80       	ldd	r0, Z+2	; 0x02
    1374:	f3 81       	ldd	r31, Z+3	; 0x03
    1376:	e0 2d       	mov	r30, r0
    1378:	89 2f       	mov	r24, r25
    137a:	88 0f       	add	r24, r24
    137c:	98 2f       	mov	r25, r24
    137e:	99 0f       	add	r25, r25
    1380:	99 0f       	add	r25, r25
    1382:	89 0f       	add	r24, r25
    1384:	68 1b       	sub	r22, r24
    1386:	60 83       	st	Z, r22
    1388:	08 95       	ret

0000138a <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    138a:	fc 01       	movw	r30, r24
    138c:	60 83       	st	Z, r22
    138e:	08 95       	ret

00001390 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	39 f0       	breq	.+14     	; 0x13a2 <dip_set_value+0x12>
    1394:	18 f0       	brcs	.+6      	; 0x139c <dip_set_value+0xc>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	39 f0       	breq	.+14     	; 0x13a8 <dip_set_value+0x18>
    139a:	08 95       	ret
    139c:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <motor_disp_value>
    13a0:	08 95       	ret
    13a2:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <servo_disp_value>
    13a6:	08 95       	ret
    13a8:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <servo_disp_value>
    13ac:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <motor_disp_value>
    13b0:	08 95       	ret

000013b2 <disp_get_state>:
    13b2:	88 23       	and	r24, r24
    13b4:	19 f0       	breq	.+6      	; 0x13bc <disp_get_state+0xa>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <disp_get_state+0x12>
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <disp_get_state+0x1a>
    13bc:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	08 95       	ret
    13c4:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	08 95       	ret
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <disp_disable_voltage>:
    13d2:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    13d6:	86 30       	cpi	r24, 0x06	; 6
    13d8:	21 f4       	brne	.+8      	; 0x13e2 <disp_disable_voltage+0x10>
    13da:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <disp1_last_state>
    13de:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
    13e2:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <disp_disable_voltage+0x20>
    13ea:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <disp2_last_state>
    13ee:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
    13f2:	08 95       	ret

000013f4 <disp_set_state>:
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	a1 f0       	breq	.+40     	; 0x1420 <disp_set_state+0x2c>
    13f8:	18 f0       	brcs	.+6      	; 0x1400 <disp_set_state+0xc>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	09 f1       	breq	.+66     	; 0x1440 <disp_set_state+0x4c>
    13fe:	08 95       	ret
    1400:	66 30       	cpi	r22, 0x06	; 6
    1402:	21 f4       	brne	.+8      	; 0x140c <disp_set_state+0x18>
    1404:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    1408:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <disp1_last_state>
    140c:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    1410:	86 30       	cpi	r24, 0x06	; 6
    1412:	19 f4       	brne	.+6      	; 0x141a <disp_set_state+0x26>
    1414:	60 93 fc 04 	sts	0x04FC, r22	; 0x8004fc <disp1_last_state>
    1418:	08 95       	ret
    141a:	60 93 eb 04 	sts	0x04EB, r22	; 0x8004eb <segment1+0x4>
    141e:	08 95       	ret
    1420:	66 30       	cpi	r22, 0x06	; 6
    1422:	21 f4       	brne	.+8      	; 0x142c <disp_set_state+0x38>
    1424:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    1428:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <disp2_last_state>
    142c:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    1430:	86 30       	cpi	r24, 0x06	; 6
    1432:	19 f4       	brne	.+6      	; 0x143a <disp_set_state+0x46>
    1434:	60 93 fd 04 	sts	0x04FD, r22	; 0x8004fd <disp2_last_state>
    1438:	08 95       	ret
    143a:	60 93 e6 04 	sts	0x04E6, r22	; 0x8004e6 <segment2+0x4>
    143e:	08 95       	ret
    1440:	66 30       	cpi	r22, 0x06	; 6
    1442:	41 f4       	brne	.+16     	; 0x1454 <disp_set_state+0x60>
    1444:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    1448:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <disp1_last_state>
    144c:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    1450:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <disp2_last_state>
    1454:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    1458:	86 30       	cpi	r24, 0x06	; 6
    145a:	29 f4       	brne	.+10     	; 0x1466 <disp_set_state+0x72>
    145c:	60 93 fd 04 	sts	0x04FD, r22	; 0x8004fd <disp2_last_state>
    1460:	60 93 fc 04 	sts	0x04FC, r22	; 0x8004fc <disp1_last_state>
    1464:	08 95       	ret
    1466:	60 93 eb 04 	sts	0x04EB, r22	; 0x8004eb <segment1+0x4>
    146a:	60 93 e6 04 	sts	0x04E6, r22	; 0x8004e6 <segment2+0x4>
    146e:	08 95       	ret

00001470 <display_set_error>:
    1470:	95 e0       	ldi	r25, 0x05	; 5
    1472:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <segment1+0x4>
    1476:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <segment2+0x4>
    147a:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <error_reason>
    147e:	08 95       	ret

00001480 <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1480:	68 ef       	ldi	r22, 0xF8	; 248
    1482:	8e ee       	ldi	r24, 0xEE	; 238
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    148a:	68 ef       	ldi	r22, 0xF8	; 248
    148c:	8a ef       	ldi	r24, 0xFA	; 250
    148e:	94 e0       	ldi	r25, 0x04	; 4
    1490:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1494:	68 ef       	ldi	r22, 0xF8	; 248
    1496:	8c ee       	ldi	r24, 0xEC	; 236
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    149e:	68 ef       	ldi	r22, 0xF8	; 248
    14a0:	88 ef       	ldi	r24, 0xF8	; 248
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
    14a8:	08 95       	ret

000014aa <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    14aa:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
    14ae:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
    14b2:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
    14b6:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
    14ba:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <timer_disp_process.1979>
    14be:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <timer_disp_process.1979+0x1>
    14c2:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <timer_disp_process.1979+0x2>
    14c6:	70 91 99 02 	lds	r23, 0x0299	; 0x800299 <timer_disp_process.1979+0x3>
    14ca:	48 17       	cp	r20, r24
    14cc:	59 07       	cpc	r21, r25
    14ce:	6a 07       	cpc	r22, r26
    14d0:	7b 07       	cpc	r23, r27
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <disp_process+0x2c>
    14d4:	26 c1       	rjmp	.+588    	; 0x1722 <disp_process+0x278>
	{
        
        switch(segment1.state)
    14d6:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <disp_process+0x36>
    14de:	59 c0       	rjmp	.+178    	; 0x1592 <disp_process+0xe8>
    14e0:	30 f4       	brcc	.+12     	; 0x14ee <disp_process+0x44>
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <disp_process+0x3e>
    14e6:	87 c0       	rjmp	.+270    	; 0x15f6 <disp_process+0x14c>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	39 f1       	breq	.+78     	; 0x153a <disp_process+0x90>
    14ec:	8e c0       	rjmp	.+284    	; 0x160a <disp_process+0x160>
    14ee:	85 30       	cpi	r24, 0x05	; 5
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <disp_process+0x4a>
    14f2:	74 c0       	rjmp	.+232    	; 0x15dc <disp_process+0x132>
    14f4:	48 f1       	brcs	.+82     	; 0x1548 <disp_process+0x9e>
    14f6:	86 30       	cpi	r24, 0x06	; 6
    14f8:	09 f0       	breq	.+2      	; 0x14fc <disp_process+0x52>
    14fa:	87 c0       	rjmp	.+270    	; 0x160a <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14fc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	48 ec       	ldi	r20, 0xC8	; 200
    1506:	52 e4       	ldi	r21, 0x42	; 66
    1508:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    150c:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__fixsfsi>
    1510:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <voltage+0x1>
    1514:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <voltage>
            disp_set_number(&segment1, voltage/100);
    1518:	9b 01       	movw	r18, r22
    151a:	36 95       	lsr	r19
    151c:	27 95       	ror	r18
    151e:	36 95       	lsr	r19
    1520:	27 95       	ror	r18
    1522:	ab e7       	ldi	r26, 0x7B	; 123
    1524:	b4 e1       	ldi	r27, 0x14	; 20
    1526:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    152a:	96 95       	lsr	r25
    152c:	87 95       	ror	r24
    152e:	68 2f       	mov	r22, r24
    1530:	87 ee       	ldi	r24, 0xE7	; 231
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
            break;
    1538:	68 c0       	rjmp	.+208    	; 0x160a <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    153a:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <motor_disp_value>
    153e:	87 ee       	ldi	r24, 0xE7	; 231
    1540:	94 e0       	ldi	r25, 0x04	; 4
    1542:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
            break;
    1546:	61 c0       	rjmp	.+194    	; 0x160a <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1548:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	31 f0       	breq	.+12     	; 0x155c <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1556:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
                break;
    155a:	57 c0       	rjmp	.+174    	; 0x160a <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    155c:	48 51       	subi	r20, 0x18	; 24
    155e:	5c 4f       	sbci	r21, 0xFC	; 252
    1560:	6f 4f       	sbci	r22, 0xFF	; 255
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	40 93 96 02 	sts	0x0296, r20	; 0x800296 <timer_disp_process.1979>
    1568:	50 93 97 02 	sts	0x0297, r21	; 0x800297 <timer_disp_process.1979+0x1>
    156c:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <timer_disp_process.1979+0x2>
    1570:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    1574:	83 e7       	ldi	r24, 0x73	; 115
    1576:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <DispD2>
			DispD1.value = 'a';
    157a:	81 e6       	ldi	r24, 0x61	; 97
    157c:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <DispD1>
			DispD3.value = 'p';
    1580:	80 e7       	ldi	r24, 0x70	; 112
    1582:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <DispD3>
			segment1.state = SEG_VALUE;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
			segment2.state = SEG_VALUE;
    158c:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
			return;
    1590:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    1592:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	31 f0       	breq	.+12     	; 0x15a6 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    15a0:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
                break;
    15a4:	32 c0       	rjmp	.+100    	; 0x160a <disp_process+0x160>
            }
			timer_disp_process += 1000;
    15a6:	48 51       	subi	r20, 0x18	; 24
    15a8:	5c 4f       	sbci	r21, 0xFC	; 252
    15aa:	6f 4f       	sbci	r22, 0xFF	; 255
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	40 93 96 02 	sts	0x0296, r20	; 0x800296 <timer_disp_process.1979>
    15b2:	50 93 97 02 	sts	0x0297, r21	; 0x800297 <timer_disp_process.1979+0x1>
    15b6:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <timer_disp_process.1979+0x2>
    15ba:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15be:	8c e6       	ldi	r24, 0x6C	; 108
    15c0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <DispD2>
			DispD1.value = 'o';
    15c4:	8f e6       	ldi	r24, 0x6F	; 111
    15c6:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <DispD1>
			DispD3.value = 'p';
    15ca:	80 e7       	ldi	r24, 0x70	; 112
    15cc:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <DispD3>
			segment1.state = SEG_VALUE;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <segment1+0x4>
			segment2.state = SEG_VALUE;
    15d6:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <segment2+0x4>
            break;
    15da:	17 c0       	rjmp	.+46     	; 0x160a <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15dc:	85 e6       	ldi	r24, 0x65	; 101
    15de:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <DispD2>
			DispD1.value = 'r';
    15e2:	82 e7       	ldi	r24, 0x72	; 114
    15e4:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <DispD1>
			disp_set_number(&segment2, error_reason);
    15e8:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <error_reason>
    15ec:	82 ee       	ldi	r24, 0xE2	; 226
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
            break;
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15f6:	68 ef       	ldi	r22, 0xF8	; 248
    15f8:	8e ee       	ldi	r24, 0xEE	; 238
    15fa:	94 e0       	ldi	r25, 0x04	; 4
    15fc:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1600:	68 ef       	ldi	r22, 0xF8	; 248
    1602:	8a ef       	ldi	r24, 0xFA	; 250
    1604:	94 e0       	ldi	r25, 0x04	; 4
    1606:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
            break;
        }

        switch(segment2.state)
    160a:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	19 f1       	breq	.+70     	; 0x1658 <disp_process+0x1ae>
    1612:	48 f1       	brcs	.+82     	; 0x1666 <disp_process+0x1bc>
    1614:	86 30       	cpi	r24, 0x06	; 6
    1616:	19 f0       	breq	.+6      	; 0x161e <disp_process+0x174>
    1618:	8d 30       	cpi	r24, 0x0D	; 13
    161a:	81 f1       	breq	.+96     	; 0x167c <disp_process+0x1d2>
    161c:	6f c0       	rjmp	.+222    	; 0x16fc <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    161e:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <voltage>
    1622:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <voltage+0x1>
    1626:	9a 01       	movw	r18, r20
    1628:	36 95       	lsr	r19
    162a:	27 95       	ror	r18
    162c:	36 95       	lsr	r19
    162e:	27 95       	ror	r18
    1630:	ab e7       	ldi	r26, 0x7B	; 123
    1632:	b4 e1       	ldi	r27, 0x14	; 20
    1634:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <__umulhisi3>
    1638:	96 95       	lsr	r25
    163a:	87 95       	ror	r24
    163c:	64 e6       	ldi	r22, 0x64	; 100
    163e:	68 9f       	mul	r22, r24
    1640:	90 01       	movw	r18, r0
    1642:	69 9f       	mul	r22, r25
    1644:	30 0d       	add	r19, r0
    1646:	11 24       	eor	r1, r1
    1648:	ba 01       	movw	r22, r20
    164a:	62 1b       	sub	r22, r18
    164c:	73 0b       	sbc	r23, r19
    164e:	82 ee       	ldi	r24, 0xE2	; 226
    1650:	94 e0       	ldi	r25, 0x04	; 4
    1652:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
            break;
    1656:	52 c0       	rjmp	.+164    	; 0x16fc <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1658:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <servo_disp_value>
    165c:	82 ee       	ldi	r24, 0xE2	; 226
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
            break;
    1664:	4b c0       	rjmp	.+150    	; 0x16fc <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1666:	68 ef       	ldi	r22, 0xF8	; 248
    1668:	8c ee       	ldi	r24, 0xEC	; 236
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1670:	68 ef       	ldi	r22, 0xF8	; 248
    1672:	88 ef       	ldi	r24, 0xF8	; 248
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
            break;
    167a:	40 c0       	rjmp	.+128    	; 0x16fc <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    167c:	44 ef       	ldi	r20, 0xF4	; 244
    167e:	51 e0       	ldi	r21, 0x01	; 1
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 ea       	ldi	r24, 0xA0	; 160
    1686:	92 e0       	ldi	r25, 0x02	; 2
    1688:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <evTime_process_period>
    168c:	89 2b       	or	r24, r25
    168e:	b1 f1       	breq	.+108    	; 0x16fc <disp_process+0x252>
			{
				if (blink_state == 0)
    1690:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <blink_state>
    1694:	81 11       	cpse	r24, r1
    1696:	0e c0       	rjmp	.+28     	; 0x16b4 <disp_process+0x20a>
				{
					blink_state = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    169e:	67 ef       	ldi	r22, 0xF7	; 247
    16a0:	8c ee       	ldi	r24, 0xEC	; 236
    16a2:	94 e0       	ldi	r25, 0x04	; 4
    16a4:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    16a8:	67 ef       	ldi	r22, 0xF7	; 247
    16aa:	88 ef       	ldi	r24, 0xF8	; 248
    16ac:	94 e0       	ldi	r25, 0x04	; 4
    16ae:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    16b4:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <blink_state>
					if (blink_cnt == 0) 
    16b8:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <blink_cnt>
    16bc:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <blink_cnt+0x1>
    16c0:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <blink_cnt+0x2>
    16c4:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <blink_cnt+0x3>
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	a1 05       	cpc	r26, r1
    16cc:	b1 05       	cpc	r27, r1
    16ce:	29 f4       	brne	.+10     	; 0x16da <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
						break;
    16d8:	11 c0       	rjmp	.+34     	; 0x16fc <disp_process+0x252>
					}
					blink_cnt--;
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	a1 09       	sbc	r26, r1
    16de:	b1 09       	sbc	r27, r1
    16e0:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <blink_cnt>
    16e4:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <blink_cnt+0x1>
    16e8:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <blink_cnt+0x2>
    16ec:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16f0:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <second_disp_blink_val>
    16f4:	82 ee       	ldi	r24, 0xE2	; 226
    16f6:	94 e0       	ldi	r25, 0x04	; 4
    16f8:	0e 94 a2 09 	call	0x1344	; 0x1344 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16fc:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <timer_disp_process.1979>
    1700:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <timer_disp_process.1979+0x1>
    1704:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <timer_disp_process.1979+0x2>
    1708:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <timer_disp_process.1979+0x3>
    170c:	c2 96       	adiw	r24, 0x32	; 50
    170e:	a1 1d       	adc	r26, r1
    1710:	b1 1d       	adc	r27, r1
    1712:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <timer_disp_process.1979>
    1716:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <timer_disp_process.1979+0x1>
    171a:	a0 93 98 02 	sts	0x0298, r26	; 0x800298 <timer_disp_process.1979+0x2>
    171e:	b0 93 99 02 	sts	0x0299, r27	; 0x800299 <timer_disp_process.1979+0x3>
    1722:	08 95       	ret

00001724 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1728:	00 91 0f 05 	lds	r16, 0x050F	; 0x80050f <mktime+0x2>
    172c:	10 91 10 05 	lds	r17, 0x0510	; 0x800510 <mktime+0x3>
    1730:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <mktime+0x4>
    1734:	30 91 12 05 	lds	r19, 0x0512	; 0x800512 <mktime+0x5>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	80 0f       	add	r24, r16
    173e:	91 1f       	adc	r25, r17
    1740:	a2 1f       	adc	r26, r18
    1742:	b3 1f       	adc	r27, r19
    1744:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <animation_time>
    1748:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <animation_time+0x1>
    174c:	a0 93 aa 02 	sts	0x02AA, r26	; 0x8002aa <animation_time+0x2>
    1750:	b0 93 ab 02 	sts	0x02AB, r27	; 0x8002ab <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    1754:	62 e0       	ldi	r22, 0x02	; 2
    1756:	84 2f       	mov	r24, r20
    1758:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
}
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1762:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	29 f0       	breq	.+10     	; 0x1774 <animation+0x12>
    176a:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	09 f0       	breq	.+2      	; 0x1774 <animation+0x12>
    1772:	78 c0       	rjmp	.+240    	; 0x1864 <animation+0x102>
    1774:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    1778:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    177c:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    1780:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    1784:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <timer_anim.1999>
    1788:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <timer_anim.1999+0x1>
    178c:	a0 91 94 02 	lds	r26, 0x0294	; 0x800294 <timer_anim.1999+0x2>
    1790:	b0 91 95 02 	lds	r27, 0x0295	; 0x800295 <timer_anim.1999+0x3>
    1794:	84 17       	cp	r24, r20
    1796:	95 07       	cpc	r25, r21
    1798:	a6 07       	cpc	r26, r22
    179a:	b7 07       	cpc	r27, r23
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <animation+0x3e>
    179e:	62 c0       	rjmp	.+196    	; 0x1864 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    17a0:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
    17a4:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
    17a8:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
    17ac:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
    17b0:	81 55       	subi	r24, 0x51	; 81
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	af 4f       	sbci	r26, 0xFF	; 255
    17b6:	bf 4f       	sbci	r27, 0xFF	; 255
    17b8:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <timer_anim.1999>
    17bc:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <timer_anim.1999+0x1>
    17c0:	a0 93 94 02 	sts	0x0294, r26	; 0x800294 <timer_anim.1999+0x2>
    17c4:	b0 93 95 02 	sts	0x0295, r27	; 0x800295 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17c8:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <segment1+0x4>
    17cc:	82 30       	cpi	r24, 0x02	; 2
    17ce:	61 f4       	brne	.+24     	; 0x17e8 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17d0:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17d4:	8e ee       	ldi	r24, 0xEE	; 238
    17d6:	94 e0       	ldi	r25, 0x04	; 4
    17d8:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17dc:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17e0:	8a ef       	ldi	r24, 0xFA	; 250
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17e8:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <segment2+0x4>
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	61 f4       	brne	.+24     	; 0x1808 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17f0:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    17f4:	8c ee       	ldi	r24, 0xEC	; 236
    17f6:	94 e0       	ldi	r25, 0x04	; 4
    17f8:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17fc:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    1800:	88 ef       	ldi	r24, 0xF8	; 248
    1802:	94 e0       	ldi	r25, 0x04	; 4
    1804:	0e 94 c5 09 	call	0x138a	; 0x138a <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1808:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    180c:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    1810:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    1814:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    1818:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <animation_time>
    181c:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <animation_time+0x1>
    1820:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <animation_time+0x2>
    1824:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <animation_time+0x3>
    1828:	84 17       	cp	r24, r20
    182a:	95 07       	cpc	r25, r21
    182c:	a6 07       	cpc	r26, r22
    182e:	b7 07       	cpc	r27, r23
    1830:	28 f4       	brcc	.+10     	; 0x183c <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
			LED_ACUM_OFF;
    183a:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    183c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <anim_iteration.2000>
    1840:	9f 5f       	subi	r25, 0xFF	; 255
    1842:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		anim_iteration2--;
    1846:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <anim_iteration2.2001>
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    1850:	9f 3f       	cpi	r25, 0xFF	; 255
    1852:	19 f4       	brne	.+6      	; 0x185a <animation+0xf8>
    1854:	99 ef       	ldi	r25, 0xF9	; 249
    1856:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    185a:	88 3f       	cpi	r24, 0xF8	; 248
    185c:	19 f4       	brne	.+6      	; 0x1864 <animation+0x102>
    185e:	8e ef       	ldi	r24, 0xFE	; 254
    1860:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
    1864:	08 95       	ret

00001866 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1866:	e1 99       	sbic	0x1c, 1	; 28
    1868:	fe cf       	rjmp	.-4      	; 0x1866 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    186a:	9f bb       	out	0x1f, r25	; 31
    186c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    186e:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1870:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1872:	e1 9a       	sbi	0x1c, 1	; 28
    1874:	08 95       	ret

00001876 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1876:	e1 99       	sbic	0x1c, 1	; 28
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    187a:	9f bb       	out	0x1f, r25	; 31
    187c:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    187e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1880:	8d b3       	in	r24, 0x1d	; 29
    1882:	08 95       	ret

00001884 <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    1884:	cf 93       	push	r28
    1886:	c8 2f       	mov	r28, r24
    1888:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    188c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    1896:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    189a:	8c 2f       	mov	r24, r28
    189c:	0e 94 38 0a 	call	0x1470	; 0x1470 <display_set_error>
    18a0:	0e 94 bb 07 	call	0xf76	; 0xf76 <dcmotor_set_error>
    18a4:	c1 30       	cpi	r28, 0x01	; 1
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <set_error_state+0x2c>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 ba 11 	call	0x2374	; 0x2374 <servo_error>
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <set_error_state+0x32>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	0e 94 ba 11 	call	0x2374	; 0x2374 <servo_error>
    18b6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <system_error>
    18ba:	c0 93 fe 04 	sts	0x04FE, r28	; 0x8004fe <led_blink>
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <error_init>:
    18c2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <error_motor_state>
    18c6:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <error_motor_last_state>
    18ca:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <error_motor_status>
    18ce:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <error_servo_status>
    18d2:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <error_servo_state>
    18d6:	8b ec       	ldi	r24, 0xCB	; 203
    18d8:	92 e0       	ldi	r25, 0x02	; 2
    18da:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <evTime_off>
    18de:	8b eb       	ldi	r24, 0xBB	; 187
    18e0:	92 e0       	ldi	r25, 0x02	; 2
    18e2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <evTime_off>
    18e6:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <led_blink>
    18ea:	08 95       	ret

000018ec <error_deinit>:
    18ec:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <error_motor_state>
    18f0:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <error_motor_last_state>
    18f4:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <error_motor_status>
    18f8:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <error_servo_status>
    18fc:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <error_servo_state>
    1900:	8b ec       	ldi	r24, 0xCB	; 203
    1902:	92 e0       	ldi	r25, 0x02	; 2
    1904:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <evTime_off>
    1908:	8b eb       	ldi	r24, 0xBB	; 187
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <evTime_off>
    1910:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <led_blink>
    1914:	08 95       	ret

00001916 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	debug_msg("ERROR: reset timer");
    1916:	82 e4       	ldi	r24, 0x42	; 66
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	9f 93       	push	r25
    191c:	8f 93       	push	r24
    191e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	error_servo_tim = mktime.ms + 2000;
    1922:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
    1926:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
    192a:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
    192e:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
    1932:	80 53       	subi	r24, 0x30	; 48
    1934:	98 4f       	sbci	r25, 0xF8	; 248
    1936:	af 4f       	sbci	r26, 0xFF	; 255
    1938:	bf 4f       	sbci	r27, 0xFF	; 255
    193a:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <error_servo_tim>
    193e:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <error_servo_tim+0x1>
    1942:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <error_servo_tim+0x2>
    1946:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <error_servo_tim+0x3>
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	08 95       	ret

00001950 <error_event>:

void error_event(void)
{
    1950:	4f 92       	push	r4
    1952:	5f 92       	push	r5
    1954:	6f 92       	push	r6
    1956:	7f 92       	push	r7
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1968:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    196c:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    1970:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    1974:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    1978:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <error_event_timer.2070>
    197c:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <error_event_timer.2070+0x1>
    1980:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <error_event_timer.2070+0x2>
    1984:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <error_event_timer.2070+0x3>
    1988:	84 17       	cp	r24, r20
    198a:	95 07       	cpc	r25, r21
    198c:	a6 07       	cpc	r26, r22
    198e:	b7 07       	cpc	r27, r23
    1990:	08 f0       	brcs	.+2      	; 0x1994 <error_event+0x44>
    1992:	45 c2       	rjmp	.+1162   	; 0x1e1e <error_event+0x4ce>
    1994:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    1998:	80 ff       	sbrs	r24, 0
    199a:	41 c2       	rjmp	.+1154   	; 0x1e1e <error_event+0x4ce>
	{
		error_event_timer = mktime.ms + 250;
    199c:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    19a0:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    19a4:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    19a8:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    19ac:	46 50       	subi	r20, 0x06	; 6
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	6f 4f       	sbci	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	40 93 b3 02 	sts	0x02B3, r20	; 0x8002b3 <error_event_timer.2070>
    19b8:	50 93 b4 02 	sts	0x02B4, r21	; 0x8002b4 <error_event_timer.2070+0x1>
    19bc:	60 93 b5 02 	sts	0x02B5, r22	; 0x8002b5 <error_event_timer.2070+0x2>
    19c0:	70 93 b6 02 	sts	0x02B6, r23	; 0x8002b6 <error_event_timer.2070+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    19c4:	81 fd       	sbrc	r24, 1
    19c6:	2b c2       	rjmp	.+1110   	; 0x1e1e <error_event+0x4ce>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    19c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    19cc:	4b 01       	movw	r8, r22
    19ce:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    19d0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    19d4:	bc 01       	movw	r22, r24
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatunsisf>
    19de:	6b 01       	movw	r12, r22
    19e0:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    19e2:	25 e9       	ldi	r18, 0x95	; 149
    19e4:	35 e6       	ldi	r19, 0x65	; 101
    19e6:	40 ed       	ldi	r20, 0xD0	; 208
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <pow>
    19ee:	2b 01       	movw	r4, r22
    19f0:	3c 01       	movw	r6, r24
    19f2:	a7 01       	movw	r20, r14
    19f4:	96 01       	movw	r18, r12
    19f6:	c5 01       	movw	r24, r10
    19f8:	b4 01       	movw	r22, r8
    19fa:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	48 ec       	ldi	r20, 0xC8	; 200
    1a04:	52 e4       	ldi	r21, 0x42	; 66
    1a06:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1a0a:	4b 01       	movw	r8, r22
    1a0c:	5c 01       	movw	r10, r24
    1a0e:	23 e3       	ldi	r18, 0x33	; 51
    1a10:	33 e3       	ldi	r19, 0x33	; 51
    1a12:	43 e6       	ldi	r20, 0x63	; 99
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	c7 01       	movw	r24, r14
    1a18:	b6 01       	movw	r22, r12
    1a1a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	48 ec       	ldi	r20, 0xC8	; 200
    1a24:	52 e4       	ldi	r21, 0x42	; 66
    1a26:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	c5 01       	movw	r24, r10
    1a30:	b4 01       	movw	r22, r8
    1a32:	0e 94 9d 18 	call	0x313a	; 0x313a <__subsf3>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e4       	ldi	r20, 0x40	; 64
    1a3c:	50 e4       	ldi	r21, 0x40	; 64
    1a3e:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1a42:	4b 01       	movw	r8, r22
    1a44:	5c 01       	movw	r10, r24
    1a46:	28 e5       	ldi	r18, 0x58	; 88
    1a48:	39 e3       	ldi	r19, 0x39	; 57
    1a4a:	44 e3       	ldi	r20, 0x34	; 52
    1a4c:	5c e3       	ldi	r21, 0x3C	; 60
    1a4e:	c3 01       	movw	r24, r6
    1a50:	b2 01       	movw	r22, r4
    1a52:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	c5 01       	movw	r24, r10
    1a5c:	b4 01       	movw	r22, r8
    1a5e:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3>
    1a62:	4b 01       	movw	r8, r22
    1a64:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	0e 94 4e 07 	call	0xe9c	; 0xe9c <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a6c:	68 2f       	mov	r22, r24
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	62 53       	subi	r22, 0x32	; 50
    1a72:	71 09       	sbc	r23, r1
    1a74:	07 2e       	mov	r0, r23
    1a76:	00 0c       	add	r0, r0
    1a78:	88 0b       	sbc	r24, r24
    1a7a:	99 0b       	sbc	r25, r25
    1a7c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__floatsisf>
    1a80:	a7 01       	movw	r20, r14
    1a82:	96 01       	movw	r18, r12
    1a84:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	48 ec       	ldi	r20, 0xC8	; 200
    1a8e:	53 e4       	ldi	r21, 0x43	; 67
    1a90:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    1a94:	a5 01       	movw	r20, r10
    1a96:	94 01       	movw	r18, r8
    1a98:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3>
    1a9c:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <motor_error_value>
    1aa0:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <motor_error_value+0x1>
    1aa4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <motor_error_value+0x2>
    1aa8:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	0e 94 a8 10 	call	0x2150	; 0x2150 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1ab2:	42 e0       	ldi	r20, 0x02	; 2
    1ab4:	5b e2       	ldi	r21, 0x2B	; 43
    1ab6:	67 e0       	ldi	r22, 0x07	; 7
    1ab8:	7d e3       	ldi	r23, 0x3D	; 61
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	0e 94 c1 10 	call	0x2182	; 0x2182 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1ac0:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <motor_error_value>
    1ac4:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <motor_error_value+0x1>
    1ac8:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <motor_error_value+0x2>
    1acc:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <motor_error_value+0x3>
    1ad0:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__gesf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	44 f4       	brge	.+16     	; 0x1ae8 <error_event+0x198>
    1ad8:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_is_on>
    1adc:	89 2b       	or	r24, r25
    1ade:	21 f0       	breq	.+8      	; 0x1ae8 <error_event+0x198>
		{
			error_motor_status = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <error_motor_status>
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1ae8:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 4e 07 	call	0xe9c	; 0xe9c <dark_menu_get_value>
    1af2:	81 11       	cpse	r24, r1
    1af4:	d2 c0       	rjmp	.+420    	; 0x1c9a <error_event+0x34a>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1af6:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <error_motor_status>
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <error_event+0x1b0>
    1afe:	88 c0       	rjmp	.+272    	; 0x1c10 <error_event+0x2c0>
			{
				switch(error_motor_state)
    1b00:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <error_motor_state>
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <error_event+0x1ba>
    1b08:	60 c0       	rjmp	.+192    	; 0x1bca <error_event+0x27a>
    1b0a:	28 f4       	brcc	.+10     	; 0x1b16 <error_event+0x1c6>
    1b0c:	88 23       	and	r24, r24
    1b0e:	51 f0       	breq	.+20     	; 0x1b24 <error_event+0x1d4>
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	69 f1       	breq	.+90     	; 0x1b6e <error_event+0x21e>
    1b14:	c2 c0       	rjmp	.+388    	; 0x1c9a <error_event+0x34a>
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <error_event+0x1cc>
    1b1a:	62 c0       	rjmp	.+196    	; 0x1be0 <error_event+0x290>
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <error_event+0x1d2>
    1b20:	63 c0       	rjmp	.+198    	; 0x1be8 <error_event+0x298>
    1b22:	bb c0       	rjmp	.+374    	; 0x1c9a <error_event+0x34a>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b2a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b2e:	2e e1       	ldi	r18, 0x1E	; 30
    1b30:	ac 01       	movw	r20, r24
    1b32:	24 9f       	mul	r18, r20
    1b34:	c0 01       	movw	r24, r0
    1b36:	25 9f       	mul	r18, r21
    1b38:	90 0d       	add	r25, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	48 e8       	ldi	r20, 0x88	; 136
    1b3e:	53 e1       	ldi	r21, 0x13	; 19
    1b40:	7a 01       	movw	r14, r20
    1b42:	e8 1a       	sub	r14, r24
    1b44:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b46:	ff 92       	push	r15
    1b48:	ef 92       	push	r14
    1b4a:	85 e5       	ldi	r24, 0x55	; 85
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b56:	a7 01       	movw	r20, r14
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	8b ec       	ldi	r24, 0xCB	; 203
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
					break;
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	96 c0       	rjmp	.+300    	; 0x1c9a <error_event+0x34a>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b6e:	8b ec       	ldi	r24, 0xCB	; 203
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <error_event+0x22c>
    1b7a:	8f c0       	rjmp	.+286    	; 0x1c9a <error_event+0x34a>
						{
							dcmotor_set_try();
    1b7c:	0e 94 c9 07 	call	0xf92	; 0xf92 <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b80:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b84:	2e e1       	ldi	r18, 0x1E	; 30
    1b86:	ac 01       	movw	r20, r24
    1b88:	24 9f       	mul	r18, r20
    1b8a:	c0 01       	movw	r24, r0
    1b8c:	25 9f       	mul	r18, r21
    1b8e:	90 0d       	add	r25, r0
    1b90:	11 24       	eor	r1, r1
    1b92:	48 e8       	ldi	r20, 0x88	; 136
    1b94:	53 e1       	ldi	r21, 0x13	; 19
    1b96:	7a 01       	movw	r14, r20
    1b98:	e8 1a       	sub	r14, r24
    1b9a:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b9c:	ff 92       	push	r15
    1b9e:	ef 92       	push	r14
    1ba0:	84 e7       	ldi	r24, 0x74	; 116
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	9f 93       	push	r25
    1ba6:	8f 93       	push	r24
    1ba8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1bac:	a7 01       	movw	r20, r14
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	8b ec       	ldi	r24, 0xCB	; 203
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	68 c0       	rjmp	.+208    	; 0x1c9a <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1bca:	8b ec       	ldi	r24, 0xCB	; 203
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <error_event+0x288>
    1bd6:	61 c0       	rjmp	.+194    	; 0x1c9a <error_event+0x34a>
						{
							error_motor_state = ERR_M_ERROR;
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
    1bde:	5d c0       	rjmp	.+186    	; 0x1c9a <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	0e 94 42 0c 	call	0x1884	; 0x1884 <set_error_state>
					break;
    1be6:	59 c0       	rjmp	.+178    	; 0x1c9a <error_event+0x34a>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1be8:	8b ec       	ldi	r24, 0xCB	; 203
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <error_event+0x2a6>
    1bf4:	52 c0       	rjmp	.+164    	; 0x1c9a <error_event+0x34a>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bf6:	40 ed       	ldi	r20, 0xD0	; 208
    1bf8:	57 e0       	ldi	r21, 0x07	; 7
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	8b ec       	ldi	r24, 0xCB	; 203
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
							error_motor_state = error_motor_last_state;
    1c06:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <error_motor_last_state>
    1c0a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
    1c0e:	45 c0       	rjmp	.+138    	; 0x1c9a <error_event+0x34a>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1c10:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <error_motor_state>
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	f1 f0       	breq	.+60     	; 0x1c54 <error_event+0x304>
    1c18:	18 f4       	brcc	.+6      	; 0x1c20 <error_event+0x2d0>
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <error_event+0x2da>
    1c1e:	3d c0       	rjmp	.+122    	; 0x1c9a <error_event+0x34a>
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	79 f1       	breq	.+94     	; 0x1c82 <error_event+0x332>
    1c24:	84 30       	cpi	r24, 0x04	; 4
    1c26:	89 f1       	breq	.+98     	; 0x1c8a <error_event+0x33a>
    1c28:	38 c0       	rjmp	.+112    	; 0x1c9a <error_event+0x34a>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1c2a:	8b ec       	ldi	r24, 0xCB	; 203
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1c32:	89 2b       	or	r24, r25
    1c34:	91 f1       	breq	.+100    	; 0x1c9a <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c36:	40 ed       	ldi	r20, 0xD0	; 208
    1c38:	57 e0       	ldi	r21, 0x07	; 7
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	8b ec       	ldi	r24, 0xCB	; 203
    1c40:	92 e0       	ldi	r25, 0x02	; 2
    1c42:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c46:	84 e0       	ldi	r24, 0x04	; 4
    1c48:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <error_motor_last_state>
    1c52:	23 c0       	rjmp	.+70     	; 0x1c9a <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c54:	8b ec       	ldi	r24, 0xCB	; 203
    1c56:	92 e0       	ldi	r25, 0x02	; 2
    1c58:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	e9 f0       	breq	.+58     	; 0x1c9a <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c60:	40 ed       	ldi	r20, 0xD0	; 208
    1c62:	57 e0       	ldi	r21, 0x07	; 7
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	8b ec       	ldi	r24, 0xCB	; 203
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
						dcmotor_set_normal_state();
    1c70:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <error_motor_last_state>
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	0e 94 42 0c 	call	0x1884	; 0x1884 <set_error_state>
					break;
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <error_event+0x34a>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c8a:	8b ec       	ldi	r24, 0xCB	; 203
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1c92:	89 2b       	or	r24, r25
    1c94:	11 f0       	breq	.+4      	; 0x1c9a <error_event+0x34a>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1c96:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <dark_menu_get_value>
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	bd c0       	rjmp	.+378    	; 0x1e1e <error_event+0x4ce>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <servo_error_value+0x1>
    1cb0:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 a8 10 	call	0x2150	; 0x2150 <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1cba:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <servo_error_value>
    1cbe:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <servo_error_value+0x1>
    1cc2:	28 17       	cp	r18, r24
    1cc4:	39 07       	cpc	r19, r25
    1cc6:	20 f5       	brcc	.+72     	; 0x1d10 <error_event+0x3c0>
    1cc8:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    1ccc:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    1cd0:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    1cd4:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    1cd8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <error_servo_tim>
    1cdc:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <error_servo_tim+0x1>
    1ce0:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <error_servo_tim+0x2>
    1ce4:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <error_servo_tim+0x3>
    1ce8:	84 17       	cp	r24, r20
    1cea:	95 07       	cpc	r25, r21
    1cec:	a6 07       	cpc	r26, r22
    1cee:	b7 07       	cpc	r27, r23
    1cf0:	78 f4       	brcc	.+30     	; 0x1d10 <error_event+0x3c0>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1cf8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <error_servo_state>
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	51 f1       	breq	.+84     	; 0x1d54 <error_event+0x404>
    1d00:	a8 f0       	brcs	.+42     	; 0x1d2c <error_event+0x3dc>
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <error_event+0x3b8>
    1d06:	4b c0       	rjmp	.+150    	; 0x1d9e <error_event+0x44e>
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <error_event+0x3be>
    1d0c:	51 c0       	rjmp	.+162    	; 0x1db0 <error_event+0x460>
    1d0e:	87 c0       	rjmp	.+270    	; 0x1e1e <error_event+0x4ce>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1d10:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1d14:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <error_servo_state>
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <error_event+0x3ce>
    1d1c:	66 c0       	rjmp	.+204    	; 0x1dea <error_event+0x49a>
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <error_event+0x3d4>
    1d22:	7a c0       	rjmp	.+244    	; 0x1e18 <error_event+0x4c8>
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <error_event+0x3da>
    1d28:	7a c0       	rjmp	.+244    	; 0x1e1e <error_event+0x4ce>
    1d2a:	46 c0       	rjmp	.+140    	; 0x1db8 <error_event+0x468>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1d32:	88 e9       	ldi	r24, 0x98	; 152
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	9f 93       	push	r25
    1d38:	8f 93       	push	r24
    1d3a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1d3e:	4c ed       	ldi	r20, 0xDC	; 220
    1d40:	55 e0       	ldi	r21, 0x05	; 5
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	8b eb       	ldi	r24, 0xBB	; 187
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
					break;
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	65 c0       	rjmp	.+202    	; 0x1e1e <error_event+0x4ce>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d54:	8b eb       	ldi	r24, 0xBB	; 187
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1d5c:	89 2b       	or	r24, r25
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <error_event+0x412>
    1d60:	5e c0       	rjmp	.+188    	; 0x1e1e <error_event+0x4ce>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1d62:	0e 94 2c 12 	call	0x2458	; 0x2458 <servo_get_try_cnt>
    1d66:	04 97       	sbiw	r24, 0x04	; 4
    1d68:	24 f0       	brlt	.+8      	; 0x1d72 <error_event+0x422>
							{
								error_servo_state = ERR_S_ERROR;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <error_servo_state>
								break;
    1d70:	56 c0       	rjmp	.+172    	; 0x1e1e <error_event+0x4ce>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1d72:	40 ed       	ldi	r20, 0xD0	; 208
    1d74:	57 e0       	ldi	r21, 0x07	; 7
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	8b eb       	ldi	r24, 0xBB	; 187
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
							error_servo_state = ERR_S_TRY;
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <error_servo_state>
							servo_enable_try();
    1d88:	0e 94 20 12 	call	0x2440	; 0x2440 <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1d8c:	83 eb       	ldi	r24, 0xB3	; 179
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	9f 93       	push	r25
    1d92:	8f 93       	push	r24
    1d94:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	40 c0       	rjmp	.+128    	; 0x1e1e <error_event+0x4ce>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1d9e:	8b eb       	ldi	r24, 0xBB	; 187
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1da6:	89 2b       	or	r24, r25
    1da8:	d1 f1       	breq	.+116    	; 0x1e1e <error_event+0x4ce>
						{
							error_servo_state = ERR_S_OK;
    1daa:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <error_servo_state>
    1dae:	37 c0       	rjmp	.+110    	; 0x1e1e <error_event+0x4ce>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	0e 94 42 0c 	call	0x1884	; 0x1884 <set_error_state>
					break;
    1db6:	33 c0       	rjmp	.+102    	; 0x1e1e <error_event+0x4ce>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1db8:	8b eb       	ldi	r24, 0xBB	; 187
    1dba:	92 e0       	ldi	r25, 0x02	; 2
    1dbc:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1dc0:	89 2b       	or	r24, r25
    1dc2:	69 f1       	breq	.+90     	; 0x1e1e <error_event+0x4ce>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1dc4:	40 ed       	ldi	r20, 0xD0	; 208
    1dc6:	57 e0       	ldi	r21, 0x07	; 7
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	8b eb       	ldi	r24, 0xBB	; 187
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
						error_servo_state = ERR_M_OK;
    1dd4:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dd8:	8d ec       	ldi	r24, 0xCD	; 205
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	1a c0       	rjmp	.+52     	; 0x1e1e <error_event+0x4ce>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1dea:	8b eb       	ldi	r24, 0xBB	; 187
    1dec:	92 e0       	ldi	r25, 0x02	; 2
    1dee:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    1df2:	89 2b       	or	r24, r25
    1df4:	a1 f0       	breq	.+40     	; 0x1e1e <error_event+0x4ce>
					{
						error_servo_state = ERR_S_OK;
    1df6:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dfa:	8d ec       	ldi	r24, 0xCD	; 205
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	9f 93       	push	r25
    1e00:	8f 93       	push	r24
    1e02:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1e06:	6c ea       	ldi	r22, 0xAC	; 172
    1e08:	7d e0       	ldi	r23, 0x0D	; 13
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 a2 12 	call	0x2544	; 0x2544 <servo_try_reset_timeout>
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <error_event+0x4ce>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	0e 94 42 0c 	call	0x1884	; 0x1884 <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	bf 90       	pop	r11
    1e28:	af 90       	pop	r10
    1e2a:	9f 90       	pop	r9
    1e2c:	8f 90       	pop	r8
    1e2e:	7f 90       	pop	r7
    1e30:	6f 90       	pop	r6
    1e32:	5f 90       	pop	r5
    1e34:	4f 90       	pop	r4
    1e36:	08 95       	ret

00001e38 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1e38:	4e e5       	ldi	r20, 0x5E	; 94
    1e3a:	51 e0       	ldi	r21, 0x01	; 1
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	8e ea       	ldi	r24, 0xAE	; 174
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <evTime_process_period>
    1e48:	89 2b       	or	r24, r25
    1e4a:	09 f1       	breq	.+66     	; 0x1e8e <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e4c:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <led_blink>
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	71 f4       	brne	.+28     	; 0x1e70 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e54:	92 b3       	in	r25, 0x12	; 18
    1e56:	80 e1       	ldi	r24, 0x10	; 16
    1e58:	89 27       	eor	r24, r25
    1e5a:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e5c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    1e60:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    1e64:	90 62       	ori	r25, 0x20	; 32
    1e66:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    1e6a:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    1e6e:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	69 f4       	brne	.+26     	; 0x1e8e <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1e74:	92 b3       	in	r25, 0x12	; 18
    1e76:	80 e4       	ldi	r24, 0x40	; 64
    1e78:	89 27       	eor	r24, r25
    1e7a:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e7c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    1e80:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    1e84:	90 62       	ori	r25, 0x20	; 32
    1e86:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    1e8a:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    1e8e:	08 95       	ret

00001e90 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1e90:	fc 01       	movw	r30, r24
    1e92:	20 81       	ld	r18, Z
    1e94:	31 81       	ldd	r19, Z+1	; 0x01
    1e96:	62 30       	cpi	r22, 0x02	; 2
    1e98:	58 f0       	brcs	.+22     	; 0x1eb0 <filtered_value+0x20>
    1e9a:	32 96       	adiw	r30, 0x02	; 2
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	41 91       	ld	r20, Z+
    1ea0:	51 91       	ld	r21, Z+
    1ea2:	24 0f       	add	r18, r20
    1ea4:	35 1f       	adc	r19, r21
    1ea6:	36 95       	lsr	r19
    1ea8:	27 95       	ror	r18
    1eaa:	9f 5f       	subi	r25, 0xFF	; 255
    1eac:	69 13       	cpse	r22, r25
    1eae:	f7 cf       	rjmp	.-18     	; 0x1e9e <filtered_value+0xe>
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	08 95       	ret

00001eb4 <init_measure>:
    1eb4:	e6 e1       	ldi	r30, 0x16	; 22
    1eb6:	f3 e0       	ldi	r31, 0x03	; 3
    1eb8:	2e e3       	ldi	r18, 0x3E	; 62
    1eba:	33 e0       	ldi	r19, 0x03	; 3
    1ebc:	81 ef       	ldi	r24, 0xF1	; 241
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	81 93       	st	Z+, r24
    1ec2:	91 93       	st	Z+, r25
    1ec4:	2e 17       	cp	r18, r30
    1ec6:	3f 07       	cpc	r19, r31
    1ec8:	d9 f7       	brne	.-10     	; 0x1ec0 <init_measure+0xc>
    1eca:	e5 ef       	ldi	r30, 0xF5	; 245
    1ecc:	f2 e0       	ldi	r31, 0x02	; 2
    1ece:	83 e1       	ldi	r24, 0x13	; 19
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	11 92       	st	Z+, r1
    1ed4:	11 92       	st	Z+, r1
    1ed6:	8e 17       	cp	r24, r30
    1ed8:	9f 07       	cpc	r25, r31
    1eda:	d9 f7       	brne	.-10     	; 0x1ed2 <init_measure+0x1e>
    1edc:	ed ed       	ldi	r30, 0xDD	; 221
    1ede:	f2 e0       	ldi	r31, 0x02	; 2
    1ee0:	81 ef       	ldi	r24, 0xF1	; 241
    1ee2:	92 e0       	ldi	r25, 0x02	; 2
    1ee4:	11 92       	st	Z+, r1
    1ee6:	11 92       	st	Z+, r1
    1ee8:	8e 17       	cp	r24, r30
    1eea:	9f 07       	cpc	r25, r31
    1eec:	d9 f7       	brne	.-10     	; 0x1ee4 <init_measure+0x30>
    1eee:	08 95       	ret

00001ef0 <measure_process>:
    1ef0:	cf 92       	push	r12
    1ef2:	df 92       	push	r13
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    1f00:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    1f04:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    1f08:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    1f0c:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <measure_timer>
    1f10:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <measure_timer+0x1>
    1f14:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <measure_timer+0x2>
    1f18:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <measure_timer+0x3>
    1f1c:	84 17       	cp	r24, r20
    1f1e:	95 07       	cpc	r25, r21
    1f20:	a6 07       	cpc	r26, r22
    1f22:	b7 07       	cpc	r27, r23
    1f24:	08 f0       	brcs	.+2      	; 0x1f28 <measure_process+0x38>
    1f26:	d1 c0       	rjmp	.+418    	; 0x20ca <measure_process+0x1da>
    1f28:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
    1f2c:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
    1f30:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
    1f34:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
    1f38:	44 96       	adiw	r24, 0x14	; 20
    1f3a:	a1 1d       	adc	r26, r1
    1f3c:	b1 1d       	adc	r27, r1
    1f3e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <measure_timer>
    1f42:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <measure_timer+0x1>
    1f46:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <measure_timer+0x2>
    1f4a:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <measure_timer+0x3>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1f54:	ec 01       	movw	r28, r24
    1f56:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <motor_filter_value>
    1f5a:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <motor_filter_value+0x1>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatunsisf>
    1f66:	21 e7       	ldi	r18, 0x71	; 113
    1f68:	3d e3       	ldi	r19, 0x3D	; 61
    1f6a:	4a e8       	ldi	r20, 0x8A	; 138
    1f6c:	5e e3       	ldi	r21, 0x3E	; 62
    1f6e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    1f72:	6b 01       	movw	r12, r22
    1f74:	7c 01       	movw	r14, r24
    1f76:	be 01       	movw	r22, r28
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatunsisf>
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	c7 01       	movw	r24, r14
    1f86:	b6 01       	movw	r22, r12
    1f88:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3>
    1f8c:	0e 94 83 19 	call	0x3306	; 0x3306 <__fixunssfsi>
    1f90:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <accum_adc+0x1>
    1f94:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <accum_adc>
    1f98:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <iteration_adc_accum_table>
    1f9c:	e2 2f       	mov	r30, r18
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	ea 5e       	subi	r30, 0xEA	; 234
    1fa6:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa8:	71 83       	std	Z+1, r23	; 0x01
    1faa:	60 83       	st	Z, r22
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	82 0f       	add	r24, r18
    1fb0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <iteration_adc_accum_table>
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1fba:	80 32       	cpi	r24, 0x20	; 32
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	30 f0       	brcs	.+12     	; 0x1fcc <measure_process+0xdc>
    1fc0:	4f 97       	sbiw	r24, 0x1f	; 31
    1fc2:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <motor_adc+0x1>
    1fc6:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <motor_adc>
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <measure_process+0xe4>
    1fcc:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <motor_adc+0x1>
    1fd0:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <motor_adc>
    1fd4:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <iteration_adc_motor_table>
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	eb 50       	subi	r30, 0x0B	; 11
    1fe0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fe2:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <motor_adc>
    1fe6:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <motor_adc+0x1>
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1ff4:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <s_o_t_adc+0x1>
    1ff8:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <s_o_t_adc>
    1ffc:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <calibration_value>
    2000:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <calibration_value+0x1>
    2004:	21 15       	cp	r18, r1
    2006:	31 05       	cpc	r19, r1
    2008:	71 f0       	breq	.+28     	; 0x2026 <measure_process+0x136>
    200a:	28 17       	cp	r18, r24
    200c:	39 07       	cpc	r19, r25
    200e:	28 f4       	brcc	.+10     	; 0x201a <measure_process+0x12a>
    2010:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <s_o_t_adc+0x1>
    2014:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <s_o_t_adc>
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <measure_process+0x136>
    201a:	28 1b       	sub	r18, r24
    201c:	39 0b       	sbc	r19, r25
    201e:	30 93 db 02 	sts	0x02DB, r19	; 0x8002db <s_o_t_adc+0x1>
    2022:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <s_o_t_adc>
    2026:	c0 91 dc 02 	lds	r28, 0x02DC	; 0x8002dc <s_o_t_iteration_adc_table>
    202a:	ec 2f       	mov	r30, r28
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	e3 52       	subi	r30, 0x23	; 35
    2034:	fd 4f       	sbci	r31, 0xFD	; 253
    2036:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <s_o_t_adc>
    203a:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <s_o_t_adc+0x1>
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	80 83       	st	Z, r24
    2042:	d0 91 15 03 	lds	r29, 0x0315	; 0x800315 <iteration_adc_motor_table>
    2046:	df 5f       	subi	r29, 0xFF	; 255
    2048:	d0 93 15 03 	sts	0x0315, r29	; 0x800315 <iteration_adc_motor_table>
    204c:	cf 5f       	subi	r28, 0xFF	; 255
    204e:	c0 93 dc 02 	sts	0x02DC, r28	; 0x8002dc <s_o_t_iteration_adc_table>
    2052:	64 e1       	ldi	r22, 0x14	; 20
    2054:	86 e1       	ldi	r24, 0x16	; 22
    2056:	93 e0       	ldi	r25, 0x03	; 3
    2058:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <filtered_value>
    205c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <filtered_accum_adc_val+0x1>
    2060:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <filtered_accum_adc_val>
    2064:	6f e0       	ldi	r22, 0x0F	; 15
    2066:	85 ef       	ldi	r24, 0xF5	; 245
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <filtered_value>
    206e:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <motor_filter_value+0x1>
    2072:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <motor_filter_value>
    2076:	6a e0       	ldi	r22, 0x0A	; 10
    2078:	8d ed       	ldi	r24, 0xDD	; 221
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <filtered_value>
    2080:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <s_o_t_filter_value+0x1>
    2084:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <s_o_t_filter_value>
    2088:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <debug_msg_counter>
    208c:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <debug_msg_counter+0x1>
    2090:	a0 91 d2 02 	lds	r26, 0x02D2	; 0x8002d2 <debug_msg_counter+0x2>
    2094:	b0 91 d3 02 	lds	r27, 0x02D3	; 0x8002d3 <debug_msg_counter+0x3>
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	a1 1d       	adc	r26, r1
    209c:	b1 1d       	adc	r27, r1
    209e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <debug_msg_counter>
    20a2:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <debug_msg_counter+0x1>
    20a6:	a0 93 d2 02 	sts	0x02D2, r26	; 0x8002d2 <debug_msg_counter+0x2>
    20aa:	b0 93 d3 02 	sts	0x02D3, r27	; 0x8002d3 <debug_msg_counter+0x3>
    20ae:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <iteration_adc_accum_table>
    20b2:	84 31       	cpi	r24, 0x14	; 20
    20b4:	11 f4       	brne	.+4      	; 0x20ba <measure_process+0x1ca>
    20b6:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <iteration_adc_accum_table>
    20ba:	ca 30       	cpi	r28, 0x0A	; 10
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <measure_process+0x1d2>
    20be:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <s_o_t_iteration_adc_table>
    20c2:	df 30       	cpi	r29, 0x0F	; 15
    20c4:	11 f4       	brne	.+4      	; 0x20ca <measure_process+0x1da>
    20c6:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <iteration_adc_motor_table>
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	ff 90       	pop	r15
    20d0:	ef 90       	pop	r14
    20d2:	df 90       	pop	r13
    20d4:	cf 90       	pop	r12
    20d6:	08 95       	ret

000020d8 <measure_get_servo_calibration>:
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	c0 90 0f 05 	lds	r12, 0x050F	; 0x80050f <mktime+0x2>
    20e8:	d0 90 10 05 	lds	r13, 0x0510	; 0x800510 <mktime+0x3>
    20ec:	e0 90 11 05 	lds	r14, 0x0511	; 0x800511 <mktime+0x4>
    20f0:	f0 90 12 05 	lds	r15, 0x0512	; 0x800512 <mktime+0x5>
    20f4:	8c ed       	ldi	r24, 0xDC	; 220
    20f6:	c8 0e       	add	r12, r24
    20f8:	85 e0       	ldi	r24, 0x05	; 5
    20fa:	d8 1e       	adc	r13, r24
    20fc:	e1 1c       	adc	r14, r1
    20fe:	f1 1c       	adc	r15, r1
    2100:	cd e0       	ldi	r28, 0x0D	; 13
    2102:	d5 e0       	ldi	r29, 0x05	; 5
    2104:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <measure_process>
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	ac 81       	ldd	r26, Y+4	; 0x04
    210e:	bd 81       	ldd	r27, Y+5	; 0x05
    2110:	c8 16       	cp	r12, r24
    2112:	d9 06       	cpc	r13, r25
    2114:	ea 06       	cpc	r14, r26
    2116:	fb 06       	cpc	r15, r27
    2118:	a8 f7       	brcc	.-22     	; 0x2104 <measure_get_servo_calibration+0x2c>
    211a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <s_o_t_filter_value>
    211e:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <s_o_t_filter_value+0x1>
    2122:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <calibration_value>
    2126:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <calibration_value+0x1>
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	86 ee       	ldi	r24, 0xE6	; 230
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	08 95       	ret

00002150 <measure_get_filtered_value>:
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	18 f4       	brcc	.+6      	; 0x215a <measure_get_filtered_value+0xa>
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	40 f0       	brcs	.+16     	; 0x2168 <measure_get_filtered_value+0x18>
    2158:	0c c0       	rjmp	.+24     	; 0x2172 <measure_get_filtered_value+0x22>
    215a:	83 30       	cpi	r24, 0x03	; 3
    215c:	79 f4       	brne	.+30     	; 0x217c <measure_get_filtered_value+0x2c>
    215e:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <filtered_accum_adc_val>
    2162:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <filtered_accum_adc_val+0x1>
    2166:	08 95       	ret
    2168:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <motor_filter_value>
    216c:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <motor_filter_value+0x1>
    2170:	08 95       	ret
    2172:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <s_o_t_filter_value>
    2176:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <s_o_t_filter_value+0x1>
    217a:	08 95       	ret
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	08 95       	ret

00002182 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	6a 01       	movw	r12, r20
    218c:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	18 f4       	brcc	.+6      	; 0x2198 <measure_get_current+0x16>
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	50 f0       	brcs	.+20     	; 0x21aa <measure_get_current+0x28>
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <measure_get_current+0x36>
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	a9 f4       	brne	.+42     	; 0x21c6 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    219c:	60 91 3e 03 	lds	r22, 0x033E	; 0x80033e <filtered_accum_adc_val>
    21a0:	70 91 3f 03 	lds	r23, 0x033F	; 0x80033f <filtered_accum_adc_val+0x1>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21a8:	11 c0       	rjmp	.+34     	; 0x21cc <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    21aa:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <motor_filter_value>
    21ae:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <motor_filter_value+0x1>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    21b8:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <s_o_t_filter_value>
    21bc:	70 91 f2 02 	lds	r23, 0x02F2	; 0x8002f2 <s_o_t_filter_value+0x1>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21c4:	03 c0       	rjmp	.+6      	; 0x21cc <measure_get_current+0x4a>
		
		default:
		adc = 0;
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    21cc:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatunsisf>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5a e3       	ldi	r21, 0x3A	; 58
    21d8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 ea       	ldi	r20, 0xA0	; 160
    21e2:	50 e4       	ldi	r21, 0x40	; 64
    21e4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    21e8:	a7 01       	movw	r20, r14
    21ea:	96 01       	movw	r18, r12
    21ec:	0e 94 0a 19 	call	0x3214	; 0x3214 <__divsf3>
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	08 95       	ret

000021fa <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	59 f0       	breq	.+22     	; 0x2220 <mem_save_data+0x26>
    220a:	28 f4       	brcc	.+10     	; 0x2216 <mem_save_data+0x1c>
    220c:	88 23       	and	r24, r24
    220e:	91 f0       	breq	.+36     	; 0x2234 <mem_save_data+0x3a>
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	51 f1       	breq	.+84     	; 0x2268 <mem_save_data+0x6e>
    2214:	34 c0       	rjmp	.+104    	; 0x227e <mem_save_data+0x84>
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	51 f1       	breq	.+84     	; 0x226e <mem_save_data+0x74>
    221a:	84 30       	cpi	r24, 0x04	; 4
    221c:	21 f0       	breq	.+8      	; 0x2226 <mem_save_data+0x2c>
    221e:	2f c0       	rjmp	.+94     	; 0x227e <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	26 c0       	rjmp	.+76     	; 0x2272 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    2226:	0e 94 61 06 	call	0xcc2	; 0xcc2 <dark_menu_parameters_len>
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    222e:	88 e0       	ldi	r24, 0x08	; 8
    2230:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    2232:	04 c0       	rjmp	.+8      	; 0x223c <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2234:	22 e0       	ldi	r18, 0x02	; 2
    2236:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    223c:	c8 2f       	mov	r28, r24
    223e:	7c 01       	movw	r14, r24
    2240:	e2 0e       	add	r14, r18
    2242:	f3 1e       	adc	r15, r19
    2244:	99 27       	eor	r25, r25
    2246:	8e 15       	cp	r24, r14
    2248:	9f 05       	cpc	r25, r15
    224a:	cc f4       	brge	.+50     	; 0x227e <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    224c:	f8 01       	movw	r30, r16
    224e:	61 91       	ld	r22, Z+
    2250:	8f 01       	movw	r16, r30
    2252:	8c 2f       	mov	r24, r28
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 33 0c 	call	0x1866	; 0x1866 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    225a:	cf 5f       	subi	r28, 0xFF	; 255
    225c:	8c 2f       	mov	r24, r28
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	8e 15       	cp	r24, r14
    2262:	9f 05       	cpc	r25, r15
    2264:	9c f3       	brlt	.-26     	; 0x224c <mem_save_data+0x52>
    2266:	0b c0       	rjmp	.+22     	; 0x227e <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    226e:	86 e0       	ldi	r24, 0x06	; 6
    2270:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2272:	c8 2f       	mov	r28, r24
    2274:	7c 01       	movw	r14, r24
    2276:	f2 e0       	ldi	r31, 0x02	; 2
    2278:	ef 0e       	add	r14, r31
    227a:	f1 1c       	adc	r15, r1
    227c:	e7 cf       	rjmp	.-50     	; 0x224c <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	ff 90       	pop	r15
    2286:	ef 90       	pop	r14
    2288:	08 95       	ret

0000228a <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	59 f0       	breq	.+22     	; 0x22b0 <mem_read_data+0x26>
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <mem_read_data+0x1c>
    229c:	88 23       	and	r24, r24
    229e:	91 f0       	breq	.+36     	; 0x22c4 <mem_read_data+0x3a>
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	51 f1       	breq	.+84     	; 0x22f8 <mem_read_data+0x6e>
    22a4:	34 c0       	rjmp	.+104    	; 0x230e <mem_read_data+0x84>
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	51 f1       	breq	.+84     	; 0x22fe <mem_read_data+0x74>
    22aa:	84 30       	cpi	r24, 0x04	; 4
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <mem_read_data+0x2c>
    22ae:	2f c0       	rjmp	.+94     	; 0x230e <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    22b0:	84 e0       	ldi	r24, 0x04	; 4
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	26 c0       	rjmp	.+76     	; 0x2302 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    22b6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <dark_menu_parameters_len>
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    22be:	88 e0       	ldi	r24, 0x08	; 8
    22c0:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    22c4:	22 e0       	ldi	r18, 0x02	; 2
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22cc:	c8 2f       	mov	r28, r24
    22ce:	7c 01       	movw	r14, r24
    22d0:	e2 0e       	add	r14, r18
    22d2:	f3 1e       	adc	r15, r19
    22d4:	99 27       	eor	r25, r25
    22d6:	8e 15       	cp	r24, r14
    22d8:	9f 05       	cpc	r25, r15
    22da:	cc f4       	brge	.+50     	; 0x230e <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    22dc:	8c 2f       	mov	r24, r28
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <EEPROM_read>
    22e4:	f8 01       	movw	r30, r16
    22e6:	81 93       	st	Z+, r24
    22e8:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22ea:	cf 5f       	subi	r28, 0xFF	; 255
    22ec:	8c 2f       	mov	r24, r28
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	8e 15       	cp	r24, r14
    22f2:	9f 05       	cpc	r25, r15
    22f4:	9c f3       	brlt	.-26     	; 0x22dc <mem_read_data+0x52>
    22f6:	0b c0       	rjmp	.+22     	; 0x230e <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    22fe:	86 e0       	ldi	r24, 0x06	; 6
    2300:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2302:	c8 2f       	mov	r28, r24
    2304:	7c 01       	movw	r14, r24
    2306:	f2 e0       	ldi	r31, 0x02	; 2
    2308:	ef 0e       	add	r14, r31
    230a:	f1 1c       	adc	r15, r1
    230c:	e7 cf       	rjmp	.-50     	; 0x22dc <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	08 95       	ret

0000231a <servo_set_pwm_val>:
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
	if (value == 0)
    231a:	81 11       	cpse	r24, r1
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <servo_set_pwm_val+0xe>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    231e:	80 ed       	ldi	r24, 0xD0	; 208
    2320:	97 e0       	ldi	r25, 0x07	; 7
    2322:	9b bd       	out	0x2b, r25	; 43
    2324:	8a bd       	out	0x2a, r24	; 42
    2326:	08 95       	ret

void servo_set_pwm_val(uint8_t value)
{
	if (value == 0)
	set_pwm(2000);
	else if(value < 50)
    2328:	82 33       	cpi	r24, 0x32	; 50
    232a:	98 f4       	brcc	.+38     	; 0x2352 <servo_set_pwm_val+0x38>
	set_pwm(1800 - (value - 10)*7);
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0a 97       	sbiw	r24, 0x0a	; 10
    2330:	22 27       	eor	r18, r18
    2332:	33 27       	eor	r19, r19
    2334:	28 1b       	sub	r18, r24
    2336:	39 0b       	sbc	r19, r25
    2338:	22 0f       	add	r18, r18
    233a:	33 1f       	adc	r19, r19
    233c:	22 0f       	add	r18, r18
    233e:	33 1f       	adc	r19, r19
    2340:	22 0f       	add	r18, r18
    2342:	33 1f       	adc	r19, r19
    2344:	82 0f       	add	r24, r18
    2346:	93 1f       	adc	r25, r19
    2348:	88 5f       	subi	r24, 0xF8	; 248
    234a:	98 4f       	sbci	r25, 0xF8	; 248
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    234c:	9b bd       	out	0x2b, r25	; 43
    234e:	8a bd       	out	0x2a, r24	; 42
    2350:	08 95       	ret
{
	if (value == 0)
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
    2352:	84 36       	cpi	r24, 0x64	; 100
    2354:	70 f4       	brcc	.+28     	; 0x2372 <servo_set_pwm_val+0x58>
	set_pwm(1520 - (value - 50)*5);
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	22 53       	subi	r18, 0x32	; 50
    235c:	31 09       	sbc	r19, r1
    235e:	4b ef       	ldi	r20, 0xFB	; 251
    2360:	42 03       	mulsu	r20, r18
    2362:	c0 01       	movw	r24, r0
    2364:	43 9f       	mul	r20, r19
    2366:	90 0d       	add	r25, r0
    2368:	11 24       	eor	r1, r1
    236a:	80 51       	subi	r24, 0x10	; 16
    236c:	9a 4f       	sbci	r25, 0xFA	; 250
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    236e:	9b bd       	out	0x2b, r25	; 43
    2370:	8a bd       	out	0x2a, r24	; 42
    2372:	08 95       	ret

00002374 <servo_error>:
	set_pwm(1520 - (value - 50)*5);
}

void servo_error(uint8_t close)
{
	if (close)
    2374:	88 23       	and	r24, r24
    2376:	19 f0       	breq	.+6      	; 0x237e <servo_error+0xa>
		servo_set_pwm_val(0);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
	LED_SERVO_OFF;
    237e:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    2380:	85 e0       	ldi	r24, 0x05	; 5
    2382:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <servoD>
    2386:	08 95       	ret

00002388 <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    238c:	2f e1       	ldi	r18, 0x1F	; 31
    238e:	3e e4       	ldi	r19, 0x4E	; 78
    2390:	37 bd       	out	0x27, r19	; 39
    2392:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    2394:	81 b3       	in	r24, 0x11	; 17
    2396:	80 63       	ori	r24, 0x30	; 48
    2398:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    239a:	19 bc       	out	0x29, r1	; 41
    239c:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    239e:	1b bc       	out	0x2b, r1	; 43
    23a0:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    23a2:	8f b5       	in	r24, 0x2f	; 47
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    23a8:	8e b5       	in	r24, 0x2e	; 46
    23aa:	88 61       	ori	r24, 0x18	; 24
    23ac:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    23ae:	8f b5       	in	r24, 0x2f	; 47
    23b0:	80 68       	ori	r24, 0x80	; 128
    23b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    23b4:	8e b5       	in	r24, 0x2e	; 46
    23b6:	82 60       	ori	r24, 0x02	; 2
    23b8:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    23ba:	3b bd       	out	0x2b, r19	; 43
    23bc:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    23be:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    23c6:	cf ef       	ldi	r28, 0xFF	; 255
    23c8:	d4 e0       	ldi	r29, 0x04	; 4
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	88 83       	st	Y, r24
	servoD.value = 0;
    23ce:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	95 e0       	ldi	r25, 0x05	; 5
    23d4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <evTime_init>
	servoD.try_cnt = 0;
    23d8:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    23da:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <try_count>
	debug_msg("SERVO: init\n");
    23de:	8c e0       	ldi	r24, 0x0C	; 12
    23e0:	92 e0       	ldi	r25, 0x02	; 2
    23e2:	9f 93       	push	r25
    23e4:	8f 93       	push	r24
    23e6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    23f4:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <servoD>
    23f8:	92 50       	subi	r25, 0x02	; 2
    23fa:	21 e0       	ldi	r18, 0x01	; 1
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	92 30       	cpi	r25, 0x02	; 2
    2400:	10 f0       	brcs	.+4      	; 0x2406 <servo_is_open+0x12>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
}
    2406:	c9 01       	movw	r24, r18
    2408:	08 95       	ret

0000240a <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    240a:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <servoD>
    240e:	91 30       	cpi	r25, 0x01	; 1
    2410:	a1 f4       	brne	.+40     	; 0x243a <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    2412:	ef ef       	ldi	r30, 0xFF	; 255
    2414:	f4 e0       	ldi	r31, 0x04	; 4
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	90 83       	st	Z, r25
		servoD.value = value;
    241a:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    241c:	1f 92       	push	r1
    241e:	8f 93       	push	r24
    2420:	89 e1       	ldi	r24, 0x19	; 25
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	9f 93       	push	r25
    2426:	8f 93       	push	r24
    2428:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
}
    243e:	08 95       	ret

00002440 <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    2440:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <servoD>
    2444:	9f ef       	ldi	r25, 0xFF	; 255
    2446:	98 0f       	add	r25, r24
    2448:	92 30       	cpi	r25, 0x02	; 2
    244a:	28 f4       	brcc	.+10     	; 0x2456 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    244c:	ef ef       	ldi	r30, 0xFF	; 255
    244e:	f4 e0       	ldi	r31, 0x04	; 4
    2450:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	80 83       	st	Z, r24
    2456:	08 95       	ret

00002458 <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    2458:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <servoD+0x9>
}
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	08 95       	ret

00002460 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    2460:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <servo_is_open>
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	d1 f0       	breq	.+52     	; 0x249c <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    246e:	ef ef       	ldi	r30, 0xFF	; 255
    2470:	f4 e0       	ldi	r31, 0x04	; 4
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	80 83       	st	Z, r24
		servoD.value = 0;
    2476:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    2478:	1f 92       	push	r1
    247a:	1f 92       	push	r1
    247c:	80 e3       	ldi	r24, 0x30	; 48
    247e:	92 e0       	ldi	r25, 0x02	; 2
    2480:	9f 93       	push	r25
    2482:	8f 93       	push	r24
    2484:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    2488:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    248a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
		return 1;
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    249c:	20 91 ff 04 	lds	r18, 0x04FF	; 0x8004ff <servoD>
    24a0:	24 30       	cpi	r18, 0x04	; 4
    24a2:	31 f4       	brne	.+12     	; 0x24b0 <servo_close+0x50>
	{
		servo_exit_try();
    24a4:	0e 94 59 12 	call	0x24b2	; 0x24b2 <servo_exit_try>
		error_servo_timer();
    24a8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
		return 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    24b0:	08 95       	ret

000024b2 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    24b2:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <servoD+0x1>
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	29 f4       	brne	.+10     	; 0x24c4 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    24ba:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <servoD>
		servo_close();
    24be:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_close>
    24c2:	09 c0       	rjmp	.+18     	; 0x24d6 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	71 f4       	brne	.+28     	; 0x24e4 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    24c8:	ef ef       	ldi	r30, 0xFF	; 255
    24ca:	f4 e0       	ldi	r31, 0x04	; 4
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	80 83       	st	Z, r24
		servo_open(servoD.value);
    24d0:	83 81       	ldd	r24, Z+3	; 0x03
    24d2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <servo_open>
	}
	else return;
	try_count = 0;
    24d6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <try_count>
	servoD.try_cnt++;
    24da:	ef ef       	ldi	r30, 0xFF	; 255
    24dc:	f4 e0       	ldi	r31, 0x04	; 4
    24de:	81 85       	ldd	r24, Z+9	; 0x09
    24e0:	8f 5f       	subi	r24, 0xFF	; 255
    24e2:	81 87       	std	Z+9, r24	; 0x09
    24e4:	08 95       	ret

000024e6 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    24e6:	cf 93       	push	r28
    24e8:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    24ea:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <servoD>
    24ee:	9f ef       	ldi	r25, 0xFF	; 255
    24f0:	98 0f       	add	r25, r24
    24f2:	93 30       	cpi	r25, 0x03	; 3
    24f4:	d0 f4       	brcc	.+52     	; 0x252a <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    24f6:	ef ef       	ldi	r30, 0xFF	; 255
    24f8:	f4 e0       	ldi	r31, 0x04	; 4
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	80 83       	st	Z, r24
		servoD.value = value;
    24fe:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    2500:	8c 2f       	mov	r24, r28
    2502:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    2506:	1f 92       	push	r1
    2508:	cf 93       	push	r28
    250a:	81 e4       	ldi	r24, 0x41	; 65
    250c:	92 e0       	ldi	r25, 0x02	; 2
    250e:	9f 93       	push	r25
    2510:	8f 93       	push	r24
    2512:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    2516:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    2518:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
		return 1;
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0b c0       	rjmp	.+22     	; 0x2540 <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	39 f4       	brne	.+14     	; 0x253c <servo_open+0x56>
	{
		servo_exit_try();
    252e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <servo_exit_try>
		error_servo_timer();
    2532:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
		return 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <servo_open+0x5a>
	}
	else return 0;
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
}
    2540:	cf 91       	pop	r28
    2542:	08 95       	ret

00002544 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2544:	ab 01       	movw	r20, r22
    2546:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	95 e0       	ldi	r25, 0x05	; 5
    254c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
    2550:	08 95       	ret

00002552 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    2558:	4b e4       	ldi	r20, 0x4B	; 75
    255a:	50 e0       	ldi	r21, 0x00	; 0
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	82 e5       	ldi	r24, 0x52	; 82
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <evTime_process_period>
    2568:	89 2b       	or	r24, r25
    256a:	09 f4       	brne	.+2      	; 0x256e <servo_process+0x1c>
    256c:	b8 c0       	rjmp	.+368    	; 0x26de <servo_process+0x18c>
	{
		switch(servoD.state)
    256e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <servoD>
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	a1 f0       	breq	.+40     	; 0x259e <servo_process+0x4c>
    2576:	30 f4       	brcc	.+12     	; 0x2584 <servo_process+0x32>
    2578:	82 30       	cpi	r24, 0x02	; 2
    257a:	59 f0       	breq	.+22     	; 0x2592 <servo_process+0x40>
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	09 f4       	brne	.+2      	; 0x2582 <servo_process+0x30>
    2580:	63 c0       	rjmp	.+198    	; 0x2648 <servo_process+0xf6>
    2582:	9d c0       	rjmp	.+314    	; 0x26be <servo_process+0x16c>
    2584:	85 30       	cpi	r24, 0x05	; 5
    2586:	09 f4       	brne	.+2      	; 0x258a <servo_process+0x38>
    2588:	79 c0       	rjmp	.+242    	; 0x267c <servo_process+0x12a>
    258a:	86 30       	cpi	r24, 0x06	; 6
    258c:	09 f4       	brne	.+2      	; 0x2590 <servo_process+0x3e>
    258e:	93 c0       	rjmp	.+294    	; 0x26b6 <servo_process+0x164>
    2590:	96 c0       	rjmp	.+300    	; 0x26be <servo_process+0x16c>
		{
			case SERVO_OPEN:
			servoD.value = value;
    2592:	c0 93 02 05 	sts	0x0502, r28	; 0x800502 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    2596:	8c 2f       	mov	r24, r28
    2598:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
			break;
    259c:	90 c0       	rjmp	.+288    	; 0x26be <servo_process+0x16c>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    259e:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <try_count>
    25a2:	81 11       	cpse	r24, r1
    25a4:	13 c0       	rjmp	.+38     	; 0x25cc <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	8d e4       	ldi	r24, 0x4D	; 77
    25b0:	93 e0       	ldi	r25, 0x03	; 3
    25b2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
		try_count++;
    25b6:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <try_count>
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    25c0:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <servoD+0x3>
    25c4:	89 0f       	add	r24, r25
    25c6:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
    25ca:	2a c0       	rjmp	.+84     	; 0x2620 <servo_process+0xce>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    25cc:	81 50       	subi	r24, 0x01	; 1
    25ce:	89 30       	cpi	r24, 0x09	; 9
    25d0:	d8 f4       	brcc	.+54     	; 0x2608 <servo_process+0xb6>
	{
		if (evTime_check(&timeout) == 1)
    25d2:	8d e4       	ldi	r24, 0x4D	; 77
    25d4:	93 e0       	ldi	r25, 0x03	; 3
    25d6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	09 f5       	brne	.+66     	; 0x2620 <servo_process+0xce>
		{
			evTime_start(&timeout, 250);
    25de:	4a ef       	ldi	r20, 0xFA	; 250
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	8d e4       	ldi	r24, 0x4D	; 77
    25e8:	93 e0       	ldi	r25, 0x03	; 3
    25ea:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
			try_count++;
    25ee:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <try_count>
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <try_count>
			servo_set_pwm_val(servoD.value + try_count*4);
    25f8:	88 0f       	add	r24, r24
    25fa:	88 0f       	add	r24, r24
    25fc:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <servoD+0x3>
    2600:	89 0f       	add	r24, r25
    2602:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
    2606:	0c c0       	rjmp	.+24     	; 0x2620 <servo_process+0xce>
		}
	}
	else
	{
		try_count = 0;
    2608:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <try_count>
		servo_set_pwm_val(servoD.value);
    260c:	cf ef       	ldi	r28, 0xFF	; 255
    260e:	d4 e0       	ldi	r29, 0x04	; 4
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	0e 94 8d 11 	call	0x231a	; 0x231a <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	88 83       	st	Y, r24
		servoD.try_cnt++;
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	8f 5f       	subi	r24, 0xFF	; 255
    261e:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    2620:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <servoD+0x3>
    2624:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <try_count>
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	82 0f       	add	r24, r18
    262c:	91 1d       	adc	r25, r1
    262e:	9f 93       	push	r25
    2630:	8f 93       	push	r24
    2632:	83 e5       	ldi	r24, 0x53	; 83
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	9f 93       	push	r25
    2638:	8f 93       	push	r24
    263a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	3b c0       	rjmp	.+118    	; 0x26be <servo_process+0x16c>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2648:	88 e4       	ldi	r24, 0x48	; 72
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <evTime_is_stated>
    2650:	89 2b       	or	r24, r25
    2652:	59 f0       	breq	.+22     	; 0x266a <servo_process+0x118>
	{
		if (evTime_check(&timeout) == 1)
    2654:	88 e4       	ldi	r24, 0x48	; 72
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	79 f5       	brne	.+94     	; 0x26be <servo_process+0x16c>
		{
			servoD.state = SERVO_OPEN;
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <servoD>
			LED_SERVO_ON;
    2666:	96 9a       	sbi	0x12, 6	; 18
    2668:	2a c0       	rjmp	.+84     	; 0x26be <servo_process+0x16c>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    266a:	48 eb       	ldi	r20, 0xB8	; 184
    266c:	5b e0       	ldi	r21, 0x0B	; 11
    266e:	60 e0       	ldi	r22, 0x00	; 0
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	88 e4       	ldi	r24, 0x48	; 72
    2674:	93 e0       	ldi	r25, 0x03	; 3
    2676:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
    267a:	21 c0       	rjmp	.+66     	; 0x26be <servo_process+0x16c>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    267c:	83 e4       	ldi	r24, 0x43	; 67
    267e:	93 e0       	ldi	r25, 0x03	; 3
    2680:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <evTime_is_stated>
    2684:	89 2b       	or	r24, r25
    2686:	71 f0       	breq	.+28     	; 0x26a4 <servo_process+0x152>
	{
		if (evTime_check(&timeout) == 1)
    2688:	83 e4       	ldi	r24, 0x43	; 67
    268a:	93 e0       	ldi	r25, 0x03	; 3
    268c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	a9 f4       	brne	.+42     	; 0x26be <servo_process+0x16c>
		{
			servoD.state = SERVO_ERROR;
    2694:	86 e0       	ldi	r24, 0x06	; 6
    2696:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    269a:	8f e1       	ldi	r24, 0x1F	; 31
    269c:	9e e4       	ldi	r25, 0x4E	; 78
    269e:	9b bd       	out	0x2b, r25	; 43
    26a0:	8a bd       	out	0x2a, r24	; 42
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <servo_process+0x16c>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    26a4:	4c ea       	ldi	r20, 0xAC	; 172
    26a6:	5d e0       	ldi	r21, 0x0D	; 13
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	83 e4       	ldi	r24, 0x43	; 67
    26ae:	93 e0       	ldi	r25, 0x03	; 3
    26b0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
    26b4:	04 c0       	rjmp	.+8      	; 0x26be <servo_process+0x16c>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    26b6:	8f e1       	ldi	r24, 0x1F	; 31
    26b8:	9e e4       	ldi	r25, 0x4E	; 78
    26ba:	9b bd       	out	0x2b, r25	; 43
    26bc:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	95 e0       	ldi	r25, 0x05	; 5
    26c2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	51 f4       	brne	.+20     	; 0x26de <servo_process+0x18c>
		{
			servoD.try_cnt = 0;
    26ca:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    26ce:	81 e6       	ldi	r24, 0x61	; 97
    26d0:	92 e0       	ldi	r25, 0x02	; 2
    26d2:	9f 93       	push	r25
    26d4:	8f 93       	push	r24
    26d6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
		}
	}
}
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    26e4:	ed e9       	ldi	r30, 0x9D	; 157
    26e6:	f4 e0       	ldi	r31, 0x04	; 4
    26e8:	16 86       	std	Z+14, r1	; 0x0e
    26ea:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    26ec:	12 86       	std	Z+10, r1	; 0x0a
    26ee:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    26f0:	14 86       	std	Z+12, r1	; 0x0c
    26f2:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    26f4:	e0 e7       	ldi	r30, 0x70	; 112
    26f6:	f4 e0       	ldi	r31, 0x04	; 4
    26f8:	16 86       	std	Z+14, r1	; 0x0e
    26fa:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    26fc:	12 86       	std	Z+10, r1	; 0x0a
    26fe:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    2700:	14 86       	std	Z+12, r1	; 0x0c
    2702:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2704:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <button3+0xc>
    2708:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <button3+0xb>
	
	button5.timer_callback = 0;
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f4 e0       	ldi	r31, 0x04	; 4
    2710:	16 86       	std	Z+14, r1	; 0x0e
    2712:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2714:	14 86       	std	Z+12, r1	; 0x0c
    2716:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2718:	12 86       	std	Z+10, r1	; 0x0a
    271a:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    271c:	ee e8       	ldi	r30, 0x8E	; 142
    271e:	f4 e0       	ldi	r31, 0x04	; 4
    2720:	16 86       	std	Z+14, r1	; 0x0e
    2722:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2724:	14 86       	std	Z+12, r1	; 0x0c
    2726:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2728:	12 86       	std	Z+10, r1	; 0x0a
    272a:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    272c:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <button7+0xc>
    2730:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <button7+0xb>
	
	button8.fall_callback = 0;
    2734:	eb eb       	ldi	r30, 0xBB	; 187
    2736:	f4 e0       	ldi	r31, 0x04	; 4
    2738:	14 86       	std	Z+12, r1	; 0x0c
    273a:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    273c:	16 86       	std	Z+14, r1	; 0x0e
    273e:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    2740:	12 86       	std	Z+10, r1	; 0x0a
    2742:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2744:	e0 e3       	ldi	r30, 0x30	; 48
    2746:	f4 e0       	ldi	r31, 0x04	; 4
    2748:	14 86       	std	Z+12, r1	; 0x0c
    274a:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    274c:	16 86       	std	Z+14, r1	; 0x0e
    274e:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    2750:	12 86       	std	Z+10, r1	; 0x0a
    2752:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2754:	ef e3       	ldi	r30, 0x3F	; 63
    2756:	f4 e0       	ldi	r31, 0x04	; 4
    2758:	14 86       	std	Z+12, r1	; 0x0c
    275a:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    275c:	16 86       	std	Z+14, r1	; 0x0e
    275e:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    2760:	12 86       	std	Z+10, r1	; 0x0a
    2762:	11 86       	std	Z+9, r1	; 0x09
    2764:	08 95       	ret

00002766 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2766:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	49 f0       	breq	.+18     	; 0x2780 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    276e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2772:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2776:	98 60       	ori	r25, 0x08	; 8
    2778:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    277c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    2780:	08 95       	ret

00002782 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2782:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	49 f0       	breq	.+18     	; 0x279c <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    278a:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    278e:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2792:	80 68       	ori	r24, 0x80	; 128
    2794:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2798:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    279c:	08 95       	ret

0000279e <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    279e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    27a2:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    27a6:	92 60       	ori	r25, 0x02	; 2
    27a8:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    27ac:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    27b0:	08 95       	ret

000027b2 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    27b2:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    27b6:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    27ba:	99 7f       	andi	r25, 0xF9	; 249
    27bc:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    27c0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	counter_very_fast_motor_sub = 0;
    27c4:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter_very_fast_motor_sub>
    27c8:	08 95       	ret

000027ca <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    27ca:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    27ce:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    27d2:	80 62       	ori	r24, 0x20	; 32
    27d4:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    27d8:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    27dc:	08 95       	ret

000027de <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    27de:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    27e2:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    27e6:	8f 79       	andi	r24, 0x9F	; 159
    27e8:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    27ec:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	counter_very_fast_motor_sub = 0;
    27f0:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter_very_fast_motor_sub>
    27f4:	08 95       	ret

000027f6 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    27f6:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    27fa:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    27fe:	90 62       	ori	r25, 0x20	; 32
    2800:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2804:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2808:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    280c:	8b 30       	cpi	r24, 0x0B	; 11
    280e:	18 f0       	brcs	.+6      	; 0x2816 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    2810:	81 50       	subi	r24, 0x01	; 1
    2812:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2816:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    2828:	08 95       	ret

0000282a <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    282a:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    282e:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2832:	90 62       	ori	r25, 0x20	; 32
    2834:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2838:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	if (motor_value > 10)
    283c:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <motor_value>
    2840:	8b 30       	cpi	r24, 0x0B	; 11
    2842:	18 f0       	brcs	.+6      	; 0x284a <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2844:	81 50       	subi	r24, 0x01	; 1
    2846:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    284a:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <disp_get_state>
    285a:	02 97       	sbiw	r24, 0x02	; 2
    285c:	29 f4       	brne	.+10     	; 0x2868 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
	state_measure_volt++;
    2870:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <state_measure_volt>
	if (state_measure_volt == 2)
    287a:	82 30       	cpi	r24, 0x02	; 2
    287c:	19 f4       	brne	.+6      	; 0x2884 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    287e:	66 e0       	ldi	r22, 0x06	; 6
    2880:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    2884:	08 95       	ret

00002886 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2886:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    288a:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    288e:	90 62       	ori	r25, 0x20	; 32
    2890:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2894:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	if (motor_value < 99)
    2898:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <motor_value>
    289c:	83 36       	cpi	r24, 0x63	; 99
    289e:	18 f4       	brcc	.+6      	; 0x28a6 <button_motor_add_fall_cb+0x20>
		motor_value++;
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    28a6:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <disp_get_state>
    28b6:	02 97       	sbiw	r24, 0x02	; 2
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
	state_measure_volt++;
    28cc:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <state_measure_volt>
	if (state_measure_volt == 2)
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	19 f4       	brne	.+6      	; 0x28e0 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28da:	66 e0       	ldi	r22, 0x06	; 6
    28dc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    28e0:	08 95       	ret

000028e2 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    28e2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    28e6:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    28ea:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    28ee:	97 7e       	andi	r25, 0xE7	; 231
    28f0:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    28f4:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	counter_very_fast_motor_sub = 0;
    28f8:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    28fc:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    2900:	88 23       	and	r24, r24
    2902:	19 f0       	breq	.+6      	; 0x290a <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2904:	81 50       	subi	r24, 0x01	; 1
    2906:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <disp_get_state>
    2910:	02 97       	sbiw	r24, 0x02	; 2
    2912:	29 f4       	brne	.+10     	; 0x291e <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    291c:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    2926:	08 95       	ret

00002928 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2928:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    292c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2930:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2934:	8f 77       	andi	r24, 0x7F	; 127
    2936:	9e 7f       	andi	r25, 0xFE	; 254
    2938:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    293c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	counter_very_fast_motor_sub = 0;
    2940:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2944:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <state_measure_volt>
    2948:	88 23       	and	r24, r24
    294a:	19 f0       	breq	.+6      	; 0x2952 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    294c:	81 50       	subi	r24, 0x01	; 1
    294e:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <disp_get_state>
    2958:	02 97       	sbiw	r24, 0x02	; 2
    295a:	29 f4       	brne	.+10     	; 0x2966 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	82 e0       	ldi	r24, 0x02	; 2
    2960:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    2964:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    296e:	08 95       	ret

00002970 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2970:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2974:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2978:	90 62       	ori	r25, 0x20	; 32
    297a:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    297e:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2982:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    2986:	83 36       	cpi	r24, 0x63	; 99
    2988:	28 f4       	brcc	.+10     	; 0x2994 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <servo_vibro_value>
		error_servo_timer();
    2990:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2994:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	82 e0       	ldi	r24, 0x02	; 2
    29a2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
    29a6:	08 95       	ret

000029a8 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    29a8:	eb e0       	ldi	r30, 0x0B	; 11
    29aa:	f5 e0       	ldi	r31, 0x05	; 5
    29ac:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <motor_value>
    29b0:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    29b2:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    29b6:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    29b8:	bf 01       	movw	r22, r30
    29ba:	83 e0       	ldi	r24, 0x03	; 3
    29bc:	0e 94 fd 10 	call	0x21fa	; 0x21fa <mem_save_data>
    29c0:	08 95       	ret

000029c2 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    29c2:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    29c6:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    29ca:	90 62       	ori	r25, 0x20	; 32
    29cc:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    29d0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	if (motor_value < 10)
    29d4:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <motor_value>
    29d8:	8a 30       	cpi	r24, 0x0A	; 10
    29da:	38 f4       	brcc	.+14     	; 0x29ea <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    29dc:	8a e0       	ldi	r24, 0x0A	; 10
    29de:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    29e2:	6a e0       	ldi	r22, 0x0A	; 10
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	}
	sys_save_display();
    29ea:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <sys_save_display>
	if(!dcmotor_is_on())
    29ee:	0e 94 72 07 	call	0xee4	; 0xee4 <dcmotor_is_on>
    29f2:	89 2b       	or	r24, r25
    29f4:	39 f4       	brne	.+14     	; 0x2a04 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    29f6:	0e 94 95 07 	call	0xf2a	; 0xf2a <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    29fa:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    29fe:	0e 94 05 12 	call	0x240a	; 0x240a <servo_delayed_open>
    2a02:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2a04:	0e 94 7d 07 	call	0xefa	; 0xefa <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2a08:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_close>
    2a0c:	08 95       	ret

00002a0e <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a0e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2a12:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2a16:	90 62       	ori	r25, 0x20	; 32
    2a18:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2a1c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
	if (servo_vibro_value < 10)
    2a20:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    2a24:	8a 30       	cpi	r24, 0x0A	; 10
    2a26:	38 f4       	brcc	.+14     	; 0x2a36 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2a28:	8a e0       	ldi	r24, 0x0A	; 10
    2a2a:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2a2e:	6a e0       	ldi	r22, 0x0A	; 10
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2a36:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <servo_is_open>
    2a3a:	89 2b       	or	r24, r25
    2a3c:	19 f0       	breq	.+6      	; 0x2a44 <button_on_off_pwm+0x36>
    2a3e:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_close>
    2a42:	08 95       	ret
	else servo_open(servo_vibro_value);
    2a44:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    2a48:	0e 94 73 12 	call	0x24e6	; 0x24e6 <servo_open>
    2a4c:	08 95       	ret

00002a4e <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2a4e:	80 ed       	ldi	r24, 0xD0	; 208
    2a50:	95 e1       	ldi	r25, 0x15	; 21
    2a52:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <button4+0xa>
    2a56:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
	disp_off_segments();
    2a62:	0e 94 40 0a 	call	0x1480	; 0x1480 <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2a66:	69 e0       	ldi	r22, 0x09	; 9
    2a68:	75 e0       	ldi	r23, 0x05	; 5
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	0e 94 45 11 	call	0x228a	; 0x228a <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2a70:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <mem_last_save+0x1>
    2a74:	96 ef       	ldi	r25, 0xF6	; 246
    2a76:	98 0f       	add	r25, r24
    2a78:	9a 35       	cpi	r25, 0x5A	; 90
    2a7a:	10 f4       	brcc	.+4      	; 0x2a80 <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2a7c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2a80:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <mem_last_save>
    2a84:	96 ef       	ldi	r25, 0xF6	; 246
    2a86:	98 0f       	add	r25, r24
    2a88:	9a 35       	cpi	r25, 0x5A	; 90
    2a8a:	10 f4       	brcc	.+4      	; 0x2a90 <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2a8c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <motor_value>
    2a90:	08 95       	ret

00002a92 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2a92:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2a96:	42 e0       	ldi	r20, 0x02	; 2
    2a98:	68 ee       	ldi	r22, 0xE8	; 232
    2a9a:	73 e0       	ldi	r23, 0x03	; 3
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 92 0b 	call	0x1724	; 0x1724 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2aa4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 c4 11 	call	0x2388	; 0x2388 <servo_init>
	#endif
	error_init();
    2aae:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <error_init>
	init_measure();
    2ab2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <init_measure>
	init_buzzer();
    2ab6:	0e 94 5b 05 	call	0xab6	; 0xab6 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2ac2:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2ac6:	ed e9       	ldi	r30, 0x9D	; 157
    2ac8:	f4 e0       	ldi	r31, 0x04	; 4
    2aca:	83 eb       	ldi	r24, 0xB3	; 179
    2acc:	93 e1       	ldi	r25, 0x13	; 19
    2ace:	96 87       	std	Z+14, r25	; 0x0e
    2ad0:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2ad2:	85 e1       	ldi	r24, 0x15	; 21
    2ad4:	94 e1       	ldi	r25, 0x14	; 20
    2ad6:	94 87       	std	Z+12, r25	; 0x0c
    2ad8:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2ada:	81 e7       	ldi	r24, 0x71	; 113
    2adc:	94 e1       	ldi	r25, 0x14	; 20
    2ade:	92 87       	std	Z+10, r25	; 0x0a
    2ae0:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2ae2:	e0 e7       	ldi	r30, 0x70	; 112
    2ae4:	f4 e0       	ldi	r31, 0x04	; 4
    2ae6:	81 ec       	ldi	r24, 0xC1	; 193
    2ae8:	93 e1       	ldi	r25, 0x13	; 19
    2aea:	96 87       	std	Z+14, r25	; 0x0e
    2aec:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2aee:	83 e4       	ldi	r24, 0x43	; 67
    2af0:	94 e1       	ldi	r25, 0x14	; 20
    2af2:	94 87       	std	Z+12, r25	; 0x0c
    2af4:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2af6:	84 e9       	ldi	r24, 0x94	; 148
    2af8:	94 e1       	ldi	r25, 0x14	; 20
    2afa:	92 87       	std	Z+10, r25	; 0x0a
    2afc:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2afe:	81 ee       	ldi	r24, 0xE1	; 225
    2b00:	94 e1       	ldi	r25, 0x14	; 20
    2b02:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <button3+0xc>
    2b06:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2b0a:	ee e4       	ldi	r30, 0x4E	; 78
    2b0c:	f4 e0       	ldi	r31, 0x04	; 4
    2b0e:	8f ec       	ldi	r24, 0xCF	; 207
    2b10:	93 e1       	ldi	r25, 0x13	; 19
    2b12:	96 87       	std	Z+14, r25	; 0x0e
    2b14:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2b16:	89 ed       	ldi	r24, 0xD9	; 217
    2b18:	93 e1       	ldi	r25, 0x13	; 19
    2b1a:	92 87       	std	Z+10, r25	; 0x0a
    2b1c:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2b1e:	8b ef       	ldi	r24, 0xFB	; 251
    2b20:	93 e1       	ldi	r25, 0x13	; 19
    2b22:	94 87       	std	Z+12, r25	; 0x0c
    2b24:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2b26:	ee e8       	ldi	r30, 0x8E	; 142
    2b28:	f4 e0       	ldi	r31, 0x04	; 4
    2b2a:	85 ee       	ldi	r24, 0xE5	; 229
    2b2c:	93 e1       	ldi	r25, 0x13	; 19
    2b2e:	96 87       	std	Z+14, r25	; 0x0e
    2b30:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2b32:	8f ee       	ldi	r24, 0xEF	; 239
    2b34:	93 e1       	ldi	r25, 0x13	; 19
    2b36:	92 87       	std	Z+10, r25	; 0x0a
    2b38:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2b3a:	88 eb       	ldi	r24, 0xB8	; 184
    2b3c:	94 e1       	ldi	r25, 0x14	; 20
    2b3e:	94 87       	std	Z+12, r25	; 0x0c
    2b40:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2b42:	87 e0       	ldi	r24, 0x07	; 7
    2b44:	95 e1       	ldi	r25, 0x15	; 21
    2b46:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <button7+0xc>
    2b4a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2b4e:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2b58:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
    2b62:	08 95       	ret

00002b64 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2b64:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <state_measure_volt>
	dcmotorpwm_deinit();
    2b68:	0e 94 6c 07 	call	0xed8	; 0xed8 <dcmotorpwm_deinit>
	off_button();
    2b6c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <off_button>
	error_deinit();
    2b70:	0e 94 76 0c 	call	0x18ec	; 0x18ec <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	#if DARK_MENU
	init_menu();
    2b74:	0e 94 e5 06 	call	0xdca	; 0xdca <init_menu>
	#endif /* DARK_MENU */
	servo_close();
    2b78:	0e 94 30 12 	call	0x2460	; 0x2460 <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2b7c:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <system_events+0x1>
    2b80:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2b8c:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2b90:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2b94:	8e 7f       	andi	r24, 0xFE	; 254
    2b96:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2b9a:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    2b9e:	08 95       	ret

00002ba0 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2ba0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2ba4:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2ba8:	80 ff       	sbrs	r24, 0
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <button4_toggle_system+0x12>
	{
		off_system();
    2bac:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <off_system>
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2bb2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2bb6:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2bba:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2bbe:	90 62       	ori	r25, 0x20	; 32
    2bc0:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2bc4:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
    2bc8:	08 95       	ret

00002bca <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2bca:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    2bce:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    2bd2:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    2bd6:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    2bda:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <disp_fast_timer.2111>
    2bde:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <disp_fast_timer.2111+0x1>
    2be2:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <disp_fast_timer.2111+0x2>
    2be6:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <disp_fast_timer.2111+0x3>
    2bea:	84 17       	cp	r24, r20
    2bec:	95 07       	cpc	r25, r21
    2bee:	a6 07       	cpc	r26, r22
    2bf0:	b7 07       	cpc	r27, r23
    2bf2:	08 f0       	brcs	.+2      	; 0x2bf6 <disp_fast_process+0x2c>
    2bf4:	a4 c0       	rjmp	.+328    	; 0x2d3e <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2bf6:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2bfa:	85 ff       	sbrs	r24, 5
    2bfc:	21 c0       	rjmp	.+66     	; 0x2c40 <disp_fast_process+0x76>
    2bfe:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2c02:	63 36       	cpi	r22, 0x63	; 99
    2c04:	e8 f4       	brcc	.+58     	; 0x2c40 <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2c06:	6b 30       	cpi	r22, 0x0B	; 11
    2c08:	40 f0       	brcs	.+16     	; 0x2c1a <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2c0a:	6f 5f       	subi	r22, 0xFF	; 255
    2c0c:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <servo_vibro_value>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
				error_servo_timer();
    2c16:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2c1a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <counter_very_fast_servo_add>
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2c24:	8f 30       	cpi	r24, 0x0F	; 15
    2c26:	60 f0       	brcs	.+24     	; 0x2c40 <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2c28:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2c2c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2c30:	8f 7d       	andi	r24, 0xDF	; 223
    2c32:	80 64       	ori	r24, 0x40	; 64
    2c34:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2c38:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
				counter_very_fast_servo_add = 0;
    2c3c:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2c40:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2c44:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2c48:	91 ff       	sbrs	r25, 1
    2c4a:	21 c0       	rjmp	.+66     	; 0x2c8e <disp_fast_process+0xc4>
    2c4c:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2c50:	66 23       	and	r22, r22
    2c52:	e9 f0       	breq	.+58     	; 0x2c8e <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2c54:	6b 30       	cpi	r22, 0x0B	; 11
    2c56:	40 f0       	brcs	.+16     	; 0x2c68 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2c58:	61 50       	subi	r22, 0x01	; 1
    2c5a:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <servo_vibro_value>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
				error_servo_timer();
    2c64:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2c68:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <counter_very_fast_servo_sub>
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2c72:	8f 30       	cpi	r24, 0x0F	; 15
    2c74:	60 f0       	brcs	.+24     	; 0x2c8e <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2c76:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2c7a:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2c7e:	9d 7f       	andi	r25, 0xFD	; 253
    2c80:	94 60       	ori	r25, 0x04	; 4
    2c82:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2c86:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
				counter_very_fast_servo_sub = 0;
    2c8a:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2c8e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2c92:	87 ff       	sbrs	r24, 7
    2c94:	1d c0       	rjmp	.+58     	; 0x2cd0 <disp_fast_process+0x106>
    2c96:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    2c9a:	63 36       	cpi	r22, 0x63	; 99
    2c9c:	c8 f4       	brcc	.+50     	; 0x2cd0 <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2c9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ca0:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <motor_value>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
			counter_very_fast_motor_add++;
    2caa:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <counter_very_fast_motor_add>
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2cb4:	8f 30       	cpi	r24, 0x0F	; 15
    2cb6:	60 f0       	brcs	.+24     	; 0x2cd0 <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2cb8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2cbc:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2cc0:	8f 77       	andi	r24, 0x7F	; 127
    2cc2:	91 60       	ori	r25, 0x01	; 1
    2cc4:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2cc8:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
				counter_very_fast_motor_add = 0;
    2ccc:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2cd0:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2cd4:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2cd8:	93 ff       	sbrs	r25, 3
    2cda:	1d c0       	rjmp	.+58     	; 0x2d16 <disp_fast_process+0x14c>
    2cdc:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    2ce0:	6b 30       	cpi	r22, 0x0B	; 11
    2ce2:	c8 f0       	brcs	.+50     	; 0x2d16 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2ce4:	61 50       	subi	r22, 0x01	; 1
    2ce6:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <motor_value>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
			counter_very_fast_motor_sub++;
    2cf0:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <counter_very_fast_motor_sub>
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2cfa:	8f 30       	cpi	r24, 0x0F	; 15
    2cfc:	60 f0       	brcs	.+24     	; 0x2d16 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2cfe:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2d02:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2d06:	97 7f       	andi	r25, 0xF7	; 247
    2d08:	90 61       	ori	r25, 0x10	; 16
    2d0a:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <system_events+0x1>
    2d0e:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <system_events>
				counter_very_fast_motor_sub = 0;
    2d12:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2d16:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <disp_fast_timer.2111>
    2d1a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <disp_fast_timer.2111+0x1>
    2d1e:	a0 91 5a 03 	lds	r26, 0x035A	; 0x80035a <disp_fast_timer.2111+0x2>
    2d22:	b0 91 5b 03 	lds	r27, 0x035B	; 0x80035b <disp_fast_timer.2111+0x3>
    2d26:	80 5b       	subi	r24, 0xB0	; 176
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	af 4f       	sbci	r26, 0xFF	; 255
    2d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <disp_fast_timer.2111>
    2d32:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <disp_fast_timer.2111+0x1>
    2d36:	a0 93 5a 03 	sts	0x035A, r26	; 0x80035a <disp_fast_timer.2111+0x2>
    2d3a:	b0 93 5b 03 	sts	0x035B, r27	; 0x80035b <disp_fast_timer.2111+0x3>
    2d3e:	08 95       	ret

00002d40 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2d40:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <mktime+0x2>
    2d44:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <mktime+0x3>
    2d48:	60 91 11 05 	lds	r22, 0x0511	; 0x800511 <mktime+0x4>
    2d4c:	70 91 12 05 	lds	r23, 0x0512	; 0x800512 <mktime+0x5>
    2d50:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <disp_very_fast_timer>
    2d54:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <disp_very_fast_timer+0x1>
    2d58:	a0 91 5e 03 	lds	r26, 0x035E	; 0x80035e <disp_very_fast_timer+0x2>
    2d5c:	b0 91 5f 03 	lds	r27, 0x035F	; 0x80035f <disp_very_fast_timer+0x3>
    2d60:	84 17       	cp	r24, r20
    2d62:	95 07       	cpc	r25, r21
    2d64:	a6 07       	cpc	r26, r22
    2d66:	b7 07       	cpc	r27, r23
    2d68:	08 f0       	brcs	.+2      	; 0x2d6c <disp_very_fast_process+0x2c>
    2d6a:	57 c0       	rjmp	.+174    	; 0x2e1a <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2d6c:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <servo_vibro_value>
    2d70:	83 36       	cpi	r24, 0x63	; 99
    2d72:	70 f4       	brcc	.+28     	; 0x2d90 <disp_very_fast_process+0x50>
    2d74:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2d78:	86 ff       	sbrs	r24, 6
    2d7a:	0a c0       	rjmp	.+20     	; 0x2d90 <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2d7c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d80:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2d84:	6f 5f       	subi	r22, 0xFF	; 255
    2d86:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <servo_vibro_value>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2d90:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <servo_vibro_value>
    2d94:	6b 30       	cpi	r22, 0x0B	; 11
    2d96:	70 f0       	brcs	.+28     	; 0x2db4 <disp_very_fast_process+0x74>
    2d98:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2d9c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2da0:	92 ff       	sbrs	r25, 2
    2da2:	08 c0       	rjmp	.+16     	; 0x2db4 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2da4:	61 50       	subi	r22, 0x01	; 1
    2da6:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <servo_vibro_value>
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
				error_servo_timer();
    2db0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2db4:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    2db8:	63 36       	cpi	r22, 0x63	; 99
    2dba:	60 f4       	brcc	.+24     	; 0x2dd4 <disp_very_fast_process+0x94>
    2dbc:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2dc0:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2dc4:	90 ff       	sbrs	r25, 0
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2dc8:	6f 5f       	subi	r22, 0xFF	; 255
    2dca:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <motor_value>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2dd4:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <motor_value>
    2dd8:	6b 30       	cpi	r22, 0x0B	; 11
    2dda:	60 f0       	brcs	.+24     	; 0x2df4 <disp_very_fast_process+0xb4>
    2ddc:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <system_events>
    2de0:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <system_events+0x1>
    2de4:	94 ff       	sbrs	r25, 4
    2de6:	06 c0       	rjmp	.+12     	; 0x2df4 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2de8:	61 50       	subi	r22, 0x01	; 1
    2dea:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <motor_value>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	0e 94 c8 09 	call	0x1390	; 0x1390 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2df4:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <disp_very_fast_timer>
    2df8:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <disp_very_fast_timer+0x1>
    2dfc:	a0 91 5e 03 	lds	r26, 0x035E	; 0x80035e <disp_very_fast_timer+0x2>
    2e00:	b0 91 5f 03 	lds	r27, 0x035F	; 0x80035f <disp_very_fast_timer+0x3>
    2e04:	4e 96       	adiw	r24, 0x1e	; 30
    2e06:	a1 1d       	adc	r26, r1
    2e08:	b1 1d       	adc	r27, r1
    2e0a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <disp_very_fast_timer>
    2e0e:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <disp_very_fast_timer+0x1>
    2e12:	a0 93 5e 03 	sts	0x035E, r26	; 0x80035e <disp_very_fast_timer+0x2>
    2e16:	b0 93 5f 03 	sts	0x035F, r27	; 0x80035f <disp_very_fast_timer+0x3>
    2e1a:	08 95       	ret

00002e1c <system_error>:
}


void system_error(void)
{
	off_button();
    2e1c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <off_button>
    2e20:	08 95       	ret

00002e22 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2e22:	1f 92       	push	r1
    2e24:	0f 92       	push	r0
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	0f 92       	push	r0
    2e2a:	11 24       	eor	r1, r1
    2e2c:	2f 93       	push	r18
    2e2e:	3f 93       	push	r19
    2e30:	4f 93       	push	r20
    2e32:	5f 93       	push	r21
    2e34:	6f 93       	push	r22
    2e36:	7f 93       	push	r23
    2e38:	8f 93       	push	r24
    2e3a:	9f 93       	push	r25
    2e3c:	af 93       	push	r26
    2e3e:	bf 93       	push	r27
    2e40:	ef 93       	push	r30
    2e42:	ff 93       	push	r31
    2e44:	ed e0       	ldi	r30, 0x0D	; 13
    2e46:	f5 e0       	ldi	r31, 0x05	; 5
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	c2 96       	adiw	r24, 0x32	; 50
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	88 3e       	cpi	r24, 0xE8	; 232
    2e58:	93 40       	sbci	r25, 0x03	; 3
    2e5a:	88 f0       	brcs	.+34     	; 0x2e7e <__vector_10+0x5c>
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	a4 81       	ldd	r26, Z+4	; 0x04
    2e62:	b5 81       	ldd	r27, Z+5	; 0x05
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	a1 1d       	adc	r26, r1
    2e68:	b1 1d       	adc	r27, r1
    2e6a:	82 83       	std	Z+2, r24	; 0x02
    2e6c:	93 83       	std	Z+3, r25	; 0x03
    2e6e:	a4 83       	std	Z+4, r26	; 0x04
    2e70:	b5 83       	std	Z+5, r27	; 0x05
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	88 5e       	subi	r24, 0xE8	; 232
    2e78:	93 40       	sbci	r25, 0x03	; 3
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	85 e6       	ldi	r24, 0x65	; 101
    2e80:	93 e0       	ldi	r25, 0x03	; 3
    2e82:	0e 94 58 09 	call	0x12b0	; 0x12b0 <display_process>
    2e86:	ff 91       	pop	r31
    2e88:	ef 91       	pop	r30
    2e8a:	bf 91       	pop	r27
    2e8c:	af 91       	pop	r26
    2e8e:	9f 91       	pop	r25
    2e90:	8f 91       	pop	r24
    2e92:	7f 91       	pop	r23
    2e94:	6f 91       	pop	r22
    2e96:	5f 91       	pop	r21
    2e98:	4f 91       	pop	r20
    2e9a:	3f 91       	pop	r19
    2e9c:	2f 91       	pop	r18
    2e9e:	0f 90       	pop	r0
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	0f 90       	pop	r0
    2ea4:	1f 90       	pop	r1
    2ea6:	18 95       	reti

00002ea8 <timer0_init>:
    2ea8:	93 b7       	in	r25, 0x33	; 51
    2eaa:	98 60       	ori	r25, 0x08	; 8
    2eac:	93 bf       	out	0x33, r25	; 51
    2eae:	6c bf       	out	0x3c, r22	; 60
    2eb0:	82 30       	cpi	r24, 0x02	; 2
    2eb2:	99 f0       	breq	.+38     	; 0x2eda <timer0_init+0x32>
    2eb4:	28 f4       	brcc	.+10     	; 0x2ec0 <timer0_init+0x18>
    2eb6:	88 23       	and	r24, r24
    2eb8:	41 f0       	breq	.+16     	; 0x2eca <timer0_init+0x22>
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	51 f0       	breq	.+20     	; 0x2ed2 <timer0_init+0x2a>
    2ebe:	19 c0       	rjmp	.+50     	; 0x2ef2 <timer0_init+0x4a>
    2ec0:	83 30       	cpi	r24, 0x03	; 3
    2ec2:	79 f0       	breq	.+30     	; 0x2ee2 <timer0_init+0x3a>
    2ec4:	84 30       	cpi	r24, 0x04	; 4
    2ec6:	89 f0       	breq	.+34     	; 0x2eea <timer0_init+0x42>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <timer0_init+0x4a>
    2eca:	83 b7       	in	r24, 0x33	; 51
    2ecc:	81 60       	ori	r24, 0x01	; 1
    2ece:	83 bf       	out	0x33, r24	; 51
    2ed0:	13 c0       	rjmp	.+38     	; 0x2ef8 <timer0_init+0x50>
    2ed2:	83 b7       	in	r24, 0x33	; 51
    2ed4:	82 60       	ori	r24, 0x02	; 2
    2ed6:	83 bf       	out	0x33, r24	; 51
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <timer0_init+0x50>
    2eda:	83 b7       	in	r24, 0x33	; 51
    2edc:	83 60       	ori	r24, 0x03	; 3
    2ede:	83 bf       	out	0x33, r24	; 51
    2ee0:	0b c0       	rjmp	.+22     	; 0x2ef8 <timer0_init+0x50>
    2ee2:	83 b7       	in	r24, 0x33	; 51
    2ee4:	84 60       	ori	r24, 0x04	; 4
    2ee6:	83 bf       	out	0x33, r24	; 51
    2ee8:	07 c0       	rjmp	.+14     	; 0x2ef8 <timer0_init+0x50>
    2eea:	83 b7       	in	r24, 0x33	; 51
    2eec:	85 60       	ori	r24, 0x05	; 5
    2eee:	83 bf       	out	0x33, r24	; 51
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <timer0_init+0x50>
    2ef2:	83 b7       	in	r24, 0x33	; 51
    2ef4:	81 60       	ori	r24, 0x01	; 1
    2ef6:	83 bf       	out	0x33, r24	; 51
    2ef8:	89 b7       	in	r24, 0x39	; 57
    2efa:	82 60       	ori	r24, 0x02	; 2
    2efc:	89 bf       	out	0x39, r24	; 57
    2efe:	08 95       	ret

00002f00 <evTime_init>:
    2f00:	23 e0       	ldi	r18, 0x03	; 3
    2f02:	fc 01       	movw	r30, r24
    2f04:	24 83       	std	Z+4, r18	; 0x04
    2f06:	10 82       	st	Z, r1
    2f08:	11 82       	std	Z+1, r1	; 0x01
    2f0a:	12 82       	std	Z+2, r1	; 0x02
    2f0c:	13 82       	std	Z+3, r1	; 0x03
    2f0e:	08 95       	ret

00002f10 <evTime_start>:
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	21 e0       	ldi	r18, 0x01	; 1
    2f16:	fc 01       	movw	r30, r24
    2f18:	24 83       	std	Z+4, r18	; 0x04
    2f1a:	00 91 0f 05 	lds	r16, 0x050F	; 0x80050f <mktime+0x2>
    2f1e:	10 91 10 05 	lds	r17, 0x0510	; 0x800510 <mktime+0x3>
    2f22:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <mktime+0x4>
    2f26:	30 91 12 05 	lds	r19, 0x0512	; 0x800512 <mktime+0x5>
    2f2a:	40 0f       	add	r20, r16
    2f2c:	51 1f       	adc	r21, r17
    2f2e:	62 1f       	adc	r22, r18
    2f30:	73 1f       	adc	r23, r19
    2f32:	40 83       	st	Z, r20
    2f34:	51 83       	std	Z+1, r21	; 0x01
    2f36:	62 83       	std	Z+2, r22	; 0x02
    2f38:	73 83       	std	Z+3, r23	; 0x03
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <evTime_is_stated>:
    2f40:	21 e0       	ldi	r18, 0x01	; 1
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	fc 01       	movw	r30, r24
    2f46:	84 81       	ldd	r24, Z+4	; 0x04
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	11 f0       	breq	.+4      	; 0x2f50 <evTime_is_stated+0x10>
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	c9 01       	movw	r24, r18
    2f52:	08 95       	ret

00002f54 <evTime_check>:

int evTime_check(evTime * evt)
{
    2f54:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2f56:	84 81       	ldd	r24, Z+4	; 0x04
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	b1 f4       	brne	.+44     	; 0x2f88 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2f5c:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <mktime+0x2>
    2f60:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <mktime+0x3>
    2f64:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <mktime+0x4>
    2f68:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <mktime+0x5>
    2f6c:	40 81       	ld	r20, Z
    2f6e:	51 81       	ldd	r21, Z+1	; 0x01
    2f70:	62 81       	ldd	r22, Z+2	; 0x02
    2f72:	73 81       	ldd	r23, Z+3	; 0x03
    2f74:	48 17       	cp	r20, r24
    2f76:	59 07       	cpc	r21, r25
    2f78:	6a 07       	cpc	r22, r26
    2f7a:	7b 07       	cpc	r23, r27
    2f7c:	40 f4       	brcc	.+16     	; 0x2f8e <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	9f ef       	ldi	r25, 0xFF	; 255
    2f8c:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2f92:	08 95       	ret

00002f94 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2f94:	21 e0       	ldi	r18, 0x01	; 1
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	fc 01       	movw	r30, r24
    2f9a:	84 81       	ldd	r24, Z+4	; 0x04
    2f9c:	83 30       	cpi	r24, 0x03	; 3
    2f9e:	11 f0       	breq	.+4      	; 0x2fa4 <evTime_off+0x10>
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
}
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	08 95       	ret

00002fa8 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2fa8:	cf 92       	push	r12
    2faa:	df 92       	push	r13
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	ec 01       	movw	r28, r24
    2fba:	6a 01       	movw	r12, r20
    2fbc:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc0:	81 11       	cpse	r24, r1
    2fc2:	06 c0       	rjmp	.+12     	; 0x2fd0 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2fc8:	18 82       	st	Y, r1
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	1a 82       	std	Y+2, r1	; 0x02
    2fce:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <evTime_check>
    2fd6:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	31 f4       	brne	.+12     	; 0x2fe8 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2fdc:	b7 01       	movw	r22, r14
    2fde:	a6 01       	movw	r20, r12
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
		return 1;
    2fe6:	0d c0       	rjmp	.+26     	; 0x3002 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fea:	83 30       	cpi	r24, 0x03	; 3
    2fec:	41 f4       	brne	.+16     	; 0x2ffe <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2fee:	b7 01       	movw	r22, r14
    2ff0:	a6 01       	movw	r20, r12
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <evTime_start>
	}
	return 0;
    2ff8:	00 e0       	ldi	r16, 0x00	; 0
    2ffa:	10 e0       	ldi	r17, 0x00	; 0
    2ffc:	02 c0       	rjmp	.+4      	; 0x3002 <evTime_process_period+0x5a>
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	10 e0       	ldi	r17, 0x00	; 0
}
    3002:	c8 01       	movw	r24, r16
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	08 95       	ret

00003016 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    3016:	1f 92       	push	r1
    3018:	0f 92       	push	r0
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	0f 92       	push	r0
    301e:	11 24       	eor	r1, r1
    3020:	2f 93       	push	r18
    3022:	3f 93       	push	r19
    3024:	4f 93       	push	r20
    3026:	5f 93       	push	r21
    3028:	8f 93       	push	r24
    302a:	9f 93       	push	r25
    302c:	ef 93       	push	r30
    302e:	ff 93       	push	r31
    3030:	2b b1       	in	r18, 0x0b	; 11
    3032:	3c b1       	in	r19, 0x0c	; 12
    3034:	28 71       	andi	r18, 0x18	; 24
    3036:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <UART_RxHead>
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	40 91 68 03 	lds	r20, 0x0368	; 0x800368 <UART_RxTail>
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	84 17       	cp	r24, r20
    3046:	95 07       	cpc	r25, r21
    3048:	39 f0       	breq	.+14     	; 0x3058 <__vector_13+0x42>
    304a:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <UART_RxHead>
    304e:	fc 01       	movw	r30, r24
    3050:	e4 59       	subi	r30, 0x94	; 148
    3052:	fc 4f       	sbci	r31, 0xFC	; 252
    3054:	30 83       	st	Z, r19
    3056:	01 c0       	rjmp	.+2      	; 0x305a <__vector_13+0x44>
    3058:	22 e0       	ldi	r18, 0x02	; 2
    305a:	20 93 67 03 	sts	0x0367, r18	; 0x800367 <UART_LastRxError>
    305e:	ff 91       	pop	r31
    3060:	ef 91       	pop	r30
    3062:	9f 91       	pop	r25
    3064:	8f 91       	pop	r24
    3066:	5f 91       	pop	r21
    3068:	4f 91       	pop	r20
    306a:	3f 91       	pop	r19
    306c:	2f 91       	pop	r18
    306e:	0f 90       	pop	r0
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	0f 90       	pop	r0
    3074:	1f 90       	pop	r1
    3076:	18 95       	reti

00003078 <__vector_14>:
    3078:	1f 92       	push	r1
    307a:	0f 92       	push	r0
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	0f 92       	push	r0
    3080:	11 24       	eor	r1, r1
    3082:	8f 93       	push	r24
    3084:	9f 93       	push	r25
    3086:	ef 93       	push	r30
    3088:	ff 93       	push	r31
    308a:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <UART_TxHead>
    308e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <UART_TxTail>
    3092:	98 17       	cp	r25, r24
    3094:	71 f0       	breq	.+28     	; 0x30b2 <__vector_14+0x3a>
    3096:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <UART_TxTail>
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	8f 77       	andi	r24, 0x7F	; 127
    30a0:	99 27       	eor	r25, r25
    30a2:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <UART_TxTail>
    30a6:	fc 01       	movw	r30, r24
    30a8:	e4 59       	subi	r30, 0x94	; 148
    30aa:	fc 4f       	sbci	r31, 0xFC	; 252
    30ac:	80 81       	ld	r24, Z
    30ae:	8c b9       	out	0x0c, r24	; 12
    30b0:	01 c0       	rjmp	.+2      	; 0x30b4 <__vector_14+0x3c>
    30b2:	55 98       	cbi	0x0a, 5	; 10
    30b4:	ff 91       	pop	r31
    30b6:	ef 91       	pop	r30
    30b8:	9f 91       	pop	r25
    30ba:	8f 91       	pop	r24
    30bc:	0f 90       	pop	r0
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	0f 90       	pop	r0
    30c2:	1f 90       	pop	r1
    30c4:	18 95       	reti

000030c6 <uart0_init>:
    30c6:	f8 94       	cli
    30c8:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <UART_TxHead>
    30cc:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <UART_TxTail>
    30d0:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <UART_RxHead>
    30d4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <UART_RxTail>
    30d8:	78 94       	sei
    30da:	99 23       	and	r25, r25
    30dc:	1c f4       	brge	.+6      	; 0x30e4 <uart0_init+0x1e>
    30de:	22 e0       	ldi	r18, 0x02	; 2
    30e0:	2b b9       	out	0x0b, r18	; 11
    30e2:	9f 77       	andi	r25, 0x7F	; 127
    30e4:	90 bd       	out	0x20, r25	; 32
    30e6:	89 b9       	out	0x09, r24	; 9
    30e8:	88 e9       	ldi	r24, 0x98	; 152
    30ea:	8a b9       	out	0x0a, r24	; 10
    30ec:	86 e8       	ldi	r24, 0x86	; 134
    30ee:	80 bd       	out	0x20, r24	; 32
    30f0:	08 95       	ret

000030f2 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    30f2:	40 91 6b 03 	lds	r20, 0x036B	; 0x80036b <UART_TxHead>
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	4f 5f       	subi	r20, 0xFF	; 255
    30fa:	5f 4f       	sbci	r21, 0xFF	; 255
    30fc:	4f 77       	andi	r20, 0x7F	; 127
    30fe:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    3100:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <UART_TxTail>
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	42 17       	cp	r20, r18
    3108:	53 07       	cpc	r21, r19
    310a:	d1 f3       	breq	.-12     	; 0x3100 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    310c:	fa 01       	movw	r30, r20
    310e:	e4 59       	subi	r30, 0x94	; 148
    3110:	fc 4f       	sbci	r31, 0xFC	; 252
    3112:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    3114:	40 93 6b 03 	sts	0x036B, r20	; 0x80036b <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    3118:	55 9a       	sbi	0x0a, 5	; 10
    311a:	08 95       	ret

0000311c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	ec 01       	movw	r28, r24
	while (*s) {
    3122:	88 81       	ld	r24, Y
    3124:	88 23       	and	r24, r24
    3126:	31 f0       	breq	.+12     	; 0x3134 <uart0_puts+0x18>
    3128:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    312a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    312e:	89 91       	ld	r24, Y+
    3130:	81 11       	cpse	r24, r1
    3132:	fb cf       	rjmp	.-10     	; 0x312a <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	08 95       	ret

0000313a <__subsf3>:
    313a:	50 58       	subi	r21, 0x80	; 128

0000313c <__addsf3>:
    313c:	bb 27       	eor	r27, r27
    313e:	aa 27       	eor	r26, r26
    3140:	0e 94 b5 18 	call	0x316a	; 0x316a <__addsf3x>
    3144:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_round>
    3148:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_pscA>
    314c:	38 f0       	brcs	.+14     	; 0x315c <__addsf3+0x20>
    314e:	0e 94 23 1a 	call	0x3446	; 0x3446 <__fp_pscB>
    3152:	20 f0       	brcs	.+8      	; 0x315c <__addsf3+0x20>
    3154:	39 f4       	brne	.+14     	; 0x3164 <__addsf3+0x28>
    3156:	9f 3f       	cpi	r25, 0xFF	; 255
    3158:	19 f4       	brne	.+6      	; 0x3160 <__addsf3+0x24>
    315a:	26 f4       	brtc	.+8      	; 0x3164 <__addsf3+0x28>
    315c:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>
    3160:	0e f4       	brtc	.+2      	; 0x3164 <__addsf3+0x28>
    3162:	e0 95       	com	r30
    3164:	e7 fb       	bst	r30, 7
    3166:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>

0000316a <__addsf3x>:
    316a:	e9 2f       	mov	r30, r25
    316c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__fp_split3>
    3170:	58 f3       	brcs	.-42     	; 0x3148 <__addsf3+0xc>
    3172:	ba 17       	cp	r27, r26
    3174:	62 07       	cpc	r22, r18
    3176:	73 07       	cpc	r23, r19
    3178:	84 07       	cpc	r24, r20
    317a:	95 07       	cpc	r25, r21
    317c:	20 f0       	brcs	.+8      	; 0x3186 <__addsf3x+0x1c>
    317e:	79 f4       	brne	.+30     	; 0x319e <__addsf3x+0x34>
    3180:	a6 f5       	brtc	.+104    	; 0x31ea <__addsf3x+0x80>
    3182:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_zero>
    3186:	0e f4       	brtc	.+2      	; 0x318a <__addsf3x+0x20>
    3188:	e0 95       	com	r30
    318a:	0b 2e       	mov	r0, r27
    318c:	ba 2f       	mov	r27, r26
    318e:	a0 2d       	mov	r26, r0
    3190:	0b 01       	movw	r0, r22
    3192:	b9 01       	movw	r22, r18
    3194:	90 01       	movw	r18, r0
    3196:	0c 01       	movw	r0, r24
    3198:	ca 01       	movw	r24, r20
    319a:	a0 01       	movw	r20, r0
    319c:	11 24       	eor	r1, r1
    319e:	ff 27       	eor	r31, r31
    31a0:	59 1b       	sub	r21, r25
    31a2:	99 f0       	breq	.+38     	; 0x31ca <__addsf3x+0x60>
    31a4:	59 3f       	cpi	r21, 0xF9	; 249
    31a6:	50 f4       	brcc	.+20     	; 0x31bc <__addsf3x+0x52>
    31a8:	50 3e       	cpi	r21, 0xE0	; 224
    31aa:	68 f1       	brcs	.+90     	; 0x3206 <__addsf3x+0x9c>
    31ac:	1a 16       	cp	r1, r26
    31ae:	f0 40       	sbci	r31, 0x00	; 0
    31b0:	a2 2f       	mov	r26, r18
    31b2:	23 2f       	mov	r18, r19
    31b4:	34 2f       	mov	r19, r20
    31b6:	44 27       	eor	r20, r20
    31b8:	58 5f       	subi	r21, 0xF8	; 248
    31ba:	f3 cf       	rjmp	.-26     	; 0x31a2 <__addsf3x+0x38>
    31bc:	46 95       	lsr	r20
    31be:	37 95       	ror	r19
    31c0:	27 95       	ror	r18
    31c2:	a7 95       	ror	r26
    31c4:	f0 40       	sbci	r31, 0x00	; 0
    31c6:	53 95       	inc	r21
    31c8:	c9 f7       	brne	.-14     	; 0x31bc <__addsf3x+0x52>
    31ca:	7e f4       	brtc	.+30     	; 0x31ea <__addsf3x+0x80>
    31cc:	1f 16       	cp	r1, r31
    31ce:	ba 0b       	sbc	r27, r26
    31d0:	62 0b       	sbc	r22, r18
    31d2:	73 0b       	sbc	r23, r19
    31d4:	84 0b       	sbc	r24, r20
    31d6:	ba f0       	brmi	.+46     	; 0x3206 <__addsf3x+0x9c>
    31d8:	91 50       	subi	r25, 0x01	; 1
    31da:	a1 f0       	breq	.+40     	; 0x3204 <__addsf3x+0x9a>
    31dc:	ff 0f       	add	r31, r31
    31de:	bb 1f       	adc	r27, r27
    31e0:	66 1f       	adc	r22, r22
    31e2:	77 1f       	adc	r23, r23
    31e4:	88 1f       	adc	r24, r24
    31e6:	c2 f7       	brpl	.-16     	; 0x31d8 <__addsf3x+0x6e>
    31e8:	0e c0       	rjmp	.+28     	; 0x3206 <__addsf3x+0x9c>
    31ea:	ba 0f       	add	r27, r26
    31ec:	62 1f       	adc	r22, r18
    31ee:	73 1f       	adc	r23, r19
    31f0:	84 1f       	adc	r24, r20
    31f2:	48 f4       	brcc	.+18     	; 0x3206 <__addsf3x+0x9c>
    31f4:	87 95       	ror	r24
    31f6:	77 95       	ror	r23
    31f8:	67 95       	ror	r22
    31fa:	b7 95       	ror	r27
    31fc:	f7 95       	ror	r31
    31fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3200:	08 f0       	brcs	.+2      	; 0x3204 <__addsf3x+0x9a>
    3202:	b0 cf       	rjmp	.-160    	; 0x3164 <__addsf3+0x28>
    3204:	93 95       	inc	r25
    3206:	88 0f       	add	r24, r24
    3208:	08 f0       	brcs	.+2      	; 0x320c <__addsf3x+0xa2>
    320a:	99 27       	eor	r25, r25
    320c:	ee 0f       	add	r30, r30
    320e:	97 95       	ror	r25
    3210:	87 95       	ror	r24
    3212:	08 95       	ret

00003214 <__divsf3>:
    3214:	0e 94 1e 19 	call	0x323c	; 0x323c <__divsf3x>
    3218:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_round>
    321c:	0e 94 23 1a 	call	0x3446	; 0x3446 <__fp_pscB>
    3220:	58 f0       	brcs	.+22     	; 0x3238 <__divsf3+0x24>
    3222:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_pscA>
    3226:	40 f0       	brcs	.+16     	; 0x3238 <__divsf3+0x24>
    3228:	29 f4       	brne	.+10     	; 0x3234 <__divsf3+0x20>
    322a:	5f 3f       	cpi	r21, 0xFF	; 255
    322c:	29 f0       	breq	.+10     	; 0x3238 <__divsf3+0x24>
    322e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    3232:	51 11       	cpse	r21, r1
    3234:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>
    3238:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>

0000323c <__divsf3x>:
    323c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__fp_split3>
    3240:	68 f3       	brcs	.-38     	; 0x321c <__divsf3+0x8>

00003242 <__divsf3_pse>:
    3242:	99 23       	and	r25, r25
    3244:	b1 f3       	breq	.-20     	; 0x3232 <__divsf3+0x1e>
    3246:	55 23       	and	r21, r21
    3248:	91 f3       	breq	.-28     	; 0x322e <__divsf3+0x1a>
    324a:	95 1b       	sub	r25, r21
    324c:	55 0b       	sbc	r21, r21
    324e:	bb 27       	eor	r27, r27
    3250:	aa 27       	eor	r26, r26
    3252:	62 17       	cp	r22, r18
    3254:	73 07       	cpc	r23, r19
    3256:	84 07       	cpc	r24, r20
    3258:	38 f0       	brcs	.+14     	; 0x3268 <__divsf3_pse+0x26>
    325a:	9f 5f       	subi	r25, 0xFF	; 255
    325c:	5f 4f       	sbci	r21, 0xFF	; 255
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	44 1f       	adc	r20, r20
    3264:	aa 1f       	adc	r26, r26
    3266:	a9 f3       	breq	.-22     	; 0x3252 <__divsf3_pse+0x10>
    3268:	35 d0       	rcall	.+106    	; 0x32d4 <__divsf3_pse+0x92>
    326a:	0e 2e       	mov	r0, r30
    326c:	3a f0       	brmi	.+14     	; 0x327c <__divsf3_pse+0x3a>
    326e:	e0 e8       	ldi	r30, 0x80	; 128
    3270:	32 d0       	rcall	.+100    	; 0x32d6 <__divsf3_pse+0x94>
    3272:	91 50       	subi	r25, 0x01	; 1
    3274:	50 40       	sbci	r21, 0x00	; 0
    3276:	e6 95       	lsr	r30
    3278:	00 1c       	adc	r0, r0
    327a:	ca f7       	brpl	.-14     	; 0x326e <__divsf3_pse+0x2c>
    327c:	2b d0       	rcall	.+86     	; 0x32d4 <__divsf3_pse+0x92>
    327e:	fe 2f       	mov	r31, r30
    3280:	29 d0       	rcall	.+82     	; 0x32d4 <__divsf3_pse+0x92>
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	bb 1f       	adc	r27, r27
    328a:	26 17       	cp	r18, r22
    328c:	37 07       	cpc	r19, r23
    328e:	48 07       	cpc	r20, r24
    3290:	ab 07       	cpc	r26, r27
    3292:	b0 e8       	ldi	r27, 0x80	; 128
    3294:	09 f0       	breq	.+2      	; 0x3298 <__divsf3_pse+0x56>
    3296:	bb 0b       	sbc	r27, r27
    3298:	80 2d       	mov	r24, r0
    329a:	bf 01       	movw	r22, r30
    329c:	ff 27       	eor	r31, r31
    329e:	93 58       	subi	r25, 0x83	; 131
    32a0:	5f 4f       	sbci	r21, 0xFF	; 255
    32a2:	3a f0       	brmi	.+14     	; 0x32b2 <__divsf3_pse+0x70>
    32a4:	9e 3f       	cpi	r25, 0xFE	; 254
    32a6:	51 05       	cpc	r21, r1
    32a8:	78 f0       	brcs	.+30     	; 0x32c8 <__divsf3_pse+0x86>
    32aa:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    32ae:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>
    32b2:	5f 3f       	cpi	r21, 0xFF	; 255
    32b4:	e4 f3       	brlt	.-8      	; 0x32ae <__divsf3_pse+0x6c>
    32b6:	98 3e       	cpi	r25, 0xE8	; 232
    32b8:	d4 f3       	brlt	.-12     	; 0x32ae <__divsf3_pse+0x6c>
    32ba:	86 95       	lsr	r24
    32bc:	77 95       	ror	r23
    32be:	67 95       	ror	r22
    32c0:	b7 95       	ror	r27
    32c2:	f7 95       	ror	r31
    32c4:	9f 5f       	subi	r25, 0xFF	; 255
    32c6:	c9 f7       	brne	.-14     	; 0x32ba <__divsf3_pse+0x78>
    32c8:	88 0f       	add	r24, r24
    32ca:	91 1d       	adc	r25, r1
    32cc:	96 95       	lsr	r25
    32ce:	87 95       	ror	r24
    32d0:	97 f9       	bld	r25, 7
    32d2:	08 95       	ret
    32d4:	e1 e0       	ldi	r30, 0x01	; 1
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	88 1f       	adc	r24, r24
    32dc:	bb 1f       	adc	r27, r27
    32de:	62 17       	cp	r22, r18
    32e0:	73 07       	cpc	r23, r19
    32e2:	84 07       	cpc	r24, r20
    32e4:	ba 07       	cpc	r27, r26
    32e6:	20 f0       	brcs	.+8      	; 0x32f0 <__divsf3_pse+0xae>
    32e8:	62 1b       	sub	r22, r18
    32ea:	73 0b       	sbc	r23, r19
    32ec:	84 0b       	sbc	r24, r20
    32ee:	ba 0b       	sbc	r27, r26
    32f0:	ee 1f       	adc	r30, r30
    32f2:	88 f7       	brcc	.-30     	; 0x32d6 <__divsf3_pse+0x94>
    32f4:	e0 95       	com	r30
    32f6:	08 95       	ret

000032f8 <__fixsfsi>:
    32f8:	0e 94 83 19 	call	0x3306	; 0x3306 <__fixunssfsi>
    32fc:	68 94       	set
    32fe:	b1 11       	cpse	r27, r1
    3300:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>
    3304:	08 95       	ret

00003306 <__fixunssfsi>:
    3306:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_splitA>
    330a:	88 f0       	brcs	.+34     	; 0x332e <__fixunssfsi+0x28>
    330c:	9f 57       	subi	r25, 0x7F	; 127
    330e:	98 f0       	brcs	.+38     	; 0x3336 <__fixunssfsi+0x30>
    3310:	b9 2f       	mov	r27, r25
    3312:	99 27       	eor	r25, r25
    3314:	b7 51       	subi	r27, 0x17	; 23
    3316:	b0 f0       	brcs	.+44     	; 0x3344 <__fixunssfsi+0x3e>
    3318:	e1 f0       	breq	.+56     	; 0x3352 <__fixunssfsi+0x4c>
    331a:	66 0f       	add	r22, r22
    331c:	77 1f       	adc	r23, r23
    331e:	88 1f       	adc	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	1a f0       	brmi	.+6      	; 0x332a <__fixunssfsi+0x24>
    3324:	ba 95       	dec	r27
    3326:	c9 f7       	brne	.-14     	; 0x331a <__fixunssfsi+0x14>
    3328:	14 c0       	rjmp	.+40     	; 0x3352 <__fixunssfsi+0x4c>
    332a:	b1 30       	cpi	r27, 0x01	; 1
    332c:	91 f0       	breq	.+36     	; 0x3352 <__fixunssfsi+0x4c>
    332e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__fp_zero>
    3332:	b1 e0       	ldi	r27, 0x01	; 1
    3334:	08 95       	ret
    3336:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_zero>
    333a:	67 2f       	mov	r22, r23
    333c:	78 2f       	mov	r23, r24
    333e:	88 27       	eor	r24, r24
    3340:	b8 5f       	subi	r27, 0xF8	; 248
    3342:	39 f0       	breq	.+14     	; 0x3352 <__fixunssfsi+0x4c>
    3344:	b9 3f       	cpi	r27, 0xF9	; 249
    3346:	cc f3       	brlt	.-14     	; 0x333a <__fixunssfsi+0x34>
    3348:	86 95       	lsr	r24
    334a:	77 95       	ror	r23
    334c:	67 95       	ror	r22
    334e:	b3 95       	inc	r27
    3350:	d9 f7       	brne	.-10     	; 0x3348 <__fixunssfsi+0x42>
    3352:	3e f4       	brtc	.+14     	; 0x3362 <__fixunssfsi+0x5c>
    3354:	90 95       	com	r25
    3356:	80 95       	com	r24
    3358:	70 95       	com	r23
    335a:	61 95       	neg	r22
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	8f 4f       	sbci	r24, 0xFF	; 255
    3360:	9f 4f       	sbci	r25, 0xFF	; 255
    3362:	08 95       	ret

00003364 <__floatunsisf>:
    3364:	e8 94       	clt
    3366:	09 c0       	rjmp	.+18     	; 0x337a <__floatsisf+0x12>

00003368 <__floatsisf>:
    3368:	97 fb       	bst	r25, 7
    336a:	3e f4       	brtc	.+14     	; 0x337a <__floatsisf+0x12>
    336c:	90 95       	com	r25
    336e:	80 95       	com	r24
    3370:	70 95       	com	r23
    3372:	61 95       	neg	r22
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	8f 4f       	sbci	r24, 0xFF	; 255
    3378:	9f 4f       	sbci	r25, 0xFF	; 255
    337a:	99 23       	and	r25, r25
    337c:	a9 f0       	breq	.+42     	; 0x33a8 <__floatsisf+0x40>
    337e:	f9 2f       	mov	r31, r25
    3380:	96 e9       	ldi	r25, 0x96	; 150
    3382:	bb 27       	eor	r27, r27
    3384:	93 95       	inc	r25
    3386:	f6 95       	lsr	r31
    3388:	87 95       	ror	r24
    338a:	77 95       	ror	r23
    338c:	67 95       	ror	r22
    338e:	b7 95       	ror	r27
    3390:	f1 11       	cpse	r31, r1
    3392:	f8 cf       	rjmp	.-16     	; 0x3384 <__floatsisf+0x1c>
    3394:	fa f4       	brpl	.+62     	; 0x33d4 <__floatsisf+0x6c>
    3396:	bb 0f       	add	r27, r27
    3398:	11 f4       	brne	.+4      	; 0x339e <__floatsisf+0x36>
    339a:	60 ff       	sbrs	r22, 0
    339c:	1b c0       	rjmp	.+54     	; 0x33d4 <__floatsisf+0x6c>
    339e:	6f 5f       	subi	r22, 0xFF	; 255
    33a0:	7f 4f       	sbci	r23, 0xFF	; 255
    33a2:	8f 4f       	sbci	r24, 0xFF	; 255
    33a4:	9f 4f       	sbci	r25, 0xFF	; 255
    33a6:	16 c0       	rjmp	.+44     	; 0x33d4 <__floatsisf+0x6c>
    33a8:	88 23       	and	r24, r24
    33aa:	11 f0       	breq	.+4      	; 0x33b0 <__floatsisf+0x48>
    33ac:	96 e9       	ldi	r25, 0x96	; 150
    33ae:	11 c0       	rjmp	.+34     	; 0x33d2 <__floatsisf+0x6a>
    33b0:	77 23       	and	r23, r23
    33b2:	21 f0       	breq	.+8      	; 0x33bc <__floatsisf+0x54>
    33b4:	9e e8       	ldi	r25, 0x8E	; 142
    33b6:	87 2f       	mov	r24, r23
    33b8:	76 2f       	mov	r23, r22
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <__floatsisf+0x5e>
    33bc:	66 23       	and	r22, r22
    33be:	71 f0       	breq	.+28     	; 0x33dc <__floatsisf+0x74>
    33c0:	96 e8       	ldi	r25, 0x86	; 134
    33c2:	86 2f       	mov	r24, r22
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	2a f0       	brmi	.+10     	; 0x33d4 <__floatsisf+0x6c>
    33ca:	9a 95       	dec	r25
    33cc:	66 0f       	add	r22, r22
    33ce:	77 1f       	adc	r23, r23
    33d0:	88 1f       	adc	r24, r24
    33d2:	da f7       	brpl	.-10     	; 0x33ca <__floatsisf+0x62>
    33d4:	88 0f       	add	r24, r24
    33d6:	96 95       	lsr	r25
    33d8:	87 95       	ror	r24
    33da:	97 f9       	bld	r25, 7
    33dc:	08 95       	ret

000033de <__fp_cmp>:
    33de:	99 0f       	add	r25, r25
    33e0:	00 08       	sbc	r0, r0
    33e2:	55 0f       	add	r21, r21
    33e4:	aa 0b       	sbc	r26, r26
    33e6:	e0 e8       	ldi	r30, 0x80	; 128
    33e8:	fe ef       	ldi	r31, 0xFE	; 254
    33ea:	16 16       	cp	r1, r22
    33ec:	17 06       	cpc	r1, r23
    33ee:	e8 07       	cpc	r30, r24
    33f0:	f9 07       	cpc	r31, r25
    33f2:	c0 f0       	brcs	.+48     	; 0x3424 <__fp_cmp+0x46>
    33f4:	12 16       	cp	r1, r18
    33f6:	13 06       	cpc	r1, r19
    33f8:	e4 07       	cpc	r30, r20
    33fa:	f5 07       	cpc	r31, r21
    33fc:	98 f0       	brcs	.+38     	; 0x3424 <__fp_cmp+0x46>
    33fe:	62 1b       	sub	r22, r18
    3400:	73 0b       	sbc	r23, r19
    3402:	84 0b       	sbc	r24, r20
    3404:	95 0b       	sbc	r25, r21
    3406:	39 f4       	brne	.+14     	; 0x3416 <__fp_cmp+0x38>
    3408:	0a 26       	eor	r0, r26
    340a:	61 f0       	breq	.+24     	; 0x3424 <__fp_cmp+0x46>
    340c:	23 2b       	or	r18, r19
    340e:	24 2b       	or	r18, r20
    3410:	25 2b       	or	r18, r21
    3412:	21 f4       	brne	.+8      	; 0x341c <__fp_cmp+0x3e>
    3414:	08 95       	ret
    3416:	0a 26       	eor	r0, r26
    3418:	09 f4       	brne	.+2      	; 0x341c <__fp_cmp+0x3e>
    341a:	a1 40       	sbci	r26, 0x01	; 1
    341c:	a6 95       	lsr	r26
    341e:	8f ef       	ldi	r24, 0xFF	; 255
    3420:	81 1d       	adc	r24, r1
    3422:	81 1d       	adc	r24, r1
    3424:	08 95       	ret

00003426 <__fp_inf>:
    3426:	97 f9       	bld	r25, 7
    3428:	9f 67       	ori	r25, 0x7F	; 127
    342a:	80 e8       	ldi	r24, 0x80	; 128
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	08 95       	ret

00003432 <__fp_nan>:
    3432:	9f ef       	ldi	r25, 0xFF	; 255
    3434:	80 ec       	ldi	r24, 0xC0	; 192
    3436:	08 95       	ret

00003438 <__fp_pscA>:
    3438:	00 24       	eor	r0, r0
    343a:	0a 94       	dec	r0
    343c:	16 16       	cp	r1, r22
    343e:	17 06       	cpc	r1, r23
    3440:	18 06       	cpc	r1, r24
    3442:	09 06       	cpc	r0, r25
    3444:	08 95       	ret

00003446 <__fp_pscB>:
    3446:	00 24       	eor	r0, r0
    3448:	0a 94       	dec	r0
    344a:	12 16       	cp	r1, r18
    344c:	13 06       	cpc	r1, r19
    344e:	14 06       	cpc	r1, r20
    3450:	05 06       	cpc	r0, r21
    3452:	08 95       	ret

00003454 <__fp_round>:
    3454:	09 2e       	mov	r0, r25
    3456:	03 94       	inc	r0
    3458:	00 0c       	add	r0, r0
    345a:	11 f4       	brne	.+4      	; 0x3460 <__fp_round+0xc>
    345c:	88 23       	and	r24, r24
    345e:	52 f0       	brmi	.+20     	; 0x3474 <__fp_round+0x20>
    3460:	bb 0f       	add	r27, r27
    3462:	40 f4       	brcc	.+16     	; 0x3474 <__fp_round+0x20>
    3464:	bf 2b       	or	r27, r31
    3466:	11 f4       	brne	.+4      	; 0x346c <__fp_round+0x18>
    3468:	60 ff       	sbrs	r22, 0
    346a:	04 c0       	rjmp	.+8      	; 0x3474 <__fp_round+0x20>
    346c:	6f 5f       	subi	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	8f 4f       	sbci	r24, 0xFF	; 255
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	08 95       	ret

00003476 <__fp_split3>:
    3476:	57 fd       	sbrc	r21, 7
    3478:	90 58       	subi	r25, 0x80	; 128
    347a:	44 0f       	add	r20, r20
    347c:	55 1f       	adc	r21, r21
    347e:	59 f0       	breq	.+22     	; 0x3496 <__fp_splitA+0x10>
    3480:	5f 3f       	cpi	r21, 0xFF	; 255
    3482:	71 f0       	breq	.+28     	; 0x34a0 <__fp_splitA+0x1a>
    3484:	47 95       	ror	r20

00003486 <__fp_splitA>:
    3486:	88 0f       	add	r24, r24
    3488:	97 fb       	bst	r25, 7
    348a:	99 1f       	adc	r25, r25
    348c:	61 f0       	breq	.+24     	; 0x34a6 <__fp_splitA+0x20>
    348e:	9f 3f       	cpi	r25, 0xFF	; 255
    3490:	79 f0       	breq	.+30     	; 0x34b0 <__fp_splitA+0x2a>
    3492:	87 95       	ror	r24
    3494:	08 95       	ret
    3496:	12 16       	cp	r1, r18
    3498:	13 06       	cpc	r1, r19
    349a:	14 06       	cpc	r1, r20
    349c:	55 1f       	adc	r21, r21
    349e:	f2 cf       	rjmp	.-28     	; 0x3484 <__fp_split3+0xe>
    34a0:	46 95       	lsr	r20
    34a2:	f1 df       	rcall	.-30     	; 0x3486 <__fp_splitA>
    34a4:	08 c0       	rjmp	.+16     	; 0x34b6 <__fp_splitA+0x30>
    34a6:	16 16       	cp	r1, r22
    34a8:	17 06       	cpc	r1, r23
    34aa:	18 06       	cpc	r1, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	f1 cf       	rjmp	.-30     	; 0x3492 <__fp_splitA+0xc>
    34b0:	86 95       	lsr	r24
    34b2:	71 05       	cpc	r23, r1
    34b4:	61 05       	cpc	r22, r1
    34b6:	08 94       	sec
    34b8:	08 95       	ret

000034ba <__fp_zero>:
    34ba:	e8 94       	clt

000034bc <__fp_szero>:
    34bc:	bb 27       	eor	r27, r27
    34be:	66 27       	eor	r22, r22
    34c0:	77 27       	eor	r23, r23
    34c2:	cb 01       	movw	r24, r22
    34c4:	97 f9       	bld	r25, 7
    34c6:	08 95       	ret

000034c8 <__gesf2>:
    34c8:	0e 94 ef 19 	call	0x33de	; 0x33de <__fp_cmp>
    34cc:	08 f4       	brcc	.+2      	; 0x34d0 <__gesf2+0x8>
    34ce:	8f ef       	ldi	r24, 0xFF	; 255
    34d0:	08 95       	ret

000034d2 <__mulsf3>:
    34d2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__mulsf3x>
    34d6:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_round>
    34da:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__fp_pscA>
    34de:	38 f0       	brcs	.+14     	; 0x34ee <__mulsf3+0x1c>
    34e0:	0e 94 23 1a 	call	0x3446	; 0x3446 <__fp_pscB>
    34e4:	20 f0       	brcs	.+8      	; 0x34ee <__mulsf3+0x1c>
    34e6:	95 23       	and	r25, r21
    34e8:	11 f0       	breq	.+4      	; 0x34ee <__mulsf3+0x1c>
    34ea:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    34ee:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>
    34f2:	11 24       	eor	r1, r1
    34f4:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>

000034f8 <__mulsf3x>:
    34f8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__fp_split3>
    34fc:	70 f3       	brcs	.-36     	; 0x34da <__mulsf3+0x8>

000034fe <__mulsf3_pse>:
    34fe:	95 9f       	mul	r25, r21
    3500:	c1 f3       	breq	.-16     	; 0x34f2 <__mulsf3+0x20>
    3502:	95 0f       	add	r25, r21
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	55 1f       	adc	r21, r21
    3508:	62 9f       	mul	r22, r18
    350a:	f0 01       	movw	r30, r0
    350c:	72 9f       	mul	r23, r18
    350e:	bb 27       	eor	r27, r27
    3510:	f0 0d       	add	r31, r0
    3512:	b1 1d       	adc	r27, r1
    3514:	63 9f       	mul	r22, r19
    3516:	aa 27       	eor	r26, r26
    3518:	f0 0d       	add	r31, r0
    351a:	b1 1d       	adc	r27, r1
    351c:	aa 1f       	adc	r26, r26
    351e:	64 9f       	mul	r22, r20
    3520:	66 27       	eor	r22, r22
    3522:	b0 0d       	add	r27, r0
    3524:	a1 1d       	adc	r26, r1
    3526:	66 1f       	adc	r22, r22
    3528:	82 9f       	mul	r24, r18
    352a:	22 27       	eor	r18, r18
    352c:	b0 0d       	add	r27, r0
    352e:	a1 1d       	adc	r26, r1
    3530:	62 1f       	adc	r22, r18
    3532:	73 9f       	mul	r23, r19
    3534:	b0 0d       	add	r27, r0
    3536:	a1 1d       	adc	r26, r1
    3538:	62 1f       	adc	r22, r18
    353a:	83 9f       	mul	r24, r19
    353c:	a0 0d       	add	r26, r0
    353e:	61 1d       	adc	r22, r1
    3540:	22 1f       	adc	r18, r18
    3542:	74 9f       	mul	r23, r20
    3544:	33 27       	eor	r19, r19
    3546:	a0 0d       	add	r26, r0
    3548:	61 1d       	adc	r22, r1
    354a:	23 1f       	adc	r18, r19
    354c:	84 9f       	mul	r24, r20
    354e:	60 0d       	add	r22, r0
    3550:	21 1d       	adc	r18, r1
    3552:	82 2f       	mov	r24, r18
    3554:	76 2f       	mov	r23, r22
    3556:	6a 2f       	mov	r22, r26
    3558:	11 24       	eor	r1, r1
    355a:	9f 57       	subi	r25, 0x7F	; 127
    355c:	50 40       	sbci	r21, 0x00	; 0
    355e:	9a f0       	brmi	.+38     	; 0x3586 <__mulsf3_pse+0x88>
    3560:	f1 f0       	breq	.+60     	; 0x359e <__mulsf3_pse+0xa0>
    3562:	88 23       	and	r24, r24
    3564:	4a f0       	brmi	.+18     	; 0x3578 <__mulsf3_pse+0x7a>
    3566:	ee 0f       	add	r30, r30
    3568:	ff 1f       	adc	r31, r31
    356a:	bb 1f       	adc	r27, r27
    356c:	66 1f       	adc	r22, r22
    356e:	77 1f       	adc	r23, r23
    3570:	88 1f       	adc	r24, r24
    3572:	91 50       	subi	r25, 0x01	; 1
    3574:	50 40       	sbci	r21, 0x00	; 0
    3576:	a9 f7       	brne	.-22     	; 0x3562 <__mulsf3_pse+0x64>
    3578:	9e 3f       	cpi	r25, 0xFE	; 254
    357a:	51 05       	cpc	r21, r1
    357c:	80 f0       	brcs	.+32     	; 0x359e <__mulsf3_pse+0xa0>
    357e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    3582:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>
    3586:	5f 3f       	cpi	r21, 0xFF	; 255
    3588:	e4 f3       	brlt	.-8      	; 0x3582 <__mulsf3_pse+0x84>
    358a:	98 3e       	cpi	r25, 0xE8	; 232
    358c:	d4 f3       	brlt	.-12     	; 0x3582 <__mulsf3_pse+0x84>
    358e:	86 95       	lsr	r24
    3590:	77 95       	ror	r23
    3592:	67 95       	ror	r22
    3594:	b7 95       	ror	r27
    3596:	f7 95       	ror	r31
    3598:	e7 95       	ror	r30
    359a:	9f 5f       	subi	r25, 0xFF	; 255
    359c:	c1 f7       	brne	.-16     	; 0x358e <__mulsf3_pse+0x90>
    359e:	fe 2b       	or	r31, r30
    35a0:	88 0f       	add	r24, r24
    35a2:	91 1d       	adc	r25, r1
    35a4:	96 95       	lsr	r25
    35a6:	87 95       	ror	r24
    35a8:	97 f9       	bld	r25, 7
    35aa:	08 95       	ret

000035ac <pow>:
    35ac:	fa 01       	movw	r30, r20
    35ae:	ee 0f       	add	r30, r30
    35b0:	ff 1f       	adc	r31, r31
    35b2:	30 96       	adiw	r30, 0x00	; 0
    35b4:	21 05       	cpc	r18, r1
    35b6:	31 05       	cpc	r19, r1
    35b8:	a1 f1       	breq	.+104    	; 0x3622 <pow+0x76>
    35ba:	61 15       	cp	r22, r1
    35bc:	71 05       	cpc	r23, r1
    35be:	61 f4       	brne	.+24     	; 0x35d8 <pow+0x2c>
    35c0:	80 38       	cpi	r24, 0x80	; 128
    35c2:	bf e3       	ldi	r27, 0x3F	; 63
    35c4:	9b 07       	cpc	r25, r27
    35c6:	49 f1       	breq	.+82     	; 0x361a <pow+0x6e>
    35c8:	68 94       	set
    35ca:	90 38       	cpi	r25, 0x80	; 128
    35cc:	81 05       	cpc	r24, r1
    35ce:	61 f0       	breq	.+24     	; 0x35e8 <pow+0x3c>
    35d0:	80 38       	cpi	r24, 0x80	; 128
    35d2:	bf ef       	ldi	r27, 0xFF	; 255
    35d4:	9b 07       	cpc	r25, r27
    35d6:	41 f0       	breq	.+16     	; 0x35e8 <pow+0x3c>
    35d8:	99 23       	and	r25, r25
    35da:	4a f5       	brpl	.+82     	; 0x362e <pow+0x82>
    35dc:	ff 3f       	cpi	r31, 0xFF	; 255
    35de:	e1 05       	cpc	r30, r1
    35e0:	31 05       	cpc	r19, r1
    35e2:	21 05       	cpc	r18, r1
    35e4:	19 f1       	breq	.+70     	; 0x362c <pow+0x80>
    35e6:	e8 94       	clt
    35e8:	08 94       	sec
    35ea:	e7 95       	ror	r30
    35ec:	d9 01       	movw	r26, r18
    35ee:	aa 23       	and	r26, r26
    35f0:	29 f4       	brne	.+10     	; 0x35fc <pow+0x50>
    35f2:	ab 2f       	mov	r26, r27
    35f4:	be 2f       	mov	r27, r30
    35f6:	f8 5f       	subi	r31, 0xF8	; 248
    35f8:	d0 f3       	brcs	.-12     	; 0x35ee <pow+0x42>
    35fa:	10 c0       	rjmp	.+32     	; 0x361c <pow+0x70>
    35fc:	ff 5f       	subi	r31, 0xFF	; 255
    35fe:	70 f4       	brcc	.+28     	; 0x361c <pow+0x70>
    3600:	a6 95       	lsr	r26
    3602:	e0 f7       	brcc	.-8      	; 0x35fc <pow+0x50>
    3604:	f7 39       	cpi	r31, 0x97	; 151
    3606:	50 f0       	brcs	.+20     	; 0x361c <pow+0x70>
    3608:	19 f0       	breq	.+6      	; 0x3610 <pow+0x64>
    360a:	ff 3a       	cpi	r31, 0xAF	; 175
    360c:	38 f4       	brcc	.+14     	; 0x361c <pow+0x70>
    360e:	9f 77       	andi	r25, 0x7F	; 127
    3610:	9f 93       	push	r25
    3612:	0d d0       	rcall	.+26     	; 0x362e <pow+0x82>
    3614:	0f 90       	pop	r0
    3616:	07 fc       	sbrc	r0, 7
    3618:	90 58       	subi	r25, 0x80	; 128
    361a:	08 95       	ret
    361c:	46 f0       	brts	.+16     	; 0x362e <pow+0x82>
    361e:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>
    3622:	60 e0       	ldi	r22, 0x00	; 0
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	80 e8       	ldi	r24, 0x80	; 128
    3628:	9f e3       	ldi	r25, 0x3F	; 63
    362a:	08 95       	ret
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	9f 77       	andi	r25, 0x7F	; 127
    3630:	5f 93       	push	r21
    3632:	4f 93       	push	r20
    3634:	3f 93       	push	r19
    3636:	2f 93       	push	r18
    3638:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <log>
    363c:	2f 91       	pop	r18
    363e:	3f 91       	pop	r19
    3640:	4f 91       	pop	r20
    3642:	5f 91       	pop	r21
    3644:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__mulsf3>
    3648:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <exp>
    364c:	29 f4       	brne	.+10     	; 0x3658 <pow+0xac>
    364e:	16 f0       	brts	.+4      	; 0x3654 <pow+0xa8>
    3650:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    3654:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_zero>
    3658:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>

0000365c <exp>:
    365c:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_splitA>
    3660:	a8 f3       	brcs	.-22     	; 0x364c <pow+0xa0>
    3662:	96 38       	cpi	r25, 0x86	; 134
    3664:	a0 f7       	brcc	.-24     	; 0x364e <pow+0xa2>
    3666:	07 f8       	bld	r0, 7
    3668:	0f 92       	push	r0
    366a:	e8 94       	clt
    366c:	2b e3       	ldi	r18, 0x3B	; 59
    366e:	3a ea       	ldi	r19, 0xAA	; 170
    3670:	48 eb       	ldi	r20, 0xB8	; 184
    3672:	5f e7       	ldi	r21, 0x7F	; 127
    3674:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3_pse>
    3678:	0f 92       	push	r0
    367a:	0f 92       	push	r0
    367c:	0f 92       	push	r0
    367e:	4d b7       	in	r20, 0x3d	; 61
    3680:	5e b7       	in	r21, 0x3e	; 62
    3682:	0f 92       	push	r0
    3684:	0e 94 19 1c 	call	0x3832	; 0x3832 <modf>
    3688:	e2 e5       	ldi	r30, 0x52	; 82
    368a:	f2 e0       	ldi	r31, 0x02	; 2
    368c:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__fp_powser>
    3690:	4f 91       	pop	r20
    3692:	5f 91       	pop	r21
    3694:	ef 91       	pop	r30
    3696:	ff 91       	pop	r31
    3698:	e5 95       	asr	r30
    369a:	ee 1f       	adc	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	49 f0       	breq	.+18     	; 0x36b2 <exp+0x56>
    36a0:	fe 57       	subi	r31, 0x7E	; 126
    36a2:	e0 68       	ori	r30, 0x80	; 128
    36a4:	44 27       	eor	r20, r20
    36a6:	ee 0f       	add	r30, r30
    36a8:	44 1f       	adc	r20, r20
    36aa:	fa 95       	dec	r31
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <exp+0x4a>
    36ae:	41 95       	neg	r20
    36b0:	55 0b       	sbc	r21, r21
    36b2:	0e 94 93 1b 	call	0x3726	; 0x3726 <ldexp>
    36b6:	0f 90       	pop	r0
    36b8:	07 fe       	sbrs	r0, 7
    36ba:	0c 94 87 1b 	jmp	0x370e	; 0x370e <inverse>
    36be:	08 95       	ret

000036c0 <__fp_powser>:
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	1f 93       	push	r17
    36c6:	0f 93       	push	r16
    36c8:	ff 92       	push	r15
    36ca:	ef 92       	push	r14
    36cc:	df 92       	push	r13
    36ce:	7b 01       	movw	r14, r22
    36d0:	8c 01       	movw	r16, r24
    36d2:	68 94       	set
    36d4:	06 c0       	rjmp	.+12     	; 0x36e2 <__fp_powser+0x22>
    36d6:	da 2e       	mov	r13, r26
    36d8:	ef 01       	movw	r28, r30
    36da:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__mulsf3x>
    36de:	fe 01       	movw	r30, r28
    36e0:	e8 94       	clt
    36e2:	a5 91       	lpm	r26, Z+
    36e4:	25 91       	lpm	r18, Z+
    36e6:	35 91       	lpm	r19, Z+
    36e8:	45 91       	lpm	r20, Z+
    36ea:	55 91       	lpm	r21, Z+
    36ec:	a6 f3       	brts	.-24     	; 0x36d6 <__fp_powser+0x16>
    36ee:	ef 01       	movw	r28, r30
    36f0:	0e 94 b5 18 	call	0x316a	; 0x316a <__addsf3x>
    36f4:	fe 01       	movw	r30, r28
    36f6:	97 01       	movw	r18, r14
    36f8:	a8 01       	movw	r20, r16
    36fa:	da 94       	dec	r13
    36fc:	69 f7       	brne	.-38     	; 0x36d8 <__fp_powser+0x18>
    36fe:	df 90       	pop	r13
    3700:	ef 90       	pop	r14
    3702:	ff 90       	pop	r15
    3704:	0f 91       	pop	r16
    3706:	1f 91       	pop	r17
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <inverse>:
    370e:	9b 01       	movw	r18, r22
    3710:	ac 01       	movw	r20, r24
    3712:	60 e0       	ldi	r22, 0x00	; 0
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	80 e8       	ldi	r24, 0x80	; 128
    3718:	9f e3       	ldi	r25, 0x3F	; 63
    371a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__divsf3>
    371e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>
    3722:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__fp_mpack>

00003726 <ldexp>:
    3726:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_splitA>
    372a:	d8 f3       	brcs	.-10     	; 0x3722 <inverse+0x14>
    372c:	99 23       	and	r25, r25
    372e:	c9 f3       	breq	.-14     	; 0x3722 <inverse+0x14>
    3730:	94 0f       	add	r25, r20
    3732:	51 1d       	adc	r21, r1
    3734:	a3 f3       	brvs	.-24     	; 0x371e <inverse+0x10>
    3736:	91 50       	subi	r25, 0x01	; 1
    3738:	50 40       	sbci	r21, 0x00	; 0
    373a:	94 f0       	brlt	.+36     	; 0x3760 <ldexp+0x3a>
    373c:	59 f0       	breq	.+22     	; 0x3754 <ldexp+0x2e>
    373e:	88 23       	and	r24, r24
    3740:	32 f0       	brmi	.+12     	; 0x374e <ldexp+0x28>
    3742:	66 0f       	add	r22, r22
    3744:	77 1f       	adc	r23, r23
    3746:	88 1f       	adc	r24, r24
    3748:	91 50       	subi	r25, 0x01	; 1
    374a:	50 40       	sbci	r21, 0x00	; 0
    374c:	c1 f7       	brne	.-16     	; 0x373e <ldexp+0x18>
    374e:	9e 3f       	cpi	r25, 0xFE	; 254
    3750:	51 05       	cpc	r21, r1
    3752:	2c f7       	brge	.-54     	; 0x371e <inverse+0x10>
    3754:	88 0f       	add	r24, r24
    3756:	91 1d       	adc	r25, r1
    3758:	96 95       	lsr	r25
    375a:	87 95       	ror	r24
    375c:	97 f9       	bld	r25, 7
    375e:	08 95       	ret
    3760:	5f 3f       	cpi	r21, 0xFF	; 255
    3762:	ac f0       	brlt	.+42     	; 0x378e <ldexp+0x68>
    3764:	98 3e       	cpi	r25, 0xE8	; 232
    3766:	9c f0       	brlt	.+38     	; 0x378e <ldexp+0x68>
    3768:	bb 27       	eor	r27, r27
    376a:	86 95       	lsr	r24
    376c:	77 95       	ror	r23
    376e:	67 95       	ror	r22
    3770:	b7 95       	ror	r27
    3772:	08 f4       	brcc	.+2      	; 0x3776 <ldexp+0x50>
    3774:	b1 60       	ori	r27, 0x01	; 1
    3776:	93 95       	inc	r25
    3778:	c1 f7       	brne	.-16     	; 0x376a <ldexp+0x44>
    377a:	bb 0f       	add	r27, r27
    377c:	58 f7       	brcc	.-42     	; 0x3754 <ldexp+0x2e>
    377e:	11 f4       	brne	.+4      	; 0x3784 <ldexp+0x5e>
    3780:	60 ff       	sbrs	r22, 0
    3782:	e8 cf       	rjmp	.-48     	; 0x3754 <ldexp+0x2e>
    3784:	6f 5f       	subi	r22, 0xFF	; 255
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	8f 4f       	sbci	r24, 0xFF	; 255
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	e3 cf       	rjmp	.-58     	; 0x3754 <ldexp+0x2e>
    378e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__fp_szero>
    3792:	16 f0       	brts	.+4      	; 0x3798 <ldexp+0x72>
    3794:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__fp_mpack>
    3798:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_nan>
    379c:	68 94       	set
    379e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__fp_inf>

000037a2 <log>:
    37a2:	0e 94 43 1a 	call	0x3486	; 0x3486 <__fp_splitA>
    37a6:	a8 f3       	brcs	.-22     	; 0x3792 <ldexp+0x6c>
    37a8:	99 23       	and	r25, r25
    37aa:	c1 f3       	breq	.-16     	; 0x379c <ldexp+0x76>
    37ac:	ae f3       	brts	.-22     	; 0x3798 <ldexp+0x72>
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	1f 93       	push	r17
    37b4:	0f 93       	push	r16
    37b6:	ff 92       	push	r15
    37b8:	c9 2f       	mov	r28, r25
    37ba:	dd 27       	eor	r29, r29
    37bc:	88 23       	and	r24, r24
    37be:	2a f0       	brmi	.+10     	; 0x37ca <log+0x28>
    37c0:	21 97       	sbiw	r28, 0x01	; 1
    37c2:	66 0f       	add	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 1f       	adc	r24, r24
    37c8:	da f7       	brpl	.-10     	; 0x37c0 <log+0x1e>
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e8       	ldi	r20, 0x80	; 128
    37d0:	5f eb       	ldi	r21, 0xBF	; 191
    37d2:	9f e3       	ldi	r25, 0x3F	; 63
    37d4:	88 39       	cpi	r24, 0x98	; 152
    37d6:	20 f0       	brcs	.+8      	; 0x37e0 <log+0x3e>
    37d8:	80 3e       	cpi	r24, 0xE0	; 224
    37da:	38 f0       	brcs	.+14     	; 0x37ea <log+0x48>
    37dc:	21 96       	adiw	r28, 0x01	; 1
    37de:	8f 77       	andi	r24, 0x7F	; 127
    37e0:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3>
    37e4:	ea e7       	ldi	r30, 0x7A	; 122
    37e6:	f2 e0       	ldi	r31, 0x02	; 2
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <log+0x50>
    37ea:	0e 94 9e 18 	call	0x313c	; 0x313c <__addsf3>
    37ee:	e7 ea       	ldi	r30, 0xA7	; 167
    37f0:	f2 e0       	ldi	r31, 0x02	; 2
    37f2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__fp_powser>
    37f6:	8b 01       	movw	r16, r22
    37f8:	be 01       	movw	r22, r28
    37fa:	ec 01       	movw	r28, r24
    37fc:	fb 2e       	mov	r15, r27
    37fe:	6f 57       	subi	r22, 0x7F	; 127
    3800:	71 09       	sbc	r23, r1
    3802:	75 95       	asr	r23
    3804:	77 1f       	adc	r23, r23
    3806:	88 0b       	sbc	r24, r24
    3808:	99 0b       	sbc	r25, r25
    380a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__floatsisf>
    380e:	28 e1       	ldi	r18, 0x18	; 24
    3810:	32 e7       	ldi	r19, 0x72	; 114
    3812:	41 e3       	ldi	r20, 0x31	; 49
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__mulsf3x>
    381a:	af 2d       	mov	r26, r15
    381c:	98 01       	movw	r18, r16
    381e:	ae 01       	movw	r20, r28
    3820:	ff 90       	pop	r15
    3822:	0f 91       	pop	r16
    3824:	1f 91       	pop	r17
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	0e 94 b5 18 	call	0x316a	; 0x316a <__addsf3x>
    382e:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_round>

00003832 <modf>:
    3832:	fa 01       	movw	r30, r20
    3834:	dc 01       	movw	r26, r24
    3836:	aa 0f       	add	r26, r26
    3838:	bb 1f       	adc	r27, r27
    383a:	9b 01       	movw	r18, r22
    383c:	ac 01       	movw	r20, r24
    383e:	bf 57       	subi	r27, 0x7F	; 127
    3840:	28 f4       	brcc	.+10     	; 0x384c <modf+0x1a>
    3842:	22 27       	eor	r18, r18
    3844:	33 27       	eor	r19, r19
    3846:	44 27       	eor	r20, r20
    3848:	50 78       	andi	r21, 0x80	; 128
    384a:	20 c0       	rjmp	.+64     	; 0x388c <modf+0x5a>
    384c:	b7 51       	subi	r27, 0x17	; 23
    384e:	90 f4       	brcc	.+36     	; 0x3874 <modf+0x42>
    3850:	ab 2f       	mov	r26, r27
    3852:	00 24       	eor	r0, r0
    3854:	46 95       	lsr	r20
    3856:	37 95       	ror	r19
    3858:	27 95       	ror	r18
    385a:	01 1c       	adc	r0, r1
    385c:	a3 95       	inc	r26
    385e:	d2 f3       	brmi	.-12     	; 0x3854 <modf+0x22>
    3860:	00 20       	and	r0, r0
    3862:	71 f0       	breq	.+28     	; 0x3880 <modf+0x4e>
    3864:	22 0f       	add	r18, r18
    3866:	33 1f       	adc	r19, r19
    3868:	44 1f       	adc	r20, r20
    386a:	b3 95       	inc	r27
    386c:	da f3       	brmi	.-10     	; 0x3864 <modf+0x32>
    386e:	0e d0       	rcall	.+28     	; 0x388c <modf+0x5a>
    3870:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__subsf3>
    3874:	61 30       	cpi	r22, 0x01	; 1
    3876:	71 05       	cpc	r23, r1
    3878:	a0 e8       	ldi	r26, 0x80	; 128
    387a:	8a 07       	cpc	r24, r26
    387c:	b9 46       	sbci	r27, 0x69	; 105
    387e:	30 f4       	brcc	.+12     	; 0x388c <modf+0x5a>
    3880:	9b 01       	movw	r18, r22
    3882:	ac 01       	movw	r20, r24
    3884:	66 27       	eor	r22, r22
    3886:	77 27       	eor	r23, r23
    3888:	88 27       	eor	r24, r24
    388a:	90 78       	andi	r25, 0x80	; 128
    388c:	30 96       	adiw	r30, 0x00	; 0
    388e:	21 f0       	breq	.+8      	; 0x3898 <modf+0x66>
    3890:	20 83       	st	Z, r18
    3892:	31 83       	std	Z+1, r19	; 0x01
    3894:	42 83       	std	Z+2, r20	; 0x02
    3896:	53 83       	std	Z+3, r21	; 0x03
    3898:	08 95       	ret

0000389a <__fp_mpack>:
    389a:	9f 3f       	cpi	r25, 0xFF	; 255
    389c:	31 f0       	breq	.+12     	; 0x38aa <__fp_mpack_finite+0xc>

0000389e <__fp_mpack_finite>:
    389e:	91 50       	subi	r25, 0x01	; 1
    38a0:	20 f4       	brcc	.+8      	; 0x38aa <__fp_mpack_finite+0xc>
    38a2:	87 95       	ror	r24
    38a4:	77 95       	ror	r23
    38a6:	67 95       	ror	r22
    38a8:	b7 95       	ror	r27
    38aa:	88 0f       	add	r24, r24
    38ac:	91 1d       	adc	r25, r1
    38ae:	96 95       	lsr	r25
    38b0:	87 95       	ror	r24
    38b2:	97 f9       	bld	r25, 7
    38b4:	08 95       	ret

000038b6 <vfprintf>:
    38b6:	a0 e1       	ldi	r26, 0x10	; 16
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	e1 e6       	ldi	r30, 0x61	; 97
    38bc:	fc e1       	ldi	r31, 0x1C	; 28
    38be:	0c 94 01 20 	jmp	0x4002	; 0x4002 <__prologue_saves__>
    38c2:	7c 01       	movw	r14, r24
    38c4:	1b 01       	movw	r2, r22
    38c6:	6a 01       	movw	r12, r20
    38c8:	fc 01       	movw	r30, r24
    38ca:	17 82       	std	Z+7, r1	; 0x07
    38cc:	16 82       	std	Z+6, r1	; 0x06
    38ce:	83 81       	ldd	r24, Z+3	; 0x03
    38d0:	81 ff       	sbrs	r24, 1
    38d2:	44 c3       	rjmp	.+1672   	; 0x3f5c <vfprintf+0x6a6>
    38d4:	9e 01       	movw	r18, r28
    38d6:	2f 5f       	subi	r18, 0xFF	; 255
    38d8:	3f 4f       	sbci	r19, 0xFF	; 255
    38da:	39 01       	movw	r6, r18
    38dc:	f7 01       	movw	r30, r14
    38de:	93 81       	ldd	r25, Z+3	; 0x03
    38e0:	f1 01       	movw	r30, r2
    38e2:	93 fd       	sbrc	r25, 3
    38e4:	85 91       	lpm	r24, Z+
    38e6:	93 ff       	sbrs	r25, 3
    38e8:	81 91       	ld	r24, Z+
    38ea:	1f 01       	movw	r2, r30
    38ec:	88 23       	and	r24, r24
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <vfprintf+0x3c>
    38f0:	31 c3       	rjmp	.+1634   	; 0x3f54 <vfprintf+0x69e>
    38f2:	85 32       	cpi	r24, 0x25	; 37
    38f4:	39 f4       	brne	.+14     	; 0x3904 <vfprintf+0x4e>
    38f6:	93 fd       	sbrc	r25, 3
    38f8:	85 91       	lpm	r24, Z+
    38fa:	93 ff       	sbrs	r25, 3
    38fc:	81 91       	ld	r24, Z+
    38fe:	1f 01       	movw	r2, r30
    3900:	85 32       	cpi	r24, 0x25	; 37
    3902:	39 f4       	brne	.+14     	; 0x3912 <vfprintf+0x5c>
    3904:	b7 01       	movw	r22, r14
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    390c:	56 01       	movw	r10, r12
    390e:	65 01       	movw	r12, r10
    3910:	e5 cf       	rjmp	.-54     	; 0x38dc <vfprintf+0x26>
    3912:	10 e0       	ldi	r17, 0x00	; 0
    3914:	51 2c       	mov	r5, r1
    3916:	91 2c       	mov	r9, r1
    3918:	ff e1       	ldi	r31, 0x1F	; 31
    391a:	f9 15       	cp	r31, r9
    391c:	d8 f0       	brcs	.+54     	; 0x3954 <vfprintf+0x9e>
    391e:	8b 32       	cpi	r24, 0x2B	; 43
    3920:	79 f0       	breq	.+30     	; 0x3940 <vfprintf+0x8a>
    3922:	38 f4       	brcc	.+14     	; 0x3932 <vfprintf+0x7c>
    3924:	80 32       	cpi	r24, 0x20	; 32
    3926:	79 f0       	breq	.+30     	; 0x3946 <vfprintf+0x90>
    3928:	83 32       	cpi	r24, 0x23	; 35
    392a:	a1 f4       	brne	.+40     	; 0x3954 <vfprintf+0x9e>
    392c:	f9 2d       	mov	r31, r9
    392e:	f0 61       	ori	r31, 0x10	; 16
    3930:	2e c0       	rjmp	.+92     	; 0x398e <vfprintf+0xd8>
    3932:	8d 32       	cpi	r24, 0x2D	; 45
    3934:	61 f0       	breq	.+24     	; 0x394e <vfprintf+0x98>
    3936:	80 33       	cpi	r24, 0x30	; 48
    3938:	69 f4       	brne	.+26     	; 0x3954 <vfprintf+0x9e>
    393a:	29 2d       	mov	r18, r9
    393c:	21 60       	ori	r18, 0x01	; 1
    393e:	2d c0       	rjmp	.+90     	; 0x399a <vfprintf+0xe4>
    3940:	39 2d       	mov	r19, r9
    3942:	32 60       	ori	r19, 0x02	; 2
    3944:	93 2e       	mov	r9, r19
    3946:	89 2d       	mov	r24, r9
    3948:	84 60       	ori	r24, 0x04	; 4
    394a:	98 2e       	mov	r9, r24
    394c:	2a c0       	rjmp	.+84     	; 0x39a2 <vfprintf+0xec>
    394e:	e9 2d       	mov	r30, r9
    3950:	e8 60       	ori	r30, 0x08	; 8
    3952:	15 c0       	rjmp	.+42     	; 0x397e <vfprintf+0xc8>
    3954:	97 fc       	sbrc	r9, 7
    3956:	2d c0       	rjmp	.+90     	; 0x39b2 <vfprintf+0xfc>
    3958:	20 ed       	ldi	r18, 0xD0	; 208
    395a:	28 0f       	add	r18, r24
    395c:	2a 30       	cpi	r18, 0x0A	; 10
    395e:	88 f4       	brcc	.+34     	; 0x3982 <vfprintf+0xcc>
    3960:	96 fe       	sbrs	r9, 6
    3962:	06 c0       	rjmp	.+12     	; 0x3970 <vfprintf+0xba>
    3964:	3a e0       	ldi	r19, 0x0A	; 10
    3966:	13 9f       	mul	r17, r19
    3968:	20 0d       	add	r18, r0
    396a:	11 24       	eor	r1, r1
    396c:	12 2f       	mov	r17, r18
    396e:	19 c0       	rjmp	.+50     	; 0x39a2 <vfprintf+0xec>
    3970:	8a e0       	ldi	r24, 0x0A	; 10
    3972:	58 9e       	mul	r5, r24
    3974:	20 0d       	add	r18, r0
    3976:	11 24       	eor	r1, r1
    3978:	52 2e       	mov	r5, r18
    397a:	e9 2d       	mov	r30, r9
    397c:	e0 62       	ori	r30, 0x20	; 32
    397e:	9e 2e       	mov	r9, r30
    3980:	10 c0       	rjmp	.+32     	; 0x39a2 <vfprintf+0xec>
    3982:	8e 32       	cpi	r24, 0x2E	; 46
    3984:	31 f4       	brne	.+12     	; 0x3992 <vfprintf+0xdc>
    3986:	96 fc       	sbrc	r9, 6
    3988:	e5 c2       	rjmp	.+1482   	; 0x3f54 <vfprintf+0x69e>
    398a:	f9 2d       	mov	r31, r9
    398c:	f0 64       	ori	r31, 0x40	; 64
    398e:	9f 2e       	mov	r9, r31
    3990:	08 c0       	rjmp	.+16     	; 0x39a2 <vfprintf+0xec>
    3992:	8c 36       	cpi	r24, 0x6C	; 108
    3994:	21 f4       	brne	.+8      	; 0x399e <vfprintf+0xe8>
    3996:	29 2d       	mov	r18, r9
    3998:	20 68       	ori	r18, 0x80	; 128
    399a:	92 2e       	mov	r9, r18
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <vfprintf+0xec>
    399e:	88 36       	cpi	r24, 0x68	; 104
    39a0:	41 f4       	brne	.+16     	; 0x39b2 <vfprintf+0xfc>
    39a2:	f1 01       	movw	r30, r2
    39a4:	93 fd       	sbrc	r25, 3
    39a6:	85 91       	lpm	r24, Z+
    39a8:	93 ff       	sbrs	r25, 3
    39aa:	81 91       	ld	r24, Z+
    39ac:	1f 01       	movw	r2, r30
    39ae:	81 11       	cpse	r24, r1
    39b0:	b3 cf       	rjmp	.-154    	; 0x3918 <vfprintf+0x62>
    39b2:	9b eb       	ldi	r25, 0xBB	; 187
    39b4:	98 0f       	add	r25, r24
    39b6:	93 30       	cpi	r25, 0x03	; 3
    39b8:	20 f4       	brcc	.+8      	; 0x39c2 <vfprintf+0x10c>
    39ba:	99 2d       	mov	r25, r9
    39bc:	90 61       	ori	r25, 0x10	; 16
    39be:	80 5e       	subi	r24, 0xE0	; 224
    39c0:	07 c0       	rjmp	.+14     	; 0x39d0 <vfprintf+0x11a>
    39c2:	9b e9       	ldi	r25, 0x9B	; 155
    39c4:	98 0f       	add	r25, r24
    39c6:	93 30       	cpi	r25, 0x03	; 3
    39c8:	08 f0       	brcs	.+2      	; 0x39cc <vfprintf+0x116>
    39ca:	66 c1       	rjmp	.+716    	; 0x3c98 <vfprintf+0x3e2>
    39cc:	99 2d       	mov	r25, r9
    39ce:	9f 7e       	andi	r25, 0xEF	; 239
    39d0:	96 ff       	sbrs	r25, 6
    39d2:	16 e0       	ldi	r17, 0x06	; 6
    39d4:	9f 73       	andi	r25, 0x3F	; 63
    39d6:	99 2e       	mov	r9, r25
    39d8:	85 36       	cpi	r24, 0x65	; 101
    39da:	19 f4       	brne	.+6      	; 0x39e2 <vfprintf+0x12c>
    39dc:	90 64       	ori	r25, 0x40	; 64
    39de:	99 2e       	mov	r9, r25
    39e0:	08 c0       	rjmp	.+16     	; 0x39f2 <vfprintf+0x13c>
    39e2:	86 36       	cpi	r24, 0x66	; 102
    39e4:	21 f4       	brne	.+8      	; 0x39ee <vfprintf+0x138>
    39e6:	39 2f       	mov	r19, r25
    39e8:	30 68       	ori	r19, 0x80	; 128
    39ea:	93 2e       	mov	r9, r19
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <vfprintf+0x13c>
    39ee:	11 11       	cpse	r17, r1
    39f0:	11 50       	subi	r17, 0x01	; 1
    39f2:	97 fe       	sbrs	r9, 7
    39f4:	07 c0       	rjmp	.+14     	; 0x3a04 <vfprintf+0x14e>
    39f6:	1c 33       	cpi	r17, 0x3C	; 60
    39f8:	50 f4       	brcc	.+20     	; 0x3a0e <vfprintf+0x158>
    39fa:	44 24       	eor	r4, r4
    39fc:	43 94       	inc	r4
    39fe:	41 0e       	add	r4, r17
    3a00:	27 e0       	ldi	r18, 0x07	; 7
    3a02:	0b c0       	rjmp	.+22     	; 0x3a1a <vfprintf+0x164>
    3a04:	18 30       	cpi	r17, 0x08	; 8
    3a06:	38 f0       	brcs	.+14     	; 0x3a16 <vfprintf+0x160>
    3a08:	27 e0       	ldi	r18, 0x07	; 7
    3a0a:	17 e0       	ldi	r17, 0x07	; 7
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <vfprintf+0x162>
    3a0e:	27 e0       	ldi	r18, 0x07	; 7
    3a10:	9c e3       	ldi	r25, 0x3C	; 60
    3a12:	49 2e       	mov	r4, r25
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <vfprintf+0x164>
    3a16:	21 2f       	mov	r18, r17
    3a18:	41 2c       	mov	r4, r1
    3a1a:	56 01       	movw	r10, r12
    3a1c:	84 e0       	ldi	r24, 0x04	; 4
    3a1e:	a8 0e       	add	r10, r24
    3a20:	b1 1c       	adc	r11, r1
    3a22:	f6 01       	movw	r30, r12
    3a24:	60 81       	ld	r22, Z
    3a26:	71 81       	ldd	r23, Z+1	; 0x01
    3a28:	82 81       	ldd	r24, Z+2	; 0x02
    3a2a:	93 81       	ldd	r25, Z+3	; 0x03
    3a2c:	04 2d       	mov	r16, r4
    3a2e:	a3 01       	movw	r20, r6
    3a30:	0e 94 4c 20 	call	0x4098	; 0x4098 <__ftoa_engine>
    3a34:	6c 01       	movw	r12, r24
    3a36:	f9 81       	ldd	r31, Y+1	; 0x01
    3a38:	fc 87       	std	Y+12, r31	; 0x0c
    3a3a:	f0 ff       	sbrs	r31, 0
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <vfprintf+0x18c>
    3a3e:	f3 ff       	sbrs	r31, 3
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <vfprintf+0x198>
    3a42:	91 fc       	sbrc	r9, 1
    3a44:	06 c0       	rjmp	.+12     	; 0x3a52 <vfprintf+0x19c>
    3a46:	92 fe       	sbrs	r9, 2
    3a48:	06 c0       	rjmp	.+12     	; 0x3a56 <vfprintf+0x1a0>
    3a4a:	00 e2       	ldi	r16, 0x20	; 32
    3a4c:	05 c0       	rjmp	.+10     	; 0x3a58 <vfprintf+0x1a2>
    3a4e:	0d e2       	ldi	r16, 0x2D	; 45
    3a50:	03 c0       	rjmp	.+6      	; 0x3a58 <vfprintf+0x1a2>
    3a52:	0b e2       	ldi	r16, 0x2B	; 43
    3a54:	01 c0       	rjmp	.+2      	; 0x3a58 <vfprintf+0x1a2>
    3a56:	00 e0       	ldi	r16, 0x00	; 0
    3a58:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a5a:	8c 70       	andi	r24, 0x0C	; 12
    3a5c:	19 f0       	breq	.+6      	; 0x3a64 <vfprintf+0x1ae>
    3a5e:	01 11       	cpse	r16, r1
    3a60:	5a c2       	rjmp	.+1204   	; 0x3f16 <vfprintf+0x660>
    3a62:	9b c2       	rjmp	.+1334   	; 0x3f9a <vfprintf+0x6e4>
    3a64:	97 fe       	sbrs	r9, 7
    3a66:	10 c0       	rjmp	.+32     	; 0x3a88 <vfprintf+0x1d2>
    3a68:	4c 0c       	add	r4, r12
    3a6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a6c:	f4 ff       	sbrs	r31, 4
    3a6e:	04 c0       	rjmp	.+8      	; 0x3a78 <vfprintf+0x1c2>
    3a70:	8a 81       	ldd	r24, Y+2	; 0x02
    3a72:	81 33       	cpi	r24, 0x31	; 49
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <vfprintf+0x1c2>
    3a76:	4a 94       	dec	r4
    3a78:	14 14       	cp	r1, r4
    3a7a:	74 f5       	brge	.+92     	; 0x3ad8 <vfprintf+0x222>
    3a7c:	28 e0       	ldi	r18, 0x08	; 8
    3a7e:	24 15       	cp	r18, r4
    3a80:	78 f5       	brcc	.+94     	; 0x3ae0 <vfprintf+0x22a>
    3a82:	88 e0       	ldi	r24, 0x08	; 8
    3a84:	48 2e       	mov	r4, r24
    3a86:	2c c0       	rjmp	.+88     	; 0x3ae0 <vfprintf+0x22a>
    3a88:	96 fc       	sbrc	r9, 6
    3a8a:	2a c0       	rjmp	.+84     	; 0x3ae0 <vfprintf+0x22a>
    3a8c:	81 2f       	mov	r24, r17
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	8c 15       	cp	r24, r12
    3a92:	9d 05       	cpc	r25, r13
    3a94:	9c f0       	brlt	.+38     	; 0x3abc <vfprintf+0x206>
    3a96:	3c ef       	ldi	r19, 0xFC	; 252
    3a98:	c3 16       	cp	r12, r19
    3a9a:	3f ef       	ldi	r19, 0xFF	; 255
    3a9c:	d3 06       	cpc	r13, r19
    3a9e:	74 f0       	brlt	.+28     	; 0x3abc <vfprintf+0x206>
    3aa0:	89 2d       	mov	r24, r9
    3aa2:	80 68       	ori	r24, 0x80	; 128
    3aa4:	98 2e       	mov	r9, r24
    3aa6:	0a c0       	rjmp	.+20     	; 0x3abc <vfprintf+0x206>
    3aa8:	e2 e0       	ldi	r30, 0x02	; 2
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	ec 0f       	add	r30, r28
    3aae:	fd 1f       	adc	r31, r29
    3ab0:	e1 0f       	add	r30, r17
    3ab2:	f1 1d       	adc	r31, r1
    3ab4:	80 81       	ld	r24, Z
    3ab6:	80 33       	cpi	r24, 0x30	; 48
    3ab8:	19 f4       	brne	.+6      	; 0x3ac0 <vfprintf+0x20a>
    3aba:	11 50       	subi	r17, 0x01	; 1
    3abc:	11 11       	cpse	r17, r1
    3abe:	f4 cf       	rjmp	.-24     	; 0x3aa8 <vfprintf+0x1f2>
    3ac0:	97 fe       	sbrs	r9, 7
    3ac2:	0e c0       	rjmp	.+28     	; 0x3ae0 <vfprintf+0x22a>
    3ac4:	44 24       	eor	r4, r4
    3ac6:	43 94       	inc	r4
    3ac8:	41 0e       	add	r4, r17
    3aca:	81 2f       	mov	r24, r17
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	c8 16       	cp	r12, r24
    3ad0:	d9 06       	cpc	r13, r25
    3ad2:	2c f4       	brge	.+10     	; 0x3ade <vfprintf+0x228>
    3ad4:	1c 19       	sub	r17, r12
    3ad6:	04 c0       	rjmp	.+8      	; 0x3ae0 <vfprintf+0x22a>
    3ad8:	44 24       	eor	r4, r4
    3ada:	43 94       	inc	r4
    3adc:	01 c0       	rjmp	.+2      	; 0x3ae0 <vfprintf+0x22a>
    3ade:	10 e0       	ldi	r17, 0x00	; 0
    3ae0:	97 fe       	sbrs	r9, 7
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <vfprintf+0x23a>
    3ae4:	1c 14       	cp	r1, r12
    3ae6:	1d 04       	cpc	r1, r13
    3ae8:	34 f4       	brge	.+12     	; 0x3af6 <vfprintf+0x240>
    3aea:	c6 01       	movw	r24, r12
    3aec:	01 96       	adiw	r24, 0x01	; 1
    3aee:	05 c0       	rjmp	.+10     	; 0x3afa <vfprintf+0x244>
    3af0:	85 e0       	ldi	r24, 0x05	; 5
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <vfprintf+0x244>
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	01 11       	cpse	r16, r1
    3afc:	01 96       	adiw	r24, 0x01	; 1
    3afe:	11 23       	and	r17, r17
    3b00:	31 f0       	breq	.+12     	; 0x3b0e <vfprintf+0x258>
    3b02:	21 2f       	mov	r18, r17
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	2f 5f       	subi	r18, 0xFF	; 255
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	82 0f       	add	r24, r18
    3b0c:	93 1f       	adc	r25, r19
    3b0e:	25 2d       	mov	r18, r5
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	82 17       	cp	r24, r18
    3b14:	93 07       	cpc	r25, r19
    3b16:	14 f4       	brge	.+4      	; 0x3b1c <vfprintf+0x266>
    3b18:	58 1a       	sub	r5, r24
    3b1a:	01 c0       	rjmp	.+2      	; 0x3b1e <vfprintf+0x268>
    3b1c:	51 2c       	mov	r5, r1
    3b1e:	89 2d       	mov	r24, r9
    3b20:	89 70       	andi	r24, 0x09	; 9
    3b22:	49 f4       	brne	.+18     	; 0x3b36 <vfprintf+0x280>
    3b24:	55 20       	and	r5, r5
    3b26:	39 f0       	breq	.+14     	; 0x3b36 <vfprintf+0x280>
    3b28:	b7 01       	movw	r22, r14
    3b2a:	80 e2       	ldi	r24, 0x20	; 32
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b32:	5a 94       	dec	r5
    3b34:	f7 cf       	rjmp	.-18     	; 0x3b24 <vfprintf+0x26e>
    3b36:	00 23       	and	r16, r16
    3b38:	29 f0       	breq	.+10     	; 0x3b44 <vfprintf+0x28e>
    3b3a:	b7 01       	movw	r22, r14
    3b3c:	80 2f       	mov	r24, r16
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b44:	93 fc       	sbrc	r9, 3
    3b46:	09 c0       	rjmp	.+18     	; 0x3b5a <vfprintf+0x2a4>
    3b48:	55 20       	and	r5, r5
    3b4a:	39 f0       	breq	.+14     	; 0x3b5a <vfprintf+0x2a4>
    3b4c:	b7 01       	movw	r22, r14
    3b4e:	80 e3       	ldi	r24, 0x30	; 48
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b56:	5a 94       	dec	r5
    3b58:	f7 cf       	rjmp	.-18     	; 0x3b48 <vfprintf+0x292>
    3b5a:	97 fe       	sbrs	r9, 7
    3b5c:	4c c0       	rjmp	.+152    	; 0x3bf6 <vfprintf+0x340>
    3b5e:	46 01       	movw	r8, r12
    3b60:	d7 fe       	sbrs	r13, 7
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <vfprintf+0x2b2>
    3b64:	81 2c       	mov	r8, r1
    3b66:	91 2c       	mov	r9, r1
    3b68:	c6 01       	movw	r24, r12
    3b6a:	88 19       	sub	r24, r8
    3b6c:	99 09       	sbc	r25, r9
    3b6e:	f3 01       	movw	r30, r6
    3b70:	e8 0f       	add	r30, r24
    3b72:	f9 1f       	adc	r31, r25
    3b74:	fe 87       	std	Y+14, r31	; 0x0e
    3b76:	ed 87       	std	Y+13, r30	; 0x0d
    3b78:	96 01       	movw	r18, r12
    3b7a:	24 19       	sub	r18, r4
    3b7c:	31 09       	sbc	r19, r1
    3b7e:	38 8b       	std	Y+16, r19	; 0x10
    3b80:	2f 87       	std	Y+15, r18	; 0x0f
    3b82:	01 2f       	mov	r16, r17
    3b84:	10 e0       	ldi	r17, 0x00	; 0
    3b86:	11 95       	neg	r17
    3b88:	01 95       	neg	r16
    3b8a:	11 09       	sbc	r17, r1
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	83 16       	cp	r8, r19
    3b90:	93 06       	cpc	r9, r19
    3b92:	29 f4       	brne	.+10     	; 0x3b9e <vfprintf+0x2e8>
    3b94:	b7 01       	movw	r22, r14
    3b96:	8e e2       	ldi	r24, 0x2E	; 46
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b9e:	c8 14       	cp	r12, r8
    3ba0:	d9 04       	cpc	r13, r9
    3ba2:	4c f0       	brlt	.+18     	; 0x3bb6 <vfprintf+0x300>
    3ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba6:	98 89       	ldd	r25, Y+16	; 0x10
    3ba8:	88 15       	cp	r24, r8
    3baa:	99 05       	cpc	r25, r9
    3bac:	24 f4       	brge	.+8      	; 0x3bb6 <vfprintf+0x300>
    3bae:	ed 85       	ldd	r30, Y+13	; 0x0d
    3bb0:	fe 85       	ldd	r31, Y+14	; 0x0e
    3bb2:	81 81       	ldd	r24, Z+1	; 0x01
    3bb4:	01 c0       	rjmp	.+2      	; 0x3bb8 <vfprintf+0x302>
    3bb6:	80 e3       	ldi	r24, 0x30	; 48
    3bb8:	f1 e0       	ldi	r31, 0x01	; 1
    3bba:	8f 1a       	sub	r8, r31
    3bbc:	91 08       	sbc	r9, r1
    3bbe:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bc0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bc2:	2f 5f       	subi	r18, 0xFF	; 255
    3bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc6:	3e 87       	std	Y+14, r19	; 0x0e
    3bc8:	2d 87       	std	Y+13, r18	; 0x0d
    3bca:	80 16       	cp	r8, r16
    3bcc:	91 06       	cpc	r9, r17
    3bce:	2c f0       	brlt	.+10     	; 0x3bda <vfprintf+0x324>
    3bd0:	b7 01       	movw	r22, r14
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3bd8:	d9 cf       	rjmp	.-78     	; 0x3b8c <vfprintf+0x2d6>
    3bda:	c8 14       	cp	r12, r8
    3bdc:	d9 04       	cpc	r13, r9
    3bde:	41 f4       	brne	.+16     	; 0x3bf0 <vfprintf+0x33a>
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	96 33       	cpi	r25, 0x36	; 54
    3be4:	20 f4       	brcc	.+8      	; 0x3bee <vfprintf+0x338>
    3be6:	95 33       	cpi	r25, 0x35	; 53
    3be8:	19 f4       	brne	.+6      	; 0x3bf0 <vfprintf+0x33a>
    3bea:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bec:	34 ff       	sbrs	r19, 4
    3bee:	81 e3       	ldi	r24, 0x31	; 49
    3bf0:	b7 01       	movw	r22, r14
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	4e c0       	rjmp	.+156    	; 0x3c92 <vfprintf+0x3dc>
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	81 33       	cpi	r24, 0x31	; 49
    3bfa:	19 f0       	breq	.+6      	; 0x3c02 <vfprintf+0x34c>
    3bfc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bfe:	9f 7e       	andi	r25, 0xEF	; 239
    3c00:	9c 87       	std	Y+12, r25	; 0x0c
    3c02:	b7 01       	movw	r22, r14
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c0a:	11 11       	cpse	r17, r1
    3c0c:	05 c0       	rjmp	.+10     	; 0x3c18 <vfprintf+0x362>
    3c0e:	94 fc       	sbrc	r9, 4
    3c10:	18 c0       	rjmp	.+48     	; 0x3c42 <vfprintf+0x38c>
    3c12:	85 e6       	ldi	r24, 0x65	; 101
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	17 c0       	rjmp	.+46     	; 0x3c46 <vfprintf+0x390>
    3c18:	b7 01       	movw	r22, r14
    3c1a:	8e e2       	ldi	r24, 0x2E	; 46
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c22:	1e 5f       	subi	r17, 0xFE	; 254
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	01 e0       	ldi	r16, 0x01	; 1
    3c28:	08 0f       	add	r16, r24
    3c2a:	f3 01       	movw	r30, r6
    3c2c:	e8 0f       	add	r30, r24
    3c2e:	f1 1d       	adc	r31, r1
    3c30:	80 81       	ld	r24, Z
    3c32:	b7 01       	movw	r22, r14
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c3a:	80 2f       	mov	r24, r16
    3c3c:	01 13       	cpse	r16, r17
    3c3e:	f3 cf       	rjmp	.-26     	; 0x3c26 <vfprintf+0x370>
    3c40:	e6 cf       	rjmp	.-52     	; 0x3c0e <vfprintf+0x358>
    3c42:	85 e4       	ldi	r24, 0x45	; 69
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	b7 01       	movw	r22, r14
    3c48:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c4c:	d7 fc       	sbrc	r13, 7
    3c4e:	06 c0       	rjmp	.+12     	; 0x3c5c <vfprintf+0x3a6>
    3c50:	c1 14       	cp	r12, r1
    3c52:	d1 04       	cpc	r13, r1
    3c54:	41 f4       	brne	.+16     	; 0x3c66 <vfprintf+0x3b0>
    3c56:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c58:	e4 ff       	sbrs	r30, 4
    3c5a:	05 c0       	rjmp	.+10     	; 0x3c66 <vfprintf+0x3b0>
    3c5c:	d1 94       	neg	r13
    3c5e:	c1 94       	neg	r12
    3c60:	d1 08       	sbc	r13, r1
    3c62:	8d e2       	ldi	r24, 0x2D	; 45
    3c64:	01 c0       	rjmp	.+2      	; 0x3c68 <vfprintf+0x3b2>
    3c66:	8b e2       	ldi	r24, 0x2B	; 43
    3c68:	b7 01       	movw	r22, r14
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c70:	80 e3       	ldi	r24, 0x30	; 48
    3c72:	2a e0       	ldi	r18, 0x0A	; 10
    3c74:	c2 16       	cp	r12, r18
    3c76:	d1 04       	cpc	r13, r1
    3c78:	2c f0       	brlt	.+10     	; 0x3c84 <vfprintf+0x3ce>
    3c7a:	8f 5f       	subi	r24, 0xFF	; 255
    3c7c:	fa e0       	ldi	r31, 0x0A	; 10
    3c7e:	cf 1a       	sub	r12, r31
    3c80:	d1 08       	sbc	r13, r1
    3c82:	f7 cf       	rjmp	.-18     	; 0x3c72 <vfprintf+0x3bc>
    3c84:	b7 01       	movw	r22, r14
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c8c:	b7 01       	movw	r22, r14
    3c8e:	c6 01       	movw	r24, r12
    3c90:	c0 96       	adiw	r24, 0x30	; 48
    3c92:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3c96:	54 c1       	rjmp	.+680    	; 0x3f40 <vfprintf+0x68a>
    3c98:	83 36       	cpi	r24, 0x63	; 99
    3c9a:	31 f0       	breq	.+12     	; 0x3ca8 <vfprintf+0x3f2>
    3c9c:	83 37       	cpi	r24, 0x73	; 115
    3c9e:	79 f0       	breq	.+30     	; 0x3cbe <vfprintf+0x408>
    3ca0:	83 35       	cpi	r24, 0x53	; 83
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <vfprintf+0x3f0>
    3ca4:	56 c0       	rjmp	.+172    	; 0x3d52 <vfprintf+0x49c>
    3ca6:	20 c0       	rjmp	.+64     	; 0x3ce8 <vfprintf+0x432>
    3ca8:	56 01       	movw	r10, r12
    3caa:	32 e0       	ldi	r19, 0x02	; 2
    3cac:	a3 0e       	add	r10, r19
    3cae:	b1 1c       	adc	r11, r1
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	80 81       	ld	r24, Z
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	01 e0       	ldi	r16, 0x01	; 1
    3cb8:	10 e0       	ldi	r17, 0x00	; 0
    3cba:	63 01       	movw	r12, r6
    3cbc:	12 c0       	rjmp	.+36     	; 0x3ce2 <vfprintf+0x42c>
    3cbe:	56 01       	movw	r10, r12
    3cc0:	f2 e0       	ldi	r31, 0x02	; 2
    3cc2:	af 0e       	add	r10, r31
    3cc4:	b1 1c       	adc	r11, r1
    3cc6:	f6 01       	movw	r30, r12
    3cc8:	c0 80       	ld	r12, Z
    3cca:	d1 80       	ldd	r13, Z+1	; 0x01
    3ccc:	96 fe       	sbrs	r9, 6
    3cce:	03 c0       	rjmp	.+6      	; 0x3cd6 <vfprintf+0x420>
    3cd0:	61 2f       	mov	r22, r17
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	02 c0       	rjmp	.+4      	; 0x3cda <vfprintf+0x424>
    3cd6:	6f ef       	ldi	r22, 0xFF	; 255
    3cd8:	7f ef       	ldi	r23, 0xFF	; 255
    3cda:	c6 01       	movw	r24, r12
    3cdc:	0e 94 3c 21 	call	0x4278	; 0x4278 <strnlen>
    3ce0:	8c 01       	movw	r16, r24
    3ce2:	f9 2d       	mov	r31, r9
    3ce4:	ff 77       	andi	r31, 0x7F	; 127
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <vfprintf+0x45a>
    3ce8:	56 01       	movw	r10, r12
    3cea:	22 e0       	ldi	r18, 0x02	; 2
    3cec:	a2 0e       	add	r10, r18
    3cee:	b1 1c       	adc	r11, r1
    3cf0:	f6 01       	movw	r30, r12
    3cf2:	c0 80       	ld	r12, Z
    3cf4:	d1 80       	ldd	r13, Z+1	; 0x01
    3cf6:	96 fe       	sbrs	r9, 6
    3cf8:	03 c0       	rjmp	.+6      	; 0x3d00 <vfprintf+0x44a>
    3cfa:	61 2f       	mov	r22, r17
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	02 c0       	rjmp	.+4      	; 0x3d04 <vfprintf+0x44e>
    3d00:	6f ef       	ldi	r22, 0xFF	; 255
    3d02:	7f ef       	ldi	r23, 0xFF	; 255
    3d04:	c6 01       	movw	r24, r12
    3d06:	0e 94 24 21 	call	0x4248	; 0x4248 <strnlen_P>
    3d0a:	8c 01       	movw	r16, r24
    3d0c:	f9 2d       	mov	r31, r9
    3d0e:	f0 68       	ori	r31, 0x80	; 128
    3d10:	9f 2e       	mov	r9, r31
    3d12:	f3 fd       	sbrc	r31, 3
    3d14:	1a c0       	rjmp	.+52     	; 0x3d4a <vfprintf+0x494>
    3d16:	85 2d       	mov	r24, r5
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	08 17       	cp	r16, r24
    3d1c:	19 07       	cpc	r17, r25
    3d1e:	a8 f4       	brcc	.+42     	; 0x3d4a <vfprintf+0x494>
    3d20:	b7 01       	movw	r22, r14
    3d22:	80 e2       	ldi	r24, 0x20	; 32
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d2a:	5a 94       	dec	r5
    3d2c:	f4 cf       	rjmp	.-24     	; 0x3d16 <vfprintf+0x460>
    3d2e:	f6 01       	movw	r30, r12
    3d30:	97 fc       	sbrc	r9, 7
    3d32:	85 91       	lpm	r24, Z+
    3d34:	97 fe       	sbrs	r9, 7
    3d36:	81 91       	ld	r24, Z+
    3d38:	6f 01       	movw	r12, r30
    3d3a:	b7 01       	movw	r22, r14
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d42:	51 10       	cpse	r5, r1
    3d44:	5a 94       	dec	r5
    3d46:	01 50       	subi	r16, 0x01	; 1
    3d48:	11 09       	sbc	r17, r1
    3d4a:	01 15       	cp	r16, r1
    3d4c:	11 05       	cpc	r17, r1
    3d4e:	79 f7       	brne	.-34     	; 0x3d2e <vfprintf+0x478>
    3d50:	f7 c0       	rjmp	.+494    	; 0x3f40 <vfprintf+0x68a>
    3d52:	84 36       	cpi	r24, 0x64	; 100
    3d54:	11 f0       	breq	.+4      	; 0x3d5a <vfprintf+0x4a4>
    3d56:	89 36       	cpi	r24, 0x69	; 105
    3d58:	61 f5       	brne	.+88     	; 0x3db2 <vfprintf+0x4fc>
    3d5a:	56 01       	movw	r10, r12
    3d5c:	97 fe       	sbrs	r9, 7
    3d5e:	09 c0       	rjmp	.+18     	; 0x3d72 <vfprintf+0x4bc>
    3d60:	24 e0       	ldi	r18, 0x04	; 4
    3d62:	a2 0e       	add	r10, r18
    3d64:	b1 1c       	adc	r11, r1
    3d66:	f6 01       	movw	r30, r12
    3d68:	60 81       	ld	r22, Z
    3d6a:	71 81       	ldd	r23, Z+1	; 0x01
    3d6c:	82 81       	ldd	r24, Z+2	; 0x02
    3d6e:	93 81       	ldd	r25, Z+3	; 0x03
    3d70:	0a c0       	rjmp	.+20     	; 0x3d86 <vfprintf+0x4d0>
    3d72:	f2 e0       	ldi	r31, 0x02	; 2
    3d74:	af 0e       	add	r10, r31
    3d76:	b1 1c       	adc	r11, r1
    3d78:	f6 01       	movw	r30, r12
    3d7a:	60 81       	ld	r22, Z
    3d7c:	71 81       	ldd	r23, Z+1	; 0x01
    3d7e:	07 2e       	mov	r0, r23
    3d80:	00 0c       	add	r0, r0
    3d82:	88 0b       	sbc	r24, r24
    3d84:	99 0b       	sbc	r25, r25
    3d86:	f9 2d       	mov	r31, r9
    3d88:	ff 76       	andi	r31, 0x6F	; 111
    3d8a:	9f 2e       	mov	r9, r31
    3d8c:	97 ff       	sbrs	r25, 7
    3d8e:	09 c0       	rjmp	.+18     	; 0x3da2 <vfprintf+0x4ec>
    3d90:	90 95       	com	r25
    3d92:	80 95       	com	r24
    3d94:	70 95       	com	r23
    3d96:	61 95       	neg	r22
    3d98:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9e:	f0 68       	ori	r31, 0x80	; 128
    3da0:	9f 2e       	mov	r9, r31
    3da2:	2a e0       	ldi	r18, 0x0A	; 10
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	a3 01       	movw	r20, r6
    3da8:	0e 94 9f 21 	call	0x433e	; 0x433e <__ultoa_invert>
    3dac:	c8 2e       	mov	r12, r24
    3dae:	c6 18       	sub	r12, r6
    3db0:	3f c0       	rjmp	.+126    	; 0x3e30 <vfprintf+0x57a>
    3db2:	09 2d       	mov	r16, r9
    3db4:	85 37       	cpi	r24, 0x75	; 117
    3db6:	21 f4       	brne	.+8      	; 0x3dc0 <vfprintf+0x50a>
    3db8:	0f 7e       	andi	r16, 0xEF	; 239
    3dba:	2a e0       	ldi	r18, 0x0A	; 10
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	1d c0       	rjmp	.+58     	; 0x3dfa <vfprintf+0x544>
    3dc0:	09 7f       	andi	r16, 0xF9	; 249
    3dc2:	8f 36       	cpi	r24, 0x6F	; 111
    3dc4:	91 f0       	breq	.+36     	; 0x3dea <vfprintf+0x534>
    3dc6:	18 f4       	brcc	.+6      	; 0x3dce <vfprintf+0x518>
    3dc8:	88 35       	cpi	r24, 0x58	; 88
    3dca:	59 f0       	breq	.+22     	; 0x3de2 <vfprintf+0x52c>
    3dcc:	c3 c0       	rjmp	.+390    	; 0x3f54 <vfprintf+0x69e>
    3dce:	80 37       	cpi	r24, 0x70	; 112
    3dd0:	19 f0       	breq	.+6      	; 0x3dd8 <vfprintf+0x522>
    3dd2:	88 37       	cpi	r24, 0x78	; 120
    3dd4:	11 f0       	breq	.+4      	; 0x3dda <vfprintf+0x524>
    3dd6:	be c0       	rjmp	.+380    	; 0x3f54 <vfprintf+0x69e>
    3dd8:	00 61       	ori	r16, 0x10	; 16
    3dda:	04 ff       	sbrs	r16, 4
    3ddc:	09 c0       	rjmp	.+18     	; 0x3df0 <vfprintf+0x53a>
    3dde:	04 60       	ori	r16, 0x04	; 4
    3de0:	07 c0       	rjmp	.+14     	; 0x3df0 <vfprintf+0x53a>
    3de2:	94 fe       	sbrs	r9, 4
    3de4:	08 c0       	rjmp	.+16     	; 0x3df6 <vfprintf+0x540>
    3de6:	06 60       	ori	r16, 0x06	; 6
    3de8:	06 c0       	rjmp	.+12     	; 0x3df6 <vfprintf+0x540>
    3dea:	28 e0       	ldi	r18, 0x08	; 8
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	05 c0       	rjmp	.+10     	; 0x3dfa <vfprintf+0x544>
    3df0:	20 e1       	ldi	r18, 0x10	; 16
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <vfprintf+0x544>
    3df6:	20 e1       	ldi	r18, 0x10	; 16
    3df8:	32 e0       	ldi	r19, 0x02	; 2
    3dfa:	56 01       	movw	r10, r12
    3dfc:	07 ff       	sbrs	r16, 7
    3dfe:	09 c0       	rjmp	.+18     	; 0x3e12 <vfprintf+0x55c>
    3e00:	84 e0       	ldi	r24, 0x04	; 4
    3e02:	a8 0e       	add	r10, r24
    3e04:	b1 1c       	adc	r11, r1
    3e06:	f6 01       	movw	r30, r12
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	08 c0       	rjmp	.+16     	; 0x3e22 <vfprintf+0x56c>
    3e12:	f2 e0       	ldi	r31, 0x02	; 2
    3e14:	af 0e       	add	r10, r31
    3e16:	b1 1c       	adc	r11, r1
    3e18:	f6 01       	movw	r30, r12
    3e1a:	60 81       	ld	r22, Z
    3e1c:	71 81       	ldd	r23, Z+1	; 0x01
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a3 01       	movw	r20, r6
    3e24:	0e 94 9f 21 	call	0x433e	; 0x433e <__ultoa_invert>
    3e28:	c8 2e       	mov	r12, r24
    3e2a:	c6 18       	sub	r12, r6
    3e2c:	0f 77       	andi	r16, 0x7F	; 127
    3e2e:	90 2e       	mov	r9, r16
    3e30:	96 fe       	sbrs	r9, 6
    3e32:	0b c0       	rjmp	.+22     	; 0x3e4a <vfprintf+0x594>
    3e34:	09 2d       	mov	r16, r9
    3e36:	0e 7f       	andi	r16, 0xFE	; 254
    3e38:	c1 16       	cp	r12, r17
    3e3a:	50 f4       	brcc	.+20     	; 0x3e50 <vfprintf+0x59a>
    3e3c:	94 fe       	sbrs	r9, 4
    3e3e:	0a c0       	rjmp	.+20     	; 0x3e54 <vfprintf+0x59e>
    3e40:	92 fc       	sbrc	r9, 2
    3e42:	08 c0       	rjmp	.+16     	; 0x3e54 <vfprintf+0x59e>
    3e44:	09 2d       	mov	r16, r9
    3e46:	0e 7e       	andi	r16, 0xEE	; 238
    3e48:	05 c0       	rjmp	.+10     	; 0x3e54 <vfprintf+0x59e>
    3e4a:	dc 2c       	mov	r13, r12
    3e4c:	09 2d       	mov	r16, r9
    3e4e:	03 c0       	rjmp	.+6      	; 0x3e56 <vfprintf+0x5a0>
    3e50:	dc 2c       	mov	r13, r12
    3e52:	01 c0       	rjmp	.+2      	; 0x3e56 <vfprintf+0x5a0>
    3e54:	d1 2e       	mov	r13, r17
    3e56:	04 ff       	sbrs	r16, 4
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <vfprintf+0x5be>
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ec 0d       	add	r30, r12
    3e5e:	f1 1d       	adc	r31, r1
    3e60:	80 81       	ld	r24, Z
    3e62:	80 33       	cpi	r24, 0x30	; 48
    3e64:	11 f4       	brne	.+4      	; 0x3e6a <vfprintf+0x5b4>
    3e66:	09 7e       	andi	r16, 0xE9	; 233
    3e68:	09 c0       	rjmp	.+18     	; 0x3e7c <vfprintf+0x5c6>
    3e6a:	02 ff       	sbrs	r16, 2
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <vfprintf+0x5c4>
    3e6e:	d3 94       	inc	r13
    3e70:	d3 94       	inc	r13
    3e72:	04 c0       	rjmp	.+8      	; 0x3e7c <vfprintf+0x5c6>
    3e74:	80 2f       	mov	r24, r16
    3e76:	86 78       	andi	r24, 0x86	; 134
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <vfprintf+0x5c6>
    3e7a:	d3 94       	inc	r13
    3e7c:	03 fd       	sbrc	r16, 3
    3e7e:	11 c0       	rjmp	.+34     	; 0x3ea2 <vfprintf+0x5ec>
    3e80:	00 ff       	sbrs	r16, 0
    3e82:	06 c0       	rjmp	.+12     	; 0x3e90 <vfprintf+0x5da>
    3e84:	1c 2d       	mov	r17, r12
    3e86:	d5 14       	cp	r13, r5
    3e88:	80 f4       	brcc	.+32     	; 0x3eaa <vfprintf+0x5f4>
    3e8a:	15 0d       	add	r17, r5
    3e8c:	1d 19       	sub	r17, r13
    3e8e:	0d c0       	rjmp	.+26     	; 0x3eaa <vfprintf+0x5f4>
    3e90:	d5 14       	cp	r13, r5
    3e92:	58 f4       	brcc	.+22     	; 0x3eaa <vfprintf+0x5f4>
    3e94:	b7 01       	movw	r22, r14
    3e96:	80 e2       	ldi	r24, 0x20	; 32
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3e9e:	d3 94       	inc	r13
    3ea0:	f7 cf       	rjmp	.-18     	; 0x3e90 <vfprintf+0x5da>
    3ea2:	d5 14       	cp	r13, r5
    3ea4:	10 f4       	brcc	.+4      	; 0x3eaa <vfprintf+0x5f4>
    3ea6:	5d 18       	sub	r5, r13
    3ea8:	01 c0       	rjmp	.+2      	; 0x3eac <vfprintf+0x5f6>
    3eaa:	51 2c       	mov	r5, r1
    3eac:	04 ff       	sbrs	r16, 4
    3eae:	10 c0       	rjmp	.+32     	; 0x3ed0 <vfprintf+0x61a>
    3eb0:	b7 01       	movw	r22, r14
    3eb2:	80 e3       	ldi	r24, 0x30	; 48
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3eba:	02 ff       	sbrs	r16, 2
    3ebc:	17 c0       	rjmp	.+46     	; 0x3eec <vfprintf+0x636>
    3ebe:	01 fd       	sbrc	r16, 1
    3ec0:	03 c0       	rjmp	.+6      	; 0x3ec8 <vfprintf+0x612>
    3ec2:	88 e7       	ldi	r24, 0x78	; 120
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <vfprintf+0x616>
    3ec8:	88 e5       	ldi	r24, 0x58	; 88
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	b7 01       	movw	r22, r14
    3ece:	0c c0       	rjmp	.+24     	; 0x3ee8 <vfprintf+0x632>
    3ed0:	80 2f       	mov	r24, r16
    3ed2:	86 78       	andi	r24, 0x86	; 134
    3ed4:	59 f0       	breq	.+22     	; 0x3eec <vfprintf+0x636>
    3ed6:	01 ff       	sbrs	r16, 1
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <vfprintf+0x628>
    3eda:	8b e2       	ldi	r24, 0x2B	; 43
    3edc:	01 c0       	rjmp	.+2      	; 0x3ee0 <vfprintf+0x62a>
    3ede:	80 e2       	ldi	r24, 0x20	; 32
    3ee0:	07 fd       	sbrc	r16, 7
    3ee2:	8d e2       	ldi	r24, 0x2D	; 45
    3ee4:	b7 01       	movw	r22, r14
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3eec:	c1 16       	cp	r12, r17
    3eee:	38 f4       	brcc	.+14     	; 0x3efe <vfprintf+0x648>
    3ef0:	b7 01       	movw	r22, r14
    3ef2:	80 e3       	ldi	r24, 0x30	; 48
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3efa:	11 50       	subi	r17, 0x01	; 1
    3efc:	f7 cf       	rjmp	.-18     	; 0x3eec <vfprintf+0x636>
    3efe:	ca 94       	dec	r12
    3f00:	f3 01       	movw	r30, r6
    3f02:	ec 0d       	add	r30, r12
    3f04:	f1 1d       	adc	r31, r1
    3f06:	80 81       	ld	r24, Z
    3f08:	b7 01       	movw	r22, r14
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f10:	c1 10       	cpse	r12, r1
    3f12:	f5 cf       	rjmp	.-22     	; 0x3efe <vfprintf+0x648>
    3f14:	15 c0       	rjmp	.+42     	; 0x3f40 <vfprintf+0x68a>
    3f16:	f4 e0       	ldi	r31, 0x04	; 4
    3f18:	f5 15       	cp	r31, r5
    3f1a:	60 f5       	brcc	.+88     	; 0x3f74 <vfprintf+0x6be>
    3f1c:	84 e0       	ldi	r24, 0x04	; 4
    3f1e:	58 1a       	sub	r5, r24
    3f20:	93 fe       	sbrs	r9, 3
    3f22:	1f c0       	rjmp	.+62     	; 0x3f62 <vfprintf+0x6ac>
    3f24:	01 11       	cpse	r16, r1
    3f26:	27 c0       	rjmp	.+78     	; 0x3f76 <vfprintf+0x6c0>
    3f28:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f2a:	23 ff       	sbrs	r18, 3
    3f2c:	2a c0       	rjmp	.+84     	; 0x3f82 <vfprintf+0x6cc>
    3f2e:	04 ed       	ldi	r16, 0xD4	; 212
    3f30:	12 e0       	ldi	r17, 0x02	; 2
    3f32:	39 2d       	mov	r19, r9
    3f34:	30 71       	andi	r19, 0x10	; 16
    3f36:	93 2e       	mov	r9, r19
    3f38:	f8 01       	movw	r30, r16
    3f3a:	84 91       	lpm	r24, Z
    3f3c:	81 11       	cpse	r24, r1
    3f3e:	24 c0       	rjmp	.+72     	; 0x3f88 <vfprintf+0x6d2>
    3f40:	55 20       	and	r5, r5
    3f42:	09 f4       	brne	.+2      	; 0x3f46 <vfprintf+0x690>
    3f44:	e4 cc       	rjmp	.-1592   	; 0x390e <vfprintf+0x58>
    3f46:	b7 01       	movw	r22, r14
    3f48:	80 e2       	ldi	r24, 0x20	; 32
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f50:	5a 94       	dec	r5
    3f52:	f6 cf       	rjmp	.-20     	; 0x3f40 <vfprintf+0x68a>
    3f54:	f7 01       	movw	r30, r14
    3f56:	86 81       	ldd	r24, Z+6	; 0x06
    3f58:	97 81       	ldd	r25, Z+7	; 0x07
    3f5a:	26 c0       	rjmp	.+76     	; 0x3fa8 <vfprintf+0x6f2>
    3f5c:	8f ef       	ldi	r24, 0xFF	; 255
    3f5e:	9f ef       	ldi	r25, 0xFF	; 255
    3f60:	23 c0       	rjmp	.+70     	; 0x3fa8 <vfprintf+0x6f2>
    3f62:	b7 01       	movw	r22, r14
    3f64:	80 e2       	ldi	r24, 0x20	; 32
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f6c:	5a 94       	dec	r5
    3f6e:	51 10       	cpse	r5, r1
    3f70:	f8 cf       	rjmp	.-16     	; 0x3f62 <vfprintf+0x6ac>
    3f72:	d8 cf       	rjmp	.-80     	; 0x3f24 <vfprintf+0x66e>
    3f74:	51 2c       	mov	r5, r1
    3f76:	b7 01       	movw	r22, r14
    3f78:	80 2f       	mov	r24, r16
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f80:	d3 cf       	rjmp	.-90     	; 0x3f28 <vfprintf+0x672>
    3f82:	08 ed       	ldi	r16, 0xD8	; 216
    3f84:	12 e0       	ldi	r17, 0x02	; 2
    3f86:	d5 cf       	rjmp	.-86     	; 0x3f32 <vfprintf+0x67c>
    3f88:	91 10       	cpse	r9, r1
    3f8a:	80 52       	subi	r24, 0x20	; 32
    3f8c:	b7 01       	movw	r22, r14
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f94:	0f 5f       	subi	r16, 0xFF	; 255
    3f96:	1f 4f       	sbci	r17, 0xFF	; 255
    3f98:	cf cf       	rjmp	.-98     	; 0x3f38 <vfprintf+0x682>
    3f9a:	23 e0       	ldi	r18, 0x03	; 3
    3f9c:	25 15       	cp	r18, r5
    3f9e:	10 f4       	brcc	.+4      	; 0x3fa4 <vfprintf+0x6ee>
    3fa0:	83 e0       	ldi	r24, 0x03	; 3
    3fa2:	bd cf       	rjmp	.-134    	; 0x3f1e <vfprintf+0x668>
    3fa4:	51 2c       	mov	r5, r1
    3fa6:	c0 cf       	rjmp	.-128    	; 0x3f28 <vfprintf+0x672>
    3fa8:	60 96       	adiw	r28, 0x10	; 16
    3faa:	e2 e1       	ldi	r30, 0x12	; 18
    3fac:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__epilogue_restores__>

00003fb0 <__divmodhi4>:
    3fb0:	97 fb       	bst	r25, 7
    3fb2:	07 2e       	mov	r0, r23
    3fb4:	16 f4       	brtc	.+4      	; 0x3fba <__divmodhi4+0xa>
    3fb6:	00 94       	com	r0
    3fb8:	07 d0       	rcall	.+14     	; 0x3fc8 <__divmodhi4_neg1>
    3fba:	77 fd       	sbrc	r23, 7
    3fbc:	09 d0       	rcall	.+18     	; 0x3fd0 <__divmodhi4_neg2>
    3fbe:	0e 94 38 20 	call	0x4070	; 0x4070 <__udivmodhi4>
    3fc2:	07 fc       	sbrc	r0, 7
    3fc4:	05 d0       	rcall	.+10     	; 0x3fd0 <__divmodhi4_neg2>
    3fc6:	3e f4       	brtc	.+14     	; 0x3fd6 <__divmodhi4_exit>

00003fc8 <__divmodhi4_neg1>:
    3fc8:	90 95       	com	r25
    3fca:	81 95       	neg	r24
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	08 95       	ret

00003fd0 <__divmodhi4_neg2>:
    3fd0:	70 95       	com	r23
    3fd2:	61 95       	neg	r22
    3fd4:	7f 4f       	sbci	r23, 0xFF	; 255

00003fd6 <__divmodhi4_exit>:
    3fd6:	08 95       	ret

00003fd8 <__tablejump2__>:
    3fd8:	ee 0f       	add	r30, r30
    3fda:	ff 1f       	adc	r31, r31
    3fdc:	05 90       	lpm	r0, Z+
    3fde:	f4 91       	lpm	r31, Z
    3fe0:	e0 2d       	mov	r30, r0
    3fe2:	09 94       	ijmp

00003fe4 <__umulhisi3>:
    3fe4:	a2 9f       	mul	r26, r18
    3fe6:	b0 01       	movw	r22, r0
    3fe8:	b3 9f       	mul	r27, r19
    3fea:	c0 01       	movw	r24, r0
    3fec:	a3 9f       	mul	r26, r19
    3fee:	70 0d       	add	r23, r0
    3ff0:	81 1d       	adc	r24, r1
    3ff2:	11 24       	eor	r1, r1
    3ff4:	91 1d       	adc	r25, r1
    3ff6:	b2 9f       	mul	r27, r18
    3ff8:	70 0d       	add	r23, r0
    3ffa:	81 1d       	adc	r24, r1
    3ffc:	11 24       	eor	r1, r1
    3ffe:	91 1d       	adc	r25, r1
    4000:	08 95       	ret

00004002 <__prologue_saves__>:
    4002:	2f 92       	push	r2
    4004:	3f 92       	push	r3
    4006:	4f 92       	push	r4
    4008:	5f 92       	push	r5
    400a:	6f 92       	push	r6
    400c:	7f 92       	push	r7
    400e:	8f 92       	push	r8
    4010:	9f 92       	push	r9
    4012:	af 92       	push	r10
    4014:	bf 92       	push	r11
    4016:	cf 92       	push	r12
    4018:	df 92       	push	r13
    401a:	ef 92       	push	r14
    401c:	ff 92       	push	r15
    401e:	0f 93       	push	r16
    4020:	1f 93       	push	r17
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	ca 1b       	sub	r28, r26
    402c:	db 0b       	sbc	r29, r27
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	f8 94       	cli
    4032:	de bf       	out	0x3e, r29	; 62
    4034:	0f be       	out	0x3f, r0	; 63
    4036:	cd bf       	out	0x3d, r28	; 61
    4038:	09 94       	ijmp

0000403a <__epilogue_restores__>:
    403a:	2a 88       	ldd	r2, Y+18	; 0x12
    403c:	39 88       	ldd	r3, Y+17	; 0x11
    403e:	48 88       	ldd	r4, Y+16	; 0x10
    4040:	5f 84       	ldd	r5, Y+15	; 0x0f
    4042:	6e 84       	ldd	r6, Y+14	; 0x0e
    4044:	7d 84       	ldd	r7, Y+13	; 0x0d
    4046:	8c 84       	ldd	r8, Y+12	; 0x0c
    4048:	9b 84       	ldd	r9, Y+11	; 0x0b
    404a:	aa 84       	ldd	r10, Y+10	; 0x0a
    404c:	b9 84       	ldd	r11, Y+9	; 0x09
    404e:	c8 84       	ldd	r12, Y+8	; 0x08
    4050:	df 80       	ldd	r13, Y+7	; 0x07
    4052:	ee 80       	ldd	r14, Y+6	; 0x06
    4054:	fd 80       	ldd	r15, Y+5	; 0x05
    4056:	0c 81       	ldd	r16, Y+4	; 0x04
    4058:	1b 81       	ldd	r17, Y+3	; 0x03
    405a:	aa 81       	ldd	r26, Y+2	; 0x02
    405c:	b9 81       	ldd	r27, Y+1	; 0x01
    405e:	ce 0f       	add	r28, r30
    4060:	d1 1d       	adc	r29, r1
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	ed 01       	movw	r28, r26
    406e:	08 95       	ret

00004070 <__udivmodhi4>:
    4070:	aa 1b       	sub	r26, r26
    4072:	bb 1b       	sub	r27, r27
    4074:	51 e1       	ldi	r21, 0x11	; 17
    4076:	07 c0       	rjmp	.+14     	; 0x4086 <__udivmodhi4_ep>

00004078 <__udivmodhi4_loop>:
    4078:	aa 1f       	adc	r26, r26
    407a:	bb 1f       	adc	r27, r27
    407c:	a6 17       	cp	r26, r22
    407e:	b7 07       	cpc	r27, r23
    4080:	10 f0       	brcs	.+4      	; 0x4086 <__udivmodhi4_ep>
    4082:	a6 1b       	sub	r26, r22
    4084:	b7 0b       	sbc	r27, r23

00004086 <__udivmodhi4_ep>:
    4086:	88 1f       	adc	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	5a 95       	dec	r21
    408c:	a9 f7       	brne	.-22     	; 0x4078 <__udivmodhi4_loop>
    408e:	80 95       	com	r24
    4090:	90 95       	com	r25
    4092:	bc 01       	movw	r22, r24
    4094:	cd 01       	movw	r24, r26
    4096:	08 95       	ret

00004098 <__ftoa_engine>:
    4098:	28 30       	cpi	r18, 0x08	; 8
    409a:	08 f0       	brcs	.+2      	; 0x409e <__ftoa_engine+0x6>
    409c:	27 e0       	ldi	r18, 0x07	; 7
    409e:	33 27       	eor	r19, r19
    40a0:	da 01       	movw	r26, r20
    40a2:	99 0f       	add	r25, r25
    40a4:	31 1d       	adc	r19, r1
    40a6:	87 fd       	sbrc	r24, 7
    40a8:	91 60       	ori	r25, 0x01	; 1
    40aa:	00 96       	adiw	r24, 0x00	; 0
    40ac:	61 05       	cpc	r22, r1
    40ae:	71 05       	cpc	r23, r1
    40b0:	39 f4       	brne	.+14     	; 0x40c0 <__ftoa_engine+0x28>
    40b2:	32 60       	ori	r19, 0x02	; 2
    40b4:	2e 5f       	subi	r18, 0xFE	; 254
    40b6:	3d 93       	st	X+, r19
    40b8:	30 e3       	ldi	r19, 0x30	; 48
    40ba:	2a 95       	dec	r18
    40bc:	e1 f7       	brne	.-8      	; 0x40b6 <__ftoa_engine+0x1e>
    40be:	08 95       	ret
    40c0:	9f 3f       	cpi	r25, 0xFF	; 255
    40c2:	30 f0       	brcs	.+12     	; 0x40d0 <__ftoa_engine+0x38>
    40c4:	80 38       	cpi	r24, 0x80	; 128
    40c6:	71 05       	cpc	r23, r1
    40c8:	61 05       	cpc	r22, r1
    40ca:	09 f0       	breq	.+2      	; 0x40ce <__ftoa_engine+0x36>
    40cc:	3c 5f       	subi	r19, 0xFC	; 252
    40ce:	3c 5f       	subi	r19, 0xFC	; 252
    40d0:	3d 93       	st	X+, r19
    40d2:	91 30       	cpi	r25, 0x01	; 1
    40d4:	08 f0       	brcs	.+2      	; 0x40d8 <__ftoa_engine+0x40>
    40d6:	80 68       	ori	r24, 0x80	; 128
    40d8:	91 1d       	adc	r25, r1
    40da:	df 93       	push	r29
    40dc:	cf 93       	push	r28
    40de:	1f 93       	push	r17
    40e0:	0f 93       	push	r16
    40e2:	ff 92       	push	r15
    40e4:	ef 92       	push	r14
    40e6:	19 2f       	mov	r17, r25
    40e8:	98 7f       	andi	r25, 0xF8	; 248
    40ea:	96 95       	lsr	r25
    40ec:	e9 2f       	mov	r30, r25
    40ee:	96 95       	lsr	r25
    40f0:	96 95       	lsr	r25
    40f2:	e9 0f       	add	r30, r25
    40f4:	ff 27       	eor	r31, r31
    40f6:	ea 5c       	subi	r30, 0xCA	; 202
    40f8:	fc 4f       	sbci	r31, 0xFC	; 252
    40fa:	99 27       	eor	r25, r25
    40fc:	33 27       	eor	r19, r19
    40fe:	ee 24       	eor	r14, r14
    4100:	ff 24       	eor	r15, r15
    4102:	a7 01       	movw	r20, r14
    4104:	e7 01       	movw	r28, r14
    4106:	05 90       	lpm	r0, Z+
    4108:	08 94       	sec
    410a:	07 94       	ror	r0
    410c:	28 f4       	brcc	.+10     	; 0x4118 <__ftoa_engine+0x80>
    410e:	36 0f       	add	r19, r22
    4110:	e7 1e       	adc	r14, r23
    4112:	f8 1e       	adc	r15, r24
    4114:	49 1f       	adc	r20, r25
    4116:	51 1d       	adc	r21, r1
    4118:	66 0f       	add	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	06 94       	lsr	r0
    4122:	a1 f7       	brne	.-24     	; 0x410c <__ftoa_engine+0x74>
    4124:	05 90       	lpm	r0, Z+
    4126:	07 94       	ror	r0
    4128:	28 f4       	brcc	.+10     	; 0x4134 <__ftoa_engine+0x9c>
    412a:	e7 0e       	add	r14, r23
    412c:	f8 1e       	adc	r15, r24
    412e:	49 1f       	adc	r20, r25
    4130:	56 1f       	adc	r21, r22
    4132:	c1 1d       	adc	r28, r1
    4134:	77 0f       	add	r23, r23
    4136:	88 1f       	adc	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	66 1f       	adc	r22, r22
    413c:	06 94       	lsr	r0
    413e:	a1 f7       	brne	.-24     	; 0x4128 <__ftoa_engine+0x90>
    4140:	05 90       	lpm	r0, Z+
    4142:	07 94       	ror	r0
    4144:	28 f4       	brcc	.+10     	; 0x4150 <__ftoa_engine+0xb8>
    4146:	f8 0e       	add	r15, r24
    4148:	49 1f       	adc	r20, r25
    414a:	56 1f       	adc	r21, r22
    414c:	c7 1f       	adc	r28, r23
    414e:	d1 1d       	adc	r29, r1
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	66 1f       	adc	r22, r22
    4156:	77 1f       	adc	r23, r23
    4158:	06 94       	lsr	r0
    415a:	a1 f7       	brne	.-24     	; 0x4144 <__ftoa_engine+0xac>
    415c:	05 90       	lpm	r0, Z+
    415e:	07 94       	ror	r0
    4160:	20 f4       	brcc	.+8      	; 0x416a <__ftoa_engine+0xd2>
    4162:	49 0f       	add	r20, r25
    4164:	56 1f       	adc	r21, r22
    4166:	c7 1f       	adc	r28, r23
    4168:	d8 1f       	adc	r29, r24
    416a:	99 0f       	add	r25, r25
    416c:	66 1f       	adc	r22, r22
    416e:	77 1f       	adc	r23, r23
    4170:	88 1f       	adc	r24, r24
    4172:	06 94       	lsr	r0
    4174:	a9 f7       	brne	.-22     	; 0x4160 <__ftoa_engine+0xc8>
    4176:	84 91       	lpm	r24, Z
    4178:	10 95       	com	r17
    417a:	17 70       	andi	r17, 0x07	; 7
    417c:	41 f0       	breq	.+16     	; 0x418e <__ftoa_engine+0xf6>
    417e:	d6 95       	lsr	r29
    4180:	c7 95       	ror	r28
    4182:	57 95       	ror	r21
    4184:	47 95       	ror	r20
    4186:	f7 94       	ror	r15
    4188:	e7 94       	ror	r14
    418a:	1a 95       	dec	r17
    418c:	c1 f7       	brne	.-16     	; 0x417e <__ftoa_engine+0xe6>
    418e:	ec ed       	ldi	r30, 0xDC	; 220
    4190:	f2 e0       	ldi	r31, 0x02	; 2
    4192:	68 94       	set
    4194:	15 90       	lpm	r1, Z+
    4196:	15 91       	lpm	r17, Z+
    4198:	35 91       	lpm	r19, Z+
    419a:	65 91       	lpm	r22, Z+
    419c:	95 91       	lpm	r25, Z+
    419e:	05 90       	lpm	r0, Z+
    41a0:	7f e2       	ldi	r23, 0x2F	; 47
    41a2:	73 95       	inc	r23
    41a4:	e1 18       	sub	r14, r1
    41a6:	f1 0a       	sbc	r15, r17
    41a8:	43 0b       	sbc	r20, r19
    41aa:	56 0b       	sbc	r21, r22
    41ac:	c9 0b       	sbc	r28, r25
    41ae:	d0 09       	sbc	r29, r0
    41b0:	c0 f7       	brcc	.-16     	; 0x41a2 <__ftoa_engine+0x10a>
    41b2:	e1 0c       	add	r14, r1
    41b4:	f1 1e       	adc	r15, r17
    41b6:	43 1f       	adc	r20, r19
    41b8:	56 1f       	adc	r21, r22
    41ba:	c9 1f       	adc	r28, r25
    41bc:	d0 1d       	adc	r29, r0
    41be:	7e f4       	brtc	.+30     	; 0x41de <__ftoa_engine+0x146>
    41c0:	70 33       	cpi	r23, 0x30	; 48
    41c2:	11 f4       	brne	.+4      	; 0x41c8 <__ftoa_engine+0x130>
    41c4:	8a 95       	dec	r24
    41c6:	e6 cf       	rjmp	.-52     	; 0x4194 <__ftoa_engine+0xfc>
    41c8:	e8 94       	clt
    41ca:	01 50       	subi	r16, 0x01	; 1
    41cc:	30 f0       	brcs	.+12     	; 0x41da <__ftoa_engine+0x142>
    41ce:	08 0f       	add	r16, r24
    41d0:	0a f4       	brpl	.+2      	; 0x41d4 <__ftoa_engine+0x13c>
    41d2:	00 27       	eor	r16, r16
    41d4:	02 17       	cp	r16, r18
    41d6:	08 f4       	brcc	.+2      	; 0x41da <__ftoa_engine+0x142>
    41d8:	20 2f       	mov	r18, r16
    41da:	23 95       	inc	r18
    41dc:	02 2f       	mov	r16, r18
    41de:	7a 33       	cpi	r23, 0x3A	; 58
    41e0:	28 f0       	brcs	.+10     	; 0x41ec <__ftoa_engine+0x154>
    41e2:	79 e3       	ldi	r23, 0x39	; 57
    41e4:	7d 93       	st	X+, r23
    41e6:	2a 95       	dec	r18
    41e8:	e9 f7       	brne	.-6      	; 0x41e4 <__ftoa_engine+0x14c>
    41ea:	10 c0       	rjmp	.+32     	; 0x420c <__ftoa_engine+0x174>
    41ec:	7d 93       	st	X+, r23
    41ee:	2a 95       	dec	r18
    41f0:	89 f6       	brne	.-94     	; 0x4194 <__ftoa_engine+0xfc>
    41f2:	06 94       	lsr	r0
    41f4:	97 95       	ror	r25
    41f6:	67 95       	ror	r22
    41f8:	37 95       	ror	r19
    41fa:	17 95       	ror	r17
    41fc:	17 94       	ror	r1
    41fe:	e1 18       	sub	r14, r1
    4200:	f1 0a       	sbc	r15, r17
    4202:	43 0b       	sbc	r20, r19
    4204:	56 0b       	sbc	r21, r22
    4206:	c9 0b       	sbc	r28, r25
    4208:	d0 09       	sbc	r29, r0
    420a:	98 f0       	brcs	.+38     	; 0x4232 <__ftoa_engine+0x19a>
    420c:	23 95       	inc	r18
    420e:	7e 91       	ld	r23, -X
    4210:	73 95       	inc	r23
    4212:	7a 33       	cpi	r23, 0x3A	; 58
    4214:	08 f0       	brcs	.+2      	; 0x4218 <__ftoa_engine+0x180>
    4216:	70 e3       	ldi	r23, 0x30	; 48
    4218:	7c 93       	st	X, r23
    421a:	20 13       	cpse	r18, r16
    421c:	b8 f7       	brcc	.-18     	; 0x420c <__ftoa_engine+0x174>
    421e:	7e 91       	ld	r23, -X
    4220:	70 61       	ori	r23, 0x10	; 16
    4222:	7d 93       	st	X+, r23
    4224:	30 f0       	brcs	.+12     	; 0x4232 <__ftoa_engine+0x19a>
    4226:	83 95       	inc	r24
    4228:	71 e3       	ldi	r23, 0x31	; 49
    422a:	7d 93       	st	X+, r23
    422c:	70 e3       	ldi	r23, 0x30	; 48
    422e:	2a 95       	dec	r18
    4230:	e1 f7       	brne	.-8      	; 0x422a <__ftoa_engine+0x192>
    4232:	11 24       	eor	r1, r1
    4234:	ef 90       	pop	r14
    4236:	ff 90       	pop	r15
    4238:	0f 91       	pop	r16
    423a:	1f 91       	pop	r17
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	99 27       	eor	r25, r25
    4242:	87 fd       	sbrc	r24, 7
    4244:	90 95       	com	r25
    4246:	08 95       	ret

00004248 <strnlen_P>:
    4248:	fc 01       	movw	r30, r24
    424a:	05 90       	lpm	r0, Z+
    424c:	61 50       	subi	r22, 0x01	; 1
    424e:	70 40       	sbci	r23, 0x00	; 0
    4250:	01 10       	cpse	r0, r1
    4252:	d8 f7       	brcc	.-10     	; 0x424a <strnlen_P+0x2>
    4254:	80 95       	com	r24
    4256:	90 95       	com	r25
    4258:	8e 0f       	add	r24, r30
    425a:	9f 1f       	adc	r25, r31
    425c:	08 95       	ret

0000425e <memcmp>:
    425e:	fb 01       	movw	r30, r22
    4260:	dc 01       	movw	r26, r24
    4262:	04 c0       	rjmp	.+8      	; 0x426c <memcmp+0xe>
    4264:	8d 91       	ld	r24, X+
    4266:	01 90       	ld	r0, Z+
    4268:	80 19       	sub	r24, r0
    426a:	21 f4       	brne	.+8      	; 0x4274 <memcmp+0x16>
    426c:	41 50       	subi	r20, 0x01	; 1
    426e:	50 40       	sbci	r21, 0x00	; 0
    4270:	c8 f7       	brcc	.-14     	; 0x4264 <memcmp+0x6>
    4272:	88 1b       	sub	r24, r24
    4274:	99 0b       	sbc	r25, r25
    4276:	08 95       	ret

00004278 <strnlen>:
    4278:	fc 01       	movw	r30, r24
    427a:	61 50       	subi	r22, 0x01	; 1
    427c:	70 40       	sbci	r23, 0x00	; 0
    427e:	01 90       	ld	r0, Z+
    4280:	01 10       	cpse	r0, r1
    4282:	d8 f7       	brcc	.-10     	; 0x427a <strnlen+0x2>
    4284:	80 95       	com	r24
    4286:	90 95       	com	r25
    4288:	8e 0f       	add	r24, r30
    428a:	9f 1f       	adc	r25, r31
    428c:	08 95       	ret

0000428e <fputc>:
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	fb 01       	movw	r30, r22
    4298:	23 81       	ldd	r18, Z+3	; 0x03
    429a:	21 fd       	sbrc	r18, 1
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <fputc+0x16>
    429e:	8f ef       	ldi	r24, 0xFF	; 255
    42a0:	9f ef       	ldi	r25, 0xFF	; 255
    42a2:	2c c0       	rjmp	.+88     	; 0x42fc <fputc+0x6e>
    42a4:	22 ff       	sbrs	r18, 2
    42a6:	16 c0       	rjmp	.+44     	; 0x42d4 <fputc+0x46>
    42a8:	46 81       	ldd	r20, Z+6	; 0x06
    42aa:	57 81       	ldd	r21, Z+7	; 0x07
    42ac:	24 81       	ldd	r18, Z+4	; 0x04
    42ae:	35 81       	ldd	r19, Z+5	; 0x05
    42b0:	42 17       	cp	r20, r18
    42b2:	53 07       	cpc	r21, r19
    42b4:	44 f4       	brge	.+16     	; 0x42c6 <fputc+0x38>
    42b6:	a0 81       	ld	r26, Z
    42b8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ba:	9d 01       	movw	r18, r26
    42bc:	2f 5f       	subi	r18, 0xFF	; 255
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	31 83       	std	Z+1, r19	; 0x01
    42c2:	20 83       	st	Z, r18
    42c4:	8c 93       	st	X, r24
    42c6:	26 81       	ldd	r18, Z+6	; 0x06
    42c8:	37 81       	ldd	r19, Z+7	; 0x07
    42ca:	2f 5f       	subi	r18, 0xFF	; 255
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	37 83       	std	Z+7, r19	; 0x07
    42d0:	26 83       	std	Z+6, r18	; 0x06
    42d2:	14 c0       	rjmp	.+40     	; 0x42fc <fputc+0x6e>
    42d4:	8b 01       	movw	r16, r22
    42d6:	ec 01       	movw	r28, r24
    42d8:	fb 01       	movw	r30, r22
    42da:	00 84       	ldd	r0, Z+8	; 0x08
    42dc:	f1 85       	ldd	r31, Z+9	; 0x09
    42de:	e0 2d       	mov	r30, r0
    42e0:	09 95       	icall
    42e2:	89 2b       	or	r24, r25
    42e4:	e1 f6       	brne	.-72     	; 0x429e <fputc+0x10>
    42e6:	d8 01       	movw	r26, r16
    42e8:	16 96       	adiw	r26, 0x06	; 6
    42ea:	8d 91       	ld	r24, X+
    42ec:	9c 91       	ld	r25, X
    42ee:	17 97       	sbiw	r26, 0x07	; 7
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	17 96       	adiw	r26, 0x07	; 7
    42f4:	9c 93       	st	X, r25
    42f6:	8e 93       	st	-X, r24
    42f8:	16 97       	sbiw	r26, 0x06	; 6
    42fa:	ce 01       	movw	r24, r28
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	1f 91       	pop	r17
    4302:	0f 91       	pop	r16
    4304:	08 95       	ret

00004306 <vsprintf>:
    4306:	ae e0       	ldi	r26, 0x0E	; 14
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	e9 e8       	ldi	r30, 0x89	; 137
    430c:	f1 e2       	ldi	r31, 0x21	; 33
    430e:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__prologue_saves__+0x1c>
    4312:	8c 01       	movw	r16, r24
    4314:	86 e0       	ldi	r24, 0x06	; 6
    4316:	8c 83       	std	Y+4, r24	; 0x04
    4318:	1a 83       	std	Y+2, r17	; 0x02
    431a:	09 83       	std	Y+1, r16	; 0x01
    431c:	8f ef       	ldi	r24, 0xFF	; 255
    431e:	9f e7       	ldi	r25, 0x7F	; 127
    4320:	9e 83       	std	Y+6, r25	; 0x06
    4322:	8d 83       	std	Y+5, r24	; 0x05
    4324:	ce 01       	movw	r24, r28
    4326:	01 96       	adiw	r24, 0x01	; 1
    4328:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <vfprintf>
    432c:	ef 81       	ldd	r30, Y+7	; 0x07
    432e:	f8 85       	ldd	r31, Y+8	; 0x08
    4330:	e0 0f       	add	r30, r16
    4332:	f1 1f       	adc	r31, r17
    4334:	10 82       	st	Z, r1
    4336:	2e 96       	adiw	r28, 0x0e	; 14
    4338:	e4 e0       	ldi	r30, 0x04	; 4
    433a:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__epilogue_restores__+0x1c>

0000433e <__ultoa_invert>:
    433e:	fa 01       	movw	r30, r20
    4340:	aa 27       	eor	r26, r26
    4342:	28 30       	cpi	r18, 0x08	; 8
    4344:	51 f1       	breq	.+84     	; 0x439a <__ultoa_invert+0x5c>
    4346:	20 31       	cpi	r18, 0x10	; 16
    4348:	81 f1       	breq	.+96     	; 0x43aa <__ultoa_invert+0x6c>
    434a:	e8 94       	clt
    434c:	6f 93       	push	r22
    434e:	6e 7f       	andi	r22, 0xFE	; 254
    4350:	6e 5f       	subi	r22, 0xFE	; 254
    4352:	7f 4f       	sbci	r23, 0xFF	; 255
    4354:	8f 4f       	sbci	r24, 0xFF	; 255
    4356:	9f 4f       	sbci	r25, 0xFF	; 255
    4358:	af 4f       	sbci	r26, 0xFF	; 255
    435a:	b1 e0       	ldi	r27, 0x01	; 1
    435c:	3e d0       	rcall	.+124    	; 0x43da <__ultoa_invert+0x9c>
    435e:	b4 e0       	ldi	r27, 0x04	; 4
    4360:	3c d0       	rcall	.+120    	; 0x43da <__ultoa_invert+0x9c>
    4362:	67 0f       	add	r22, r23
    4364:	78 1f       	adc	r23, r24
    4366:	89 1f       	adc	r24, r25
    4368:	9a 1f       	adc	r25, r26
    436a:	a1 1d       	adc	r26, r1
    436c:	68 0f       	add	r22, r24
    436e:	79 1f       	adc	r23, r25
    4370:	8a 1f       	adc	r24, r26
    4372:	91 1d       	adc	r25, r1
    4374:	a1 1d       	adc	r26, r1
    4376:	6a 0f       	add	r22, r26
    4378:	71 1d       	adc	r23, r1
    437a:	81 1d       	adc	r24, r1
    437c:	91 1d       	adc	r25, r1
    437e:	a1 1d       	adc	r26, r1
    4380:	20 d0       	rcall	.+64     	; 0x43c2 <__ultoa_invert+0x84>
    4382:	09 f4       	brne	.+2      	; 0x4386 <__ultoa_invert+0x48>
    4384:	68 94       	set
    4386:	3f 91       	pop	r19
    4388:	2a e0       	ldi	r18, 0x0A	; 10
    438a:	26 9f       	mul	r18, r22
    438c:	11 24       	eor	r1, r1
    438e:	30 19       	sub	r19, r0
    4390:	30 5d       	subi	r19, 0xD0	; 208
    4392:	31 93       	st	Z+, r19
    4394:	de f6       	brtc	.-74     	; 0x434c <__ultoa_invert+0xe>
    4396:	cf 01       	movw	r24, r30
    4398:	08 95       	ret
    439a:	46 2f       	mov	r20, r22
    439c:	47 70       	andi	r20, 0x07	; 7
    439e:	40 5d       	subi	r20, 0xD0	; 208
    43a0:	41 93       	st	Z+, r20
    43a2:	b3 e0       	ldi	r27, 0x03	; 3
    43a4:	0f d0       	rcall	.+30     	; 0x43c4 <__ultoa_invert+0x86>
    43a6:	c9 f7       	brne	.-14     	; 0x439a <__ultoa_invert+0x5c>
    43a8:	f6 cf       	rjmp	.-20     	; 0x4396 <__ultoa_invert+0x58>
    43aa:	46 2f       	mov	r20, r22
    43ac:	4f 70       	andi	r20, 0x0F	; 15
    43ae:	40 5d       	subi	r20, 0xD0	; 208
    43b0:	4a 33       	cpi	r20, 0x3A	; 58
    43b2:	18 f0       	brcs	.+6      	; 0x43ba <__ultoa_invert+0x7c>
    43b4:	49 5d       	subi	r20, 0xD9	; 217
    43b6:	31 fd       	sbrc	r19, 1
    43b8:	40 52       	subi	r20, 0x20	; 32
    43ba:	41 93       	st	Z+, r20
    43bc:	02 d0       	rcall	.+4      	; 0x43c2 <__ultoa_invert+0x84>
    43be:	a9 f7       	brne	.-22     	; 0x43aa <__ultoa_invert+0x6c>
    43c0:	ea cf       	rjmp	.-44     	; 0x4396 <__ultoa_invert+0x58>
    43c2:	b4 e0       	ldi	r27, 0x04	; 4
    43c4:	a6 95       	lsr	r26
    43c6:	97 95       	ror	r25
    43c8:	87 95       	ror	r24
    43ca:	77 95       	ror	r23
    43cc:	67 95       	ror	r22
    43ce:	ba 95       	dec	r27
    43d0:	c9 f7       	brne	.-14     	; 0x43c4 <__ultoa_invert+0x86>
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	61 05       	cpc	r22, r1
    43d6:	71 05       	cpc	r23, r1
    43d8:	08 95       	ret
    43da:	9b 01       	movw	r18, r22
    43dc:	ac 01       	movw	r20, r24
    43de:	0a 2e       	mov	r0, r26
    43e0:	06 94       	lsr	r0
    43e2:	57 95       	ror	r21
    43e4:	47 95       	ror	r20
    43e6:	37 95       	ror	r19
    43e8:	27 95       	ror	r18
    43ea:	ba 95       	dec	r27
    43ec:	c9 f7       	brne	.-14     	; 0x43e0 <__ultoa_invert+0xa2>
    43ee:	62 0f       	add	r22, r18
    43f0:	73 1f       	adc	r23, r19
    43f2:	84 1f       	adc	r24, r20
    43f4:	95 1f       	adc	r25, r21
    43f6:	a0 1d       	adc	r26, r0
    43f8:	08 95       	ret

000043fa <_exit>:
    43fa:	f8 94       	cli

000043fc <__stop_program>:
    43fc:	ff cf       	rjmp	.-2      	; 0x43fc <__stop_program>
