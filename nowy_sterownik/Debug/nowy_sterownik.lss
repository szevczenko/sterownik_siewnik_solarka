
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  000043e4  00004478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a0  00800216  00800216  0000462e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000462e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000468c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  000046c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060dd  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020dd  00000000  00000000  0000add5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c88  00000000  00000000  0000ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e98  00000000  00000000  00010b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c75  00000000  00000000  000119d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c1b  00000000  00000000  00013649  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00016264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__vector_13>
      38:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	86 08       	sbc	r8, r6
      56:	8d 08       	sbc	r8, r13
      58:	90 08       	sbc	r9, r0
      5a:	96 08       	sbc	r9, r6
      5c:	9c 08       	sbc	r9, r12
      5e:	a1 08       	sbc	r10, r1
      60:	a7 08       	sbc	r10, r7
      62:	ae 08       	sbc	r10, r14
      64:	b2 08       	sbc	r11, r2
      66:	ba 08       	sbc	r11, r10
      68:	09 09       	sbc	r16, r9
      6a:	09 09       	sbc	r16, r9
      6c:	09 09       	sbc	r16, r9
      6e:	09 09       	sbc	r16, r9
      70:	09 09       	sbc	r16, r9
      72:	09 09       	sbc	r16, r9
      74:	09 09       	sbc	r16, r9
      76:	09 09       	sbc	r16, r9
      78:	09 09       	sbc	r16, r9
      7a:	09 09       	sbc	r16, r9
      7c:	09 09       	sbc	r16, r9
      7e:	09 09       	sbc	r16, r9
      80:	09 09       	sbc	r16, r9
      82:	09 09       	sbc	r16, r9
      84:	09 09       	sbc	r16, r9
      86:	09 09       	sbc	r16, r9
      88:	09 09       	sbc	r16, r9
      8a:	09 09       	sbc	r16, r9
      8c:	09 09       	sbc	r16, r9
      8e:	09 09       	sbc	r16, r9
      90:	09 09       	sbc	r16, r9
      92:	09 09       	sbc	r16, r9
      94:	09 09       	sbc	r16, r9
      96:	09 09       	sbc	r16, r9
      98:	09 09       	sbc	r16, r9
      9a:	09 09       	sbc	r16, r9
      9c:	09 09       	sbc	r16, r9
      9e:	09 09       	sbc	r16, r9
      a0:	09 09       	sbc	r16, r9
      a2:	09 09       	sbc	r16, r9
      a4:	09 09       	sbc	r16, r9
      a6:	09 09       	sbc	r16, r9
      a8:	09 09       	sbc	r16, r9
      aa:	09 09       	sbc	r16, r9
      ac:	09 09       	sbc	r16, r9
      ae:	09 09       	sbc	r16, r9
      b0:	09 09       	sbc	r16, r9
      b2:	09 09       	sbc	r16, r9
      b4:	09 09       	sbc	r16, r9
      b6:	09 09       	sbc	r16, r9
      b8:	09 09       	sbc	r16, r9
      ba:	09 09       	sbc	r16, r9
      bc:	09 09       	sbc	r16, r9
      be:	09 09       	sbc	r16, r9
      c0:	09 09       	sbc	r16, r9
      c2:	09 09       	sbc	r16, r9
      c4:	09 09       	sbc	r16, r9
      c6:	09 09       	sbc	r16, r9
      c8:	09 09       	sbc	r16, r9
      ca:	09 09       	sbc	r16, r9
      cc:	09 09       	sbc	r16, r9
      ce:	09 09       	sbc	r16, r9
      d0:	09 09       	sbc	r16, r9
      d2:	09 09       	sbc	r16, r9
      d4:	09 09       	sbc	r16, r9
      d6:	09 09       	sbc	r16, r9
      d8:	09 09       	sbc	r16, r9
      da:	09 09       	sbc	r16, r9
      dc:	09 09       	sbc	r16, r9
      de:	09 09       	sbc	r16, r9
      e0:	09 09       	sbc	r16, r9
      e2:	09 09       	sbc	r16, r9
      e4:	09 09       	sbc	r16, r9
      e6:	09 09       	sbc	r16, r9
      e8:	09 09       	sbc	r16, r9
      ea:	09 09       	sbc	r16, r9
      ec:	09 09       	sbc	r16, r9
      ee:	09 09       	sbc	r16, r9
      f0:	09 09       	sbc	r16, r9
      f2:	09 09       	sbc	r16, r9
      f4:	09 09       	sbc	r16, r9
      f6:	09 09       	sbc	r16, r9
      f8:	09 09       	sbc	r16, r9
      fa:	09 09       	sbc	r16, r9
      fc:	09 09       	sbc	r16, r9
      fe:	09 09       	sbc	r16, r9
     100:	09 09       	sbc	r16, r9
     102:	09 09       	sbc	r16, r9
     104:	09 09       	sbc	r16, r9
     106:	09 09       	sbc	r16, r9
     108:	09 09       	sbc	r16, r9
     10a:	09 09       	sbc	r16, r9
     10c:	09 09       	sbc	r16, r9
     10e:	09 09       	sbc	r16, r9
     110:	09 09       	sbc	r16, r9
     112:	09 09       	sbc	r16, r9
     114:	09 09       	sbc	r16, r9
     116:	c1 08       	sbc	r12, r1
     118:	c8 08       	sbc	r12, r8
     11a:	ce 08       	sbc	r12, r14
     11c:	d3 08       	sbc	r13, r3
     11e:	d9 08       	sbc	r13, r9
     120:	df 08       	sbc	r13, r15
     122:	09 09       	sbc	r16, r9
     124:	09 09       	sbc	r16, r9
     126:	09 09       	sbc	r16, r9
     128:	09 09       	sbc	r16, r9
     12a:	09 09       	sbc	r16, r9
     12c:	f8 08       	sbc	r15, r8
     12e:	09 09       	sbc	r16, r9
     130:	09 09       	sbc	r16, r9
     132:	e7 08       	sbc	r14, r7
     134:	ec 08       	sbc	r14, r12
     136:	09 09       	sbc	r16, r9
     138:	e4 08       	sbc	r14, r4
     13a:	f2 08       	sbc	r15, r2
     13c:	09 09       	sbc	r16, r9
     13e:	09 09       	sbc	r16, r9
     140:	09 09       	sbc	r16, r9
     142:	09 09       	sbc	r16, r9
     144:	09 09       	sbc	r16, r9
     146:	09 09       	sbc	r16, r9
     148:	09 09       	sbc	r16, r9
     14a:	09 09       	sbc	r16, r9
     14c:	09 09       	sbc	r16, r9
     14e:	09 09       	sbc	r16, r9
     150:	09 09       	sbc	r16, r9
     152:	09 09       	sbc	r16, r9
     154:	09 09       	sbc	r16, r9
     156:	09 09       	sbc	r16, r9
     158:	09 09       	sbc	r16, r9
     15a:	09 09       	sbc	r16, r9
     15c:	09 09       	sbc	r16, r9
     15e:	09 09       	sbc	r16, r9
     160:	09 09       	sbc	r16, r9
     162:	09 09       	sbc	r16, r9
     164:	09 09       	sbc	r16, r9
     166:	09 09       	sbc	r16, r9
     168:	09 09       	sbc	r16, r9
     16a:	09 09       	sbc	r16, r9
     16c:	09 09       	sbc	r16, r9
     16e:	09 09       	sbc	r16, r9
     170:	09 09       	sbc	r16, r9
     172:	09 09       	sbc	r16, r9
     174:	09 09       	sbc	r16, r9
     176:	09 09       	sbc	r16, r9
     178:	09 09       	sbc	r16, r9
     17a:	09 09       	sbc	r16, r9
     17c:	09 09       	sbc	r16, r9
     17e:	09 09       	sbc	r16, r9
     180:	09 09       	sbc	r16, r9
     182:	09 09       	sbc	r16, r9
     184:	09 09       	sbc	r16, r9
     186:	09 09       	sbc	r16, r9
     188:	09 09       	sbc	r16, r9
     18a:	09 09       	sbc	r16, r9
     18c:	09 09       	sbc	r16, r9
     18e:	09 09       	sbc	r16, r9
     190:	09 09       	sbc	r16, r9
     192:	09 09       	sbc	r16, r9
     194:	09 09       	sbc	r16, r9
     196:	09 09       	sbc	r16, r9
     198:	09 09       	sbc	r16, r9
     19a:	09 09       	sbc	r16, r9
     19c:	09 09       	sbc	r16, r9
     19e:	09 09       	sbc	r16, r9
     1a0:	09 09       	sbc	r16, r9
     1a2:	09 09       	sbc	r16, r9
     1a4:	09 09       	sbc	r16, r9
     1a6:	09 09       	sbc	r16, r9
     1a8:	09 09       	sbc	r16, r9
     1aa:	09 09       	sbc	r16, r9
     1ac:	09 09       	sbc	r16, r9
     1ae:	09 09       	sbc	r16, r9
     1b0:	09 09       	sbc	r16, r9
     1b2:	09 09       	sbc	r16, r9
     1b4:	09 09       	sbc	r16, r9
     1b6:	09 09       	sbc	r16, r9
     1b8:	09 09       	sbc	r16, r9
     1ba:	09 09       	sbc	r16, r9
     1bc:	09 09       	sbc	r16, r9
     1be:	09 09       	sbc	r16, r9
     1c0:	09 09       	sbc	r16, r9
     1c2:	09 09       	sbc	r16, r9
     1c4:	09 09       	sbc	r16, r9
     1c6:	09 09       	sbc	r16, r9
     1c8:	09 09       	sbc	r16, r9
     1ca:	09 09       	sbc	r16, r9
     1cc:	09 09       	sbc	r16, r9
     1ce:	09 09       	sbc	r16, r9
     1d0:	09 09       	sbc	r16, r9
     1d2:	09 09       	sbc	r16, r9
     1d4:	09 09       	sbc	r16, r9
     1d6:	09 09       	sbc	r16, r9
     1d8:	09 09       	sbc	r16, r9
     1da:	09 09       	sbc	r16, r9
     1dc:	09 09       	sbc	r16, r9
     1de:	09 09       	sbc	r16, r9
     1e0:	09 09       	sbc	r16, r9
     1e2:	09 09       	sbc	r16, r9
     1e4:	09 09       	sbc	r16, r9
     1e6:	09 09       	sbc	r16, r9
     1e8:	09 09       	sbc	r16, r9
     1ea:	09 09       	sbc	r16, r9
     1ec:	09 09       	sbc	r16, r9
     1ee:	09 09       	sbc	r16, r9
     1f0:	09 09       	sbc	r16, r9
     1f2:	09 09       	sbc	r16, r9
     1f4:	09 09       	sbc	r16, r9
     1f6:	09 09       	sbc	r16, r9
     1f8:	09 09       	sbc	r16, r9
     1fa:	09 09       	sbc	r16, r9
     1fc:	09 09       	sbc	r16, r9
     1fe:	09 09       	sbc	r16, r9
     200:	09 09       	sbc	r16, r9
     202:	09 09       	sbc	r16, r9
     204:	09 09       	sbc	r16, r9
     206:	09 09       	sbc	r16, r9
     208:	09 09       	sbc	r16, r9
     20a:	09 09       	sbc	r16, r9
     20c:	09 09       	sbc	r16, r9
     20e:	09 09       	sbc	r16, r9
     210:	09 09       	sbc	r16, r9
     212:	09 09       	sbc	r16, r9
     214:	09 09       	sbc	r16, r9
     216:	09 09       	sbc	r16, r9
     218:	09 09       	sbc	r16, r9
     21a:	09 09       	sbc	r16, r9
     21c:	09 09       	sbc	r16, r9
     21e:	09 09       	sbc	r16, r9
     220:	09 09       	sbc	r16, r9
     222:	09 09       	sbc	r16, r9
     224:	09 09       	sbc	r16, r9
     226:	09 09       	sbc	r16, r9
     228:	09 09       	sbc	r16, r9
     22a:	09 09       	sbc	r16, r9
     22c:	09 09       	sbc	r16, r9
     22e:	09 09       	sbc	r16, r9
     230:	09 09       	sbc	r16, r9
     232:	09 09       	sbc	r16, r9
     234:	09 09       	sbc	r16, r9
     236:	09 09       	sbc	r16, r9
     238:	09 09       	sbc	r16, r9
     23a:	09 09       	sbc	r16, r9
     23c:	09 09       	sbc	r16, r9
     23e:	09 09       	sbc	r16, r9
     240:	09 09       	sbc	r16, r9
     242:	09 09       	sbc	r16, r9
     244:	fc 08       	sbc	r15, r12
     246:	08 09       	sbc	r16, r8
     248:	06 09       	sbc	r16, r6
     24a:	04 09       	sbc	r16, r4
     24c:	02 09       	sbc	r16, r2
     24e:	00 09       	sbc	r16, r0
     250:	fe 08       	sbc	r15, r14
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_5_menu>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e4 ee       	ldi	r30, 0xE4	; 228
     3ea:	f3 e4       	ldi	r31, 0x43	; 67
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a6 31       	cpi	r26, 0x16	; 22
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	a6 e1       	ldi	r26, 0x16	; 22
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a6 3b       	cpi	r26, 0xB6	; 182
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 31 02 	call	0x462	; 0x462 <main>
     40c:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	80 e9       	ldi	r24, 0x90	; 144
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 76 21 	call	0x42ec	; 0x42ec <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     438:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     43a:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     43c:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     43e:	89 9a       	sbi	0x11, 1	; 17
     440:	08 95       	ret

00000442 <init_driver>:
void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     442:	62 e3       	ldi	r22, 0x32	; 50
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 81 17 	call	0x2f02	; 0x2f02 <timer0_init>
	init_display_drv();
     44a:	0e 94 3d 08 	call	0x107a	; 0x107a <init_display_drv>
	init_buttons();
     44e:	0e 94 c7 04 	call	0x98e	; 0x98e <init_buttons>
	init_system();
     452:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <init_system>
	init_measure();
     456:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     45a:	80 b7       	in	r24, 0x30	; 48
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	80 bf       	out	0x30, r24	; 48
     460:	08 95       	ret

00000462 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <servo_init>
	#endif
	init_pin();
     468:	0e 94 1c 02 	call	0x438	; 0x438 <init_pin>
	sei();
     46c:	78 94       	sei
	init_driver();
     46e:	0e 94 21 02 	call	0x442	; 0x442 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     472:	87 e8       	ldi	r24, 0x87	; 135
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     47e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     482:	0e 94 4a 10 	call	0x2094	; 0x2094 <measure_get_servo_calibration>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     48a:	0e 94 39 0a 	call	0x1472	; 0x1472 <disp_process>
		animation();
     48e:	0e 94 95 0b 	call	0x172a	; 0x172a <animation>
		process_button();
     492:	0e 94 1d 04 	call	0x83a	; 0x83a <process_button>
		disp_fast_process();
     496:	0e 94 12 16 	call	0x2c24	; 0x2c24 <disp_fast_process>
		disp_very_fast_process();
     49a:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <disp_very_fast_process>
		dcmotor_process(motor_value);
     49e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <motor_value>
     4a2:	0e 94 c1 07 	call	0xf82	; 0xf82 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4a6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
     4aa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <servo_process>
		menu_process();
     4ae:	0e 94 12 06 	call	0xc24	; 0xc24 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4b2:	0e 94 84 0c 	call	0x1908	; 0x1908 <error_event>
		error_led_blink();
     4b6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <error_led_blink>
		measure_process();
     4ba:	0e 94 56 0f 	call	0x1eac	; 0x1eac <measure_process>
		accumulator_process();
     4be:	0e 94 82 02 	call	0x504	; 0x504 <accumulator_process>
		accum_led_process();
     4c2:	0e 94 cb 02 	call	0x596	; 0x596 <accum_led_process>
		buzzer_process();
     4c6:	0e 94 de 04 	call	0x9bc	; 0x9bc <buzzer_process>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <main+0x28>

000004cc <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 86 10 	call	0x210c	; 0x210c <measure_get_filtered_value>
	#endif
    return voltage;
     4d2:	bc 01       	movw	r22, r24
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	86 0f       	add	r24, r22
     4de:	97 1f       	adc	r25, r23
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
     4ea:	26 e6       	ldi	r18, 0x66	; 102
     4ec:	36 e6       	ldi	r19, 0x66	; 102
     4ee:	46 eb       	ldi	r20, 0xB6	; 182
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	5a e3       	ldi	r21, 0x3A	; 58
     4fe:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
}
     502:	08 95       	ret

00000504 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     504:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     508:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     50c:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     510:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     514:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <accumulator_timer.1914>
     518:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <accumulator_timer.1914+0x1>
     51c:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <accumulator_timer.1914+0x2>
     520:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <accumulator_timer.1914+0x3>
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	a6 07       	cpc	r26, r22
     52a:	b7 07       	cpc	r27, r23
     52c:	98 f5       	brcc	.+102    	; 0x594 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	0e 94 86 10 	call	0x210c	; 0x210c <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     534:	89 35       	cpi	r24, 0x59	; 89
     536:	22 e0       	ldi	r18, 0x02	; 2
     538:	92 07       	cpc	r25, r18
     53a:	18 f0       	brcs	.+6      	; 0x542 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     542:	8b 38       	cpi	r24, 0x8B	; 139
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	92 07       	cpc	r25, r18
     548:	18 f4       	brcc	.+6      	; 0x550 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     54a:	22 e0       	ldi	r18, 0x02	; 2
     54c:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     550:	8e 35       	cpi	r24, 0x5E	; 94
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	92 07       	cpc	r25, r18
     556:	18 f4       	brcc	.+6      	; 0x55e <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     558:	23 e0       	ldi	r18, 0x03	; 3
     55a:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     55e:	8c 58       	subi	r24, 0x8C	; 140
     560:	91 40       	sbci	r25, 0x01	; 1
     562:	8c 3c       	cpi	r24, 0xCC	; 204
     564:	91 05       	cpc	r25, r1
     566:	10 f4       	brcc	.+4      	; 0x56c <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     568:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     56c:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
     570:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
     574:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
     578:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
     57c:	8c 59       	subi	r24, 0x9C	; 156
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	af 4f       	sbci	r26, 0xFF	; 255
     582:	bf 4f       	sbci	r27, 0xFF	; 255
     584:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <accumulator_timer.1914>
     588:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <accumulator_timer.1914+0x1>
     58c:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <accumulator_timer.1914+0x2>
     590:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <accumulator_timer.1914+0x3>
     594:	08 95       	ret

00000596 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     596:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     59a:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     59e:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     5a2:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     5a6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     5aa:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     5ae:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     5b2:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     5b6:	84 17       	cp	r24, r20
     5b8:	95 07       	cpc	r25, r21
     5ba:	a6 07       	cpc	r26, r22
     5bc:	b7 07       	cpc	r27, r23
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <accum_led_process+0x2c>
     5c0:	86 c0       	rjmp	.+268    	; 0x6ce <accum_led_process+0x138>
	{
        switch (accumulator_state)
     5c2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <accumulator_state>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	e9 f0       	breq	.+58     	; 0x604 <accum_led_process+0x6e>
     5ca:	30 f0       	brcs	.+12     	; 0x5d8 <accum_led_process+0x42>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	99 f1       	breq	.+102    	; 0x636 <accum_led_process+0xa0>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <accum_led_process+0x40>
     5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <accum_led_process+0x10e>
     5d6:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     5d8:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     5da:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     5de:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     5e2:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     5e6:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     5ea:	88 53       	subi	r24, 0x38	; 56
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	af 4f       	sbci	r26, 0xFF	; 255
     5f0:	bf 4f       	sbci	r27, 0xFF	; 255
     5f2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <process_timer.1918>
     5f6:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <process_timer.1918+0x1>
     5fa:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <process_timer.1918+0x2>
     5fe:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <process_timer.1918+0x3>
            break;
     602:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     604:	98 b3       	in	r25, 0x18	; 24
     606:	80 e2       	ldi	r24, 0x20	; 32
     608:	89 27       	eor	r24, r25
     60a:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     60c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     610:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     614:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     618:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     61c:	86 50       	subi	r24, 0x06	; 6
     61e:	9f 4f       	sbci	r25, 0xFF	; 255
     620:	af 4f       	sbci	r26, 0xFF	; 255
     622:	bf 4f       	sbci	r27, 0xFF	; 255
     624:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <process_timer.1918>
     628:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <process_timer.1918+0x1>
     62c:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <process_timer.1918+0x2>
     630:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <process_timer.1918+0x3>
            break;
     634:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     636:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
     63a:	81 11       	cpse	r24, r1
     63c:	19 c0       	rjmp	.+50     	; 0x670 <accum_led_process+0xda>
            {
                state_led = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <__data_end>
                LED_ACUM_ON;
     644:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     646:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     64a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     64e:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     652:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     656:	8c 50       	subi	r24, 0x0C	; 12
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	af 4f       	sbci	r26, 0xFF	; 255
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <process_timer.1918>
     662:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <process_timer.1918+0x1>
     666:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <process_timer.1918+0x2>
     66a:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <process_timer.1918+0x3>
     66e:	08 95       	ret
            }
            else if (state_led == 1)
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	69 f5       	brne	.+90     	; 0x6ce <accum_led_process+0x138>
            {
                state_led = 0;
     674:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
                LED_ACUM_OFF;
     678:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     67a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     67e:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     682:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     686:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     68a:	84 52       	subi	r24, 0x24	; 36
     68c:	9a 4f       	sbci	r25, 0xFA	; 250
     68e:	af 4f       	sbci	r26, 0xFF	; 255
     690:	bf 4f       	sbci	r27, 0xFF	; 255
     692:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <process_timer.1918>
     696:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <process_timer.1918+0x1>
     69a:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <process_timer.1918+0x2>
     69e:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <process_timer.1918+0x3>
     6a2:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     6a4:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     6a6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <process_timer.1918>
     6aa:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <process_timer.1918+0x1>
     6ae:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <process_timer.1918+0x2>
     6b2:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <process_timer.1918+0x3>
     6b6:	88 51       	subi	r24, 0x18	; 24
     6b8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ba:	af 4f       	sbci	r26, 0xFF	; 255
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <process_timer.1918>
     6c2:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <process_timer.1918+0x1>
     6c6:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <process_timer.1918+0x2>
     6ca:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <process_timer.1918+0x3>
     6ce:	08 95       	ret

000006d0 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     6d0:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     6d2:	97 b1       	in	r25, 0x07	; 7
     6d4:	98 7f       	andi	r25, 0xF8	; 248
     6d6:	87 70       	andi	r24, 0x07	; 7
     6d8:	89 2b       	or	r24, r25
     6da:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     6dc:	37 9a       	sbi	0x06, 7	; 6
     6de:	08 95       	ret

000006e0 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     6e0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     6e2:	36 99       	sbic	0x06, 6	; 6
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     6e6:	84 b1       	in	r24, 0x04	; 4
     6e8:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     6ea:	08 95       	ret

000006ec <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     6ec:	0e 94 68 03 	call	0x6d0	; 0x6d0 <adc_setchannel>
	return adc_readsel();
     6f0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_readsel>
}
     6f4:	08 95       	ret

000006f6 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     6f6:	dc 01       	movw	r26, r24
     6f8:	16 96       	adiw	r26, 0x06	; 6
     6fa:	ed 91       	ld	r30, X+
     6fc:	fc 91       	ld	r31, X
     6fe:	17 97       	sbiw	r26, 0x07	; 7
     700:	20 81       	ld	r18, Z
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	18 96       	adiw	r26, 0x08	; 8
     708:	0c 90       	ld	r0, X
     70a:	02 c0       	rjmp	.+4      	; 0x710 <read_button+0x1a>
     70c:	f5 95       	asr	r31
     70e:	e7 95       	ror	r30
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <read_button+0x16>
     714:	cf 01       	movw	r24, r30
     716:	81 70       	andi	r24, 0x01	; 1
     718:	08 95       	ret

0000071a <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     71a:	ed e3       	ldi	r30, 0x3D	; 61
     71c:	f4 e0       	ldi	r31, 0x04	; 4
     71e:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     724:	14 86       	std	Z+12, r1	; 0x0c
     726:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     728:	12 86       	std	Z+10, r1	; 0x0a
     72a:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     72c:	16 86       	std	Z+14, r1	; 0x0e
     72e:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     730:	26 e3       	ldi	r18, 0x36	; 54
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	37 83       	std	Z+7, r19	; 0x07
     736:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     73c:	e0 e1       	ldi	r30, 0x10	; 16
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     742:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     744:	14 86       	std	Z+12, r1	; 0x0c
     746:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     748:	12 86       	std	Z+10, r1	; 0x0a
     74a:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     74c:	16 86       	std	Z+14, r1	; 0x0e
     74e:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     750:	37 83       	std	Z+7, r19	; 0x07
     752:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     754:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     756:	ef e1       	ldi	r30, 0x1F	; 31
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     75c:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     75e:	14 86       	std	Z+12, r1	; 0x0c
     760:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     762:	12 86       	std	Z+10, r1	; 0x0a
     764:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     766:	16 86       	std	Z+14, r1	; 0x0e
     768:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     76a:	37 83       	std	Z+7, r19	; 0x07
     76c:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     772:	ed ef       	ldi	r30, 0xFD	; 253
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     778:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     77a:	14 86       	std	Z+12, r1	; 0x0c
     77c:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     77e:	12 86       	std	Z+10, r1	; 0x0a
     780:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     782:	16 86       	std	Z+14, r1	; 0x0e
     784:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     786:	40 e3       	ldi	r20, 0x30	; 48
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	57 83       	std	Z+7, r21	; 0x07
     78c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     792:	ee ee       	ldi	r30, 0xEE	; 238
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     798:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     79a:	14 86       	std	Z+12, r1	; 0x0c
     79c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     79e:	12 86       	std	Z+10, r1	; 0x0a
     7a0:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     7a2:	16 86       	std	Z+14, r1	; 0x0e
     7a4:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     7a6:	37 83       	std	Z+7, r19	; 0x07
     7a8:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     7aa:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     7ac:	ee e2       	ldi	r30, 0x2E	; 46
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     7b2:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     7b4:	14 86       	std	Z+12, r1	; 0x0c
     7b6:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     7b8:	12 86       	std	Z+10, r1	; 0x0a
     7ba:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     7bc:	16 86       	std	Z+14, r1	; 0x0e
     7be:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     7c0:	69 e3       	ldi	r22, 0x39	; 57
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	77 83       	std	Z+7, r23	; 0x07
     7c6:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     7c8:	a4 e0       	ldi	r26, 0x04	; 4
     7ca:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     7cc:	ec e4       	ldi	r30, 0x4C	; 76
     7ce:	f4 e0       	ldi	r31, 0x04	; 4
     7d0:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     7d2:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     7d4:	14 86       	std	Z+12, r1	; 0x0c
     7d6:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     7d8:	12 86       	std	Z+10, r1	; 0x0a
     7da:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     7dc:	16 86       	std	Z+14, r1	; 0x0e
     7de:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     7e0:	43 e3       	ldi	r20, 0x33	; 51
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	57 83       	std	Z+7, r21	; 0x07
     7e6:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     7e8:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     7ea:	eb e5       	ldi	r30, 0x5B	; 91
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     7f0:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     7f2:	14 86       	std	Z+12, r1	; 0x0c
     7f4:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     7f6:	12 86       	std	Z+10, r1	; 0x0a
     7f8:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     7fa:	16 86       	std	Z+14, r1	; 0x0e
     7fc:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     7fe:	37 83       	std	Z+7, r19	; 0x07
     800:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     802:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     804:	e0 ed       	ldi	r30, 0xD0	; 208
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     80a:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     80c:	14 86       	std	Z+12, r1	; 0x0c
     80e:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     810:	12 86       	std	Z+10, r1	; 0x0a
     812:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     814:	16 86       	std	Z+14, r1	; 0x0e
     816:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     818:	77 83       	std	Z+7, r23	; 0x07
     81a:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     81c:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     81e:	ef ed       	ldi	r30, 0xDF	; 223
     820:	f3 e0       	ldi	r31, 0x03	; 3
     822:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     824:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     826:	14 86       	std	Z+12, r1	; 0x0c
     828:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     82a:	12 86       	std	Z+10, r1	; 0x0a
     82c:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     82e:	16 86       	std	Z+14, r1	; 0x0e
     830:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     832:	57 83       	std	Z+7, r21	; 0x07
     834:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	08 95       	ret

0000083a <process_button>:
}

void process_button(void)
{
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     848:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     84c:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     850:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     854:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     858:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <timer_button>
     85c:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <timer_button+0x1>
     860:	a0 91 0e 04 	lds	r26, 0x040E	; 0x80040e <timer_button+0x2>
     864:	b0 91 0f 04 	lds	r27, 0x040F	; 0x80040f <timer_button+0x3>
     868:	84 17       	cp	r24, r20
     86a:	95 07       	cpc	r25, r21
     86c:	a6 07       	cpc	r26, r22
     86e:	b7 07       	cpc	r27, r23
     870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
     872:	85 c0       	rjmp	.+266    	; 0x97e <__stack+0x11f>
	{
		timer_button = mktime.ms + 20;
     874:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
     878:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
     87c:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
     880:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
     884:	44 96       	adiw	r24, 0x14	; 20
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
     88a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <timer_button>
     88e:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <timer_button+0x1>
     892:	a0 93 0e 04 	sts	0x040E, r26	; 0x80040e <timer_button+0x2>
     896:	b0 93 0f 04 	sts	0x040F, r27	; 0x80040f <timer_button+0x3>
     89a:	c0 e6       	ldi	r28, 0x60	; 96
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	0f 2e       	mov	r0, r31
     8a0:	f4 e7       	ldi	r31, 0x74	; 116
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
     8ae:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     8b0:	88 81       	ld	r24, Y
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
			if(red_val != but_tab[i]->value)
     8b8:	e8 81       	ld	r30, Y
     8ba:	f9 81       	ldd	r31, Y+1	; 0x01
     8bc:	95 81       	ldd	r25, Z+5	; 0x05
     8be:	89 17       	cp	r24, r25
     8c0:	e1 f0       	breq	.+56     	; 0x8fa <__stack+0x9b>
			{
				but_tab[i]->value = red_val;
     8c2:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <__stack+0x81>
     8c8:	88 81       	ld	r24, Y
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	dc 01       	movw	r26, r24
     8ce:	19 96       	adiw	r26, 0x09	; 9
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	1a 97       	sbiw	r26, 0x0a	; 10
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__stack+0x7d>
     8da:	41 c0       	rjmp	.+130    	; 0x95e <__stack+0xff>
				but_tab[i]->rise_callback(but_tab[i]);
     8dc:	09 95       	icall
     8de:	3f c0       	rjmp	.+126    	; 0x95e <__stack+0xff>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     8e0:	81 11       	cpse	r24, r1
     8e2:	3d c0       	rjmp	.+122    	; 0x95e <__stack+0xff>
     8e4:	88 81       	ld	r24, Y
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	dc 01       	movw	r26, r24
     8ea:	1b 96       	adiw	r26, 0x0b	; 11
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	1c 97       	sbiw	r26, 0x0c	; 12
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	21 f0       	breq	.+8      	; 0x8fe <__stack+0x9f>
				but_tab[i]->fall_callback(but_tab[i]);
     8f6:	09 95       	icall
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
			}
			//timer
			if (red_val == 0)
     8fa:	81 11       	cpse	r24, r1
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__stack+0xff>
			{
				but_tab[i]->tim_cnt++;
     8fe:	d8 01       	movw	r26, r16
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	a2 81       	ldd	r26, Z+2	; 0x02
     90a:	b3 81       	ldd	r27, Z+3	; 0x03
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	a1 1d       	adc	r26, r1
     910:	b1 1d       	adc	r27, r1
     912:	80 83       	st	Z, r24
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	a2 83       	std	Z+2, r26	; 0x02
     918:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     91a:	d8 01       	movw	r26, r16
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	a2 81       	ldd	r26, Z+2	; 0x02
     926:	b3 81       	ldd	r27, Z+3	; 0x03
     928:	88 97       	sbiw	r24, 0x28	; 40
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	10 f1       	brcs	.+68     	; 0x974 <__stack+0x115>
     930:	84 81       	ldd	r24, Z+4	; 0x04
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	f9 f0       	breq	.+62     	; 0x974 <__stack+0x115>
				{
					if (but_tab[i]->timer_callback != 0)
     936:	05 84       	ldd	r0, Z+13	; 0x0d
     938:	f6 85       	ldd	r31, Z+14	; 0x0e
     93a:	e0 2d       	mov	r30, r0
     93c:	30 97       	sbiw	r30, 0x00	; 0
     93e:	19 f0       	breq	.+6      	; 0x946 <__stack+0xe7>
					but_tab[i]->timer_callback(&button1);
     940:	8d e3       	ldi	r24, 0x3D	; 61
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     946:	d8 01       	movw	r26, r16
     948:	ed 91       	ld	r30, X+
     94a:	fc 91       	ld	r31, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	10 82       	st	Z, r1
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	d4 82       	std	Z+4, r13	; 0x04
     95c:	0b c0       	rjmp	.+22     	; 0x974 <__stack+0x115>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     95e:	d8 01       	movw	r26, r16
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	10 82       	st	Z, r1
     968:	11 82       	std	Z+1, r1	; 0x01
     96a:	12 82       	std	Z+2, r1	; 0x02
     96c:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	14 82       	std	Z+4, r1	; 0x04
     974:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     976:	ce 15       	cp	r28, r14
     978:	df 05       	cpc	r29, r15
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x11f>
     97c:	98 cf       	rjmp	.-208    	; 0x8ae <__stack+0x4f>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	08 95       	ret

0000098e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     98e:	0e 94 8d 03 	call	0x71a	; 0x71a <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     992:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     994:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     996:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     998:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     99a:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     99c:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     99e:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     9a0:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     9a2:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     9a4:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     9a6:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     9a8:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     9aa:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     9ac:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     9ae:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     9b0:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     9b2:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     9b4:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     9b6:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     9b8:	a8 9a       	sbi	0x15, 0	; 21
     9ba:	08 95       	ret

000009bc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9bc:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     9c0:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     9c4:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     9c8:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     9cc:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_timer>
     9d0:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_timer+0x1>
     9d4:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_timer+0x2>
     9d8:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_timer+0x3>
     9dc:	84 17       	cp	r24, r20
     9de:	95 07       	cpc	r25, r21
     9e0:	a6 07       	cpc	r26, r22
     9e2:	b7 07       	cpc	r27, r23
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <buzzer_process+0x2c>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <buzzer_process+0xea>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER))
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <buzzer_process+0x38>
     9f2:	59 c0       	rjmp	.+178    	; 0xaa6 <buzzer_process+0xea>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9f4:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
     9f8:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
     9fc:	95 ff       	sbrs	r25, 5
     9fe:	37 c0       	rjmp	.+110    	; 0xa6e <buzzer_process+0xb2>
     a00:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <buzzer_state>
     a04:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <buzzer_state+0x1>
     a08:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <buzzer_state+0x2>
     a0c:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <buzzer_state+0x3>
     a10:	89 2b       	or	r24, r25
     a12:	8a 2b       	or	r24, r26
     a14:	8b 2b       	or	r24, r27
     a16:	59 f5       	brne	.+86     	; 0xa6e <buzzer_process+0xb2>
			{
				ON_BUZZER;
     a18:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a1a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
     a1e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
     a22:	9f 7d       	andi	r25, 0xDF	; 223
     a24:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
     a28:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
				buzzer_state = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <buzzer_state>
     a38:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <buzzer_state+0x1>
     a3c:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <buzzer_state+0x2>
     a40:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <buzzer_state+0x3>
				buzzer_timer += 100;
     a44:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_timer>
     a48:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_timer+0x1>
     a4c:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_timer+0x2>
     a50:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_timer+0x3>
     a54:	8c 59       	subi	r24, 0x9C	; 156
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	af 4f       	sbci	r26, 0xFF	; 255
     a5a:	bf 4f       	sbci	r27, 0xFF	; 255
     a5c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_timer>
     a60:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_timer+0x1>
     a64:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <buzzer_timer+0x2>
     a68:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <buzzer_timer+0x3>
     a6c:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a6e:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a70:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <buzzer_state>
     a74:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <buzzer_state+0x1>
     a78:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <buzzer_state+0x2>
     a7c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <buzzer_state+0x3>
				buzzer_timer += 50;
     a80:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_timer>
     a84:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_timer+0x1>
     a88:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_timer+0x2>
     a8c:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_timer+0x3>
     a90:	c2 96       	adiw	r24, 0x32	; 50
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_timer>
     a9a:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_timer+0x1>
     a9e:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <buzzer_timer+0x2>
     aa2:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <buzzer_timer+0x3>
     aa6:	08 95       	ret

00000aa8 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     aa8:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     aaa:	c0 98       	cbi	0x18, 0	; 24
     aac:	08 95       	ret

00000aae <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     aae:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     ab2:	88 23       	and	r24, r24
     ab4:	19 f0       	breq	.+6      	; 0xabc <button_1_menu+0xe>
		configured_parameter--;
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <configured_parameter>
     abc:	08 95       	ret

00000abe <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     abe:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     ac2:	87 30       	cpi	r24, 0x07	; 7
     ac4:	18 f4       	brcc	.+6      	; 0xacc <button_2_menu+0xe>
		configured_parameter++;
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <configured_parameter>
     acc:	08 95       	ret

00000ace <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     ace:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	e0 59       	subi	r30, 0x90	; 144
     ad8:	fb 4f       	sbci	r31, 0xFB	; 251
     ada:	20 81       	ld	r18, Z
     adc:	22 23       	and	r18, r18
     ade:	29 f0       	breq	.+10     	; 0xaea <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     ae0:	fc 01       	movw	r30, r24
     ae2:	e0 59       	subi	r30, 0x90	; 144
     ae4:	fb 4f       	sbci	r31, 0xFB	; 251
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	20 83       	st	Z, r18
     aea:	08 95       	ret

00000aec <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     aec:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	e0 59       	subi	r30, 0x90	; 144
     af6:	fb 4f       	sbci	r31, 0xFB	; 251
     af8:	20 81       	ld	r18, Z
     afa:	fc 01       	movw	r30, r24
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ec 58       	subi	r30, 0x8C	; 140
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	30 81       	ld	r19, Z
     b06:	23 17       	cp	r18, r19
     b08:	28 f4       	brcc	.+10     	; 0xb14 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b0a:	fc 01       	movw	r30, r24
     b0c:	e0 59       	subi	r30, 0x90	; 144
     b0e:	fb 4f       	sbci	r31, 0xFB	; 251
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	20 83       	st	Z, r18
     b14:	08 95       	ret

00000b16 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     b16:	a4 e7       	ldi	r26, 0x74	; 116
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e0 e7       	ldi	r30, 0x70	; 112
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	28 e7       	ldi	r18, 0x78	; 120
     b20:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     b22:	11 96       	adiw	r26, 0x01	; 1
     b24:	8c 91       	ld	r24, X
     b26:	11 97       	sbiw	r26, 0x01	; 1
     b28:	81 93       	st	Z+, r24
     b2a:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     b2c:	e2 17       	cp	r30, r18
     b2e:	f3 07       	cpc	r31, r19
     b30:	c1 f7       	brne	.-16     	; 0xb22 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     b32:	08 95       	ret

00000b34 <enter_to_menu>:
	return 0;
}

static void enter_to_menu(menuState_t state)
{
	dark_menu_state = state;
     b34:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <dark_menu_state>
	button1.fall_callback = button_1_menu;
     b38:	87 e5       	ldi	r24, 0x57	; 87
     b3a:	95 e0       	ldi	r25, 0x05	; 5
     b3c:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <button1+0xc>
     b40:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <button1+0xb>
	button2.fall_callback = button_2_menu;
     b44:	8f e5       	ldi	r24, 0x5F	; 95
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <button2+0xc>
     b4c:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <button2+0xb>
	button3.fall_callback = button_3_menu;
     b50:	85 ec       	ldi	r24, 0xC5	; 197
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <button3+0xc>
     b58:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <button3+0xb>
	button5.fall_callback = button_5_menu;
     b5c:	87 e6       	ldi	r24, 0x67	; 103
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <button5+0xc>
     b64:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <button5+0xb>
	button6.fall_callback = button_6_menu;
     b68:	86 e7       	ldi	r24, 0x76	; 118
     b6a:	95 e0       	ldi	r25, 0x05	; 5
     b6c:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <button6+0xc>
     b70:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <button6+0xb>
	button7.fall_callback = button_7_menu;
     b74:	8b e8       	ldi	r24, 0x8B	; 139
     b76:	95 e0       	ldi	r25, 0x05	; 5
     b78:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <button7+0xc>
     b7c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
     b88:	08 95       	ret

00000b8a <button_3_menu>:

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b8a:	60 e7       	ldi	r22, 0x70	; 112
     b8c:	74 e0       	ldi	r23, 0x04	; 4
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	0e 94 db 10 	call	0x21b6	; 0x21b6 <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     b9a:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
	LED_MOTOR_OFF;
     b9e:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     ba0:	96 98       	cbi	0x12, 6	; 18
     ba2:	08 95       	ret

00000ba4 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     ba4:	cf 93       	push	r28
	pass[pass_len++] = number;
     ba6:	e0 91 79 04 	lds	r30, 0x0479	; 0x800479 <pass_len>
     baa:	c1 e0       	ldi	r28, 0x01	; 1
     bac:	ce 0f       	add	r28, r30
     bae:	c0 93 79 04 	sts	0x0479, r28	; 0x800479 <pass_len>
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	e6 59       	subi	r30, 0x96	; 150
     bb6:	fb 4f       	sbci	r31, 0xFB	; 251
     bb8:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     bba:	4c 2f       	mov	r20, r28
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	63 ec       	ldi	r22, 0xC3	; 195
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	8a e6       	ldi	r24, 0x6A	; 106
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 22 21 	call	0x4244	; 0x4244 <memcmp>
     bca:	89 2b       	or	r24, r25
     bcc:	51 f0       	breq	.+20     	; 0xbe2 <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     bce:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <pass_len>
	memset(pass, 0, sizeof(pass));
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	ea e6       	ldi	r30, 0x6A	; 106
     bd6:	f4 e0       	ldi	r31, 0x04	; 4
     bd8:	df 01       	movw	r26, r30
     bda:	1d 92       	st	X+, r1
     bdc:	8a 95       	dec	r24
     bde:	e9 f7       	brne	.-6      	; 0xbda <pass_add_number+0x36>
     be0:	05 c0       	rjmp	.+10     	; 0xbec <pass_add_number+0x48>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     be2:	c6 30       	cpi	r28, 0x06	; 6
     be4:	19 f4       	brne	.+6      	; 0xbec <pass_add_number+0x48>
		//debug_msg("enter_to_menu\n");
		enter_to_menu(MENU_PARAMETERS);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 9a 05 	call	0xb34	; 0xb34 <enter_to_menu>
	}
}
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     bf6:	08 95       	ret

00000bf8 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     bfe:	08 95       	ret

00000c00 <button_5_number>:
	pass_add_number(2);
}

static void button_5_number(void *pv)
{
	pass_add_number(3);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     c06:	08 95       	ret

00000c08 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     c0e:	08 95       	ret

00000c10 <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     c16:	08 95       	ret

00000c18 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	0e 94 d2 05 	call	0xba4	; 0xba4 <pass_add_number>
     c1e:	08 95       	ret

00000c20 <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	08 95       	ret

00000c24 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state > MENU_PASSWORD)
     c24:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     c28:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     c2c:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     c30:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     c34:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <menu_timer.2235>
     c38:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <menu_timer.2235+0x1>
     c3c:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <menu_timer.2235+0x2>
     c40:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <menu_timer.2235+0x3>
     c44:	84 17       	cp	r24, r20
     c46:	95 07       	cpc	r25, r21
     c48:	a6 07       	cpc	r26, r22
     c4a:	b7 07       	cpc	r27, r23
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <menu_process+0x2c>
     c4e:	82 c0       	rjmp	.+260    	; 0xd54 <menu_process+0x130>
     c50:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <dark_menu_state>
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <menu_process+0x36>
     c58:	7d c0       	rjmp	.+250    	; 0xd54 <menu_process+0x130>
	{
		menu_timer = mktime.ms + 250;
     c5a:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
     c5e:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
     c62:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
     c66:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
     c6a:	46 50       	subi	r20, 0x06	; 6
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	6f 4f       	sbci	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <menu_timer.2235>
     c76:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <menu_timer.2235+0x1>
     c7a:	60 93 2a 02 	sts	0x022A, r22	; 0x80022a <menu_timer.2235+0x2>
     c7e:	70 93 2b 02 	sts	0x022B, r23	; 0x80022b <menu_timer.2235+0x3>
		if (dark_menu_state == MENU_SERVO)
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	39 f4       	brne	.+14     	; 0xc94 <menu_process+0x70>
		{
			if (configured_parameter < MENU_CLOSE_SERVO_REGULATION)
				configured_parameter = MENU_CLOSE_SERVO_REGULATION;
			if (configured_parameter > MENU_OPEN_SERVO_REGULATION)
     c86:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	18 f0       	brcs	.+6      	; 0xc94 <menu_process+0x70>
				configured_parameter = MENU_OPEN_SERVO_REGULATION;	
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <configured_parameter>
		}
		if (segment1.state == SEG_MENU)
     c94:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
     c98:	87 30       	cpi	r24, 0x07	; 7
     c9a:	31 f4       	brne	.+12     	; 0xca8 <menu_process+0x84>
			disp_set_number(&segment1, configured_parameter);
     c9c:	60 91 78 04 	lds	r22, 0x0478	; 0x800478 <configured_parameter>
     ca0:	8a e8       	ldi	r24, 0x8A	; 138
     ca2:	94 e0       	ldi	r25, 0x04	; 4
     ca4:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
		if (segment2.state == SEG_MENU)
     ca8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
     cac:	87 30       	cpi	r24, 0x07	; 7
     cae:	51 f4       	brne	.+20     	; 0xcc4 <menu_process+0xa0>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     cb0:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <configured_parameter>
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	e0 59       	subi	r30, 0x90	; 144
     cb8:	fb 4f       	sbci	r31, 0xFB	; 251
     cba:	60 81       	ld	r22, Z
     cbc:	85 e8       	ldi	r24, 0x85	; 133
     cbe:	94 e0       	ldi	r25, 0x04	; 4
     cc0:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     cc4:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	49 f5       	brne	.+82     	; 0xd1e <menu_process+0xfa>
     ccc:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
     cd0:	88 30       	cpi	r24, 0x08	; 8
     cd2:	29 f5       	brne	.+74     	; 0xd1e <menu_process+0xfa>
		{
			menu_timer = 1000 + mktime.ms;
     cd4:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
     cd8:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
     cdc:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
     ce0:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
     ce4:	88 51       	subi	r24, 0x18	; 24
     ce6:	9c 4f       	sbci	r25, 0xFC	; 252
     ce8:	af 4f       	sbci	r26, 0xFF	; 255
     cea:	bf 4f       	sbci	r27, 0xFF	; 255
     cec:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <menu_timer.2235>
     cf0:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <menu_timer.2235+0x1>
     cf4:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <menu_timer.2235+0x2>
     cf8:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <menu_timer.2235+0x3>
			DispD2.value = 's';
     cfc:	83 e7       	ldi	r24, 0x73	; 115
     cfe:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <DispD2>
			DispD1.value = 'a';
     d02:	81 e6       	ldi	r24, 0x61	; 97
     d04:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <DispD1>
			DispD3.value = 'p';
     d08:	80 e7       	ldi	r24, 0x70	; 112
     d0a:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <DispD3>
			DispD4.value = 0;
     d0e:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <DispD4>
			segment1.state = SEG_MENU_OFF;
     d12:	8a e0       	ldi	r24, 0x0A	; 10
     d14:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d18:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
			
			return;
     d1c:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d1e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
     d22:	8a 30       	cpi	r24, 0x0A	; 10
     d24:	51 f4       	brne	.+20     	; 0xd3a <menu_process+0x116>
     d26:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	31 f4       	brne	.+12     	; 0xd3a <menu_process+0x116>
		{
			segment1.state = SEG_OFF;
     d2e:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <segment1+0x4>
			segment2.state = SEG_OFF;
     d32:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <segment2+0x4>
			dark_menu_state = MENU_PASSWORD;
     d36:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     d3a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     d3e:	81 11       	cpse	r24, r1
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <menu_process+0x122>
		{
			servo_regulation(0);
     d42:	0e 94 db 11 	call	0x23b6	; 0x23b6 <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     d46:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <configured_parameter>
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	19 f4       	brne	.+6      	; 0xd54 <menu_process+0x130>
		{
			servo_regulation(99);
     d4e:	83 e6       	ldi	r24, 0x63	; 99
     d50:	0e 94 db 11 	call	0x23b6	; 0x23b6 <servo_regulation>
     d54:	08 95       	ret

00000d56 <check_servo_config_menu>:
	enter_to_menu(MENU_SERVO);
	debug_msg("enter_to_menu_servo\n");
}

void check_servo_config_menu(void)
{
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
	timer_t menu_timer = mktime.ms + 20;
     d62:	c0 90 b2 04 	lds	r12, 0x04B2	; 0x8004b2 <mktime+0x2>
     d66:	d0 90 b3 04 	lds	r13, 0x04B3	; 0x8004b3 <mktime+0x3>
     d6a:	e0 90 b4 04 	lds	r14, 0x04B4	; 0x8004b4 <mktime+0x4>
     d6e:	f0 90 b5 04 	lds	r15, 0x04B5	; 0x8004b5 <mktime+0x5>
     d72:	84 e1       	ldi	r24, 0x14	; 20
     d74:	c8 0e       	add	r12, r24
     d76:	d1 1c       	adc	r13, r1
     d78:	e1 1c       	adc	r14, r1
     d7a:	f1 1c       	adc	r15, r1
	while (menu_timer > mktime.ms)
     d7c:	c0 eb       	ldi	r28, 0xB0	; 176
     d7e:	d4 e0       	ldi	r29, 0x04	; 4
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <check_servo_config_menu+0x50>
	{
		if (read_button(&button1) == 0) {
     d82:	8d e3       	ldi	r24, 0x3D	; 61
     d84:	94 e0       	ldi	r25, 0x04	; 4
     d86:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
     d8a:	81 11       	cpse	r24, r1
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <check_servo_config_menu+0x50>
	}
}

static void enter_servo_config(void *pv)
{
	enter_to_menu(MENU_SERVO);
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 9a 05 	call	0xb34	; 0xb34 <enter_to_menu>
	debug_msg("enter_to_menu_servo\n");
     d94:	8e ea       	ldi	r24, 0xAE	; 174
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <check_servo_config_menu+0x62>
}

void check_servo_config_menu(void)
{
	timer_t menu_timer = mktime.ms + 20;
	while (menu_timer > mktime.ms)
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	ac 81       	ldd	r26, Y+4	; 0x04
     dac:	bd 81       	ldd	r27, Y+5	; 0x05
     dae:	8c 15       	cp	r24, r12
     db0:	9d 05       	cpc	r25, r13
     db2:	ae 05       	cpc	r26, r14
     db4:	bf 05       	cpc	r27, r15
     db6:	28 f3       	brcs	.-54     	; 0xd82 <check_servo_config_menu+0x2c>
		if (read_button(&button1) == 0) {
			enter_servo_config(NULL);
			break;
		}
	}
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	08 95       	ret

00000dc6 <init_menu>:
void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dc6:	8c e0       	ldi	r24, 0x0C	; 12
     dc8:	96 e0       	ldi	r25, 0x06	; 6
     dca:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <button1+0xc>
     dce:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <button1+0xb>
	button2.fall_callback = button_2_number;
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	96 e0       	ldi	r25, 0x06	; 6
     dd6:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <button2+0xc>
     dda:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <button2+0xb>
	button3.fall_callback = button_3_number;
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <button3+0xc>
     de6:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <button3+0xb>
	button5.fall_callback = button_5_number;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <button5+0xc>
     df2:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <button5+0xb>
	button6.fall_callback = button_6_number;
     df6:	8c ef       	ldi	r24, 0xFC	; 252
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <button6+0xc>
     dfe:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <button6+0xb>
	button7.fall_callback = button_7_number;
     e02:	88 ef       	ldi	r24, 0xF8	; 248
     e04:	95 e0       	ldi	r25, 0x05	; 5
     e06:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <button7+0xc>
     e0a:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e0e:	60 e7       	ldi	r22, 0x70	; 112
     e10:	74 e0       	ldi	r23, 0x04	; 4
     e12:	84 e0       	ldi	r24, 0x04	; 4
     e14:	0e 94 23 11 	call	0x2246	; 0x2246 <mem_read_data>
     e18:	a0 e7       	ldi	r26, 0x70	; 112
     e1a:	b4 e0       	ldi	r27, 0x04	; 4
     e1c:	e4 e7       	ldi	r30, 0x74	; 116
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	44 e8       	ldi	r20, 0x84	; 132
     e22:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e24:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e26:	9c 91       	ld	r25, X
     e28:	80 81       	ld	r24, Z
     e2a:	89 17       	cp	r24, r25
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e2e:	81 81       	ldd	r24, Z+1	; 0x01
     e30:	8c 93       	st	X, r24
			check_error++;
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	11 96       	adiw	r26, 0x01	; 1
     e36:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e38:	e4 17       	cp	r30, r20
     e3a:	f5 07       	cpc	r31, r21
     e3c:	a1 f7       	brne	.-24     	; 0xe26 <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e3e:	22 23       	and	r18, r18
     e40:	29 f0       	breq	.+10     	; 0xe4c <init_menu+0x86>

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e42:	60 e7       	ldi	r22, 0x70	; 112
     e44:	74 e0       	ldi	r23, 0x04	; 4
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	0e 94 db 10 	call	0x21b6	; 0x21b6 <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e4c:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <pass_len>
	memset(pass, 0, sizeof(pass));
     e50:	86 e0       	ldi	r24, 0x06	; 6
     e52:	ea e6       	ldi	r30, 0x6A	; 106
     e54:	f4 e0       	ldi	r31, 0x04	; 4
     e56:	df 01       	movw	r26, r30
     e58:	1d 92       	st	X+, r1
     e5a:	8a 95       	dec	r24
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <init_menu+0x92>
	button6.fall_callback = button_6_number;
	button7.fall_callback = button_7_number;
	read_menu_parametrs();
	check_menu_parameters();
	clear_password();
	check_servo_config_menu();
     e5e:	0e 94 ab 06 	call	0xd56	; 0xd56 <check_servo_config_menu>
     e62:	08 95       	ret

00000e64 <dark_menu_get_value>:
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	30 f4       	brcc	.+12     	; 0xe74 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e68:	e8 2f       	mov	r30, r24
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e0 59       	subi	r30, 0x90	; 144
     e6e:	fb 4f       	sbci	r31, 0xFB	; 251
     e70:	80 81       	ld	r24, Z
     e72:	08 95       	ret
	}
	return 0;
     e74:	80 e0       	ldi	r24, 0x00	; 0
}
     e76:	08 95       	ret

00000e78 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     e78:	89 ec       	ldi	r24, 0xC9	; 201
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e84:	8f e7       	ldi	r24, 0x7F	; 127
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <evTime_init>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD>
     e92:	94 98       	cbi	0x12, 4	; 18
     e94:	15 bc       	out	0x25, r1	; 37
     e96:	8f 9a       	sbi	0x11, 7	; 17
     e98:	97 9a       	sbi	0x12, 7	; 18
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	08 95       	ret

00000ea0 <dcmotorpwm_deinit>:
     ea0:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <motorD>
     ea4:	15 bc       	out	0x25, r1	; 37
     ea6:	97 9a       	sbi	0x12, 7	; 18
     ea8:	94 98       	cbi	0x12, 4	; 18
     eaa:	08 95       	ret

00000eac <dcmotor_is_on>:
     eac:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <motorD>
     eb0:	92 50       	subi	r25, 0x02	; 2
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	93 30       	cpi	r25, 0x03	; 3
     eb8:	10 f0       	brcs	.+4      	; 0xebe <dcmotor_is_on+0x12>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	c9 01       	movw	r24, r18
     ec0:	08 95       	ret

00000ec2 <dcmotorpwm_stop>:
     ec2:	0e 94 56 07 	call	0xeac	; 0xeac <dcmotor_is_on>
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	99 f0       	breq	.+38     	; 0xef0 <dcmotorpwm_stop+0x2e>
     eca:	87 ed       	ldi	r24, 0xD7	; 215
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     ed6:	15 bc       	out	0x25, r1	; 37
     ed8:	97 9a       	sbi	0x12, 7	; 18
     eda:	94 98       	cbi	0x12, 4	; 18
     edc:	eb e7       	ldi	r30, 0x7B	; 123
     ede:	f4 e0       	ldi	r31, 0x04	; 4
     ee0:	80 81       	ld	r24, Z
     ee2:	81 83       	std	Z+1, r24	; 0x01
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 83       	st	Z, r24
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	08 95       	ret

00000ef2 <dcmotorpwm_start>:
     ef2:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <motorD>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	d9 f4       	brne	.+54     	; 0xf30 <dcmotorpwm_start+0x3e>
     efa:	94 9a       	sbi	0x12, 4	; 18
     efc:	85 b5       	in	r24, 0x25	; 37
     efe:	80 63       	ori	r24, 0x30	; 48
     f00:	85 bd       	out	0x25, r24	; 37
     f02:	85 b5       	in	r24, 0x25	; 37
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	85 bd       	out	0x25, r24	; 37
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	85 bd       	out	0x25, r24	; 37
     f0e:	eb e7       	ldi	r30, 0x7B	; 123
     f10:	f4 e0       	ldi	r31, 0x04	; 4
     f12:	80 81       	ld	r24, Z
     f14:	81 83       	std	Z+1, r24	; 0x01
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	80 83       	st	Z, r24
     f1a:	48 ee       	ldi	r20, 0xE8	; 232
     f1c:	53 e0       	ldi	r21, 0x03	; 3
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	8f e7       	ldi	r24, 0x7F	; 127
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	08 95       	ret
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 95       	ret

00000f36 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f36:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <motorD+0x3>
}
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 95       	ret

00000f3e <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f3e:	85 ee       	ldi	r24, 0xE5	; 229
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f4a:	0e 94 61 07 	call	0xec2	; 0xec2 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD>
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	08 95       	ret

00000f5a <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f5a:	0e 94 56 07 	call	0xeac	; 0xeac <dcmotor_is_on>
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	29 f0       	breq	.+10     	; 0xf6c <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD>
		return 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f6c:	08 95       	ret

00000f6e <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     f6e:	0e 94 56 07 	call	0xeac	; 0xeac <dcmotor_is_on>
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	29 f0       	breq	.+10     	; 0xf80 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD>
		return 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f80:	08 95       	ret

00000f82 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     f82:	cf 93       	push	r28
     f84:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     f86:	46 e9       	ldi	r20, 0x96	; 150
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	8c e2       	ldi	r24, 0x2C	; 44
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 01 18 	call	0x3002	; 0x3002 <evTime_process_period>
     f96:	89 2b       	or	r24, r25
     f98:	09 f4       	brne	.+2      	; 0xf9c <dcmotor_process+0x1a>
     f9a:	58 c0       	rjmp	.+176    	; 0x104c <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     f9c:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <motorD>
     fa0:	93 30       	cpi	r25, 0x03	; 3
     fa2:	e9 f0       	breq	.+58     	; 0xfde <dcmotor_process+0x5c>
     fa4:	28 f4       	brcc	.+10     	; 0xfb0 <dcmotor_process+0x2e>
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	b9 f0       	breq	.+46     	; 0xfd8 <dcmotor_process+0x56>
     faa:	92 30       	cpi	r25, 0x02	; 2
     fac:	41 f0       	breq	.+16     	; 0xfbe <dcmotor_process+0x3c>
     fae:	4e c0       	rjmp	.+156    	; 0x104c <dcmotor_process+0xca>
     fb0:	94 30       	cpi	r25, 0x04	; 4
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <dcmotor_process+0x34>
     fb4:	48 c0       	rjmp	.+144    	; 0x1046 <dcmotor_process+0xc4>
     fb6:	95 30       	cpi	r25, 0x05	; 5
     fb8:	09 f4       	brne	.+2      	; 0xfbc <dcmotor_process+0x3a>
     fba:	42 c0       	rjmp	.+132    	; 0x1040 <dcmotor_process+0xbe>
     fbc:	47 c0       	rjmp	.+142    	; 0x104c <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     fbe:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     fc2:	2b ee       	ldi	r18, 0xEB	; 235
     fc4:	c2 9f       	mul	r28, r18
     fc6:	c0 01       	movw	r24, r0
     fc8:	11 24       	eor	r1, r1
     fca:	63 e6       	ldi	r22, 0x63	; 99
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__divmodhi4>
     fd2:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     fd4:	63 bd       	out	0x23, r22	; 35
			break;
     fd6:	3a c0       	rjmp	.+116    	; 0x104c <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     fd8:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <motorD+0x3>
			break;
     fdc:	37 c0       	rjmp	.+110    	; 0x104c <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     fde:	c3 33       	cpi	r28, 0x33	; 51
     fe0:	78 f4       	brcc	.+30     	; 0x1000 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     fe2:	84 e1       	ldi	r24, 0x14	; 20
     fe4:	8c 0f       	add	r24, r28
     fe6:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     fea:	2b ee       	ldi	r18, 0xEB	; 235
     fec:	82 9f       	mul	r24, r18
     fee:	c0 01       	movw	r24, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	63 e6       	ldi	r22, 0x63	; 99
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__divmodhi4>
     ffa:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     ffc:	63 bd       	out	0x23, r22	; 35
     ffe:	26 c0       	rjmp	.+76     	; 0x104c <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    1000:	8d ec       	ldi	r24, 0xCD	; 205
    1002:	8c 0f       	add	r24, r28
    1004:	84 31       	cpi	r24, 0x14	; 20
    1006:	78 f4       	brcc	.+30     	; 0x1026 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    1008:	8f e0       	ldi	r24, 0x0F	; 15
    100a:	8c 0f       	add	r24, r28
    100c:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1010:	2b ee       	ldi	r18, 0xEB	; 235
    1012:	82 9f       	mul	r24, r18
    1014:	c0 01       	movw	r24, r0
    1016:	11 24       	eor	r1, r1
    1018:	63 e6       	ldi	r22, 0x63	; 99
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__divmodhi4>
    1020:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    1022:	63 bd       	out	0x23, r22	; 35
    1024:	13 c0       	rjmp	.+38     	; 0x104c <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    1026:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    102a:	2b ee       	ldi	r18, 0xEB	; 235
    102c:	c2 9f       	mul	r28, r18
    102e:	c0 01       	movw	r24, r0
    1030:	11 24       	eor	r1, r1
    1032:	63 e6       	ldi	r22, 0x63	; 99
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <__divmodhi4>
    103a:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    103c:	63 bd       	out	0x23, r22	; 35
    103e:	06 c0       	rjmp	.+12     	; 0x104c <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1040:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1042:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1044:	03 c0       	rjmp	.+6      	; 0x104c <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1050:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1052:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1054:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1056:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    1058:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    105a:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    105c:	af 9a       	sbi	0x15, 7	; 21
    105e:	08 95       	ret

00001060 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1060:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1062:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1066:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    1068:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    106c:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    106e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    1072:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    1074:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <DispD4+0x1>
    1078:	08 95       	ret

0000107a <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    107a:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    107c:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    107e:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    1080:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    1082:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    1084:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    1086:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    1088:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    108a:	e3 e9       	ldi	r30, 0x93	; 147
    108c:	f4 e0       	ldi	r31, 0x04	; 4
    108e:	81 e9       	ldi	r24, 0x91	; 145
    1090:	94 e0       	ldi	r25, 0x04	; 4
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    1096:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    1098:	2d e9       	ldi	r18, 0x9D	; 157
    109a:	34 e0       	ldi	r19, 0x04	; 4
    109c:	33 83       	std	Z+3, r19	; 0x03
    109e:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10a0:	aa e8       	ldi	r26, 0x8A	; 138
    10a2:	b4 e0       	ldi	r27, 0x04	; 4
    10a4:	11 96       	adiw	r26, 0x01	; 1
    10a6:	3c 93       	st	X, r19
    10a8:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10aa:	13 96       	adiw	r26, 0x03	; 3
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10b2:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10b4:	2f e8       	ldi	r18, 0x8F	; 143
    10b6:	34 e0       	ldi	r19, 0x04	; 4
    10b8:	35 83       	std	Z+5, r19	; 0x05
    10ba:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10bc:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10be:	8b e9       	ldi	r24, 0x9B	; 155
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	97 83       	std	Z+7, r25	; 0x07
    10c4:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10c6:	e5 e8       	ldi	r30, 0x85	; 133
    10c8:	f4 e0       	ldi	r31, 0x04	; 4
    10ca:	31 83       	std	Z+1, r19	; 0x01
    10cc:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    10ce:	93 83       	std	Z+3, r25	; 0x03
    10d0:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    10d2:	0e 94 30 08 	call	0x1060	; 0x1060 <off_all_displays>
	clear_display();
    10d6:	0e 94 28 08 	call	0x1050	; 0x1050 <clear_display>
    10da:	08 95       	ret

000010dc <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
	if (DispD->value != displaying_value)
    10e0:	fc 01       	movw	r30, r24
    10e2:	30 81       	ld	r19, Z
    10e4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <displaying_value>
    10e8:	32 17       	cp	r19, r18
    10ea:	09 f4       	brne	.+2      	; 0x10ee <display_set_value+0x12>
    10ec:	95 c0       	rjmp	.+298    	; 0x1218 <display_set_value+0x13c>
    10ee:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    10f0:	0e 94 28 08 	call	0x1050	; 0x1050 <clear_display>
		switch(DispD->value)
    10f4:	e8 81       	ld	r30, Y
    10f6:	8e 2f       	mov	r24, r30
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	91 05       	cpc	r25, r1
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <display_set_value+0x26>
    1100:	88 c0       	rjmp	.+272    	; 0x1212 <display_set_value+0x136>
    1102:	fc 01       	movw	r30, r24
    1104:	e6 5d       	subi	r30, 0xD6	; 214
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    110c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    110e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1110:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1112:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1114:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1116:	aa 98       	cbi	0x15, 2	; 21
			break;
    1118:	7c c0       	rjmp	.+248    	; 0x1212 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    111a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    111c:	dd 98       	cbi	0x1b, 5	; 27
			break;
    111e:	79 c0       	rjmp	.+242    	; 0x1212 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1120:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1122:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1124:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1126:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    1128:	df 98       	cbi	0x1b, 7	; 27
			break;
    112a:	73 c0       	rjmp	.+230    	; 0x1212 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    112c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    112e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1130:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1132:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1134:	df 98       	cbi	0x1b, 7	; 27
			break;
    1136:	6d c0       	rjmp	.+218    	; 0x1212 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    1138:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    113a:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    113c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    113e:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1140:	68 c0       	rjmp	.+208    	; 0x1212 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1142:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1144:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1146:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1148:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    114a:	df 98       	cbi	0x1b, 7	; 27
			break;
    114c:	62 c0       	rjmp	.+196    	; 0x1212 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    114e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1150:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1152:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1154:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1156:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1158:	de 98       	cbi	0x1b, 6	; 27
			break;
    115a:	5b c0       	rjmp	.+182    	; 0x1212 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    115c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    115e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1160:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1162:	57 c0       	rjmp	.+174    	; 0x1212 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1164:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1166:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1168:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    116a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    116c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    116e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1170:	af 98       	cbi	0x15, 7	; 21
			break;
    1172:	4f c0       	rjmp	.+158    	; 0x1212 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    1174:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1176:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1178:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    117a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    117c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    117e:	af 98       	cbi	0x15, 7	; 21
			break;
    1180:	48 c0       	rjmp	.+144    	; 0x1212 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    1182:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1184:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1186:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    1188:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    118a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    118c:	af 98       	cbi	0x15, 7	; 21
			break;
    118e:	41 c0       	rjmp	.+130    	; 0x1212 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    1190:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1192:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1194:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1196:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1198:	af 98       	cbi	0x15, 7	; 21
			break;
    119a:	3b c0       	rjmp	.+118    	; 0x1212 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    119c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    119e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11a0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11a2:	aa 98       	cbi	0x15, 2	; 21
			break;
    11a4:	36 c0       	rjmp	.+108    	; 0x1212 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11a6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11a8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11aa:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ac:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11ae:	af 98       	cbi	0x15, 7	; 21
			break;
    11b0:	30 c0       	rjmp	.+96     	; 0x1212 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11b2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11b4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11b6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11b8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ba:	af 98       	cbi	0x15, 7	; 21
			break;
    11bc:	2a c0       	rjmp	.+84     	; 0x1212 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11be:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11c0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11c4:	af 98       	cbi	0x15, 7	; 21
			break;
    11c6:	25 c0       	rjmp	.+74     	; 0x1212 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    11c8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11ca:	af 98       	cbi	0x15, 7	; 21
			break;
    11cc:	22 c0       	rjmp	.+68     	; 0x1212 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    11ce:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11d0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11d2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11d4:	af 98       	cbi	0x15, 7	; 21
			break;
    11d6:	1d c0       	rjmp	.+58     	; 0x1212 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    11d8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11da:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    11dc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11de:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11e0:	af 98       	cbi	0x15, 7	; 21
			break;
    11e2:	17 c0       	rjmp	.+46     	; 0x1212 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    11e4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    11e6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11e8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11ea:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ec:	af 98       	cbi	0x15, 7	; 21
			break;
    11ee:	11 c0       	rjmp	.+34     	; 0x1212 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    11f0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11f2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f4:	aa 98       	cbi	0x15, 2	; 21
			break;
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    11f8:	af 98       	cbi	0x15, 7	; 21
			break;
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    11fc:	aa 98       	cbi	0x15, 2	; 21
			break;
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1200:	de 98       	cbi	0x1b, 6	; 27
			break;
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1204:	df 98       	cbi	0x1b, 7	; 27
			break;
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    1208:	dd 98       	cbi	0x1b, 5	; 27
			break;
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    120c:	ad 98       	cbi	0x15, 5	; 21
			break;
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1210:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1212:	88 81       	ld	r24, Y
    1214:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <displaying_value>
	}
	
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <on_display>:
void on_display(disp_drv *DispD)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
	off_all_displays();
    1224:	0e 94 30 08 	call	0x1060	; 0x1060 <off_all_displays>
	display_set_value(DispD);
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	c1 39       	cpi	r28, 0x91	; 145
    1232:	d8 07       	cpc	r29, r24
    1234:	29 f4       	brne	.+10     	; 0x1240 <on_display+0x22>
	{
		LED_ON_DISP1;
    1236:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <DispD1+0x1>
    123e:	19 c0       	rjmp	.+50     	; 0x1272 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	cd 39       	cpi	r28, 0x9D	; 157
    1244:	d8 07       	cpc	r29, r24
    1246:	29 f4       	brne	.+10     	; 0x1252 <on_display+0x34>
	{
		LED_ON_DISP2;
    1248:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <DispD2+0x1>
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	cf 38       	cpi	r28, 0x8F	; 143
    1256:	d8 07       	cpc	r29, r24
    1258:	29 f4       	brne	.+10     	; 0x1264 <on_display+0x46>
	{
		LED_ON_DISP3;
    125a:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <DispD3+0x1>
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1264:	cb 59       	subi	r28, 0x9B	; 155
    1266:	d4 40       	sbci	r29, 0x04	; 4
    1268:	21 f4       	brne	.+8      	; 0x1272 <on_display+0x54>
	{
		LED_ON_DISP4;
    126a:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <DispD4+0x1>
	}
	#endif
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    1284:	c0 81       	ld	r28, Z
    1286:	d1 81       	ldd	r29, Z+1	; 0x01
    1288:	21 96       	adiw	r28, 0x01	; 1
    128a:	d1 83       	std	Z+1, r29	; 0x01
    128c:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    128e:	9e 01       	movw	r18, r28
    1290:	ad ec       	ldi	r26, 0xCD	; 205
    1292:	bc ec       	ldi	r27, 0xCC	; 204
    1294:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__umulhisi3>
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	9c 01       	movw	r18, r24
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	82 0f       	add	r24, r18
    12b8:	93 1f       	adc	r25, r19
    12ba:	c8 17       	cp	r28, r24
    12bc:	d9 07       	cpc	r29, r25
    12be:	01 f5       	brne	.+64     	; 0x1300 <display_process+0x88>
    12c0:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12c2:	10 91 31 02 	lds	r17, 0x0231	; 0x800231 <iteration>
    12c6:	14 30       	cpi	r17, 0x04	; 4
    12c8:	58 f4       	brcc	.+22     	; 0x12e0 <display_process+0x68>
			on_display(disp_tab[iteration]);
    12ca:	e1 2f       	mov	r30, r17
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ed 56       	subi	r30, 0x6D	; 109
    12d4:	fb 4f       	sbci	r31, 0xFB	; 251
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	0e 94 0f 09 	call	0x121e	; 0x121e <on_display>
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <display_process+0x6c>
		else
			off_all_displays();
    12e0:	0e 94 30 08 	call	0x1060	; 0x1060 <off_all_displays>
		iteration++;
    12e4:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    12e6:	15 30       	cpi	r17, 0x05	; 5
    12e8:	19 f0       	breq	.+6      	; 0x12f0 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    12ea:	10 93 31 02 	sts	0x0231, r17	; 0x800231 <iteration>
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    12f0:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    12f4:	c0 39       	cpi	r28, 0x90	; 144
    12f6:	d1 40       	sbci	r29, 0x01	; 1
    12f8:	19 f4       	brne	.+6      	; 0x1300 <display_process+0x88>
    12fa:	f7 01       	movw	r30, r14
    12fc:	11 82       	std	Z+1, r1	; 0x01
    12fe:	10 82       	st	Z, r1
	}
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	08 95       	ret

0000130c <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    130c:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    130e:	64 36       	cpi	r22, 0x64	; 100
    1310:	f8 f4       	brcc	.+62     	; 0x1350 <disp_set_number+0x44>
	else if (number == 0)
    1312:	61 11       	cpse	r22, r1
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    131c:	02 80       	ldd	r0, Z+2	; 0x02
    131e:	f3 81       	ldd	r31, Z+3	; 0x03
    1320:	e0 2d       	mov	r30, r0
    1322:	10 82       	st	Z, r1
    1324:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1326:	a0 81       	ld	r26, Z
    1328:	b1 81       	ldd	r27, Z+1	; 0x01
    132a:	9d ec       	ldi	r25, 0xCD	; 205
    132c:	69 9f       	mul	r22, r25
    132e:	91 2d       	mov	r25, r1
    1330:	11 24       	eor	r1, r1
    1332:	96 95       	lsr	r25
    1334:	96 95       	lsr	r25
    1336:	96 95       	lsr	r25
    1338:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    133a:	02 80       	ldd	r0, Z+2	; 0x02
    133c:	f3 81       	ldd	r31, Z+3	; 0x03
    133e:	e0 2d       	mov	r30, r0
    1340:	89 2f       	mov	r24, r25
    1342:	88 0f       	add	r24, r24
    1344:	98 2f       	mov	r25, r24
    1346:	99 0f       	add	r25, r25
    1348:	99 0f       	add	r25, r25
    134a:	89 0f       	add	r24, r25
    134c:	68 1b       	sub	r22, r24
    134e:	60 83       	st	Z, r22
    1350:	08 95       	ret

00001352 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1352:	fc 01       	movw	r30, r24
    1354:	60 83       	st	Z, r22
    1356:	08 95       	ret

00001358 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	39 f0       	breq	.+14     	; 0x136a <dip_set_value+0x12>
    135c:	18 f0       	brcs	.+6      	; 0x1364 <dip_set_value+0xc>
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	39 f0       	breq	.+14     	; 0x1370 <dip_set_value+0x18>
    1362:	08 95       	ret
    1364:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <motor_disp_value>
    1368:	08 95       	ret
    136a:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <servo_disp_value>
    136e:	08 95       	ret
    1370:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <servo_disp_value>
    1374:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <motor_disp_value>
    1378:	08 95       	ret

0000137a <disp_get_state>:
    137a:	88 23       	and	r24, r24
    137c:	19 f0       	breq	.+6      	; 0x1384 <disp_get_state+0xa>
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	29 f0       	breq	.+10     	; 0x138c <disp_get_state+0x12>
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <disp_get_state+0x1a>
    1384:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	08 95       	ret
    138c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	08 95       	ret
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	9f ef       	ldi	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <disp_disable_voltage>:
    139a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	21 f4       	brne	.+8      	; 0x13aa <disp_disable_voltage+0x10>
    13a2:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <disp1_last_state>
    13a6:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
    13aa:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    13ae:	86 30       	cpi	r24, 0x06	; 6
    13b0:	21 f4       	brne	.+8      	; 0x13ba <disp_disable_voltage+0x20>
    13b2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <disp2_last_state>
    13b6:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
    13ba:	08 95       	ret

000013bc <disp_set_state>:
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f0       	breq	.+40     	; 0x13e8 <disp_set_state+0x2c>
    13c0:	18 f0       	brcs	.+6      	; 0x13c8 <disp_set_state+0xc>
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	09 f1       	breq	.+66     	; 0x1408 <disp_set_state+0x4c>
    13c6:	08 95       	ret
    13c8:	66 30       	cpi	r22, 0x06	; 6
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <disp_set_state+0x18>
    13cc:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    13d0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <disp1_last_state>
    13d4:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    13d8:	86 30       	cpi	r24, 0x06	; 6
    13da:	19 f4       	brne	.+6      	; 0x13e2 <disp_set_state+0x26>
    13dc:	60 93 9f 04 	sts	0x049F, r22	; 0x80049f <disp1_last_state>
    13e0:	08 95       	ret
    13e2:	60 93 8e 04 	sts	0x048E, r22	; 0x80048e <segment1+0x4>
    13e6:	08 95       	ret
    13e8:	66 30       	cpi	r22, 0x06	; 6
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <disp_set_state+0x38>
    13ec:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    13f0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <disp2_last_state>
    13f4:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    13f8:	86 30       	cpi	r24, 0x06	; 6
    13fa:	19 f4       	brne	.+6      	; 0x1402 <disp_set_state+0x46>
    13fc:	60 93 a0 04 	sts	0x04A0, r22	; 0x8004a0 <disp2_last_state>
    1400:	08 95       	ret
    1402:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <segment2+0x4>
    1406:	08 95       	ret
    1408:	66 30       	cpi	r22, 0x06	; 6
    140a:	41 f4       	brne	.+16     	; 0x141c <disp_set_state+0x60>
    140c:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    1410:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <disp1_last_state>
    1414:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    1418:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <disp2_last_state>
    141c:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    1420:	86 30       	cpi	r24, 0x06	; 6
    1422:	29 f4       	brne	.+10     	; 0x142e <disp_set_state+0x72>
    1424:	60 93 a0 04 	sts	0x04A0, r22	; 0x8004a0 <disp2_last_state>
    1428:	60 93 9f 04 	sts	0x049F, r22	; 0x80049f <disp1_last_state>
    142c:	08 95       	ret
    142e:	60 93 8e 04 	sts	0x048E, r22	; 0x80048e <segment1+0x4>
    1432:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <segment2+0x4>
    1436:	08 95       	ret

00001438 <display_set_error>:
    1438:	95 e0       	ldi	r25, 0x05	; 5
    143a:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <segment1+0x4>
    143e:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <segment2+0x4>
    1442:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <error_reason>
    1446:	08 95       	ret

00001448 <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1448:	68 ef       	ldi	r22, 0xF8	; 248
    144a:	81 e9       	ldi	r24, 0x91	; 145
    144c:	94 e0       	ldi	r25, 0x04	; 4
    144e:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1452:	68 ef       	ldi	r22, 0xF8	; 248
    1454:	8d e9       	ldi	r24, 0x9D	; 157
    1456:	94 e0       	ldi	r25, 0x04	; 4
    1458:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    145c:	68 ef       	ldi	r22, 0xF8	; 248
    145e:	8f e8       	ldi	r24, 0x8F	; 143
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1466:	68 ef       	ldi	r22, 0xF8	; 248
    1468:	8b e9       	ldi	r24, 0x9B	; 155
    146a:	94 e0       	ldi	r25, 0x04	; 4
    146c:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
    1470:	08 95       	ret

00001472 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    1472:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
    1476:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
    147a:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
    147e:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
    1482:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <timer_disp_process.1979>
    1486:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <timer_disp_process.1979+0x1>
    148a:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <timer_disp_process.1979+0x2>
    148e:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <timer_disp_process.1979+0x3>
    1492:	48 17       	cp	r20, r24
    1494:	59 07       	cpc	r21, r25
    1496:	6a 07       	cpc	r22, r26
    1498:	7b 07       	cpc	r23, r27
    149a:	08 f0       	brcs	.+2      	; 0x149e <disp_process+0x2c>
    149c:	26 c1       	rjmp	.+588    	; 0x16ea <disp_process+0x278>
	{
        
        switch(segment1.state)
    149e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <disp_process+0x36>
    14a6:	59 c0       	rjmp	.+178    	; 0x155a <disp_process+0xe8>
    14a8:	30 f4       	brcc	.+12     	; 0x14b6 <disp_process+0x44>
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <disp_process+0x3e>
    14ae:	87 c0       	rjmp	.+270    	; 0x15be <disp_process+0x14c>
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	39 f1       	breq	.+78     	; 0x1502 <disp_process+0x90>
    14b4:	8e c0       	rjmp	.+284    	; 0x15d2 <disp_process+0x160>
    14b6:	85 30       	cpi	r24, 0x05	; 5
    14b8:	09 f4       	brne	.+2      	; 0x14bc <disp_process+0x4a>
    14ba:	74 c0       	rjmp	.+232    	; 0x15a4 <disp_process+0x132>
    14bc:	48 f1       	brcs	.+82     	; 0x1510 <disp_process+0x9e>
    14be:	86 30       	cpi	r24, 0x06	; 6
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <disp_process+0x52>
    14c2:	87 c0       	rjmp	.+270    	; 0x15d2 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14c4:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	48 ec       	ldi	r20, 0xC8	; 200
    14ce:	52 e4       	ldi	r21, 0x42	; 66
    14d0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    14d4:	0e 94 6f 19 	call	0x32de	; 0x32de <__fixsfsi>
    14d8:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <voltage+0x1>
    14dc:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <voltage>
            disp_set_number(&segment1, voltage/100);
    14e0:	9b 01       	movw	r18, r22
    14e2:	36 95       	lsr	r19
    14e4:	27 95       	ror	r18
    14e6:	36 95       	lsr	r19
    14e8:	27 95       	ror	r18
    14ea:	ab e7       	ldi	r26, 0x7B	; 123
    14ec:	b4 e1       	ldi	r27, 0x14	; 20
    14ee:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__umulhisi3>
    14f2:	96 95       	lsr	r25
    14f4:	87 95       	ror	r24
    14f6:	68 2f       	mov	r22, r24
    14f8:	8a e8       	ldi	r24, 0x8A	; 138
    14fa:	94 e0       	ldi	r25, 0x04	; 4
    14fc:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
            break;
    1500:	68 c0       	rjmp	.+208    	; 0x15d2 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1502:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <motor_disp_value>
    1506:	8a e8       	ldi	r24, 0x8A	; 138
    1508:	94 e0       	ldi	r25, 0x04	; 4
    150a:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
            break;
    150e:	61 c0       	rjmp	.+194    	; 0x15d2 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1510:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	31 f0       	breq	.+12     	; 0x1524 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
			    segment2.state = SEG_VALUE;
    151e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
                break;
    1522:	57 c0       	rjmp	.+174    	; 0x15d2 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1524:	48 51       	subi	r20, 0x18	; 24
    1526:	5c 4f       	sbci	r21, 0xFC	; 252
    1528:	6f 4f       	sbci	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <timer_disp_process.1979>
    1530:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <timer_disp_process.1979+0x1>
    1534:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <timer_disp_process.1979+0x2>
    1538:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    153c:	83 e7       	ldi	r24, 0x73	; 115
    153e:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <DispD2>
			DispD1.value = 'a';
    1542:	81 e6       	ldi	r24, 0x61	; 97
    1544:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <DispD1>
			DispD3.value = 'p';
    1548:	80 e7       	ldi	r24, 0x70	; 112
    154a:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <DispD3>
			segment1.state = SEG_VALUE;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
			segment2.state = SEG_VALUE;
    1554:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
			return;
    1558:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    155a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	31 f0       	breq	.+12     	; 0x156e <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    1568:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
                break;
    156c:	32 c0       	rjmp	.+100    	; 0x15d2 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    156e:	48 51       	subi	r20, 0x18	; 24
    1570:	5c 4f       	sbci	r21, 0xFC	; 252
    1572:	6f 4f       	sbci	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <timer_disp_process.1979>
    157a:	50 93 37 02 	sts	0x0237, r21	; 0x800237 <timer_disp_process.1979+0x1>
    157e:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <timer_disp_process.1979+0x2>
    1582:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    1586:	8c e6       	ldi	r24, 0x6C	; 108
    1588:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <DispD2>
			DispD1.value = 'o';
    158c:	8f e6       	ldi	r24, 0x6F	; 111
    158e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <DispD1>
			DispD3.value = 'p';
    1592:	80 e7       	ldi	r24, 0x70	; 112
    1594:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <DispD3>
			segment1.state = SEG_VALUE;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <segment1+0x4>
			segment2.state = SEG_VALUE;
    159e:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <segment2+0x4>
            break;
    15a2:	17 c0       	rjmp	.+46     	; 0x15d2 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15a4:	85 e6       	ldi	r24, 0x65	; 101
    15a6:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <DispD2>
			DispD1.value = 'r';
    15aa:	82 e7       	ldi	r24, 0x72	; 114
    15ac:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <DispD1>
			disp_set_number(&segment2, error_reason);
    15b0:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <error_reason>
    15b4:	85 e8       	ldi	r24, 0x85	; 133
    15b6:	94 e0       	ldi	r25, 0x04	; 4
    15b8:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
            break;
    15bc:	0a c0       	rjmp	.+20     	; 0x15d2 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15be:	68 ef       	ldi	r22, 0xF8	; 248
    15c0:	81 e9       	ldi	r24, 0x91	; 145
    15c2:	94 e0       	ldi	r25, 0x04	; 4
    15c4:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    15c8:	68 ef       	ldi	r22, 0xF8	; 248
    15ca:	8d e9       	ldi	r24, 0x9D	; 157
    15cc:	94 e0       	ldi	r25, 0x04	; 4
    15ce:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    15d2:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	19 f1       	breq	.+70     	; 0x1620 <disp_process+0x1ae>
    15da:	48 f1       	brcs	.+82     	; 0x162e <disp_process+0x1bc>
    15dc:	86 30       	cpi	r24, 0x06	; 6
    15de:	19 f0       	breq	.+6      	; 0x15e6 <disp_process+0x174>
    15e0:	8d 30       	cpi	r24, 0x0D	; 13
    15e2:	81 f1       	breq	.+96     	; 0x1644 <disp_process+0x1d2>
    15e4:	6f c0       	rjmp	.+222    	; 0x16c4 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    15e6:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <voltage>
    15ea:	50 91 46 02 	lds	r21, 0x0246	; 0x800246 <voltage+0x1>
    15ee:	9a 01       	movw	r18, r20
    15f0:	36 95       	lsr	r19
    15f2:	27 95       	ror	r18
    15f4:	36 95       	lsr	r19
    15f6:	27 95       	ror	r18
    15f8:	ab e7       	ldi	r26, 0x7B	; 123
    15fa:	b4 e1       	ldi	r27, 0x14	; 20
    15fc:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__umulhisi3>
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	64 e6       	ldi	r22, 0x64	; 100
    1606:	68 9f       	mul	r22, r24
    1608:	90 01       	movw	r18, r0
    160a:	69 9f       	mul	r22, r25
    160c:	30 0d       	add	r19, r0
    160e:	11 24       	eor	r1, r1
    1610:	ba 01       	movw	r22, r20
    1612:	62 1b       	sub	r22, r18
    1614:	73 0b       	sbc	r23, r19
    1616:	85 e8       	ldi	r24, 0x85	; 133
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
            break;
    161e:	52 c0       	rjmp	.+164    	; 0x16c4 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1620:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <servo_disp_value>
    1624:	85 e8       	ldi	r24, 0x85	; 133
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
            break;
    162c:	4b c0       	rjmp	.+150    	; 0x16c4 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    162e:	68 ef       	ldi	r22, 0xF8	; 248
    1630:	8f e8       	ldi	r24, 0x8F	; 143
    1632:	94 e0       	ldi	r25, 0x04	; 4
    1634:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1638:	68 ef       	ldi	r22, 0xF8	; 248
    163a:	8b e9       	ldi	r24, 0x9B	; 155
    163c:	94 e0       	ldi	r25, 0x04	; 4
    163e:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
            break;
    1642:	40 c0       	rjmp	.+128    	; 0x16c4 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1644:	44 ef       	ldi	r20, 0xF4	; 244
    1646:	51 e0       	ldi	r21, 0x01	; 1
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 e4       	ldi	r24, 0x40	; 64
    164e:	92 e0       	ldi	r25, 0x02	; 2
    1650:	0e 94 01 18 	call	0x3002	; 0x3002 <evTime_process_period>
    1654:	89 2b       	or	r24, r25
    1656:	b1 f1       	breq	.+108    	; 0x16c4 <disp_process+0x252>
			{
				if (blink_state == 0)
    1658:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <blink_state>
    165c:	81 11       	cpse	r24, r1
    165e:	0e c0       	rjmp	.+28     	; 0x167c <disp_process+0x20a>
				{
					blink_state = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1666:	67 ef       	ldi	r22, 0xF7	; 247
    1668:	8f e8       	ldi	r24, 0x8F	; 143
    166a:	94 e0       	ldi	r25, 0x04	; 4
    166c:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    1670:	67 ef       	ldi	r22, 0xF7	; 247
    1672:	8b e9       	ldi	r24, 0x9B	; 155
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
    167a:	24 c0       	rjmp	.+72     	; 0x16c4 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    167c:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <blink_state>
					if (blink_cnt == 0) 
    1680:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <blink_cnt>
    1684:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <blink_cnt+0x1>
    1688:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <blink_cnt+0x2>
    168c:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <blink_cnt+0x3>
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	29 f4       	brne	.+10     	; 0x16a2 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
						break;
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <disp_process+0x252>
					}
					blink_cnt--;
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	a1 09       	sbc	r26, r1
    16a6:	b1 09       	sbc	r27, r1
    16a8:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <blink_cnt>
    16ac:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <blink_cnt+0x1>
    16b0:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <blink_cnt+0x2>
    16b4:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16b8:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <second_disp_blink_val>
    16bc:	85 e8       	ldi	r24, 0x85	; 133
    16be:	94 e0       	ldi	r25, 0x04	; 4
    16c0:	0e 94 86 09 	call	0x130c	; 0x130c <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16c4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer_disp_process.1979>
    16c8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer_disp_process.1979+0x1>
    16cc:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer_disp_process.1979+0x2>
    16d0:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer_disp_process.1979+0x3>
    16d4:	c2 96       	adiw	r24, 0x32	; 50
    16d6:	a1 1d       	adc	r26, r1
    16d8:	b1 1d       	adc	r27, r1
    16da:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer_disp_process.1979>
    16de:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer_disp_process.1979+0x1>
    16e2:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer_disp_process.1979+0x2>
    16e6:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer_disp_process.1979+0x3>
    16ea:	08 95       	ret

000016ec <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    16f0:	00 91 b2 04 	lds	r16, 0x04B2	; 0x8004b2 <mktime+0x2>
    16f4:	10 91 b3 04 	lds	r17, 0x04B3	; 0x8004b3 <mktime+0x3>
    16f8:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <mktime+0x4>
    16fc:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <mktime+0x5>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	80 0f       	add	r24, r16
    1706:	91 1f       	adc	r25, r17
    1708:	a2 1f       	adc	r26, r18
    170a:	b3 1f       	adc	r27, r19
    170c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <animation_time>
    1710:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <animation_time+0x1>
    1714:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <animation_time+0x2>
    1718:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    171c:	62 e0       	ldi	r22, 0x02	; 2
    171e:	84 2f       	mov	r24, r20
    1720:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
}
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	08 95       	ret

0000172a <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    172a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	29 f0       	breq	.+10     	; 0x173c <animation+0x12>
    1732:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	09 f0       	breq	.+2      	; 0x173c <animation+0x12>
    173a:	78 c0       	rjmp	.+240    	; 0x182c <animation+0x102>
    173c:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    1740:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    1744:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    1748:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    174c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timer_anim.1999>
    1750:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <timer_anim.1999+0x1>
    1754:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <timer_anim.1999+0x2>
    1758:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <timer_anim.1999+0x3>
    175c:	84 17       	cp	r24, r20
    175e:	95 07       	cpc	r25, r21
    1760:	a6 07       	cpc	r26, r22
    1762:	b7 07       	cpc	r27, r23
    1764:	08 f0       	brcs	.+2      	; 0x1768 <animation+0x3e>
    1766:	62 c0       	rjmp	.+196    	; 0x182c <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1768:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
    176c:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
    1770:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
    1774:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
    1778:	81 55       	subi	r24, 0x51	; 81
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	af 4f       	sbci	r26, 0xFF	; 255
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <timer_anim.1999>
    1784:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <timer_anim.1999+0x1>
    1788:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <timer_anim.1999+0x2>
    178c:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    1790:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <segment1+0x4>
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	61 f4       	brne	.+24     	; 0x17b0 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    1798:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <anim_iteration.2000>
    179c:	81 e9       	ldi	r24, 0x91	; 145
    179e:	94 e0       	ldi	r25, 0x04	; 4
    17a0:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17a4:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <anim_iteration.2000>
    17a8:	8d e9       	ldi	r24, 0x9D	; 157
    17aa:	94 e0       	ldi	r25, 0x04	; 4
    17ac:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17b0:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <segment2+0x4>
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	61 f4       	brne	.+24     	; 0x17d0 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17b8:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <anim_iteration2.2001>
    17bc:	8f e8       	ldi	r24, 0x8F	; 143
    17be:	94 e0       	ldi	r25, 0x04	; 4
    17c0:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17c4:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <anim_iteration2.2001>
    17c8:	8b e9       	ldi	r24, 0x9B	; 155
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	0e 94 a9 09 	call	0x1352	; 0x1352 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    17d0:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    17d4:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    17d8:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    17dc:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    17e0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <animation_time>
    17e4:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <animation_time+0x1>
    17e8:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <animation_time+0x2>
    17ec:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <animation_time+0x3>
    17f0:	84 17       	cp	r24, r20
    17f2:	95 07       	cpc	r25, r21
    17f4:	a6 07       	cpc	r26, r22
    17f6:	b7 07       	cpc	r27, r23
    17f8:	28 f4       	brcc	.+10     	; 0x1804 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
			LED_ACUM_OFF;
    1802:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1804:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <anim_iteration.2000>
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <anim_iteration.2000>
		anim_iteration2--;
    180e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <anim_iteration2.2001>
    1812:	81 50       	subi	r24, 0x01	; 1
    1814:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    1818:	9f 3f       	cpi	r25, 0xFF	; 255
    181a:	19 f4       	brne	.+6      	; 0x1822 <animation+0xf8>
    181c:	99 ef       	ldi	r25, 0xF9	; 249
    181e:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1822:	88 3f       	cpi	r24, 0xF8	; 248
    1824:	19 f4       	brne	.+6      	; 0x182c <animation+0x102>
    1826:	8e ef       	ldi	r24, 0xFE	; 254
    1828:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <anim_iteration2.2001>
    182c:	08 95       	ret

0000182e <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    182e:	e1 99       	sbic	0x1c, 1	; 28
    1830:	fe cf       	rjmp	.-4      	; 0x182e <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1832:	9f bb       	out	0x1f, r25	; 31
    1834:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1836:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1838:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    183a:	e1 9a       	sbi	0x1c, 1	; 28
    183c:	08 95       	ret

0000183e <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    183e:	e1 99       	sbic	0x1c, 1	; 28
    1840:	fe cf       	rjmp	.-4      	; 0x183e <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1842:	9f bb       	out	0x1f, r25	; 31
    1844:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1846:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1848:	8d b3       	in	r24, 0x1d	; 29
    184a:	08 95       	ret

0000184c <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    184c:	cf 93       	push	r28
    184e:	c8 2f       	mov	r28, r24
    1850:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    1854:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    1858:	82 60       	ori	r24, 0x02	; 2
    185a:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    185e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    1862:	8c 2f       	mov	r24, r28
    1864:	0e 94 1c 0a 	call	0x1438	; 0x1438 <display_set_error>
    1868:	0e 94 9f 07 	call	0xf3e	; 0xf3e <dcmotor_set_error>
    186c:	c1 30       	cpi	r28, 0x01	; 1
    186e:	21 f4       	brne	.+8      	; 0x1878 <set_error_state+0x2c>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <servo_error>
    1876:	03 c0       	rjmp	.+6      	; 0x187e <set_error_state+0x32>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <servo_error>
    187e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <system_error>
    1882:	c0 93 a1 04 	sts	0x04A1, r28	; 0x8004a1 <led_blink>
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <error_init>:
    188a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <error_motor_state>
    188e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <error_motor_last_state>
    1892:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_status>
    1896:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <error_servo_status>
    189a:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <error_servo_state>
    189e:	8b e6       	ldi	r24, 0x6B	; 107
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <evTime_off>
    18a6:	8b e5       	ldi	r24, 0x5B	; 91
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 f7 17 	call	0x2fee	; 0x2fee <evTime_off>
    18ae:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <led_blink>
    18b2:	08 95       	ret

000018b4 <error_deinit>:
    18b4:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <error_motor_state>
    18b8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <error_motor_last_state>
    18bc:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_status>
    18c0:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <error_servo_status>
    18c4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <error_servo_state>
    18c8:	8b e6       	ldi	r24, 0x6B	; 107
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <evTime_off>
    18d0:	8b e5       	ldi	r24, 0x5B	; 91
    18d2:	92 e0       	ldi	r25, 0x02	; 2
    18d4:	0e 94 f7 17 	call	0x2fee	; 0x2fee <evTime_off>
    18d8:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <led_blink>
    18dc:	08 95       	ret

000018de <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    18de:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
    18e2:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
    18e6:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
    18ea:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
    18ee:	80 53       	subi	r24, 0x30	; 48
    18f0:	98 4f       	sbci	r25, 0xF8	; 248
    18f2:	af 4f       	sbci	r26, 0xFF	; 255
    18f4:	bf 4f       	sbci	r27, 0xFF	; 255
    18f6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <error_servo_tim>
    18fa:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <error_servo_tim+0x1>
    18fe:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <error_servo_tim+0x2>
    1902:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <error_servo_tim+0x3>
    1906:	08 95       	ret

00001908 <error_event>:
}

void error_event(void)
{
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1920:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    1924:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    1928:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    192c:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    1930:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <error_event_timer.2077>
    1934:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <error_event_timer.2077+0x1>
    1938:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <error_event_timer.2077+0x2>
    193c:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <error_event_timer.2077+0x3>
    1940:	84 17       	cp	r24, r20
    1942:	95 07       	cpc	r25, r21
    1944:	a6 07       	cpc	r26, r22
    1946:	b7 07       	cpc	r27, r23
    1948:	08 f0       	brcs	.+2      	; 0x194c <error_event+0x44>
    194a:	47 c2       	rjmp	.+1166   	; 0x1dda <error_event+0x4d2>
    194c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    1950:	80 ff       	sbrs	r24, 0
    1952:	43 c2       	rjmp	.+1158   	; 0x1dda <error_event+0x4d2>
	{
		error_event_timer = mktime.ms + 250;
    1954:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    1958:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    195c:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    1960:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    1964:	46 50       	subi	r20, 0x06	; 6
    1966:	5f 4f       	sbci	r21, 0xFF	; 255
    1968:	6f 4f       	sbci	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <error_event_timer.2077>
    1970:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <error_event_timer.2077+0x1>
    1974:	60 93 55 02 	sts	0x0255, r22	; 0x800255 <error_event_timer.2077+0x2>
    1978:	70 93 56 02 	sts	0x0256, r23	; 0x800256 <error_event_timer.2077+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    197c:	81 fd       	sbrc	r24, 1
    197e:	2d c2       	rjmp	.+1114   	; 0x1dda <error_event+0x4d2>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    1980:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    1984:	4b 01       	movw	r8, r22
    1986:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1988:	0e 94 9b 07 	call	0xf36	; 0xf36 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    198c:	bc 01       	movw	r22, r24
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
    1996:	6b 01       	movw	r12, r22
    1998:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    199a:	25 e9       	ldi	r18, 0x95	; 149
    199c:	35 e6       	ldi	r19, 0x65	; 101
    199e:	40 ed       	ldi	r20, 0xD0	; 208
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 c9 1a 	call	0x3592	; 0x3592 <pow>
    19a6:	2b 01       	movw	r4, r22
    19a8:	3c 01       	movw	r6, r24
    19aa:	a7 01       	movw	r20, r14
    19ac:	96 01       	movw	r18, r12
    19ae:	c5 01       	movw	r24, r10
    19b0:	b4 01       	movw	r22, r8
    19b2:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	48 ec       	ldi	r20, 0xC8	; 200
    19bc:	52 e4       	ldi	r21, 0x42	; 66
    19be:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    19c2:	4b 01       	movw	r8, r22
    19c4:	5c 01       	movw	r10, r24
    19c6:	23 e3       	ldi	r18, 0x33	; 51
    19c8:	33 e3       	ldi	r19, 0x33	; 51
    19ca:	43 e6       	ldi	r20, 0x63	; 99
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	c7 01       	movw	r24, r14
    19d0:	b6 01       	movw	r22, r12
    19d2:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	48 ec       	ldi	r20, 0xC8	; 200
    19dc:	52 e4       	ldi	r21, 0x42	; 66
    19de:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	c5 01       	movw	r24, r10
    19e8:	b4 01       	movw	r22, r8
    19ea:	0e 94 90 18 	call	0x3120	; 0x3120 <__subsf3>
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e4       	ldi	r20, 0x40	; 64
    19f4:	50 e4       	ldi	r21, 0x40	; 64
    19f6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    19fa:	4b 01       	movw	r8, r22
    19fc:	5c 01       	movw	r10, r24
    19fe:	28 e5       	ldi	r18, 0x58	; 88
    1a00:	39 e3       	ldi	r19, 0x39	; 57
    1a02:	44 e3       	ldi	r20, 0x34	; 52
    1a04:	5c e3       	ldi	r21, 0x3C	; 60
    1a06:	c3 01       	movw	r24, r6
    1a08:	b2 01       	movw	r22, r4
    1a0a:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	c5 01       	movw	r24, r10
    1a14:	b4 01       	movw	r22, r8
    1a16:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    1a1a:	4b 01       	movw	r8, r22
    1a1c:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a24:	68 2f       	mov	r22, r24
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	62 53       	subi	r22, 0x32	; 50
    1a2a:	71 09       	sbc	r23, r1
    1a2c:	07 2e       	mov	r0, r23
    1a2e:	00 0c       	add	r0, r0
    1a30:	88 0b       	sbc	r24, r24
    1a32:	99 0b       	sbc	r25, r25
    1a34:	0e 94 a7 19 	call	0x334e	; 0x334e <__floatsisf>
    1a38:	a7 01       	movw	r20, r14
    1a3a:	96 01       	movw	r18, r12
    1a3c:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	48 ec       	ldi	r20, 0xC8	; 200
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    1a4c:	a5 01       	movw	r20, r10
    1a4e:	94 01       	movw	r18, r8
    1a50:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    1a54:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <motor_error_value>
    1a58:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <motor_error_value+0x1>
    1a5c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <motor_error_value+0x2>
    1a60:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 86 10 	call	0x210c	; 0x210c <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1a6a:	42 e0       	ldi	r20, 0x02	; 2
    1a6c:	5b e2       	ldi	r21, 0x2B	; 43
    1a6e:	67 e0       	ldi	r22, 0x07	; 7
    1a70:	7d e3       	ldi	r23, 0x3D	; 61
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 9f 10 	call	0x213e	; 0x213e <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1a78:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <motor_error_value>
    1a7c:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <motor_error_value+0x1>
    1a80:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <motor_error_value+0x2>
    1a84:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <motor_error_value+0x3>
    1a88:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__gesf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	44 f4       	brge	.+16     	; 0x1aa0 <error_event+0x198>
    1a90:	0e 94 56 07 	call	0xeac	; 0xeac <dcmotor_is_on>
    1a94:	89 2b       	or	r24, r25
    1a96:	21 f0       	breq	.+8      	; 0x1aa0 <error_event+0x198>
		{
			error_motor_status = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_status>
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1aa0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR))
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <error_event+0x1a8>
    1aae:	d2 c0       	rjmp	.+420    	; 0x1c54 <error_event+0x34c>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1ab0:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <error_motor_status>
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <error_event+0x1b2>
    1ab8:	88 c0       	rjmp	.+272    	; 0x1bca <error_event+0x2c2>
			{
				switch(error_motor_state)
    1aba:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <error_motor_state>
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <error_event+0x1bc>
    1ac2:	60 c0       	rjmp	.+192    	; 0x1b84 <error_event+0x27c>
    1ac4:	28 f4       	brcc	.+10     	; 0x1ad0 <error_event+0x1c8>
    1ac6:	88 23       	and	r24, r24
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <error_event+0x1d6>
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	69 f1       	breq	.+90     	; 0x1b28 <error_event+0x220>
    1ace:	c2 c0       	rjmp	.+388    	; 0x1c54 <error_event+0x34c>
    1ad0:	83 30       	cpi	r24, 0x03	; 3
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <error_event+0x1ce>
    1ad4:	62 c0       	rjmp	.+196    	; 0x1b9a <error_event+0x292>
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <error_event+0x1d4>
    1ada:	63 c0       	rjmp	.+198    	; 0x1ba2 <error_event+0x29a>
    1adc:	bb c0       	rjmp	.+374    	; 0x1c54 <error_event+0x34c>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1ae4:	0e 94 9b 07 	call	0xf36	; 0xf36 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1ae8:	2e e1       	ldi	r18, 0x1E	; 30
    1aea:	ac 01       	movw	r20, r24
    1aec:	24 9f       	mul	r18, r20
    1aee:	c0 01       	movw	r24, r0
    1af0:	25 9f       	mul	r18, r21
    1af2:	90 0d       	add	r25, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	48 e8       	ldi	r20, 0x88	; 136
    1af8:	53 e1       	ldi	r21, 0x13	; 19
    1afa:	7a 01       	movw	r14, r20
    1afc:	e8 1a       	sub	r14, r24
    1afe:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b00:	ff 92       	push	r15
    1b02:	ef 92       	push	r14
    1b04:	84 ef       	ldi	r24, 0xF4	; 244
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b10:	a7 01       	movw	r20, r14
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	8b e6       	ldi	r24, 0x6B	; 107
    1b18:	92 e0       	ldi	r25, 0x02	; 2
    1b1a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
					break;
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	96 c0       	rjmp	.+300    	; 0x1c54 <error_event+0x34c>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b28:	8b e6       	ldi	r24, 0x6B	; 107
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1b30:	89 2b       	or	r24, r25
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <error_event+0x22e>
    1b34:	8f c0       	rjmp	.+286    	; 0x1c54 <error_event+0x34c>
						{
							dcmotor_set_try();
    1b36:	0e 94 ad 07 	call	0xf5a	; 0xf5a <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b3a:	0e 94 9b 07 	call	0xf36	; 0xf36 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b3e:	2e e1       	ldi	r18, 0x1E	; 30
    1b40:	ac 01       	movw	r20, r24
    1b42:	24 9f       	mul	r18, r20
    1b44:	c0 01       	movw	r24, r0
    1b46:	25 9f       	mul	r18, r21
    1b48:	90 0d       	add	r25, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	48 e8       	ldi	r20, 0x88	; 136
    1b4e:	53 e1       	ldi	r21, 0x13	; 19
    1b50:	7a 01       	movw	r14, r20
    1b52:	e8 1a       	sub	r14, r24
    1b54:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b56:	ff 92       	push	r15
    1b58:	ef 92       	push	r14
    1b5a:	83 e1       	ldi	r24, 0x13	; 19
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	9f 93       	push	r25
    1b60:	8f 93       	push	r24
    1b62:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b66:	a7 01       	movw	r20, r14
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	8b e6       	ldi	r24, 0x6B	; 107
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	68 c0       	rjmp	.+208    	; 0x1c54 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1b84:	8b e6       	ldi	r24, 0x6B	; 107
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1b8c:	89 2b       	or	r24, r25
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <error_event+0x28a>
    1b90:	61 c0       	rjmp	.+194    	; 0x1c54 <error_event+0x34c>
						{
							error_motor_state = ERR_M_ERROR;
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
    1b98:	5d c0       	rjmp	.+186    	; 0x1c54 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 26 0c 	call	0x184c	; 0x184c <set_error_state>
					break;
    1ba0:	59 c0       	rjmp	.+178    	; 0x1c54 <error_event+0x34c>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1ba2:	8b e6       	ldi	r24, 0x6B	; 107
    1ba4:	92 e0       	ldi	r25, 0x02	; 2
    1ba6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1baa:	89 2b       	or	r24, r25
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <error_event+0x2a8>
    1bae:	52 c0       	rjmp	.+164    	; 0x1c54 <error_event+0x34c>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bb0:	40 ed       	ldi	r20, 0xD0	; 208
    1bb2:	57 e0       	ldi	r21, 0x07	; 7
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	8b e6       	ldi	r24, 0x6B	; 107
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
							error_motor_state = error_motor_last_state;
    1bc0:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <error_motor_last_state>
    1bc4:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
    1bc8:	45 c0       	rjmp	.+138    	; 0x1c54 <error_event+0x34c>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1bca:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <error_motor_state>
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	f1 f0       	breq	.+60     	; 0x1c0e <error_event+0x306>
    1bd2:	18 f4       	brcc	.+6      	; 0x1bda <error_event+0x2d2>
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	31 f0       	breq	.+12     	; 0x1be4 <error_event+0x2dc>
    1bd8:	3d c0       	rjmp	.+122    	; 0x1c54 <error_event+0x34c>
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	79 f1       	breq	.+94     	; 0x1c3c <error_event+0x334>
    1bde:	84 30       	cpi	r24, 0x04	; 4
    1be0:	89 f1       	breq	.+98     	; 0x1c44 <error_event+0x33c>
    1be2:	38 c0       	rjmp	.+112    	; 0x1c54 <error_event+0x34c>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1be4:	8b e6       	ldi	r24, 0x6B	; 107
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1bec:	89 2b       	or	r24, r25
    1bee:	91 f1       	breq	.+100    	; 0x1c54 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bf0:	40 ed       	ldi	r20, 0xD0	; 208
    1bf2:	57 e0       	ldi	r21, 0x07	; 7
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	8b e6       	ldi	r24, 0x6B	; 107
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c00:	84 e0       	ldi	r24, 0x04	; 4
    1c02:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <error_motor_last_state>
    1c0c:	23 c0       	rjmp	.+70     	; 0x1c54 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c0e:	8b e6       	ldi	r24, 0x6B	; 107
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1c16:	89 2b       	or	r24, r25
    1c18:	e9 f0       	breq	.+58     	; 0x1c54 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c1a:	40 ed       	ldi	r20, 0xD0	; 208
    1c1c:	57 e0       	ldi	r21, 0x07	; 7
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	8b e6       	ldi	r24, 0x6B	; 107
    1c24:	92 e0       	ldi	r25, 0x02	; 2
    1c26:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
						dcmotor_set_normal_state();
    1c2a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <error_motor_last_state>
    1c3a:	0c c0       	rjmp	.+24     	; 0x1c54 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	0e 94 26 0c 	call	0x184c	; 0x184c <set_error_state>
					break;
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <error_event+0x34c>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c44:	8b e6       	ldi	r24, 0x6B	; 107
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1c4c:	89 2b       	or	r24, r25
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <error_event+0x34c>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1c50:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <error_event+0x358>
    1c5e:	bd c0       	rjmp	.+378    	; 0x1dda <error_event+0x4d2>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <servo_error_value+0x1>
    1c6c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 86 10 	call	0x210c	; 0x210c <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1c76:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <servo_error_value>
    1c7a:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <servo_error_value+0x1>
    1c7e:	28 17       	cp	r18, r24
    1c80:	39 07       	cpc	r19, r25
    1c82:	20 f5       	brcc	.+72     	; 0x1ccc <error_event+0x3c4>
    1c84:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    1c88:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    1c8c:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    1c90:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    1c94:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <error_servo_tim>
    1c98:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <error_servo_tim+0x1>
    1c9c:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <error_servo_tim+0x2>
    1ca0:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <error_servo_tim+0x3>
    1ca4:	84 17       	cp	r24, r20
    1ca6:	95 07       	cpc	r25, r21
    1ca8:	a6 07       	cpc	r26, r22
    1caa:	b7 07       	cpc	r27, r23
    1cac:	78 f4       	brcc	.+30     	; 0x1ccc <error_event+0x3c4>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1cb4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <error_servo_state>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	51 f1       	breq	.+84     	; 0x1d10 <error_event+0x408>
    1cbc:	a8 f0       	brcs	.+42     	; 0x1ce8 <error_event+0x3e0>
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <error_event+0x3bc>
    1cc2:	4b c0       	rjmp	.+150    	; 0x1d5a <error_event+0x452>
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <error_event+0x3c2>
    1cc8:	51 c0       	rjmp	.+162    	; 0x1d6c <error_event+0x464>
    1cca:	87 c0       	rjmp	.+270    	; 0x1dda <error_event+0x4d2>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1ccc:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1cd0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <error_servo_state>
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <error_event+0x3d2>
    1cd8:	66 c0       	rjmp	.+204    	; 0x1da6 <error_event+0x49e>
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <error_event+0x3d8>
    1cde:	7a c0       	rjmp	.+244    	; 0x1dd4 <error_event+0x4cc>
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <error_event+0x3de>
    1ce4:	7a c0       	rjmp	.+244    	; 0x1dda <error_event+0x4d2>
    1ce6:	46 c0       	rjmp	.+140    	; 0x1d74 <error_event+0x46c>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1cee:	87 e3       	ldi	r24, 0x37	; 55
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	9f 93       	push	r25
    1cf4:	8f 93       	push	r24
    1cf6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1cfa:	4c ed       	ldi	r20, 0xDC	; 220
    1cfc:	55 e0       	ldi	r21, 0x05	; 5
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	8b e5       	ldi	r24, 0x5B	; 91
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
					break;
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	65 c0       	rjmp	.+202    	; 0x1dda <error_event+0x4d2>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d10:	8b e5       	ldi	r24, 0x5B	; 91
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1d18:	89 2b       	or	r24, r25
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <error_event+0x416>
    1d1c:	5e c0       	rjmp	.+188    	; 0x1dda <error_event+0x4d2>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1d1e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <servo_get_try_cnt>
    1d22:	04 97       	sbiw	r24, 0x04	; 4
    1d24:	24 f0       	brlt	.+8      	; 0x1d2e <error_event+0x426>
							{
								error_servo_state = ERR_S_ERROR;
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <error_servo_state>
								break;
    1d2c:	56 c0       	rjmp	.+172    	; 0x1dda <error_event+0x4d2>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1d2e:	40 ed       	ldi	r20, 0xD0	; 208
    1d30:	57 e0       	ldi	r21, 0x07	; 7
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	8b e5       	ldi	r24, 0x5B	; 91
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
							error_servo_state = ERR_S_TRY;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <error_servo_state>
							servo_enable_try();
    1d44:	0e 94 47 12 	call	0x248e	; 0x248e <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1d48:	82 e5       	ldi	r24, 0x52	; 82
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	9f 93       	push	r25
    1d4e:	8f 93       	push	r24
    1d50:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	40 c0       	rjmp	.+128    	; 0x1dda <error_event+0x4d2>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1d5a:	8b e5       	ldi	r24, 0x5B	; 91
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1d62:	89 2b       	or	r24, r25
    1d64:	d1 f1       	breq	.+116    	; 0x1dda <error_event+0x4d2>
						{
							error_servo_state = ERR_S_OK;
    1d66:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <error_servo_state>
    1d6a:	37 c0       	rjmp	.+110    	; 0x1dda <error_event+0x4d2>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1d6c:	82 e0       	ldi	r24, 0x02	; 2
    1d6e:	0e 94 26 0c 	call	0x184c	; 0x184c <set_error_state>
					break;
    1d72:	33 c0       	rjmp	.+102    	; 0x1dda <error_event+0x4d2>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1d74:	8b e5       	ldi	r24, 0x5B	; 91
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1d7c:	89 2b       	or	r24, r25
    1d7e:	69 f1       	breq	.+90     	; 0x1dda <error_event+0x4d2>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1d80:	40 ed       	ldi	r20, 0xD0	; 208
    1d82:	57 e0       	ldi	r21, 0x07	; 7
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	8b e5       	ldi	r24, 0x5B	; 91
    1d8a:	92 e0       	ldi	r25, 0x02	; 2
    1d8c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
						error_servo_state = ERR_M_OK;
    1d90:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1d94:	8c e6       	ldi	r24, 0x6C	; 108
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	9f 93       	push	r25
    1d9a:	8f 93       	push	r24
    1d9c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	1a c0       	rjmp	.+52     	; 0x1dda <error_event+0x4d2>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1da6:	8b e5       	ldi	r24, 0x5B	; 91
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    1dae:	89 2b       	or	r24, r25
    1db0:	a1 f0       	breq	.+40     	; 0x1dda <error_event+0x4d2>
					{
						error_servo_state = ERR_S_OK;
    1db2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1db6:	8c e6       	ldi	r24, 0x6C	; 108
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1dc2:	6c ea       	ldi	r22, 0xAC	; 172
    1dc4:	7d e0       	ldi	r23, 0x0D	; 13
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 c9 12 	call	0x2592	; 0x2592 <servo_try_reset_timeout>
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	03 c0       	rjmp	.+6      	; 0x1dda <error_event+0x4d2>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	0e 94 26 0c 	call	0x184c	; 0x184c <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	9f 90       	pop	r9
    1de8:	8f 90       	pop	r8
    1dea:	7f 90       	pop	r7
    1dec:	6f 90       	pop	r6
    1dee:	5f 90       	pop	r5
    1df0:	4f 90       	pop	r4
    1df2:	08 95       	ret

00001df4 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1df4:	4e e5       	ldi	r20, 0x5E	; 94
    1df6:	51 e0       	ldi	r21, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	8e e4       	ldi	r24, 0x4E	; 78
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	0e 94 01 18 	call	0x3002	; 0x3002 <evTime_process_period>
    1e04:	89 2b       	or	r24, r25
    1e06:	09 f1       	breq	.+66     	; 0x1e4a <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e08:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <led_blink>
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	71 f4       	brne	.+28     	; 0x1e2c <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e10:	92 b3       	in	r25, 0x12	; 18
    1e12:	80 e1       	ldi	r24, 0x10	; 16
    1e14:	89 27       	eor	r24, r25
    1e16:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e18:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    1e1c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    1e20:	90 62       	ori	r25, 0x20	; 32
    1e22:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    1e26:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    1e2a:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	69 f4       	brne	.+26     	; 0x1e4a <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1e30:	92 b3       	in	r25, 0x12	; 18
    1e32:	80 e4       	ldi	r24, 0x40	; 64
    1e34:	89 27       	eor	r24, r25
    1e36:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e38:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    1e3c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    1e40:	90 62       	ori	r25, 0x20	; 32
    1e42:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    1e46:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    1e4a:	08 95       	ret

00001e4c <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 81       	ld	r18, Z
    1e50:	31 81       	ldd	r19, Z+1	; 0x01
    1e52:	62 30       	cpi	r22, 0x02	; 2
    1e54:	58 f0       	brcs	.+22     	; 0x1e6c <filtered_value+0x20>
    1e56:	32 96       	adiw	r30, 0x02	; 2
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	41 91       	ld	r20, Z+
    1e5c:	51 91       	ld	r21, Z+
    1e5e:	24 0f       	add	r18, r20
    1e60:	35 1f       	adc	r19, r21
    1e62:	36 95       	lsr	r19
    1e64:	27 95       	ror	r18
    1e66:	9f 5f       	subi	r25, 0xFF	; 255
    1e68:	69 13       	cpse	r22, r25
    1e6a:	f7 cf       	rjmp	.-18     	; 0x1e5a <filtered_value+0xe>
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	08 95       	ret

00001e70 <init_measure>:
    1e70:	e6 eb       	ldi	r30, 0xB6	; 182
    1e72:	f2 e0       	ldi	r31, 0x02	; 2
    1e74:	2e ed       	ldi	r18, 0xDE	; 222
    1e76:	32 e0       	ldi	r19, 0x02	; 2
    1e78:	81 ef       	ldi	r24, 0xF1	; 241
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	81 93       	st	Z+, r24
    1e7e:	91 93       	st	Z+, r25
    1e80:	2e 17       	cp	r18, r30
    1e82:	3f 07       	cpc	r19, r31
    1e84:	d9 f7       	brne	.-10     	; 0x1e7c <init_measure+0xc>
    1e86:	e5 e9       	ldi	r30, 0x95	; 149
    1e88:	f2 e0       	ldi	r31, 0x02	; 2
    1e8a:	83 eb       	ldi	r24, 0xB3	; 179
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	11 92       	st	Z+, r1
    1e90:	11 92       	st	Z+, r1
    1e92:	8e 17       	cp	r24, r30
    1e94:	9f 07       	cpc	r25, r31
    1e96:	d9 f7       	brne	.-10     	; 0x1e8e <init_measure+0x1e>
    1e98:	ed e7       	ldi	r30, 0x7D	; 125
    1e9a:	f2 e0       	ldi	r31, 0x02	; 2
    1e9c:	81 e9       	ldi	r24, 0x91	; 145
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	11 92       	st	Z+, r1
    1ea2:	11 92       	st	Z+, r1
    1ea4:	8e 17       	cp	r24, r30
    1ea6:	9f 07       	cpc	r25, r31
    1ea8:	d9 f7       	brne	.-10     	; 0x1ea0 <init_measure+0x30>
    1eaa:	08 95       	ret

00001eac <measure_process>:
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    1ebc:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    1ec0:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    1ec4:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    1ec8:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <measure_timer>
    1ecc:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <measure_timer+0x1>
    1ed0:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <measure_timer+0x2>
    1ed4:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <measure_timer+0x3>
    1ed8:	84 17       	cp	r24, r20
    1eda:	95 07       	cpc	r25, r21
    1edc:	a6 07       	cpc	r26, r22
    1ede:	b7 07       	cpc	r27, r23
    1ee0:	08 f0       	brcs	.+2      	; 0x1ee4 <measure_process+0x38>
    1ee2:	d1 c0       	rjmp	.+418    	; 0x2086 <measure_process+0x1da>
    1ee4:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
    1ee8:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
    1eec:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
    1ef0:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
    1ef4:	44 96       	adiw	r24, 0x14	; 20
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	b1 1d       	adc	r27, r1
    1efa:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <measure_timer>
    1efe:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <measure_timer+0x1>
    1f02:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <measure_timer+0x2>
    1f06:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <measure_timer+0x3>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1f10:	ec 01       	movw	r28, r24
    1f12:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <motor_filter_value>
    1f16:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <motor_filter_value+0x1>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
    1f22:	21 e7       	ldi	r18, 0x71	; 113
    1f24:	3d e3       	ldi	r19, 0x3D	; 61
    1f26:	4a e8       	ldi	r20, 0x8A	; 138
    1f28:	5e e3       	ldi	r21, 0x3E	; 62
    1f2a:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    1f2e:	6b 01       	movw	r12, r22
    1f30:	7c 01       	movw	r14, r24
    1f32:	be 01       	movw	r22, r28
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	c7 01       	movw	r24, r14
    1f42:	b6 01       	movw	r22, r12
    1f44:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    1f48:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixunssfsi>
    1f4c:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <accum_adc+0x1>
    1f50:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <accum_adc>
    1f54:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <iteration_adc_accum_table>
    1f58:	e2 2f       	mov	r30, r18
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	ee 0f       	add	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	ea 54       	subi	r30, 0x4A	; 74
    1f62:	fd 4f       	sbci	r31, 0xFD	; 253
    1f64:	71 83       	std	Z+1, r23	; 0x01
    1f66:	60 83       	st	Z, r22
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	82 0f       	add	r24, r18
    1f6c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <iteration_adc_accum_table>
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1f76:	80 32       	cpi	r24, 0x20	; 32
    1f78:	91 05       	cpc	r25, r1
    1f7a:	30 f0       	brcs	.+12     	; 0x1f88 <measure_process+0xdc>
    1f7c:	4f 97       	sbiw	r24, 0x1f	; 31
    1f7e:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <motor_adc+0x1>
    1f82:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <motor_adc>
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <measure_process+0xe4>
    1f88:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <motor_adc+0x1>
    1f8c:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <motor_adc>
    1f90:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <iteration_adc_motor_table>
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	eb 56       	subi	r30, 0x6B	; 107
    1f9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f9e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <motor_adc>
    1fa2:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <motor_adc+0x1>
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1fb0:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <s_o_t_adc+0x1>
    1fb4:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <s_o_t_adc>
    1fb8:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <calibration_value>
    1fbc:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <calibration_value+0x1>
    1fc0:	21 15       	cp	r18, r1
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	71 f0       	breq	.+28     	; 0x1fe2 <measure_process+0x136>
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	28 f4       	brcc	.+10     	; 0x1fd6 <measure_process+0x12a>
    1fcc:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <s_o_t_adc+0x1>
    1fd0:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <s_o_t_adc>
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <measure_process+0x136>
    1fd6:	28 1b       	sub	r18, r24
    1fd8:	39 0b       	sbc	r19, r25
    1fda:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <s_o_t_adc+0x1>
    1fde:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <s_o_t_adc>
    1fe2:	c0 91 7c 02 	lds	r28, 0x027C	; 0x80027c <s_o_t_iteration_adc_table>
    1fe6:	ec 2f       	mov	r30, r28
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	e3 58       	subi	r30, 0x83	; 131
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <s_o_t_adc>
    1ff6:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <s_o_t_adc+0x1>
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	d0 91 b5 02 	lds	r29, 0x02B5	; 0x8002b5 <iteration_adc_motor_table>
    2002:	df 5f       	subi	r29, 0xFF	; 255
    2004:	d0 93 b5 02 	sts	0x02B5, r29	; 0x8002b5 <iteration_adc_motor_table>
    2008:	cf 5f       	subi	r28, 0xFF	; 255
    200a:	c0 93 7c 02 	sts	0x027C, r28	; 0x80027c <s_o_t_iteration_adc_table>
    200e:	64 e1       	ldi	r22, 0x14	; 20
    2010:	86 eb       	ldi	r24, 0xB6	; 182
    2012:	92 e0       	ldi	r25, 0x02	; 2
    2014:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <filtered_value>
    2018:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <filtered_accum_adc_val+0x1>
    201c:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <filtered_accum_adc_val>
    2020:	6f e0       	ldi	r22, 0x0F	; 15
    2022:	85 e9       	ldi	r24, 0x95	; 149
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <filtered_value>
    202a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <motor_filter_value+0x1>
    202e:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <motor_filter_value>
    2032:	6a e0       	ldi	r22, 0x0A	; 10
    2034:	8d e7       	ldi	r24, 0x7D	; 125
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <filtered_value>
    203c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <s_o_t_filter_value+0x1>
    2040:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <s_o_t_filter_value>
    2044:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <debug_msg_counter>
    2048:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <debug_msg_counter+0x1>
    204c:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <debug_msg_counter+0x2>
    2050:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <debug_msg_counter+0x3>
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	a1 1d       	adc	r26, r1
    2058:	b1 1d       	adc	r27, r1
    205a:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <debug_msg_counter>
    205e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <debug_msg_counter+0x1>
    2062:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <debug_msg_counter+0x2>
    2066:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <debug_msg_counter+0x3>
    206a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <iteration_adc_accum_table>
    206e:	84 31       	cpi	r24, 0x14	; 20
    2070:	11 f4       	brne	.+4      	; 0x2076 <measure_process+0x1ca>
    2072:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <iteration_adc_accum_table>
    2076:	ca 30       	cpi	r28, 0x0A	; 10
    2078:	11 f4       	brne	.+4      	; 0x207e <measure_process+0x1d2>
    207a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <s_o_t_iteration_adc_table>
    207e:	df 30       	cpi	r29, 0x0F	; 15
    2080:	11 f4       	brne	.+4      	; 0x2086 <measure_process+0x1da>
    2082:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <iteration_adc_motor_table>
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	08 95       	ret

00002094 <measure_get_servo_calibration>:
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	c0 90 b2 04 	lds	r12, 0x04B2	; 0x8004b2 <mktime+0x2>
    20a4:	d0 90 b3 04 	lds	r13, 0x04B3	; 0x8004b3 <mktime+0x3>
    20a8:	e0 90 b4 04 	lds	r14, 0x04B4	; 0x8004b4 <mktime+0x4>
    20ac:	f0 90 b5 04 	lds	r15, 0x04B5	; 0x8004b5 <mktime+0x5>
    20b0:	8c ed       	ldi	r24, 0xDC	; 220
    20b2:	c8 0e       	add	r12, r24
    20b4:	85 e0       	ldi	r24, 0x05	; 5
    20b6:	d8 1e       	adc	r13, r24
    20b8:	e1 1c       	adc	r14, r1
    20ba:	f1 1c       	adc	r15, r1
    20bc:	c0 eb       	ldi	r28, 0xB0	; 176
    20be:	d4 e0       	ldi	r29, 0x04	; 4
    20c0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <measure_process>
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	ac 81       	ldd	r26, Y+4	; 0x04
    20ca:	bd 81       	ldd	r27, Y+5	; 0x05
    20cc:	c8 16       	cp	r12, r24
    20ce:	d9 06       	cpc	r13, r25
    20d0:	ea 06       	cpc	r14, r26
    20d2:	fb 06       	cpc	r15, r27
    20d4:	a8 f7       	brcc	.-22     	; 0x20c0 <measure_get_servo_calibration+0x2c>
    20d6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <s_o_t_filter_value>
    20da:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <s_o_t_filter_value+0x1>
    20de:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <calibration_value>
    20e2:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <calibration_value+0x1>
    20e6:	9f 93       	push	r25
    20e8:	8f 93       	push	r24
    20ea:	85 e8       	ldi	r24, 0x85	; 133
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	9f 93       	push	r25
    20f0:	8f 93       	push	r24
    20f2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	df 90       	pop	r13
    2108:	cf 90       	pop	r12
    210a:	08 95       	ret

0000210c <measure_get_filtered_value>:
    210c:	83 30       	cpi	r24, 0x03	; 3
    210e:	18 f4       	brcc	.+6      	; 0x2116 <measure_get_filtered_value+0xa>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	40 f0       	brcs	.+16     	; 0x2124 <measure_get_filtered_value+0x18>
    2114:	0c c0       	rjmp	.+24     	; 0x212e <measure_get_filtered_value+0x22>
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	79 f4       	brne	.+30     	; 0x2138 <measure_get_filtered_value+0x2c>
    211a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <filtered_accum_adc_val>
    211e:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <filtered_accum_adc_val+0x1>
    2122:	08 95       	ret
    2124:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <motor_filter_value>
    2128:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <motor_filter_value+0x1>
    212c:	08 95       	ret
    212e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <s_o_t_filter_value>
    2132:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <s_o_t_filter_value+0x1>
    2136:	08 95       	ret
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	08 95       	ret

0000213e <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	6a 01       	movw	r12, r20
    2148:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	18 f4       	brcc	.+6      	; 0x2154 <measure_get_current+0x16>
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	50 f0       	brcs	.+20     	; 0x2166 <measure_get_current+0x28>
    2152:	10 c0       	rjmp	.+32     	; 0x2174 <measure_get_current+0x36>
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	a9 f4       	brne	.+42     	; 0x2182 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    2158:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <filtered_accum_adc_val>
    215c:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <filtered_accum_adc_val+0x1>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2164:	11 c0       	rjmp	.+34     	; 0x2188 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    2166:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <motor_filter_value>
    216a:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <motor_filter_value+0x1>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2172:	0a c0       	rjmp	.+20     	; 0x2188 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    2174:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <s_o_t_filter_value>
    2178:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <s_o_t_filter_value+0x1>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    2188:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5a e3       	ldi	r21, 0x3A	; 58
    2194:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 ea       	ldi	r20, 0xA0	; 160
    219e:	50 e4       	ldi	r21, 0x40	; 64
    21a0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    21a4:	a7 01       	movw	r20, r14
    21a6:	96 01       	movw	r18, r12
    21a8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	08 95       	ret

000021b6 <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	59 f0       	breq	.+22     	; 0x21dc <mem_save_data+0x26>
    21c6:	28 f4       	brcc	.+10     	; 0x21d2 <mem_save_data+0x1c>
    21c8:	88 23       	and	r24, r24
    21ca:	91 f0       	breq	.+36     	; 0x21f0 <mem_save_data+0x3a>
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	51 f1       	breq	.+84     	; 0x2224 <mem_save_data+0x6e>
    21d0:	34 c0       	rjmp	.+104    	; 0x223a <mem_save_data+0x84>
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	51 f1       	breq	.+84     	; 0x222a <mem_save_data+0x74>
    21d6:	84 30       	cpi	r24, 0x04	; 4
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <mem_save_data+0x2c>
    21da:	2f c0       	rjmp	.+94     	; 0x223a <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	26 c0       	rjmp	.+76     	; 0x222e <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    21e2:	0e 94 10 06 	call	0xc20	; 0xc20 <dark_menu_parameters_len>
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    21ea:	88 e0       	ldi	r24, 0x08	; 8
    21ec:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    21f0:	22 e0       	ldi	r18, 0x02	; 2
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    21f8:	c8 2f       	mov	r28, r24
    21fa:	7c 01       	movw	r14, r24
    21fc:	e2 0e       	add	r14, r18
    21fe:	f3 1e       	adc	r15, r19
    2200:	99 27       	eor	r25, r25
    2202:	8e 15       	cp	r24, r14
    2204:	9f 05       	cpc	r25, r15
    2206:	cc f4       	brge	.+50     	; 0x223a <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2208:	f8 01       	movw	r30, r16
    220a:	61 91       	ld	r22, Z+
    220c:	8f 01       	movw	r16, r30
    220e:	8c 2f       	mov	r24, r28
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 17 0c 	call	0x182e	; 0x182e <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2216:	cf 5f       	subi	r28, 0xFF	; 255
    2218:	8c 2f       	mov	r24, r28
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	8e 15       	cp	r24, r14
    221e:	9f 05       	cpc	r25, r15
    2220:	9c f3       	brlt	.-26     	; 0x2208 <mem_save_data+0x52>
    2222:	0b c0       	rjmp	.+22     	; 0x223a <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2224:	82 e0       	ldi	r24, 0x02	; 2
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    222a:	86 e0       	ldi	r24, 0x06	; 6
    222c:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    222e:	c8 2f       	mov	r28, r24
    2230:	7c 01       	movw	r14, r24
    2232:	f2 e0       	ldi	r31, 0x02	; 2
    2234:	ef 0e       	add	r14, r31
    2236:	f1 1c       	adc	r15, r1
    2238:	e7 cf       	rjmp	.-50     	; 0x2208 <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	08 95       	ret

00002246 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	59 f0       	breq	.+22     	; 0x226c <mem_read_data+0x26>
    2256:	28 f4       	brcc	.+10     	; 0x2262 <mem_read_data+0x1c>
    2258:	88 23       	and	r24, r24
    225a:	91 f0       	breq	.+36     	; 0x2280 <mem_read_data+0x3a>
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	51 f1       	breq	.+84     	; 0x22b4 <mem_read_data+0x6e>
    2260:	34 c0       	rjmp	.+104    	; 0x22ca <mem_read_data+0x84>
    2262:	83 30       	cpi	r24, 0x03	; 3
    2264:	51 f1       	breq	.+84     	; 0x22ba <mem_read_data+0x74>
    2266:	84 30       	cpi	r24, 0x04	; 4
    2268:	21 f0       	breq	.+8      	; 0x2272 <mem_read_data+0x2c>
    226a:	2f c0       	rjmp	.+94     	; 0x22ca <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    226c:	84 e0       	ldi	r24, 0x04	; 4
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	26 c0       	rjmp	.+76     	; 0x22be <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    2272:	0e 94 10 06 	call	0xc20	; 0xc20 <dark_menu_parameters_len>
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    227a:	88 e0       	ldi	r24, 0x08	; 8
    227c:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2280:	22 e0       	ldi	r18, 0x02	; 2
    2282:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2288:	c8 2f       	mov	r28, r24
    228a:	7c 01       	movw	r14, r24
    228c:	e2 0e       	add	r14, r18
    228e:	f3 1e       	adc	r15, r19
    2290:	99 27       	eor	r25, r25
    2292:	8e 15       	cp	r24, r14
    2294:	9f 05       	cpc	r25, r15
    2296:	cc f4       	brge	.+50     	; 0x22ca <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    2298:	8c 2f       	mov	r24, r28
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 1f 0c 	call	0x183e	; 0x183e <EEPROM_read>
    22a0:	f8 01       	movw	r30, r16
    22a2:	81 93       	st	Z+, r24
    22a4:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22a6:	cf 5f       	subi	r28, 0xFF	; 255
    22a8:	8c 2f       	mov	r24, r28
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	8e 15       	cp	r24, r14
    22ae:	9f 05       	cpc	r25, r15
    22b0:	9c f3       	brlt	.-26     	; 0x2298 <mem_read_data+0x52>
    22b2:	0b c0       	rjmp	.+22     	; 0x22ca <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    22ba:	86 e0       	ldi	r24, 0x06	; 6
    22bc:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22be:	c8 2f       	mov	r28, r24
    22c0:	7c 01       	movw	r14, r24
    22c2:	f2 e0       	ldi	r31, 0x02	; 2
    22c4:	ef 0e       	add	r14, r31
    22c6:	f1 1c       	adc	r15, r1
    22c8:	e7 cf       	rjmp	.-50     	; 0x2298 <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	08 95       	ret

000022d6 <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
    22f6:	c2 e3       	ldi	r28, 0x32	; 50
    22f8:	d0 e0       	ldi	r29, 0x00	; 0
    22fa:	9e 01       	movw	r18, r28
    22fc:	28 1b       	sub	r18, r24
    22fe:	31 09       	sbc	r19, r1
    2300:	c9 01       	movw	r24, r18
    2302:	89 01       	movw	r16, r18
    2304:	00 0f       	add	r16, r16
    2306:	11 1f       	adc	r17, r17
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	08 0f       	add	r16, r24
    2316:	19 1f       	adc	r17, r25
    2318:	00 53       	subi	r16, 0x30	; 48
    231a:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    2322:	c8 1b       	sub	r28, r24
    2324:	d1 09       	sbc	r29, r1
    2326:	be 01       	movw	r22, r28
    2328:	66 0f       	add	r22, r22
    232a:	77 1f       	adc	r23, r23
    232c:	cc 0f       	add	r28, r28
    232e:	dd 1f       	adc	r29, r29
    2330:	cc 0f       	add	r28, r28
    2332:	dd 1f       	adc	r29, r29
    2334:	cc 0f       	add	r28, r28
    2336:	dd 1f       	adc	r29, r29
    2338:	6c 0f       	add	r22, r28
    233a:	7d 1f       	adc	r23, r29
    233c:	65 50       	subi	r22, 0x05	; 5
    233e:	7b 4f       	sbci	r23, 0xFB	; 251
    2340:	60 1b       	sub	r22, r16
    2342:	71 0b       	sbc	r23, r17
    2344:	07 2e       	mov	r0, r23
    2346:	00 0c       	add	r0, r0
    2348:	88 0b       	sbc	r24, r24
    234a:	99 0b       	sbc	r25, r25
    234c:	0e 94 a7 19 	call	0x334e	; 0x334e <__floatsisf>
    2350:	4b 01       	movw	r8, r22
    2352:	5c 01       	movw	r10, r24
    2354:	6f 2d       	mov	r22, r15
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 a5 19 	call	0x334a	; 0x334a <__floatunsisf>
    2360:	9b 01       	movw	r18, r22
    2362:	ac 01       	movw	r20, r24
    2364:	c5 01       	movw	r24, r10
    2366:	b4 01       	movw	r22, r8
    2368:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	46 ec       	ldi	r20, 0xC6	; 198
    2372:	52 e4       	ldi	r21, 0x42	; 66
    2374:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__divsf3>
    2378:	6b 01       	movw	r12, r22
    237a:	7c 01       	movw	r14, r24
    237c:	b8 01       	movw	r22, r16
    237e:	11 0f       	add	r17, r17
    2380:	88 0b       	sbc	r24, r24
    2382:	99 0b       	sbc	r25, r25
    2384:	0e 94 a7 19 	call	0x334e	; 0x334e <__floatsisf>
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	c7 01       	movw	r24, r14
    238e:	b6 01       	movw	r22, r12
    2390:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    2394:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2398:	7b bd       	out	0x2b, r23	; 43
    239a:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	bf 90       	pop	r11
    23ae:	af 90       	pop	r10
    23b0:	9f 90       	pop	r9
    23b2:	8f 90       	pop	r8
    23b4:	08 95       	ret

000023b6 <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    23b6:	94 e0       	ldi	r25, 0x04	; 4
    23b8:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <servoD>
	servo_set_pwm_val(value);
    23bc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
    23c0:	08 95       	ret

000023c2 <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    23c2:	88 23       	and	r24, r24
    23c4:	19 f0       	breq	.+6      	; 0x23cc <servo_error+0xa>
		servo_set_pwm_val(0);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
	LED_SERVO_OFF;
    23cc:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    23ce:	86 e0       	ldi	r24, 0x06	; 6
    23d0:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <servoD>
    23d4:	08 95       	ret

000023d6 <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    23da:	2f e1       	ldi	r18, 0x1F	; 31
    23dc:	3e e4       	ldi	r19, 0x4E	; 78
    23de:	37 bd       	out	0x27, r19	; 39
    23e0:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    23e2:	81 b3       	in	r24, 0x11	; 17
    23e4:	80 63       	ori	r24, 0x30	; 48
    23e6:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    23e8:	19 bc       	out	0x29, r1	; 41
    23ea:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    23ec:	1b bc       	out	0x2b, r1	; 43
    23ee:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    23f0:	8f b5       	in	r24, 0x2f	; 47
    23f2:	82 60       	ori	r24, 0x02	; 2
    23f4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    23f6:	8e b5       	in	r24, 0x2e	; 46
    23f8:	88 61       	ori	r24, 0x18	; 24
    23fa:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    23fc:	8f b5       	in	r24, 0x2f	; 47
    23fe:	80 68       	ori	r24, 0x80	; 128
    2400:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    2402:	8e b5       	in	r24, 0x2e	; 46
    2404:	82 60       	ori	r24, 0x02	; 2
    2406:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2408:	3b bd       	out	0x2b, r19	; 43
    240a:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    240c:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    2414:	c2 ea       	ldi	r28, 0xA2	; 162
    2416:	d4 e0       	ldi	r29, 0x04	; 4
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	88 83       	st	Y, r24
	servoD.value = 0;
    241c:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    241e:	86 ea       	ldi	r24, 0xA6	; 166
    2420:	94 e0       	ldi	r25, 0x04	; 4
    2422:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <evTime_init>
	servoD.try_cnt = 0;
    2426:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    2428:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <try_count>
	debug_msg("SERVO: init\n");
    242c:	8b ea       	ldi	r24, 0xAB	; 171
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	9f 93       	push	r25
    2432:	8f 93       	push	r24
    2434:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    2442:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <servoD>
    2446:	92 50       	subi	r25, 0x02	; 2
    2448:	21 e0       	ldi	r18, 0x01	; 1
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	92 30       	cpi	r25, 0x02	; 2
    244e:	10 f0       	brcs	.+4      	; 0x2454 <servo_is_open+0x12>
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
}
    2454:	c9 01       	movw	r24, r18
    2456:	08 95       	ret

00002458 <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    2458:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <servoD>
    245c:	91 30       	cpi	r25, 0x01	; 1
    245e:	a1 f4       	brne	.+40     	; 0x2488 <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    2460:	e2 ea       	ldi	r30, 0xA2	; 162
    2462:	f4 e0       	ldi	r31, 0x04	; 4
    2464:	93 e0       	ldi	r25, 0x03	; 3
    2466:	90 83       	st	Z, r25
		servoD.value = value;
    2468:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    246a:	1f 92       	push	r1
    246c:	8f 93       	push	r24
    246e:	88 eb       	ldi	r24, 0xB8	; 184
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	9f 93       	push	r25
    2474:	8f 93       	push	r24
    2476:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
}
    248c:	08 95       	ret

0000248e <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    248e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <servoD>
    2492:	9f ef       	ldi	r25, 0xFF	; 255
    2494:	98 0f       	add	r25, r24
    2496:	92 30       	cpi	r25, 0x02	; 2
    2498:	28 f4       	brcc	.+10     	; 0x24a4 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    249a:	e2 ea       	ldi	r30, 0xA2	; 162
    249c:	f4 e0       	ldi	r31, 0x04	; 4
    249e:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    24a0:	85 e0       	ldi	r24, 0x05	; 5
    24a2:	80 83       	st	Z, r24
    24a4:	08 95       	ret

000024a6 <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    24a6:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <servoD+0x9>
}
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	08 95       	ret

000024ae <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    24ae:	0e 94 21 12 	call	0x2442	; 0x2442 <servo_is_open>
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	d1 f0       	breq	.+52     	; 0x24ea <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    24bc:	e2 ea       	ldi	r30, 0xA2	; 162
    24be:	f4 e0       	ldi	r31, 0x04	; 4
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 83       	st	Z, r24
		servoD.value = 0;
    24c4:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    24c6:	1f 92       	push	r1
    24c8:	1f 92       	push	r1
    24ca:	8f ec       	ldi	r24, 0xCF	; 207
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    24d6:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    24d8:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
		return 1;
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    24ea:	20 91 a2 04 	lds	r18, 0x04A2	; 0x8004a2 <servoD>
    24ee:	25 30       	cpi	r18, 0x05	; 5
    24f0:	31 f4       	brne	.+12     	; 0x24fe <servo_close+0x50>
	{
		servo_exit_try();
    24f2:	0e 94 80 12 	call	0x2500	; 0x2500 <servo_exit_try>
		error_servo_timer();
    24f6:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
		return 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    24fe:	08 95       	ret

00002500 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    2500:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <servoD+0x1>
    2504:	82 30       	cpi	r24, 0x02	; 2
    2506:	29 f4       	brne	.+10     	; 0x2512 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    2508:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <servoD>
		servo_close();
    250c:	0e 94 57 12 	call	0x24ae	; 0x24ae <servo_close>
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	71 f4       	brne	.+28     	; 0x2532 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    2516:	e2 ea       	ldi	r30, 0xA2	; 162
    2518:	f4 e0       	ldi	r31, 0x04	; 4
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	80 83       	st	Z, r24
		servo_open(servoD.value);
    251e:	83 81       	ldd	r24, Z+3	; 0x03
    2520:	0e 94 9a 12 	call	0x2534	; 0x2534 <servo_open>
	}
	else return;
	try_count = 0;
    2524:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <try_count>
	servoD.try_cnt++;
    2528:	e2 ea       	ldi	r30, 0xA2	; 162
    252a:	f4 e0       	ldi	r31, 0x04	; 4
    252c:	81 85       	ldd	r24, Z+9	; 0x09
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	81 87       	std	Z+9, r24	; 0x09
    2532:	08 95       	ret

00002534 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    2534:	cf 93       	push	r28
    2536:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    2538:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <servoD>
    253c:	9f ef       	ldi	r25, 0xFF	; 255
    253e:	98 0f       	add	r25, r24
    2540:	93 30       	cpi	r25, 0x03	; 3
    2542:	d0 f4       	brcc	.+52     	; 0x2578 <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    2544:	e2 ea       	ldi	r30, 0xA2	; 162
    2546:	f4 e0       	ldi	r31, 0x04	; 4
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	80 83       	st	Z, r24
		servoD.value = value;
    254c:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    254e:	8c 2f       	mov	r24, r28
    2550:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    2554:	1f 92       	push	r1
    2556:	cf 93       	push	r28
    2558:	80 ee       	ldi	r24, 0xE0	; 224
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9f 93       	push	r25
    255e:	8f 93       	push	r24
    2560:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    2564:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    2566:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
		return 1;
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0b c0       	rjmp	.+22     	; 0x258e <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    2578:	85 30       	cpi	r24, 0x05	; 5
    257a:	39 f4       	brne	.+14     	; 0x258a <servo_open+0x56>
	{
		servo_exit_try();
    257c:	0e 94 80 12 	call	0x2500	; 0x2500 <servo_exit_try>
		error_servo_timer();
    2580:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
		return 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 c0       	rjmp	.+4      	; 0x258e <servo_open+0x5a>
	}
	else return 0;
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
}
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2592:	ab 01       	movw	r20, r22
    2594:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    2596:	86 ea       	ldi	r24, 0xA6	; 166
    2598:	94 e0       	ldi	r25, 0x04	; 4
    259a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
    259e:	08 95       	ret

000025a0 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    25a6:	4b e4       	ldi	r20, 0x4B	; 75
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	82 ef       	ldi	r24, 0xF2	; 242
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 01 18 	call	0x3002	; 0x3002 <evTime_process_period>
    25b6:	89 2b       	or	r24, r25
    25b8:	09 f4       	brne	.+2      	; 0x25bc <servo_process+0x1c>
    25ba:	be c0       	rjmp	.+380    	; 0x2738 <servo_process+0x198>
	{
		switch(servoD.state)
    25bc:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <servoD>
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	a1 f0       	breq	.+40     	; 0x25ec <servo_process+0x4c>
    25c4:	30 f4       	brcc	.+12     	; 0x25d2 <servo_process+0x32>
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	59 f0       	breq	.+22     	; 0x25e0 <servo_process+0x40>
    25ca:	83 30       	cpi	r24, 0x03	; 3
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <servo_process+0x30>
    25ce:	69 c0       	rjmp	.+210    	; 0x26a2 <servo_process+0x102>
    25d0:	a3 c0       	rjmp	.+326    	; 0x2718 <servo_process+0x178>
    25d2:	86 30       	cpi	r24, 0x06	; 6
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <servo_process+0x38>
    25d6:	7f c0       	rjmp	.+254    	; 0x26d6 <servo_process+0x136>
    25d8:	87 30       	cpi	r24, 0x07	; 7
    25da:	09 f4       	brne	.+2      	; 0x25de <servo_process+0x3e>
    25dc:	99 c0       	rjmp	.+306    	; 0x2710 <servo_process+0x170>
    25de:	9c c0       	rjmp	.+312    	; 0x2718 <servo_process+0x178>
		{
			case SERVO_OPEN:
			servoD.value = value;
    25e0:	c0 93 a5 04 	sts	0x04A5, r28	; 0x8004a5 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    25e4:	8c 2f       	mov	r24, r28
    25e6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
			break;
    25ea:	96 c0       	rjmp	.+300    	; 0x2718 <servo_process+0x178>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    25ec:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <try_count>
    25f0:	81 11       	cpse	r24, r1
    25f2:	13 c0       	rjmp	.+38     	; 0x261a <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	8d ee       	ldi	r24, 0xED	; 237
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
		try_count++;
    2604:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <try_count>
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    260e:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <servoD+0x3>
    2612:	89 0f       	add	r24, r25
    2614:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
    2618:	30 c0       	rjmp	.+96     	; 0x267a <servo_process+0xda>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    261a:	81 50       	subi	r24, 0x01	; 1
    261c:	89 30       	cpi	r24, 0x09	; 9
    261e:	08 f5       	brcc	.+66     	; 0x2662 <servo_process+0xc2>
	{
		if (evTime_check(&timeout) == 1)
    2620:	8d ee       	ldi	r24, 0xED	; 237
    2622:	92 e0       	ldi	r25, 0x02	; 2
    2624:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	39 f5       	brne	.+78     	; 0x267a <servo_process+0xda>
		{
			evTime_start(&timeout, 250);
    262c:	4a ef       	ldi	r20, 0xFA	; 250
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	8d ee       	ldi	r24, 0xED	; 237
    2636:	92 e0       	ldi	r25, 0x02	; 2
    2638:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
			try_count++;
    263c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <try_count>
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <try_count>
			servo_set_pwm_val(servoD.value + try_count*dark_menu_get_value(MENU_TRY_OPEN_CALIBRATION));
    2646:	c0 91 a5 04 	lds	r28, 0x04A5	; 0x8004a5 <servoD+0x3>
    264a:	87 e0       	ldi	r24, 0x07	; 7
    264c:	0e 94 32 07 	call	0xe64	; 0xe64 <dark_menu_get_value>
    2650:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <try_count>
    2654:	89 9f       	mul	r24, r25
    2656:	c0 0d       	add	r28, r0
    2658:	11 24       	eor	r1, r1
    265a:	8c 2f       	mov	r24, r28
    265c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
    2660:	0c c0       	rjmp	.+24     	; 0x267a <servo_process+0xda>
		}
	}
	else
	{
		try_count = 0;
    2662:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <try_count>
		servo_set_pwm_val(servoD.value);
    2666:	c2 ea       	ldi	r28, 0xA2	; 162
    2668:	d4 e0       	ldi	r29, 0x04	; 4
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    267a:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <servoD+0x3>
    267e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <try_count>
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	82 0f       	add	r24, r18
    2686:	91 1d       	adc	r25, r1
    2688:	9f 93       	push	r25
    268a:	8f 93       	push	r24
    268c:	82 ef       	ldi	r24, 0xF2	; 242
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	9f 93       	push	r25
    2692:	8f 93       	push	r24
    2694:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	3b c0       	rjmp	.+118    	; 0x2718 <servo_process+0x178>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26a2:	88 ee       	ldi	r24, 0xE8	; 232
    26a4:	92 e0       	ldi	r25, 0x02	; 2
    26a6:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <evTime_is_stated>
    26aa:	89 2b       	or	r24, r25
    26ac:	59 f0       	breq	.+22     	; 0x26c4 <servo_process+0x124>
	{
		if (evTime_check(&timeout) == 1)
    26ae:	88 ee       	ldi	r24, 0xE8	; 232
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	79 f5       	brne	.+94     	; 0x2718 <servo_process+0x178>
		{
			servoD.state = SERVO_OPEN;
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <servoD>
			LED_SERVO_ON;
    26c0:	96 9a       	sbi	0x12, 6	; 18
    26c2:	2a c0       	rjmp	.+84     	; 0x2718 <servo_process+0x178>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    26c4:	48 eb       	ldi	r20, 0xB8	; 184
    26c6:	5b e0       	ldi	r21, 0x0B	; 11
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	88 ee       	ldi	r24, 0xE8	; 232
    26ce:	92 e0       	ldi	r25, 0x02	; 2
    26d0:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
    26d4:	21 c0       	rjmp	.+66     	; 0x2718 <servo_process+0x178>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26d6:	83 ee       	ldi	r24, 0xE3	; 227
    26d8:	92 e0       	ldi	r25, 0x02	; 2
    26da:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <evTime_is_stated>
    26de:	89 2b       	or	r24, r25
    26e0:	71 f0       	breq	.+28     	; 0x26fe <servo_process+0x15e>
	{
		if (evTime_check(&timeout) == 1)
    26e2:	83 ee       	ldi	r24, 0xE3	; 227
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	a9 f4       	brne	.+42     	; 0x2718 <servo_process+0x178>
		{
			servoD.state = SERVO_ERROR;
    26ee:	87 e0       	ldi	r24, 0x07	; 7
    26f0:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    26f4:	8f e1       	ldi	r24, 0x1F	; 31
    26f6:	9e e4       	ldi	r25, 0x4E	; 78
    26f8:	9b bd       	out	0x2b, r25	; 43
    26fa:	8a bd       	out	0x2a, r24	; 42
    26fc:	0d c0       	rjmp	.+26     	; 0x2718 <servo_process+0x178>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    26fe:	4c ea       	ldi	r20, 0xAC	; 172
    2700:	5d e0       	ldi	r21, 0x0D	; 13
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	83 ee       	ldi	r24, 0xE3	; 227
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <servo_process+0x178>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2710:	8f e1       	ldi	r24, 0x1F	; 31
    2712:	9e e4       	ldi	r25, 0x4E	; 78
    2714:	9b bd       	out	0x2b, r25	; 43
    2716:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    2718:	86 ea       	ldi	r24, 0xA6	; 166
    271a:	94 e0       	ldi	r25, 0x04	; 4
    271c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	51 f4       	brne	.+20     	; 0x2738 <servo_process+0x198>
		{
			servoD.try_cnt = 0;
    2724:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	9f 93       	push	r25
    272e:	8f 93       	push	r24
    2730:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
		}
	}
}
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	08 95       	ret

0000273e <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    273e:	ed e3       	ldi	r30, 0x3D	; 61
    2740:	f4 e0       	ldi	r31, 0x04	; 4
    2742:	16 86       	std	Z+14, r1	; 0x0e
    2744:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    2746:	12 86       	std	Z+10, r1	; 0x0a
    2748:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    274a:	14 86       	std	Z+12, r1	; 0x0c
    274c:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    274e:	e0 e1       	ldi	r30, 0x10	; 16
    2750:	f4 e0       	ldi	r31, 0x04	; 4
    2752:	16 86       	std	Z+14, r1	; 0x0e
    2754:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    2756:	12 86       	std	Z+10, r1	; 0x0a
    2758:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    275a:	14 86       	std	Z+12, r1	; 0x0c
    275c:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    275e:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <button3+0xc>
    2762:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <button3+0xb>
	
	button5.timer_callback = 0;
    2766:	ee ee       	ldi	r30, 0xEE	; 238
    2768:	f3 e0       	ldi	r31, 0x03	; 3
    276a:	16 86       	std	Z+14, r1	; 0x0e
    276c:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    276e:	14 86       	std	Z+12, r1	; 0x0c
    2770:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2772:	12 86       	std	Z+10, r1	; 0x0a
    2774:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    2776:	ee e2       	ldi	r30, 0x2E	; 46
    2778:	f4 e0       	ldi	r31, 0x04	; 4
    277a:	16 86       	std	Z+14, r1	; 0x0e
    277c:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    277e:	14 86       	std	Z+12, r1	; 0x0c
    2780:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2782:	12 86       	std	Z+10, r1	; 0x0a
    2784:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    2786:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <button7+0xc>
    278a:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <button7+0xb>
	
	button8.fall_callback = 0;
    278e:	eb e5       	ldi	r30, 0x5B	; 91
    2790:	f4 e0       	ldi	r31, 0x04	; 4
    2792:	14 86       	std	Z+12, r1	; 0x0c
    2794:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    2796:	16 86       	std	Z+14, r1	; 0x0e
    2798:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    279a:	12 86       	std	Z+10, r1	; 0x0a
    279c:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    279e:	e0 ed       	ldi	r30, 0xD0	; 208
    27a0:	f3 e0       	ldi	r31, 0x03	; 3
    27a2:	14 86       	std	Z+12, r1	; 0x0c
    27a4:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    27a6:	16 86       	std	Z+14, r1	; 0x0e
    27a8:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    27aa:	12 86       	std	Z+10, r1	; 0x0a
    27ac:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    27ae:	ef ed       	ldi	r30, 0xDF	; 223
    27b0:	f3 e0       	ldi	r31, 0x03	; 3
    27b2:	14 86       	std	Z+12, r1	; 0x0c
    27b4:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    27b6:	16 86       	std	Z+14, r1	; 0x0e
    27b8:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    27ba:	12 86       	std	Z+10, r1	; 0x0a
    27bc:	11 86       	std	Z+9, r1	; 0x09
    27be:	08 95       	ret

000027c0 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    27c0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	49 f0       	breq	.+18     	; 0x27da <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    27c8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    27cc:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    27d0:	98 60       	ori	r25, 0x08	; 8
    27d2:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    27d6:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    27da:	08 95       	ret

000027dc <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    27dc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    27e0:	82 30       	cpi	r24, 0x02	; 2
    27e2:	49 f0       	breq	.+18     	; 0x27f6 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    27e4:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    27e8:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    27ec:	80 68       	ori	r24, 0x80	; 128
    27ee:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    27f2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    27f6:	08 95       	ret

000027f8 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    27f8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    27fc:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2800:	92 60       	ori	r25, 0x02	; 2
    2802:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2806:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    280a:	08 95       	ret

0000280c <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    280c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2810:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2814:	99 7f       	andi	r25, 0xF9	; 249
    2816:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    281a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	counter_very_fast_motor_sub = 0;
    281e:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_motor_sub>
    2822:	08 95       	ret

00002824 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2824:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2828:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    282c:	80 62       	ori	r24, 0x20	; 32
    282e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2832:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    2836:	08 95       	ret

00002838 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2838:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    283c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2840:	8f 79       	andi	r24, 0x9F	; 159
    2842:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2846:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	counter_very_fast_motor_sub = 0;
    284a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_motor_sub>
    284e:	08 95       	ret

00002850 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2850:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2854:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2858:	90 62       	ori	r25, 0x20	; 32
    285a:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    285e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2862:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2866:	8b 30       	cpi	r24, 0x0B	; 11
    2868:	18 f0       	brcs	.+6      	; 0x2870 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    286a:	81 50       	subi	r24, 0x01	; 1
    286c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2870:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    2882:	08 95       	ret

00002884 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2884:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2888:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    288c:	90 62       	ori	r25, 0x20	; 32
    288e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2892:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	if (motor_value > 10)
    2896:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <motor_value>
    289a:	8b 30       	cpi	r24, 0x0B	; 11
    289c:	18 f0       	brcs	.+6      	; 0x28a4 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    28a4:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	0e 94 bd 09 	call	0x137a	; 0x137a <disp_get_state>
    28b4:	02 97       	sbiw	r24, 0x02	; 2
    28b6:	29 f4       	brne	.+10     	; 0x28c2 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    28c0:	04 c0       	rjmp	.+8      	; 0x28ca <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
	state_measure_volt++;
    28ca:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <state_measure_volt>
	if (state_measure_volt == 2)
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	19 f4       	brne	.+6      	; 0x28de <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28d8:	66 e0       	ldi	r22, 0x06	; 6
    28da:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    28de:	08 95       	ret

000028e0 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    28e0:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    28e4:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    28e8:	90 62       	ori	r25, 0x20	; 32
    28ea:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    28ee:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	if (motor_value < 99)
    28f2:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <motor_value>
    28f6:	83 36       	cpi	r24, 0x63	; 99
    28f8:	18 f4       	brcc	.+6      	; 0x2900 <button_motor_add_fall_cb+0x20>
		motor_value++;
    28fa:	8f 5f       	subi	r24, 0xFF	; 255
    28fc:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2900:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	0e 94 bd 09 	call	0x137a	; 0x137a <disp_get_state>
    2910:	02 97       	sbiw	r24, 0x02	; 2
    2912:	29 f4       	brne	.+10     	; 0x291e <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
	state_measure_volt++;
    2926:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <state_measure_volt>
	if (state_measure_volt == 2)
    2930:	82 30       	cpi	r24, 0x02	; 2
    2932:	19 f4       	brne	.+6      	; 0x293a <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2934:	66 e0       	ldi	r22, 0x06	; 6
    2936:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    293a:	08 95       	ret

0000293c <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    293c:	0e 94 cd 09 	call	0x139a	; 0x139a <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2940:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2944:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2948:	97 7e       	andi	r25, 0xE7	; 231
    294a:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    294e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	counter_very_fast_motor_sub = 0;
    2952:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2956:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    295a:	88 23       	and	r24, r24
    295c:	19 f0       	breq	.+6      	; 0x2964 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    295e:	81 50       	subi	r24, 0x01	; 1
    2960:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	0e 94 bd 09 	call	0x137a	; 0x137a <disp_get_state>
    296a:	02 97       	sbiw	r24, 0x02	; 2
    296c:	29 f4       	brne	.+10     	; 0x2978 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    2976:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    2980:	08 95       	ret

00002982 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2982:	0e 94 cd 09 	call	0x139a	; 0x139a <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2986:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    298a:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    298e:	8f 77       	andi	r24, 0x7F	; 127
    2990:	9e 7f       	andi	r25, 0xFE	; 254
    2992:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2996:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	counter_very_fast_motor_sub = 0;
    299a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    299e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <state_measure_volt>
    29a2:	88 23       	and	r24, r24
    29a4:	19 f0       	breq	.+6      	; 0x29ac <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    29a6:	81 50       	subi	r24, 0x01	; 1
    29a8:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	0e 94 bd 09 	call	0x137a	; 0x137a <disp_get_state>
    29b2:	02 97       	sbiw	r24, 0x02	; 2
    29b4:	29 f4       	brne	.+10     	; 0x29c0 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    29be:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    29c8:	08 95       	ret

000029ca <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    29ca:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    29ce:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    29d2:	90 62       	ori	r25, 0x20	; 32
    29d4:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    29d8:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    29dc:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    29e0:	83 36       	cpi	r24, 0x63	; 99
    29e2:	28 f4       	brcc	.+10     	; 0x29ee <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <servo_vibro_value>
		error_servo_timer();
    29ea:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    29ee:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29f8:	61 e0       	ldi	r22, 0x01	; 1
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
    2a00:	08 95       	ret

00002a02 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2a02:	ee ea       	ldi	r30, 0xAE	; 174
    2a04:	f4 e0       	ldi	r31, 0x04	; 4
    2a06:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <motor_value>
    2a0a:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2a0c:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2a10:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2a12:	bf 01       	movw	r22, r30
    2a14:	83 e0       	ldi	r24, 0x03	; 3
    2a16:	0e 94 db 10 	call	0x21b6	; 0x21b6 <mem_save_data>
    2a1a:	08 95       	ret

00002a1c <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a1c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2a20:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2a24:	90 62       	ori	r25, 0x20	; 32
    2a26:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2a2a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	if (motor_value < 10)
    2a2e:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <motor_value>
    2a32:	8a 30       	cpi	r24, 0x0A	; 10
    2a34:	38 f4       	brcc	.+14     	; 0x2a44 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2a3c:	6a e0       	ldi	r22, 0x0A	; 10
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	}
	sys_save_display();
    2a44:	0e 94 01 15 	call	0x2a02	; 0x2a02 <sys_save_display>
	if(!dcmotor_is_on())
    2a48:	0e 94 56 07 	call	0xeac	; 0xeac <dcmotor_is_on>
    2a4c:	89 2b       	or	r24, r25
    2a4e:	39 f4       	brne	.+14     	; 0x2a5e <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2a50:	0e 94 79 07 	call	0xef2	; 0xef2 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2a54:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2a58:	0e 94 2c 12 	call	0x2458	; 0x2458 <servo_delayed_open>
    2a5c:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2a5e:	0e 94 61 07 	call	0xec2	; 0xec2 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2a62:	0e 94 57 12 	call	0x24ae	; 0x24ae <servo_close>
    2a66:	08 95       	ret

00002a68 <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a68:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2a6c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2a70:	90 62       	ori	r25, 0x20	; 32
    2a72:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2a76:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	if (servo_vibro_value < 10)
    2a7a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2a7e:	8a 30       	cpi	r24, 0x0A	; 10
    2a80:	38 f4       	brcc	.+14     	; 0x2a90 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2a82:	8a e0       	ldi	r24, 0x0A	; 10
    2a84:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2a88:	6a e0       	ldi	r22, 0x0A	; 10
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2a90:	0e 94 21 12 	call	0x2442	; 0x2442 <servo_is_open>
    2a94:	89 2b       	or	r24, r25
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <button_on_off_pwm+0x36>
    2a98:	0e 94 57 12 	call	0x24ae	; 0x24ae <servo_close>
    2a9c:	08 95       	ret
	else servo_open(servo_vibro_value);
    2a9e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2aa2:	0e 94 9a 12 	call	0x2534	; 0x2534 <servo_open>
    2aa6:	08 95       	ret

00002aa8 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.fall_callback = button4_toggle_system;
    2aa8:	8d ef       	ldi	r24, 0xFD	; 253
    2aaa:	95 e1       	ldi	r25, 0x15	; 21
    2aac:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <button4+0xc>
    2ab0:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <button4+0xb>
	disp_set_state(DISP_ALL,SEG_OFF);
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
	disp_off_segments();
    2abc:	0e 94 24 0a 	call	0x1448	; 0x1448 <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2ac0:	6c ea       	ldi	r22, 0xAC	; 172
    2ac2:	74 e0       	ldi	r23, 0x04	; 4
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	0e 94 23 11 	call	0x2246	; 0x2246 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2aca:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <mem_last_save+0x1>
    2ace:	96 ef       	ldi	r25, 0xF6	; 246
    2ad0:	98 0f       	add	r25, r24
    2ad2:	9a 35       	cpi	r25, 0x5A	; 90
    2ad4:	10 f4       	brcc	.+4      	; 0x2ada <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2ad6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2ada:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <mem_last_save>
    2ade:	96 ef       	ldi	r25, 0xF6	; 246
    2ae0:	98 0f       	add	r25, r24
    2ae2:	9a 35       	cpi	r25, 0x5A	; 90
    2ae4:	10 f4       	brcc	.+4      	; 0x2aea <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2ae6:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <motor_value>
    2aea:	08 95       	ret

00002aec <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2aec:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2af0:	42 e0       	ldi	r20, 0x02	; 2
    2af2:	68 ee       	ldi	r22, 0xE8	; 232
    2af4:	73 e0       	ldi	r23, 0x03	; 3
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2afe:	0e 94 3c 07 	call	0xe78	; 0xe78 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <servo_init>
	#endif
	error_init();
    2b08:	0e 94 45 0c 	call	0x188a	; 0x188a <error_init>
	init_measure();
    2b0c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <init_measure>
	init_buzzer();
    2b10:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2b1c:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2b20:	ed e3       	ldi	r30, 0x3D	; 61
    2b22:	f4 e0       	ldi	r31, 0x04	; 4
    2b24:	80 ee       	ldi	r24, 0xE0	; 224
    2b26:	93 e1       	ldi	r25, 0x13	; 19
    2b28:	96 87       	std	Z+14, r25	; 0x0e
    2b2a:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2b2c:	82 e4       	ldi	r24, 0x42	; 66
    2b2e:	94 e1       	ldi	r25, 0x14	; 20
    2b30:	94 87       	std	Z+12, r25	; 0x0c
    2b32:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2b34:	8e e9       	ldi	r24, 0x9E	; 158
    2b36:	94 e1       	ldi	r25, 0x14	; 20
    2b38:	92 87       	std	Z+10, r25	; 0x0a
    2b3a:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2b3c:	e0 e1       	ldi	r30, 0x10	; 16
    2b3e:	f4 e0       	ldi	r31, 0x04	; 4
    2b40:	8e ee       	ldi	r24, 0xEE	; 238
    2b42:	93 e1       	ldi	r25, 0x13	; 19
    2b44:	96 87       	std	Z+14, r25	; 0x0e
    2b46:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2b48:	80 e7       	ldi	r24, 0x70	; 112
    2b4a:	94 e1       	ldi	r25, 0x14	; 20
    2b4c:	94 87       	std	Z+12, r25	; 0x0c
    2b4e:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2b50:	81 ec       	ldi	r24, 0xC1	; 193
    2b52:	94 e1       	ldi	r25, 0x14	; 20
    2b54:	92 87       	std	Z+10, r25	; 0x0a
    2b56:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2b58:	8e e0       	ldi	r24, 0x0E	; 14
    2b5a:	95 e1       	ldi	r25, 0x15	; 21
    2b5c:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <button3+0xc>
    2b60:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2b64:	ee ee       	ldi	r30, 0xEE	; 238
    2b66:	f3 e0       	ldi	r31, 0x03	; 3
    2b68:	8c ef       	ldi	r24, 0xFC	; 252
    2b6a:	93 e1       	ldi	r25, 0x13	; 19
    2b6c:	96 87       	std	Z+14, r25	; 0x0e
    2b6e:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2b70:	86 e0       	ldi	r24, 0x06	; 6
    2b72:	94 e1       	ldi	r25, 0x14	; 20
    2b74:	92 87       	std	Z+10, r25	; 0x0a
    2b76:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2b78:	88 e2       	ldi	r24, 0x28	; 40
    2b7a:	94 e1       	ldi	r25, 0x14	; 20
    2b7c:	94 87       	std	Z+12, r25	; 0x0c
    2b7e:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2b80:	ee e2       	ldi	r30, 0x2E	; 46
    2b82:	f4 e0       	ldi	r31, 0x04	; 4
    2b84:	82 e1       	ldi	r24, 0x12	; 18
    2b86:	94 e1       	ldi	r25, 0x14	; 20
    2b88:	96 87       	std	Z+14, r25	; 0x0e
    2b8a:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2b8c:	8c e1       	ldi	r24, 0x1C	; 28
    2b8e:	94 e1       	ldi	r25, 0x14	; 20
    2b90:	92 87       	std	Z+10, r25	; 0x0a
    2b92:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2b94:	85 ee       	ldi	r24, 0xE5	; 229
    2b96:	94 e1       	ldi	r25, 0x14	; 20
    2b98:	94 87       	std	Z+12, r25	; 0x0c
    2b9a:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2b9c:	84 e3       	ldi	r24, 0x34	; 52
    2b9e:	95 e1       	ldi	r25, 0x15	; 21
    2ba0:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <button7+0xc>
    2ba4:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2ba8:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2bb2:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
    2bbc:	08 95       	ret

00002bbe <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2bbe:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <state_measure_volt>
	dcmotorpwm_deinit();
    2bc2:	0e 94 50 07 	call	0xea0	; 0xea0 <dcmotorpwm_deinit>
	off_button();
    2bc6:	0e 94 9f 13 	call	0x273e	; 0x273e <off_button>
	error_deinit();
    2bca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2bce:	0e 94 57 12 	call	0x24ae	; 0x24ae <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2bd2:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <system_events+0x1>
    2bd6:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	0e 94 de 09 	call	0x13bc	; 0x13bc <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2be2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2be6:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2bea:	8e 7f       	andi	r24, 0xFE	; 254
    2bec:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2bf0:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
	#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
	init_menu();
    2bf4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <init_menu>
    2bf8:	08 95       	ret

00002bfa <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2bfa:	0e 94 01 15 	call	0x2a02	; 0x2a02 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2bfe:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2c02:	80 ff       	sbrs	r24, 0
    2c04:	03 c0       	rjmp	.+6      	; 0x2c0c <button4_toggle_system+0x12>
	{
		off_system();
    2c06:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <off_system>
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2c0c:	0e 94 76 15 	call	0x2aec	; 0x2aec <on_system>
	}
	ON_BUZZ_SIGNAL;
    2c10:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2c14:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2c18:	90 62       	ori	r25, 0x20	; 32
    2c1a:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2c1e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
    2c22:	08 95       	ret

00002c24 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2c24:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    2c28:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    2c2c:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    2c30:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    2c34:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <disp_fast_timer.2120>
    2c38:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <disp_fast_timer.2120+0x1>
    2c3c:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <disp_fast_timer.2120+0x2>
    2c40:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <disp_fast_timer.2120+0x3>
    2c44:	84 17       	cp	r24, r20
    2c46:	95 07       	cpc	r25, r21
    2c48:	a6 07       	cpc	r26, r22
    2c4a:	b7 07       	cpc	r27, r23
    2c4c:	08 f0       	brcs	.+2      	; 0x2c50 <disp_fast_process+0x2c>
    2c4e:	a4 c0       	rjmp	.+328    	; 0x2d98 <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2c50:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2c54:	85 ff       	sbrs	r24, 5
    2c56:	21 c0       	rjmp	.+66     	; 0x2c9a <disp_fast_process+0x76>
    2c58:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2c5c:	63 36       	cpi	r22, 0x63	; 99
    2c5e:	e8 f4       	brcc	.+58     	; 0x2c9a <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2c60:	6b 30       	cpi	r22, 0x0B	; 11
    2c62:	40 f0       	brcs	.+16     	; 0x2c74 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2c64:	6f 5f       	subi	r22, 0xFF	; 255
    2c66:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <servo_vibro_value>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
				error_servo_timer();
    2c70:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2c74:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <counter_very_fast_servo_add>
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2c7e:	8f 30       	cpi	r24, 0x0F	; 15
    2c80:	60 f0       	brcs	.+24     	; 0x2c9a <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2c82:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2c86:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2c8a:	8f 7d       	andi	r24, 0xDF	; 223
    2c8c:	80 64       	ori	r24, 0x40	; 64
    2c8e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2c92:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
				counter_very_fast_servo_add = 0;
    2c96:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2c9a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2c9e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2ca2:	91 ff       	sbrs	r25, 1
    2ca4:	21 c0       	rjmp	.+66     	; 0x2ce8 <disp_fast_process+0xc4>
    2ca6:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2caa:	66 23       	and	r22, r22
    2cac:	e9 f0       	breq	.+58     	; 0x2ce8 <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2cae:	6b 30       	cpi	r22, 0x0B	; 11
    2cb0:	40 f0       	brcs	.+16     	; 0x2cc2 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2cb2:	61 50       	subi	r22, 0x01	; 1
    2cb4:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <servo_vibro_value>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
				error_servo_timer();
    2cbe:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2cc2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <counter_very_fast_servo_sub>
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2ccc:	8f 30       	cpi	r24, 0x0F	; 15
    2cce:	60 f0       	brcs	.+24     	; 0x2ce8 <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2cd0:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2cd4:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2cd8:	9d 7f       	andi	r25, 0xFD	; 253
    2cda:	94 60       	ori	r25, 0x04	; 4
    2cdc:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2ce0:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
				counter_very_fast_servo_sub = 0;
    2ce4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2ce8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2cec:	87 ff       	sbrs	r24, 7
    2cee:	1d c0       	rjmp	.+58     	; 0x2d2a <disp_fast_process+0x106>
    2cf0:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2cf4:	63 36       	cpi	r22, 0x63	; 99
    2cf6:	c8 f4       	brcc	.+50     	; 0x2d2a <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2cf8:	6f 5f       	subi	r22, 0xFF	; 255
    2cfa:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <motor_value>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
			counter_very_fast_motor_add++;
    2d04:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <counter_very_fast_motor_add>
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2d0e:	8f 30       	cpi	r24, 0x0F	; 15
    2d10:	60 f0       	brcs	.+24     	; 0x2d2a <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2d12:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2d16:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2d1a:	8f 77       	andi	r24, 0x7F	; 127
    2d1c:	91 60       	ori	r25, 0x01	; 1
    2d1e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2d22:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
				counter_very_fast_motor_add = 0;
    2d26:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2d2a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2d2e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2d32:	93 ff       	sbrs	r25, 3
    2d34:	1d c0       	rjmp	.+58     	; 0x2d70 <disp_fast_process+0x14c>
    2d36:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2d3a:	6b 30       	cpi	r22, 0x0B	; 11
    2d3c:	c8 f0       	brcs	.+50     	; 0x2d70 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2d3e:	61 50       	subi	r22, 0x01	; 1
    2d40:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <motor_value>
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
			counter_very_fast_motor_sub++;
    2d4a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <counter_very_fast_motor_sub>
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2d54:	8f 30       	cpi	r24, 0x0F	; 15
    2d56:	60 f0       	brcs	.+24     	; 0x2d70 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2d58:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2d5c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2d60:	97 7f       	andi	r25, 0xF7	; 247
    2d62:	90 61       	ori	r25, 0x10	; 16
    2d64:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <system_events+0x1>
    2d68:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <system_events>
				counter_very_fast_motor_sub = 0;
    2d6c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2d70:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <disp_fast_timer.2120>
    2d74:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <disp_fast_timer.2120+0x1>
    2d78:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <disp_fast_timer.2120+0x2>
    2d7c:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <disp_fast_timer.2120+0x3>
    2d80:	80 5b       	subi	r24, 0xB0	; 176
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	af 4f       	sbci	r26, 0xFF	; 255
    2d86:	bf 4f       	sbci	r27, 0xFF	; 255
    2d88:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <disp_fast_timer.2120>
    2d8c:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <disp_fast_timer.2120+0x1>
    2d90:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <disp_fast_timer.2120+0x2>
    2d94:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <disp_fast_timer.2120+0x3>
    2d98:	08 95       	ret

00002d9a <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2d9a:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <mktime+0x2>
    2d9e:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <mktime+0x3>
    2da2:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <mktime+0x4>
    2da6:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <mktime+0x5>
    2daa:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_very_fast_timer>
    2dae:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_very_fast_timer+0x1>
    2db2:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_very_fast_timer+0x2>
    2db6:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_very_fast_timer+0x3>
    2dba:	84 17       	cp	r24, r20
    2dbc:	95 07       	cpc	r25, r21
    2dbe:	a6 07       	cpc	r26, r22
    2dc0:	b7 07       	cpc	r27, r23
    2dc2:	08 f0       	brcs	.+2      	; 0x2dc6 <disp_very_fast_process+0x2c>
    2dc4:	57 c0       	rjmp	.+174    	; 0x2e74 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2dc6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <servo_vibro_value>
    2dca:	83 36       	cpi	r24, 0x63	; 99
    2dcc:	70 f4       	brcc	.+28     	; 0x2dea <disp_very_fast_process+0x50>
    2dce:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2dd2:	86 ff       	sbrs	r24, 6
    2dd4:	0a c0       	rjmp	.+20     	; 0x2dea <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2dd6:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2dda:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2dde:	6f 5f       	subi	r22, 0xFF	; 255
    2de0:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <servo_vibro_value>
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2dea:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <servo_vibro_value>
    2dee:	6b 30       	cpi	r22, 0x0B	; 11
    2df0:	70 f0       	brcs	.+28     	; 0x2e0e <disp_very_fast_process+0x74>
    2df2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2df6:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2dfa:	92 ff       	sbrs	r25, 2
    2dfc:	08 c0       	rjmp	.+16     	; 0x2e0e <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2dfe:	61 50       	subi	r22, 0x01	; 1
    2e00:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <servo_vibro_value>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
				error_servo_timer();
    2e0a:	0e 94 6f 0c 	call	0x18de	; 0x18de <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2e0e:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2e12:	63 36       	cpi	r22, 0x63	; 99
    2e14:	60 f4       	brcc	.+24     	; 0x2e2e <disp_very_fast_process+0x94>
    2e16:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2e1a:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2e1e:	90 ff       	sbrs	r25, 0
    2e20:	06 c0       	rjmp	.+12     	; 0x2e2e <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2e22:	6f 5f       	subi	r22, 0xFF	; 255
    2e24:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <motor_value>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2e2e:	60 91 8e 03 	lds	r22, 0x038E	; 0x80038e <motor_value>
    2e32:	6b 30       	cpi	r22, 0x0B	; 11
    2e34:	60 f0       	brcs	.+24     	; 0x2e4e <disp_very_fast_process+0xb4>
    2e36:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <system_events>
    2e3a:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <system_events+0x1>
    2e3e:	94 ff       	sbrs	r25, 4
    2e40:	06 c0       	rjmp	.+12     	; 0x2e4e <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2e42:	61 50       	subi	r22, 0x01	; 1
    2e44:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <motor_value>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 ac 09 	call	0x1358	; 0x1358 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2e4e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_very_fast_timer>
    2e52:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_very_fast_timer+0x1>
    2e56:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_very_fast_timer+0x2>
    2e5a:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_very_fast_timer+0x3>
    2e5e:	4e 96       	adiw	r24, 0x1e	; 30
    2e60:	a1 1d       	adc	r26, r1
    2e62:	b1 1d       	adc	r27, r1
    2e64:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <disp_very_fast_timer>
    2e68:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <disp_very_fast_timer+0x1>
    2e6c:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <disp_very_fast_timer+0x2>
    2e70:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <disp_very_fast_timer+0x3>
    2e74:	08 95       	ret

00002e76 <system_error>:
}


void system_error(void)
{
	off_button();
    2e76:	0e 94 9f 13 	call	0x273e	; 0x273e <off_button>
    2e7a:	08 95       	ret

00002e7c <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	2f 93       	push	r18
    2e88:	3f 93       	push	r19
    2e8a:	4f 93       	push	r20
    2e8c:	5f 93       	push	r21
    2e8e:	6f 93       	push	r22
    2e90:	7f 93       	push	r23
    2e92:	8f 93       	push	r24
    2e94:	9f 93       	push	r25
    2e96:	af 93       	push	r26
    2e98:	bf 93       	push	r27
    2e9a:	ef 93       	push	r30
    2e9c:	ff 93       	push	r31
    2e9e:	e0 eb       	ldi	r30, 0xB0	; 176
    2ea0:	f4 e0       	ldi	r31, 0x04	; 4
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	c2 96       	adiw	r24, 0x32	; 50
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	88 3e       	cpi	r24, 0xE8	; 232
    2eb2:	93 40       	sbci	r25, 0x03	; 3
    2eb4:	88 f0       	brcs	.+34     	; 0x2ed8 <__vector_10+0x5c>
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	a4 81       	ldd	r26, Z+4	; 0x04
    2ebc:	b5 81       	ldd	r27, Z+5	; 0x05
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	a1 1d       	adc	r26, r1
    2ec2:	b1 1d       	adc	r27, r1
    2ec4:	82 83       	std	Z+2, r24	; 0x02
    2ec6:	93 83       	std	Z+3, r25	; 0x03
    2ec8:	a4 83       	std	Z+4, r26	; 0x04
    2eca:	b5 83       	std	Z+5, r27	; 0x05
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	88 5e       	subi	r24, 0xE8	; 232
    2ed2:	93 40       	sbci	r25, 0x03	; 3
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	85 e0       	ldi	r24, 0x05	; 5
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	0e 94 3c 09 	call	0x1278	; 0x1278 <display_process>
    2ee0:	ff 91       	pop	r31
    2ee2:	ef 91       	pop	r30
    2ee4:	bf 91       	pop	r27
    2ee6:	af 91       	pop	r26
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	7f 91       	pop	r23
    2eee:	6f 91       	pop	r22
    2ef0:	5f 91       	pop	r21
    2ef2:	4f 91       	pop	r20
    2ef4:	3f 91       	pop	r19
    2ef6:	2f 91       	pop	r18
    2ef8:	0f 90       	pop	r0
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	0f 90       	pop	r0
    2efe:	1f 90       	pop	r1
    2f00:	18 95       	reti

00002f02 <timer0_init>:
    2f02:	93 b7       	in	r25, 0x33	; 51
    2f04:	98 60       	ori	r25, 0x08	; 8
    2f06:	93 bf       	out	0x33, r25	; 51
    2f08:	6c bf       	out	0x3c, r22	; 60
    2f0a:	82 30       	cpi	r24, 0x02	; 2
    2f0c:	99 f0       	breq	.+38     	; 0x2f34 <timer0_init+0x32>
    2f0e:	28 f4       	brcc	.+10     	; 0x2f1a <timer0_init+0x18>
    2f10:	88 23       	and	r24, r24
    2f12:	41 f0       	breq	.+16     	; 0x2f24 <timer0_init+0x22>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	51 f0       	breq	.+20     	; 0x2f2c <timer0_init+0x2a>
    2f18:	19 c0       	rjmp	.+50     	; 0x2f4c <timer0_init+0x4a>
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	79 f0       	breq	.+30     	; 0x2f3c <timer0_init+0x3a>
    2f1e:	84 30       	cpi	r24, 0x04	; 4
    2f20:	89 f0       	breq	.+34     	; 0x2f44 <timer0_init+0x42>
    2f22:	14 c0       	rjmp	.+40     	; 0x2f4c <timer0_init+0x4a>
    2f24:	83 b7       	in	r24, 0x33	; 51
    2f26:	81 60       	ori	r24, 0x01	; 1
    2f28:	83 bf       	out	0x33, r24	; 51
    2f2a:	13 c0       	rjmp	.+38     	; 0x2f52 <timer0_init+0x50>
    2f2c:	83 b7       	in	r24, 0x33	; 51
    2f2e:	82 60       	ori	r24, 0x02	; 2
    2f30:	83 bf       	out	0x33, r24	; 51
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <timer0_init+0x50>
    2f34:	83 b7       	in	r24, 0x33	; 51
    2f36:	83 60       	ori	r24, 0x03	; 3
    2f38:	83 bf       	out	0x33, r24	; 51
    2f3a:	0b c0       	rjmp	.+22     	; 0x2f52 <timer0_init+0x50>
    2f3c:	83 b7       	in	r24, 0x33	; 51
    2f3e:	84 60       	ori	r24, 0x04	; 4
    2f40:	83 bf       	out	0x33, r24	; 51
    2f42:	07 c0       	rjmp	.+14     	; 0x2f52 <timer0_init+0x50>
    2f44:	83 b7       	in	r24, 0x33	; 51
    2f46:	85 60       	ori	r24, 0x05	; 5
    2f48:	83 bf       	out	0x33, r24	; 51
    2f4a:	03 c0       	rjmp	.+6      	; 0x2f52 <timer0_init+0x50>
    2f4c:	83 b7       	in	r24, 0x33	; 51
    2f4e:	81 60       	ori	r24, 0x01	; 1
    2f50:	83 bf       	out	0x33, r24	; 51
    2f52:	89 b7       	in	r24, 0x39	; 57
    2f54:	82 60       	ori	r24, 0x02	; 2
    2f56:	89 bf       	out	0x39, r24	; 57
    2f58:	08 95       	ret

00002f5a <evTime_init>:
    2f5a:	23 e0       	ldi	r18, 0x03	; 3
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	24 83       	std	Z+4, r18	; 0x04
    2f60:	10 82       	st	Z, r1
    2f62:	11 82       	std	Z+1, r1	; 0x01
    2f64:	12 82       	std	Z+2, r1	; 0x02
    2f66:	13 82       	std	Z+3, r1	; 0x03
    2f68:	08 95       	ret

00002f6a <evTime_start>:
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	21 e0       	ldi	r18, 0x01	; 1
    2f70:	fc 01       	movw	r30, r24
    2f72:	24 83       	std	Z+4, r18	; 0x04
    2f74:	00 91 b2 04 	lds	r16, 0x04B2	; 0x8004b2 <mktime+0x2>
    2f78:	10 91 b3 04 	lds	r17, 0x04B3	; 0x8004b3 <mktime+0x3>
    2f7c:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <mktime+0x4>
    2f80:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <mktime+0x5>
    2f84:	40 0f       	add	r20, r16
    2f86:	51 1f       	adc	r21, r17
    2f88:	62 1f       	adc	r22, r18
    2f8a:	73 1f       	adc	r23, r19
    2f8c:	40 83       	st	Z, r20
    2f8e:	51 83       	std	Z+1, r21	; 0x01
    2f90:	62 83       	std	Z+2, r22	; 0x02
    2f92:	73 83       	std	Z+3, r23	; 0x03
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	08 95       	ret

00002f9a <evTime_is_stated>:
    2f9a:	21 e0       	ldi	r18, 0x01	; 1
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	84 81       	ldd	r24, Z+4	; 0x04
    2fa2:	81 30       	cpi	r24, 0x01	; 1
    2fa4:	11 f0       	breq	.+4      	; 0x2faa <evTime_is_stated+0x10>
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	c9 01       	movw	r24, r18
    2fac:	08 95       	ret

00002fae <evTime_check>:

int evTime_check(evTime * evt)
{
    2fae:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2fb0:	84 81       	ldd	r24, Z+4	; 0x04
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	b1 f4       	brne	.+44     	; 0x2fe2 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2fb6:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <mktime+0x2>
    2fba:	90 91 b3 04 	lds	r25, 0x04B3	; 0x8004b3 <mktime+0x3>
    2fbe:	a0 91 b4 04 	lds	r26, 0x04B4	; 0x8004b4 <mktime+0x4>
    2fc2:	b0 91 b5 04 	lds	r27, 0x04B5	; 0x8004b5 <mktime+0x5>
    2fc6:	40 81       	ld	r20, Z
    2fc8:	51 81       	ldd	r21, Z+1	; 0x01
    2fca:	62 81       	ldd	r22, Z+2	; 0x02
    2fcc:	73 81       	ldd	r23, Z+3	; 0x03
    2fce:	48 17       	cp	r20, r24
    2fd0:	59 07       	cpc	r21, r25
    2fd2:	6a 07       	cpc	r22, r26
    2fd4:	7b 07       	cpc	r23, r27
    2fd6:	40 f4       	brcc	.+16     	; 0x2fe8 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2fe2:	8f ef       	ldi	r24, 0xFF	; 255
    2fe4:	9f ef       	ldi	r25, 0xFF	; 255
    2fe6:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2fec:	08 95       	ret

00002fee <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2fee:	21 e0       	ldi	r18, 0x01	; 1
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	84 81       	ldd	r24, Z+4	; 0x04
    2ff6:	83 30       	cpi	r24, 0x03	; 3
    2ff8:	11 f0       	breq	.+4      	; 0x2ffe <evTime_off+0x10>
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
}
    2ffe:	c9 01       	movw	r24, r18
    3000:	08 95       	ret

00003002 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	ec 01       	movw	r28, r24
    3014:	6a 01       	movw	r12, r20
    3016:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    3018:	8c 81       	ldd	r24, Y+4	; 0x04
    301a:	81 11       	cpse	r24, r1
    301c:	06 c0       	rjmp	.+12     	; 0x302a <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    3022:	18 82       	st	Y, r1
    3024:	19 82       	std	Y+1, r1	; 0x01
    3026:	1a 82       	std	Y+2, r1	; 0x02
    3028:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    302a:	ce 01       	movw	r24, r28
    302c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <evTime_check>
    3030:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	31 f4       	brne	.+12     	; 0x3042 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    3036:	b7 01       	movw	r22, r14
    3038:	a6 01       	movw	r20, r12
    303a:	ce 01       	movw	r24, r28
    303c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
		return 1;
    3040:	0d c0       	rjmp	.+26     	; 0x305c <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	83 30       	cpi	r24, 0x03	; 3
    3046:	41 f4       	brne	.+16     	; 0x3058 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    3048:	b7 01       	movw	r22, r14
    304a:	a6 01       	movw	r20, r12
    304c:	ce 01       	movw	r24, r28
    304e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <evTime_start>
	}
	return 0;
    3052:	00 e0       	ldi	r16, 0x00	; 0
    3054:	10 e0       	ldi	r17, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <evTime_process_period+0x5a>
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	10 e0       	ldi	r17, 0x00	; 0
}
    305c:	c8 01       	movw	r24, r16
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	df 90       	pop	r13
    306c:	cf 90       	pop	r12
    306e:	08 95       	ret

00003070 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    3070:	1f 92       	push	r1
    3072:	0f 92       	push	r0
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	0f 92       	push	r0
    3078:	11 24       	eor	r1, r1
    307a:	2f 93       	push	r18
    307c:	3f 93       	push	r19
    307e:	4f 93       	push	r20
    3080:	5f 93       	push	r21
    3082:	8f 93       	push	r24
    3084:	9f 93       	push	r25
    3086:	ef 93       	push	r30
    3088:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    308a:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    308c:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    308e:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    3090:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <UART_RxHead>
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    3098:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <UART_RxTail>
    309c:	50 e0       	ldi	r21, 0x00	; 0
    309e:	84 17       	cp	r24, r20
    30a0:	95 07       	cpc	r25, r21
    30a2:	39 f0       	breq	.+14     	; 0x30b2 <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    30a4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    30a8:	fc 01       	movw	r30, r24
    30aa:	e4 5f       	subi	r30, 0xF4	; 244
    30ac:	fc 4f       	sbci	r31, 0xFC	; 252
    30ae:	30 83       	st	Z, r19
    30b0:	01 c0       	rjmp	.+2      	; 0x30b4 <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    30b2:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    30b4:	20 93 07 03 	sts	0x0307, r18	; 0x800307 <UART_LastRxError>
}
    30b8:	ff 91       	pop	r31
    30ba:	ef 91       	pop	r30
    30bc:	9f 91       	pop	r25
    30be:	8f 91       	pop	r24
    30c0:	5f 91       	pop	r21
    30c2:	4f 91       	pop	r20
    30c4:	3f 91       	pop	r19
    30c6:	2f 91       	pop	r18
    30c8:	0f 90       	pop	r0
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	0f 90       	pop	r0
    30ce:	1f 90       	pop	r1
    30d0:	18 95       	reti

000030d2 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    30d2:	1f 92       	push	r1
    30d4:	0f 92       	push	r0
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	0f 92       	push	r0
    30da:	11 24       	eor	r1, r1
    30dc:	8f 93       	push	r24
    30de:	9f 93       	push	r25
    30e0:	ef 93       	push	r30
    30e2:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    30e4:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <UART_TxHead>
    30e8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <UART_TxTail>
    30ec:	98 17       	cp	r25, r24
    30ee:	71 f0       	breq	.+28     	; 0x310c <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    30f0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <UART_TxTail>
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	01 96       	adiw	r24, 0x01	; 1
    30f8:	8f 77       	andi	r24, 0x7F	; 127
    30fa:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    30fc:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    3100:	fc 01       	movw	r30, r24
    3102:	e4 5f       	subi	r30, 0xF4	; 244
    3104:	fc 4f       	sbci	r31, 0xFC	; 252
    3106:	80 81       	ld	r24, Z
    3108:	8c b9       	out	0x0c, r24	; 12
    310a:	01 c0       	rjmp	.+2      	; 0x310e <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    310c:	55 98       	cbi	0x0a, 5	; 10
    }
}
    310e:	ff 91       	pop	r31
    3110:	ef 91       	pop	r30
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	0f 90       	pop	r0
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	0f 90       	pop	r0
    311c:	1f 90       	pop	r1
    311e:	18 95       	reti

00003120 <__subsf3>:
    3120:	50 58       	subi	r21, 0x80	; 128

00003122 <__addsf3>:
    3122:	bb 27       	eor	r27, r27
    3124:	aa 27       	eor	r26, r26
    3126:	0e 94 a8 18 	call	0x3150	; 0x3150 <__addsf3x>
    312a:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__fp_round>
    312e:	0e 94 0f 1a 	call	0x341e	; 0x341e <__fp_pscA>
    3132:	38 f0       	brcs	.+14     	; 0x3142 <__addsf3+0x20>
    3134:	0e 94 16 1a 	call	0x342c	; 0x342c <__fp_pscB>
    3138:	20 f0       	brcs	.+8      	; 0x3142 <__addsf3+0x20>
    313a:	39 f4       	brne	.+14     	; 0x314a <__addsf3+0x28>
    313c:	9f 3f       	cpi	r25, 0xFF	; 255
    313e:	19 f4       	brne	.+6      	; 0x3146 <__addsf3+0x24>
    3140:	26 f4       	brtc	.+8      	; 0x314a <__addsf3+0x28>
    3142:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>
    3146:	0e f4       	brtc	.+2      	; 0x314a <__addsf3+0x28>
    3148:	e0 95       	com	r30
    314a:	e7 fb       	bst	r30, 7
    314c:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>

00003150 <__addsf3x>:
    3150:	e9 2f       	mov	r30, r25
    3152:	0e 94 2e 1a 	call	0x345c	; 0x345c <__fp_split3>
    3156:	58 f3       	brcs	.-42     	; 0x312e <__addsf3+0xc>
    3158:	ba 17       	cp	r27, r26
    315a:	62 07       	cpc	r22, r18
    315c:	73 07       	cpc	r23, r19
    315e:	84 07       	cpc	r24, r20
    3160:	95 07       	cpc	r25, r21
    3162:	20 f0       	brcs	.+8      	; 0x316c <__addsf3x+0x1c>
    3164:	79 f4       	brne	.+30     	; 0x3184 <__addsf3x+0x34>
    3166:	a6 f5       	brtc	.+104    	; 0x31d0 <__addsf3x+0x80>
    3168:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_zero>
    316c:	0e f4       	brtc	.+2      	; 0x3170 <__addsf3x+0x20>
    316e:	e0 95       	com	r30
    3170:	0b 2e       	mov	r0, r27
    3172:	ba 2f       	mov	r27, r26
    3174:	a0 2d       	mov	r26, r0
    3176:	0b 01       	movw	r0, r22
    3178:	b9 01       	movw	r22, r18
    317a:	90 01       	movw	r18, r0
    317c:	0c 01       	movw	r0, r24
    317e:	ca 01       	movw	r24, r20
    3180:	a0 01       	movw	r20, r0
    3182:	11 24       	eor	r1, r1
    3184:	ff 27       	eor	r31, r31
    3186:	59 1b       	sub	r21, r25
    3188:	99 f0       	breq	.+38     	; 0x31b0 <__addsf3x+0x60>
    318a:	59 3f       	cpi	r21, 0xF9	; 249
    318c:	50 f4       	brcc	.+20     	; 0x31a2 <__addsf3x+0x52>
    318e:	50 3e       	cpi	r21, 0xE0	; 224
    3190:	68 f1       	brcs	.+90     	; 0x31ec <__addsf3x+0x9c>
    3192:	1a 16       	cp	r1, r26
    3194:	f0 40       	sbci	r31, 0x00	; 0
    3196:	a2 2f       	mov	r26, r18
    3198:	23 2f       	mov	r18, r19
    319a:	34 2f       	mov	r19, r20
    319c:	44 27       	eor	r20, r20
    319e:	58 5f       	subi	r21, 0xF8	; 248
    31a0:	f3 cf       	rjmp	.-26     	; 0x3188 <__addsf3x+0x38>
    31a2:	46 95       	lsr	r20
    31a4:	37 95       	ror	r19
    31a6:	27 95       	ror	r18
    31a8:	a7 95       	ror	r26
    31aa:	f0 40       	sbci	r31, 0x00	; 0
    31ac:	53 95       	inc	r21
    31ae:	c9 f7       	brne	.-14     	; 0x31a2 <__addsf3x+0x52>
    31b0:	7e f4       	brtc	.+30     	; 0x31d0 <__addsf3x+0x80>
    31b2:	1f 16       	cp	r1, r31
    31b4:	ba 0b       	sbc	r27, r26
    31b6:	62 0b       	sbc	r22, r18
    31b8:	73 0b       	sbc	r23, r19
    31ba:	84 0b       	sbc	r24, r20
    31bc:	ba f0       	brmi	.+46     	; 0x31ec <__addsf3x+0x9c>
    31be:	91 50       	subi	r25, 0x01	; 1
    31c0:	a1 f0       	breq	.+40     	; 0x31ea <__addsf3x+0x9a>
    31c2:	ff 0f       	add	r31, r31
    31c4:	bb 1f       	adc	r27, r27
    31c6:	66 1f       	adc	r22, r22
    31c8:	77 1f       	adc	r23, r23
    31ca:	88 1f       	adc	r24, r24
    31cc:	c2 f7       	brpl	.-16     	; 0x31be <__addsf3x+0x6e>
    31ce:	0e c0       	rjmp	.+28     	; 0x31ec <__addsf3x+0x9c>
    31d0:	ba 0f       	add	r27, r26
    31d2:	62 1f       	adc	r22, r18
    31d4:	73 1f       	adc	r23, r19
    31d6:	84 1f       	adc	r24, r20
    31d8:	48 f4       	brcc	.+18     	; 0x31ec <__addsf3x+0x9c>
    31da:	87 95       	ror	r24
    31dc:	77 95       	ror	r23
    31de:	67 95       	ror	r22
    31e0:	b7 95       	ror	r27
    31e2:	f7 95       	ror	r31
    31e4:	9e 3f       	cpi	r25, 0xFE	; 254
    31e6:	08 f0       	brcs	.+2      	; 0x31ea <__addsf3x+0x9a>
    31e8:	b0 cf       	rjmp	.-160    	; 0x314a <__addsf3+0x28>
    31ea:	93 95       	inc	r25
    31ec:	88 0f       	add	r24, r24
    31ee:	08 f0       	brcs	.+2      	; 0x31f2 <__addsf3x+0xa2>
    31f0:	99 27       	eor	r25, r25
    31f2:	ee 0f       	add	r30, r30
    31f4:	97 95       	ror	r25
    31f6:	87 95       	ror	r24
    31f8:	08 95       	ret

000031fa <__divsf3>:
    31fa:	0e 94 11 19 	call	0x3222	; 0x3222 <__divsf3x>
    31fe:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__fp_round>
    3202:	0e 94 16 1a 	call	0x342c	; 0x342c <__fp_pscB>
    3206:	58 f0       	brcs	.+22     	; 0x321e <__divsf3+0x24>
    3208:	0e 94 0f 1a 	call	0x341e	; 0x341e <__fp_pscA>
    320c:	40 f0       	brcs	.+16     	; 0x321e <__divsf3+0x24>
    320e:	29 f4       	brne	.+10     	; 0x321a <__divsf3+0x20>
    3210:	5f 3f       	cpi	r21, 0xFF	; 255
    3212:	29 f0       	breq	.+10     	; 0x321e <__divsf3+0x24>
    3214:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    3218:	51 11       	cpse	r21, r1
    321a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>
    321e:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>

00003222 <__divsf3x>:
    3222:	0e 94 2e 1a 	call	0x345c	; 0x345c <__fp_split3>
    3226:	68 f3       	brcs	.-38     	; 0x3202 <__divsf3+0x8>

00003228 <__divsf3_pse>:
    3228:	99 23       	and	r25, r25
    322a:	b1 f3       	breq	.-20     	; 0x3218 <__divsf3+0x1e>
    322c:	55 23       	and	r21, r21
    322e:	91 f3       	breq	.-28     	; 0x3214 <__divsf3+0x1a>
    3230:	95 1b       	sub	r25, r21
    3232:	55 0b       	sbc	r21, r21
    3234:	bb 27       	eor	r27, r27
    3236:	aa 27       	eor	r26, r26
    3238:	62 17       	cp	r22, r18
    323a:	73 07       	cpc	r23, r19
    323c:	84 07       	cpc	r24, r20
    323e:	38 f0       	brcs	.+14     	; 0x324e <__divsf3_pse+0x26>
    3240:	9f 5f       	subi	r25, 0xFF	; 255
    3242:	5f 4f       	sbci	r21, 0xFF	; 255
    3244:	22 0f       	add	r18, r18
    3246:	33 1f       	adc	r19, r19
    3248:	44 1f       	adc	r20, r20
    324a:	aa 1f       	adc	r26, r26
    324c:	a9 f3       	breq	.-22     	; 0x3238 <__divsf3_pse+0x10>
    324e:	35 d0       	rcall	.+106    	; 0x32ba <__divsf3_pse+0x92>
    3250:	0e 2e       	mov	r0, r30
    3252:	3a f0       	brmi	.+14     	; 0x3262 <__divsf3_pse+0x3a>
    3254:	e0 e8       	ldi	r30, 0x80	; 128
    3256:	32 d0       	rcall	.+100    	; 0x32bc <__divsf3_pse+0x94>
    3258:	91 50       	subi	r25, 0x01	; 1
    325a:	50 40       	sbci	r21, 0x00	; 0
    325c:	e6 95       	lsr	r30
    325e:	00 1c       	adc	r0, r0
    3260:	ca f7       	brpl	.-14     	; 0x3254 <__divsf3_pse+0x2c>
    3262:	2b d0       	rcall	.+86     	; 0x32ba <__divsf3_pse+0x92>
    3264:	fe 2f       	mov	r31, r30
    3266:	29 d0       	rcall	.+82     	; 0x32ba <__divsf3_pse+0x92>
    3268:	66 0f       	add	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	88 1f       	adc	r24, r24
    326e:	bb 1f       	adc	r27, r27
    3270:	26 17       	cp	r18, r22
    3272:	37 07       	cpc	r19, r23
    3274:	48 07       	cpc	r20, r24
    3276:	ab 07       	cpc	r26, r27
    3278:	b0 e8       	ldi	r27, 0x80	; 128
    327a:	09 f0       	breq	.+2      	; 0x327e <__divsf3_pse+0x56>
    327c:	bb 0b       	sbc	r27, r27
    327e:	80 2d       	mov	r24, r0
    3280:	bf 01       	movw	r22, r30
    3282:	ff 27       	eor	r31, r31
    3284:	93 58       	subi	r25, 0x83	; 131
    3286:	5f 4f       	sbci	r21, 0xFF	; 255
    3288:	3a f0       	brmi	.+14     	; 0x3298 <__divsf3_pse+0x70>
    328a:	9e 3f       	cpi	r25, 0xFE	; 254
    328c:	51 05       	cpc	r21, r1
    328e:	78 f0       	brcs	.+30     	; 0x32ae <__divsf3_pse+0x86>
    3290:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    3294:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>
    3298:	5f 3f       	cpi	r21, 0xFF	; 255
    329a:	e4 f3       	brlt	.-8      	; 0x3294 <__divsf3_pse+0x6c>
    329c:	98 3e       	cpi	r25, 0xE8	; 232
    329e:	d4 f3       	brlt	.-12     	; 0x3294 <__divsf3_pse+0x6c>
    32a0:	86 95       	lsr	r24
    32a2:	77 95       	ror	r23
    32a4:	67 95       	ror	r22
    32a6:	b7 95       	ror	r27
    32a8:	f7 95       	ror	r31
    32aa:	9f 5f       	subi	r25, 0xFF	; 255
    32ac:	c9 f7       	brne	.-14     	; 0x32a0 <__divsf3_pse+0x78>
    32ae:	88 0f       	add	r24, r24
    32b0:	91 1d       	adc	r25, r1
    32b2:	96 95       	lsr	r25
    32b4:	87 95       	ror	r24
    32b6:	97 f9       	bld	r25, 7
    32b8:	08 95       	ret
    32ba:	e1 e0       	ldi	r30, 0x01	; 1
    32bc:	66 0f       	add	r22, r22
    32be:	77 1f       	adc	r23, r23
    32c0:	88 1f       	adc	r24, r24
    32c2:	bb 1f       	adc	r27, r27
    32c4:	62 17       	cp	r22, r18
    32c6:	73 07       	cpc	r23, r19
    32c8:	84 07       	cpc	r24, r20
    32ca:	ba 07       	cpc	r27, r26
    32cc:	20 f0       	brcs	.+8      	; 0x32d6 <__divsf3_pse+0xae>
    32ce:	62 1b       	sub	r22, r18
    32d0:	73 0b       	sbc	r23, r19
    32d2:	84 0b       	sbc	r24, r20
    32d4:	ba 0b       	sbc	r27, r26
    32d6:	ee 1f       	adc	r30, r30
    32d8:	88 f7       	brcc	.-30     	; 0x32bc <__divsf3_pse+0x94>
    32da:	e0 95       	com	r30
    32dc:	08 95       	ret

000032de <__fixsfsi>:
    32de:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixunssfsi>
    32e2:	68 94       	set
    32e4:	b1 11       	cpse	r27, r1
    32e6:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>
    32ea:	08 95       	ret

000032ec <__fixunssfsi>:
    32ec:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_splitA>
    32f0:	88 f0       	brcs	.+34     	; 0x3314 <__fixunssfsi+0x28>
    32f2:	9f 57       	subi	r25, 0x7F	; 127
    32f4:	98 f0       	brcs	.+38     	; 0x331c <__fixunssfsi+0x30>
    32f6:	b9 2f       	mov	r27, r25
    32f8:	99 27       	eor	r25, r25
    32fa:	b7 51       	subi	r27, 0x17	; 23
    32fc:	b0 f0       	brcs	.+44     	; 0x332a <__fixunssfsi+0x3e>
    32fe:	e1 f0       	breq	.+56     	; 0x3338 <__fixunssfsi+0x4c>
    3300:	66 0f       	add	r22, r22
    3302:	77 1f       	adc	r23, r23
    3304:	88 1f       	adc	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	1a f0       	brmi	.+6      	; 0x3310 <__fixunssfsi+0x24>
    330a:	ba 95       	dec	r27
    330c:	c9 f7       	brne	.-14     	; 0x3300 <__fixunssfsi+0x14>
    330e:	14 c0       	rjmp	.+40     	; 0x3338 <__fixunssfsi+0x4c>
    3310:	b1 30       	cpi	r27, 0x01	; 1
    3312:	91 f0       	breq	.+36     	; 0x3338 <__fixunssfsi+0x4c>
    3314:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__fp_zero>
    3318:	b1 e0       	ldi	r27, 0x01	; 1
    331a:	08 95       	ret
    331c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_zero>
    3320:	67 2f       	mov	r22, r23
    3322:	78 2f       	mov	r23, r24
    3324:	88 27       	eor	r24, r24
    3326:	b8 5f       	subi	r27, 0xF8	; 248
    3328:	39 f0       	breq	.+14     	; 0x3338 <__fixunssfsi+0x4c>
    332a:	b9 3f       	cpi	r27, 0xF9	; 249
    332c:	cc f3       	brlt	.-14     	; 0x3320 <__fixunssfsi+0x34>
    332e:	86 95       	lsr	r24
    3330:	77 95       	ror	r23
    3332:	67 95       	ror	r22
    3334:	b3 95       	inc	r27
    3336:	d9 f7       	brne	.-10     	; 0x332e <__fixunssfsi+0x42>
    3338:	3e f4       	brtc	.+14     	; 0x3348 <__fixunssfsi+0x5c>
    333a:	90 95       	com	r25
    333c:	80 95       	com	r24
    333e:	70 95       	com	r23
    3340:	61 95       	neg	r22
    3342:	7f 4f       	sbci	r23, 0xFF	; 255
    3344:	8f 4f       	sbci	r24, 0xFF	; 255
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	08 95       	ret

0000334a <__floatunsisf>:
    334a:	e8 94       	clt
    334c:	09 c0       	rjmp	.+18     	; 0x3360 <__floatsisf+0x12>

0000334e <__floatsisf>:
    334e:	97 fb       	bst	r25, 7
    3350:	3e f4       	brtc	.+14     	; 0x3360 <__floatsisf+0x12>
    3352:	90 95       	com	r25
    3354:	80 95       	com	r24
    3356:	70 95       	com	r23
    3358:	61 95       	neg	r22
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	8f 4f       	sbci	r24, 0xFF	; 255
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	99 23       	and	r25, r25
    3362:	a9 f0       	breq	.+42     	; 0x338e <__floatsisf+0x40>
    3364:	f9 2f       	mov	r31, r25
    3366:	96 e9       	ldi	r25, 0x96	; 150
    3368:	bb 27       	eor	r27, r27
    336a:	93 95       	inc	r25
    336c:	f6 95       	lsr	r31
    336e:	87 95       	ror	r24
    3370:	77 95       	ror	r23
    3372:	67 95       	ror	r22
    3374:	b7 95       	ror	r27
    3376:	f1 11       	cpse	r31, r1
    3378:	f8 cf       	rjmp	.-16     	; 0x336a <__floatsisf+0x1c>
    337a:	fa f4       	brpl	.+62     	; 0x33ba <__floatsisf+0x6c>
    337c:	bb 0f       	add	r27, r27
    337e:	11 f4       	brne	.+4      	; 0x3384 <__floatsisf+0x36>
    3380:	60 ff       	sbrs	r22, 0
    3382:	1b c0       	rjmp	.+54     	; 0x33ba <__floatsisf+0x6c>
    3384:	6f 5f       	subi	r22, 0xFF	; 255
    3386:	7f 4f       	sbci	r23, 0xFF	; 255
    3388:	8f 4f       	sbci	r24, 0xFF	; 255
    338a:	9f 4f       	sbci	r25, 0xFF	; 255
    338c:	16 c0       	rjmp	.+44     	; 0x33ba <__floatsisf+0x6c>
    338e:	88 23       	and	r24, r24
    3390:	11 f0       	breq	.+4      	; 0x3396 <__floatsisf+0x48>
    3392:	96 e9       	ldi	r25, 0x96	; 150
    3394:	11 c0       	rjmp	.+34     	; 0x33b8 <__floatsisf+0x6a>
    3396:	77 23       	and	r23, r23
    3398:	21 f0       	breq	.+8      	; 0x33a2 <__floatsisf+0x54>
    339a:	9e e8       	ldi	r25, 0x8E	; 142
    339c:	87 2f       	mov	r24, r23
    339e:	76 2f       	mov	r23, r22
    33a0:	05 c0       	rjmp	.+10     	; 0x33ac <__floatsisf+0x5e>
    33a2:	66 23       	and	r22, r22
    33a4:	71 f0       	breq	.+28     	; 0x33c2 <__floatsisf+0x74>
    33a6:	96 e8       	ldi	r25, 0x86	; 134
    33a8:	86 2f       	mov	r24, r22
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	60 e0       	ldi	r22, 0x00	; 0
    33ae:	2a f0       	brmi	.+10     	; 0x33ba <__floatsisf+0x6c>
    33b0:	9a 95       	dec	r25
    33b2:	66 0f       	add	r22, r22
    33b4:	77 1f       	adc	r23, r23
    33b6:	88 1f       	adc	r24, r24
    33b8:	da f7       	brpl	.-10     	; 0x33b0 <__floatsisf+0x62>
    33ba:	88 0f       	add	r24, r24
    33bc:	96 95       	lsr	r25
    33be:	87 95       	ror	r24
    33c0:	97 f9       	bld	r25, 7
    33c2:	08 95       	ret

000033c4 <__fp_cmp>:
    33c4:	99 0f       	add	r25, r25
    33c6:	00 08       	sbc	r0, r0
    33c8:	55 0f       	add	r21, r21
    33ca:	aa 0b       	sbc	r26, r26
    33cc:	e0 e8       	ldi	r30, 0x80	; 128
    33ce:	fe ef       	ldi	r31, 0xFE	; 254
    33d0:	16 16       	cp	r1, r22
    33d2:	17 06       	cpc	r1, r23
    33d4:	e8 07       	cpc	r30, r24
    33d6:	f9 07       	cpc	r31, r25
    33d8:	c0 f0       	brcs	.+48     	; 0x340a <__fp_cmp+0x46>
    33da:	12 16       	cp	r1, r18
    33dc:	13 06       	cpc	r1, r19
    33de:	e4 07       	cpc	r30, r20
    33e0:	f5 07       	cpc	r31, r21
    33e2:	98 f0       	brcs	.+38     	; 0x340a <__fp_cmp+0x46>
    33e4:	62 1b       	sub	r22, r18
    33e6:	73 0b       	sbc	r23, r19
    33e8:	84 0b       	sbc	r24, r20
    33ea:	95 0b       	sbc	r25, r21
    33ec:	39 f4       	brne	.+14     	; 0x33fc <__fp_cmp+0x38>
    33ee:	0a 26       	eor	r0, r26
    33f0:	61 f0       	breq	.+24     	; 0x340a <__fp_cmp+0x46>
    33f2:	23 2b       	or	r18, r19
    33f4:	24 2b       	or	r18, r20
    33f6:	25 2b       	or	r18, r21
    33f8:	21 f4       	brne	.+8      	; 0x3402 <__fp_cmp+0x3e>
    33fa:	08 95       	ret
    33fc:	0a 26       	eor	r0, r26
    33fe:	09 f4       	brne	.+2      	; 0x3402 <__fp_cmp+0x3e>
    3400:	a1 40       	sbci	r26, 0x01	; 1
    3402:	a6 95       	lsr	r26
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	81 1d       	adc	r24, r1
    3408:	81 1d       	adc	r24, r1
    340a:	08 95       	ret

0000340c <__fp_inf>:
    340c:	97 f9       	bld	r25, 7
    340e:	9f 67       	ori	r25, 0x7F	; 127
    3410:	80 e8       	ldi	r24, 0x80	; 128
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	08 95       	ret

00003418 <__fp_nan>:
    3418:	9f ef       	ldi	r25, 0xFF	; 255
    341a:	80 ec       	ldi	r24, 0xC0	; 192
    341c:	08 95       	ret

0000341e <__fp_pscA>:
    341e:	00 24       	eor	r0, r0
    3420:	0a 94       	dec	r0
    3422:	16 16       	cp	r1, r22
    3424:	17 06       	cpc	r1, r23
    3426:	18 06       	cpc	r1, r24
    3428:	09 06       	cpc	r0, r25
    342a:	08 95       	ret

0000342c <__fp_pscB>:
    342c:	00 24       	eor	r0, r0
    342e:	0a 94       	dec	r0
    3430:	12 16       	cp	r1, r18
    3432:	13 06       	cpc	r1, r19
    3434:	14 06       	cpc	r1, r20
    3436:	05 06       	cpc	r0, r21
    3438:	08 95       	ret

0000343a <__fp_round>:
    343a:	09 2e       	mov	r0, r25
    343c:	03 94       	inc	r0
    343e:	00 0c       	add	r0, r0
    3440:	11 f4       	brne	.+4      	; 0x3446 <__fp_round+0xc>
    3442:	88 23       	and	r24, r24
    3444:	52 f0       	brmi	.+20     	; 0x345a <__fp_round+0x20>
    3446:	bb 0f       	add	r27, r27
    3448:	40 f4       	brcc	.+16     	; 0x345a <__fp_round+0x20>
    344a:	bf 2b       	or	r27, r31
    344c:	11 f4       	brne	.+4      	; 0x3452 <__fp_round+0x18>
    344e:	60 ff       	sbrs	r22, 0
    3450:	04 c0       	rjmp	.+8      	; 0x345a <__fp_round+0x20>
    3452:	6f 5f       	subi	r22, 0xFF	; 255
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	8f 4f       	sbci	r24, 0xFF	; 255
    3458:	9f 4f       	sbci	r25, 0xFF	; 255
    345a:	08 95       	ret

0000345c <__fp_split3>:
    345c:	57 fd       	sbrc	r21, 7
    345e:	90 58       	subi	r25, 0x80	; 128
    3460:	44 0f       	add	r20, r20
    3462:	55 1f       	adc	r21, r21
    3464:	59 f0       	breq	.+22     	; 0x347c <__fp_splitA+0x10>
    3466:	5f 3f       	cpi	r21, 0xFF	; 255
    3468:	71 f0       	breq	.+28     	; 0x3486 <__fp_splitA+0x1a>
    346a:	47 95       	ror	r20

0000346c <__fp_splitA>:
    346c:	88 0f       	add	r24, r24
    346e:	97 fb       	bst	r25, 7
    3470:	99 1f       	adc	r25, r25
    3472:	61 f0       	breq	.+24     	; 0x348c <__fp_splitA+0x20>
    3474:	9f 3f       	cpi	r25, 0xFF	; 255
    3476:	79 f0       	breq	.+30     	; 0x3496 <__fp_splitA+0x2a>
    3478:	87 95       	ror	r24
    347a:	08 95       	ret
    347c:	12 16       	cp	r1, r18
    347e:	13 06       	cpc	r1, r19
    3480:	14 06       	cpc	r1, r20
    3482:	55 1f       	adc	r21, r21
    3484:	f2 cf       	rjmp	.-28     	; 0x346a <__fp_split3+0xe>
    3486:	46 95       	lsr	r20
    3488:	f1 df       	rcall	.-30     	; 0x346c <__fp_splitA>
    348a:	08 c0       	rjmp	.+16     	; 0x349c <__fp_splitA+0x30>
    348c:	16 16       	cp	r1, r22
    348e:	17 06       	cpc	r1, r23
    3490:	18 06       	cpc	r1, r24
    3492:	99 1f       	adc	r25, r25
    3494:	f1 cf       	rjmp	.-30     	; 0x3478 <__fp_splitA+0xc>
    3496:	86 95       	lsr	r24
    3498:	71 05       	cpc	r23, r1
    349a:	61 05       	cpc	r22, r1
    349c:	08 94       	sec
    349e:	08 95       	ret

000034a0 <__fp_zero>:
    34a0:	e8 94       	clt

000034a2 <__fp_szero>:
    34a2:	bb 27       	eor	r27, r27
    34a4:	66 27       	eor	r22, r22
    34a6:	77 27       	eor	r23, r23
    34a8:	cb 01       	movw	r24, r22
    34aa:	97 f9       	bld	r25, 7
    34ac:	08 95       	ret

000034ae <__gesf2>:
    34ae:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fp_cmp>
    34b2:	08 f4       	brcc	.+2      	; 0x34b6 <__gesf2+0x8>
    34b4:	8f ef       	ldi	r24, 0xFF	; 255
    34b6:	08 95       	ret

000034b8 <__mulsf3>:
    34b8:	0e 94 6f 1a 	call	0x34de	; 0x34de <__mulsf3x>
    34bc:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__fp_round>
    34c0:	0e 94 0f 1a 	call	0x341e	; 0x341e <__fp_pscA>
    34c4:	38 f0       	brcs	.+14     	; 0x34d4 <__mulsf3+0x1c>
    34c6:	0e 94 16 1a 	call	0x342c	; 0x342c <__fp_pscB>
    34ca:	20 f0       	brcs	.+8      	; 0x34d4 <__mulsf3+0x1c>
    34cc:	95 23       	and	r25, r21
    34ce:	11 f0       	breq	.+4      	; 0x34d4 <__mulsf3+0x1c>
    34d0:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    34d4:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>
    34d8:	11 24       	eor	r1, r1
    34da:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>

000034de <__mulsf3x>:
    34de:	0e 94 2e 1a 	call	0x345c	; 0x345c <__fp_split3>
    34e2:	70 f3       	brcs	.-36     	; 0x34c0 <__mulsf3+0x8>

000034e4 <__mulsf3_pse>:
    34e4:	95 9f       	mul	r25, r21
    34e6:	c1 f3       	breq	.-16     	; 0x34d8 <__mulsf3+0x20>
    34e8:	95 0f       	add	r25, r21
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	55 1f       	adc	r21, r21
    34ee:	62 9f       	mul	r22, r18
    34f0:	f0 01       	movw	r30, r0
    34f2:	72 9f       	mul	r23, r18
    34f4:	bb 27       	eor	r27, r27
    34f6:	f0 0d       	add	r31, r0
    34f8:	b1 1d       	adc	r27, r1
    34fa:	63 9f       	mul	r22, r19
    34fc:	aa 27       	eor	r26, r26
    34fe:	f0 0d       	add	r31, r0
    3500:	b1 1d       	adc	r27, r1
    3502:	aa 1f       	adc	r26, r26
    3504:	64 9f       	mul	r22, r20
    3506:	66 27       	eor	r22, r22
    3508:	b0 0d       	add	r27, r0
    350a:	a1 1d       	adc	r26, r1
    350c:	66 1f       	adc	r22, r22
    350e:	82 9f       	mul	r24, r18
    3510:	22 27       	eor	r18, r18
    3512:	b0 0d       	add	r27, r0
    3514:	a1 1d       	adc	r26, r1
    3516:	62 1f       	adc	r22, r18
    3518:	73 9f       	mul	r23, r19
    351a:	b0 0d       	add	r27, r0
    351c:	a1 1d       	adc	r26, r1
    351e:	62 1f       	adc	r22, r18
    3520:	83 9f       	mul	r24, r19
    3522:	a0 0d       	add	r26, r0
    3524:	61 1d       	adc	r22, r1
    3526:	22 1f       	adc	r18, r18
    3528:	74 9f       	mul	r23, r20
    352a:	33 27       	eor	r19, r19
    352c:	a0 0d       	add	r26, r0
    352e:	61 1d       	adc	r22, r1
    3530:	23 1f       	adc	r18, r19
    3532:	84 9f       	mul	r24, r20
    3534:	60 0d       	add	r22, r0
    3536:	21 1d       	adc	r18, r1
    3538:	82 2f       	mov	r24, r18
    353a:	76 2f       	mov	r23, r22
    353c:	6a 2f       	mov	r22, r26
    353e:	11 24       	eor	r1, r1
    3540:	9f 57       	subi	r25, 0x7F	; 127
    3542:	50 40       	sbci	r21, 0x00	; 0
    3544:	9a f0       	brmi	.+38     	; 0x356c <__mulsf3_pse+0x88>
    3546:	f1 f0       	breq	.+60     	; 0x3584 <__mulsf3_pse+0xa0>
    3548:	88 23       	and	r24, r24
    354a:	4a f0       	brmi	.+18     	; 0x355e <__mulsf3_pse+0x7a>
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	bb 1f       	adc	r27, r27
    3552:	66 1f       	adc	r22, r22
    3554:	77 1f       	adc	r23, r23
    3556:	88 1f       	adc	r24, r24
    3558:	91 50       	subi	r25, 0x01	; 1
    355a:	50 40       	sbci	r21, 0x00	; 0
    355c:	a9 f7       	brne	.-22     	; 0x3548 <__mulsf3_pse+0x64>
    355e:	9e 3f       	cpi	r25, 0xFE	; 254
    3560:	51 05       	cpc	r21, r1
    3562:	80 f0       	brcs	.+32     	; 0x3584 <__mulsf3_pse+0xa0>
    3564:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    3568:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>
    356c:	5f 3f       	cpi	r21, 0xFF	; 255
    356e:	e4 f3       	brlt	.-8      	; 0x3568 <__mulsf3_pse+0x84>
    3570:	98 3e       	cpi	r25, 0xE8	; 232
    3572:	d4 f3       	brlt	.-12     	; 0x3568 <__mulsf3_pse+0x84>
    3574:	86 95       	lsr	r24
    3576:	77 95       	ror	r23
    3578:	67 95       	ror	r22
    357a:	b7 95       	ror	r27
    357c:	f7 95       	ror	r31
    357e:	e7 95       	ror	r30
    3580:	9f 5f       	subi	r25, 0xFF	; 255
    3582:	c1 f7       	brne	.-16     	; 0x3574 <__mulsf3_pse+0x90>
    3584:	fe 2b       	or	r31, r30
    3586:	88 0f       	add	r24, r24
    3588:	91 1d       	adc	r25, r1
    358a:	96 95       	lsr	r25
    358c:	87 95       	ror	r24
    358e:	97 f9       	bld	r25, 7
    3590:	08 95       	ret

00003592 <pow>:
    3592:	fa 01       	movw	r30, r20
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	30 96       	adiw	r30, 0x00	; 0
    359a:	21 05       	cpc	r18, r1
    359c:	31 05       	cpc	r19, r1
    359e:	a1 f1       	breq	.+104    	; 0x3608 <pow+0x76>
    35a0:	61 15       	cp	r22, r1
    35a2:	71 05       	cpc	r23, r1
    35a4:	61 f4       	brne	.+24     	; 0x35be <pow+0x2c>
    35a6:	80 38       	cpi	r24, 0x80	; 128
    35a8:	bf e3       	ldi	r27, 0x3F	; 63
    35aa:	9b 07       	cpc	r25, r27
    35ac:	49 f1       	breq	.+82     	; 0x3600 <pow+0x6e>
    35ae:	68 94       	set
    35b0:	90 38       	cpi	r25, 0x80	; 128
    35b2:	81 05       	cpc	r24, r1
    35b4:	61 f0       	breq	.+24     	; 0x35ce <pow+0x3c>
    35b6:	80 38       	cpi	r24, 0x80	; 128
    35b8:	bf ef       	ldi	r27, 0xFF	; 255
    35ba:	9b 07       	cpc	r25, r27
    35bc:	41 f0       	breq	.+16     	; 0x35ce <pow+0x3c>
    35be:	99 23       	and	r25, r25
    35c0:	4a f5       	brpl	.+82     	; 0x3614 <pow+0x82>
    35c2:	ff 3f       	cpi	r31, 0xFF	; 255
    35c4:	e1 05       	cpc	r30, r1
    35c6:	31 05       	cpc	r19, r1
    35c8:	21 05       	cpc	r18, r1
    35ca:	19 f1       	breq	.+70     	; 0x3612 <pow+0x80>
    35cc:	e8 94       	clt
    35ce:	08 94       	sec
    35d0:	e7 95       	ror	r30
    35d2:	d9 01       	movw	r26, r18
    35d4:	aa 23       	and	r26, r26
    35d6:	29 f4       	brne	.+10     	; 0x35e2 <pow+0x50>
    35d8:	ab 2f       	mov	r26, r27
    35da:	be 2f       	mov	r27, r30
    35dc:	f8 5f       	subi	r31, 0xF8	; 248
    35de:	d0 f3       	brcs	.-12     	; 0x35d4 <pow+0x42>
    35e0:	10 c0       	rjmp	.+32     	; 0x3602 <pow+0x70>
    35e2:	ff 5f       	subi	r31, 0xFF	; 255
    35e4:	70 f4       	brcc	.+28     	; 0x3602 <pow+0x70>
    35e6:	a6 95       	lsr	r26
    35e8:	e0 f7       	brcc	.-8      	; 0x35e2 <pow+0x50>
    35ea:	f7 39       	cpi	r31, 0x97	; 151
    35ec:	50 f0       	brcs	.+20     	; 0x3602 <pow+0x70>
    35ee:	19 f0       	breq	.+6      	; 0x35f6 <pow+0x64>
    35f0:	ff 3a       	cpi	r31, 0xAF	; 175
    35f2:	38 f4       	brcc	.+14     	; 0x3602 <pow+0x70>
    35f4:	9f 77       	andi	r25, 0x7F	; 127
    35f6:	9f 93       	push	r25
    35f8:	0d d0       	rcall	.+26     	; 0x3614 <pow+0x82>
    35fa:	0f 90       	pop	r0
    35fc:	07 fc       	sbrc	r0, 7
    35fe:	90 58       	subi	r25, 0x80	; 128
    3600:	08 95       	ret
    3602:	46 f0       	brts	.+16     	; 0x3614 <pow+0x82>
    3604:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	80 e8       	ldi	r24, 0x80	; 128
    360e:	9f e3       	ldi	r25, 0x3F	; 63
    3610:	08 95       	ret
    3612:	4f e7       	ldi	r20, 0x7F	; 127
    3614:	9f 77       	andi	r25, 0x7F	; 127
    3616:	5f 93       	push	r21
    3618:	4f 93       	push	r20
    361a:	3f 93       	push	r19
    361c:	2f 93       	push	r18
    361e:	0e 94 c4 1b 	call	0x3788	; 0x3788 <log>
    3622:	2f 91       	pop	r18
    3624:	3f 91       	pop	r19
    3626:	4f 91       	pop	r20
    3628:	5f 91       	pop	r21
    362a:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__mulsf3>
    362e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <exp>
    3632:	29 f4       	brne	.+10     	; 0x363e <pow+0xac>
    3634:	16 f0       	brts	.+4      	; 0x363a <pow+0xa8>
    3636:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    363a:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_zero>
    363e:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>

00003642 <exp>:
    3642:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_splitA>
    3646:	a8 f3       	brcs	.-22     	; 0x3632 <pow+0xa0>
    3648:	96 38       	cpi	r25, 0x86	; 134
    364a:	a0 f7       	brcc	.-24     	; 0x3634 <pow+0xa2>
    364c:	07 f8       	bld	r0, 7
    364e:	0f 92       	push	r0
    3650:	e8 94       	clt
    3652:	2b e3       	ldi	r18, 0x3B	; 59
    3654:	3a ea       	ldi	r19, 0xAA	; 170
    3656:	48 eb       	ldi	r20, 0xB8	; 184
    3658:	5f e7       	ldi	r21, 0x7F	; 127
    365a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__mulsf3_pse>
    365e:	0f 92       	push	r0
    3660:	0f 92       	push	r0
    3662:	0f 92       	push	r0
    3664:	4d b7       	in	r20, 0x3d	; 61
    3666:	5e b7       	in	r21, 0x3e	; 62
    3668:	0f 92       	push	r0
    366a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <modf>
    366e:	e2 e5       	ldi	r30, 0x52	; 82
    3670:	f2 e0       	ldi	r31, 0x02	; 2
    3672:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__fp_powser>
    3676:	4f 91       	pop	r20
    3678:	5f 91       	pop	r21
    367a:	ef 91       	pop	r30
    367c:	ff 91       	pop	r31
    367e:	e5 95       	asr	r30
    3680:	ee 1f       	adc	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	49 f0       	breq	.+18     	; 0x3698 <exp+0x56>
    3686:	fe 57       	subi	r31, 0x7E	; 126
    3688:	e0 68       	ori	r30, 0x80	; 128
    368a:	44 27       	eor	r20, r20
    368c:	ee 0f       	add	r30, r30
    368e:	44 1f       	adc	r20, r20
    3690:	fa 95       	dec	r31
    3692:	e1 f7       	brne	.-8      	; 0x368c <exp+0x4a>
    3694:	41 95       	neg	r20
    3696:	55 0b       	sbc	r21, r21
    3698:	0e 94 86 1b 	call	0x370c	; 0x370c <ldexp>
    369c:	0f 90       	pop	r0
    369e:	07 fe       	sbrs	r0, 7
    36a0:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <inverse>
    36a4:	08 95       	ret

000036a6 <__fp_powser>:
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	1f 93       	push	r17
    36ac:	0f 93       	push	r16
    36ae:	ff 92       	push	r15
    36b0:	ef 92       	push	r14
    36b2:	df 92       	push	r13
    36b4:	7b 01       	movw	r14, r22
    36b6:	8c 01       	movw	r16, r24
    36b8:	68 94       	set
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <__fp_powser+0x22>
    36bc:	da 2e       	mov	r13, r26
    36be:	ef 01       	movw	r28, r30
    36c0:	0e 94 6f 1a 	call	0x34de	; 0x34de <__mulsf3x>
    36c4:	fe 01       	movw	r30, r28
    36c6:	e8 94       	clt
    36c8:	a5 91       	lpm	r26, Z+
    36ca:	25 91       	lpm	r18, Z+
    36cc:	35 91       	lpm	r19, Z+
    36ce:	45 91       	lpm	r20, Z+
    36d0:	55 91       	lpm	r21, Z+
    36d2:	a6 f3       	brts	.-24     	; 0x36bc <__fp_powser+0x16>
    36d4:	ef 01       	movw	r28, r30
    36d6:	0e 94 a8 18 	call	0x3150	; 0x3150 <__addsf3x>
    36da:	fe 01       	movw	r30, r28
    36dc:	97 01       	movw	r18, r14
    36de:	a8 01       	movw	r20, r16
    36e0:	da 94       	dec	r13
    36e2:	69 f7       	brne	.-38     	; 0x36be <__fp_powser+0x18>
    36e4:	df 90       	pop	r13
    36e6:	ef 90       	pop	r14
    36e8:	ff 90       	pop	r15
    36ea:	0f 91       	pop	r16
    36ec:	1f 91       	pop	r17
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <inverse>:
    36f4:	9b 01       	movw	r18, r22
    36f6:	ac 01       	movw	r20, r24
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	80 e8       	ldi	r24, 0x80	; 128
    36fe:	9f e3       	ldi	r25, 0x3F	; 63
    3700:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__divsf3>
    3704:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>
    3708:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_mpack>

0000370c <ldexp>:
    370c:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_splitA>
    3710:	d8 f3       	brcs	.-10     	; 0x3708 <inverse+0x14>
    3712:	99 23       	and	r25, r25
    3714:	c9 f3       	breq	.-14     	; 0x3708 <inverse+0x14>
    3716:	94 0f       	add	r25, r20
    3718:	51 1d       	adc	r21, r1
    371a:	a3 f3       	brvs	.-24     	; 0x3704 <inverse+0x10>
    371c:	91 50       	subi	r25, 0x01	; 1
    371e:	50 40       	sbci	r21, 0x00	; 0
    3720:	94 f0       	brlt	.+36     	; 0x3746 <ldexp+0x3a>
    3722:	59 f0       	breq	.+22     	; 0x373a <ldexp+0x2e>
    3724:	88 23       	and	r24, r24
    3726:	32 f0       	brmi	.+12     	; 0x3734 <ldexp+0x28>
    3728:	66 0f       	add	r22, r22
    372a:	77 1f       	adc	r23, r23
    372c:	88 1f       	adc	r24, r24
    372e:	91 50       	subi	r25, 0x01	; 1
    3730:	50 40       	sbci	r21, 0x00	; 0
    3732:	c1 f7       	brne	.-16     	; 0x3724 <ldexp+0x18>
    3734:	9e 3f       	cpi	r25, 0xFE	; 254
    3736:	51 05       	cpc	r21, r1
    3738:	2c f7       	brge	.-54     	; 0x3704 <inverse+0x10>
    373a:	88 0f       	add	r24, r24
    373c:	91 1d       	adc	r25, r1
    373e:	96 95       	lsr	r25
    3740:	87 95       	ror	r24
    3742:	97 f9       	bld	r25, 7
    3744:	08 95       	ret
    3746:	5f 3f       	cpi	r21, 0xFF	; 255
    3748:	ac f0       	brlt	.+42     	; 0x3774 <ldexp+0x68>
    374a:	98 3e       	cpi	r25, 0xE8	; 232
    374c:	9c f0       	brlt	.+38     	; 0x3774 <ldexp+0x68>
    374e:	bb 27       	eor	r27, r27
    3750:	86 95       	lsr	r24
    3752:	77 95       	ror	r23
    3754:	67 95       	ror	r22
    3756:	b7 95       	ror	r27
    3758:	08 f4       	brcc	.+2      	; 0x375c <ldexp+0x50>
    375a:	b1 60       	ori	r27, 0x01	; 1
    375c:	93 95       	inc	r25
    375e:	c1 f7       	brne	.-16     	; 0x3750 <ldexp+0x44>
    3760:	bb 0f       	add	r27, r27
    3762:	58 f7       	brcc	.-42     	; 0x373a <ldexp+0x2e>
    3764:	11 f4       	brne	.+4      	; 0x376a <ldexp+0x5e>
    3766:	60 ff       	sbrs	r22, 0
    3768:	e8 cf       	rjmp	.-48     	; 0x373a <ldexp+0x2e>
    376a:	6f 5f       	subi	r22, 0xFF	; 255
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	8f 4f       	sbci	r24, 0xFF	; 255
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	e3 cf       	rjmp	.-58     	; 0x373a <ldexp+0x2e>
    3774:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_szero>
    3778:	16 f0       	brts	.+4      	; 0x377e <ldexp+0x72>
    377a:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__fp_mpack>
    377e:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_nan>
    3782:	68 94       	set
    3784:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__fp_inf>

00003788 <log>:
    3788:	0e 94 36 1a 	call	0x346c	; 0x346c <__fp_splitA>
    378c:	a8 f3       	brcs	.-22     	; 0x3778 <ldexp+0x6c>
    378e:	99 23       	and	r25, r25
    3790:	c1 f3       	breq	.-16     	; 0x3782 <ldexp+0x76>
    3792:	ae f3       	brts	.-22     	; 0x377e <ldexp+0x72>
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	1f 93       	push	r17
    379a:	0f 93       	push	r16
    379c:	ff 92       	push	r15
    379e:	c9 2f       	mov	r28, r25
    37a0:	dd 27       	eor	r29, r29
    37a2:	88 23       	and	r24, r24
    37a4:	2a f0       	brmi	.+10     	; 0x37b0 <log+0x28>
    37a6:	21 97       	sbiw	r28, 0x01	; 1
    37a8:	66 0f       	add	r22, r22
    37aa:	77 1f       	adc	r23, r23
    37ac:	88 1f       	adc	r24, r24
    37ae:	da f7       	brpl	.-10     	; 0x37a6 <log+0x1e>
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f eb       	ldi	r21, 0xBF	; 191
    37b8:	9f e3       	ldi	r25, 0x3F	; 63
    37ba:	88 39       	cpi	r24, 0x98	; 152
    37bc:	20 f0       	brcs	.+8      	; 0x37c6 <log+0x3e>
    37be:	80 3e       	cpi	r24, 0xE0	; 224
    37c0:	38 f0       	brcs	.+14     	; 0x37d0 <log+0x48>
    37c2:	21 96       	adiw	r28, 0x01	; 1
    37c4:	8f 77       	andi	r24, 0x7F	; 127
    37c6:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    37ca:	ea e7       	ldi	r30, 0x7A	; 122
    37cc:	f2 e0       	ldi	r31, 0x02	; 2
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <log+0x50>
    37d0:	0e 94 91 18 	call	0x3122	; 0x3122 <__addsf3>
    37d4:	e7 ea       	ldi	r30, 0xA7	; 167
    37d6:	f2 e0       	ldi	r31, 0x02	; 2
    37d8:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__fp_powser>
    37dc:	8b 01       	movw	r16, r22
    37de:	be 01       	movw	r22, r28
    37e0:	ec 01       	movw	r28, r24
    37e2:	fb 2e       	mov	r15, r27
    37e4:	6f 57       	subi	r22, 0x7F	; 127
    37e6:	71 09       	sbc	r23, r1
    37e8:	75 95       	asr	r23
    37ea:	77 1f       	adc	r23, r23
    37ec:	88 0b       	sbc	r24, r24
    37ee:	99 0b       	sbc	r25, r25
    37f0:	0e 94 a7 19 	call	0x334e	; 0x334e <__floatsisf>
    37f4:	28 e1       	ldi	r18, 0x18	; 24
    37f6:	32 e7       	ldi	r19, 0x72	; 114
    37f8:	41 e3       	ldi	r20, 0x31	; 49
    37fa:	5f e3       	ldi	r21, 0x3F	; 63
    37fc:	0e 94 6f 1a 	call	0x34de	; 0x34de <__mulsf3x>
    3800:	af 2d       	mov	r26, r15
    3802:	98 01       	movw	r18, r16
    3804:	ae 01       	movw	r20, r28
    3806:	ff 90       	pop	r15
    3808:	0f 91       	pop	r16
    380a:	1f 91       	pop	r17
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	0e 94 a8 18 	call	0x3150	; 0x3150 <__addsf3x>
    3814:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__fp_round>

00003818 <modf>:
    3818:	fa 01       	movw	r30, r20
    381a:	dc 01       	movw	r26, r24
    381c:	aa 0f       	add	r26, r26
    381e:	bb 1f       	adc	r27, r27
    3820:	9b 01       	movw	r18, r22
    3822:	ac 01       	movw	r20, r24
    3824:	bf 57       	subi	r27, 0x7F	; 127
    3826:	28 f4       	brcc	.+10     	; 0x3832 <modf+0x1a>
    3828:	22 27       	eor	r18, r18
    382a:	33 27       	eor	r19, r19
    382c:	44 27       	eor	r20, r20
    382e:	50 78       	andi	r21, 0x80	; 128
    3830:	20 c0       	rjmp	.+64     	; 0x3872 <modf+0x5a>
    3832:	b7 51       	subi	r27, 0x17	; 23
    3834:	90 f4       	brcc	.+36     	; 0x385a <modf+0x42>
    3836:	ab 2f       	mov	r26, r27
    3838:	00 24       	eor	r0, r0
    383a:	46 95       	lsr	r20
    383c:	37 95       	ror	r19
    383e:	27 95       	ror	r18
    3840:	01 1c       	adc	r0, r1
    3842:	a3 95       	inc	r26
    3844:	d2 f3       	brmi	.-12     	; 0x383a <modf+0x22>
    3846:	00 20       	and	r0, r0
    3848:	71 f0       	breq	.+28     	; 0x3866 <modf+0x4e>
    384a:	22 0f       	add	r18, r18
    384c:	33 1f       	adc	r19, r19
    384e:	44 1f       	adc	r20, r20
    3850:	b3 95       	inc	r27
    3852:	da f3       	brmi	.-10     	; 0x384a <modf+0x32>
    3854:	0e d0       	rcall	.+28     	; 0x3872 <modf+0x5a>
    3856:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__subsf3>
    385a:	61 30       	cpi	r22, 0x01	; 1
    385c:	71 05       	cpc	r23, r1
    385e:	a0 e8       	ldi	r26, 0x80	; 128
    3860:	8a 07       	cpc	r24, r26
    3862:	b9 46       	sbci	r27, 0x69	; 105
    3864:	30 f4       	brcc	.+12     	; 0x3872 <modf+0x5a>
    3866:	9b 01       	movw	r18, r22
    3868:	ac 01       	movw	r20, r24
    386a:	66 27       	eor	r22, r22
    386c:	77 27       	eor	r23, r23
    386e:	88 27       	eor	r24, r24
    3870:	90 78       	andi	r25, 0x80	; 128
    3872:	30 96       	adiw	r30, 0x00	; 0
    3874:	21 f0       	breq	.+8      	; 0x387e <modf+0x66>
    3876:	20 83       	st	Z, r18
    3878:	31 83       	std	Z+1, r19	; 0x01
    387a:	42 83       	std	Z+2, r20	; 0x02
    387c:	53 83       	std	Z+3, r21	; 0x03
    387e:	08 95       	ret

00003880 <__fp_mpack>:
    3880:	9f 3f       	cpi	r25, 0xFF	; 255
    3882:	31 f0       	breq	.+12     	; 0x3890 <__fp_mpack_finite+0xc>

00003884 <__fp_mpack_finite>:
    3884:	91 50       	subi	r25, 0x01	; 1
    3886:	20 f4       	brcc	.+8      	; 0x3890 <__fp_mpack_finite+0xc>
    3888:	87 95       	ror	r24
    388a:	77 95       	ror	r23
    388c:	67 95       	ror	r22
    388e:	b7 95       	ror	r27
    3890:	88 0f       	add	r24, r24
    3892:	91 1d       	adc	r25, r1
    3894:	96 95       	lsr	r25
    3896:	87 95       	ror	r24
    3898:	97 f9       	bld	r25, 7
    389a:	08 95       	ret

0000389c <vfprintf>:
    389c:	a0 e1       	ldi	r26, 0x10	; 16
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e4 e5       	ldi	r30, 0x54	; 84
    38a2:	fc e1       	ldi	r31, 0x1C	; 28
    38a4:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <__prologue_saves__>
    38a8:	7c 01       	movw	r14, r24
    38aa:	1b 01       	movw	r2, r22
    38ac:	6a 01       	movw	r12, r20
    38ae:	fc 01       	movw	r30, r24
    38b0:	17 82       	std	Z+7, r1	; 0x07
    38b2:	16 82       	std	Z+6, r1	; 0x06
    38b4:	83 81       	ldd	r24, Z+3	; 0x03
    38b6:	81 ff       	sbrs	r24, 1
    38b8:	44 c3       	rjmp	.+1672   	; 0x3f42 <vfprintf+0x6a6>
    38ba:	9e 01       	movw	r18, r28
    38bc:	2f 5f       	subi	r18, 0xFF	; 255
    38be:	3f 4f       	sbci	r19, 0xFF	; 255
    38c0:	39 01       	movw	r6, r18
    38c2:	f7 01       	movw	r30, r14
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	f1 01       	movw	r30, r2
    38c8:	93 fd       	sbrc	r25, 3
    38ca:	85 91       	lpm	r24, Z+
    38cc:	93 ff       	sbrs	r25, 3
    38ce:	81 91       	ld	r24, Z+
    38d0:	1f 01       	movw	r2, r30
    38d2:	88 23       	and	r24, r24
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <vfprintf+0x3c>
    38d6:	31 c3       	rjmp	.+1634   	; 0x3f3a <vfprintf+0x69e>
    38d8:	85 32       	cpi	r24, 0x25	; 37
    38da:	39 f4       	brne	.+14     	; 0x38ea <vfprintf+0x4e>
    38dc:	93 fd       	sbrc	r25, 3
    38de:	85 91       	lpm	r24, Z+
    38e0:	93 ff       	sbrs	r25, 3
    38e2:	81 91       	ld	r24, Z+
    38e4:	1f 01       	movw	r2, r30
    38e6:	85 32       	cpi	r24, 0x25	; 37
    38e8:	39 f4       	brne	.+14     	; 0x38f8 <vfprintf+0x5c>
    38ea:	b7 01       	movw	r22, r14
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    38f2:	56 01       	movw	r10, r12
    38f4:	65 01       	movw	r12, r10
    38f6:	e5 cf       	rjmp	.-54     	; 0x38c2 <vfprintf+0x26>
    38f8:	10 e0       	ldi	r17, 0x00	; 0
    38fa:	51 2c       	mov	r5, r1
    38fc:	91 2c       	mov	r9, r1
    38fe:	ff e1       	ldi	r31, 0x1F	; 31
    3900:	f9 15       	cp	r31, r9
    3902:	d8 f0       	brcs	.+54     	; 0x393a <vfprintf+0x9e>
    3904:	8b 32       	cpi	r24, 0x2B	; 43
    3906:	79 f0       	breq	.+30     	; 0x3926 <vfprintf+0x8a>
    3908:	38 f4       	brcc	.+14     	; 0x3918 <vfprintf+0x7c>
    390a:	80 32       	cpi	r24, 0x20	; 32
    390c:	79 f0       	breq	.+30     	; 0x392c <vfprintf+0x90>
    390e:	83 32       	cpi	r24, 0x23	; 35
    3910:	a1 f4       	brne	.+40     	; 0x393a <vfprintf+0x9e>
    3912:	f9 2d       	mov	r31, r9
    3914:	f0 61       	ori	r31, 0x10	; 16
    3916:	2e c0       	rjmp	.+92     	; 0x3974 <vfprintf+0xd8>
    3918:	8d 32       	cpi	r24, 0x2D	; 45
    391a:	61 f0       	breq	.+24     	; 0x3934 <vfprintf+0x98>
    391c:	80 33       	cpi	r24, 0x30	; 48
    391e:	69 f4       	brne	.+26     	; 0x393a <vfprintf+0x9e>
    3920:	29 2d       	mov	r18, r9
    3922:	21 60       	ori	r18, 0x01	; 1
    3924:	2d c0       	rjmp	.+90     	; 0x3980 <vfprintf+0xe4>
    3926:	39 2d       	mov	r19, r9
    3928:	32 60       	ori	r19, 0x02	; 2
    392a:	93 2e       	mov	r9, r19
    392c:	89 2d       	mov	r24, r9
    392e:	84 60       	ori	r24, 0x04	; 4
    3930:	98 2e       	mov	r9, r24
    3932:	2a c0       	rjmp	.+84     	; 0x3988 <vfprintf+0xec>
    3934:	e9 2d       	mov	r30, r9
    3936:	e8 60       	ori	r30, 0x08	; 8
    3938:	15 c0       	rjmp	.+42     	; 0x3964 <vfprintf+0xc8>
    393a:	97 fc       	sbrc	r9, 7
    393c:	2d c0       	rjmp	.+90     	; 0x3998 <vfprintf+0xfc>
    393e:	20 ed       	ldi	r18, 0xD0	; 208
    3940:	28 0f       	add	r18, r24
    3942:	2a 30       	cpi	r18, 0x0A	; 10
    3944:	88 f4       	brcc	.+34     	; 0x3968 <vfprintf+0xcc>
    3946:	96 fe       	sbrs	r9, 6
    3948:	06 c0       	rjmp	.+12     	; 0x3956 <vfprintf+0xba>
    394a:	3a e0       	ldi	r19, 0x0A	; 10
    394c:	13 9f       	mul	r17, r19
    394e:	20 0d       	add	r18, r0
    3950:	11 24       	eor	r1, r1
    3952:	12 2f       	mov	r17, r18
    3954:	19 c0       	rjmp	.+50     	; 0x3988 <vfprintf+0xec>
    3956:	8a e0       	ldi	r24, 0x0A	; 10
    3958:	58 9e       	mul	r5, r24
    395a:	20 0d       	add	r18, r0
    395c:	11 24       	eor	r1, r1
    395e:	52 2e       	mov	r5, r18
    3960:	e9 2d       	mov	r30, r9
    3962:	e0 62       	ori	r30, 0x20	; 32
    3964:	9e 2e       	mov	r9, r30
    3966:	10 c0       	rjmp	.+32     	; 0x3988 <vfprintf+0xec>
    3968:	8e 32       	cpi	r24, 0x2E	; 46
    396a:	31 f4       	brne	.+12     	; 0x3978 <vfprintf+0xdc>
    396c:	96 fc       	sbrc	r9, 6
    396e:	e5 c2       	rjmp	.+1482   	; 0x3f3a <vfprintf+0x69e>
    3970:	f9 2d       	mov	r31, r9
    3972:	f0 64       	ori	r31, 0x40	; 64
    3974:	9f 2e       	mov	r9, r31
    3976:	08 c0       	rjmp	.+16     	; 0x3988 <vfprintf+0xec>
    3978:	8c 36       	cpi	r24, 0x6C	; 108
    397a:	21 f4       	brne	.+8      	; 0x3984 <vfprintf+0xe8>
    397c:	29 2d       	mov	r18, r9
    397e:	20 68       	ori	r18, 0x80	; 128
    3980:	92 2e       	mov	r9, r18
    3982:	02 c0       	rjmp	.+4      	; 0x3988 <vfprintf+0xec>
    3984:	88 36       	cpi	r24, 0x68	; 104
    3986:	41 f4       	brne	.+16     	; 0x3998 <vfprintf+0xfc>
    3988:	f1 01       	movw	r30, r2
    398a:	93 fd       	sbrc	r25, 3
    398c:	85 91       	lpm	r24, Z+
    398e:	93 ff       	sbrs	r25, 3
    3990:	81 91       	ld	r24, Z+
    3992:	1f 01       	movw	r2, r30
    3994:	81 11       	cpse	r24, r1
    3996:	b3 cf       	rjmp	.-154    	; 0x38fe <vfprintf+0x62>
    3998:	9b eb       	ldi	r25, 0xBB	; 187
    399a:	98 0f       	add	r25, r24
    399c:	93 30       	cpi	r25, 0x03	; 3
    399e:	20 f4       	brcc	.+8      	; 0x39a8 <vfprintf+0x10c>
    39a0:	99 2d       	mov	r25, r9
    39a2:	90 61       	ori	r25, 0x10	; 16
    39a4:	80 5e       	subi	r24, 0xE0	; 224
    39a6:	07 c0       	rjmp	.+14     	; 0x39b6 <vfprintf+0x11a>
    39a8:	9b e9       	ldi	r25, 0x9B	; 155
    39aa:	98 0f       	add	r25, r24
    39ac:	93 30       	cpi	r25, 0x03	; 3
    39ae:	08 f0       	brcs	.+2      	; 0x39b2 <vfprintf+0x116>
    39b0:	66 c1       	rjmp	.+716    	; 0x3c7e <vfprintf+0x3e2>
    39b2:	99 2d       	mov	r25, r9
    39b4:	9f 7e       	andi	r25, 0xEF	; 239
    39b6:	96 ff       	sbrs	r25, 6
    39b8:	16 e0       	ldi	r17, 0x06	; 6
    39ba:	9f 73       	andi	r25, 0x3F	; 63
    39bc:	99 2e       	mov	r9, r25
    39be:	85 36       	cpi	r24, 0x65	; 101
    39c0:	19 f4       	brne	.+6      	; 0x39c8 <vfprintf+0x12c>
    39c2:	90 64       	ori	r25, 0x40	; 64
    39c4:	99 2e       	mov	r9, r25
    39c6:	08 c0       	rjmp	.+16     	; 0x39d8 <vfprintf+0x13c>
    39c8:	86 36       	cpi	r24, 0x66	; 102
    39ca:	21 f4       	brne	.+8      	; 0x39d4 <vfprintf+0x138>
    39cc:	39 2f       	mov	r19, r25
    39ce:	30 68       	ori	r19, 0x80	; 128
    39d0:	93 2e       	mov	r9, r19
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <vfprintf+0x13c>
    39d4:	11 11       	cpse	r17, r1
    39d6:	11 50       	subi	r17, 0x01	; 1
    39d8:	97 fe       	sbrs	r9, 7
    39da:	07 c0       	rjmp	.+14     	; 0x39ea <vfprintf+0x14e>
    39dc:	1c 33       	cpi	r17, 0x3C	; 60
    39de:	50 f4       	brcc	.+20     	; 0x39f4 <vfprintf+0x158>
    39e0:	44 24       	eor	r4, r4
    39e2:	43 94       	inc	r4
    39e4:	41 0e       	add	r4, r17
    39e6:	27 e0       	ldi	r18, 0x07	; 7
    39e8:	0b c0       	rjmp	.+22     	; 0x3a00 <vfprintf+0x164>
    39ea:	18 30       	cpi	r17, 0x08	; 8
    39ec:	38 f0       	brcs	.+14     	; 0x39fc <vfprintf+0x160>
    39ee:	27 e0       	ldi	r18, 0x07	; 7
    39f0:	17 e0       	ldi	r17, 0x07	; 7
    39f2:	05 c0       	rjmp	.+10     	; 0x39fe <vfprintf+0x162>
    39f4:	27 e0       	ldi	r18, 0x07	; 7
    39f6:	9c e3       	ldi	r25, 0x3C	; 60
    39f8:	49 2e       	mov	r4, r25
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <vfprintf+0x164>
    39fc:	21 2f       	mov	r18, r17
    39fe:	41 2c       	mov	r4, r1
    3a00:	56 01       	movw	r10, r12
    3a02:	84 e0       	ldi	r24, 0x04	; 4
    3a04:	a8 0e       	add	r10, r24
    3a06:	b1 1c       	adc	r11, r1
    3a08:	f6 01       	movw	r30, r12
    3a0a:	60 81       	ld	r22, Z
    3a0c:	71 81       	ldd	r23, Z+1	; 0x01
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	04 2d       	mov	r16, r4
    3a14:	a3 01       	movw	r20, r6
    3a16:	0e 94 3f 20 	call	0x407e	; 0x407e <__ftoa_engine>
    3a1a:	6c 01       	movw	r12, r24
    3a1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a1e:	fc 87       	std	Y+12, r31	; 0x0c
    3a20:	f0 ff       	sbrs	r31, 0
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <vfprintf+0x18c>
    3a24:	f3 ff       	sbrs	r31, 3
    3a26:	06 c0       	rjmp	.+12     	; 0x3a34 <vfprintf+0x198>
    3a28:	91 fc       	sbrc	r9, 1
    3a2a:	06 c0       	rjmp	.+12     	; 0x3a38 <vfprintf+0x19c>
    3a2c:	92 fe       	sbrs	r9, 2
    3a2e:	06 c0       	rjmp	.+12     	; 0x3a3c <vfprintf+0x1a0>
    3a30:	00 e2       	ldi	r16, 0x20	; 32
    3a32:	05 c0       	rjmp	.+10     	; 0x3a3e <vfprintf+0x1a2>
    3a34:	0d e2       	ldi	r16, 0x2D	; 45
    3a36:	03 c0       	rjmp	.+6      	; 0x3a3e <vfprintf+0x1a2>
    3a38:	0b e2       	ldi	r16, 0x2B	; 43
    3a3a:	01 c0       	rjmp	.+2      	; 0x3a3e <vfprintf+0x1a2>
    3a3c:	00 e0       	ldi	r16, 0x00	; 0
    3a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a40:	8c 70       	andi	r24, 0x0C	; 12
    3a42:	19 f0       	breq	.+6      	; 0x3a4a <vfprintf+0x1ae>
    3a44:	01 11       	cpse	r16, r1
    3a46:	5a c2       	rjmp	.+1204   	; 0x3efc <vfprintf+0x660>
    3a48:	9b c2       	rjmp	.+1334   	; 0x3f80 <vfprintf+0x6e4>
    3a4a:	97 fe       	sbrs	r9, 7
    3a4c:	10 c0       	rjmp	.+32     	; 0x3a6e <vfprintf+0x1d2>
    3a4e:	4c 0c       	add	r4, r12
    3a50:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a52:	f4 ff       	sbrs	r31, 4
    3a54:	04 c0       	rjmp	.+8      	; 0x3a5e <vfprintf+0x1c2>
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	81 33       	cpi	r24, 0x31	; 49
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <vfprintf+0x1c2>
    3a5c:	4a 94       	dec	r4
    3a5e:	14 14       	cp	r1, r4
    3a60:	74 f5       	brge	.+92     	; 0x3abe <vfprintf+0x222>
    3a62:	28 e0       	ldi	r18, 0x08	; 8
    3a64:	24 15       	cp	r18, r4
    3a66:	78 f5       	brcc	.+94     	; 0x3ac6 <vfprintf+0x22a>
    3a68:	88 e0       	ldi	r24, 0x08	; 8
    3a6a:	48 2e       	mov	r4, r24
    3a6c:	2c c0       	rjmp	.+88     	; 0x3ac6 <vfprintf+0x22a>
    3a6e:	96 fc       	sbrc	r9, 6
    3a70:	2a c0       	rjmp	.+84     	; 0x3ac6 <vfprintf+0x22a>
    3a72:	81 2f       	mov	r24, r17
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	8c 15       	cp	r24, r12
    3a78:	9d 05       	cpc	r25, r13
    3a7a:	9c f0       	brlt	.+38     	; 0x3aa2 <vfprintf+0x206>
    3a7c:	3c ef       	ldi	r19, 0xFC	; 252
    3a7e:	c3 16       	cp	r12, r19
    3a80:	3f ef       	ldi	r19, 0xFF	; 255
    3a82:	d3 06       	cpc	r13, r19
    3a84:	74 f0       	brlt	.+28     	; 0x3aa2 <vfprintf+0x206>
    3a86:	89 2d       	mov	r24, r9
    3a88:	80 68       	ori	r24, 0x80	; 128
    3a8a:	98 2e       	mov	r9, r24
    3a8c:	0a c0       	rjmp	.+20     	; 0x3aa2 <vfprintf+0x206>
    3a8e:	e2 e0       	ldi	r30, 0x02	; 2
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	ec 0f       	add	r30, r28
    3a94:	fd 1f       	adc	r31, r29
    3a96:	e1 0f       	add	r30, r17
    3a98:	f1 1d       	adc	r31, r1
    3a9a:	80 81       	ld	r24, Z
    3a9c:	80 33       	cpi	r24, 0x30	; 48
    3a9e:	19 f4       	brne	.+6      	; 0x3aa6 <vfprintf+0x20a>
    3aa0:	11 50       	subi	r17, 0x01	; 1
    3aa2:	11 11       	cpse	r17, r1
    3aa4:	f4 cf       	rjmp	.-24     	; 0x3a8e <vfprintf+0x1f2>
    3aa6:	97 fe       	sbrs	r9, 7
    3aa8:	0e c0       	rjmp	.+28     	; 0x3ac6 <vfprintf+0x22a>
    3aaa:	44 24       	eor	r4, r4
    3aac:	43 94       	inc	r4
    3aae:	41 0e       	add	r4, r17
    3ab0:	81 2f       	mov	r24, r17
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	c8 16       	cp	r12, r24
    3ab6:	d9 06       	cpc	r13, r25
    3ab8:	2c f4       	brge	.+10     	; 0x3ac4 <vfprintf+0x228>
    3aba:	1c 19       	sub	r17, r12
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <vfprintf+0x22a>
    3abe:	44 24       	eor	r4, r4
    3ac0:	43 94       	inc	r4
    3ac2:	01 c0       	rjmp	.+2      	; 0x3ac6 <vfprintf+0x22a>
    3ac4:	10 e0       	ldi	r17, 0x00	; 0
    3ac6:	97 fe       	sbrs	r9, 7
    3ac8:	06 c0       	rjmp	.+12     	; 0x3ad6 <vfprintf+0x23a>
    3aca:	1c 14       	cp	r1, r12
    3acc:	1d 04       	cpc	r1, r13
    3ace:	34 f4       	brge	.+12     	; 0x3adc <vfprintf+0x240>
    3ad0:	c6 01       	movw	r24, r12
    3ad2:	01 96       	adiw	r24, 0x01	; 1
    3ad4:	05 c0       	rjmp	.+10     	; 0x3ae0 <vfprintf+0x244>
    3ad6:	85 e0       	ldi	r24, 0x05	; 5
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <vfprintf+0x244>
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	01 11       	cpse	r16, r1
    3ae2:	01 96       	adiw	r24, 0x01	; 1
    3ae4:	11 23       	and	r17, r17
    3ae6:	31 f0       	breq	.+12     	; 0x3af4 <vfprintf+0x258>
    3ae8:	21 2f       	mov	r18, r17
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	2f 5f       	subi	r18, 0xFF	; 255
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	25 2d       	mov	r18, r5
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	82 17       	cp	r24, r18
    3afa:	93 07       	cpc	r25, r19
    3afc:	14 f4       	brge	.+4      	; 0x3b02 <vfprintf+0x266>
    3afe:	58 1a       	sub	r5, r24
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <vfprintf+0x268>
    3b02:	51 2c       	mov	r5, r1
    3b04:	89 2d       	mov	r24, r9
    3b06:	89 70       	andi	r24, 0x09	; 9
    3b08:	49 f4       	brne	.+18     	; 0x3b1c <vfprintf+0x280>
    3b0a:	55 20       	and	r5, r5
    3b0c:	39 f0       	breq	.+14     	; 0x3b1c <vfprintf+0x280>
    3b0e:	b7 01       	movw	r22, r14
    3b10:	80 e2       	ldi	r24, 0x20	; 32
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3b18:	5a 94       	dec	r5
    3b1a:	f7 cf       	rjmp	.-18     	; 0x3b0a <vfprintf+0x26e>
    3b1c:	00 23       	and	r16, r16
    3b1e:	29 f0       	breq	.+10     	; 0x3b2a <vfprintf+0x28e>
    3b20:	b7 01       	movw	r22, r14
    3b22:	80 2f       	mov	r24, r16
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3b2a:	93 fc       	sbrc	r9, 3
    3b2c:	09 c0       	rjmp	.+18     	; 0x3b40 <vfprintf+0x2a4>
    3b2e:	55 20       	and	r5, r5
    3b30:	39 f0       	breq	.+14     	; 0x3b40 <vfprintf+0x2a4>
    3b32:	b7 01       	movw	r22, r14
    3b34:	80 e3       	ldi	r24, 0x30	; 48
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3b3c:	5a 94       	dec	r5
    3b3e:	f7 cf       	rjmp	.-18     	; 0x3b2e <vfprintf+0x292>
    3b40:	97 fe       	sbrs	r9, 7
    3b42:	4c c0       	rjmp	.+152    	; 0x3bdc <vfprintf+0x340>
    3b44:	46 01       	movw	r8, r12
    3b46:	d7 fe       	sbrs	r13, 7
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <vfprintf+0x2b2>
    3b4a:	81 2c       	mov	r8, r1
    3b4c:	91 2c       	mov	r9, r1
    3b4e:	c6 01       	movw	r24, r12
    3b50:	88 19       	sub	r24, r8
    3b52:	99 09       	sbc	r25, r9
    3b54:	f3 01       	movw	r30, r6
    3b56:	e8 0f       	add	r30, r24
    3b58:	f9 1f       	adc	r31, r25
    3b5a:	fe 87       	std	Y+14, r31	; 0x0e
    3b5c:	ed 87       	std	Y+13, r30	; 0x0d
    3b5e:	96 01       	movw	r18, r12
    3b60:	24 19       	sub	r18, r4
    3b62:	31 09       	sbc	r19, r1
    3b64:	38 8b       	std	Y+16, r19	; 0x10
    3b66:	2f 87       	std	Y+15, r18	; 0x0f
    3b68:	01 2f       	mov	r16, r17
    3b6a:	10 e0       	ldi	r17, 0x00	; 0
    3b6c:	11 95       	neg	r17
    3b6e:	01 95       	neg	r16
    3b70:	11 09       	sbc	r17, r1
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	83 16       	cp	r8, r19
    3b76:	93 06       	cpc	r9, r19
    3b78:	29 f4       	brne	.+10     	; 0x3b84 <vfprintf+0x2e8>
    3b7a:	b7 01       	movw	r22, r14
    3b7c:	8e e2       	ldi	r24, 0x2E	; 46
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3b84:	c8 14       	cp	r12, r8
    3b86:	d9 04       	cpc	r13, r9
    3b88:	4c f0       	brlt	.+18     	; 0x3b9c <vfprintf+0x300>
    3b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b8c:	98 89       	ldd	r25, Y+16	; 0x10
    3b8e:	88 15       	cp	r24, r8
    3b90:	99 05       	cpc	r25, r9
    3b92:	24 f4       	brge	.+8      	; 0x3b9c <vfprintf+0x300>
    3b94:	ed 85       	ldd	r30, Y+13	; 0x0d
    3b96:	fe 85       	ldd	r31, Y+14	; 0x0e
    3b98:	81 81       	ldd	r24, Z+1	; 0x01
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <vfprintf+0x302>
    3b9c:	80 e3       	ldi	r24, 0x30	; 48
    3b9e:	f1 e0       	ldi	r31, 0x01	; 1
    3ba0:	8f 1a       	sub	r8, r31
    3ba2:	91 08       	sbc	r9, r1
    3ba4:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ba6:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ba8:	2f 5f       	subi	r18, 0xFF	; 255
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bac:	3e 87       	std	Y+14, r19	; 0x0e
    3bae:	2d 87       	std	Y+13, r18	; 0x0d
    3bb0:	80 16       	cp	r8, r16
    3bb2:	91 06       	cpc	r9, r17
    3bb4:	2c f0       	brlt	.+10     	; 0x3bc0 <vfprintf+0x324>
    3bb6:	b7 01       	movw	r22, r14
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3bbe:	d9 cf       	rjmp	.-78     	; 0x3b72 <vfprintf+0x2d6>
    3bc0:	c8 14       	cp	r12, r8
    3bc2:	d9 04       	cpc	r13, r9
    3bc4:	41 f4       	brne	.+16     	; 0x3bd6 <vfprintf+0x33a>
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	96 33       	cpi	r25, 0x36	; 54
    3bca:	20 f4       	brcc	.+8      	; 0x3bd4 <vfprintf+0x338>
    3bcc:	95 33       	cpi	r25, 0x35	; 53
    3bce:	19 f4       	brne	.+6      	; 0x3bd6 <vfprintf+0x33a>
    3bd0:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bd2:	34 ff       	sbrs	r19, 4
    3bd4:	81 e3       	ldi	r24, 0x31	; 49
    3bd6:	b7 01       	movw	r22, r14
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	4e c0       	rjmp	.+156    	; 0x3c78 <vfprintf+0x3dc>
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	81 33       	cpi	r24, 0x31	; 49
    3be0:	19 f0       	breq	.+6      	; 0x3be8 <vfprintf+0x34c>
    3be2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3be4:	9f 7e       	andi	r25, 0xEF	; 239
    3be6:	9c 87       	std	Y+12, r25	; 0x0c
    3be8:	b7 01       	movw	r22, r14
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3bf0:	11 11       	cpse	r17, r1
    3bf2:	05 c0       	rjmp	.+10     	; 0x3bfe <vfprintf+0x362>
    3bf4:	94 fc       	sbrc	r9, 4
    3bf6:	18 c0       	rjmp	.+48     	; 0x3c28 <vfprintf+0x38c>
    3bf8:	85 e6       	ldi	r24, 0x65	; 101
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	17 c0       	rjmp	.+46     	; 0x3c2c <vfprintf+0x390>
    3bfe:	b7 01       	movw	r22, r14
    3c00:	8e e2       	ldi	r24, 0x2E	; 46
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c08:	1e 5f       	subi	r17, 0xFE	; 254
    3c0a:	82 e0       	ldi	r24, 0x02	; 2
    3c0c:	01 e0       	ldi	r16, 0x01	; 1
    3c0e:	08 0f       	add	r16, r24
    3c10:	f3 01       	movw	r30, r6
    3c12:	e8 0f       	add	r30, r24
    3c14:	f1 1d       	adc	r31, r1
    3c16:	80 81       	ld	r24, Z
    3c18:	b7 01       	movw	r22, r14
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c20:	80 2f       	mov	r24, r16
    3c22:	01 13       	cpse	r16, r17
    3c24:	f3 cf       	rjmp	.-26     	; 0x3c0c <vfprintf+0x370>
    3c26:	e6 cf       	rjmp	.-52     	; 0x3bf4 <vfprintf+0x358>
    3c28:	85 e4       	ldi	r24, 0x45	; 69
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c32:	d7 fc       	sbrc	r13, 7
    3c34:	06 c0       	rjmp	.+12     	; 0x3c42 <vfprintf+0x3a6>
    3c36:	c1 14       	cp	r12, r1
    3c38:	d1 04       	cpc	r13, r1
    3c3a:	41 f4       	brne	.+16     	; 0x3c4c <vfprintf+0x3b0>
    3c3c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c3e:	e4 ff       	sbrs	r30, 4
    3c40:	05 c0       	rjmp	.+10     	; 0x3c4c <vfprintf+0x3b0>
    3c42:	d1 94       	neg	r13
    3c44:	c1 94       	neg	r12
    3c46:	d1 08       	sbc	r13, r1
    3c48:	8d e2       	ldi	r24, 0x2D	; 45
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <vfprintf+0x3b2>
    3c4c:	8b e2       	ldi	r24, 0x2B	; 43
    3c4e:	b7 01       	movw	r22, r14
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c56:	80 e3       	ldi	r24, 0x30	; 48
    3c58:	2a e0       	ldi	r18, 0x0A	; 10
    3c5a:	c2 16       	cp	r12, r18
    3c5c:	d1 04       	cpc	r13, r1
    3c5e:	2c f0       	brlt	.+10     	; 0x3c6a <vfprintf+0x3ce>
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	fa e0       	ldi	r31, 0x0A	; 10
    3c64:	cf 1a       	sub	r12, r31
    3c66:	d1 08       	sbc	r13, r1
    3c68:	f7 cf       	rjmp	.-18     	; 0x3c58 <vfprintf+0x3bc>
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c72:	b7 01       	movw	r22, r14
    3c74:	c6 01       	movw	r24, r12
    3c76:	c0 96       	adiw	r24, 0x30	; 48
    3c78:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3c7c:	54 c1       	rjmp	.+680    	; 0x3f26 <vfprintf+0x68a>
    3c7e:	83 36       	cpi	r24, 0x63	; 99
    3c80:	31 f0       	breq	.+12     	; 0x3c8e <vfprintf+0x3f2>
    3c82:	83 37       	cpi	r24, 0x73	; 115
    3c84:	79 f0       	breq	.+30     	; 0x3ca4 <vfprintf+0x408>
    3c86:	83 35       	cpi	r24, 0x53	; 83
    3c88:	09 f0       	breq	.+2      	; 0x3c8c <vfprintf+0x3f0>
    3c8a:	56 c0       	rjmp	.+172    	; 0x3d38 <vfprintf+0x49c>
    3c8c:	20 c0       	rjmp	.+64     	; 0x3cce <vfprintf+0x432>
    3c8e:	56 01       	movw	r10, r12
    3c90:	32 e0       	ldi	r19, 0x02	; 2
    3c92:	a3 0e       	add	r10, r19
    3c94:	b1 1c       	adc	r11, r1
    3c96:	f6 01       	movw	r30, r12
    3c98:	80 81       	ld	r24, Z
    3c9a:	89 83       	std	Y+1, r24	; 0x01
    3c9c:	01 e0       	ldi	r16, 0x01	; 1
    3c9e:	10 e0       	ldi	r17, 0x00	; 0
    3ca0:	63 01       	movw	r12, r6
    3ca2:	12 c0       	rjmp	.+36     	; 0x3cc8 <vfprintf+0x42c>
    3ca4:	56 01       	movw	r10, r12
    3ca6:	f2 e0       	ldi	r31, 0x02	; 2
    3ca8:	af 0e       	add	r10, r31
    3caa:	b1 1c       	adc	r11, r1
    3cac:	f6 01       	movw	r30, r12
    3cae:	c0 80       	ld	r12, Z
    3cb0:	d1 80       	ldd	r13, Z+1	; 0x01
    3cb2:	96 fe       	sbrs	r9, 6
    3cb4:	03 c0       	rjmp	.+6      	; 0x3cbc <vfprintf+0x420>
    3cb6:	61 2f       	mov	r22, r17
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	02 c0       	rjmp	.+4      	; 0x3cc0 <vfprintf+0x424>
    3cbc:	6f ef       	ldi	r22, 0xFF	; 255
    3cbe:	7f ef       	ldi	r23, 0xFF	; 255
    3cc0:	c6 01       	movw	r24, r12
    3cc2:	0e 94 2f 21 	call	0x425e	; 0x425e <strnlen>
    3cc6:	8c 01       	movw	r16, r24
    3cc8:	f9 2d       	mov	r31, r9
    3cca:	ff 77       	andi	r31, 0x7F	; 127
    3ccc:	14 c0       	rjmp	.+40     	; 0x3cf6 <vfprintf+0x45a>
    3cce:	56 01       	movw	r10, r12
    3cd0:	22 e0       	ldi	r18, 0x02	; 2
    3cd2:	a2 0e       	add	r10, r18
    3cd4:	b1 1c       	adc	r11, r1
    3cd6:	f6 01       	movw	r30, r12
    3cd8:	c0 80       	ld	r12, Z
    3cda:	d1 80       	ldd	r13, Z+1	; 0x01
    3cdc:	96 fe       	sbrs	r9, 6
    3cde:	03 c0       	rjmp	.+6      	; 0x3ce6 <vfprintf+0x44a>
    3ce0:	61 2f       	mov	r22, r17
    3ce2:	70 e0       	ldi	r23, 0x00	; 0
    3ce4:	02 c0       	rjmp	.+4      	; 0x3cea <vfprintf+0x44e>
    3ce6:	6f ef       	ldi	r22, 0xFF	; 255
    3ce8:	7f ef       	ldi	r23, 0xFF	; 255
    3cea:	c6 01       	movw	r24, r12
    3cec:	0e 94 17 21 	call	0x422e	; 0x422e <strnlen_P>
    3cf0:	8c 01       	movw	r16, r24
    3cf2:	f9 2d       	mov	r31, r9
    3cf4:	f0 68       	ori	r31, 0x80	; 128
    3cf6:	9f 2e       	mov	r9, r31
    3cf8:	f3 fd       	sbrc	r31, 3
    3cfa:	1a c0       	rjmp	.+52     	; 0x3d30 <vfprintf+0x494>
    3cfc:	85 2d       	mov	r24, r5
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	08 17       	cp	r16, r24
    3d02:	19 07       	cpc	r17, r25
    3d04:	a8 f4       	brcc	.+42     	; 0x3d30 <vfprintf+0x494>
    3d06:	b7 01       	movw	r22, r14
    3d08:	80 e2       	ldi	r24, 0x20	; 32
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3d10:	5a 94       	dec	r5
    3d12:	f4 cf       	rjmp	.-24     	; 0x3cfc <vfprintf+0x460>
    3d14:	f6 01       	movw	r30, r12
    3d16:	97 fc       	sbrc	r9, 7
    3d18:	85 91       	lpm	r24, Z+
    3d1a:	97 fe       	sbrs	r9, 7
    3d1c:	81 91       	ld	r24, Z+
    3d1e:	6f 01       	movw	r12, r30
    3d20:	b7 01       	movw	r22, r14
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3d28:	51 10       	cpse	r5, r1
    3d2a:	5a 94       	dec	r5
    3d2c:	01 50       	subi	r16, 0x01	; 1
    3d2e:	11 09       	sbc	r17, r1
    3d30:	01 15       	cp	r16, r1
    3d32:	11 05       	cpc	r17, r1
    3d34:	79 f7       	brne	.-34     	; 0x3d14 <vfprintf+0x478>
    3d36:	f7 c0       	rjmp	.+494    	; 0x3f26 <vfprintf+0x68a>
    3d38:	84 36       	cpi	r24, 0x64	; 100
    3d3a:	11 f0       	breq	.+4      	; 0x3d40 <vfprintf+0x4a4>
    3d3c:	89 36       	cpi	r24, 0x69	; 105
    3d3e:	61 f5       	brne	.+88     	; 0x3d98 <vfprintf+0x4fc>
    3d40:	56 01       	movw	r10, r12
    3d42:	97 fe       	sbrs	r9, 7
    3d44:	09 c0       	rjmp	.+18     	; 0x3d58 <vfprintf+0x4bc>
    3d46:	24 e0       	ldi	r18, 0x04	; 4
    3d48:	a2 0e       	add	r10, r18
    3d4a:	b1 1c       	adc	r11, r1
    3d4c:	f6 01       	movw	r30, r12
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	0a c0       	rjmp	.+20     	; 0x3d6c <vfprintf+0x4d0>
    3d58:	f2 e0       	ldi	r31, 0x02	; 2
    3d5a:	af 0e       	add	r10, r31
    3d5c:	b1 1c       	adc	r11, r1
    3d5e:	f6 01       	movw	r30, r12
    3d60:	60 81       	ld	r22, Z
    3d62:	71 81       	ldd	r23, Z+1	; 0x01
    3d64:	07 2e       	mov	r0, r23
    3d66:	00 0c       	add	r0, r0
    3d68:	88 0b       	sbc	r24, r24
    3d6a:	99 0b       	sbc	r25, r25
    3d6c:	f9 2d       	mov	r31, r9
    3d6e:	ff 76       	andi	r31, 0x6F	; 111
    3d70:	9f 2e       	mov	r9, r31
    3d72:	97 ff       	sbrs	r25, 7
    3d74:	09 c0       	rjmp	.+18     	; 0x3d88 <vfprintf+0x4ec>
    3d76:	90 95       	com	r25
    3d78:	80 95       	com	r24
    3d7a:	70 95       	com	r23
    3d7c:	61 95       	neg	r22
    3d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d80:	8f 4f       	sbci	r24, 0xFF	; 255
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	f0 68       	ori	r31, 0x80	; 128
    3d86:	9f 2e       	mov	r9, r31
    3d88:	2a e0       	ldi	r18, 0x0A	; 10
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	a3 01       	movw	r20, r6
    3d8e:	0e 94 92 21 	call	0x4324	; 0x4324 <__ultoa_invert>
    3d92:	c8 2e       	mov	r12, r24
    3d94:	c6 18       	sub	r12, r6
    3d96:	3f c0       	rjmp	.+126    	; 0x3e16 <vfprintf+0x57a>
    3d98:	09 2d       	mov	r16, r9
    3d9a:	85 37       	cpi	r24, 0x75	; 117
    3d9c:	21 f4       	brne	.+8      	; 0x3da6 <vfprintf+0x50a>
    3d9e:	0f 7e       	andi	r16, 0xEF	; 239
    3da0:	2a e0       	ldi	r18, 0x0A	; 10
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	1d c0       	rjmp	.+58     	; 0x3de0 <vfprintf+0x544>
    3da6:	09 7f       	andi	r16, 0xF9	; 249
    3da8:	8f 36       	cpi	r24, 0x6F	; 111
    3daa:	91 f0       	breq	.+36     	; 0x3dd0 <vfprintf+0x534>
    3dac:	18 f4       	brcc	.+6      	; 0x3db4 <vfprintf+0x518>
    3dae:	88 35       	cpi	r24, 0x58	; 88
    3db0:	59 f0       	breq	.+22     	; 0x3dc8 <vfprintf+0x52c>
    3db2:	c3 c0       	rjmp	.+390    	; 0x3f3a <vfprintf+0x69e>
    3db4:	80 37       	cpi	r24, 0x70	; 112
    3db6:	19 f0       	breq	.+6      	; 0x3dbe <vfprintf+0x522>
    3db8:	88 37       	cpi	r24, 0x78	; 120
    3dba:	11 f0       	breq	.+4      	; 0x3dc0 <vfprintf+0x524>
    3dbc:	be c0       	rjmp	.+380    	; 0x3f3a <vfprintf+0x69e>
    3dbe:	00 61       	ori	r16, 0x10	; 16
    3dc0:	04 ff       	sbrs	r16, 4
    3dc2:	09 c0       	rjmp	.+18     	; 0x3dd6 <vfprintf+0x53a>
    3dc4:	04 60       	ori	r16, 0x04	; 4
    3dc6:	07 c0       	rjmp	.+14     	; 0x3dd6 <vfprintf+0x53a>
    3dc8:	94 fe       	sbrs	r9, 4
    3dca:	08 c0       	rjmp	.+16     	; 0x3ddc <vfprintf+0x540>
    3dcc:	06 60       	ori	r16, 0x06	; 6
    3dce:	06 c0       	rjmp	.+12     	; 0x3ddc <vfprintf+0x540>
    3dd0:	28 e0       	ldi	r18, 0x08	; 8
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	05 c0       	rjmp	.+10     	; 0x3de0 <vfprintf+0x544>
    3dd6:	20 e1       	ldi	r18, 0x10	; 16
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	02 c0       	rjmp	.+4      	; 0x3de0 <vfprintf+0x544>
    3ddc:	20 e1       	ldi	r18, 0x10	; 16
    3dde:	32 e0       	ldi	r19, 0x02	; 2
    3de0:	56 01       	movw	r10, r12
    3de2:	07 ff       	sbrs	r16, 7
    3de4:	09 c0       	rjmp	.+18     	; 0x3df8 <vfprintf+0x55c>
    3de6:	84 e0       	ldi	r24, 0x04	; 4
    3de8:	a8 0e       	add	r10, r24
    3dea:	b1 1c       	adc	r11, r1
    3dec:	f6 01       	movw	r30, r12
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	08 c0       	rjmp	.+16     	; 0x3e08 <vfprintf+0x56c>
    3df8:	f2 e0       	ldi	r31, 0x02	; 2
    3dfa:	af 0e       	add	r10, r31
    3dfc:	b1 1c       	adc	r11, r1
    3dfe:	f6 01       	movw	r30, r12
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	a3 01       	movw	r20, r6
    3e0a:	0e 94 92 21 	call	0x4324	; 0x4324 <__ultoa_invert>
    3e0e:	c8 2e       	mov	r12, r24
    3e10:	c6 18       	sub	r12, r6
    3e12:	0f 77       	andi	r16, 0x7F	; 127
    3e14:	90 2e       	mov	r9, r16
    3e16:	96 fe       	sbrs	r9, 6
    3e18:	0b c0       	rjmp	.+22     	; 0x3e30 <vfprintf+0x594>
    3e1a:	09 2d       	mov	r16, r9
    3e1c:	0e 7f       	andi	r16, 0xFE	; 254
    3e1e:	c1 16       	cp	r12, r17
    3e20:	50 f4       	brcc	.+20     	; 0x3e36 <vfprintf+0x59a>
    3e22:	94 fe       	sbrs	r9, 4
    3e24:	0a c0       	rjmp	.+20     	; 0x3e3a <vfprintf+0x59e>
    3e26:	92 fc       	sbrc	r9, 2
    3e28:	08 c0       	rjmp	.+16     	; 0x3e3a <vfprintf+0x59e>
    3e2a:	09 2d       	mov	r16, r9
    3e2c:	0e 7e       	andi	r16, 0xEE	; 238
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <vfprintf+0x59e>
    3e30:	dc 2c       	mov	r13, r12
    3e32:	09 2d       	mov	r16, r9
    3e34:	03 c0       	rjmp	.+6      	; 0x3e3c <vfprintf+0x5a0>
    3e36:	dc 2c       	mov	r13, r12
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <vfprintf+0x5a0>
    3e3a:	d1 2e       	mov	r13, r17
    3e3c:	04 ff       	sbrs	r16, 4
    3e3e:	0d c0       	rjmp	.+26     	; 0x3e5a <vfprintf+0x5be>
    3e40:	fe 01       	movw	r30, r28
    3e42:	ec 0d       	add	r30, r12
    3e44:	f1 1d       	adc	r31, r1
    3e46:	80 81       	ld	r24, Z
    3e48:	80 33       	cpi	r24, 0x30	; 48
    3e4a:	11 f4       	brne	.+4      	; 0x3e50 <vfprintf+0x5b4>
    3e4c:	09 7e       	andi	r16, 0xE9	; 233
    3e4e:	09 c0       	rjmp	.+18     	; 0x3e62 <vfprintf+0x5c6>
    3e50:	02 ff       	sbrs	r16, 2
    3e52:	06 c0       	rjmp	.+12     	; 0x3e60 <vfprintf+0x5c4>
    3e54:	d3 94       	inc	r13
    3e56:	d3 94       	inc	r13
    3e58:	04 c0       	rjmp	.+8      	; 0x3e62 <vfprintf+0x5c6>
    3e5a:	80 2f       	mov	r24, r16
    3e5c:	86 78       	andi	r24, 0x86	; 134
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <vfprintf+0x5c6>
    3e60:	d3 94       	inc	r13
    3e62:	03 fd       	sbrc	r16, 3
    3e64:	11 c0       	rjmp	.+34     	; 0x3e88 <vfprintf+0x5ec>
    3e66:	00 ff       	sbrs	r16, 0
    3e68:	06 c0       	rjmp	.+12     	; 0x3e76 <vfprintf+0x5da>
    3e6a:	1c 2d       	mov	r17, r12
    3e6c:	d5 14       	cp	r13, r5
    3e6e:	80 f4       	brcc	.+32     	; 0x3e90 <vfprintf+0x5f4>
    3e70:	15 0d       	add	r17, r5
    3e72:	1d 19       	sub	r17, r13
    3e74:	0d c0       	rjmp	.+26     	; 0x3e90 <vfprintf+0x5f4>
    3e76:	d5 14       	cp	r13, r5
    3e78:	58 f4       	brcc	.+22     	; 0x3e90 <vfprintf+0x5f4>
    3e7a:	b7 01       	movw	r22, r14
    3e7c:	80 e2       	ldi	r24, 0x20	; 32
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3e84:	d3 94       	inc	r13
    3e86:	f7 cf       	rjmp	.-18     	; 0x3e76 <vfprintf+0x5da>
    3e88:	d5 14       	cp	r13, r5
    3e8a:	10 f4       	brcc	.+4      	; 0x3e90 <vfprintf+0x5f4>
    3e8c:	5d 18       	sub	r5, r13
    3e8e:	01 c0       	rjmp	.+2      	; 0x3e92 <vfprintf+0x5f6>
    3e90:	51 2c       	mov	r5, r1
    3e92:	04 ff       	sbrs	r16, 4
    3e94:	10 c0       	rjmp	.+32     	; 0x3eb6 <vfprintf+0x61a>
    3e96:	b7 01       	movw	r22, r14
    3e98:	80 e3       	ldi	r24, 0x30	; 48
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3ea0:	02 ff       	sbrs	r16, 2
    3ea2:	17 c0       	rjmp	.+46     	; 0x3ed2 <vfprintf+0x636>
    3ea4:	01 fd       	sbrc	r16, 1
    3ea6:	03 c0       	rjmp	.+6      	; 0x3eae <vfprintf+0x612>
    3ea8:	88 e7       	ldi	r24, 0x78	; 120
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	02 c0       	rjmp	.+4      	; 0x3eb2 <vfprintf+0x616>
    3eae:	88 e5       	ldi	r24, 0x58	; 88
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	b7 01       	movw	r22, r14
    3eb4:	0c c0       	rjmp	.+24     	; 0x3ece <vfprintf+0x632>
    3eb6:	80 2f       	mov	r24, r16
    3eb8:	86 78       	andi	r24, 0x86	; 134
    3eba:	59 f0       	breq	.+22     	; 0x3ed2 <vfprintf+0x636>
    3ebc:	01 ff       	sbrs	r16, 1
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <vfprintf+0x628>
    3ec0:	8b e2       	ldi	r24, 0x2B	; 43
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <vfprintf+0x62a>
    3ec4:	80 e2       	ldi	r24, 0x20	; 32
    3ec6:	07 fd       	sbrc	r16, 7
    3ec8:	8d e2       	ldi	r24, 0x2D	; 45
    3eca:	b7 01       	movw	r22, r14
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3ed2:	c1 16       	cp	r12, r17
    3ed4:	38 f4       	brcc	.+14     	; 0x3ee4 <vfprintf+0x648>
    3ed6:	b7 01       	movw	r22, r14
    3ed8:	80 e3       	ldi	r24, 0x30	; 48
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3ee0:	11 50       	subi	r17, 0x01	; 1
    3ee2:	f7 cf       	rjmp	.-18     	; 0x3ed2 <vfprintf+0x636>
    3ee4:	ca 94       	dec	r12
    3ee6:	f3 01       	movw	r30, r6
    3ee8:	ec 0d       	add	r30, r12
    3eea:	f1 1d       	adc	r31, r1
    3eec:	80 81       	ld	r24, Z
    3eee:	b7 01       	movw	r22, r14
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3ef6:	c1 10       	cpse	r12, r1
    3ef8:	f5 cf       	rjmp	.-22     	; 0x3ee4 <vfprintf+0x648>
    3efa:	15 c0       	rjmp	.+42     	; 0x3f26 <vfprintf+0x68a>
    3efc:	f4 e0       	ldi	r31, 0x04	; 4
    3efe:	f5 15       	cp	r31, r5
    3f00:	60 f5       	brcc	.+88     	; 0x3f5a <vfprintf+0x6be>
    3f02:	84 e0       	ldi	r24, 0x04	; 4
    3f04:	58 1a       	sub	r5, r24
    3f06:	93 fe       	sbrs	r9, 3
    3f08:	1f c0       	rjmp	.+62     	; 0x3f48 <vfprintf+0x6ac>
    3f0a:	01 11       	cpse	r16, r1
    3f0c:	27 c0       	rjmp	.+78     	; 0x3f5c <vfprintf+0x6c0>
    3f0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f10:	23 ff       	sbrs	r18, 3
    3f12:	2a c0       	rjmp	.+84     	; 0x3f68 <vfprintf+0x6cc>
    3f14:	04 ed       	ldi	r16, 0xD4	; 212
    3f16:	12 e0       	ldi	r17, 0x02	; 2
    3f18:	39 2d       	mov	r19, r9
    3f1a:	30 71       	andi	r19, 0x10	; 16
    3f1c:	93 2e       	mov	r9, r19
    3f1e:	f8 01       	movw	r30, r16
    3f20:	84 91       	lpm	r24, Z
    3f22:	81 11       	cpse	r24, r1
    3f24:	24 c0       	rjmp	.+72     	; 0x3f6e <vfprintf+0x6d2>
    3f26:	55 20       	and	r5, r5
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <vfprintf+0x690>
    3f2a:	e4 cc       	rjmp	.-1592   	; 0x38f4 <vfprintf+0x58>
    3f2c:	b7 01       	movw	r22, r14
    3f2e:	80 e2       	ldi	r24, 0x20	; 32
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3f36:	5a 94       	dec	r5
    3f38:	f6 cf       	rjmp	.-20     	; 0x3f26 <vfprintf+0x68a>
    3f3a:	f7 01       	movw	r30, r14
    3f3c:	86 81       	ldd	r24, Z+6	; 0x06
    3f3e:	97 81       	ldd	r25, Z+7	; 0x07
    3f40:	26 c0       	rjmp	.+76     	; 0x3f8e <vfprintf+0x6f2>
    3f42:	8f ef       	ldi	r24, 0xFF	; 255
    3f44:	9f ef       	ldi	r25, 0xFF	; 255
    3f46:	23 c0       	rjmp	.+70     	; 0x3f8e <vfprintf+0x6f2>
    3f48:	b7 01       	movw	r22, r14
    3f4a:	80 e2       	ldi	r24, 0x20	; 32
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3f52:	5a 94       	dec	r5
    3f54:	51 10       	cpse	r5, r1
    3f56:	f8 cf       	rjmp	.-16     	; 0x3f48 <vfprintf+0x6ac>
    3f58:	d8 cf       	rjmp	.-80     	; 0x3f0a <vfprintf+0x66e>
    3f5a:	51 2c       	mov	r5, r1
    3f5c:	b7 01       	movw	r22, r14
    3f5e:	80 2f       	mov	r24, r16
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3f66:	d3 cf       	rjmp	.-90     	; 0x3f0e <vfprintf+0x672>
    3f68:	08 ed       	ldi	r16, 0xD8	; 216
    3f6a:	12 e0       	ldi	r17, 0x02	; 2
    3f6c:	d5 cf       	rjmp	.-86     	; 0x3f18 <vfprintf+0x67c>
    3f6e:	91 10       	cpse	r9, r1
    3f70:	80 52       	subi	r24, 0x20	; 32
    3f72:	b7 01       	movw	r22, r14
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 3a 21 	call	0x4274	; 0x4274 <fputc>
    3f7a:	0f 5f       	subi	r16, 0xFF	; 255
    3f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7e:	cf cf       	rjmp	.-98     	; 0x3f1e <vfprintf+0x682>
    3f80:	23 e0       	ldi	r18, 0x03	; 3
    3f82:	25 15       	cp	r18, r5
    3f84:	10 f4       	brcc	.+4      	; 0x3f8a <vfprintf+0x6ee>
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	bd cf       	rjmp	.-134    	; 0x3f04 <vfprintf+0x668>
    3f8a:	51 2c       	mov	r5, r1
    3f8c:	c0 cf       	rjmp	.-128    	; 0x3f0e <vfprintf+0x672>
    3f8e:	60 96       	adiw	r28, 0x10	; 16
    3f90:	e2 e1       	ldi	r30, 0x12	; 18
    3f92:	0c 94 10 20 	jmp	0x4020	; 0x4020 <__epilogue_restores__>

00003f96 <__divmodhi4>:
    3f96:	97 fb       	bst	r25, 7
    3f98:	07 2e       	mov	r0, r23
    3f9a:	16 f4       	brtc	.+4      	; 0x3fa0 <__divmodhi4+0xa>
    3f9c:	00 94       	com	r0
    3f9e:	07 d0       	rcall	.+14     	; 0x3fae <__divmodhi4_neg1>
    3fa0:	77 fd       	sbrc	r23, 7
    3fa2:	09 d0       	rcall	.+18     	; 0x3fb6 <__divmodhi4_neg2>
    3fa4:	0e 94 2b 20 	call	0x4056	; 0x4056 <__udivmodhi4>
    3fa8:	07 fc       	sbrc	r0, 7
    3faa:	05 d0       	rcall	.+10     	; 0x3fb6 <__divmodhi4_neg2>
    3fac:	3e f4       	brtc	.+14     	; 0x3fbc <__divmodhi4_exit>

00003fae <__divmodhi4_neg1>:
    3fae:	90 95       	com	r25
    3fb0:	81 95       	neg	r24
    3fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb4:	08 95       	ret

00003fb6 <__divmodhi4_neg2>:
    3fb6:	70 95       	com	r23
    3fb8:	61 95       	neg	r22
    3fba:	7f 4f       	sbci	r23, 0xFF	; 255

00003fbc <__divmodhi4_exit>:
    3fbc:	08 95       	ret

00003fbe <__tablejump2__>:
    3fbe:	ee 0f       	add	r30, r30
    3fc0:	ff 1f       	adc	r31, r31
    3fc2:	05 90       	lpm	r0, Z+
    3fc4:	f4 91       	lpm	r31, Z
    3fc6:	e0 2d       	mov	r30, r0
    3fc8:	09 94       	ijmp

00003fca <__umulhisi3>:
    3fca:	a2 9f       	mul	r26, r18
    3fcc:	b0 01       	movw	r22, r0
    3fce:	b3 9f       	mul	r27, r19
    3fd0:	c0 01       	movw	r24, r0
    3fd2:	a3 9f       	mul	r26, r19
    3fd4:	70 0d       	add	r23, r0
    3fd6:	81 1d       	adc	r24, r1
    3fd8:	11 24       	eor	r1, r1
    3fda:	91 1d       	adc	r25, r1
    3fdc:	b2 9f       	mul	r27, r18
    3fde:	70 0d       	add	r23, r0
    3fe0:	81 1d       	adc	r24, r1
    3fe2:	11 24       	eor	r1, r1
    3fe4:	91 1d       	adc	r25, r1
    3fe6:	08 95       	ret

00003fe8 <__prologue_saves__>:
    3fe8:	2f 92       	push	r2
    3fea:	3f 92       	push	r3
    3fec:	4f 92       	push	r4
    3fee:	5f 92       	push	r5
    3ff0:	6f 92       	push	r6
    3ff2:	7f 92       	push	r7
    3ff4:	8f 92       	push	r8
    3ff6:	9f 92       	push	r9
    3ff8:	af 92       	push	r10
    3ffa:	bf 92       	push	r11
    3ffc:	cf 92       	push	r12
    3ffe:	df 92       	push	r13
    4000:	ef 92       	push	r14
    4002:	ff 92       	push	r15
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	ca 1b       	sub	r28, r26
    4012:	db 0b       	sbc	r29, r27
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	f8 94       	cli
    4018:	de bf       	out	0x3e, r29	; 62
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	09 94       	ijmp

00004020 <__epilogue_restores__>:
    4020:	2a 88       	ldd	r2, Y+18	; 0x12
    4022:	39 88       	ldd	r3, Y+17	; 0x11
    4024:	48 88       	ldd	r4, Y+16	; 0x10
    4026:	5f 84       	ldd	r5, Y+15	; 0x0f
    4028:	6e 84       	ldd	r6, Y+14	; 0x0e
    402a:	7d 84       	ldd	r7, Y+13	; 0x0d
    402c:	8c 84       	ldd	r8, Y+12	; 0x0c
    402e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4030:	aa 84       	ldd	r10, Y+10	; 0x0a
    4032:	b9 84       	ldd	r11, Y+9	; 0x09
    4034:	c8 84       	ldd	r12, Y+8	; 0x08
    4036:	df 80       	ldd	r13, Y+7	; 0x07
    4038:	ee 80       	ldd	r14, Y+6	; 0x06
    403a:	fd 80       	ldd	r15, Y+5	; 0x05
    403c:	0c 81       	ldd	r16, Y+4	; 0x04
    403e:	1b 81       	ldd	r17, Y+3	; 0x03
    4040:	aa 81       	ldd	r26, Y+2	; 0x02
    4042:	b9 81       	ldd	r27, Y+1	; 0x01
    4044:	ce 0f       	add	r28, r30
    4046:	d1 1d       	adc	r29, r1
    4048:	0f b6       	in	r0, 0x3f	; 63
    404a:	f8 94       	cli
    404c:	de bf       	out	0x3e, r29	; 62
    404e:	0f be       	out	0x3f, r0	; 63
    4050:	cd bf       	out	0x3d, r28	; 61
    4052:	ed 01       	movw	r28, r26
    4054:	08 95       	ret

00004056 <__udivmodhi4>:
    4056:	aa 1b       	sub	r26, r26
    4058:	bb 1b       	sub	r27, r27
    405a:	51 e1       	ldi	r21, 0x11	; 17
    405c:	07 c0       	rjmp	.+14     	; 0x406c <__udivmodhi4_ep>

0000405e <__udivmodhi4_loop>:
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	a6 17       	cp	r26, r22
    4064:	b7 07       	cpc	r27, r23
    4066:	10 f0       	brcs	.+4      	; 0x406c <__udivmodhi4_ep>
    4068:	a6 1b       	sub	r26, r22
    406a:	b7 0b       	sbc	r27, r23

0000406c <__udivmodhi4_ep>:
    406c:	88 1f       	adc	r24, r24
    406e:	99 1f       	adc	r25, r25
    4070:	5a 95       	dec	r21
    4072:	a9 f7       	brne	.-22     	; 0x405e <__udivmodhi4_loop>
    4074:	80 95       	com	r24
    4076:	90 95       	com	r25
    4078:	bc 01       	movw	r22, r24
    407a:	cd 01       	movw	r24, r26
    407c:	08 95       	ret

0000407e <__ftoa_engine>:
    407e:	28 30       	cpi	r18, 0x08	; 8
    4080:	08 f0       	brcs	.+2      	; 0x4084 <__ftoa_engine+0x6>
    4082:	27 e0       	ldi	r18, 0x07	; 7
    4084:	33 27       	eor	r19, r19
    4086:	da 01       	movw	r26, r20
    4088:	99 0f       	add	r25, r25
    408a:	31 1d       	adc	r19, r1
    408c:	87 fd       	sbrc	r24, 7
    408e:	91 60       	ori	r25, 0x01	; 1
    4090:	00 96       	adiw	r24, 0x00	; 0
    4092:	61 05       	cpc	r22, r1
    4094:	71 05       	cpc	r23, r1
    4096:	39 f4       	brne	.+14     	; 0x40a6 <__ftoa_engine+0x28>
    4098:	32 60       	ori	r19, 0x02	; 2
    409a:	2e 5f       	subi	r18, 0xFE	; 254
    409c:	3d 93       	st	X+, r19
    409e:	30 e3       	ldi	r19, 0x30	; 48
    40a0:	2a 95       	dec	r18
    40a2:	e1 f7       	brne	.-8      	; 0x409c <__ftoa_engine+0x1e>
    40a4:	08 95       	ret
    40a6:	9f 3f       	cpi	r25, 0xFF	; 255
    40a8:	30 f0       	brcs	.+12     	; 0x40b6 <__ftoa_engine+0x38>
    40aa:	80 38       	cpi	r24, 0x80	; 128
    40ac:	71 05       	cpc	r23, r1
    40ae:	61 05       	cpc	r22, r1
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <__ftoa_engine+0x36>
    40b2:	3c 5f       	subi	r19, 0xFC	; 252
    40b4:	3c 5f       	subi	r19, 0xFC	; 252
    40b6:	3d 93       	st	X+, r19
    40b8:	91 30       	cpi	r25, 0x01	; 1
    40ba:	08 f0       	brcs	.+2      	; 0x40be <__ftoa_engine+0x40>
    40bc:	80 68       	ori	r24, 0x80	; 128
    40be:	91 1d       	adc	r25, r1
    40c0:	df 93       	push	r29
    40c2:	cf 93       	push	r28
    40c4:	1f 93       	push	r17
    40c6:	0f 93       	push	r16
    40c8:	ff 92       	push	r15
    40ca:	ef 92       	push	r14
    40cc:	19 2f       	mov	r17, r25
    40ce:	98 7f       	andi	r25, 0xF8	; 248
    40d0:	96 95       	lsr	r25
    40d2:	e9 2f       	mov	r30, r25
    40d4:	96 95       	lsr	r25
    40d6:	96 95       	lsr	r25
    40d8:	e9 0f       	add	r30, r25
    40da:	ff 27       	eor	r31, r31
    40dc:	ea 5c       	subi	r30, 0xCA	; 202
    40de:	fc 4f       	sbci	r31, 0xFC	; 252
    40e0:	99 27       	eor	r25, r25
    40e2:	33 27       	eor	r19, r19
    40e4:	ee 24       	eor	r14, r14
    40e6:	ff 24       	eor	r15, r15
    40e8:	a7 01       	movw	r20, r14
    40ea:	e7 01       	movw	r28, r14
    40ec:	05 90       	lpm	r0, Z+
    40ee:	08 94       	sec
    40f0:	07 94       	ror	r0
    40f2:	28 f4       	brcc	.+10     	; 0x40fe <__ftoa_engine+0x80>
    40f4:	36 0f       	add	r19, r22
    40f6:	e7 1e       	adc	r14, r23
    40f8:	f8 1e       	adc	r15, r24
    40fa:	49 1f       	adc	r20, r25
    40fc:	51 1d       	adc	r21, r1
    40fe:	66 0f       	add	r22, r22
    4100:	77 1f       	adc	r23, r23
    4102:	88 1f       	adc	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	06 94       	lsr	r0
    4108:	a1 f7       	brne	.-24     	; 0x40f2 <__ftoa_engine+0x74>
    410a:	05 90       	lpm	r0, Z+
    410c:	07 94       	ror	r0
    410e:	28 f4       	brcc	.+10     	; 0x411a <__ftoa_engine+0x9c>
    4110:	e7 0e       	add	r14, r23
    4112:	f8 1e       	adc	r15, r24
    4114:	49 1f       	adc	r20, r25
    4116:	56 1f       	adc	r21, r22
    4118:	c1 1d       	adc	r28, r1
    411a:	77 0f       	add	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	66 1f       	adc	r22, r22
    4122:	06 94       	lsr	r0
    4124:	a1 f7       	brne	.-24     	; 0x410e <__ftoa_engine+0x90>
    4126:	05 90       	lpm	r0, Z+
    4128:	07 94       	ror	r0
    412a:	28 f4       	brcc	.+10     	; 0x4136 <__ftoa_engine+0xb8>
    412c:	f8 0e       	add	r15, r24
    412e:	49 1f       	adc	r20, r25
    4130:	56 1f       	adc	r21, r22
    4132:	c7 1f       	adc	r28, r23
    4134:	d1 1d       	adc	r29, r1
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	66 1f       	adc	r22, r22
    413c:	77 1f       	adc	r23, r23
    413e:	06 94       	lsr	r0
    4140:	a1 f7       	brne	.-24     	; 0x412a <__ftoa_engine+0xac>
    4142:	05 90       	lpm	r0, Z+
    4144:	07 94       	ror	r0
    4146:	20 f4       	brcc	.+8      	; 0x4150 <__ftoa_engine+0xd2>
    4148:	49 0f       	add	r20, r25
    414a:	56 1f       	adc	r21, r22
    414c:	c7 1f       	adc	r28, r23
    414e:	d8 1f       	adc	r29, r24
    4150:	99 0f       	add	r25, r25
    4152:	66 1f       	adc	r22, r22
    4154:	77 1f       	adc	r23, r23
    4156:	88 1f       	adc	r24, r24
    4158:	06 94       	lsr	r0
    415a:	a9 f7       	brne	.-22     	; 0x4146 <__ftoa_engine+0xc8>
    415c:	84 91       	lpm	r24, Z
    415e:	10 95       	com	r17
    4160:	17 70       	andi	r17, 0x07	; 7
    4162:	41 f0       	breq	.+16     	; 0x4174 <__ftoa_engine+0xf6>
    4164:	d6 95       	lsr	r29
    4166:	c7 95       	ror	r28
    4168:	57 95       	ror	r21
    416a:	47 95       	ror	r20
    416c:	f7 94       	ror	r15
    416e:	e7 94       	ror	r14
    4170:	1a 95       	dec	r17
    4172:	c1 f7       	brne	.-16     	; 0x4164 <__ftoa_engine+0xe6>
    4174:	ec ed       	ldi	r30, 0xDC	; 220
    4176:	f2 e0       	ldi	r31, 0x02	; 2
    4178:	68 94       	set
    417a:	15 90       	lpm	r1, Z+
    417c:	15 91       	lpm	r17, Z+
    417e:	35 91       	lpm	r19, Z+
    4180:	65 91       	lpm	r22, Z+
    4182:	95 91       	lpm	r25, Z+
    4184:	05 90       	lpm	r0, Z+
    4186:	7f e2       	ldi	r23, 0x2F	; 47
    4188:	73 95       	inc	r23
    418a:	e1 18       	sub	r14, r1
    418c:	f1 0a       	sbc	r15, r17
    418e:	43 0b       	sbc	r20, r19
    4190:	56 0b       	sbc	r21, r22
    4192:	c9 0b       	sbc	r28, r25
    4194:	d0 09       	sbc	r29, r0
    4196:	c0 f7       	brcc	.-16     	; 0x4188 <__ftoa_engine+0x10a>
    4198:	e1 0c       	add	r14, r1
    419a:	f1 1e       	adc	r15, r17
    419c:	43 1f       	adc	r20, r19
    419e:	56 1f       	adc	r21, r22
    41a0:	c9 1f       	adc	r28, r25
    41a2:	d0 1d       	adc	r29, r0
    41a4:	7e f4       	brtc	.+30     	; 0x41c4 <__ftoa_engine+0x146>
    41a6:	70 33       	cpi	r23, 0x30	; 48
    41a8:	11 f4       	brne	.+4      	; 0x41ae <__ftoa_engine+0x130>
    41aa:	8a 95       	dec	r24
    41ac:	e6 cf       	rjmp	.-52     	; 0x417a <__ftoa_engine+0xfc>
    41ae:	e8 94       	clt
    41b0:	01 50       	subi	r16, 0x01	; 1
    41b2:	30 f0       	brcs	.+12     	; 0x41c0 <__ftoa_engine+0x142>
    41b4:	08 0f       	add	r16, r24
    41b6:	0a f4       	brpl	.+2      	; 0x41ba <__ftoa_engine+0x13c>
    41b8:	00 27       	eor	r16, r16
    41ba:	02 17       	cp	r16, r18
    41bc:	08 f4       	brcc	.+2      	; 0x41c0 <__ftoa_engine+0x142>
    41be:	20 2f       	mov	r18, r16
    41c0:	23 95       	inc	r18
    41c2:	02 2f       	mov	r16, r18
    41c4:	7a 33       	cpi	r23, 0x3A	; 58
    41c6:	28 f0       	brcs	.+10     	; 0x41d2 <__ftoa_engine+0x154>
    41c8:	79 e3       	ldi	r23, 0x39	; 57
    41ca:	7d 93       	st	X+, r23
    41cc:	2a 95       	dec	r18
    41ce:	e9 f7       	brne	.-6      	; 0x41ca <__ftoa_engine+0x14c>
    41d0:	10 c0       	rjmp	.+32     	; 0x41f2 <__ftoa_engine+0x174>
    41d2:	7d 93       	st	X+, r23
    41d4:	2a 95       	dec	r18
    41d6:	89 f6       	brne	.-94     	; 0x417a <__ftoa_engine+0xfc>
    41d8:	06 94       	lsr	r0
    41da:	97 95       	ror	r25
    41dc:	67 95       	ror	r22
    41de:	37 95       	ror	r19
    41e0:	17 95       	ror	r17
    41e2:	17 94       	ror	r1
    41e4:	e1 18       	sub	r14, r1
    41e6:	f1 0a       	sbc	r15, r17
    41e8:	43 0b       	sbc	r20, r19
    41ea:	56 0b       	sbc	r21, r22
    41ec:	c9 0b       	sbc	r28, r25
    41ee:	d0 09       	sbc	r29, r0
    41f0:	98 f0       	brcs	.+38     	; 0x4218 <__ftoa_engine+0x19a>
    41f2:	23 95       	inc	r18
    41f4:	7e 91       	ld	r23, -X
    41f6:	73 95       	inc	r23
    41f8:	7a 33       	cpi	r23, 0x3A	; 58
    41fa:	08 f0       	brcs	.+2      	; 0x41fe <__ftoa_engine+0x180>
    41fc:	70 e3       	ldi	r23, 0x30	; 48
    41fe:	7c 93       	st	X, r23
    4200:	20 13       	cpse	r18, r16
    4202:	b8 f7       	brcc	.-18     	; 0x41f2 <__ftoa_engine+0x174>
    4204:	7e 91       	ld	r23, -X
    4206:	70 61       	ori	r23, 0x10	; 16
    4208:	7d 93       	st	X+, r23
    420a:	30 f0       	brcs	.+12     	; 0x4218 <__ftoa_engine+0x19a>
    420c:	83 95       	inc	r24
    420e:	71 e3       	ldi	r23, 0x31	; 49
    4210:	7d 93       	st	X+, r23
    4212:	70 e3       	ldi	r23, 0x30	; 48
    4214:	2a 95       	dec	r18
    4216:	e1 f7       	brne	.-8      	; 0x4210 <__ftoa_engine+0x192>
    4218:	11 24       	eor	r1, r1
    421a:	ef 90       	pop	r14
    421c:	ff 90       	pop	r15
    421e:	0f 91       	pop	r16
    4220:	1f 91       	pop	r17
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	99 27       	eor	r25, r25
    4228:	87 fd       	sbrc	r24, 7
    422a:	90 95       	com	r25
    422c:	08 95       	ret

0000422e <strnlen_P>:
    422e:	fc 01       	movw	r30, r24
    4230:	05 90       	lpm	r0, Z+
    4232:	61 50       	subi	r22, 0x01	; 1
    4234:	70 40       	sbci	r23, 0x00	; 0
    4236:	01 10       	cpse	r0, r1
    4238:	d8 f7       	brcc	.-10     	; 0x4230 <strnlen_P+0x2>
    423a:	80 95       	com	r24
    423c:	90 95       	com	r25
    423e:	8e 0f       	add	r24, r30
    4240:	9f 1f       	adc	r25, r31
    4242:	08 95       	ret

00004244 <memcmp>:
    4244:	fb 01       	movw	r30, r22
    4246:	dc 01       	movw	r26, r24
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <memcmp+0xe>
    424a:	8d 91       	ld	r24, X+
    424c:	01 90       	ld	r0, Z+
    424e:	80 19       	sub	r24, r0
    4250:	21 f4       	brne	.+8      	; 0x425a <memcmp+0x16>
    4252:	41 50       	subi	r20, 0x01	; 1
    4254:	50 40       	sbci	r21, 0x00	; 0
    4256:	c8 f7       	brcc	.-14     	; 0x424a <memcmp+0x6>
    4258:	88 1b       	sub	r24, r24
    425a:	99 0b       	sbc	r25, r25
    425c:	08 95       	ret

0000425e <strnlen>:
    425e:	fc 01       	movw	r30, r24
    4260:	61 50       	subi	r22, 0x01	; 1
    4262:	70 40       	sbci	r23, 0x00	; 0
    4264:	01 90       	ld	r0, Z+
    4266:	01 10       	cpse	r0, r1
    4268:	d8 f7       	brcc	.-10     	; 0x4260 <strnlen+0x2>
    426a:	80 95       	com	r24
    426c:	90 95       	com	r25
    426e:	8e 0f       	add	r24, r30
    4270:	9f 1f       	adc	r25, r31
    4272:	08 95       	ret

00004274 <fputc>:
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	fb 01       	movw	r30, r22
    427e:	23 81       	ldd	r18, Z+3	; 0x03
    4280:	21 fd       	sbrc	r18, 1
    4282:	03 c0       	rjmp	.+6      	; 0x428a <fputc+0x16>
    4284:	8f ef       	ldi	r24, 0xFF	; 255
    4286:	9f ef       	ldi	r25, 0xFF	; 255
    4288:	2c c0       	rjmp	.+88     	; 0x42e2 <fputc+0x6e>
    428a:	22 ff       	sbrs	r18, 2
    428c:	16 c0       	rjmp	.+44     	; 0x42ba <fputc+0x46>
    428e:	46 81       	ldd	r20, Z+6	; 0x06
    4290:	57 81       	ldd	r21, Z+7	; 0x07
    4292:	24 81       	ldd	r18, Z+4	; 0x04
    4294:	35 81       	ldd	r19, Z+5	; 0x05
    4296:	42 17       	cp	r20, r18
    4298:	53 07       	cpc	r21, r19
    429a:	44 f4       	brge	.+16     	; 0x42ac <fputc+0x38>
    429c:	a0 81       	ld	r26, Z
    429e:	b1 81       	ldd	r27, Z+1	; 0x01
    42a0:	9d 01       	movw	r18, r26
    42a2:	2f 5f       	subi	r18, 0xFF	; 255
    42a4:	3f 4f       	sbci	r19, 0xFF	; 255
    42a6:	31 83       	std	Z+1, r19	; 0x01
    42a8:	20 83       	st	Z, r18
    42aa:	8c 93       	st	X, r24
    42ac:	26 81       	ldd	r18, Z+6	; 0x06
    42ae:	37 81       	ldd	r19, Z+7	; 0x07
    42b0:	2f 5f       	subi	r18, 0xFF	; 255
    42b2:	3f 4f       	sbci	r19, 0xFF	; 255
    42b4:	37 83       	std	Z+7, r19	; 0x07
    42b6:	26 83       	std	Z+6, r18	; 0x06
    42b8:	14 c0       	rjmp	.+40     	; 0x42e2 <fputc+0x6e>
    42ba:	8b 01       	movw	r16, r22
    42bc:	ec 01       	movw	r28, r24
    42be:	fb 01       	movw	r30, r22
    42c0:	00 84       	ldd	r0, Z+8	; 0x08
    42c2:	f1 85       	ldd	r31, Z+9	; 0x09
    42c4:	e0 2d       	mov	r30, r0
    42c6:	09 95       	icall
    42c8:	89 2b       	or	r24, r25
    42ca:	e1 f6       	brne	.-72     	; 0x4284 <fputc+0x10>
    42cc:	d8 01       	movw	r26, r16
    42ce:	16 96       	adiw	r26, 0x06	; 6
    42d0:	8d 91       	ld	r24, X+
    42d2:	9c 91       	ld	r25, X
    42d4:	17 97       	sbiw	r26, 0x07	; 7
    42d6:	01 96       	adiw	r24, 0x01	; 1
    42d8:	17 96       	adiw	r26, 0x07	; 7
    42da:	9c 93       	st	X, r25
    42dc:	8e 93       	st	-X, r24
    42de:	16 97       	sbiw	r26, 0x06	; 6
    42e0:	ce 01       	movw	r24, r28
    42e2:	df 91       	pop	r29
    42e4:	cf 91       	pop	r28
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	08 95       	ret

000042ec <vsprintf>:
    42ec:	ae e0       	ldi	r26, 0x0E	; 14
    42ee:	b0 e0       	ldi	r27, 0x00	; 0
    42f0:	ec e7       	ldi	r30, 0x7C	; 124
    42f2:	f1 e2       	ldi	r31, 0x21	; 33
    42f4:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__+0x1c>
    42f8:	8c 01       	movw	r16, r24
    42fa:	86 e0       	ldi	r24, 0x06	; 6
    42fc:	8c 83       	std	Y+4, r24	; 0x04
    42fe:	1a 83       	std	Y+2, r17	; 0x02
    4300:	09 83       	std	Y+1, r16	; 0x01
    4302:	8f ef       	ldi	r24, 0xFF	; 255
    4304:	9f e7       	ldi	r25, 0x7F	; 127
    4306:	9e 83       	std	Y+6, r25	; 0x06
    4308:	8d 83       	std	Y+5, r24	; 0x05
    430a:	ce 01       	movw	r24, r28
    430c:	01 96       	adiw	r24, 0x01	; 1
    430e:	0e 94 4e 1c 	call	0x389c	; 0x389c <vfprintf>
    4312:	ef 81       	ldd	r30, Y+7	; 0x07
    4314:	f8 85       	ldd	r31, Y+8	; 0x08
    4316:	e0 0f       	add	r30, r16
    4318:	f1 1f       	adc	r31, r17
    431a:	10 82       	st	Z, r1
    431c:	2e 96       	adiw	r28, 0x0e	; 14
    431e:	e4 e0       	ldi	r30, 0x04	; 4
    4320:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__+0x1c>

00004324 <__ultoa_invert>:
    4324:	fa 01       	movw	r30, r20
    4326:	aa 27       	eor	r26, r26
    4328:	28 30       	cpi	r18, 0x08	; 8
    432a:	51 f1       	breq	.+84     	; 0x4380 <__ultoa_invert+0x5c>
    432c:	20 31       	cpi	r18, 0x10	; 16
    432e:	81 f1       	breq	.+96     	; 0x4390 <__ultoa_invert+0x6c>
    4330:	e8 94       	clt
    4332:	6f 93       	push	r22
    4334:	6e 7f       	andi	r22, 0xFE	; 254
    4336:	6e 5f       	subi	r22, 0xFE	; 254
    4338:	7f 4f       	sbci	r23, 0xFF	; 255
    433a:	8f 4f       	sbci	r24, 0xFF	; 255
    433c:	9f 4f       	sbci	r25, 0xFF	; 255
    433e:	af 4f       	sbci	r26, 0xFF	; 255
    4340:	b1 e0       	ldi	r27, 0x01	; 1
    4342:	3e d0       	rcall	.+124    	; 0x43c0 <__ultoa_invert+0x9c>
    4344:	b4 e0       	ldi	r27, 0x04	; 4
    4346:	3c d0       	rcall	.+120    	; 0x43c0 <__ultoa_invert+0x9c>
    4348:	67 0f       	add	r22, r23
    434a:	78 1f       	adc	r23, r24
    434c:	89 1f       	adc	r24, r25
    434e:	9a 1f       	adc	r25, r26
    4350:	a1 1d       	adc	r26, r1
    4352:	68 0f       	add	r22, r24
    4354:	79 1f       	adc	r23, r25
    4356:	8a 1f       	adc	r24, r26
    4358:	91 1d       	adc	r25, r1
    435a:	a1 1d       	adc	r26, r1
    435c:	6a 0f       	add	r22, r26
    435e:	71 1d       	adc	r23, r1
    4360:	81 1d       	adc	r24, r1
    4362:	91 1d       	adc	r25, r1
    4364:	a1 1d       	adc	r26, r1
    4366:	20 d0       	rcall	.+64     	; 0x43a8 <__ultoa_invert+0x84>
    4368:	09 f4       	brne	.+2      	; 0x436c <__ultoa_invert+0x48>
    436a:	68 94       	set
    436c:	3f 91       	pop	r19
    436e:	2a e0       	ldi	r18, 0x0A	; 10
    4370:	26 9f       	mul	r18, r22
    4372:	11 24       	eor	r1, r1
    4374:	30 19       	sub	r19, r0
    4376:	30 5d       	subi	r19, 0xD0	; 208
    4378:	31 93       	st	Z+, r19
    437a:	de f6       	brtc	.-74     	; 0x4332 <__ultoa_invert+0xe>
    437c:	cf 01       	movw	r24, r30
    437e:	08 95       	ret
    4380:	46 2f       	mov	r20, r22
    4382:	47 70       	andi	r20, 0x07	; 7
    4384:	40 5d       	subi	r20, 0xD0	; 208
    4386:	41 93       	st	Z+, r20
    4388:	b3 e0       	ldi	r27, 0x03	; 3
    438a:	0f d0       	rcall	.+30     	; 0x43aa <__ultoa_invert+0x86>
    438c:	c9 f7       	brne	.-14     	; 0x4380 <__ultoa_invert+0x5c>
    438e:	f6 cf       	rjmp	.-20     	; 0x437c <__ultoa_invert+0x58>
    4390:	46 2f       	mov	r20, r22
    4392:	4f 70       	andi	r20, 0x0F	; 15
    4394:	40 5d       	subi	r20, 0xD0	; 208
    4396:	4a 33       	cpi	r20, 0x3A	; 58
    4398:	18 f0       	brcs	.+6      	; 0x43a0 <__ultoa_invert+0x7c>
    439a:	49 5d       	subi	r20, 0xD9	; 217
    439c:	31 fd       	sbrc	r19, 1
    439e:	40 52       	subi	r20, 0x20	; 32
    43a0:	41 93       	st	Z+, r20
    43a2:	02 d0       	rcall	.+4      	; 0x43a8 <__ultoa_invert+0x84>
    43a4:	a9 f7       	brne	.-22     	; 0x4390 <__ultoa_invert+0x6c>
    43a6:	ea cf       	rjmp	.-44     	; 0x437c <__ultoa_invert+0x58>
    43a8:	b4 e0       	ldi	r27, 0x04	; 4
    43aa:	a6 95       	lsr	r26
    43ac:	97 95       	ror	r25
    43ae:	87 95       	ror	r24
    43b0:	77 95       	ror	r23
    43b2:	67 95       	ror	r22
    43b4:	ba 95       	dec	r27
    43b6:	c9 f7       	brne	.-14     	; 0x43aa <__ultoa_invert+0x86>
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	61 05       	cpc	r22, r1
    43bc:	71 05       	cpc	r23, r1
    43be:	08 95       	ret
    43c0:	9b 01       	movw	r18, r22
    43c2:	ac 01       	movw	r20, r24
    43c4:	0a 2e       	mov	r0, r26
    43c6:	06 94       	lsr	r0
    43c8:	57 95       	ror	r21
    43ca:	47 95       	ror	r20
    43cc:	37 95       	ror	r19
    43ce:	27 95       	ror	r18
    43d0:	ba 95       	dec	r27
    43d2:	c9 f7       	brne	.-14     	; 0x43c6 <__ultoa_invert+0xa2>
    43d4:	62 0f       	add	r22, r18
    43d6:	73 1f       	adc	r23, r19
    43d8:	84 1f       	adc	r24, r20
    43da:	95 1f       	adc	r25, r21
    43dc:	a0 1d       	adc	r26, r0
    43de:	08 95       	ret

000043e0 <_exit>:
    43e0:	f8 94       	cli

000043e2 <__stop_program>:
    43e2:	ff cf       	rjmp	.-2      	; 0x43e2 <__stop_program>
