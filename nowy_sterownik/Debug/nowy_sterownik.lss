
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000338  00800060  000044c8  0000455c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000299  00800398  00800398  00004894  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000048f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e2c  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002039  00000000  00000000  0000ad70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c0b  00000000  00000000  0000cda9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f00  00000000  00000000  000109b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c0a  00000000  00000000  000118b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e87  00000000  00000000  000134be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  00016345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__vector_13>
      38:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	9f 08       	sbc	r9, r15
      56:	a6 08       	sbc	r10, r6
      58:	a9 08       	sbc	r10, r9
      5a:	af 08       	sbc	r10, r15
      5c:	b5 08       	sbc	r11, r5
      5e:	ba 08       	sbc	r11, r10
      60:	c0 08       	sbc	r12, r0
      62:	c7 08       	sbc	r12, r7
      64:	cb 08       	sbc	r12, r11
      66:	d3 08       	sbc	r13, r3
      68:	22 09       	sbc	r18, r2
      6a:	22 09       	sbc	r18, r2
      6c:	22 09       	sbc	r18, r2
      6e:	22 09       	sbc	r18, r2
      70:	22 09       	sbc	r18, r2
      72:	22 09       	sbc	r18, r2
      74:	22 09       	sbc	r18, r2
      76:	22 09       	sbc	r18, r2
      78:	22 09       	sbc	r18, r2
      7a:	22 09       	sbc	r18, r2
      7c:	22 09       	sbc	r18, r2
      7e:	22 09       	sbc	r18, r2
      80:	22 09       	sbc	r18, r2
      82:	22 09       	sbc	r18, r2
      84:	22 09       	sbc	r18, r2
      86:	22 09       	sbc	r18, r2
      88:	22 09       	sbc	r18, r2
      8a:	22 09       	sbc	r18, r2
      8c:	22 09       	sbc	r18, r2
      8e:	22 09       	sbc	r18, r2
      90:	22 09       	sbc	r18, r2
      92:	22 09       	sbc	r18, r2
      94:	22 09       	sbc	r18, r2
      96:	22 09       	sbc	r18, r2
      98:	22 09       	sbc	r18, r2
      9a:	22 09       	sbc	r18, r2
      9c:	22 09       	sbc	r18, r2
      9e:	22 09       	sbc	r18, r2
      a0:	22 09       	sbc	r18, r2
      a2:	22 09       	sbc	r18, r2
      a4:	22 09       	sbc	r18, r2
      a6:	22 09       	sbc	r18, r2
      a8:	22 09       	sbc	r18, r2
      aa:	22 09       	sbc	r18, r2
      ac:	22 09       	sbc	r18, r2
      ae:	22 09       	sbc	r18, r2
      b0:	22 09       	sbc	r18, r2
      b2:	22 09       	sbc	r18, r2
      b4:	22 09       	sbc	r18, r2
      b6:	22 09       	sbc	r18, r2
      b8:	22 09       	sbc	r18, r2
      ba:	22 09       	sbc	r18, r2
      bc:	22 09       	sbc	r18, r2
      be:	22 09       	sbc	r18, r2
      c0:	22 09       	sbc	r18, r2
      c2:	22 09       	sbc	r18, r2
      c4:	22 09       	sbc	r18, r2
      c6:	22 09       	sbc	r18, r2
      c8:	22 09       	sbc	r18, r2
      ca:	22 09       	sbc	r18, r2
      cc:	22 09       	sbc	r18, r2
      ce:	22 09       	sbc	r18, r2
      d0:	22 09       	sbc	r18, r2
      d2:	22 09       	sbc	r18, r2
      d4:	22 09       	sbc	r18, r2
      d6:	22 09       	sbc	r18, r2
      d8:	22 09       	sbc	r18, r2
      da:	22 09       	sbc	r18, r2
      dc:	22 09       	sbc	r18, r2
      de:	22 09       	sbc	r18, r2
      e0:	22 09       	sbc	r18, r2
      e2:	22 09       	sbc	r18, r2
      e4:	22 09       	sbc	r18, r2
      e6:	22 09       	sbc	r18, r2
      e8:	22 09       	sbc	r18, r2
      ea:	22 09       	sbc	r18, r2
      ec:	22 09       	sbc	r18, r2
      ee:	22 09       	sbc	r18, r2
      f0:	22 09       	sbc	r18, r2
      f2:	22 09       	sbc	r18, r2
      f4:	22 09       	sbc	r18, r2
      f6:	22 09       	sbc	r18, r2
      f8:	22 09       	sbc	r18, r2
      fa:	22 09       	sbc	r18, r2
      fc:	22 09       	sbc	r18, r2
      fe:	22 09       	sbc	r18, r2
     100:	22 09       	sbc	r18, r2
     102:	22 09       	sbc	r18, r2
     104:	22 09       	sbc	r18, r2
     106:	22 09       	sbc	r18, r2
     108:	22 09       	sbc	r18, r2
     10a:	22 09       	sbc	r18, r2
     10c:	22 09       	sbc	r18, r2
     10e:	22 09       	sbc	r18, r2
     110:	22 09       	sbc	r18, r2
     112:	22 09       	sbc	r18, r2
     114:	22 09       	sbc	r18, r2
     116:	da 08       	sbc	r13, r10
     118:	e1 08       	sbc	r14, r1
     11a:	e7 08       	sbc	r14, r7
     11c:	ec 08       	sbc	r14, r12
     11e:	f2 08       	sbc	r15, r2
     120:	f8 08       	sbc	r15, r8
     122:	22 09       	sbc	r18, r2
     124:	22 09       	sbc	r18, r2
     126:	22 09       	sbc	r18, r2
     128:	22 09       	sbc	r18, r2
     12a:	22 09       	sbc	r18, r2
     12c:	11 09       	sbc	r17, r1
     12e:	22 09       	sbc	r18, r2
     130:	22 09       	sbc	r18, r2
     132:	00 09       	sbc	r16, r0
     134:	05 09       	sbc	r16, r5
     136:	22 09       	sbc	r18, r2
     138:	fd 08       	sbc	r15, r13
     13a:	0b 09       	sbc	r16, r11
     13c:	22 09       	sbc	r18, r2
     13e:	22 09       	sbc	r18, r2
     140:	22 09       	sbc	r18, r2
     142:	22 09       	sbc	r18, r2
     144:	22 09       	sbc	r18, r2
     146:	22 09       	sbc	r18, r2
     148:	22 09       	sbc	r18, r2
     14a:	22 09       	sbc	r18, r2
     14c:	22 09       	sbc	r18, r2
     14e:	22 09       	sbc	r18, r2
     150:	22 09       	sbc	r18, r2
     152:	22 09       	sbc	r18, r2
     154:	22 09       	sbc	r18, r2
     156:	22 09       	sbc	r18, r2
     158:	22 09       	sbc	r18, r2
     15a:	22 09       	sbc	r18, r2
     15c:	22 09       	sbc	r18, r2
     15e:	22 09       	sbc	r18, r2
     160:	22 09       	sbc	r18, r2
     162:	22 09       	sbc	r18, r2
     164:	22 09       	sbc	r18, r2
     166:	22 09       	sbc	r18, r2
     168:	22 09       	sbc	r18, r2
     16a:	22 09       	sbc	r18, r2
     16c:	22 09       	sbc	r18, r2
     16e:	22 09       	sbc	r18, r2
     170:	22 09       	sbc	r18, r2
     172:	22 09       	sbc	r18, r2
     174:	22 09       	sbc	r18, r2
     176:	22 09       	sbc	r18, r2
     178:	22 09       	sbc	r18, r2
     17a:	22 09       	sbc	r18, r2
     17c:	22 09       	sbc	r18, r2
     17e:	22 09       	sbc	r18, r2
     180:	22 09       	sbc	r18, r2
     182:	22 09       	sbc	r18, r2
     184:	22 09       	sbc	r18, r2
     186:	22 09       	sbc	r18, r2
     188:	22 09       	sbc	r18, r2
     18a:	22 09       	sbc	r18, r2
     18c:	22 09       	sbc	r18, r2
     18e:	22 09       	sbc	r18, r2
     190:	22 09       	sbc	r18, r2
     192:	22 09       	sbc	r18, r2
     194:	22 09       	sbc	r18, r2
     196:	22 09       	sbc	r18, r2
     198:	22 09       	sbc	r18, r2
     19a:	22 09       	sbc	r18, r2
     19c:	22 09       	sbc	r18, r2
     19e:	22 09       	sbc	r18, r2
     1a0:	22 09       	sbc	r18, r2
     1a2:	22 09       	sbc	r18, r2
     1a4:	22 09       	sbc	r18, r2
     1a6:	22 09       	sbc	r18, r2
     1a8:	22 09       	sbc	r18, r2
     1aa:	22 09       	sbc	r18, r2
     1ac:	22 09       	sbc	r18, r2
     1ae:	22 09       	sbc	r18, r2
     1b0:	22 09       	sbc	r18, r2
     1b2:	22 09       	sbc	r18, r2
     1b4:	22 09       	sbc	r18, r2
     1b6:	22 09       	sbc	r18, r2
     1b8:	22 09       	sbc	r18, r2
     1ba:	22 09       	sbc	r18, r2
     1bc:	22 09       	sbc	r18, r2
     1be:	22 09       	sbc	r18, r2
     1c0:	22 09       	sbc	r18, r2
     1c2:	22 09       	sbc	r18, r2
     1c4:	22 09       	sbc	r18, r2
     1c6:	22 09       	sbc	r18, r2
     1c8:	22 09       	sbc	r18, r2
     1ca:	22 09       	sbc	r18, r2
     1cc:	22 09       	sbc	r18, r2
     1ce:	22 09       	sbc	r18, r2
     1d0:	22 09       	sbc	r18, r2
     1d2:	22 09       	sbc	r18, r2
     1d4:	22 09       	sbc	r18, r2
     1d6:	22 09       	sbc	r18, r2
     1d8:	22 09       	sbc	r18, r2
     1da:	22 09       	sbc	r18, r2
     1dc:	22 09       	sbc	r18, r2
     1de:	22 09       	sbc	r18, r2
     1e0:	22 09       	sbc	r18, r2
     1e2:	22 09       	sbc	r18, r2
     1e4:	22 09       	sbc	r18, r2
     1e6:	22 09       	sbc	r18, r2
     1e8:	22 09       	sbc	r18, r2
     1ea:	22 09       	sbc	r18, r2
     1ec:	22 09       	sbc	r18, r2
     1ee:	22 09       	sbc	r18, r2
     1f0:	22 09       	sbc	r18, r2
     1f2:	22 09       	sbc	r18, r2
     1f4:	22 09       	sbc	r18, r2
     1f6:	22 09       	sbc	r18, r2
     1f8:	22 09       	sbc	r18, r2
     1fa:	22 09       	sbc	r18, r2
     1fc:	22 09       	sbc	r18, r2
     1fe:	22 09       	sbc	r18, r2
     200:	22 09       	sbc	r18, r2
     202:	22 09       	sbc	r18, r2
     204:	22 09       	sbc	r18, r2
     206:	22 09       	sbc	r18, r2
     208:	22 09       	sbc	r18, r2
     20a:	22 09       	sbc	r18, r2
     20c:	22 09       	sbc	r18, r2
     20e:	22 09       	sbc	r18, r2
     210:	22 09       	sbc	r18, r2
     212:	22 09       	sbc	r18, r2
     214:	22 09       	sbc	r18, r2
     216:	22 09       	sbc	r18, r2
     218:	22 09       	sbc	r18, r2
     21a:	22 09       	sbc	r18, r2
     21c:	22 09       	sbc	r18, r2
     21e:	22 09       	sbc	r18, r2
     220:	22 09       	sbc	r18, r2
     222:	22 09       	sbc	r18, r2
     224:	22 09       	sbc	r18, r2
     226:	22 09       	sbc	r18, r2
     228:	22 09       	sbc	r18, r2
     22a:	22 09       	sbc	r18, r2
     22c:	22 09       	sbc	r18, r2
     22e:	22 09       	sbc	r18, r2
     230:	22 09       	sbc	r18, r2
     232:	22 09       	sbc	r18, r2
     234:	22 09       	sbc	r18, r2
     236:	22 09       	sbc	r18, r2
     238:	22 09       	sbc	r18, r2
     23a:	22 09       	sbc	r18, r2
     23c:	22 09       	sbc	r18, r2
     23e:	22 09       	sbc	r18, r2
     240:	22 09       	sbc	r18, r2
     242:	22 09       	sbc	r18, r2
     244:	15 09       	sbc	r17, r5
     246:	21 09       	sbc	r18, r1
     248:	1f 09       	sbc	r17, r15
     24a:	1d 09       	sbc	r17, r13
     24c:	1b 09       	sbc	r17, r11
     24e:	19 09       	sbc	r17, r9
     250:	17 09       	sbc	r17, r7
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_7_menu+0x18>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ec       	ldi	r30, 0xC8	; 200
     3ea:	f4 e4       	ldi	r31, 0x44	; 68
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a8 39       	cpi	r26, 0x98	; 152
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	26 e0       	ldi	r18, 0x06	; 6
     3fa:	a8 e9       	ldi	r26, 0x98	; 152
     3fc:	b3 e0       	ldi	r27, 0x03	; 3
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a1 33       	cpi	r26, 0x31	; 49
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	8e e0       	ldi	r24, 0x0E	; 14
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	8e e0       	ldi	r24, 0x0E	; 14
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 a6 18 	call	0x314c	; 0x314c <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <timer0_init>
	init_display_drv();
     45a:	0e 94 56 08 	call	0x10ac	; 0x10ac <init_display_drv>
	init_buttons();
     45e:	0e 94 cc 04 	call	0x998	; 0x998 <init_buttons>
	init_system();
     462:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <init_system>
	init_measure();
     466:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	init_pin();
     472:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     476:	78 94       	sei
	init_driver();
     478:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     47c:	81 e8       	ldi	r24, 0x81	; 129
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     488:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     48c:	0e 94 cf 10 	call	0x219e	; 0x219e <measure_get_servo_calibration>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     494:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <disp_process>
		animation();
     498:	0e 94 ae 0b 	call	0x175c	; 0x175c <animation>
		process_button();
     49c:	0e 94 22 04 	call	0x844	; 0x844 <process_button>
		disp_fast_process();
     4a0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <disp_fast_process>
		disp_very_fast_process();
     4a4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <disp_very_fast_process>
		dcmotor_process(motor_value);
     4a8:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <motor_value>
     4ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b0:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
     4b4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <servo_process>
		menu_process();
     4b8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4bc:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_event>
		error_led_blink();
     4c0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <error_led_blink>
		measure_process();
     4c4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <measure_process>
		accumulator_process();
     4c8:	0e 94 87 02 	call	0x50e	; 0x50e <accumulator_process>
		accum_led_process();
     4cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <accum_led_process>
		buzzer_process();
     4d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <buzzer_process>
     4d4:	df cf       	rjmp	.-66     	; 0x494 <main+0x22>

000004d6 <accum_get_voltage>:
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 0b 11 	call	0x2216	; 0x2216 <measure_get_filtered_value>
     4dc:	bc 01       	movw	r22, r24
     4de:	66 0f       	add	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	66 0f       	add	r22, r22
     4e4:	77 1f       	adc	r23, r23
     4e6:	86 0f       	add	r24, r22
     4e8:	97 1f       	adc	r25, r23
     4ea:	bc 01       	movw	r22, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatunsisf>
     4f4:	26 e6       	ldi	r18, 0x66	; 102
     4f6:	36 e6       	ldi	r19, 0x66	; 102
     4f8:	46 eb       	ldi	r20, 0xB6	; 182
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5a e3       	ldi	r21, 0x3A	; 58
     508:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
     50c:	08 95       	ret

0000050e <accumulator_process>:
     50e:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
     512:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
     516:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
     51a:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
     51e:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <accumulator_timer.1914>
     522:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <accumulator_timer.1914+0x1>
     526:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <accumulator_timer.1914+0x2>
     52a:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <accumulator_timer.1914+0x3>
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a6 07       	cpc	r26, r22
     534:	b7 07       	cpc	r27, r23
     536:	98 f5       	brcc	.+102    	; 0x59e <accumulator_process+0x90>
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 0b 11 	call	0x2216	; 0x2216 <measure_get_filtered_value>
     53e:	89 35       	cpi	r24, 0x59	; 89
     540:	22 e0       	ldi	r18, 0x02	; 2
     542:	92 07       	cpc	r25, r18
     544:	18 f0       	brcs	.+6      	; 0x54c <accumulator_process+0x3e>
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <accumulator_state>
     54c:	8b 38       	cpi	r24, 0x8B	; 139
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	92 07       	cpc	r25, r18
     552:	18 f4       	brcc	.+6      	; 0x55a <accumulator_process+0x4c>
     554:	22 e0       	ldi	r18, 0x02	; 2
     556:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <accumulator_state>
     55a:	8e 35       	cpi	r24, 0x5E	; 94
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	92 07       	cpc	r25, r18
     560:	18 f4       	brcc	.+6      	; 0x568 <accumulator_process+0x5a>
     562:	23 e0       	ldi	r18, 0x03	; 3
     564:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <accumulator_state>
     568:	8c 58       	subi	r24, 0x8C	; 140
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	8c 3c       	cpi	r24, 0xCC	; 204
     56e:	91 05       	cpc	r25, r1
     570:	10 f4       	brcc	.+4      	; 0x576 <accumulator_process+0x68>
     572:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <accumulator_state>
     576:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
     57a:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
     57e:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
     582:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
     586:	8c 59       	subi	r24, 0x9C	; 156
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	af 4f       	sbci	r26, 0xFF	; 255
     58c:	bf 4f       	sbci	r27, 0xFF	; 255
     58e:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <accumulator_timer.1914>
     592:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <accumulator_timer.1914+0x1>
     596:	a0 93 9f 03 	sts	0x039F, r26	; 0x80039f <accumulator_timer.1914+0x2>
     59a:	b0 93 a0 03 	sts	0x03A0, r27	; 0x8003a0 <accumulator_timer.1914+0x3>
     59e:	08 95       	ret

000005a0 <accum_led_process>:
     5a0:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
     5a4:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
     5a8:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
     5ac:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
     5b0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     5b4:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     5b8:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     5bc:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	a6 07       	cpc	r26, r22
     5c6:	b7 07       	cpc	r27, r23
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <accum_led_process+0x2c>
     5ca:	86 c0       	rjmp	.+268    	; 0x6d8 <accum_led_process+0x138>
     5cc:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <accumulator_state>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	e9 f0       	breq	.+58     	; 0x60e <accum_led_process+0x6e>
     5d4:	30 f0       	brcs	.+12     	; 0x5e2 <accum_led_process+0x42>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	99 f1       	breq	.+102    	; 0x640 <accum_led_process+0xa0>
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <accum_led_process+0x40>
     5de:	67 c0       	rjmp	.+206    	; 0x6ae <accum_led_process+0x10e>
     5e0:	08 95       	ret
     5e2:	c5 98       	cbi	0x18, 5	; 24
     5e4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     5e8:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     5ec:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     5f0:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     5f4:	88 53       	subi	r24, 0x38	; 56
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	af 4f       	sbci	r26, 0xFF	; 255
     5fa:	bf 4f       	sbci	r27, 0xFF	; 255
     5fc:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <process_timer.1918>
     600:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <process_timer.1918+0x1>
     604:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <process_timer.1918+0x2>
     608:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <process_timer.1918+0x3>
     60c:	08 95       	ret
     60e:	98 b3       	in	r25, 0x18	; 24
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	89 27       	eor	r24, r25
     614:	88 bb       	out	0x18, r24	; 24
     616:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     61a:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     61e:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     622:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     626:	86 50       	subi	r24, 0x06	; 6
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	af 4f       	sbci	r26, 0xFF	; 255
     62c:	bf 4f       	sbci	r27, 0xFF	; 255
     62e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <process_timer.1918>
     632:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <process_timer.1918+0x1>
     636:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <process_timer.1918+0x2>
     63a:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <process_timer.1918+0x3>
     63e:	08 95       	ret
     640:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__data_end>
     644:	81 11       	cpse	r24, r1
     646:	19 c0       	rjmp	.+50     	; 0x67a <accum_led_process+0xda>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <__data_end>
     64e:	c5 9a       	sbi	0x18, 5	; 24
     650:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     654:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     658:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     65c:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     660:	8c 50       	subi	r24, 0x0C	; 12
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	af 4f       	sbci	r26, 0xFF	; 255
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <process_timer.1918>
     66c:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <process_timer.1918+0x1>
     670:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <process_timer.1918+0x2>
     674:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <process_timer.1918+0x3>
     678:	08 95       	ret
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	69 f5       	brne	.+90     	; 0x6d8 <accum_led_process+0x138>
     67e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <__data_end>
     682:	c5 98       	cbi	0x18, 5	; 24
     684:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     688:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     68c:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     690:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     694:	84 52       	subi	r24, 0x24	; 36
     696:	9a 4f       	sbci	r25, 0xFA	; 250
     698:	af 4f       	sbci	r26, 0xFF	; 255
     69a:	bf 4f       	sbci	r27, 0xFF	; 255
     69c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <process_timer.1918>
     6a0:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <process_timer.1918+0x1>
     6a4:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <process_timer.1918+0x2>
     6a8:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <process_timer.1918+0x3>
     6ac:	08 95       	ret
     6ae:	c5 9a       	sbi	0x18, 5	; 24
     6b0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <process_timer.1918>
     6b4:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <process_timer.1918+0x1>
     6b8:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <process_timer.1918+0x2>
     6bc:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <process_timer.1918+0x3>
     6c0:	88 51       	subi	r24, 0x18	; 24
     6c2:	9c 4f       	sbci	r25, 0xFC	; 252
     6c4:	af 4f       	sbci	r26, 0xFF	; 255
     6c6:	bf 4f       	sbci	r27, 0xFF	; 255
     6c8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <process_timer.1918>
     6cc:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <process_timer.1918+0x1>
     6d0:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <process_timer.1918+0x2>
     6d4:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <process_timer.1918+0x3>
     6d8:	08 95       	ret

000006da <adc_setchannel>:
     6da:	37 98       	cbi	0x06, 7	; 6
     6dc:	97 b1       	in	r25, 0x07	; 7
     6de:	98 7f       	andi	r25, 0xF8	; 248
     6e0:	87 70       	andi	r24, 0x07	; 7
     6e2:	89 2b       	or	r24, r25
     6e4:	87 b9       	out	0x07, r24	; 7
     6e6:	37 9a       	sbi	0x06, 7	; 6
     6e8:	08 95       	ret

000006ea <adc_readsel>:
     6ea:	36 9a       	sbi	0x06, 6	; 6
     6ec:	36 99       	sbic	0x06, 6	; 6
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <adc_readsel+0x2>
     6f0:	84 b1       	in	r24, 0x04	; 4
     6f2:	95 b1       	in	r25, 0x05	; 5
     6f4:	08 95       	ret

000006f6 <adc_read>:
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <adc_setchannel>
     6fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <adc_readsel>
     6fe:	08 95       	ret

00000700 <read_button>:
     700:	dc 01       	movw	r26, r24
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	20 81       	ld	r18, Z
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	18 96       	adiw	r26, 0x08	; 8
     712:	0c 90       	ld	r0, X
     714:	02 c0       	rjmp	.+4      	; 0x71a <read_button+0x1a>
     716:	f5 95       	asr	r31
     718:	e7 95       	ror	r30
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <read_button+0x16>
     71e:	cf 01       	movw	r24, r30
     720:	81 70       	andi	r24, 0x01	; 1
     722:	08 95       	ret

00000724 <init_but_struct>:
     724:	eb eb       	ldi	r30, 0xBB	; 187
     726:	f5 e0       	ldi	r31, 0x05	; 5
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	85 83       	std	Z+5, r24	; 0x05
     72e:	14 86       	std	Z+12, r1	; 0x0c
     730:	13 86       	std	Z+11, r1	; 0x0b
     732:	12 86       	std	Z+10, r1	; 0x0a
     734:	11 86       	std	Z+9, r1	; 0x09
     736:	16 86       	std	Z+14, r1	; 0x0e
     738:	15 86       	std	Z+13, r1	; 0x0d
     73a:	26 e3       	ldi	r18, 0x36	; 54
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	26 83       	std	Z+6, r18	; 0x06
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	90 87       	std	Z+8, r25	; 0x08
     746:	ee e8       	ldi	r30, 0x8E	; 142
     748:	f5 e0       	ldi	r31, 0x05	; 5
     74a:	14 82       	std	Z+4, r1	; 0x04
     74c:	85 83       	std	Z+5, r24	; 0x05
     74e:	14 86       	std	Z+12, r1	; 0x0c
     750:	13 86       	std	Z+11, r1	; 0x0b
     752:	12 86       	std	Z+10, r1	; 0x0a
     754:	11 86       	std	Z+9, r1	; 0x09
     756:	16 86       	std	Z+14, r1	; 0x0e
     758:	15 86       	std	Z+13, r1	; 0x0d
     75a:	37 83       	std	Z+7, r19	; 0x07
     75c:	26 83       	std	Z+6, r18	; 0x06
     75e:	80 87       	std	Z+8, r24	; 0x08
     760:	ed e9       	ldi	r30, 0x9D	; 157
     762:	f5 e0       	ldi	r31, 0x05	; 5
     764:	14 82       	std	Z+4, r1	; 0x04
     766:	85 83       	std	Z+5, r24	; 0x05
     768:	14 86       	std	Z+12, r1	; 0x0c
     76a:	13 86       	std	Z+11, r1	; 0x0b
     76c:	12 86       	std	Z+10, r1	; 0x0a
     76e:	11 86       	std	Z+9, r1	; 0x09
     770:	16 86       	std	Z+14, r1	; 0x0e
     772:	15 86       	std	Z+13, r1	; 0x0d
     774:	37 83       	std	Z+7, r19	; 0x07
     776:	26 83       	std	Z+6, r18	; 0x06
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	90 87       	std	Z+8, r25	; 0x08
     77c:	eb e7       	ldi	r30, 0x7B	; 123
     77e:	f5 e0       	ldi	r31, 0x05	; 5
     780:	14 82       	std	Z+4, r1	; 0x04
     782:	85 83       	std	Z+5, r24	; 0x05
     784:	14 86       	std	Z+12, r1	; 0x0c
     786:	13 86       	std	Z+11, r1	; 0x0b
     788:	12 86       	std	Z+10, r1	; 0x0a
     78a:	11 86       	std	Z+9, r1	; 0x09
     78c:	16 86       	std	Z+14, r1	; 0x0e
     78e:	15 86       	std	Z+13, r1	; 0x0d
     790:	40 e3       	ldi	r20, 0x30	; 48
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	57 83       	std	Z+7, r21	; 0x07
     796:	46 83       	std	Z+6, r20	; 0x06
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	90 87       	std	Z+8, r25	; 0x08
     79c:	ec e6       	ldi	r30, 0x6C	; 108
     79e:	f5 e0       	ldi	r31, 0x05	; 5
     7a0:	14 82       	std	Z+4, r1	; 0x04
     7a2:	85 83       	std	Z+5, r24	; 0x05
     7a4:	14 86       	std	Z+12, r1	; 0x0c
     7a6:	13 86       	std	Z+11, r1	; 0x0b
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	11 86       	std	Z+9, r1	; 0x09
     7ac:	16 86       	std	Z+14, r1	; 0x0e
     7ae:	15 86       	std	Z+13, r1	; 0x0d
     7b0:	37 83       	std	Z+7, r19	; 0x07
     7b2:	26 83       	std	Z+6, r18	; 0x06
     7b4:	90 87       	std	Z+8, r25	; 0x08
     7b6:	ec ea       	ldi	r30, 0xAC	; 172
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	14 82       	std	Z+4, r1	; 0x04
     7bc:	85 83       	std	Z+5, r24	; 0x05
     7be:	14 86       	std	Z+12, r1	; 0x0c
     7c0:	13 86       	std	Z+11, r1	; 0x0b
     7c2:	12 86       	std	Z+10, r1	; 0x0a
     7c4:	11 86       	std	Z+9, r1	; 0x09
     7c6:	16 86       	std	Z+14, r1	; 0x0e
     7c8:	15 86       	std	Z+13, r1	; 0x0d
     7ca:	69 e3       	ldi	r22, 0x39	; 57
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	77 83       	std	Z+7, r23	; 0x07
     7d0:	66 83       	std	Z+6, r22	; 0x06
     7d2:	a4 e0       	ldi	r26, 0x04	; 4
     7d4:	a0 87       	std	Z+8, r26	; 0x08
     7d6:	ea ec       	ldi	r30, 0xCA	; 202
     7d8:	f5 e0       	ldi	r31, 0x05	; 5
     7da:	14 82       	std	Z+4, r1	; 0x04
     7dc:	85 83       	std	Z+5, r24	; 0x05
     7de:	14 86       	std	Z+12, r1	; 0x0c
     7e0:	13 86       	std	Z+11, r1	; 0x0b
     7e2:	12 86       	std	Z+10, r1	; 0x0a
     7e4:	11 86       	std	Z+9, r1	; 0x09
     7e6:	16 86       	std	Z+14, r1	; 0x0e
     7e8:	15 86       	std	Z+13, r1	; 0x0d
     7ea:	43 e3       	ldi	r20, 0x33	; 51
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	57 83       	std	Z+7, r21	; 0x07
     7f0:	46 83       	std	Z+6, r20	; 0x06
     7f2:	80 87       	std	Z+8, r24	; 0x08
     7f4:	e9 ed       	ldi	r30, 0xD9	; 217
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	14 82       	std	Z+4, r1	; 0x04
     7fa:	85 83       	std	Z+5, r24	; 0x05
     7fc:	14 86       	std	Z+12, r1	; 0x0c
     7fe:	13 86       	std	Z+11, r1	; 0x0b
     800:	12 86       	std	Z+10, r1	; 0x0a
     802:	11 86       	std	Z+9, r1	; 0x09
     804:	16 86       	std	Z+14, r1	; 0x0e
     806:	15 86       	std	Z+13, r1	; 0x0d
     808:	37 83       	std	Z+7, r19	; 0x07
     80a:	26 83       	std	Z+6, r18	; 0x06
     80c:	a0 87       	std	Z+8, r26	; 0x08
     80e:	ee e4       	ldi	r30, 0x4E	; 78
     810:	f5 e0       	ldi	r31, 0x05	; 5
     812:	14 82       	std	Z+4, r1	; 0x04
     814:	85 83       	std	Z+5, r24	; 0x05
     816:	14 86       	std	Z+12, r1	; 0x0c
     818:	13 86       	std	Z+11, r1	; 0x0b
     81a:	12 86       	std	Z+10, r1	; 0x0a
     81c:	11 86       	std	Z+9, r1	; 0x09
     81e:	16 86       	std	Z+14, r1	; 0x0e
     820:	15 86       	std	Z+13, r1	; 0x0d
     822:	77 83       	std	Z+7, r23	; 0x07
     824:	66 83       	std	Z+6, r22	; 0x06
     826:	90 87       	std	Z+8, r25	; 0x08
     828:	ed e5       	ldi	r30, 0x5D	; 93
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	14 82       	std	Z+4, r1	; 0x04
     82e:	85 83       	std	Z+5, r24	; 0x05
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	13 86       	std	Z+11, r1	; 0x0b
     834:	12 86       	std	Z+10, r1	; 0x0a
     836:	11 86       	std	Z+9, r1	; 0x09
     838:	16 86       	std	Z+14, r1	; 0x0e
     83a:	15 86       	std	Z+13, r1	; 0x0d
     83c:	57 83       	std	Z+7, r21	; 0x07
     83e:	46 83       	std	Z+6, r20	; 0x06
     840:	10 86       	std	Z+8, r1	; 0x08
     842:	08 95       	ret

00000844 <process_button>:
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
     856:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
     85a:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
     85e:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
     862:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <timer_button>
     866:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <timer_button+0x1>
     86a:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <timer_button+0x2>
     86e:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <timer_button+0x3>
     872:	84 17       	cp	r24, r20
     874:	95 07       	cpc	r25, r21
     876:	a6 07       	cpc	r26, r22
     878:	b7 07       	cpc	r27, r23
     87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
     87c:	85 c0       	rjmp	.+266    	; 0x988 <__stack+0x129>
     87e:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
     882:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
     886:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
     88a:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
     88e:	44 96       	adiw	r24, 0x14	; 20
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
     894:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <timer_button>
     898:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <timer_button+0x1>
     89c:	a0 93 8c 05 	sts	0x058C, r26	; 0x80058c <timer_button+0x2>
     8a0:	b0 93 8d 05 	sts	0x058D, r27	; 0x80058d <timer_button+0x3>
     8a4:	c0 e6       	ldi	r28, 0x60	; 96
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f4 e7       	ldi	r31, 0x74	; 116
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	dd 24       	eor	r13, r13
     8b6:	d3 94       	inc	r13
     8b8:	8e 01       	movw	r16, r28
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	0e 94 80 03 	call	0x700	; 0x700 <read_button>
     8c2:	e8 81       	ld	r30, Y
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	89 17       	cp	r24, r25
     8ca:	e1 f0       	breq	.+56     	; 0x904 <__stack+0xa5>
     8cc:	85 83       	std	Z+5, r24	; 0x05
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	61 f4       	brne	.+24     	; 0x8ea <__stack+0x8b>
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	dc 01       	movw	r26, r24
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	1a 97       	sbiw	r26, 0x0a	; 10
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	41 c0       	rjmp	.+130    	; 0x968 <__stack+0x109>
     8e6:	09 95       	icall
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <__stack+0x109>
     8ea:	81 11       	cpse	r24, r1
     8ec:	3d c0       	rjmp	.+122    	; 0x968 <__stack+0x109>
     8ee:	88 81       	ld	r24, Y
     8f0:	99 81       	ldd	r25, Y+1	; 0x01
     8f2:	dc 01       	movw	r26, r24
     8f4:	1b 96       	adiw	r26, 0x0b	; 11
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	1c 97       	sbiw	r26, 0x0c	; 12
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	09 95       	icall
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	81 11       	cpse	r24, r1
     906:	30 c0       	rjmp	.+96     	; 0x968 <__stack+0x109>
     908:	d8 01       	movw	r26, r16
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a2 81       	ldd	r26, Z+2	; 0x02
     914:	b3 81       	ldd	r27, Z+3	; 0x03
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	a1 1d       	adc	r26, r1
     91a:	b1 1d       	adc	r27, r1
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	a2 83       	std	Z+2, r26	; 0x02
     922:	b3 83       	std	Z+3, r27	; 0x03
     924:	d8 01       	movw	r26, r16
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	a2 81       	ldd	r26, Z+2	; 0x02
     930:	b3 81       	ldd	r27, Z+3	; 0x03
     932:	88 97       	sbiw	r24, 0x28	; 40
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	10 f1       	brcs	.+68     	; 0x97e <__stack+0x11f>
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	f9 f0       	breq	.+62     	; 0x97e <__stack+0x11f>
     940:	05 84       	ldd	r0, Z+13	; 0x0d
     942:	f6 85       	ldd	r31, Z+14	; 0x0e
     944:	e0 2d       	mov	r30, r0
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0xf1>
     94a:	8b eb       	ldi	r24, 0xBB	; 187
     94c:	95 e0       	ldi	r25, 0x05	; 5
     94e:	09 95       	icall
     950:	d8 01       	movw	r26, r16
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	d4 82       	std	Z+4, r13	; 0x04
     966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x11f>
     968:	d8 01       	movw	r26, r16
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	22 96       	adiw	r28, 0x02	; 2
     980:	ce 15       	cp	r28, r14
     982:	df 05       	cpc	r29, r15
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	98 cf       	rjmp	.-208    	; 0x8b8 <__stack+0x59>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	08 95       	ret

00000998 <init_buttons>:
     998:	0e 94 92 03 	call	0x724	; 0x724 <init_but_struct>
     99c:	ba 98       	cbi	0x17, 2	; 23
     99e:	c2 9a       	sbi	0x18, 2	; 24
     9a0:	b9 98       	cbi	0x17, 1	; 23
     9a2:	c1 9a       	sbi	0x18, 1	; 24
     9a4:	be 98       	cbi	0x17, 6	; 23
     9a6:	c6 9a       	sbi	0x18, 6	; 24
     9a8:	8b 98       	cbi	0x11, 3	; 17
     9aa:	93 9a       	sbi	0x12, 3	; 18
     9ac:	bb 98       	cbi	0x17, 3	; 23
     9ae:	c3 9a       	sbi	0x18, 3	; 24
     9b0:	d4 98       	cbi	0x1a, 4	; 26
     9b2:	dc 9a       	sbi	0x1b, 4	; 27
     9b4:	a1 98       	cbi	0x14, 1	; 20
     9b6:	a9 9a       	sbi	0x15, 1	; 21
     9b8:	bc 98       	cbi	0x17, 4	; 23
     9ba:	c4 9a       	sbi	0x18, 4	; 24
     9bc:	d3 98       	cbi	0x1a, 3	; 26
     9be:	db 9a       	sbi	0x1b, 3	; 27
     9c0:	a0 98       	cbi	0x14, 0	; 20
     9c2:	a8 9a       	sbi	0x15, 0	; 21
     9c4:	08 95       	ret

000009c6 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9c6:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
     9ca:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
     9ce:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
     9d2:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
     9d6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <buzzer_timer>
     9da:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <buzzer_timer+0x1>
     9de:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <buzzer_timer+0x2>
     9e2:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <buzzer_timer+0x3>
     9e6:	84 17       	cp	r24, r20
     9e8:	95 07       	cpc	r25, r21
     9ea:	a6 07       	cpc	r26, r22
     9ec:	b7 07       	cpc	r27, r23
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <buzzer_process+0x2c>
     9f0:	5e c0       	rjmp	.+188    	; 0xaae <buzzer_process+0xe8>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER) == 0)
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
     9f8:	81 11       	cpse	r24, r1
     9fa:	59 c0       	rjmp	.+178    	; 0xaae <buzzer_process+0xe8>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9fc:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
     a00:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
     a04:	95 ff       	sbrs	r25, 5
     a06:	37 c0       	rjmp	.+110    	; 0xa76 <buzzer_process+0xb0>
     a08:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <buzzer_state>
     a0c:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <buzzer_state+0x1>
     a10:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <buzzer_state+0x2>
     a14:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <buzzer_state+0x3>
     a18:	89 2b       	or	r24, r25
     a1a:	8a 2b       	or	r24, r26
     a1c:	8b 2b       	or	r24, r27
     a1e:	59 f5       	brne	.+86     	; 0xa76 <buzzer_process+0xb0>
			{
				ON_BUZZER;
     a20:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a22:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
     a26:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
     a2a:	9f 7d       	andi	r25, 0xDF	; 223
     a2c:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
     a30:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
				buzzer_state = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <buzzer_state>
     a40:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <buzzer_state+0x1>
     a44:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <buzzer_state+0x2>
     a48:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <buzzer_state+0x3>
				buzzer_timer += 100;
     a4c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <buzzer_timer>
     a50:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <buzzer_timer+0x1>
     a54:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <buzzer_timer+0x2>
     a58:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <buzzer_timer+0x3>
     a5c:	8c 59       	subi	r24, 0x9C	; 156
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	af 4f       	sbci	r26, 0xFF	; 255
     a62:	bf 4f       	sbci	r27, 0xFF	; 255
     a64:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <buzzer_timer>
     a68:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <buzzer_timer+0x1>
     a6c:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <buzzer_timer+0x2>
     a70:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <buzzer_timer+0x3>
     a74:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a76:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a78:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <buzzer_state>
     a7c:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <buzzer_state+0x1>
     a80:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <buzzer_state+0x2>
     a84:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <buzzer_state+0x3>
				buzzer_timer += 50;
     a88:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <buzzer_timer>
     a8c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <buzzer_timer+0x1>
     a90:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <buzzer_timer+0x2>
     a94:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <buzzer_timer+0x3>
     a98:	c2 96       	adiw	r24, 0x32	; 50
     a9a:	a1 1d       	adc	r26, r1
     a9c:	b1 1d       	adc	r27, r1
     a9e:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <buzzer_timer>
     aa2:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <buzzer_timer+0x1>
     aa6:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <buzzer_timer+0x2>
     aaa:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <buzzer_timer+0x3>
     aae:	08 95       	ret

00000ab0 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     ab0:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     ab2:	c0 98       	cbi	0x18, 0	; 24
     ab4:	08 95       	ret

00000ab6 <button_7_menu>:
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
		menuSaveParameters[configured_parameter]++;
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     ab6:	a4 e7       	ldi	r26, 0x74	; 116
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	ee ee       	ldi	r30, 0xEE	; 238
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	23 ef       	ldi	r18, 0xF3	; 243
     ac0:	35 e0       	ldi	r19, 0x05	; 5

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	8c 91       	ld	r24, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	81 93       	st	Z+, r24
     aca:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     acc:	e2 17       	cp	r30, r18
     ace:	f3 07       	cpc	r31, r19
     ad0:	c1 f7       	brne	.-16     	; 0xac2 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     ad2:	08 95       	ret

00000ad4 <button_debug_msg>:
	pass_add_number(5);
}

static void button_debug_msg(void)
{
	debug_msg("conf: %d\n", configured_parameter);
     ad4:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <configured_parameter>
     ad8:	1f 92       	push	r1
     ada:	8f 93       	push	r24
     adc:	88 ea       	ldi	r24, 0xA8	; 168
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     ae8:	ee ee       	ldi	r30, 0xEE	; 238
     aea:	f5 e0       	ldi	r31, 0x05	; 5
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	1f 92       	push	r1
     af0:	8f 93       	push	r24
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	81 81       	ldd	r24, Z+1	; 0x01
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	80 81       	ld	r24, Z
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	82 eb       	ldi	r24, 0xB2	; 178
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	0e 96       	adiw	r24, 0x0e	; 14
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	08 95       	ret

00000b22 <button_6_menu>:
		menuSaveParameters[configured_parameter]--;
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     b22:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <configured_parameter>
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	e2 51       	subi	r30, 0x12	; 18
     b2c:	fa 4f       	sbci	r31, 0xFA	; 250
     b2e:	20 81       	ld	r18, Z
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	ec 58       	subi	r30, 0x8C	; 140
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	30 81       	ld	r19, Z
     b3c:	23 17       	cp	r18, r19
     b3e:	28 f4       	brcc	.+10     	; 0xb4a <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b40:	fc 01       	movw	r30, r24
     b42:	e2 51       	subi	r30, 0x12	; 18
     b44:	fa 4f       	sbci	r31, 0xFA	; 250
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 83       	st	Z, r18
	button_debug_msg();
     b4a:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b4e:	08 95       	ret

00000b50 <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     b50:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <configured_parameter>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	fc 01       	movw	r30, r24
     b58:	e2 51       	subi	r30, 0x12	; 18
     b5a:	fa 4f       	sbci	r31, 0xFA	; 250
     b5c:	20 81       	ld	r18, Z
     b5e:	22 23       	and	r18, r18
     b60:	29 f0       	breq	.+10     	; 0xb6c <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     b62:	fc 01       	movw	r30, r24
     b64:	e2 51       	subi	r30, 0x12	; 18
     b66:	fa 4f       	sbci	r31, 0xFA	; 250
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	20 83       	st	Z, r18
	button_debug_msg();
     b6c:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b70:	08 95       	ret

00000b72 <button_2_menu>:
		configured_parameter--;
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     b72:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <configured_parameter>
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	18 f4       	brcc	.+6      	; 0xb80 <button_2_menu+0xe>
		configured_parameter++;
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <configured_parameter>
	button_debug_msg();
     b80:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b84:	08 95       	ret

00000b86 <button_1_menu>:
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     b86:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <configured_parameter>
     b8a:	88 23       	and	r24, r24
     b8c:	19 f0       	breq	.+6      	; 0xb94 <button_1_menu+0xe>
		configured_parameter--;
     b8e:	81 50       	subi	r24, 0x01	; 1
     b90:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <configured_parameter>
	button_debug_msg();
     b94:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b98:	08 95       	ret

00000b9a <button_3_menu>:

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b9a:	6e ee       	ldi	r22, 0xEE	; 238
     b9c:	75 e0       	ldi	r23, 0x05	; 5
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	0e 94 60 11 	call	0x22c0	; 0x22c0 <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     baa:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
	LED_MOTOR_OFF;
     bae:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     bb0:	96 98       	cbi	0x12, 6	; 18
     bb2:	08 95       	ret

00000bb4 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     bb4:	cf 93       	push	r28
	pass[pass_len++] = number;
     bb6:	e0 91 f4 05 	lds	r30, 0x05F4	; 0x8005f4 <pass_len>
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	9e 0f       	add	r25, r30
     bbe:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <pass_len>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e8 51       	subi	r30, 0x18	; 24
     bc6:	fa 4f       	sbci	r31, 0xFA	; 250
     bc8:	80 83       	st	Z, r24
	debug_msg("pass %d\n", number);
     bca:	1f 92       	push	r1
     bcc:	8f 93       	push	r24
     bce:	81 ed       	ldi	r24, 0xD1	; 209
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	if (memcmp(pass, password, pass_len) != 0) {
     bda:	c0 91 f4 05 	lds	r28, 0x05F4	; 0x8005f4 <pass_len>
     bde:	4c 2f       	mov	r20, r28
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	61 e1       	ldi	r22, 0x11	; 17
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	88 ee       	ldi	r24, 0xE8	; 232
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 94 21 	call	0x4328	; 0x4328 <memcmp>
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	89 2b       	or	r24, r25
     bf8:	91 f0       	breq	.+36     	; 0xc1e <pass_add_number+0x6a>
		debug_msg("clear_password\n");
     bfa:	8a ed       	ldi	r24, 0xDA	; 218
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     c06:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <pass_len>
	memset(pass, 0, sizeof(pass));
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	e8 ee       	ldi	r30, 0xE8	; 232
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <pass_add_number+0x5e>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	35 c0       	rjmp	.+106    	; 0xc88 <pass_add_number+0xd4>
	if (memcmp(pass, password, pass_len) != 0) {
		debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     c1e:	c6 30       	cpi	r28, 0x06	; 6
     c20:	99 f5       	brne	.+102    	; 0xc88 <pass_add_number+0xd4>
		debug_msg("enter_to_menu\n");
     c22:	8a ee       	ldi	r24, 0xEA	; 234
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	return 0;
}

static void enter_to_menu(void)
{
	dark_menu_state = MENU_PARAMETERS;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     c34:	83 ec       	ldi	r24, 0xC3	; 195
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <button1+0xc>
     c3c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <button1+0xb>
	button2.fall_callback = button_2_menu;
     c40:	89 eb       	ldi	r24, 0xB9	; 185
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <button2+0xc>
     c48:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <button2+0xb>
	button3.fall_callback = button_3_menu;
     c4c:	8d ec       	ldi	r24, 0xCD	; 205
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <button3+0xc>
     c54:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <button3+0xb>
	button5.fall_callback = button_5_menu;
     c58:	88 ea       	ldi	r24, 0xA8	; 168
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <button5+0xc>
     c60:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <button5+0xb>
	button6.fall_callback = button_6_menu;
     c64:	81 e9       	ldi	r24, 0x91	; 145
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <button6+0xc>
     c6c:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <button6+0xb>
	button7.fall_callback = button_7_menu;
     c70:	8b e5       	ldi	r24, 0x5B	; 91
     c72:	95 e0       	ldi	r25, 0x05	; 5
     c74:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <button7+0xc>
     c78:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
	}
	if (pass_len == sizeof(pass)) {
		debug_msg("enter_to_menu\n");
		enter_to_menu();
	}
}
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c92:	08 95       	ret

00000c94 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c9a:	08 95       	ret

00000c9c <button_5_number>:
{
	pass_add_number(2);
}
static void button_5_number(void *pv)
{
	pass_add_number(3);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     ca2:	08 95       	ret

00000ca4 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     caa:	08 95       	ret

00000cac <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cb2:	08 95       	ret

00000cb4 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cba:	08 95       	ret

00000cbc <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	08 95       	ret

00000cc0 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state == 1)
     cc0:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
     cc4:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
     cc8:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
     ccc:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
     cd0:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <menu_timer.2189>
     cd4:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <menu_timer.2189+0x1>
     cd8:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <menu_timer.2189+0x2>
     cdc:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <menu_timer.2189+0x3>
     ce0:	84 17       	cp	r24, r20
     ce2:	95 07       	cpc	r25, r21
     ce4:	a6 07       	cpc	r26, r22
     ce6:	b7 07       	cpc	r27, r23
     ce8:	08 f0       	brcs	.+2      	; 0xcec <menu_process+0x2c>
     cea:	6b c0       	rjmp	.+214    	; 0xdc2 <menu_process+0x102>
     cec:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <dark_menu_state>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <menu_process+0x36>
     cf4:	66 c0       	rjmp	.+204    	; 0xdc2 <menu_process+0x102>
	{
		menu_timer = mktime.ms + 50;
     cf6:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
     cfa:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
     cfe:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
     d02:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
     d06:	c2 96       	adiw	r24, 0x32	; 50
     d08:	a1 1d       	adc	r26, r1
     d0a:	b1 1d       	adc	r27, r1
     d0c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <menu_timer.2189>
     d10:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <menu_timer.2189+0x1>
     d14:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <menu_timer.2189+0x2>
     d18:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <menu_timer.2189+0x3>
		if (segment1.state == SEG_MENU)
     d1c:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
     d20:	87 30       	cpi	r24, 0x07	; 7
     d22:	31 f4       	brne	.+12     	; 0xd30 <menu_process+0x70>
			disp_set_number(&segment1, configured_parameter);
     d24:	60 91 f3 05 	lds	r22, 0x05F3	; 0x8005f3 <configured_parameter>
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	96 e0       	ldi	r25, 0x06	; 6
     d2c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
		if (segment2.state == SEG_MENU)
     d30:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
     d34:	87 30       	cpi	r24, 0x07	; 7
     d36:	51 f4       	brne	.+20     	; 0xd4c <menu_process+0x8c>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     d38:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <configured_parameter>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	e2 51       	subi	r30, 0x12	; 18
     d40:	fa 4f       	sbci	r31, 0xFA	; 250
     d42:	60 81       	ld	r22, Z
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     d4c:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
     d50:	88 30       	cpi	r24, 0x08	; 8
     d52:	49 f5       	brne	.+82     	; 0xda6 <menu_process+0xe6>
     d54:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	29 f5       	brne	.+74     	; 0xda6 <menu_process+0xe6>
		{
			menu_timer = 1000 + mktime.ms;
     d5c:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
     d60:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
     d64:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
     d68:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
     d6c:	88 51       	subi	r24, 0x18	; 24
     d6e:	9c 4f       	sbci	r25, 0xFC	; 252
     d70:	af 4f       	sbci	r26, 0xFF	; 255
     d72:	bf 4f       	sbci	r27, 0xFF	; 255
     d74:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <menu_timer.2189>
     d78:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <menu_timer.2189+0x1>
     d7c:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <menu_timer.2189+0x2>
     d80:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <menu_timer.2189+0x3>
			DispD2.value = 's';
     d84:	83 e7       	ldi	r24, 0x73	; 115
     d86:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <DispD2>
			DispD1.value = 'a';
     d8a:	81 e6       	ldi	r24, 0x61	; 97
     d8c:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <DispD1>
			DispD3.value = 'p';
     d90:	80 e7       	ldi	r24, 0x70	; 112
     d92:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <DispD3>
			DispD4.value = 0;
     d96:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     da0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
			
			return;
     da4:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     da6:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
     daa:	8a 30       	cpi	r24, 0x0A	; 10
     dac:	51 f4       	brne	.+20     	; 0xdc2 <menu_process+0x102>
     dae:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
     db2:	8a 30       	cpi	r24, 0x0A	; 10
     db4:	31 f4       	brne	.+12     	; 0xdc2 <menu_process+0x102>
		{
			segment1.state = SEG_OFF;
     db6:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <segment1+0x4>
			segment2.state = SEG_OFF;
     dba:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <segment2+0x4>
			dark_menu_state = 0;
     dbe:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <dark_menu_state>
     dc2:	08 95       	ret

00000dc4 <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dc4:	8a e5       	ldi	r24, 0x5A	; 90
     dc6:	96 e0       	ldi	r25, 0x06	; 6
     dc8:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <button1+0xc>
     dcc:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <button1+0xb>
	button2.fall_callback = button_2_number;
     dd0:	86 e5       	ldi	r24, 0x56	; 86
     dd2:	96 e0       	ldi	r25, 0x06	; 6
     dd4:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <button2+0xc>
     dd8:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <button2+0xb>
	button3.fall_callback = button_3_number;
     ddc:	82 e5       	ldi	r24, 0x52	; 82
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <button3+0xc>
     de4:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <button3+0xb>
	button5.fall_callback = button_5_number;
     de8:	8e e4       	ldi	r24, 0x4E	; 78
     dea:	96 e0       	ldi	r25, 0x06	; 6
     dec:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <button5+0xc>
     df0:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <button5+0xb>
	button6.fall_callback = button_6_number;
     df4:	8a e4       	ldi	r24, 0x4A	; 74
     df6:	96 e0       	ldi	r25, 0x06	; 6
     df8:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <button6+0xc>
     dfc:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <button6+0xb>
	button7.fall_callback = button_7_number;
     e00:	86 e4       	ldi	r24, 0x46	; 70
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <button7+0xc>
     e08:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e0c:	6e ee       	ldi	r22, 0xEE	; 238
     e0e:	75 e0       	ldi	r23, 0x05	; 5
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	0e 94 a8 11 	call	0x2350	; 0x2350 <mem_read_data>
	debug_msg("menu_read %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     e16:	ee ee       	ldi	r30, 0xEE	; 238
     e18:	f5 e0       	ldi	r31, 0x05	; 5
     e1a:	83 81       	ldd	r24, Z+3	; 0x03
     e1c:	1f 92       	push	r1
     e1e:	8f 93       	push	r24
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	1f 92       	push	r1
     e2a:	8f 93       	push	r24
     e2c:	80 81       	ld	r24, Z
     e2e:	1f 92       	push	r1
     e30:	8f 93       	push	r24
     e32:	89 ef       	ldi	r24, 0xF9	; 249
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9f 93       	push	r25
     e38:	8f 93       	push	r24
     e3a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e3e:	ae ee       	ldi	r26, 0xEE	; 238
     e40:	b5 e0       	ldi	r27, 0x05	; 5
     e42:	e4 e7       	ldi	r30, 0x74	; 116
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	4e e7       	ldi	r20, 0x7E	; 126
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	8d b7       	in	r24, 0x3d	; 61
     e4c:	9e b7       	in	r25, 0x3e	; 62
     e4e:	0a 96       	adiw	r24, 0x0a	; 10
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	9e bf       	out	0x3e, r25	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	8d bf       	out	0x3d, r24	; 61
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e5a:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e5c:	9c 91       	ld	r25, X
     e5e:	80 81       	ld	r24, Z
     e60:	89 17       	cp	r24, r25
     e62:	18 f4       	brcc	.+6      	; 0xe6a <init_menu+0xa6>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e64:	81 81       	ldd	r24, Z+1	; 0x01
     e66:	8c 93       	st	X, r24
			check_error++;
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e6e:	e4 17       	cp	r30, r20
     e70:	f5 07       	cpc	r31, r21
     e72:	a1 f7       	brne	.-24     	; 0xe5c <init_menu+0x98>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e74:	22 23       	and	r18, r18
     e76:	29 f0       	breq	.+10     	; 0xe82 <init_menu+0xbe>

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e78:	6e ee       	ldi	r22, 0xEE	; 238
     e7a:	75 e0       	ldi	r23, 0x05	; 5
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e82:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <pass_len>
	memset(pass, 0, sizeof(pass));
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	e8 ee       	ldi	r30, 0xE8	; 232
     e8a:	f5 e0       	ldi	r31, 0x05	; 5
     e8c:	df 01       	movw	r26, r30
     e8e:	1d 92       	st	X+, r1
     e90:	8a 95       	dec	r24
     e92:	e9 f7       	brne	.-6      	; 0xe8e <init_menu+0xca>
     e94:	08 95       	ret

00000e96 <dark_menu_get_value>:
	clear_password();
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	30 f4       	brcc	.+12     	; 0xea6 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e9a:	e8 2f       	mov	r30, r24
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	e2 51       	subi	r30, 0x12	; 18
     ea0:	fa 4f       	sbci	r31, 0xFA	; 250
     ea2:	80 81       	ld	r24, Z
     ea4:	08 95       	ret
	}
	return 0;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
}
     ea8:	08 95       	ret

00000eaa <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     eaa:	87 e1       	ldi	r24, 0x17	; 23
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
     eb2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     eb6:	8a ef       	ldi	r24, 0xFA	; 250
     eb8:	95 e0       	ldi	r25, 0x05	; 5
     eba:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <evTime_init>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <motorD>
     ec4:	94 98       	cbi	0x12, 4	; 18
     ec6:	15 bc       	out	0x25, r1	; 37
     ec8:	8f 9a       	sbi	0x11, 7	; 17
     eca:	97 9a       	sbi	0x12, 7	; 18
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	08 95       	ret

00000ed2 <dcmotorpwm_deinit>:
     ed2:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <motorD>
     ed6:	15 bc       	out	0x25, r1	; 37
     ed8:	97 9a       	sbi	0x12, 7	; 18
     eda:	94 98       	cbi	0x12, 4	; 18
     edc:	08 95       	ret

00000ede <dcmotor_is_on>:
     ede:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <motorD>
     ee2:	92 50       	subi	r25, 0x02	; 2
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	93 30       	cpi	r25, 0x03	; 3
     eea:	10 f0       	brcs	.+4      	; 0xef0 <dcmotor_is_on+0x12>
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	08 95       	ret

00000ef4 <dcmotorpwm_stop>:
     ef4:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	99 f0       	breq	.+38     	; 0xf22 <dcmotorpwm_stop+0x2e>
     efc:	85 e2       	ldi	r24, 0x25	; 37
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f08:	15 bc       	out	0x25, r1	; 37
     f0a:	97 9a       	sbi	0x12, 7	; 18
     f0c:	94 98       	cbi	0x12, 4	; 18
     f0e:	e6 ef       	ldi	r30, 0xF6	; 246
     f10:	f5 e0       	ldi	r31, 0x05	; 5
     f12:	80 81       	ld	r24, Z
     f14:	81 83       	std	Z+1, r24	; 0x01
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 83       	st	Z, r24
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	08 95       	ret

00000f24 <dcmotorpwm_start>:
     f24:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <motorD>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	d9 f4       	brne	.+54     	; 0xf62 <dcmotorpwm_start+0x3e>
     f2c:	94 9a       	sbi	0x12, 4	; 18
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	80 63       	ori	r24, 0x30	; 48
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	e6 ef       	ldi	r30, 0xF6	; 246
     f42:	f5 e0       	ldi	r31, 0x05	; 5
     f44:	80 81       	ld	r24, Z
     f46:	81 83       	std	Z+1, r24	; 0x01
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	80 83       	st	Z, r24
     f4c:	48 ee       	ldi	r20, 0xE8	; 232
     f4e:	53 e0       	ldi	r21, 0x03	; 3
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	8a ef       	ldi	r24, 0xFA	; 250
     f56:	95 e0       	ldi	r25, 0x05	; 5
     f58:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	08 95       	ret
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	08 95       	ret

00000f68 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f68:	80 91 f9 05 	lds	r24, 0x05F9	; 0x8005f9 <motorD+0x3>
}
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f70:	83 e3       	ldi	r24, 0x33	; 51
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f7c:	0e 94 7a 07 	call	0xef4	; 0xef4 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f80:	85 e0       	ldi	r24, 0x05	; 5
     f82:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <motorD>
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	08 95       	ret

00000f8c <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f8c:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	29 f0       	breq	.+10     	; 0xf9e <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <motorD>
		return 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f9e:	08 95       	ret

00000fa0 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     fa0:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <motorD>
		return 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fb2:	08 95       	ret

00000fb4 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     fb4:	cf 93       	push	r28
     fb6:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     fb8:	46 e9       	ldi	r20, 0x96	; 150
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	8e ea       	ldi	r24, 0xAE	; 174
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 17 18 	call	0x302e	; 0x302e <evTime_process_period>
     fc8:	89 2b       	or	r24, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <dcmotor_process+0x1a>
     fcc:	58 c0       	rjmp	.+176    	; 0x107e <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     fce:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <motorD>
     fd2:	93 30       	cpi	r25, 0x03	; 3
     fd4:	e9 f0       	breq	.+58     	; 0x1010 <dcmotor_process+0x5c>
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <dcmotor_process+0x2e>
     fd8:	91 30       	cpi	r25, 0x01	; 1
     fda:	b9 f0       	breq	.+46     	; 0x100a <dcmotor_process+0x56>
     fdc:	92 30       	cpi	r25, 0x02	; 2
     fde:	41 f0       	breq	.+16     	; 0xff0 <dcmotor_process+0x3c>
     fe0:	4e c0       	rjmp	.+156    	; 0x107e <dcmotor_process+0xca>
     fe2:	94 30       	cpi	r25, 0x04	; 4
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <dcmotor_process+0x34>
     fe6:	48 c0       	rjmp	.+144    	; 0x1078 <dcmotor_process+0xc4>
     fe8:	95 30       	cpi	r25, 0x05	; 5
     fea:	09 f4       	brne	.+2      	; 0xfee <dcmotor_process+0x3a>
     fec:	42 c0       	rjmp	.+132    	; 0x1072 <dcmotor_process+0xbe>
     fee:	47 c0       	rjmp	.+142    	; 0x107e <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     ff0:	c0 93 f9 05 	sts	0x05F9, r28	; 0x8005f9 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     ff4:	2b ee       	ldi	r18, 0xEB	; 235
     ff6:	c2 9f       	mul	r28, r18
     ff8:	c0 01       	movw	r24, r0
     ffa:	11 24       	eor	r1, r1
     ffc:	63 e6       	ldi	r22, 0x63	; 99
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 1b 20 	call	0x4036	; 0x4036 <__divmodhi4>
    1004:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
    1006:	63 bd       	out	0x23, r22	; 35
			break;
    1008:	3a c0       	rjmp	.+116    	; 0x107e <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    100a:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <motorD+0x3>
			break;
    100e:	37 c0       	rjmp	.+110    	; 0x107e <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
    1010:	c3 33       	cpi	r28, 0x33	; 51
    1012:	78 f4       	brcc	.+30     	; 0x1032 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
    1014:	84 e1       	ldi	r24, 0x14	; 20
    1016:	8c 0f       	add	r24, r28
    1018:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    101c:	2b ee       	ldi	r18, 0xEB	; 235
    101e:	82 9f       	mul	r24, r18
    1020:	c0 01       	movw	r24, r0
    1022:	11 24       	eor	r1, r1
    1024:	63 e6       	ldi	r22, 0x63	; 99
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	0e 94 1b 20 	call	0x4036	; 0x4036 <__divmodhi4>
    102c:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
    102e:	63 bd       	out	0x23, r22	; 35
    1030:	26 c0       	rjmp	.+76     	; 0x107e <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    1032:	8d ec       	ldi	r24, 0xCD	; 205
    1034:	8c 0f       	add	r24, r28
    1036:	84 31       	cpi	r24, 0x14	; 20
    1038:	78 f4       	brcc	.+30     	; 0x1058 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    103a:	8f e0       	ldi	r24, 0x0F	; 15
    103c:	8c 0f       	add	r24, r28
    103e:	80 93 f9 05 	sts	0x05F9, r24	; 0x8005f9 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1042:	2b ee       	ldi	r18, 0xEB	; 235
    1044:	82 9f       	mul	r24, r18
    1046:	c0 01       	movw	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	63 e6       	ldi	r22, 0x63	; 99
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	0e 94 1b 20 	call	0x4036	; 0x4036 <__divmodhi4>
    1052:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    1054:	63 bd       	out	0x23, r22	; 35
    1056:	13 c0       	rjmp	.+38     	; 0x107e <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    1058:	c0 93 f9 05 	sts	0x05F9, r28	; 0x8005f9 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    105c:	2b ee       	ldi	r18, 0xEB	; 235
    105e:	c2 9f       	mul	r28, r18
    1060:	c0 01       	movw	r24, r0
    1062:	11 24       	eor	r1, r1
    1064:	63 e6       	ldi	r22, 0x63	; 99
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	0e 94 1b 20 	call	0x4036	; 0x4036 <__divmodhi4>
    106c:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    106e:	63 bd       	out	0x23, r22	; 35
    1070:	06 c0       	rjmp	.+12     	; 0x107e <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1072:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1074:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1076:	03 c0       	rjmp	.+6      	; 0x107e <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1082:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1084:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1086:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1088:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    108a:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    108c:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    108e:	af 9a       	sbi	0x15, 7	; 21
    1090:	08 95       	ret

00001092 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1092:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1094:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1098:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    109a:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    109e:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    10a0:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    10a4:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    10a6:	10 92 17 06 	sts	0x0617, r1	; 0x800617 <DispD4+0x1>
    10aa:	08 95       	ret

000010ac <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    10ac:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    10ae:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    10b0:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    10b2:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    10b4:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10b6:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10b8:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10ba:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10bc:	ee e0       	ldi	r30, 0x0E	; 14
    10be:	f6 e0       	ldi	r31, 0x06	; 6
    10c0:	8c e0       	ldi	r24, 0x0C	; 12
    10c2:	96 e0       	ldi	r25, 0x06	; 6
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10c8:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10ca:	28 e1       	ldi	r18, 0x18	; 24
    10cc:	36 e0       	ldi	r19, 0x06	; 6
    10ce:	33 83       	std	Z+3, r19	; 0x03
    10d0:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10d2:	a5 e0       	ldi	r26, 0x05	; 5
    10d4:	b6 e0       	ldi	r27, 0x06	; 6
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	3c 93       	st	X, r19
    10da:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
    10e2:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10e4:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10e6:	2a e0       	ldi	r18, 0x0A	; 10
    10e8:	36 e0       	ldi	r19, 0x06	; 6
    10ea:	35 83       	std	Z+5, r19	; 0x05
    10ec:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10ee:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10f0:	86 e1       	ldi	r24, 0x16	; 22
    10f2:	96 e0       	ldi	r25, 0x06	; 6
    10f4:	97 83       	std	Z+7, r25	; 0x07
    10f6:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10f8:	e0 e0       	ldi	r30, 0x00	; 0
    10fa:	f6 e0       	ldi	r31, 0x06	; 6
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1104:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
	clear_display();
    1108:	0e 94 41 08 	call	0x1082	; 0x1082 <clear_display>
    110c:	08 95       	ret

0000110e <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
	if (DispD->value != displaying_value)
    1112:	fc 01       	movw	r30, r24
    1114:	30 81       	ld	r19, Z
    1116:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <displaying_value>
    111a:	32 17       	cp	r19, r18
    111c:	09 f4       	brne	.+2      	; 0x1120 <display_set_value+0x12>
    111e:	95 c0       	rjmp	.+298    	; 0x124a <display_set_value+0x13c>
    1120:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1122:	0e 94 41 08 	call	0x1082	; 0x1082 <clear_display>
		switch(DispD->value)
    1126:	e8 81       	ld	r30, Y
    1128:	8e 2f       	mov	r24, r30
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	8f 3f       	cpi	r24, 0xFF	; 255
    112e:	91 05       	cpc	r25, r1
    1130:	08 f0       	brcs	.+2      	; 0x1134 <display_set_value+0x26>
    1132:	88 c0       	rjmp	.+272    	; 0x1244 <display_set_value+0x136>
    1134:	fc 01       	movw	r30, r24
    1136:	e6 5d       	subi	r30, 0xD6	; 214
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    113e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1140:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1142:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1144:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1146:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1148:	aa 98       	cbi	0x15, 2	; 21
			break;
    114a:	7c c0       	rjmp	.+248    	; 0x1244 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    114c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    114e:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1150:	79 c0       	rjmp	.+242    	; 0x1244 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1152:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1154:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1156:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1158:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    115a:	df 98       	cbi	0x1b, 7	; 27
			break;
    115c:	73 c0       	rjmp	.+230    	; 0x1244 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    115e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1160:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1162:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1164:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1166:	df 98       	cbi	0x1b, 7	; 27
			break;
    1168:	6d c0       	rjmp	.+218    	; 0x1244 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    116a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    116c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    116e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1170:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1172:	68 c0       	rjmp	.+208    	; 0x1244 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1174:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1176:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1178:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    117a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    117c:	df 98       	cbi	0x1b, 7	; 27
			break;
    117e:	62 c0       	rjmp	.+196    	; 0x1244 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1180:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1182:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1184:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1186:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1188:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    118a:	de 98       	cbi	0x1b, 6	; 27
			break;
    118c:	5b c0       	rjmp	.+182    	; 0x1244 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    118e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1190:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1192:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1194:	57 c0       	rjmp	.+174    	; 0x1244 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1196:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1198:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    119a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    119c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    119e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11a0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11a2:	af 98       	cbi	0x15, 7	; 21
			break;
    11a4:	4f c0       	rjmp	.+158    	; 0x1244 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    11a6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11a8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11aa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ac:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11ae:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11b0:	af 98       	cbi	0x15, 7	; 21
			break;
    11b2:	48 c0       	rjmp	.+144    	; 0x1244 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    11b4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11b6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11b8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11ba:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11bc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11be:	af 98       	cbi	0x15, 7	; 21
			break;
    11c0:	41 c0       	rjmp	.+130    	; 0x1244 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11c2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11c4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11c6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ca:	af 98       	cbi	0x15, 7	; 21
			break;
    11cc:	3b c0       	rjmp	.+118    	; 0x1244 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11ce:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11d0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11d2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11d4:	aa 98       	cbi	0x15, 2	; 21
			break;
    11d6:	36 c0       	rjmp	.+108    	; 0x1244 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11d8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11da:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11dc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11de:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11e0:	af 98       	cbi	0x15, 7	; 21
			break;
    11e2:	30 c0       	rjmp	.+96     	; 0x1244 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11e4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11e6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11e8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11ea:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ec:	af 98       	cbi	0x15, 7	; 21
			break;
    11ee:	2a c0       	rjmp	.+84     	; 0x1244 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11f0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11f2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11f6:	af 98       	cbi	0x15, 7	; 21
			break;
    11f8:	25 c0       	rjmp	.+74     	; 0x1244 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    11fa:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11fc:	af 98       	cbi	0x15, 7	; 21
			break;
    11fe:	22 c0       	rjmp	.+68     	; 0x1244 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1200:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1202:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1204:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1206:	af 98       	cbi	0x15, 7	; 21
			break;
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    120a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    120c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    120e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1210:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1212:	af 98       	cbi	0x15, 7	; 21
			break;
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    1216:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    1218:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    121a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    121c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    121e:	af 98       	cbi	0x15, 7	; 21
			break;
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1222:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1224:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1226:	aa 98       	cbi	0x15, 2	; 21
			break;
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    122a:	af 98       	cbi	0x15, 7	; 21
			break;
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    122e:	aa 98       	cbi	0x15, 2	; 21
			break;
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1232:	de 98       	cbi	0x1b, 6	; 27
			break;
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1236:	df 98       	cbi	0x1b, 7	; 27
			break;
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    123a:	dd 98       	cbi	0x1b, 5	; 27
			break;
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    123e:	ad 98       	cbi	0x15, 5	; 21
			break;
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1242:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1244:	88 81       	ld	r24, Y
    1246:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displaying_value>
	}
	
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <on_display>:
void on_display(disp_drv *DispD)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
	off_all_displays();
    1256:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
	display_set_value(DispD);
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 87 08 	call	0x110e	; 0x110e <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1260:	86 e0       	ldi	r24, 0x06	; 6
    1262:	cc 30       	cpi	r28, 0x0C	; 12
    1264:	d8 07       	cpc	r29, r24
    1266:	29 f4       	brne	.+10     	; 0x1272 <on_display+0x22>
	{
		LED_ON_DISP1;
    1268:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <DispD1+0x1>
    1270:	19 c0       	rjmp	.+50     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1272:	86 e0       	ldi	r24, 0x06	; 6
    1274:	c8 31       	cpi	r28, 0x18	; 24
    1276:	d8 07       	cpc	r29, r24
    1278:	29 f4       	brne	.+10     	; 0x1284 <on_display+0x34>
	{
		LED_ON_DISP2;
    127a:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <DispD2+0x1>
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1284:	86 e0       	ldi	r24, 0x06	; 6
    1286:	ca 30       	cpi	r28, 0x0A	; 10
    1288:	d8 07       	cpc	r29, r24
    128a:	29 f4       	brne	.+10     	; 0x1296 <on_display+0x46>
	{
		LED_ON_DISP3;
    128c:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <DispD3+0x1>
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1296:	c6 51       	subi	r28, 0x16	; 22
    1298:	d6 40       	sbci	r29, 0x06	; 6
    129a:	21 f4       	brne	.+8      	; 0x12a4 <on_display+0x54>
	{
		LED_ON_DISP4;
    129c:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <DispD4+0x1>
	}
	#endif
}
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12b6:	c0 81       	ld	r28, Z
    12b8:	d1 81       	ldd	r29, Z+1	; 0x01
    12ba:	21 96       	adiw	r28, 0x01	; 1
    12bc:	d1 83       	std	Z+1, r29	; 0x01
    12be:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12c0:	9e 01       	movw	r18, r28
    12c2:	ad ec       	ldi	r26, 0xCD	; 205
    12c4:	bc ec       	ldi	r27, 0xCC	; 204
    12c6:	0e 94 57 20 	call	0x40ae	; 0x40ae <__umulhisi3>
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	9c 01       	movw	r18, r24
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	c8 17       	cp	r28, r24
    12ee:	d9 07       	cpc	r29, r25
    12f0:	01 f5       	brne	.+64     	; 0x1332 <display_process+0x88>
    12f2:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12f4:	10 91 b3 03 	lds	r17, 0x03B3	; 0x8003b3 <iteration>
    12f8:	14 30       	cpi	r17, 0x04	; 4
    12fa:	58 f4       	brcc	.+22     	; 0x1312 <display_process+0x68>
			on_display(disp_tab[iteration]);
    12fc:	e1 2f       	mov	r30, r17
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	e2 5f       	subi	r30, 0xF2	; 242
    1306:	f9 4f       	sbci	r31, 0xF9	; 249
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	0e 94 28 09 	call	0x1250	; 0x1250 <on_display>
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <display_process+0x6c>
		else
			off_all_displays();
    1312:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
		iteration++;
    1316:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1318:	15 30       	cpi	r17, 0x05	; 5
    131a:	19 f0       	breq	.+6      	; 0x1322 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    131c:	10 93 b3 03 	sts	0x03B3, r17	; 0x8003b3 <iteration>
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1322:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1326:	c0 39       	cpi	r28, 0x90	; 144
    1328:	d1 40       	sbci	r29, 0x01	; 1
    132a:	19 f4       	brne	.+6      	; 0x1332 <display_process+0x88>
    132c:	f7 01       	movw	r30, r14
    132e:	11 82       	std	Z+1, r1	; 0x01
    1330:	10 82       	st	Z, r1
	}
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	08 95       	ret

0000133e <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    133e:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1340:	64 36       	cpi	r22, 0x64	; 100
    1342:	f8 f4       	brcc	.+62     	; 0x1382 <disp_set_number+0x44>
	else if (number == 0)
    1344:	61 11       	cpse	r22, r1
    1346:	08 c0       	rjmp	.+16     	; 0x1358 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    1348:	a0 81       	ld	r26, Z
    134a:	b1 81       	ldd	r27, Z+1	; 0x01
    134c:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    134e:	02 80       	ldd	r0, Z+2	; 0x02
    1350:	f3 81       	ldd	r31, Z+3	; 0x03
    1352:	e0 2d       	mov	r30, r0
    1354:	10 82       	st	Z, r1
    1356:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1358:	a0 81       	ld	r26, Z
    135a:	b1 81       	ldd	r27, Z+1	; 0x01
    135c:	9d ec       	ldi	r25, 0xCD	; 205
    135e:	69 9f       	mul	r22, r25
    1360:	91 2d       	mov	r25, r1
    1362:	11 24       	eor	r1, r1
    1364:	96 95       	lsr	r25
    1366:	96 95       	lsr	r25
    1368:	96 95       	lsr	r25
    136a:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    136c:	02 80       	ldd	r0, Z+2	; 0x02
    136e:	f3 81       	ldd	r31, Z+3	; 0x03
    1370:	e0 2d       	mov	r30, r0
    1372:	89 2f       	mov	r24, r25
    1374:	88 0f       	add	r24, r24
    1376:	98 2f       	mov	r25, r24
    1378:	99 0f       	add	r25, r25
    137a:	99 0f       	add	r25, r25
    137c:	89 0f       	add	r24, r25
    137e:	68 1b       	sub	r22, r24
    1380:	60 83       	st	Z, r22
    1382:	08 95       	ret

00001384 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1384:	fc 01       	movw	r30, r24
    1386:	60 83       	st	Z, r22
    1388:	08 95       	ret

0000138a <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	39 f0       	breq	.+14     	; 0x139c <dip_set_value+0x12>
    138e:	18 f0       	brcs	.+6      	; 0x1396 <dip_set_value+0xc>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	39 f0       	breq	.+14     	; 0x13a2 <dip_set_value+0x18>
    1394:	08 95       	ret
    1396:	60 93 cf 03 	sts	0x03CF, r22	; 0x8003cf <motor_disp_value>
    139a:	08 95       	ret
    139c:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <servo_disp_value>
    13a0:	08 95       	ret
    13a2:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <servo_disp_value>
    13a6:	60 93 cf 03 	sts	0x03CF, r22	; 0x8003cf <motor_disp_value>
    13aa:	08 95       	ret

000013ac <disp_get_state>:
    13ac:	88 23       	and	r24, r24
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <disp_get_state+0xa>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	29 f0       	breq	.+10     	; 0x13be <disp_get_state+0x12>
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <disp_get_state+0x1a>
    13b6:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	08 95       	ret
    13be:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 95       	ret
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	08 95       	ret

000013cc <disp_disable_voltage>:
    13cc:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    13d0:	86 30       	cpi	r24, 0x06	; 6
    13d2:	21 f4       	brne	.+8      	; 0x13dc <disp_disable_voltage+0x10>
    13d4:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <disp1_last_state>
    13d8:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
    13dc:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    13e0:	86 30       	cpi	r24, 0x06	; 6
    13e2:	21 f4       	brne	.+8      	; 0x13ec <disp_disable_voltage+0x20>
    13e4:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <disp2_last_state>
    13e8:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
    13ec:	08 95       	ret

000013ee <disp_set_state>:
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	a1 f0       	breq	.+40     	; 0x141a <disp_set_state+0x2c>
    13f2:	18 f0       	brcs	.+6      	; 0x13fa <disp_set_state+0xc>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	09 f1       	breq	.+66     	; 0x143a <disp_set_state+0x4c>
    13f8:	08 95       	ret
    13fa:	66 30       	cpi	r22, 0x06	; 6
    13fc:	21 f4       	brne	.+8      	; 0x1406 <disp_set_state+0x18>
    13fe:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    1402:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <disp1_last_state>
    1406:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    140a:	86 30       	cpi	r24, 0x06	; 6
    140c:	19 f4       	brne	.+6      	; 0x1414 <disp_set_state+0x26>
    140e:	60 93 1a 06 	sts	0x061A, r22	; 0x80061a <disp1_last_state>
    1412:	08 95       	ret
    1414:	60 93 09 06 	sts	0x0609, r22	; 0x800609 <segment1+0x4>
    1418:	08 95       	ret
    141a:	66 30       	cpi	r22, 0x06	; 6
    141c:	21 f4       	brne	.+8      	; 0x1426 <disp_set_state+0x38>
    141e:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    1422:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <disp2_last_state>
    1426:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    142a:	86 30       	cpi	r24, 0x06	; 6
    142c:	19 f4       	brne	.+6      	; 0x1434 <disp_set_state+0x46>
    142e:	60 93 1b 06 	sts	0x061B, r22	; 0x80061b <disp2_last_state>
    1432:	08 95       	ret
    1434:	60 93 04 06 	sts	0x0604, r22	; 0x800604 <segment2+0x4>
    1438:	08 95       	ret
    143a:	66 30       	cpi	r22, 0x06	; 6
    143c:	41 f4       	brne	.+16     	; 0x144e <disp_set_state+0x60>
    143e:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    1442:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <disp1_last_state>
    1446:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    144a:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <disp2_last_state>
    144e:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    1452:	86 30       	cpi	r24, 0x06	; 6
    1454:	29 f4       	brne	.+10     	; 0x1460 <disp_set_state+0x72>
    1456:	60 93 1b 06 	sts	0x061B, r22	; 0x80061b <disp2_last_state>
    145a:	60 93 1a 06 	sts	0x061A, r22	; 0x80061a <disp1_last_state>
    145e:	08 95       	ret
    1460:	60 93 09 06 	sts	0x0609, r22	; 0x800609 <segment1+0x4>
    1464:	60 93 04 06 	sts	0x0604, r22	; 0x800604 <segment2+0x4>
    1468:	08 95       	ret

0000146a <display_set_error>:
    146a:	95 e0       	ldi	r25, 0x05	; 5
    146c:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <segment1+0x4>
    1470:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <segment2+0x4>
    1474:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <error_reason>
    1478:	08 95       	ret

0000147a <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    147a:	68 ef       	ldi	r22, 0xF8	; 248
    147c:	8c e0       	ldi	r24, 0x0C	; 12
    147e:	96 e0       	ldi	r25, 0x06	; 6
    1480:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1484:	68 ef       	ldi	r22, 0xF8	; 248
    1486:	88 e1       	ldi	r24, 0x18	; 24
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    148e:	68 ef       	ldi	r22, 0xF8	; 248
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	96 e0       	ldi	r25, 0x06	; 6
    1494:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1498:	68 ef       	ldi	r22, 0xF8	; 248
    149a:	86 e1       	ldi	r24, 0x16	; 22
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
    14a2:	08 95       	ret

000014a4 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    14a4:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
    14a8:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
    14ac:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
    14b0:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
    14b4:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <timer_disp_process.1979>
    14b8:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <timer_disp_process.1979+0x1>
    14bc:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <timer_disp_process.1979+0x2>
    14c0:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <timer_disp_process.1979+0x3>
    14c4:	48 17       	cp	r20, r24
    14c6:	59 07       	cpc	r21, r25
    14c8:	6a 07       	cpc	r22, r26
    14ca:	7b 07       	cpc	r23, r27
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <disp_process+0x2c>
    14ce:	26 c1       	rjmp	.+588    	; 0x171c <disp_process+0x278>
	{
        
        switch(segment1.state)
    14d0:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	09 f4       	brne	.+2      	; 0x14da <disp_process+0x36>
    14d8:	59 c0       	rjmp	.+178    	; 0x158c <disp_process+0xe8>
    14da:	30 f4       	brcc	.+12     	; 0x14e8 <disp_process+0x44>
    14dc:	88 23       	and	r24, r24
    14de:	09 f4       	brne	.+2      	; 0x14e2 <disp_process+0x3e>
    14e0:	87 c0       	rjmp	.+270    	; 0x15f0 <disp_process+0x14c>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	39 f1       	breq	.+78     	; 0x1534 <disp_process+0x90>
    14e6:	8e c0       	rjmp	.+284    	; 0x1604 <disp_process+0x160>
    14e8:	85 30       	cpi	r24, 0x05	; 5
    14ea:	09 f4       	brne	.+2      	; 0x14ee <disp_process+0x4a>
    14ec:	74 c0       	rjmp	.+232    	; 0x15d6 <disp_process+0x132>
    14ee:	48 f1       	brcs	.+82     	; 0x1542 <disp_process+0x9e>
    14f0:	86 30       	cpi	r24, 0x06	; 6
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <disp_process+0x52>
    14f4:	87 c0       	rjmp	.+270    	; 0x1604 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	48 ec       	ldi	r20, 0xC8	; 200
    1500:	52 e4       	ldi	r21, 0x42	; 66
    1502:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    1506:	0e 94 bf 19 	call	0x337e	; 0x337e <__fixsfsi>
    150a:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <voltage+0x1>
    150e:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <voltage>
            disp_set_number(&segment1, voltage/100);
    1512:	9b 01       	movw	r18, r22
    1514:	36 95       	lsr	r19
    1516:	27 95       	ror	r18
    1518:	36 95       	lsr	r19
    151a:	27 95       	ror	r18
    151c:	ab e7       	ldi	r26, 0x7B	; 123
    151e:	b4 e1       	ldi	r27, 0x14	; 20
    1520:	0e 94 57 20 	call	0x40ae	; 0x40ae <__umulhisi3>
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	68 2f       	mov	r22, r24
    152a:	85 e0       	ldi	r24, 0x05	; 5
    152c:	96 e0       	ldi	r25, 0x06	; 6
    152e:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1532:	68 c0       	rjmp	.+208    	; 0x1604 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1534:	60 91 cf 03 	lds	r22, 0x03CF	; 0x8003cf <motor_disp_value>
    1538:	85 e0       	ldi	r24, 0x05	; 5
    153a:	96 e0       	ldi	r25, 0x06	; 6
    153c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1540:	61 c0       	rjmp	.+194    	; 0x1604 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1542:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	31 f0       	breq	.+12     	; 0x1556 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1550:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
                break;
    1554:	57 c0       	rjmp	.+174    	; 0x1604 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1556:	48 51       	subi	r20, 0x18	; 24
    1558:	5c 4f       	sbci	r21, 0xFC	; 252
    155a:	6f 4f       	sbci	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	40 93 b8 03 	sts	0x03B8, r20	; 0x8003b8 <timer_disp_process.1979>
    1562:	50 93 b9 03 	sts	0x03B9, r21	; 0x8003b9 <timer_disp_process.1979+0x1>
    1566:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <timer_disp_process.1979+0x2>
    156a:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    156e:	83 e7       	ldi	r24, 0x73	; 115
    1570:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <DispD2>
			DispD1.value = 'a';
    1574:	81 e6       	ldi	r24, 0x61	; 97
    1576:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <DispD1>
			DispD3.value = 'p';
    157a:	80 e7       	ldi	r24, 0x70	; 112
    157c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <DispD3>
			segment1.state = SEG_VALUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1586:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
			return;
    158a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    158c:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	31 f0       	breq	.+12     	; 0x15a0 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    159a:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
                break;
    159e:	32 c0       	rjmp	.+100    	; 0x1604 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    15a0:	48 51       	subi	r20, 0x18	; 24
    15a2:	5c 4f       	sbci	r21, 0xFC	; 252
    15a4:	6f 4f       	sbci	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	40 93 b8 03 	sts	0x03B8, r20	; 0x8003b8 <timer_disp_process.1979>
    15ac:	50 93 b9 03 	sts	0x03B9, r21	; 0x8003b9 <timer_disp_process.1979+0x1>
    15b0:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <timer_disp_process.1979+0x2>
    15b4:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15b8:	8c e6       	ldi	r24, 0x6C	; 108
    15ba:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <DispD2>
			DispD1.value = 'o';
    15be:	8f e6       	ldi	r24, 0x6F	; 111
    15c0:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <DispD1>
			DispD3.value = 'p';
    15c4:	80 e7       	ldi	r24, 0x70	; 112
    15c6:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <DispD3>
			segment1.state = SEG_VALUE;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <segment1+0x4>
			segment2.state = SEG_VALUE;
    15d0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <segment2+0x4>
            break;
    15d4:	17 c0       	rjmp	.+46     	; 0x1604 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15d6:	85 e6       	ldi	r24, 0x65	; 101
    15d8:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <DispD2>
			DispD1.value = 'r';
    15dc:	82 e7       	ldi	r24, 0x72	; 114
    15de:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <DispD1>
			disp_set_number(&segment2, error_reason);
    15e2:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <error_reason>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	96 e0       	ldi	r25, 0x06	; 6
    15ea:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15f0:	68 ef       	ldi	r22, 0xF8	; 248
    15f2:	8c e0       	ldi	r24, 0x0C	; 12
    15f4:	96 e0       	ldi	r25, 0x06	; 6
    15f6:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    15fa:	68 ef       	ldi	r22, 0xF8	; 248
    15fc:	88 e1       	ldi	r24, 0x18	; 24
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1604:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	19 f1       	breq	.+70     	; 0x1652 <disp_process+0x1ae>
    160c:	48 f1       	brcs	.+82     	; 0x1660 <disp_process+0x1bc>
    160e:	86 30       	cpi	r24, 0x06	; 6
    1610:	19 f0       	breq	.+6      	; 0x1618 <disp_process+0x174>
    1612:	8d 30       	cpi	r24, 0x0D	; 13
    1614:	81 f1       	breq	.+96     	; 0x1676 <disp_process+0x1d2>
    1616:	6f c0       	rjmp	.+222    	; 0x16f6 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1618:	40 91 c7 03 	lds	r20, 0x03C7	; 0x8003c7 <voltage>
    161c:	50 91 c8 03 	lds	r21, 0x03C8	; 0x8003c8 <voltage+0x1>
    1620:	9a 01       	movw	r18, r20
    1622:	36 95       	lsr	r19
    1624:	27 95       	ror	r18
    1626:	36 95       	lsr	r19
    1628:	27 95       	ror	r18
    162a:	ab e7       	ldi	r26, 0x7B	; 123
    162c:	b4 e1       	ldi	r27, 0x14	; 20
    162e:	0e 94 57 20 	call	0x40ae	; 0x40ae <__umulhisi3>
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	64 e6       	ldi	r22, 0x64	; 100
    1638:	68 9f       	mul	r22, r24
    163a:	90 01       	movw	r18, r0
    163c:	69 9f       	mul	r22, r25
    163e:	30 0d       	add	r19, r0
    1640:	11 24       	eor	r1, r1
    1642:	ba 01       	movw	r22, r20
    1644:	62 1b       	sub	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	96 e0       	ldi	r25, 0x06	; 6
    164c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1650:	52 c0       	rjmp	.+164    	; 0x16f6 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1652:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <servo_disp_value>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	96 e0       	ldi	r25, 0x06	; 6
    165a:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    165e:	4b c0       	rjmp	.+150    	; 0x16f6 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1660:	68 ef       	ldi	r22, 0xF8	; 248
    1662:	8a e0       	ldi	r24, 0x0A	; 10
    1664:	96 e0       	ldi	r25, 0x06	; 6
    1666:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    166a:	68 ef       	ldi	r22, 0xF8	; 248
    166c:	86 e1       	ldi	r24, 0x16	; 22
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            break;
    1674:	40 c0       	rjmp	.+128    	; 0x16f6 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1676:	44 ef       	ldi	r20, 0xF4	; 244
    1678:	51 e0       	ldi	r21, 0x01	; 1
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	82 ec       	ldi	r24, 0xC2	; 194
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	0e 94 17 18 	call	0x302e	; 0x302e <evTime_process_period>
    1686:	89 2b       	or	r24, r25
    1688:	b1 f1       	breq	.+108    	; 0x16f6 <disp_process+0x252>
			{
				if (blink_state == 0)
    168a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <blink_state>
    168e:	81 11       	cpse	r24, r1
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <disp_process+0x20a>
				{
					blink_state = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1698:	67 ef       	ldi	r22, 0xF7	; 247
    169a:	8a e0       	ldi	r24, 0x0A	; 10
    169c:	96 e0       	ldi	r25, 0x06	; 6
    169e:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    16a2:	67 ef       	ldi	r22, 0xF7	; 247
    16a4:	86 e1       	ldi	r24, 0x16	; 22
    16a6:	96 e0       	ldi	r25, 0x06	; 6
    16a8:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
    16ac:	24 c0       	rjmp	.+72     	; 0x16f6 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    16ae:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <blink_state>
					if (blink_cnt == 0) 
    16b2:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <blink_cnt>
    16b6:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <blink_cnt+0x1>
    16ba:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <blink_cnt+0x2>
    16be:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <blink_cnt+0x3>
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
						break;
    16d2:	11 c0       	rjmp	.+34     	; 0x16f6 <disp_process+0x252>
					}
					blink_cnt--;
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	a1 09       	sbc	r26, r1
    16d8:	b1 09       	sbc	r27, r1
    16da:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <blink_cnt>
    16de:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <blink_cnt+0x1>
    16e2:	a0 93 bf 03 	sts	0x03BF, r26	; 0x8003bf <blink_cnt+0x2>
    16e6:	b0 93 c0 03 	sts	0x03C0, r27	; 0x8003c0 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16ea:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <second_disp_blink_val>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	96 e0       	ldi	r25, 0x06	; 6
    16f2:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16f6:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <timer_disp_process.1979>
    16fa:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <timer_disp_process.1979+0x1>
    16fe:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <timer_disp_process.1979+0x2>
    1702:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <timer_disp_process.1979+0x3>
    1706:	c2 96       	adiw	r24, 0x32	; 50
    1708:	a1 1d       	adc	r26, r1
    170a:	b1 1d       	adc	r27, r1
    170c:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <timer_disp_process.1979>
    1710:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <timer_disp_process.1979+0x1>
    1714:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <timer_disp_process.1979+0x2>
    1718:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <timer_disp_process.1979+0x3>
    171c:	08 95       	ret

0000171e <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1722:	00 91 2d 06 	lds	r16, 0x062D	; 0x80062d <mktime+0x2>
    1726:	10 91 2e 06 	lds	r17, 0x062E	; 0x80062e <mktime+0x3>
    172a:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <mktime+0x4>
    172e:	30 91 30 06 	lds	r19, 0x0630	; 0x800630 <mktime+0x5>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	80 0f       	add	r24, r16
    1738:	91 1f       	adc	r25, r17
    173a:	a2 1f       	adc	r26, r18
    173c:	b3 1f       	adc	r27, r19
    173e:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <animation_time>
    1742:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <animation_time+0x1>
    1746:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <animation_time+0x2>
    174a:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	84 2f       	mov	r24, r20
    1752:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
}
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    175c:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	29 f0       	breq	.+10     	; 0x176e <animation+0x12>
    1764:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	09 f0       	breq	.+2      	; 0x176e <animation+0x12>
    176c:	78 c0       	rjmp	.+240    	; 0x185e <animation+0x102>
    176e:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    1772:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    1776:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    177a:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    177e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <timer_anim.1999>
    1782:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <timer_anim.1999+0x1>
    1786:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <timer_anim.1999+0x2>
    178a:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <timer_anim.1999+0x3>
    178e:	84 17       	cp	r24, r20
    1790:	95 07       	cpc	r25, r21
    1792:	a6 07       	cpc	r26, r22
    1794:	b7 07       	cpc	r27, r23
    1796:	08 f0       	brcs	.+2      	; 0x179a <animation+0x3e>
    1798:	62 c0       	rjmp	.+196    	; 0x185e <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    179a:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
    179e:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
    17a2:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
    17a6:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
    17aa:	81 55       	subi	r24, 0x51	; 81
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	af 4f       	sbci	r26, 0xFF	; 255
    17b0:	bf 4f       	sbci	r27, 0xFF	; 255
    17b2:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <timer_anim.1999>
    17b6:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <timer_anim.1999+0x1>
    17ba:	a0 93 b6 03 	sts	0x03B6, r26	; 0x8003b6 <timer_anim.1999+0x2>
    17be:	b0 93 b7 03 	sts	0x03B7, r27	; 0x8003b7 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17c2:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <segment1+0x4>
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	61 f4       	brne	.+24     	; 0x17e2 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17ca:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17ce:	8c e0       	ldi	r24, 0x0C	; 12
    17d0:	96 e0       	ldi	r25, 0x06	; 6
    17d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17d6:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17da:	88 e1       	ldi	r24, 0x18	; 24
    17dc:	96 e0       	ldi	r25, 0x06	; 6
    17de:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17e2:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <segment2+0x4>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	61 f4       	brne	.+24     	; 0x1802 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17ea:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    17ee:	8a e0       	ldi	r24, 0x0A	; 10
    17f0:	96 e0       	ldi	r25, 0x06	; 6
    17f2:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17f6:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    17fa:	86 e1       	ldi	r24, 0x16	; 22
    17fc:	96 e0       	ldi	r25, 0x06	; 6
    17fe:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1802:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    1806:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    180a:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    180e:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    1812:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <animation_time>
    1816:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <animation_time+0x1>
    181a:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <animation_time+0x2>
    181e:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <animation_time+0x3>
    1822:	84 17       	cp	r24, r20
    1824:	95 07       	cpc	r25, r21
    1826:	a6 07       	cpc	r26, r22
    1828:	b7 07       	cpc	r27, r23
    182a:	28 f4       	brcc	.+10     	; 0x1836 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
			LED_ACUM_OFF;
    1834:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1836:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <anim_iteration.2000>
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		anim_iteration2--;
    1840:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <anim_iteration2.2001>
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    184a:	9f 3f       	cpi	r25, 0xFF	; 255
    184c:	19 f4       	brne	.+6      	; 0x1854 <animation+0xf8>
    184e:	99 ef       	ldi	r25, 0xF9	; 249
    1850:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1854:	88 3f       	cpi	r24, 0xF8	; 248
    1856:	19 f4       	brne	.+6      	; 0x185e <animation+0x102>
    1858:	8e ef       	ldi	r24, 0xFE	; 254
    185a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
    185e:	08 95       	ret

00001860 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1860:	e1 99       	sbic	0x1c, 1	; 28
    1862:	fe cf       	rjmp	.-4      	; 0x1860 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1864:	9f bb       	out	0x1f, r25	; 31
    1866:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1868:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    186a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    186c:	e1 9a       	sbi	0x1c, 1	; 28
    186e:	08 95       	ret

00001870 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1870:	e1 99       	sbic	0x1c, 1	; 28
    1872:	fe cf       	rjmp	.-4      	; 0x1870 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1874:	9f bb       	out	0x1f, r25	; 31
    1876:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1878:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    187a:	8d b3       	in	r24, 0x1d	; 29
    187c:	08 95       	ret

0000187e <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    187e:	cf 93       	push	r28
    1880:	c8 2f       	mov	r28, r24
    1882:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    1886:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    188a:	82 60       	ori	r24, 0x02	; 2
    188c:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    1890:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    1894:	8c 2f       	mov	r24, r28
    1896:	0e 94 35 0a 	call	0x146a	; 0x146a <display_set_error>
    189a:	0e 94 b8 07 	call	0xf70	; 0xf70 <dcmotor_set_error>
    189e:	0e 94 1d 12 	call	0x243a	; 0x243a <servo_error>
    18a2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <system_error>
    18a6:	c0 93 1c 06 	sts	0x061C, r28	; 0x80061c <led_blink>
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <error_init>:
    18ae:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <error_motor_state>
    18b2:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <error_motor_last_state>
    18b6:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <error_motor_status>
    18ba:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <error_servo_status>
    18be:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <error_servo_state>
    18c2:	89 ee       	ldi	r24, 0xE9	; 233
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	0e 94 0d 18 	call	0x301a	; 0x301a <evTime_off>
    18ca:	89 ed       	ldi	r24, 0xD9	; 217
    18cc:	93 e0       	ldi	r25, 0x03	; 3
    18ce:	0e 94 0d 18 	call	0x301a	; 0x301a <evTime_off>
    18d2:	10 92 1c 06 	sts	0x061C, r1	; 0x80061c <led_blink>
    18d6:	08 95       	ret

000018d8 <error_deinit>:
    18d8:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <error_motor_state>
    18dc:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <error_motor_last_state>
    18e0:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <error_motor_status>
    18e4:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <error_servo_status>
    18e8:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <error_servo_state>
    18ec:	89 ee       	ldi	r24, 0xE9	; 233
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 0d 18 	call	0x301a	; 0x301a <evTime_off>
    18f4:	89 ed       	ldi	r24, 0xD9	; 217
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 0d 18 	call	0x301a	; 0x301a <evTime_off>
    18fc:	10 92 1c 06 	sts	0x061C, r1	; 0x80061c <led_blink>
    1900:	08 95       	ret

00001902 <error_event>:

void error_event(void)
{
    1902:	4f 92       	push	r4
    1904:	5f 92       	push	r5
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	9f 92       	push	r9
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    191a:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    191e:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    1922:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    1926:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    192a:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <error_event_timer.2064>
    192e:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <error_event_timer.2064+0x1>
    1932:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <error_event_timer.2064+0x2>
    1936:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <error_event_timer.2064+0x3>
    193a:	84 17       	cp	r24, r20
    193c:	95 07       	cpc	r25, r21
    193e:	a6 07       	cpc	r26, r22
    1940:	b7 07       	cpc	r27, r23
    1942:	08 f0       	brcs	.+2      	; 0x1946 <error_event+0x44>
    1944:	86 c2       	rjmp	.+1292   	; 0x1e52 <error_event+0x550>
    1946:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    194a:	80 ff       	sbrs	r24, 0
    194c:	82 c2       	rjmp	.+1284   	; 0x1e52 <error_event+0x550>
	{
		error_event_timer = mktime.ms + 250;
    194e:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    1952:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    1956:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    195a:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    195e:	46 50       	subi	r20, 0x06	; 6
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	6f 4f       	sbci	r22, 0xFF	; 255
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	40 93 d5 03 	sts	0x03D5, r20	; 0x8003d5 <error_event_timer.2064>
    196a:	50 93 d6 03 	sts	0x03D6, r21	; 0x8003d6 <error_event_timer.2064+0x1>
    196e:	60 93 d7 03 	sts	0x03D7, r22	; 0x8003d7 <error_event_timer.2064+0x2>
    1972:	70 93 d8 03 	sts	0x03D8, r23	; 0x8003d8 <error_event_timer.2064+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1976:	81 fd       	sbrc	r24, 1
    1978:	6c c2       	rjmp	.+1240   	; 0x1e52 <error_event+0x550>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    197a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    197e:	4b 01       	movw	r8, r22
    1980:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1982:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    1986:	bc 01       	movw	r22, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatunsisf>
    1990:	6b 01       	movw	r12, r22
    1992:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    1994:	25 e9       	ldi	r18, 0x95	; 149
    1996:	35 e6       	ldi	r19, 0x65	; 101
    1998:	40 ed       	ldi	r20, 0xD0	; 208
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 19 1b 	call	0x3632	; 0x3632 <pow>
    19a0:	2b 01       	movw	r4, r22
    19a2:	3c 01       	movw	r6, r24
    19a4:	a7 01       	movw	r20, r14
    19a6:	96 01       	movw	r18, r12
    19a8:	c5 01       	movw	r24, r10
    19aa:	b4 01       	movw	r22, r8
    19ac:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	48 ec       	ldi	r20, 0xC8	; 200
    19b6:	52 e4       	ldi	r21, 0x42	; 66
    19b8:	0e 94 4d 19 	call	0x329a	; 0x329a <__divsf3>
    19bc:	4b 01       	movw	r8, r22
    19be:	5c 01       	movw	r10, r24
    19c0:	23 e3       	ldi	r18, 0x33	; 51
    19c2:	33 e3       	ldi	r19, 0x33	; 51
    19c4:	43 e6       	ldi	r20, 0x63	; 99
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	c7 01       	movw	r24, r14
    19ca:	b6 01       	movw	r22, r12
    19cc:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	48 ec       	ldi	r20, 0xC8	; 200
    19d6:	52 e4       	ldi	r21, 0x42	; 66
    19d8:	0e 94 4d 19 	call	0x329a	; 0x329a <__divsf3>
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	c5 01       	movw	r24, r10
    19e2:	b4 01       	movw	r22, r8
    19e4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__subsf3>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e4       	ldi	r20, 0x40	; 64
    19ee:	50 e4       	ldi	r21, 0x40	; 64
    19f0:	0e 94 4d 19 	call	0x329a	; 0x329a <__divsf3>
    19f4:	4b 01       	movw	r8, r22
    19f6:	5c 01       	movw	r10, r24
    19f8:	28 e5       	ldi	r18, 0x58	; 88
    19fa:	39 e3       	ldi	r19, 0x39	; 57
    19fc:	44 e3       	ldi	r20, 0x34	; 52
    19fe:	5c e3       	ldi	r21, 0x3C	; 60
    1a00:	c3 01       	movw	r24, r6
    1a02:	b2 01       	movw	r22, r4
    1a04:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	c5 01       	movw	r24, r10
    1a0e:	b4 01       	movw	r22, r8
    1a10:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__addsf3>
    1a14:	4b 01       	movw	r8, r22
    1a16:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp = (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/100 + temp;
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a1e:	68 2f       	mov	r22, r24
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	62 53       	subi	r22, 0x32	; 50
    1a24:	71 09       	sbc	r23, r1
    1a26:	07 2e       	mov	r0, r23
    1a28:	00 0c       	add	r0, r0
    1a2a:	88 0b       	sbc	r24, r24
    1a2c:	99 0b       	sbc	r25, r25
    1a2e:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__floatsisf>
    1a32:	a7 01       	movw	r20, r14
    1a34:	96 01       	movw	r18, r12
    1a36:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	48 ec       	ldi	r20, 0xC8	; 200
    1a40:	52 e4       	ldi	r21, 0x42	; 66
    1a42:	0e 94 4d 19 	call	0x329a	; 0x329a <__divsf3>
    1a46:	a5 01       	movw	r20, r10
    1a48:	94 01       	movw	r18, r8
    1a4a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__addsf3>
    1a4e:	60 93 e2 03 	sts	0x03E2, r22	; 0x8003e2 <motor_error_value>
    1a52:	70 93 e3 03 	sts	0x03E3, r23	; 0x8003e3 <motor_error_value+0x1>
    1a56:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <motor_error_value+0x2>
    1a5a:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 0b 11 	call	0x2216	; 0x2216 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1a64:	42 e0       	ldi	r20, 0x02	; 2
    1a66:	5b e2       	ldi	r21, 0x2B	; 43
    1a68:	67 e0       	ldi	r22, 0x07	; 7
    1a6a:	7d e3       	ldi	r23, 0x3D	; 61
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 24 11 	call	0x2248	; 0x2248 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1a72:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <motor_error_value>
    1a76:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <motor_error_value+0x1>
    1a7a:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <motor_error_value+0x2>
    1a7e:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <motor_error_value+0x3>
    1a82:	0e 94 a7 1a 	call	0x354e	; 0x354e <__gesf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	44 f4       	brge	.+16     	; 0x1a9a <error_event+0x198>
    1a8a:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
    1a8e:	89 2b       	or	r24, r25
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <error_event+0x198>
		{
			error_motor_status = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <error_motor_status>
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1a9a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	0d c1       	rjmp	.+538    	; 0x1cc2 <error_event+0x3c0>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1aa8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <error_motor_status>
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <error_event+0x1b0>
    1ab0:	a8 c0       	rjmp	.+336    	; 0x1c02 <error_event+0x300>
			{
				switch(error_motor_state)
    1ab2:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <error_motor_state>
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <error_event+0x1ba>
    1aba:	70 c0       	rjmp	.+224    	; 0x1b9c <error_event+0x29a>
    1abc:	28 f4       	brcc	.+10     	; 0x1ac8 <error_event+0x1c6>
    1abe:	88 23       	and	r24, r24
    1ac0:	51 f0       	breq	.+20     	; 0x1ad6 <error_event+0x1d4>
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	a9 f1       	breq	.+106    	; 0x1b30 <error_event+0x22e>
    1ac6:	fd c0       	rjmp	.+506    	; 0x1cc2 <error_event+0x3c0>
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	09 f4       	brne	.+2      	; 0x1ace <error_event+0x1cc>
    1acc:	7a c0       	rjmp	.+244    	; 0x1bc2 <error_event+0x2c0>
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <error_event+0x1d2>
    1ad2:	7b c0       	rjmp	.+246    	; 0x1bca <error_event+0x2c8>
    1ad4:	f6 c0       	rjmp	.+492    	; 0x1cc2 <error_event+0x3c0>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1adc:	82 e4       	ldi	r24, 0x42	; 66
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1ae8:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1aec:	2e e1       	ldi	r18, 0x1E	; 30
    1aee:	ac 01       	movw	r20, r24
    1af0:	24 9f       	mul	r18, r20
    1af2:	c0 01       	movw	r24, r0
    1af4:	25 9f       	mul	r18, r21
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	48 e8       	ldi	r20, 0x88	; 136
    1afc:	53 e1       	ldi	r21, 0x13	; 19
    1afe:	7a 01       	movw	r14, r20
    1b00:	e8 1a       	sub	r14, r24
    1b02:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b04:	ff 92       	push	r15
    1b06:	ef 92       	push	r14
    1b08:	8d e5       	ldi	r24, 0x5D	; 93
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	9f 93       	push	r25
    1b0e:	8f 93       	push	r24
    1b10:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b14:	a7 01       	movw	r20, r14
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	89 ee       	ldi	r24, 0xE9	; 233
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
					break;
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	c9 c0       	rjmp	.+402    	; 0x1cc2 <error_event+0x3c0>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b30:	89 ee       	ldi	r24, 0xE9	; 233
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1b38:	89 2b       	or	r24, r25
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <error_event+0x23c>
    1b3c:	c2 c0       	rjmp	.+388    	; 0x1cc2 <error_event+0x3c0>
						{
							dcmotor_set_try();
    1b3e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b42:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b46:	2e e1       	ldi	r18, 0x1E	; 30
    1b48:	ac 01       	movw	r20, r24
    1b4a:	24 9f       	mul	r18, r20
    1b4c:	c0 01       	movw	r24, r0
    1b4e:	25 9f       	mul	r18, r21
    1b50:	90 0d       	add	r25, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	48 e8       	ldi	r20, 0x88	; 136
    1b56:	53 e1       	ldi	r21, 0x13	; 19
    1b58:	7a 01       	movw	r14, r20
    1b5a:	e8 1a       	sub	r14, r24
    1b5c:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b5e:	ff 92       	push	r15
    1b60:	ef 92       	push	r14
    1b62:	8c e7       	ldi	r24, 0x7C	; 124
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b6e:	a7 01       	movw	r20, r14
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	89 ee       	ldi	r24, 0xE9	; 233
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    1b82:	80 ea       	ldi	r24, 0xA0	; 160
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	93 c0       	rjmp	.+294    	; 0x1cc2 <error_event+0x3c0>
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1b9c:	89 ee       	ldi	r24, 0xE9	; 233
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <error_event+0x2a8>
    1ba8:	8c c0       	rjmp	.+280    	; 0x1cc2 <error_event+0x3c0>
						{
							error_motor_state = ERR_M_ERROR;
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1bb0:	80 ec       	ldi	r24, 0xC0	; 192
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	80 c0       	rjmp	.+256    	; 0x1cc2 <error_event+0x3c0>
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1bc8:	7c c0       	rjmp	.+248    	; 0x1cc2 <error_event+0x3c0>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1bca:	89 ee       	ldi	r24, 0xE9	; 233
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <error_event+0x2d6>
    1bd6:	75 c0       	rjmp	.+234    	; 0x1cc2 <error_event+0x3c0>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bd8:	40 ed       	ldi	r20, 0xD0	; 208
    1bda:	57 e0       	ldi	r21, 0x07	; 7
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	89 ee       	ldi	r24, 0xE9	; 233
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
							error_motor_state = error_motor_last_state;
    1be8:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <error_motor_last_state>
    1bec:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
							debug_msg("ERROR STATUS: go to last before wait\n\r");
    1bf0:	8c ed       	ldi	r24, 0xDC	; 220
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	60 c0       	rjmp	.+192    	; 0x1cc2 <error_event+0x3c0>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1c02:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <error_motor_state>
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	49 f1       	breq	.+82     	; 0x1c5c <error_event+0x35a>
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <error_event+0x310>
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	41 f0       	breq	.+16     	; 0x1c20 <error_event+0x31e>
    1c10:	58 c0       	rjmp	.+176    	; 0x1cc2 <error_event+0x3c0>
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <error_event+0x316>
    1c16:	41 c0       	rjmp	.+130    	; 0x1c9a <error_event+0x398>
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <error_event+0x31c>
    1c1c:	42 c0       	rjmp	.+132    	; 0x1ca2 <error_event+0x3a0>
    1c1e:	51 c0       	rjmp	.+162    	; 0x1cc2 <error_event+0x3c0>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1c20:	89 ee       	ldi	r24, 0xE9	; 233
    1c22:	93 e0       	ldi	r25, 0x03	; 3
    1c24:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1c28:	89 2b       	or	r24, r25
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <error_event+0x32c>
    1c2c:	4a c0       	rjmp	.+148    	; 0x1cc2 <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c2e:	40 ed       	ldi	r20, 0xD0	; 208
    1c30:	57 e0       	ldi	r21, 0x07	; 7
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	89 ee       	ldi	r24, 0xE9	; 233
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	33 c0       	rjmp	.+102    	; 0x1cc2 <error_event+0x3c0>
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c5c:	89 ee       	ldi	r24, 0xE9	; 233
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1c64:	89 2b       	or	r24, r25
    1c66:	69 f1       	breq	.+90     	; 0x1cc2 <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c68:	40 ed       	ldi	r20, 0xD0	; 208
    1c6a:	57 e0       	ldi	r21, 0x07	; 7
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	89 ee       	ldi	r24, 0xE9	; 233
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
						dcmotor_set_normal_state();
    1c78:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c7c:	84 e0       	ldi	r24, 0x04	; 4
    1c7e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1c88:	83 e0       	ldi	r24, 0x03	; 3
    1c8a:	92 e0       	ldi	r25, 0x02	; 2
    1c8c:	9f 93       	push	r25
    1c8e:	8f 93       	push	r24
    1c90:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <error_event+0x3c0>
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <error_event+0x3c0>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1ca2:	89 ee       	ldi	r24, 0xE9	; 233
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1caa:	89 2b       	or	r24, r25
    1cac:	51 f0       	breq	.+20     	; 0x1cc2 <error_event+0x3c0>
					{
						debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1cae:	8e e1       	ldi	r24, 0x1E	; 30
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	9f 93       	push	r25
    1cb4:	8f 93       	push	r24
    1cb6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						error_motor_state = ERR_M_OK;
    1cba:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <error_motor_state>
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
    1cc8:	81 11       	cpse	r24, r1
    1cca:	c3 c0       	rjmp	.+390    	; 0x1e52 <error_event+0x550>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <servo_error_value+0x1>
    1cd8:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 0b 11 	call	0x2216	; 0x2216 <measure_get_filtered_value>
    1ce2:	7c 01       	movw	r14, r24
			debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
    1ce4:	ff 92       	push	r15
    1ce6:	8f 93       	push	r24
    1ce8:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <servo_error_value+0x1>
    1cec:	8f 93       	push	r24
    1cee:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <servo_error_value>
    1cf2:	8f 93       	push	r24
    1cf4:	87 e3       	ldi	r24, 0x37	; 55
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	9f 93       	push	r25
    1cfa:	8f 93       	push	r24
    1cfc:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
			if (servo_filt_val > servo_error_value) //servo_vibro_value*5
    1d00:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <servo_error_value>
    1d04:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <servo_error_value+0x1>
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	8e 15       	cp	r24, r14
    1d16:	9f 05       	cpc	r25, r15
    1d18:	d8 f4       	brcc	.+54     	; 0x1d50 <error_event+0x44e>
			{
				debug_msg("servo_error_value: %d\n", servo_error_value);
    1d1a:	9f 93       	push	r25
    1d1c:	8f 93       	push	r24
    1d1e:	82 e6       	ldi	r24, 0x62	; 98
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	9f 93       	push	r25
    1d24:	8f 93       	push	r24
    1d26:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				error_servo_status = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <error_servo_state>
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	51 f1       	breq	.+84     	; 0x1d94 <error_event+0x492>
    1d40:	a8 f0       	brcs	.+42     	; 0x1d6c <error_event+0x46a>
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <error_event+0x446>
    1d46:	4b c0       	rjmp	.+150    	; 0x1dde <error_event+0x4dc>
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <error_event+0x44c>
    1d4c:	51 c0       	rjmp	.+162    	; 0x1df0 <error_event+0x4ee>
    1d4e:	81 c0       	rjmp	.+258    	; 0x1e52 <error_event+0x550>
				debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1d50:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1d54:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <error_servo_state>
    1d58:	82 30       	cpi	r24, 0x02	; 2
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <error_event+0x45c>
    1d5c:	66 c0       	rjmp	.+204    	; 0x1e2a <error_event+0x528>
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <error_event+0x462>
    1d62:	74 c0       	rjmp	.+232    	; 0x1e4c <error_event+0x54a>
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <error_event+0x468>
    1d68:	74 c0       	rjmp	.+232    	; 0x1e52 <error_event+0x550>
    1d6a:	46 c0       	rjmp	.+140    	; 0x1df8 <error_event+0x4f6>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1d72:	89 e7       	ldi	r24, 0x79	; 121
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	9f 93       	push	r25
    1d78:	8f 93       	push	r24
    1d7a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1d7e:	44 ef       	ldi	r20, 0xF4	; 244
    1d80:	51 e0       	ldi	r21, 0x01	; 1
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	89 ed       	ldi	r24, 0xD9	; 217
    1d88:	93 e0       	ldi	r25, 0x03	; 3
    1d8a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
					break;
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	5f c0       	rjmp	.+190    	; 0x1e52 <error_event+0x550>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d94:	89 ed       	ldi	r24, 0xD9	; 217
    1d96:	93 e0       	ldi	r25, 0x03	; 3
    1d98:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <error_event+0x4a0>
    1da0:	58 c0       	rjmp	.+176    	; 0x1e52 <error_event+0x550>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1da2:	0e 94 8a 12 	call	0x2514	; 0x2514 <servo_get_try_cnt>
    1da6:	04 97       	sbiw	r24, 0x04	; 4
    1da8:	24 f0       	brlt	.+8      	; 0x1db2 <error_event+0x4b0>
							{
								error_servo_state = ERR_S_ERROR;
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <error_servo_state>
								break;
    1db0:	50 c0       	rjmp	.+160    	; 0x1e52 <error_event+0x550>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1db2:	4c ed       	ldi	r20, 0xDC	; 220
    1db4:	55 e0       	ldi	r21, 0x05	; 5
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	89 ed       	ldi	r24, 0xD9	; 217
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
							error_servo_state = ERR_S_TRY;
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <error_servo_state>
							servo_enable_try();
    1dc8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1dcc:	84 e9       	ldi	r24, 0x94	; 148
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	3a c0       	rjmp	.+116    	; 0x1e52 <error_event+0x550>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1dde:	89 ed       	ldi	r24, 0xD9	; 217
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1de6:	89 2b       	or	r24, r25
    1de8:	a1 f1       	breq	.+104    	; 0x1e52 <error_event+0x550>
						{
							error_servo_state = ERR_S_OK;
    1dea:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <error_servo_state>
    1dee:	31 c0       	rjmp	.+98     	; 0x1e52 <error_event+0x550>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1df6:	2d c0       	rjmp	.+90     	; 0x1e52 <error_event+0x550>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1df8:	89 ed       	ldi	r24, 0xD9	; 217
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1e00:	89 2b       	or	r24, r25
    1e02:	39 f1       	breq	.+78     	; 0x1e52 <error_event+0x550>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1e04:	40 ed       	ldi	r20, 0xD0	; 208
    1e06:	57 e0       	ldi	r21, 0x07	; 7
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	89 ed       	ldi	r24, 0xD9	; 217
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
						error_servo_state = ERR_M_OK;
    1e14:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e18:	8e ea       	ldi	r24, 0xAE	; 174
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <error_event+0x550>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1e2a:	89 ed       	ldi	r24, 0xD9	; 217
    1e2c:	93 e0       	ldi	r25, 0x03	; 3
    1e2e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    1e32:	89 2b       	or	r24, r25
    1e34:	71 f0       	breq	.+28     	; 0x1e52 <error_event+0x550>
					{
						error_servo_state = ERR_S_OK;
    1e36:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e3a:	8e ea       	ldi	r24, 0xAE	; 174
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <error_event+0x550>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	bf 90       	pop	r11
    1e5c:	af 90       	pop	r10
    1e5e:	9f 90       	pop	r9
    1e60:	8f 90       	pop	r8
    1e62:	7f 90       	pop	r7
    1e64:	6f 90       	pop	r6
    1e66:	5f 90       	pop	r5
    1e68:	4f 90       	pop	r4
    1e6a:	08 95       	ret

00001e6c <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1e6c:	4e e5       	ldi	r20, 0x5E	; 94
    1e6e:	51 e0       	ldi	r21, 0x01	; 1
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	80 ed       	ldi	r24, 0xD0	; 208
    1e76:	93 e0       	ldi	r25, 0x03	; 3
    1e78:	0e 94 17 18 	call	0x302e	; 0x302e <evTime_process_period>
    1e7c:	89 2b       	or	r24, r25
    1e7e:	09 f1       	breq	.+66     	; 0x1ec2 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e80:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <led_blink>
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	71 f4       	brne	.+28     	; 0x1ea4 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e88:	92 b3       	in	r25, 0x12	; 18
    1e8a:	80 e1       	ldi	r24, 0x10	; 16
    1e8c:	89 27       	eor	r24, r25
    1e8e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e90:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    1e94:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    1e98:	90 62       	ori	r25, 0x20	; 32
    1e9a:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    1e9e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    1ea2:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1ea4:	82 30       	cpi	r24, 0x02	; 2
    1ea6:	69 f4       	brne	.+26     	; 0x1ec2 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1ea8:	92 b3       	in	r25, 0x12	; 18
    1eaa:	80 e4       	ldi	r24, 0x40	; 64
    1eac:	89 27       	eor	r24, r25
    1eae:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1eb0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    1eb4:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    1eb8:	90 62       	ori	r25, 0x20	; 32
    1eba:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    1ebe:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    1ec2:	08 95       	ret

00001ec4 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	20 81       	ld	r18, Z
    1ec8:	31 81       	ldd	r19, Z+1	; 0x01
    1eca:	62 30       	cpi	r22, 0x02	; 2
    1ecc:	58 f0       	brcs	.+22     	; 0x1ee4 <filtered_value+0x20>
    1ece:	32 96       	adiw	r30, 0x02	; 2
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	41 91       	ld	r20, Z+
    1ed4:	51 91       	ld	r21, Z+
    1ed6:	24 0f       	add	r18, r20
    1ed8:	35 1f       	adc	r19, r21
    1eda:	36 95       	lsr	r19
    1edc:	27 95       	ror	r18
    1ede:	9f 5f       	subi	r25, 0xFF	; 255
    1ee0:	69 13       	cpse	r22, r25
    1ee2:	f7 cf       	rjmp	.-18     	; 0x1ed2 <filtered_value+0xe>
    1ee4:	c9 01       	movw	r24, r18
    1ee6:	08 95       	ret

00001ee8 <init_measure>:
    1ee8:	e4 e3       	ldi	r30, 0x34	; 52
    1eea:	f4 e0       	ldi	r31, 0x04	; 4
    1eec:	2c e5       	ldi	r18, 0x5C	; 92
    1eee:	34 e0       	ldi	r19, 0x04	; 4
    1ef0:	81 ef       	ldi	r24, 0xF1	; 241
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	81 93       	st	Z+, r24
    1ef6:	91 93       	st	Z+, r25
    1ef8:	2e 17       	cp	r18, r30
    1efa:	3f 07       	cpc	r19, r31
    1efc:	d9 f7       	brne	.-10     	; 0x1ef4 <init_measure+0xc>
    1efe:	e3 e1       	ldi	r30, 0x13	; 19
    1f00:	f4 e0       	ldi	r31, 0x04	; 4
    1f02:	81 e3       	ldi	r24, 0x31	; 49
    1f04:	94 e0       	ldi	r25, 0x04	; 4
    1f06:	11 92       	st	Z+, r1
    1f08:	11 92       	st	Z+, r1
    1f0a:	8e 17       	cp	r24, r30
    1f0c:	9f 07       	cpc	r25, r31
    1f0e:	d9 f7       	brne	.-10     	; 0x1f06 <init_measure+0x1e>
    1f10:	eb ef       	ldi	r30, 0xFB	; 251
    1f12:	f3 e0       	ldi	r31, 0x03	; 3
    1f14:	8f e0       	ldi	r24, 0x0F	; 15
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	11 92       	st	Z+, r1
    1f1a:	11 92       	st	Z+, r1
    1f1c:	8e 17       	cp	r24, r30
    1f1e:	9f 07       	cpc	r25, r31
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <init_measure+0x30>
    1f22:	08 95       	ret

00001f24 <measure_process>:
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    1f38:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    1f3c:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    1f40:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    1f44:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <measure_timer>
    1f48:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <measure_timer+0x1>
    1f4c:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <measure_timer+0x2>
    1f50:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <measure_timer+0x3>
    1f54:	84 17       	cp	r24, r20
    1f56:	95 07       	cpc	r25, r21
    1f58:	a6 07       	cpc	r26, r22
    1f5a:	b7 07       	cpc	r27, r23
    1f5c:	08 f0       	brcs	.+2      	; 0x1f60 <measure_process+0x3c>
    1f5e:	16 c1       	rjmp	.+556    	; 0x218c <measure_process+0x268>
    1f60:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
    1f64:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
    1f68:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
    1f6c:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
    1f70:	44 96       	adiw	r24, 0x14	; 20
    1f72:	a1 1d       	adc	r26, r1
    1f74:	b1 1d       	adc	r27, r1
    1f76:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <measure_timer>
    1f7a:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <measure_timer+0x1>
    1f7e:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <measure_timer+0x2>
    1f82:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <measure_timer+0x3>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <motor_filter_value>
    1f92:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <motor_filter_value+0x1>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatunsisf>
    1f9e:	21 e7       	ldi	r18, 0x71	; 113
    1fa0:	3d e3       	ldi	r19, 0x3D	; 61
    1fa2:	4a e8       	ldi	r20, 0x8A	; 138
    1fa4:	5e e3       	ldi	r21, 0x3E	; 62
    1fa6:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    1faa:	6b 01       	movw	r12, r22
    1fac:	7c 01       	movw	r14, r24
    1fae:	be 01       	movw	r22, r28
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatunsisf>
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	b6 01       	movw	r22, r12
    1fc0:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__addsf3>
    1fc4:	0e 94 c6 19 	call	0x338c	; 0x338c <__fixunssfsi>
    1fc8:	70 93 5f 04 	sts	0x045F, r23	; 0x80045f <accum_adc+0x1>
    1fcc:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <accum_adc>
    1fd0:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <iteration_adc_accum_table>
    1fd4:	e2 2f       	mov	r30, r18
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	ec 5c       	subi	r30, 0xCC	; 204
    1fde:	fb 4f       	sbci	r31, 0xFB	; 251
    1fe0:	71 83       	std	Z+1, r23	; 0x01
    1fe2:	60 83       	st	Z, r22
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	82 0f       	add	r24, r18
    1fe8:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <iteration_adc_accum_table>
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1ff2:	80 32       	cpi	r24, 0x20	; 32
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	30 f0       	brcs	.+12     	; 0x2004 <measure_process+0xe0>
    1ff8:	4f 97       	sbiw	r24, 0x1f	; 31
    1ffa:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <motor_adc+0x1>
    1ffe:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <motor_adc>
    2002:	04 c0       	rjmp	.+8      	; 0x200c <measure_process+0xe8>
    2004:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <motor_adc+0x1>
    2008:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <motor_adc>
    200c:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <iteration_adc_motor_table>
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	ed 5e       	subi	r30, 0xED	; 237
    2018:	fb 4f       	sbci	r31, 0xFB	; 251
    201a:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <motor_adc>
    201e:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <motor_adc+0x1>
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    202c:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <s_o_t_adc+0x1>
    2030:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <s_o_t_adc>
    2034:	c0 91 f6 03 	lds	r28, 0x03F6	; 0x8003f6 <calibration_value>
    2038:	d0 91 f7 03 	lds	r29, 0x03F7	; 0x8003f7 <calibration_value+0x1>
    203c:	20 97       	sbiw	r28, 0x00	; 0
    203e:	79 f0       	breq	.+30     	; 0x205e <measure_process+0x13a>
    2040:	c8 17       	cp	r28, r24
    2042:	d9 07       	cpc	r29, r25
    2044:	28 f4       	brcc	.+10     	; 0x2050 <measure_process+0x12c>
    2046:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <s_o_t_adc+0x1>
    204a:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <s_o_t_adc>
    204e:	07 c0       	rjmp	.+14     	; 0x205e <measure_process+0x13a>
    2050:	9e 01       	movw	r18, r28
    2052:	28 1b       	sub	r18, r24
    2054:	39 0b       	sbc	r19, r25
    2056:	30 93 f9 03 	sts	0x03F9, r19	; 0x8003f9 <s_o_t_adc+0x1>
    205a:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <s_o_t_adc>
    205e:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <s_o_t_iteration_adc_table>
    2062:	10 91 f8 03 	lds	r17, 0x03F8	; 0x8003f8 <s_o_t_adc>
    2066:	00 91 f9 03 	lds	r16, 0x03F9	; 0x8003f9 <s_o_t_adc+0x1>
    206a:	e8 2f       	mov	r30, r24
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e5 50       	subi	r30, 0x05	; 5
    2074:	fc 4f       	sbci	r31, 0xFC	; 252
    2076:	10 83       	st	Z, r17
    2078:	01 83       	std	Z+1, r16	; 0x01
    207a:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <iteration_adc_motor_table>
    207e:	9f 5f       	subi	r25, 0xFF	; 255
    2080:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <iteration_adc_motor_table>
    2084:	8f 5f       	subi	r24, 0xFF	; 255
    2086:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <s_o_t_iteration_adc_table>
    208a:	64 e1       	ldi	r22, 0x14	; 20
    208c:	84 e3       	ldi	r24, 0x34	; 52
    208e:	94 e0       	ldi	r25, 0x04	; 4
    2090:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <filtered_value>
    2094:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <filtered_accum_adc_val+0x1>
    2098:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <filtered_accum_adc_val>
    209c:	6f e0       	ldi	r22, 0x0F	; 15
    209e:	83 e1       	ldi	r24, 0x13	; 19
    20a0:	94 e0       	ldi	r25, 0x04	; 4
    20a2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <filtered_value>
    20a6:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <motor_filter_value+0x1>
    20aa:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <motor_filter_value>
    20ae:	6a e0       	ldi	r22, 0x0A	; 10
    20b0:	8b ef       	ldi	r24, 0xFB	; 251
    20b2:	93 e0       	ldi	r25, 0x03	; 3
    20b4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <filtered_value>
    20b8:	90 93 10 04 	sts	0x0410, r25	; 0x800410 <s_o_t_filter_value+0x1>
    20bc:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_o_t_filter_value>
    20c0:	c0 90 ee 03 	lds	r12, 0x03EE	; 0x8003ee <debug_msg_counter>
    20c4:	d0 90 ef 03 	lds	r13, 0x03EF	; 0x8003ef <debug_msg_counter+0x1>
    20c8:	e0 90 f0 03 	lds	r14, 0x03F0	; 0x8003f0 <debug_msg_counter+0x2>
    20cc:	f0 90 f1 03 	lds	r15, 0x03F1	; 0x8003f1 <debug_msg_counter+0x3>
    20d0:	c7 01       	movw	r24, r14
    20d2:	b6 01       	movw	r22, r12
    20d4:	20 ea       	ldi	r18, 0xA0	; 160
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	0e 94 2f 20 	call	0x405e	; 0x405e <__udivmodsi4>
    20e0:	67 2b       	or	r22, r23
    20e2:	68 2b       	or	r22, r24
    20e4:	69 2b       	or	r22, r25
    20e6:	71 f0       	breq	.+28     	; 0x2104 <measure_process+0x1e0>
    20e8:	c7 01       	movw	r24, r14
    20ea:	b6 01       	movw	r22, r12
    20ec:	2a e0       	ldi	r18, 0x0A	; 10
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	0e 94 2f 20 	call	0x405e	; 0x405e <__udivmodsi4>
    20f8:	67 2b       	or	r22, r23
    20fa:	68 2b       	or	r22, r24
    20fc:	69 2b       	or	r22, r25
    20fe:	09 f5       	brne	.+66     	; 0x2142 <measure_process+0x21e>
    2100:	20 97       	sbiw	r28, 0x00	; 0
    2102:	f9 f4       	brne	.+62     	; 0x2142 <measure_process+0x21e>
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <motor_adc+0x1>
    210c:	8f 93       	push	r24
    210e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <motor_adc>
    2112:	8f 93       	push	r24
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <accum_adc+0x1>
    211c:	8f 93       	push	r24
    211e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <accum_adc>
    2122:	8f 93       	push	r24
    2124:	87 ec       	ldi	r24, 0xC7	; 199
    2126:	92 e0       	ldi	r25, 0x02	; 2
    2128:	9f 93       	push	r25
    212a:	8f 93       	push	r24
    212c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2130:	2d b7       	in	r18, 0x3d	; 61
    2132:	3e b7       	in	r19, 0x3e	; 62
    2134:	26 5f       	subi	r18, 0xF6	; 246
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	3e bf       	out	0x3e, r19	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	2d bf       	out	0x3d, r18	; 61
    2142:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <debug_msg_counter>
    2146:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <debug_msg_counter+0x1>
    214a:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <debug_msg_counter+0x2>
    214e:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <debug_msg_counter+0x3>
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	a1 1d       	adc	r26, r1
    2156:	b1 1d       	adc	r27, r1
    2158:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <debug_msg_counter>
    215c:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <debug_msg_counter+0x1>
    2160:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <debug_msg_counter+0x2>
    2164:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <debug_msg_counter+0x3>
    2168:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <iteration_adc_accum_table>
    216c:	84 31       	cpi	r24, 0x14	; 20
    216e:	11 f4       	brne	.+4      	; 0x2174 <measure_process+0x250>
    2170:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <iteration_adc_accum_table>
    2174:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <s_o_t_iteration_adc_table>
    2178:	8a 30       	cpi	r24, 0x0A	; 10
    217a:	11 f4       	brne	.+4      	; 0x2180 <measure_process+0x25c>
    217c:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <s_o_t_iteration_adc_table>
    2180:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <iteration_adc_motor_table>
    2184:	8f 30       	cpi	r24, 0x0F	; 15
    2186:	11 f4       	brne	.+4      	; 0x218c <measure_process+0x268>
    2188:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <iteration_adc_motor_table>
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <measure_get_servo_calibration>:
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	c0 90 2d 06 	lds	r12, 0x062D	; 0x80062d <mktime+0x2>
    21ae:	d0 90 2e 06 	lds	r13, 0x062E	; 0x80062e <mktime+0x3>
    21b2:	e0 90 2f 06 	lds	r14, 0x062F	; 0x80062f <mktime+0x4>
    21b6:	f0 90 30 06 	lds	r15, 0x0630	; 0x800630 <mktime+0x5>
    21ba:	8c ed       	ldi	r24, 0xDC	; 220
    21bc:	c8 0e       	add	r12, r24
    21be:	85 e0       	ldi	r24, 0x05	; 5
    21c0:	d8 1e       	adc	r13, r24
    21c2:	e1 1c       	adc	r14, r1
    21c4:	f1 1c       	adc	r15, r1
    21c6:	cb e2       	ldi	r28, 0x2B	; 43
    21c8:	d6 e0       	ldi	r29, 0x06	; 6
    21ca:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <measure_process>
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	ac 81       	ldd	r26, Y+4	; 0x04
    21d4:	bd 81       	ldd	r27, Y+5	; 0x05
    21d6:	c8 16       	cp	r12, r24
    21d8:	d9 06       	cpc	r13, r25
    21da:	ea 06       	cpc	r14, r26
    21dc:	fb 06       	cpc	r15, r27
    21de:	a8 f7       	brcc	.-22     	; 0x21ca <measure_get_servo_calibration+0x2c>
    21e0:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <s_o_t_filter_value>
    21e4:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <s_o_t_filter_value+0x1>
    21e8:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <calibration_value>
    21ec:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <calibration_value+0x1>
    21f0:	9f 93       	push	r25
    21f2:	8f 93       	push	r24
    21f4:	87 e0       	ldi	r24, 0x07	; 7
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	df 90       	pop	r13
    2212:	cf 90       	pop	r12
    2214:	08 95       	ret

00002216 <measure_get_filtered_value>:
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	18 f4       	brcc	.+6      	; 0x2220 <measure_get_filtered_value+0xa>
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	40 f0       	brcs	.+16     	; 0x222e <measure_get_filtered_value+0x18>
    221e:	0c c0       	rjmp	.+24     	; 0x2238 <measure_get_filtered_value+0x22>
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	79 f4       	brne	.+30     	; 0x2242 <measure_get_filtered_value+0x2c>
    2224:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <filtered_accum_adc_val>
    2228:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <filtered_accum_adc_val+0x1>
    222c:	08 95       	ret
    222e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <motor_filter_value>
    2232:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <motor_filter_value+0x1>
    2236:	08 95       	ret
    2238:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <s_o_t_filter_value>
    223c:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <s_o_t_filter_value+0x1>
    2240:	08 95       	ret
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	08 95       	ret

00002248 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	6a 01       	movw	r12, r20
    2252:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    2254:	83 30       	cpi	r24, 0x03	; 3
    2256:	18 f4       	brcc	.+6      	; 0x225e <measure_get_current+0x16>
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	50 f0       	brcs	.+20     	; 0x2270 <measure_get_current+0x28>
    225c:	10 c0       	rjmp	.+32     	; 0x227e <measure_get_current+0x36>
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	a9 f4       	brne	.+42     	; 0x228c <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    2262:	60 91 5c 04 	lds	r22, 0x045C	; 0x80045c <filtered_accum_adc_val>
    2266:	70 91 5d 04 	lds	r23, 0x045D	; 0x80045d <filtered_accum_adc_val+0x1>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    226e:	11 c0       	rjmp	.+34     	; 0x2292 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    2270:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <motor_filter_value>
    2274:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <motor_filter_value+0x1>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
		break;
    227c:	0a c0       	rjmp	.+20     	; 0x2292 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    227e:	60 91 0f 04 	lds	r22, 0x040F	; 0x80040f <s_o_t_filter_value>
    2282:	70 91 10 04 	lds	r23, 0x0410	; 0x800410 <s_o_t_filter_value+0x1>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
		break;
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    2292:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatunsisf>
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5a e3       	ldi	r21, 0x3A	; 58
    229e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 ea       	ldi	r20, 0xA0	; 160
    22a8:	50 e4       	ldi	r21, 0x40	; 64
    22aa:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    22ae:	a7 01       	movw	r20, r14
    22b0:	96 01       	movw	r18, r12
    22b2:	0e 94 4d 19 	call	0x329a	; 0x329a <__divsf3>
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	df 90       	pop	r13
    22bc:	cf 90       	pop	r12
    22be:	08 95       	ret

000022c0 <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	59 f0       	breq	.+22     	; 0x22e6 <mem_save_data+0x26>
    22d0:	28 f4       	brcc	.+10     	; 0x22dc <mem_save_data+0x1c>
    22d2:	88 23       	and	r24, r24
    22d4:	91 f0       	breq	.+36     	; 0x22fa <mem_save_data+0x3a>
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	51 f1       	breq	.+84     	; 0x232e <mem_save_data+0x6e>
    22da:	34 c0       	rjmp	.+104    	; 0x2344 <mem_save_data+0x84>
    22dc:	83 30       	cpi	r24, 0x03	; 3
    22de:	51 f1       	breq	.+84     	; 0x2334 <mem_save_data+0x74>
    22e0:	84 30       	cpi	r24, 0x04	; 4
    22e2:	21 f0       	breq	.+8      	; 0x22ec <mem_save_data+0x2c>
    22e4:	2f c0       	rjmp	.+94     	; 0x2344 <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	26 c0       	rjmp	.+76     	; 0x2338 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    22ec:	0e 94 5e 06 	call	0xcbc	; 0xcbc <dark_menu_parameters_len>
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    22f4:	88 e0       	ldi	r24, 0x08	; 8
    22f6:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    22f8:	04 c0       	rjmp	.+8      	; 0x2302 <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    22fa:	22 e0       	ldi	r18, 0x02	; 2
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2302:	c8 2f       	mov	r28, r24
    2304:	7c 01       	movw	r14, r24
    2306:	e2 0e       	add	r14, r18
    2308:	f3 1e       	adc	r15, r19
    230a:	99 27       	eor	r25, r25
    230c:	8e 15       	cp	r24, r14
    230e:	9f 05       	cpc	r25, r15
    2310:	cc f4       	brge	.+50     	; 0x2344 <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2312:	f8 01       	movw	r30, r16
    2314:	61 91       	ld	r22, Z+
    2316:	8f 01       	movw	r16, r30
    2318:	8c 2f       	mov	r24, r28
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 30 0c 	call	0x1860	; 0x1860 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2320:	cf 5f       	subi	r28, 0xFF	; 255
    2322:	8c 2f       	mov	r24, r28
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	8e 15       	cp	r24, r14
    2328:	9f 05       	cpc	r25, r15
    232a:	9c f3       	brlt	.-26     	; 0x2312 <mem_save_data+0x52>
    232c:	0b c0       	rjmp	.+22     	; 0x2344 <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2338:	c8 2f       	mov	r28, r24
    233a:	7c 01       	movw	r14, r24
    233c:	f2 e0       	ldi	r31, 0x02	; 2
    233e:	ef 0e       	add	r14, r31
    2340:	f1 1c       	adc	r15, r1
    2342:	e7 cf       	rjmp	.-50     	; 0x2312 <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	08 95       	ret

00002350 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	59 f0       	breq	.+22     	; 0x2376 <mem_read_data+0x26>
    2360:	28 f4       	brcc	.+10     	; 0x236c <mem_read_data+0x1c>
    2362:	88 23       	and	r24, r24
    2364:	91 f0       	breq	.+36     	; 0x238a <mem_read_data+0x3a>
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	51 f1       	breq	.+84     	; 0x23be <mem_read_data+0x6e>
    236a:	34 c0       	rjmp	.+104    	; 0x23d4 <mem_read_data+0x84>
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	51 f1       	breq	.+84     	; 0x23c4 <mem_read_data+0x74>
    2370:	84 30       	cpi	r24, 0x04	; 4
    2372:	21 f0       	breq	.+8      	; 0x237c <mem_read_data+0x2c>
    2374:	2f c0       	rjmp	.+94     	; 0x23d4 <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2376:	84 e0       	ldi	r24, 0x04	; 4
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	26 c0       	rjmp	.+76     	; 0x23c8 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    237c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <dark_menu_parameters_len>
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2384:	88 e0       	ldi	r24, 0x08	; 8
    2386:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    2388:	04 c0       	rjmp	.+8      	; 0x2392 <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    238a:	22 e0       	ldi	r18, 0x02	; 2
    238c:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2392:	c8 2f       	mov	r28, r24
    2394:	7c 01       	movw	r14, r24
    2396:	e2 0e       	add	r14, r18
    2398:	f3 1e       	adc	r15, r19
    239a:	99 27       	eor	r25, r25
    239c:	8e 15       	cp	r24, r14
    239e:	9f 05       	cpc	r25, r15
    23a0:	cc f4       	brge	.+50     	; 0x23d4 <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    23a2:	8c 2f       	mov	r24, r28
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 38 0c 	call	0x1870	; 0x1870 <EEPROM_read>
    23aa:	f8 01       	movw	r30, r16
    23ac:	81 93       	st	Z+, r24
    23ae:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23b0:	cf 5f       	subi	r28, 0xFF	; 255
    23b2:	8c 2f       	mov	r24, r28
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	8e 15       	cp	r24, r14
    23b8:	9f 05       	cpc	r25, r15
    23ba:	9c f3       	brlt	.-26     	; 0x23a2 <mem_read_data+0x52>
    23bc:	0b c0       	rjmp	.+22     	; 0x23d4 <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    23c4:	86 e0       	ldi	r24, 0x06	; 6
    23c6:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23c8:	c8 2f       	mov	r28, r24
    23ca:	7c 01       	movw	r14, r24
    23cc:	f2 e0       	ldi	r31, 0x02	; 2
    23ce:	ef 0e       	add	r14, r31
    23d0:	f1 1c       	adc	r15, r1
    23d2:	e7 cf       	rjmp	.-50     	; 0x23a2 <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	08 95       	ret

000023e0 <servo_set_pwm_val>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    23e0:	81 11       	cpse	r24, r1
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <servo_set_pwm_val+0xe>
    23e4:	8c e6       	ldi	r24, 0x6C	; 108
    23e6:	97 e0       	ldi	r25, 0x07	; 7
    23e8:	9b bd       	out	0x2b, r25	; 43
    23ea:	8a bd       	out	0x2a, r24	; 42
    23ec:	08 95       	ret
    23ee:	82 33       	cpi	r24, 0x32	; 50
    23f0:	98 f4       	brcc	.+38     	; 0x2418 <servo_set_pwm_val+0x38>
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0a 97       	sbiw	r24, 0x0a	; 10
    23f6:	22 27       	eor	r18, r18
    23f8:	33 27       	eor	r19, r19
    23fa:	28 1b       	sub	r18, r24
    23fc:	39 0b       	sbc	r19, r25
    23fe:	22 0f       	add	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	22 0f       	add	r18, r18
    2404:	33 1f       	adc	r19, r19
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	82 0f       	add	r24, r18
    240c:	93 1f       	adc	r25, r19
    240e:	88 5f       	subi	r24, 0xF8	; 248
    2410:	98 4f       	sbci	r25, 0xF8	; 248
    2412:	9b bd       	out	0x2b, r25	; 43
    2414:	8a bd       	out	0x2a, r24	; 42
    2416:	08 95       	ret
    2418:	84 36       	cpi	r24, 0x64	; 100
    241a:	70 f4       	brcc	.+28     	; 0x2438 <servo_set_pwm_val+0x58>
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	22 53       	subi	r18, 0x32	; 50
    2422:	31 09       	sbc	r19, r1
    2424:	4b ef       	ldi	r20, 0xFB	; 251
    2426:	42 03       	mulsu	r20, r18
    2428:	c0 01       	movw	r24, r0
    242a:	43 9f       	mul	r20, r19
    242c:	90 0d       	add	r25, r0
    242e:	11 24       	eor	r1, r1
    2430:	86 55       	subi	r24, 0x56	; 86
    2432:	9a 4f       	sbci	r25, 0xFA	; 250
    2434:	9b bd       	out	0x2b, r25	; 43
    2436:	8a bd       	out	0x2a, r24	; 42
    2438:	08 95       	ret

0000243a <servo_error>:
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
    2440:	96 98       	cbi	0x12, 6	; 18
    2442:	85 e0       	ldi	r24, 0x05	; 5
    2444:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <servoD>
    2448:	08 95       	ret

0000244a <servo_init>:
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	2f e1       	ldi	r18, 0x1F	; 31
    2450:	3e e4       	ldi	r19, 0x4E	; 78
    2452:	37 bd       	out	0x27, r19	; 39
    2454:	26 bd       	out	0x26, r18	; 38
    2456:	81 b3       	in	r24, 0x11	; 17
    2458:	80 63       	ori	r24, 0x30	; 48
    245a:	81 bb       	out	0x11, r24	; 17
    245c:	19 bc       	out	0x29, r1	; 41
    245e:	18 bc       	out	0x28, r1	; 40
    2460:	1b bc       	out	0x2b, r1	; 43
    2462:	1a bc       	out	0x2a, r1	; 42
    2464:	8f b5       	in	r24, 0x2f	; 47
    2466:	82 60       	ori	r24, 0x02	; 2
    2468:	8f bd       	out	0x2f, r24	; 47
    246a:	8e b5       	in	r24, 0x2e	; 46
    246c:	88 61       	ori	r24, 0x18	; 24
    246e:	8e bd       	out	0x2e, r24	; 46
    2470:	8f b5       	in	r24, 0x2f	; 47
    2472:	80 68       	ori	r24, 0x80	; 128
    2474:	8f bd       	out	0x2f, r24	; 47
    2476:	8e b5       	in	r24, 0x2e	; 46
    2478:	82 60       	ori	r24, 0x02	; 2
    247a:	8e bd       	out	0x2e, r24	; 46
    247c:	3b bd       	out	0x2b, r19	; 43
    247e:	2a bd       	out	0x2a, r18	; 42
    2480:	96 98       	cbi	0x12, 6	; 18
    2482:	cd e1       	ldi	r28, 0x1D	; 29
    2484:	d6 e0       	ldi	r29, 0x06	; 6
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	88 83       	st	Y, r24
    248a:	1b 82       	std	Y+3, r1	; 0x03
    248c:	81 e2       	ldi	r24, 0x21	; 33
    248e:	96 e0       	ldi	r25, 0x06	; 6
    2490:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <evTime_init>
    2494:	19 86       	std	Y+9, r1	; 0x09
    2496:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <try_count>
    249a:	8d e2       	ldi	r24, 0x2D	; 45
    249c:	93 e0       	ldi	r25, 0x03	; 3
    249e:	9f 93       	push	r25
    24a0:	8f 93       	push	r24
    24a2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret

000024b0 <servo_is_open>:
    24b0:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <servoD>
    24b4:	92 50       	subi	r25, 0x02	; 2
    24b6:	21 e0       	ldi	r18, 0x01	; 1
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	92 30       	cpi	r25, 0x02	; 2
    24bc:	10 f0       	brcs	.+4      	; 0x24c2 <servo_is_open+0x12>
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	c9 01       	movw	r24, r18
    24c4:	08 95       	ret

000024c6 <servo_delayed_open>:
    24c6:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <servoD>
    24ca:	91 30       	cpi	r25, 0x01	; 1
    24cc:	a1 f4       	brne	.+40     	; 0x24f6 <servo_delayed_open+0x30>
    24ce:	ed e1       	ldi	r30, 0x1D	; 29
    24d0:	f6 e0       	ldi	r31, 0x06	; 6
    24d2:	93 e0       	ldi	r25, 0x03	; 3
    24d4:	90 83       	st	Z, r25
    24d6:	83 83       	std	Z+3, r24	; 0x03
    24d8:	1f 92       	push	r1
    24da:	8f 93       	push	r24
    24dc:	8a e3       	ldi	r24, 0x3A	; 58
    24de:	93 e0       	ldi	r25, 0x03	; 3
    24e0:	9f 93       	push	r25
    24e2:	8f 93       	push	r24
    24e4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	08 95       	ret
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	08 95       	ret

000024fc <servo_enable_try>:
    24fc:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <servoD>
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	98 0f       	add	r25, r24
    2504:	92 30       	cpi	r25, 0x02	; 2
    2506:	28 f4       	brcc	.+10     	; 0x2512 <servo_enable_try+0x16>
    2508:	ed e1       	ldi	r30, 0x1D	; 29
    250a:	f6 e0       	ldi	r31, 0x06	; 6
    250c:	81 83       	std	Z+1, r24	; 0x01
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	80 83       	st	Z, r24
    2512:	08 95       	ret

00002514 <servo_get_try_cnt>:
    2514:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <servoD+0x9>
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	08 95       	ret

0000251c <servo_close>:
    251c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <servo_is_open>
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	c1 f0       	breq	.+48     	; 0x2554 <servo_close+0x38>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
    252a:	ed e1       	ldi	r30, 0x1D	; 29
    252c:	f6 e0       	ldi	r31, 0x06	; 6
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 83       	st	Z, r24
    2532:	13 82       	std	Z+3, r1	; 0x03
    2534:	1f 92       	push	r1
    2536:	1f 92       	push	r1
    2538:	81 e5       	ldi	r24, 0x51	; 81
    253a:	93 e0       	ldi	r25, 0x03	; 3
    253c:	9f 93       	push	r25
    253e:	8f 93       	push	r24
    2540:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2544:	96 98       	cbi	0x12, 6	; 18
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	08 95       	ret
    2554:	20 91 1d 06 	lds	r18, 0x061D	; 0x80061d <servoD>
    2558:	24 30       	cpi	r18, 0x04	; 4
    255a:	21 f4       	brne	.+8      	; 0x2564 <servo_close+0x48>
    255c:	0e 94 b3 12 	call	0x2566	; 0x2566 <servo_exit_try>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 95       	ret

00002566 <servo_exit_try>:
    2566:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <servoD+0x1>
    256a:	82 30       	cpi	r24, 0x02	; 2
    256c:	29 f4       	brne	.+10     	; 0x2578 <servo_exit_try+0x12>
    256e:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <servoD>
    2572:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_close>
    2576:	09 c0       	rjmp	.+18     	; 0x258a <servo_exit_try+0x24>
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	71 f4       	brne	.+28     	; 0x2598 <servo_exit_try+0x32>
    257c:	ed e1       	ldi	r30, 0x1D	; 29
    257e:	f6 e0       	ldi	r31, 0x06	; 6
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	80 83       	st	Z, r24
    2584:	83 81       	ldd	r24, Z+3	; 0x03
    2586:	0e 94 cd 12 	call	0x259a	; 0x259a <servo_open>
    258a:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <try_count>
    258e:	ed e1       	ldi	r30, 0x1D	; 29
    2590:	f6 e0       	ldi	r31, 0x06	; 6
    2592:	81 85       	ldd	r24, Z+9	; 0x09
    2594:	8f 5f       	subi	r24, 0xFF	; 255
    2596:	81 87       	std	Z+9, r24	; 0x09
    2598:	08 95       	ret

0000259a <servo_open>:
    259a:	cf 93       	push	r28
    259c:	c8 2f       	mov	r28, r24
    259e:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <servoD>
    25a2:	9f ef       	ldi	r25, 0xFF	; 255
    25a4:	98 0f       	add	r25, r24
    25a6:	93 30       	cpi	r25, 0x03	; 3
    25a8:	c0 f4       	brcc	.+48     	; 0x25da <servo_open+0x40>
    25aa:	ed e1       	ldi	r30, 0x1D	; 29
    25ac:	f6 e0       	ldi	r31, 0x06	; 6
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	80 83       	st	Z, r24
    25b2:	c3 83       	std	Z+3, r28	; 0x03
    25b4:	8c 2f       	mov	r24, r28
    25b6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
    25ba:	1f 92       	push	r1
    25bc:	cf 93       	push	r28
    25be:	82 e6       	ldi	r24, 0x62	; 98
    25c0:	93 e0       	ldi	r25, 0x03	; 3
    25c2:	9f 93       	push	r25
    25c4:	8f 93       	push	r24
    25c6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    25ca:	96 9a       	sbi	0x12, 6	; 18
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <servo_open+0x52>
    25da:	84 30       	cpi	r24, 0x04	; 4
    25dc:	29 f4       	brne	.+10     	; 0x25e8 <servo_open+0x4e>
    25de:	0e 94 b3 12 	call	0x2566	; 0x2566 <servo_exit_try>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <servo_open+0x52>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    25f6:	4b e4       	ldi	r20, 0x4B	; 75
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	80 e7       	ldi	r24, 0x70	; 112
    2600:	94 e0       	ldi	r25, 0x04	; 4
    2602:	0e 94 17 18 	call	0x302e	; 0x302e <evTime_process_period>
    2606:	89 2b       	or	r24, r25
    2608:	09 f4       	brne	.+2      	; 0x260c <servo_process+0x1c>
    260a:	b8 c0       	rjmp	.+368    	; 0x277c <servo_process+0x18c>
	{
		switch(servoD.state)
    260c:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <servoD>
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	a1 f0       	breq	.+40     	; 0x263c <servo_process+0x4c>
    2614:	30 f4       	brcc	.+12     	; 0x2622 <servo_process+0x32>
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	59 f0       	breq	.+22     	; 0x2630 <servo_process+0x40>
    261a:	83 30       	cpi	r24, 0x03	; 3
    261c:	09 f4       	brne	.+2      	; 0x2620 <servo_process+0x30>
    261e:	63 c0       	rjmp	.+198    	; 0x26e6 <servo_process+0xf6>
    2620:	9d c0       	rjmp	.+314    	; 0x275c <servo_process+0x16c>
    2622:	85 30       	cpi	r24, 0x05	; 5
    2624:	09 f4       	brne	.+2      	; 0x2628 <servo_process+0x38>
    2626:	79 c0       	rjmp	.+242    	; 0x271a <servo_process+0x12a>
    2628:	86 30       	cpi	r24, 0x06	; 6
    262a:	09 f4       	brne	.+2      	; 0x262e <servo_process+0x3e>
    262c:	93 c0       	rjmp	.+294    	; 0x2754 <servo_process+0x164>
    262e:	96 c0       	rjmp	.+300    	; 0x275c <servo_process+0x16c>
		{
			case SERVO_OPEN:
			servoD.value = value;
    2630:	c0 93 20 06 	sts	0x0620, r28	; 0x800620 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    2634:	8c 2f       	mov	r24, r28
    2636:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
			break;
    263a:	90 c0       	rjmp	.+288    	; 0x275c <servo_process+0x16c>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    263c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <try_count>
    2640:	81 11       	cpse	r24, r1
    2642:	13 c0       	rjmp	.+38     	; 0x266a <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    2644:	4a ef       	ldi	r20, 0xFA	; 250
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	8b e6       	ldi	r24, 0x6B	; 107
    264e:	94 e0       	ldi	r25, 0x04	; 4
    2650:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
		try_count++;
    2654:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <try_count>
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    265e:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <servoD+0x3>
    2662:	89 0f       	add	r24, r25
    2664:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
    2668:	2a c0       	rjmp	.+84     	; 0x26be <servo_process+0xce>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    266a:	81 50       	subi	r24, 0x01	; 1
    266c:	89 30       	cpi	r24, 0x09	; 9
    266e:	d8 f4       	brcc	.+54     	; 0x26a6 <servo_process+0xb6>
	{
		if (evTime_check(&timeout) == 1)
    2670:	8b e6       	ldi	r24, 0x6B	; 107
    2672:	94 e0       	ldi	r25, 0x04	; 4
    2674:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	09 f5       	brne	.+66     	; 0x26be <servo_process+0xce>
		{
			evTime_start(&timeout, 250);
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	8b e6       	ldi	r24, 0x6B	; 107
    2686:	94 e0       	ldi	r25, 0x04	; 4
    2688:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
			try_count++;
    268c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <try_count>
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <try_count>
			servo_set_pwm_val(servoD.value + try_count*4);
    2696:	88 0f       	add	r24, r24
    2698:	88 0f       	add	r24, r24
    269a:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <servoD+0x3>
    269e:	89 0f       	add	r24, r25
    26a0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
    26a4:	0c c0       	rjmp	.+24     	; 0x26be <servo_process+0xce>
		}
	}
	else
	{
		try_count = 0;
    26a6:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <try_count>
		servo_set_pwm_val(servoD.value);
    26aa:	cd e1       	ldi	r28, 0x1D	; 29
    26ac:	d6 e0       	ldi	r29, 0x06	; 6
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	88 83       	st	Y, r24
		servoD.try_cnt++;
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    26be:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <servoD+0x3>
    26c2:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <try_count>
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	82 0f       	add	r24, r18
    26ca:	91 1d       	adc	r25, r1
    26cc:	9f 93       	push	r25
    26ce:	8f 93       	push	r24
    26d0:	84 e7       	ldi	r24, 0x74	; 116
    26d2:	93 e0       	ldi	r25, 0x03	; 3
    26d4:	9f 93       	push	r25
    26d6:	8f 93       	push	r24
    26d8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	3b c0       	rjmp	.+118    	; 0x275c <servo_process+0x16c>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26e6:	86 e6       	ldi	r24, 0x66	; 102
    26e8:	94 e0       	ldi	r25, 0x04	; 4
    26ea:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <evTime_is_stated>
    26ee:	89 2b       	or	r24, r25
    26f0:	59 f0       	breq	.+22     	; 0x2708 <servo_process+0x118>
	{
		if (evTime_check(&timeout) == 1)
    26f2:	86 e6       	ldi	r24, 0x66	; 102
    26f4:	94 e0       	ldi	r25, 0x04	; 4
    26f6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	79 f5       	brne	.+94     	; 0x275c <servo_process+0x16c>
		{
			servoD.state = SERVO_OPEN;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <servoD>
			LED_SERVO_ON;
    2704:	96 9a       	sbi	0x12, 6	; 18
    2706:	2a c0       	rjmp	.+84     	; 0x275c <servo_process+0x16c>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2708:	40 ed       	ldi	r20, 0xD0	; 208
    270a:	57 e0       	ldi	r21, 0x07	; 7
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	86 e6       	ldi	r24, 0x66	; 102
    2712:	94 e0       	ldi	r25, 0x04	; 4
    2714:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
    2718:	21 c0       	rjmp	.+66     	; 0x275c <servo_process+0x16c>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    271a:	81 e6       	ldi	r24, 0x61	; 97
    271c:	94 e0       	ldi	r25, 0x04	; 4
    271e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <evTime_is_stated>
    2722:	89 2b       	or	r24, r25
    2724:	71 f0       	breq	.+28     	; 0x2742 <servo_process+0x152>
	{
		if (evTime_check(&timeout) == 1)
    2726:	81 e6       	ldi	r24, 0x61	; 97
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	a9 f4       	brne	.+42     	; 0x275c <servo_process+0x16c>
		{
			servoD.state = SERVO_ERROR;
    2732:	86 e0       	ldi	r24, 0x06	; 6
    2734:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2738:	8f e1       	ldi	r24, 0x1F	; 31
    273a:	9e e4       	ldi	r25, 0x4E	; 78
    273c:	9b bd       	out	0x2b, r25	; 43
    273e:	8a bd       	out	0x2a, r24	; 42
    2740:	0d c0       	rjmp	.+26     	; 0x275c <servo_process+0x16c>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2742:	40 ed       	ldi	r20, 0xD0	; 208
    2744:	57 e0       	ldi	r21, 0x07	; 7
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	81 e6       	ldi	r24, 0x61	; 97
    274c:	94 e0       	ldi	r25, 0x04	; 4
    274e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
    2752:	04 c0       	rjmp	.+8      	; 0x275c <servo_process+0x16c>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2754:	8f e1       	ldi	r24, 0x1F	; 31
    2756:	9e e4       	ldi	r25, 0x4E	; 78
    2758:	9b bd       	out	0x2b, r25	; 43
    275a:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    275c:	81 e2       	ldi	r24, 0x21	; 33
    275e:	96 e0       	ldi	r25, 0x06	; 6
    2760:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	51 f4       	brne	.+20     	; 0x277c <servo_process+0x18c>
		{
			servoD.try_cnt = 0;
    2768:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    276c:	82 e8       	ldi	r24, 0x82	; 130
    276e:	93 e0       	ldi	r25, 0x03	; 3
    2770:	9f 93       	push	r25
    2772:	8f 93       	push	r24
    2774:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
		}
	}
}
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	08 95       	ret

00002782 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2782:	eb eb       	ldi	r30, 0xBB	; 187
    2784:	f5 e0       	ldi	r31, 0x05	; 5
    2786:	16 86       	std	Z+14, r1	; 0x0e
    2788:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    278a:	12 86       	std	Z+10, r1	; 0x0a
    278c:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    278e:	14 86       	std	Z+12, r1	; 0x0c
    2790:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2792:	ee e8       	ldi	r30, 0x8E	; 142
    2794:	f5 e0       	ldi	r31, 0x05	; 5
    2796:	16 86       	std	Z+14, r1	; 0x0e
    2798:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    279a:	12 86       	std	Z+10, r1	; 0x0a
    279c:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    279e:	14 86       	std	Z+12, r1	; 0x0c
    27a0:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    27a2:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <button3+0xc>
    27a6:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <button3+0xb>
	
	button5.timer_callback = 0;
    27aa:	ec e6       	ldi	r30, 0x6C	; 108
    27ac:	f5 e0       	ldi	r31, 0x05	; 5
    27ae:	16 86       	std	Z+14, r1	; 0x0e
    27b0:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    27b2:	14 86       	std	Z+12, r1	; 0x0c
    27b4:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    27b6:	12 86       	std	Z+10, r1	; 0x0a
    27b8:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    27ba:	ec ea       	ldi	r30, 0xAC	; 172
    27bc:	f5 e0       	ldi	r31, 0x05	; 5
    27be:	16 86       	std	Z+14, r1	; 0x0e
    27c0:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    27c2:	14 86       	std	Z+12, r1	; 0x0c
    27c4:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    27c6:	12 86       	std	Z+10, r1	; 0x0a
    27c8:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    27ca:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <button7+0xc>
    27ce:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <button7+0xb>
	
	button8.fall_callback = 0;
    27d2:	e9 ed       	ldi	r30, 0xD9	; 217
    27d4:	f5 e0       	ldi	r31, 0x05	; 5
    27d6:	14 86       	std	Z+12, r1	; 0x0c
    27d8:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    27da:	16 86       	std	Z+14, r1	; 0x0e
    27dc:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    27de:	12 86       	std	Z+10, r1	; 0x0a
    27e0:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    27e2:	ee e4       	ldi	r30, 0x4E	; 78
    27e4:	f5 e0       	ldi	r31, 0x05	; 5
    27e6:	14 86       	std	Z+12, r1	; 0x0c
    27e8:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    27ea:	16 86       	std	Z+14, r1	; 0x0e
    27ec:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    27ee:	12 86       	std	Z+10, r1	; 0x0a
    27f0:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    27f2:	ed e5       	ldi	r30, 0x5D	; 93
    27f4:	f5 e0       	ldi	r31, 0x05	; 5
    27f6:	14 86       	std	Z+12, r1	; 0x0c
    27f8:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    27fa:	16 86       	std	Z+14, r1	; 0x0e
    27fc:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    27fe:	12 86       	std	Z+10, r1	; 0x0a
    2800:	11 86       	std	Z+9, r1	; 0x09
    2802:	08 95       	ret

00002804 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2804:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	49 f0       	breq	.+18     	; 0x281e <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    280c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2810:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2814:	98 60       	ori	r25, 0x08	; 8
    2816:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    281a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    281e:	08 95       	ret

00002820 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2820:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    2824:	82 30       	cpi	r24, 0x02	; 2
    2826:	49 f0       	breq	.+18     	; 0x283a <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2828:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    282c:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2830:	80 68       	ori	r24, 0x80	; 128
    2832:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2836:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    283a:	08 95       	ret

0000283c <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    283c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2840:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2844:	92 60       	ori	r25, 0x02	; 2
    2846:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    284a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    284e:	08 95       	ret

00002850 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2850:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2854:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2858:	99 7f       	andi	r25, 0xF9	; 249
    285a:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    285e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	counter_very_fast_motor_sub = 0;
    2862:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <counter_very_fast_motor_sub>
    2866:	08 95       	ret

00002868 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2868:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    286c:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2870:	80 62       	ori	r24, 0x20	; 32
    2872:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2876:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    287a:	08 95       	ret

0000287c <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    287c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2880:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2884:	8f 79       	andi	r24, 0x9F	; 159
    2886:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    288a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	counter_very_fast_motor_sub = 0;
    288e:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <counter_very_fast_motor_sub>
    2892:	08 95       	ret

00002894 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2894:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2898:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    289c:	90 62       	ori	r25, 0x20	; 32
    289e:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    28a2:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    28a6:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    28aa:	8b 30       	cpi	r24, 0x0B	; 11
    28ac:	18 f0       	brcs	.+6      	; 0x28b4 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    28ae:	81 50       	subi	r24, 0x01	; 1
    28b0:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    28b4:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    28c6:	08 95       	ret

000028c8 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    28c8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    28cc:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    28d0:	90 62       	ori	r25, 0x20	; 32
    28d2:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    28d6:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    28da:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    28de:	83 36       	cpi	r24, 0x63	; 99
    28e0:	18 f4       	brcc	.+6      	; 0x28e8 <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    28e2:	8f 5f       	subi	r24, 0xFF	; 255
    28e4:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    28e8:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    28fa:	08 95       	ret

000028fc <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    28fc:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2900:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2904:	90 62       	ori	r25, 0x20	; 32
    2906:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    290a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	if (motor_value > 10)
    290e:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <motor_value>
    2912:	8b 30       	cpi	r24, 0x0B	; 11
    2914:	18 f0       	brcs	.+6      	; 0x291c <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2916:	81 50       	subi	r24, 0x01	; 1
    2918:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    291c:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    292c:	02 97       	sbiw	r24, 0x02	; 2
    292e:	29 f4       	brne	.+10     	; 0x293a <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	state_measure_volt++;
    2942:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    2946:	8f 5f       	subi	r24, 0xFF	; 255
    2948:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <state_measure_volt>
	if (state_measure_volt == 2)
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	19 f4       	brne	.+6      	; 0x2956 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2950:	66 e0       	ldi	r22, 0x06	; 6
    2952:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2956:	08 95       	ret

00002958 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2958:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    295c:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2960:	90 62       	ori	r25, 0x20	; 32
    2962:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2966:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	if (motor_value < 99)
    296a:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <motor_value>
    296e:	83 36       	cpi	r24, 0x63	; 99
    2970:	18 f4       	brcc	.+6      	; 0x2978 <button_motor_add_fall_cb+0x20>
		motor_value++;
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2978:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    2988:	02 97       	sbiw	r24, 0x02	; 2
    298a:	29 f4       	brne	.+10     	; 0x2996 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    298c:	61 e0       	ldi	r22, 0x01	; 1
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2994:	04 c0       	rjmp	.+8      	; 0x299e <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	state_measure_volt++;
    299e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <state_measure_volt>
	if (state_measure_volt == 2)
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	19 f4       	brne	.+6      	; 0x29b2 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    29ac:	66 e0       	ldi	r22, 0x06	; 6
    29ae:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    29b2:	08 95       	ret

000029b4 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    29b4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    29b8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    29bc:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    29c0:	97 7e       	andi	r25, 0xE7	; 231
    29c2:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    29c6:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	counter_very_fast_motor_sub = 0;
    29ca:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    29ce:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    29d2:	88 23       	and	r24, r24
    29d4:	19 f0       	breq	.+6      	; 0x29dc <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    29d6:	81 50       	subi	r24, 0x01	; 1
    29d8:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    29e2:	02 97       	sbiw	r24, 0x02	; 2
    29e4:	29 f4       	brne	.+10     	; 0x29f0 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    29ee:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    29f8:	08 95       	ret

000029fa <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    29fa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    29fe:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2a02:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2a06:	8f 77       	andi	r24, 0x7F	; 127
    2a08:	9e 7f       	andi	r25, 0xFE	; 254
    2a0a:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2a0e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	counter_very_fast_motor_sub = 0;
    2a12:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2a16:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <state_measure_volt>
    2a1a:	88 23       	and	r24, r24
    2a1c:	19 f0       	breq	.+6      	; 0x2a24 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2a1e:	81 50       	subi	r24, 0x01	; 1
    2a20:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    2a2a:	02 97       	sbiw	r24, 0x02	; 2
    2a2c:	29 f4       	brne	.+10     	; 0x2a38 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a36:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a38:	61 e0       	ldi	r22, 0x01	; 1
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a40:	08 95       	ret

00002a42 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2a42:	e9 e2       	ldi	r30, 0x29	; 41
    2a44:	f6 e0       	ldi	r31, 0x06	; 6
    2a46:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <motor_value>
    2a4a:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2a4c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    2a50:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2a52:	bf 01       	movw	r22, r30
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	0e 94 60 11 	call	0x22c0	; 0x22c0 <mem_save_data>
    2a5a:	08 95       	ret

00002a5c <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a5c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2a60:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2a64:	90 62       	ori	r25, 0x20	; 32
    2a66:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2a6a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	if (motor_value < 10)
    2a6e:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <motor_value>
    2a72:	8a 30       	cpi	r24, 0x0A	; 10
    2a74:	38 f4       	brcc	.+14     	; 0x2a84 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2a76:	8a e0       	ldi	r24, 0x0A	; 10
    2a78:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2a7c:	6a e0       	ldi	r22, 0x0A	; 10
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	}
	sys_save_display();
    2a84:	0e 94 21 15 	call	0x2a42	; 0x2a42 <sys_save_display>
	if(!dcmotor_is_on())
    2a88:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
    2a8c:	89 2b       	or	r24, r25
    2a8e:	39 f4       	brne	.+14     	; 0x2a9e <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2a90:	0e 94 92 07 	call	0xf24	; 0xf24 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2a94:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    2a98:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_delayed_open>
    2a9c:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2a9e:	0e 94 7a 07 	call	0xef4	; 0xef4 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2aa2:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_close>
    2aa6:	08 95       	ret

00002aa8 <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2aa8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2aac:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2ab0:	90 62       	ori	r25, 0x20	; 32
    2ab2:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2ab6:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
	if (servo_vibro_value < 10)
    2aba:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    2abe:	8a 30       	cpi	r24, 0x0A	; 10
    2ac0:	38 f4       	brcc	.+14     	; 0x2ad0 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2ac2:	8a e0       	ldi	r24, 0x0A	; 10
    2ac4:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2ac8:	6a e0       	ldi	r22, 0x0A	; 10
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2ad0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <servo_is_open>
    2ad4:	89 2b       	or	r24, r25
    2ad6:	19 f0       	breq	.+6      	; 0x2ade <button_on_off_pwm+0x36>
    2ad8:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_close>
    2adc:	08 95       	ret
	else servo_open(servo_vibro_value);
    2ade:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <servo_vibro_value>
    2ae2:	0e 94 cd 12 	call	0x259a	; 0x259a <servo_open>
    2ae6:	08 95       	ret

00002ae8 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2ae8:	8d e1       	ldi	r24, 0x1D	; 29
    2aea:	96 e1       	ldi	r25, 0x16	; 22
    2aec:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <button4+0xa>
    2af0:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	disp_off_segments();
    2afc:	0e 94 3d 0a 	call	0x147a	; 0x147a <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2b00:	67 e2       	ldi	r22, 0x27	; 39
    2b02:	76 e0       	ldi	r23, 0x06	; 6
    2b04:	83 e0       	ldi	r24, 0x03	; 3
    2b06:	0e 94 a8 11 	call	0x2350	; 0x2350 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2b0a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <mem_last_save+0x1>
    2b0e:	96 ef       	ldi	r25, 0xF6	; 246
    2b10:	98 0f       	add	r25, r24
    2b12:	9a 35       	cpi	r25, 0x5A	; 90
    2b14:	10 f4       	brcc	.+4      	; 0x2b1a <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2b16:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2b1a:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <mem_last_save>
    2b1e:	96 ef       	ldi	r25, 0xF6	; 246
    2b20:	98 0f       	add	r25, r24
    2b22:	9a 35       	cpi	r25, 0x5A	; 90
    2b24:	10 f4       	brcc	.+4      	; 0x2b2a <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2b26:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <motor_value>
    2b2a:	08 95       	ret

00002b2c <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2b2c:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2b30:	42 e0       	ldi	r20, 0x02	; 2
    2b32:	68 ee       	ldi	r22, 0xE8	; 232
    2b34:	73 e0       	ldi	r23, 0x03	; 3
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 8f 0b 	call	0x171e	; 0x171e <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2b3e:	0e 94 55 07 	call	0xeaa	; 0xeaa <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	0e 94 25 12 	call	0x244a	; 0x244a <servo_init>
	#endif
	error_init();
    2b48:	0e 94 57 0c 	call	0x18ae	; 0x18ae <error_init>
	init_measure();
    2b4c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <init_measure>
	init_buzzer();
    2b50:	0e 94 58 05 	call	0xab0	; 0xab0 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2b5c:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2b60:	eb eb       	ldi	r30, 0xBB	; 187
    2b62:	f5 e0       	ldi	r31, 0x05	; 5
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	94 e1       	ldi	r25, 0x14	; 20
    2b68:	96 87       	std	Z+14, r25	; 0x0e
    2b6a:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2b6c:	8e e7       	ldi	r24, 0x7E	; 126
    2b6e:	94 e1       	ldi	r25, 0x14	; 20
    2b70:	94 87       	std	Z+12, r25	; 0x0c
    2b72:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2b74:	8a ed       	ldi	r24, 0xDA	; 218
    2b76:	94 e1       	ldi	r25, 0x14	; 20
    2b78:	92 87       	std	Z+10, r25	; 0x0a
    2b7a:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2b7c:	ee e8       	ldi	r30, 0x8E	; 142
    2b7e:	f5 e0       	ldi	r31, 0x05	; 5
    2b80:	80 e1       	ldi	r24, 0x10	; 16
    2b82:	94 e1       	ldi	r25, 0x14	; 20
    2b84:	96 87       	std	Z+14, r25	; 0x0e
    2b86:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2b88:	8c ea       	ldi	r24, 0xAC	; 172
    2b8a:	94 e1       	ldi	r25, 0x14	; 20
    2b8c:	94 87       	std	Z+12, r25	; 0x0c
    2b8e:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2b90:	8d ef       	ldi	r24, 0xFD	; 253
    2b92:	94 e1       	ldi	r25, 0x14	; 20
    2b94:	92 87       	std	Z+10, r25	; 0x0a
    2b96:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2b98:	8e e2       	ldi	r24, 0x2E	; 46
    2b9a:	95 e1       	ldi	r25, 0x15	; 21
    2b9c:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <button3+0xc>
    2ba0:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2ba4:	ec e6       	ldi	r30, 0x6C	; 108
    2ba6:	f5 e0       	ldi	r31, 0x05	; 5
    2ba8:	8e e1       	ldi	r24, 0x1E	; 30
    2baa:	94 e1       	ldi	r25, 0x14	; 20
    2bac:	96 87       	std	Z+14, r25	; 0x0e
    2bae:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2bb0:	88 e2       	ldi	r24, 0x28	; 40
    2bb2:	94 e1       	ldi	r25, 0x14	; 20
    2bb4:	92 87       	std	Z+10, r25	; 0x0a
    2bb6:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2bb8:	8a e4       	ldi	r24, 0x4A	; 74
    2bba:	94 e1       	ldi	r25, 0x14	; 20
    2bbc:	94 87       	std	Z+12, r25	; 0x0c
    2bbe:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2bc0:	ec ea       	ldi	r30, 0xAC	; 172
    2bc2:	f5 e0       	ldi	r31, 0x05	; 5
    2bc4:	84 e3       	ldi	r24, 0x34	; 52
    2bc6:	94 e1       	ldi	r25, 0x14	; 20
    2bc8:	96 87       	std	Z+14, r25	; 0x0e
    2bca:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2bcc:	8e e3       	ldi	r24, 0x3E	; 62
    2bce:	94 e1       	ldi	r25, 0x14	; 20
    2bd0:	92 87       	std	Z+10, r25	; 0x0a
    2bd2:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2bd4:	84 e6       	ldi	r24, 0x64	; 100
    2bd6:	94 e1       	ldi	r25, 0x14	; 20
    2bd8:	94 87       	std	Z+12, r25	; 0x0c
    2bda:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2bdc:	84 e5       	ldi	r24, 0x54	; 84
    2bde:	95 e1       	ldi	r25, 0x15	; 21
    2be0:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <button7+0xc>
    2be4:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2be8:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2bf2:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
    2bfc:	08 95       	ret

00002bfe <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2bfe:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <state_measure_volt>
	dcmotorpwm_deinit();
    2c02:	0e 94 69 07 	call	0xed2	; 0xed2 <dcmotorpwm_deinit>
	off_button();
    2c06:	0e 94 c1 13 	call	0x2782	; 0x2782 <off_button>
	error_deinit();
    2c0a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	#if DARK_MENU
	init_menu();
    2c0e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <init_menu>
	#endif /* DARK_MENU */
	servo_close();
    2c12:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2c16:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <system_events+0x1>
    2c1a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2c26:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2c2a:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2c2e:	8e 7f       	andi	r24, 0xFE	; 254
    2c30:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2c34:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    2c38:	08 95       	ret

00002c3a <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2c3a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2c3e:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2c42:	80 ff       	sbrs	r24, 0
    2c44:	03 c0       	rjmp	.+6      	; 0x2c4c <button4_toggle_system+0x12>
	{
		off_system();
    2c46:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <off_system>
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2c4c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <on_system>
	}
	ON_BUZZ_SIGNAL;
    2c50:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2c54:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2c58:	90 62       	ori	r25, 0x20	; 32
    2c5a:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2c5e:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
    2c62:	08 95       	ret

00002c64 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2c64:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    2c68:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    2c6c:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    2c70:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    2c74:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <disp_fast_timer.2109>
    2c78:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <disp_fast_timer.2109+0x1>
    2c7c:	a0 91 78 04 	lds	r26, 0x0478	; 0x800478 <disp_fast_timer.2109+0x2>
    2c80:	b0 91 79 04 	lds	r27, 0x0479	; 0x800479 <disp_fast_timer.2109+0x3>
    2c84:	84 17       	cp	r24, r20
    2c86:	95 07       	cpc	r25, r21
    2c88:	a6 07       	cpc	r26, r22
    2c8a:	b7 07       	cpc	r27, r23
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <disp_fast_process+0x2c>
    2c8e:	a0 c0       	rjmp	.+320    	; 0x2dd0 <disp_fast_process+0x16c>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2c90:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2c94:	85 ff       	sbrs	r24, 5
    2c96:	1f c0       	rjmp	.+62     	; 0x2cd6 <disp_fast_process+0x72>
    2c98:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    2c9c:	63 36       	cpi	r22, 0x63	; 99
    2c9e:	d8 f4       	brcc	.+54     	; 0x2cd6 <disp_fast_process+0x72>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10)
    2ca0:	6b 30       	cpi	r22, 0x0B	; 11
    2ca2:	30 f0       	brcs	.+12     	; 0x2cb0 <disp_fast_process+0x4c>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2ca4:	6f 5f       	subi	r22, 0xFF	; 255
    2ca6:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <servo_vibro_value>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2cb0:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <counter_very_fast_servo_add>
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2cba:	8f 30       	cpi	r24, 0x0F	; 15
    2cbc:	60 f0       	brcs	.+24     	; 0x2cd6 <disp_fast_process+0x72>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2cbe:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2cc2:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2cc6:	8f 7d       	andi	r24, 0xDF	; 223
    2cc8:	80 64       	ori	r24, 0x40	; 64
    2cca:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2cce:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
				counter_very_fast_servo_add = 0;
    2cd2:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2cd6:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2cda:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2cde:	91 ff       	sbrs	r25, 1
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <disp_fast_process+0xbc>
    2ce2:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    2ce6:	66 23       	and	r22, r22
    2ce8:	d9 f0       	breq	.+54     	; 0x2d20 <disp_fast_process+0xbc>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10)
    2cea:	6b 30       	cpi	r22, 0x0B	; 11
    2cec:	30 f0       	brcs	.+12     	; 0x2cfa <disp_fast_process+0x96>
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2cee:	61 50       	subi	r22, 0x01	; 1
    2cf0:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <servo_vibro_value>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    2cfa:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <counter_very_fast_servo_sub>
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2d04:	8f 30       	cpi	r24, 0x0F	; 15
    2d06:	60 f0       	brcs	.+24     	; 0x2d20 <disp_fast_process+0xbc>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2d08:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2d0c:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2d10:	9d 7f       	andi	r25, 0xFD	; 253
    2d12:	94 60       	ori	r25, 0x04	; 4
    2d14:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2d18:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
				counter_very_fast_servo_sub = 0;
    2d1c:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2d20:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2d24:	87 ff       	sbrs	r24, 7
    2d26:	1d c0       	rjmp	.+58     	; 0x2d62 <disp_fast_process+0xfe>
    2d28:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2d2c:	63 36       	cpi	r22, 0x63	; 99
    2d2e:	c8 f4       	brcc	.+50     	; 0x2d62 <disp_fast_process+0xfe>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2d30:	6f 5f       	subi	r22, 0xFF	; 255
    2d32:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <motor_value>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			counter_very_fast_motor_add++;
    2d3c:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <counter_very_fast_motor_add>
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2d46:	8f 30       	cpi	r24, 0x0F	; 15
    2d48:	60 f0       	brcs	.+24     	; 0x2d62 <disp_fast_process+0xfe>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2d4a:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2d4e:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2d52:	8f 77       	andi	r24, 0x7F	; 127
    2d54:	91 60       	ori	r25, 0x01	; 1
    2d56:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2d5a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
				counter_very_fast_motor_add = 0;
    2d5e:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2d62:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2d66:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2d6a:	93 ff       	sbrs	r25, 3
    2d6c:	1d c0       	rjmp	.+58     	; 0x2da8 <disp_fast_process+0x144>
    2d6e:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2d72:	6b 30       	cpi	r22, 0x0B	; 11
    2d74:	c8 f0       	brcs	.+50     	; 0x2da8 <disp_fast_process+0x144>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2d76:	61 50       	subi	r22, 0x01	; 1
    2d78:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <motor_value>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			counter_very_fast_motor_sub++;
    2d82:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <counter_very_fast_motor_sub>
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2d8c:	8f 30       	cpi	r24, 0x0F	; 15
    2d8e:	60 f0       	brcs	.+24     	; 0x2da8 <disp_fast_process+0x144>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2d90:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2d94:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2d98:	97 7f       	andi	r25, 0xF7	; 247
    2d9a:	90 61       	ori	r25, 0x10	; 16
    2d9c:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <system_events+0x1>
    2da0:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <system_events>
				counter_very_fast_motor_sub = 0;
    2da4:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2da8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <disp_fast_timer.2109>
    2dac:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <disp_fast_timer.2109+0x1>
    2db0:	a0 91 78 04 	lds	r26, 0x0478	; 0x800478 <disp_fast_timer.2109+0x2>
    2db4:	b0 91 79 04 	lds	r27, 0x0479	; 0x800479 <disp_fast_timer.2109+0x3>
    2db8:	80 5b       	subi	r24, 0xB0	; 176
    2dba:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbc:	af 4f       	sbci	r26, 0xFF	; 255
    2dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc0:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <disp_fast_timer.2109>
    2dc4:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <disp_fast_timer.2109+0x1>
    2dc8:	a0 93 78 04 	sts	0x0478, r26	; 0x800478 <disp_fast_timer.2109+0x2>
    2dcc:	b0 93 79 04 	sts	0x0479, r27	; 0x800479 <disp_fast_timer.2109+0x3>
    2dd0:	08 95       	ret

00002dd2 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2dd2:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <mktime+0x2>
    2dd6:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <mktime+0x3>
    2dda:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <mktime+0x4>
    2dde:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <mktime+0x5>
    2de2:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <disp_very_fast_timer>
    2de6:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <disp_very_fast_timer+0x1>
    2dea:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <disp_very_fast_timer+0x2>
    2dee:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <disp_very_fast_timer+0x3>
    2df2:	84 17       	cp	r24, r20
    2df4:	95 07       	cpc	r25, r21
    2df6:	a6 07       	cpc	r26, r22
    2df8:	b7 07       	cpc	r27, r23
    2dfa:	08 f0       	brcs	.+2      	; 0x2dfe <disp_very_fast_process+0x2c>
    2dfc:	51 c0       	rjmp	.+162    	; 0x2ea0 <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2dfe:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    2e02:	63 36       	cpi	r22, 0x63	; 99
    2e04:	50 f4       	brcc	.+20     	; 0x2e1a <disp_very_fast_process+0x48>
    2e06:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2e0a:	86 ff       	sbrs	r24, 6
    2e0c:	06 c0       	rjmp	.+12     	; 0x2e1a <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2e0e:	6f 5f       	subi	r22, 0xFF	; 255
    2e10:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <servo_vibro_value>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2e1a:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <servo_vibro_value>
    2e1e:	6b 30       	cpi	r22, 0x0B	; 11
    2e20:	60 f0       	brcs	.+24     	; 0x2e3a <disp_very_fast_process+0x68>
    2e22:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2e26:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2e2a:	92 ff       	sbrs	r25, 2
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <disp_very_fast_process+0x68>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10)
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2e2e:	61 50       	subi	r22, 0x01	; 1
    2e30:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <servo_vibro_value>
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2e3a:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2e3e:	63 36       	cpi	r22, 0x63	; 99
    2e40:	60 f4       	brcc	.+24     	; 0x2e5a <disp_very_fast_process+0x88>
    2e42:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2e46:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2e4a:	90 ff       	sbrs	r25, 0
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2e4e:	6f 5f       	subi	r22, 0xFF	; 255
    2e50:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <motor_value>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2e5a:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <motor_value>
    2e5e:	6b 30       	cpi	r22, 0x0B	; 11
    2e60:	60 f0       	brcs	.+24     	; 0x2e7a <disp_very_fast_process+0xa8>
    2e62:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <system_events>
    2e66:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <system_events+0x1>
    2e6a:	94 ff       	sbrs	r25, 4
    2e6c:	06 c0       	rjmp	.+12     	; 0x2e7a <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2e6e:	61 50       	subi	r22, 0x01	; 1
    2e70:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <motor_value>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2e7a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <disp_very_fast_timer>
    2e7e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <disp_very_fast_timer+0x1>
    2e82:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <disp_very_fast_timer+0x2>
    2e86:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <disp_very_fast_timer+0x3>
    2e8a:	4e 96       	adiw	r24, 0x1e	; 30
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	b1 1d       	adc	r27, r1
    2e90:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <disp_very_fast_timer>
    2e94:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <disp_very_fast_timer+0x1>
    2e98:	a0 93 7c 04 	sts	0x047C, r26	; 0x80047c <disp_very_fast_timer+0x2>
    2e9c:	b0 93 7d 04 	sts	0x047D, r27	; 0x80047d <disp_very_fast_timer+0x3>
    2ea0:	08 95       	ret

00002ea2 <system_error>:
}


void system_error(void)
{
	off_button();
    2ea2:	0e 94 c1 13 	call	0x2782	; 0x2782 <off_button>
    2ea6:	08 95       	ret

00002ea8 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2ea8:	1f 92       	push	r1
    2eaa:	0f 92       	push	r0
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	0f 92       	push	r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	2f 93       	push	r18
    2eb4:	3f 93       	push	r19
    2eb6:	4f 93       	push	r20
    2eb8:	5f 93       	push	r21
    2eba:	6f 93       	push	r22
    2ebc:	7f 93       	push	r23
    2ebe:	8f 93       	push	r24
    2ec0:	9f 93       	push	r25
    2ec2:	af 93       	push	r26
    2ec4:	bf 93       	push	r27
    2ec6:	ef 93       	push	r30
    2ec8:	ff 93       	push	r31
    2eca:	eb e2       	ldi	r30, 0x2B	; 43
    2ecc:	f6 e0       	ldi	r31, 0x06	; 6
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	c2 96       	adiw	r24, 0x32	; 50
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	88 3e       	cpi	r24, 0xE8	; 232
    2ede:	93 40       	sbci	r25, 0x03	; 3
    2ee0:	88 f0       	brcs	.+34     	; 0x2f04 <__vector_10+0x5c>
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	a4 81       	ldd	r26, Z+4	; 0x04
    2ee8:	b5 81       	ldd	r27, Z+5	; 0x05
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	a1 1d       	adc	r26, r1
    2eee:	b1 1d       	adc	r27, r1
    2ef0:	82 83       	std	Z+2, r24	; 0x02
    2ef2:	93 83       	std	Z+3, r25	; 0x03
    2ef4:	a4 83       	std	Z+4, r26	; 0x04
    2ef6:	b5 83       	std	Z+5, r27	; 0x05
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	88 5e       	subi	r24, 0xE8	; 232
    2efe:	93 40       	sbci	r25, 0x03	; 3
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
    2f04:	83 e8       	ldi	r24, 0x83	; 131
    2f06:	94 e0       	ldi	r25, 0x04	; 4
    2f08:	0e 94 55 09 	call	0x12aa	; 0x12aa <display_process>
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <timer0_init>:
    2f2e:	93 b7       	in	r25, 0x33	; 51
    2f30:	98 60       	ori	r25, 0x08	; 8
    2f32:	93 bf       	out	0x33, r25	; 51
    2f34:	6c bf       	out	0x3c, r22	; 60
    2f36:	82 30       	cpi	r24, 0x02	; 2
    2f38:	99 f0       	breq	.+38     	; 0x2f60 <timer0_init+0x32>
    2f3a:	28 f4       	brcc	.+10     	; 0x2f46 <timer0_init+0x18>
    2f3c:	88 23       	and	r24, r24
    2f3e:	41 f0       	breq	.+16     	; 0x2f50 <timer0_init+0x22>
    2f40:	81 30       	cpi	r24, 0x01	; 1
    2f42:	51 f0       	breq	.+20     	; 0x2f58 <timer0_init+0x2a>
    2f44:	19 c0       	rjmp	.+50     	; 0x2f78 <timer0_init+0x4a>
    2f46:	83 30       	cpi	r24, 0x03	; 3
    2f48:	79 f0       	breq	.+30     	; 0x2f68 <timer0_init+0x3a>
    2f4a:	84 30       	cpi	r24, 0x04	; 4
    2f4c:	89 f0       	breq	.+34     	; 0x2f70 <timer0_init+0x42>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <timer0_init+0x4a>
    2f50:	83 b7       	in	r24, 0x33	; 51
    2f52:	81 60       	ori	r24, 0x01	; 1
    2f54:	83 bf       	out	0x33, r24	; 51
    2f56:	13 c0       	rjmp	.+38     	; 0x2f7e <timer0_init+0x50>
    2f58:	83 b7       	in	r24, 0x33	; 51
    2f5a:	82 60       	ori	r24, 0x02	; 2
    2f5c:	83 bf       	out	0x33, r24	; 51
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <timer0_init+0x50>
    2f60:	83 b7       	in	r24, 0x33	; 51
    2f62:	83 60       	ori	r24, 0x03	; 3
    2f64:	83 bf       	out	0x33, r24	; 51
    2f66:	0b c0       	rjmp	.+22     	; 0x2f7e <timer0_init+0x50>
    2f68:	83 b7       	in	r24, 0x33	; 51
    2f6a:	84 60       	ori	r24, 0x04	; 4
    2f6c:	83 bf       	out	0x33, r24	; 51
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <timer0_init+0x50>
    2f70:	83 b7       	in	r24, 0x33	; 51
    2f72:	85 60       	ori	r24, 0x05	; 5
    2f74:	83 bf       	out	0x33, r24	; 51
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <timer0_init+0x50>
    2f78:	83 b7       	in	r24, 0x33	; 51
    2f7a:	81 60       	ori	r24, 0x01	; 1
    2f7c:	83 bf       	out	0x33, r24	; 51
    2f7e:	89 b7       	in	r24, 0x39	; 57
    2f80:	82 60       	ori	r24, 0x02	; 2
    2f82:	89 bf       	out	0x39, r24	; 57
    2f84:	08 95       	ret

00002f86 <evTime_init>:
    2f86:	23 e0       	ldi	r18, 0x03	; 3
    2f88:	fc 01       	movw	r30, r24
    2f8a:	24 83       	std	Z+4, r18	; 0x04
    2f8c:	10 82       	st	Z, r1
    2f8e:	11 82       	std	Z+1, r1	; 0x01
    2f90:	12 82       	std	Z+2, r1	; 0x02
    2f92:	13 82       	std	Z+3, r1	; 0x03
    2f94:	08 95       	ret

00002f96 <evTime_start>:
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	21 e0       	ldi	r18, 0x01	; 1
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	24 83       	std	Z+4, r18	; 0x04
    2fa0:	00 91 2d 06 	lds	r16, 0x062D	; 0x80062d <mktime+0x2>
    2fa4:	10 91 2e 06 	lds	r17, 0x062E	; 0x80062e <mktime+0x3>
    2fa8:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <mktime+0x4>
    2fac:	30 91 30 06 	lds	r19, 0x0630	; 0x800630 <mktime+0x5>
    2fb0:	40 0f       	add	r20, r16
    2fb2:	51 1f       	adc	r21, r17
    2fb4:	62 1f       	adc	r22, r18
    2fb6:	73 1f       	adc	r23, r19
    2fb8:	40 83       	st	Z, r20
    2fba:	51 83       	std	Z+1, r21	; 0x01
    2fbc:	62 83       	std	Z+2, r22	; 0x02
    2fbe:	73 83       	std	Z+3, r23	; 0x03
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <evTime_is_stated>:
    2fc6:	21 e0       	ldi	r18, 0x01	; 1
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	fc 01       	movw	r30, r24
    2fcc:	84 81       	ldd	r24, Z+4	; 0x04
    2fce:	81 30       	cpi	r24, 0x01	; 1
    2fd0:	11 f0       	breq	.+4      	; 0x2fd6 <evTime_is_stated+0x10>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	c9 01       	movw	r24, r18
    2fd8:	08 95       	ret

00002fda <evTime_check>:

int evTime_check(evTime * evt)
{
    2fda:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2fdc:	84 81       	ldd	r24, Z+4	; 0x04
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	b1 f4       	brne	.+44     	; 0x300e <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2fe2:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <mktime+0x2>
    2fe6:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <mktime+0x3>
    2fea:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <mktime+0x4>
    2fee:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <mktime+0x5>
    2ff2:	40 81       	ld	r20, Z
    2ff4:	51 81       	ldd	r21, Z+1	; 0x01
    2ff6:	62 81       	ldd	r22, Z+2	; 0x02
    2ff8:	73 81       	ldd	r23, Z+3	; 0x03
    2ffa:	48 17       	cp	r20, r24
    2ffc:	59 07       	cpc	r21, r25
    2ffe:	6a 07       	cpc	r22, r26
    3000:	7b 07       	cpc	r23, r27
    3002:	40 f4       	brcc	.+16     	; 0x3014 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    300e:	8f ef       	ldi	r24, 0xFF	; 255
    3010:	9f ef       	ldi	r25, 0xFF	; 255
    3012:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    3018:	08 95       	ret

0000301a <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    301a:	21 e0       	ldi	r18, 0x01	; 1
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	fc 01       	movw	r30, r24
    3020:	84 81       	ldd	r24, Z+4	; 0x04
    3022:	83 30       	cpi	r24, 0x03	; 3
    3024:	11 f0       	breq	.+4      	; 0x302a <evTime_off+0x10>
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
}
    302a:	c9 01       	movw	r24, r18
    302c:	08 95       	ret

0000302e <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    302e:	cf 92       	push	r12
    3030:	df 92       	push	r13
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	ec 01       	movw	r28, r24
    3040:	6a 01       	movw	r12, r20
    3042:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	81 11       	cpse	r24, r1
    3048:	06 c0       	rjmp	.+12     	; 0x3056 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    304a:	83 e0       	ldi	r24, 0x03	; 3
    304c:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    304e:	18 82       	st	Y, r1
    3050:	19 82       	std	Y+1, r1	; 0x01
    3052:	1a 82       	std	Y+2, r1	; 0x02
    3054:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    3056:	ce 01       	movw	r24, r28
    3058:	0e 94 ed 17 	call	0x2fda	; 0x2fda <evTime_check>
    305c:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	31 f4       	brne	.+12     	; 0x306e <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    3062:	b7 01       	movw	r22, r14
    3064:	a6 01       	movw	r20, r12
    3066:	ce 01       	movw	r24, r28
    3068:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
		return 1;
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	83 30       	cpi	r24, 0x03	; 3
    3072:	41 f4       	brne	.+16     	; 0x3084 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    3074:	b7 01       	movw	r22, r14
    3076:	a6 01       	movw	r20, r12
    3078:	ce 01       	movw	r24, r28
    307a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <evTime_start>
	}
	return 0;
    307e:	00 e0       	ldi	r16, 0x00	; 0
    3080:	10 e0       	ldi	r17, 0x00	; 0
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <evTime_process_period+0x5a>
    3084:	00 e0       	ldi	r16, 0x00	; 0
    3086:	10 e0       	ldi	r17, 0x00	; 0
}
    3088:	c8 01       	movw	r24, r16
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	df 90       	pop	r13
    3098:	cf 90       	pop	r12
    309a:	08 95       	ret

0000309c <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    309c:	1f 92       	push	r1
    309e:	0f 92       	push	r0
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	0f 92       	push	r0
    30a4:	11 24       	eor	r1, r1
    30a6:	2f 93       	push	r18
    30a8:	3f 93       	push	r19
    30aa:	4f 93       	push	r20
    30ac:	5f 93       	push	r21
    30ae:	8f 93       	push	r24
    30b0:	9f 93       	push	r25
    30b2:	ef 93       	push	r30
    30b4:	ff 93       	push	r31
    30b6:	2b b1       	in	r18, 0x0b	; 11
    30b8:	3c b1       	in	r19, 0x0c	; 12
    30ba:	28 71       	andi	r18, 0x18	; 24
    30bc:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <UART_RxHead>
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	40 91 86 04 	lds	r20, 0x0486	; 0x800486 <UART_RxTail>
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	84 17       	cp	r24, r20
    30cc:	95 07       	cpc	r25, r21
    30ce:	39 f0       	breq	.+14     	; 0x30de <__vector_13+0x42>
    30d0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <UART_RxHead>
    30d4:	fc 01       	movw	r30, r24
    30d6:	e6 57       	subi	r30, 0x76	; 118
    30d8:	fb 4f       	sbci	r31, 0xFB	; 251
    30da:	30 83       	st	Z, r19
    30dc:	01 c0       	rjmp	.+2      	; 0x30e0 <__vector_13+0x44>
    30de:	22 e0       	ldi	r18, 0x02	; 2
    30e0:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <UART_LastRxError>
    30e4:	ff 91       	pop	r31
    30e6:	ef 91       	pop	r30
    30e8:	9f 91       	pop	r25
    30ea:	8f 91       	pop	r24
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	0f 90       	pop	r0
    30fa:	1f 90       	pop	r1
    30fc:	18 95       	reti

000030fe <__vector_14>:
    30fe:	1f 92       	push	r1
    3100:	0f 92       	push	r0
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	0f 92       	push	r0
    3106:	11 24       	eor	r1, r1
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	ef 93       	push	r30
    310e:	ff 93       	push	r31
    3110:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <UART_TxHead>
    3114:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <UART_TxTail>
    3118:	98 17       	cp	r25, r24
    311a:	71 f0       	breq	.+28     	; 0x3138 <__vector_14+0x3a>
    311c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <UART_TxTail>
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	8f 77       	andi	r24, 0x7F	; 127
    3126:	99 27       	eor	r25, r25
    3128:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <UART_TxTail>
    312c:	fc 01       	movw	r30, r24
    312e:	e6 57       	subi	r30, 0x76	; 118
    3130:	fb 4f       	sbci	r31, 0xFB	; 251
    3132:	80 81       	ld	r24, Z
    3134:	8c b9       	out	0x0c, r24	; 12
    3136:	01 c0       	rjmp	.+2      	; 0x313a <__vector_14+0x3c>
    3138:	55 98       	cbi	0x0a, 5	; 10
    313a:	ff 91       	pop	r31
    313c:	ef 91       	pop	r30
    313e:	9f 91       	pop	r25
    3140:	8f 91       	pop	r24
    3142:	0f 90       	pop	r0
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	0f 90       	pop	r0
    3148:	1f 90       	pop	r1
    314a:	18 95       	reti

0000314c <uart0_init>:
    314c:	f8 94       	cli
    314e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <UART_TxHead>
    3152:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <UART_TxTail>
    3156:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <UART_RxHead>
    315a:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <UART_RxTail>
    315e:	78 94       	sei
    3160:	99 23       	and	r25, r25
    3162:	1c f4       	brge	.+6      	; 0x316a <uart0_init+0x1e>
    3164:	22 e0       	ldi	r18, 0x02	; 2
    3166:	2b b9       	out	0x0b, r18	; 11
    3168:	9f 77       	andi	r25, 0x7F	; 127
    316a:	90 bd       	out	0x20, r25	; 32
    316c:	89 b9       	out	0x09, r24	; 9
    316e:	88 e9       	ldi	r24, 0x98	; 152
    3170:	8a b9       	out	0x0a, r24	; 10
    3172:	86 e8       	ldi	r24, 0x86	; 134
    3174:	80 bd       	out	0x20, r24	; 32
    3176:	08 95       	ret

00003178 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    3178:	40 91 89 04 	lds	r20, 0x0489	; 0x800489 <UART_TxHead>
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	4f 5f       	subi	r20, 0xFF	; 255
    3180:	5f 4f       	sbci	r21, 0xFF	; 255
    3182:	4f 77       	andi	r20, 0x7F	; 127
    3184:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    3186:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <UART_TxTail>
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	42 17       	cp	r20, r18
    318e:	53 07       	cpc	r21, r19
    3190:	d1 f3       	breq	.-12     	; 0x3186 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3192:	fa 01       	movw	r30, r20
    3194:	e6 57       	subi	r30, 0x76	; 118
    3196:	fb 4f       	sbci	r31, 0xFB	; 251
    3198:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    319a:	40 93 89 04 	sts	0x0489, r20	; 0x800489 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    319e:	55 9a       	sbi	0x0a, 5	; 10
    31a0:	08 95       	ret

000031a2 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	ec 01       	movw	r28, r24
	while (*s) {
    31a8:	88 81       	ld	r24, Y
    31aa:	88 23       	and	r24, r24
    31ac:	31 f0       	breq	.+12     	; 0x31ba <uart0_puts+0x18>
    31ae:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    31b0:	0e 94 bc 18 	call	0x3178	; 0x3178 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    31b4:	89 91       	ld	r24, Y+
    31b6:	81 11       	cpse	r24, r1
    31b8:	fb cf       	rjmp	.-10     	; 0x31b0 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	08 95       	ret

000031c0 <__subsf3>:
    31c0:	50 58       	subi	r21, 0x80	; 128

000031c2 <__addsf3>:
    31c2:	bb 27       	eor	r27, r27
    31c4:	aa 27       	eor	r26, r26
    31c6:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__addsf3x>
    31ca:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__fp_round>
    31ce:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_pscA>
    31d2:	38 f0       	brcs	.+14     	; 0x31e2 <__addsf3+0x20>
    31d4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__fp_pscB>
    31d8:	20 f0       	brcs	.+8      	; 0x31e2 <__addsf3+0x20>
    31da:	39 f4       	brne	.+14     	; 0x31ea <__addsf3+0x28>
    31dc:	9f 3f       	cpi	r25, 0xFF	; 255
    31de:	19 f4       	brne	.+6      	; 0x31e6 <__addsf3+0x24>
    31e0:	26 f4       	brtc	.+8      	; 0x31ea <__addsf3+0x28>
    31e2:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>
    31e6:	0e f4       	brtc	.+2      	; 0x31ea <__addsf3+0x28>
    31e8:	e0 95       	com	r30
    31ea:	e7 fb       	bst	r30, 7
    31ec:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>

000031f0 <__addsf3x>:
    31f0:	e9 2f       	mov	r30, r25
    31f2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__fp_split3>
    31f6:	58 f3       	brcs	.-42     	; 0x31ce <__addsf3+0xc>
    31f8:	ba 17       	cp	r27, r26
    31fa:	62 07       	cpc	r22, r18
    31fc:	73 07       	cpc	r23, r19
    31fe:	84 07       	cpc	r24, r20
    3200:	95 07       	cpc	r25, r21
    3202:	20 f0       	brcs	.+8      	; 0x320c <__addsf3x+0x1c>
    3204:	79 f4       	brne	.+30     	; 0x3224 <__addsf3x+0x34>
    3206:	a6 f5       	brtc	.+104    	; 0x3270 <__addsf3x+0x80>
    3208:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__fp_zero>
    320c:	0e f4       	brtc	.+2      	; 0x3210 <__addsf3x+0x20>
    320e:	e0 95       	com	r30
    3210:	0b 2e       	mov	r0, r27
    3212:	ba 2f       	mov	r27, r26
    3214:	a0 2d       	mov	r26, r0
    3216:	0b 01       	movw	r0, r22
    3218:	b9 01       	movw	r22, r18
    321a:	90 01       	movw	r18, r0
    321c:	0c 01       	movw	r0, r24
    321e:	ca 01       	movw	r24, r20
    3220:	a0 01       	movw	r20, r0
    3222:	11 24       	eor	r1, r1
    3224:	ff 27       	eor	r31, r31
    3226:	59 1b       	sub	r21, r25
    3228:	99 f0       	breq	.+38     	; 0x3250 <__addsf3x+0x60>
    322a:	59 3f       	cpi	r21, 0xF9	; 249
    322c:	50 f4       	brcc	.+20     	; 0x3242 <__addsf3x+0x52>
    322e:	50 3e       	cpi	r21, 0xE0	; 224
    3230:	68 f1       	brcs	.+90     	; 0x328c <__addsf3x+0x9c>
    3232:	1a 16       	cp	r1, r26
    3234:	f0 40       	sbci	r31, 0x00	; 0
    3236:	a2 2f       	mov	r26, r18
    3238:	23 2f       	mov	r18, r19
    323a:	34 2f       	mov	r19, r20
    323c:	44 27       	eor	r20, r20
    323e:	58 5f       	subi	r21, 0xF8	; 248
    3240:	f3 cf       	rjmp	.-26     	; 0x3228 <__addsf3x+0x38>
    3242:	46 95       	lsr	r20
    3244:	37 95       	ror	r19
    3246:	27 95       	ror	r18
    3248:	a7 95       	ror	r26
    324a:	f0 40       	sbci	r31, 0x00	; 0
    324c:	53 95       	inc	r21
    324e:	c9 f7       	brne	.-14     	; 0x3242 <__addsf3x+0x52>
    3250:	7e f4       	brtc	.+30     	; 0x3270 <__addsf3x+0x80>
    3252:	1f 16       	cp	r1, r31
    3254:	ba 0b       	sbc	r27, r26
    3256:	62 0b       	sbc	r22, r18
    3258:	73 0b       	sbc	r23, r19
    325a:	84 0b       	sbc	r24, r20
    325c:	ba f0       	brmi	.+46     	; 0x328c <__addsf3x+0x9c>
    325e:	91 50       	subi	r25, 0x01	; 1
    3260:	a1 f0       	breq	.+40     	; 0x328a <__addsf3x+0x9a>
    3262:	ff 0f       	add	r31, r31
    3264:	bb 1f       	adc	r27, r27
    3266:	66 1f       	adc	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	c2 f7       	brpl	.-16     	; 0x325e <__addsf3x+0x6e>
    326e:	0e c0       	rjmp	.+28     	; 0x328c <__addsf3x+0x9c>
    3270:	ba 0f       	add	r27, r26
    3272:	62 1f       	adc	r22, r18
    3274:	73 1f       	adc	r23, r19
    3276:	84 1f       	adc	r24, r20
    3278:	48 f4       	brcc	.+18     	; 0x328c <__addsf3x+0x9c>
    327a:	87 95       	ror	r24
    327c:	77 95       	ror	r23
    327e:	67 95       	ror	r22
    3280:	b7 95       	ror	r27
    3282:	f7 95       	ror	r31
    3284:	9e 3f       	cpi	r25, 0xFE	; 254
    3286:	08 f0       	brcs	.+2      	; 0x328a <__addsf3x+0x9a>
    3288:	b0 cf       	rjmp	.-160    	; 0x31ea <__addsf3+0x28>
    328a:	93 95       	inc	r25
    328c:	88 0f       	add	r24, r24
    328e:	08 f0       	brcs	.+2      	; 0x3292 <__addsf3x+0xa2>
    3290:	99 27       	eor	r25, r25
    3292:	ee 0f       	add	r30, r30
    3294:	97 95       	ror	r25
    3296:	87 95       	ror	r24
    3298:	08 95       	ret

0000329a <__divsf3>:
    329a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__divsf3x>
    329e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__fp_round>
    32a2:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__fp_pscB>
    32a6:	58 f0       	brcs	.+22     	; 0x32be <__divsf3+0x24>
    32a8:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_pscA>
    32ac:	40 f0       	brcs	.+16     	; 0x32be <__divsf3+0x24>
    32ae:	29 f4       	brne	.+10     	; 0x32ba <__divsf3+0x20>
    32b0:	5f 3f       	cpi	r21, 0xFF	; 255
    32b2:	29 f0       	breq	.+10     	; 0x32be <__divsf3+0x24>
    32b4:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    32b8:	51 11       	cpse	r21, r1
    32ba:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>
    32be:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>

000032c2 <__divsf3x>:
    32c2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__fp_split3>
    32c6:	68 f3       	brcs	.-38     	; 0x32a2 <__divsf3+0x8>

000032c8 <__divsf3_pse>:
    32c8:	99 23       	and	r25, r25
    32ca:	b1 f3       	breq	.-20     	; 0x32b8 <__divsf3+0x1e>
    32cc:	55 23       	and	r21, r21
    32ce:	91 f3       	breq	.-28     	; 0x32b4 <__divsf3+0x1a>
    32d0:	95 1b       	sub	r25, r21
    32d2:	55 0b       	sbc	r21, r21
    32d4:	bb 27       	eor	r27, r27
    32d6:	aa 27       	eor	r26, r26
    32d8:	62 17       	cp	r22, r18
    32da:	73 07       	cpc	r23, r19
    32dc:	84 07       	cpc	r24, r20
    32de:	38 f0       	brcs	.+14     	; 0x32ee <__divsf3_pse+0x26>
    32e0:	9f 5f       	subi	r25, 0xFF	; 255
    32e2:	5f 4f       	sbci	r21, 0xFF	; 255
    32e4:	22 0f       	add	r18, r18
    32e6:	33 1f       	adc	r19, r19
    32e8:	44 1f       	adc	r20, r20
    32ea:	aa 1f       	adc	r26, r26
    32ec:	a9 f3       	breq	.-22     	; 0x32d8 <__divsf3_pse+0x10>
    32ee:	35 d0       	rcall	.+106    	; 0x335a <__divsf3_pse+0x92>
    32f0:	0e 2e       	mov	r0, r30
    32f2:	3a f0       	brmi	.+14     	; 0x3302 <__divsf3_pse+0x3a>
    32f4:	e0 e8       	ldi	r30, 0x80	; 128
    32f6:	32 d0       	rcall	.+100    	; 0x335c <__divsf3_pse+0x94>
    32f8:	91 50       	subi	r25, 0x01	; 1
    32fa:	50 40       	sbci	r21, 0x00	; 0
    32fc:	e6 95       	lsr	r30
    32fe:	00 1c       	adc	r0, r0
    3300:	ca f7       	brpl	.-14     	; 0x32f4 <__divsf3_pse+0x2c>
    3302:	2b d0       	rcall	.+86     	; 0x335a <__divsf3_pse+0x92>
    3304:	fe 2f       	mov	r31, r30
    3306:	29 d0       	rcall	.+82     	; 0x335a <__divsf3_pse+0x92>
    3308:	66 0f       	add	r22, r22
    330a:	77 1f       	adc	r23, r23
    330c:	88 1f       	adc	r24, r24
    330e:	bb 1f       	adc	r27, r27
    3310:	26 17       	cp	r18, r22
    3312:	37 07       	cpc	r19, r23
    3314:	48 07       	cpc	r20, r24
    3316:	ab 07       	cpc	r26, r27
    3318:	b0 e8       	ldi	r27, 0x80	; 128
    331a:	09 f0       	breq	.+2      	; 0x331e <__divsf3_pse+0x56>
    331c:	bb 0b       	sbc	r27, r27
    331e:	80 2d       	mov	r24, r0
    3320:	bf 01       	movw	r22, r30
    3322:	ff 27       	eor	r31, r31
    3324:	93 58       	subi	r25, 0x83	; 131
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	3a f0       	brmi	.+14     	; 0x3338 <__divsf3_pse+0x70>
    332a:	9e 3f       	cpi	r25, 0xFE	; 254
    332c:	51 05       	cpc	r21, r1
    332e:	78 f0       	brcs	.+30     	; 0x334e <__divsf3_pse+0x86>
    3330:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    3334:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>
    3338:	5f 3f       	cpi	r21, 0xFF	; 255
    333a:	e4 f3       	brlt	.-8      	; 0x3334 <__divsf3_pse+0x6c>
    333c:	98 3e       	cpi	r25, 0xE8	; 232
    333e:	d4 f3       	brlt	.-12     	; 0x3334 <__divsf3_pse+0x6c>
    3340:	86 95       	lsr	r24
    3342:	77 95       	ror	r23
    3344:	67 95       	ror	r22
    3346:	b7 95       	ror	r27
    3348:	f7 95       	ror	r31
    334a:	9f 5f       	subi	r25, 0xFF	; 255
    334c:	c9 f7       	brne	.-14     	; 0x3340 <__divsf3_pse+0x78>
    334e:	88 0f       	add	r24, r24
    3350:	91 1d       	adc	r25, r1
    3352:	96 95       	lsr	r25
    3354:	87 95       	ror	r24
    3356:	97 f9       	bld	r25, 7
    3358:	08 95       	ret
    335a:	e1 e0       	ldi	r30, 0x01	; 1
    335c:	66 0f       	add	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	88 1f       	adc	r24, r24
    3362:	bb 1f       	adc	r27, r27
    3364:	62 17       	cp	r22, r18
    3366:	73 07       	cpc	r23, r19
    3368:	84 07       	cpc	r24, r20
    336a:	ba 07       	cpc	r27, r26
    336c:	20 f0       	brcs	.+8      	; 0x3376 <__divsf3_pse+0xae>
    336e:	62 1b       	sub	r22, r18
    3370:	73 0b       	sbc	r23, r19
    3372:	84 0b       	sbc	r24, r20
    3374:	ba 0b       	sbc	r27, r26
    3376:	ee 1f       	adc	r30, r30
    3378:	88 f7       	brcc	.-30     	; 0x335c <__divsf3_pse+0x94>
    337a:	e0 95       	com	r30
    337c:	08 95       	ret

0000337e <__fixsfsi>:
    337e:	0e 94 c6 19 	call	0x338c	; 0x338c <__fixunssfsi>
    3382:	68 94       	set
    3384:	b1 11       	cpse	r27, r1
    3386:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>
    338a:	08 95       	ret

0000338c <__fixunssfsi>:
    338c:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_splitA>
    3390:	88 f0       	brcs	.+34     	; 0x33b4 <__fixunssfsi+0x28>
    3392:	9f 57       	subi	r25, 0x7F	; 127
    3394:	98 f0       	brcs	.+38     	; 0x33bc <__fixunssfsi+0x30>
    3396:	b9 2f       	mov	r27, r25
    3398:	99 27       	eor	r25, r25
    339a:	b7 51       	subi	r27, 0x17	; 23
    339c:	b0 f0       	brcs	.+44     	; 0x33ca <__fixunssfsi+0x3e>
    339e:	e1 f0       	breq	.+56     	; 0x33d8 <__fixunssfsi+0x4c>
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	1a f0       	brmi	.+6      	; 0x33b0 <__fixunssfsi+0x24>
    33aa:	ba 95       	dec	r27
    33ac:	c9 f7       	brne	.-14     	; 0x33a0 <__fixunssfsi+0x14>
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <__fixunssfsi+0x4c>
    33b0:	b1 30       	cpi	r27, 0x01	; 1
    33b2:	91 f0       	breq	.+36     	; 0x33d8 <__fixunssfsi+0x4c>
    33b4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__fp_zero>
    33b8:	b1 e0       	ldi	r27, 0x01	; 1
    33ba:	08 95       	ret
    33bc:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__fp_zero>
    33c0:	67 2f       	mov	r22, r23
    33c2:	78 2f       	mov	r23, r24
    33c4:	88 27       	eor	r24, r24
    33c6:	b8 5f       	subi	r27, 0xF8	; 248
    33c8:	39 f0       	breq	.+14     	; 0x33d8 <__fixunssfsi+0x4c>
    33ca:	b9 3f       	cpi	r27, 0xF9	; 249
    33cc:	cc f3       	brlt	.-14     	; 0x33c0 <__fixunssfsi+0x34>
    33ce:	86 95       	lsr	r24
    33d0:	77 95       	ror	r23
    33d2:	67 95       	ror	r22
    33d4:	b3 95       	inc	r27
    33d6:	d9 f7       	brne	.-10     	; 0x33ce <__fixunssfsi+0x42>
    33d8:	3e f4       	brtc	.+14     	; 0x33e8 <__fixunssfsi+0x5c>
    33da:	90 95       	com	r25
    33dc:	80 95       	com	r24
    33de:	70 95       	com	r23
    33e0:	61 95       	neg	r22
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	8f 4f       	sbci	r24, 0xFF	; 255
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	08 95       	ret

000033ea <__floatunsisf>:
    33ea:	e8 94       	clt
    33ec:	09 c0       	rjmp	.+18     	; 0x3400 <__floatsisf+0x12>

000033ee <__floatsisf>:
    33ee:	97 fb       	bst	r25, 7
    33f0:	3e f4       	brtc	.+14     	; 0x3400 <__floatsisf+0x12>
    33f2:	90 95       	com	r25
    33f4:	80 95       	com	r24
    33f6:	70 95       	com	r23
    33f8:	61 95       	neg	r22
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	99 23       	and	r25, r25
    3402:	a9 f0       	breq	.+42     	; 0x342e <__floatsisf+0x40>
    3404:	f9 2f       	mov	r31, r25
    3406:	96 e9       	ldi	r25, 0x96	; 150
    3408:	bb 27       	eor	r27, r27
    340a:	93 95       	inc	r25
    340c:	f6 95       	lsr	r31
    340e:	87 95       	ror	r24
    3410:	77 95       	ror	r23
    3412:	67 95       	ror	r22
    3414:	b7 95       	ror	r27
    3416:	f1 11       	cpse	r31, r1
    3418:	f8 cf       	rjmp	.-16     	; 0x340a <__floatsisf+0x1c>
    341a:	fa f4       	brpl	.+62     	; 0x345a <__floatsisf+0x6c>
    341c:	bb 0f       	add	r27, r27
    341e:	11 f4       	brne	.+4      	; 0x3424 <__floatsisf+0x36>
    3420:	60 ff       	sbrs	r22, 0
    3422:	1b c0       	rjmp	.+54     	; 0x345a <__floatsisf+0x6c>
    3424:	6f 5f       	subi	r22, 0xFF	; 255
    3426:	7f 4f       	sbci	r23, 0xFF	; 255
    3428:	8f 4f       	sbci	r24, 0xFF	; 255
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	16 c0       	rjmp	.+44     	; 0x345a <__floatsisf+0x6c>
    342e:	88 23       	and	r24, r24
    3430:	11 f0       	breq	.+4      	; 0x3436 <__floatsisf+0x48>
    3432:	96 e9       	ldi	r25, 0x96	; 150
    3434:	11 c0       	rjmp	.+34     	; 0x3458 <__floatsisf+0x6a>
    3436:	77 23       	and	r23, r23
    3438:	21 f0       	breq	.+8      	; 0x3442 <__floatsisf+0x54>
    343a:	9e e8       	ldi	r25, 0x8E	; 142
    343c:	87 2f       	mov	r24, r23
    343e:	76 2f       	mov	r23, r22
    3440:	05 c0       	rjmp	.+10     	; 0x344c <__floatsisf+0x5e>
    3442:	66 23       	and	r22, r22
    3444:	71 f0       	breq	.+28     	; 0x3462 <__floatsisf+0x74>
    3446:	96 e8       	ldi	r25, 0x86	; 134
    3448:	86 2f       	mov	r24, r22
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	2a f0       	brmi	.+10     	; 0x345a <__floatsisf+0x6c>
    3450:	9a 95       	dec	r25
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	88 1f       	adc	r24, r24
    3458:	da f7       	brpl	.-10     	; 0x3450 <__floatsisf+0x62>
    345a:	88 0f       	add	r24, r24
    345c:	96 95       	lsr	r25
    345e:	87 95       	ror	r24
    3460:	97 f9       	bld	r25, 7
    3462:	08 95       	ret

00003464 <__fp_cmp>:
    3464:	99 0f       	add	r25, r25
    3466:	00 08       	sbc	r0, r0
    3468:	55 0f       	add	r21, r21
    346a:	aa 0b       	sbc	r26, r26
    346c:	e0 e8       	ldi	r30, 0x80	; 128
    346e:	fe ef       	ldi	r31, 0xFE	; 254
    3470:	16 16       	cp	r1, r22
    3472:	17 06       	cpc	r1, r23
    3474:	e8 07       	cpc	r30, r24
    3476:	f9 07       	cpc	r31, r25
    3478:	c0 f0       	brcs	.+48     	; 0x34aa <__fp_cmp+0x46>
    347a:	12 16       	cp	r1, r18
    347c:	13 06       	cpc	r1, r19
    347e:	e4 07       	cpc	r30, r20
    3480:	f5 07       	cpc	r31, r21
    3482:	98 f0       	brcs	.+38     	; 0x34aa <__fp_cmp+0x46>
    3484:	62 1b       	sub	r22, r18
    3486:	73 0b       	sbc	r23, r19
    3488:	84 0b       	sbc	r24, r20
    348a:	95 0b       	sbc	r25, r21
    348c:	39 f4       	brne	.+14     	; 0x349c <__fp_cmp+0x38>
    348e:	0a 26       	eor	r0, r26
    3490:	61 f0       	breq	.+24     	; 0x34aa <__fp_cmp+0x46>
    3492:	23 2b       	or	r18, r19
    3494:	24 2b       	or	r18, r20
    3496:	25 2b       	or	r18, r21
    3498:	21 f4       	brne	.+8      	; 0x34a2 <__fp_cmp+0x3e>
    349a:	08 95       	ret
    349c:	0a 26       	eor	r0, r26
    349e:	09 f4       	brne	.+2      	; 0x34a2 <__fp_cmp+0x3e>
    34a0:	a1 40       	sbci	r26, 0x01	; 1
    34a2:	a6 95       	lsr	r26
    34a4:	8f ef       	ldi	r24, 0xFF	; 255
    34a6:	81 1d       	adc	r24, r1
    34a8:	81 1d       	adc	r24, r1
    34aa:	08 95       	ret

000034ac <__fp_inf>:
    34ac:	97 f9       	bld	r25, 7
    34ae:	9f 67       	ori	r25, 0x7F	; 127
    34b0:	80 e8       	ldi	r24, 0x80	; 128
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	08 95       	ret

000034b8 <__fp_nan>:
    34b8:	9f ef       	ldi	r25, 0xFF	; 255
    34ba:	80 ec       	ldi	r24, 0xC0	; 192
    34bc:	08 95       	ret

000034be <__fp_pscA>:
    34be:	00 24       	eor	r0, r0
    34c0:	0a 94       	dec	r0
    34c2:	16 16       	cp	r1, r22
    34c4:	17 06       	cpc	r1, r23
    34c6:	18 06       	cpc	r1, r24
    34c8:	09 06       	cpc	r0, r25
    34ca:	08 95       	ret

000034cc <__fp_pscB>:
    34cc:	00 24       	eor	r0, r0
    34ce:	0a 94       	dec	r0
    34d0:	12 16       	cp	r1, r18
    34d2:	13 06       	cpc	r1, r19
    34d4:	14 06       	cpc	r1, r20
    34d6:	05 06       	cpc	r0, r21
    34d8:	08 95       	ret

000034da <__fp_round>:
    34da:	09 2e       	mov	r0, r25
    34dc:	03 94       	inc	r0
    34de:	00 0c       	add	r0, r0
    34e0:	11 f4       	brne	.+4      	; 0x34e6 <__fp_round+0xc>
    34e2:	88 23       	and	r24, r24
    34e4:	52 f0       	brmi	.+20     	; 0x34fa <__fp_round+0x20>
    34e6:	bb 0f       	add	r27, r27
    34e8:	40 f4       	brcc	.+16     	; 0x34fa <__fp_round+0x20>
    34ea:	bf 2b       	or	r27, r31
    34ec:	11 f4       	brne	.+4      	; 0x34f2 <__fp_round+0x18>
    34ee:	60 ff       	sbrs	r22, 0
    34f0:	04 c0       	rjmp	.+8      	; 0x34fa <__fp_round+0x20>
    34f2:	6f 5f       	subi	r22, 0xFF	; 255
    34f4:	7f 4f       	sbci	r23, 0xFF	; 255
    34f6:	8f 4f       	sbci	r24, 0xFF	; 255
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	08 95       	ret

000034fc <__fp_split3>:
    34fc:	57 fd       	sbrc	r21, 7
    34fe:	90 58       	subi	r25, 0x80	; 128
    3500:	44 0f       	add	r20, r20
    3502:	55 1f       	adc	r21, r21
    3504:	59 f0       	breq	.+22     	; 0x351c <__fp_splitA+0x10>
    3506:	5f 3f       	cpi	r21, 0xFF	; 255
    3508:	71 f0       	breq	.+28     	; 0x3526 <__fp_splitA+0x1a>
    350a:	47 95       	ror	r20

0000350c <__fp_splitA>:
    350c:	88 0f       	add	r24, r24
    350e:	97 fb       	bst	r25, 7
    3510:	99 1f       	adc	r25, r25
    3512:	61 f0       	breq	.+24     	; 0x352c <__fp_splitA+0x20>
    3514:	9f 3f       	cpi	r25, 0xFF	; 255
    3516:	79 f0       	breq	.+30     	; 0x3536 <__fp_splitA+0x2a>
    3518:	87 95       	ror	r24
    351a:	08 95       	ret
    351c:	12 16       	cp	r1, r18
    351e:	13 06       	cpc	r1, r19
    3520:	14 06       	cpc	r1, r20
    3522:	55 1f       	adc	r21, r21
    3524:	f2 cf       	rjmp	.-28     	; 0x350a <__fp_split3+0xe>
    3526:	46 95       	lsr	r20
    3528:	f1 df       	rcall	.-30     	; 0x350c <__fp_splitA>
    352a:	08 c0       	rjmp	.+16     	; 0x353c <__fp_splitA+0x30>
    352c:	16 16       	cp	r1, r22
    352e:	17 06       	cpc	r1, r23
    3530:	18 06       	cpc	r1, r24
    3532:	99 1f       	adc	r25, r25
    3534:	f1 cf       	rjmp	.-30     	; 0x3518 <__fp_splitA+0xc>
    3536:	86 95       	lsr	r24
    3538:	71 05       	cpc	r23, r1
    353a:	61 05       	cpc	r22, r1
    353c:	08 94       	sec
    353e:	08 95       	ret

00003540 <__fp_zero>:
    3540:	e8 94       	clt

00003542 <__fp_szero>:
    3542:	bb 27       	eor	r27, r27
    3544:	66 27       	eor	r22, r22
    3546:	77 27       	eor	r23, r23
    3548:	cb 01       	movw	r24, r22
    354a:	97 f9       	bld	r25, 7
    354c:	08 95       	ret

0000354e <__gesf2>:
    354e:	0e 94 32 1a 	call	0x3464	; 0x3464 <__fp_cmp>
    3552:	08 f4       	brcc	.+2      	; 0x3556 <__gesf2+0x8>
    3554:	8f ef       	ldi	r24, 0xFF	; 255
    3556:	08 95       	ret

00003558 <__mulsf3>:
    3558:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3x>
    355c:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__fp_round>
    3560:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_pscA>
    3564:	38 f0       	brcs	.+14     	; 0x3574 <__mulsf3+0x1c>
    3566:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__fp_pscB>
    356a:	20 f0       	brcs	.+8      	; 0x3574 <__mulsf3+0x1c>
    356c:	95 23       	and	r25, r21
    356e:	11 f0       	breq	.+4      	; 0x3574 <__mulsf3+0x1c>
    3570:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    3574:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>
    3578:	11 24       	eor	r1, r1
    357a:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>

0000357e <__mulsf3x>:
    357e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__fp_split3>
    3582:	70 f3       	brcs	.-36     	; 0x3560 <__mulsf3+0x8>

00003584 <__mulsf3_pse>:
    3584:	95 9f       	mul	r25, r21
    3586:	c1 f3       	breq	.-16     	; 0x3578 <__mulsf3+0x20>
    3588:	95 0f       	add	r25, r21
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	55 1f       	adc	r21, r21
    358e:	62 9f       	mul	r22, r18
    3590:	f0 01       	movw	r30, r0
    3592:	72 9f       	mul	r23, r18
    3594:	bb 27       	eor	r27, r27
    3596:	f0 0d       	add	r31, r0
    3598:	b1 1d       	adc	r27, r1
    359a:	63 9f       	mul	r22, r19
    359c:	aa 27       	eor	r26, r26
    359e:	f0 0d       	add	r31, r0
    35a0:	b1 1d       	adc	r27, r1
    35a2:	aa 1f       	adc	r26, r26
    35a4:	64 9f       	mul	r22, r20
    35a6:	66 27       	eor	r22, r22
    35a8:	b0 0d       	add	r27, r0
    35aa:	a1 1d       	adc	r26, r1
    35ac:	66 1f       	adc	r22, r22
    35ae:	82 9f       	mul	r24, r18
    35b0:	22 27       	eor	r18, r18
    35b2:	b0 0d       	add	r27, r0
    35b4:	a1 1d       	adc	r26, r1
    35b6:	62 1f       	adc	r22, r18
    35b8:	73 9f       	mul	r23, r19
    35ba:	b0 0d       	add	r27, r0
    35bc:	a1 1d       	adc	r26, r1
    35be:	62 1f       	adc	r22, r18
    35c0:	83 9f       	mul	r24, r19
    35c2:	a0 0d       	add	r26, r0
    35c4:	61 1d       	adc	r22, r1
    35c6:	22 1f       	adc	r18, r18
    35c8:	74 9f       	mul	r23, r20
    35ca:	33 27       	eor	r19, r19
    35cc:	a0 0d       	add	r26, r0
    35ce:	61 1d       	adc	r22, r1
    35d0:	23 1f       	adc	r18, r19
    35d2:	84 9f       	mul	r24, r20
    35d4:	60 0d       	add	r22, r0
    35d6:	21 1d       	adc	r18, r1
    35d8:	82 2f       	mov	r24, r18
    35da:	76 2f       	mov	r23, r22
    35dc:	6a 2f       	mov	r22, r26
    35de:	11 24       	eor	r1, r1
    35e0:	9f 57       	subi	r25, 0x7F	; 127
    35e2:	50 40       	sbci	r21, 0x00	; 0
    35e4:	9a f0       	brmi	.+38     	; 0x360c <__mulsf3_pse+0x88>
    35e6:	f1 f0       	breq	.+60     	; 0x3624 <__mulsf3_pse+0xa0>
    35e8:	88 23       	and	r24, r24
    35ea:	4a f0       	brmi	.+18     	; 0x35fe <__mulsf3_pse+0x7a>
    35ec:	ee 0f       	add	r30, r30
    35ee:	ff 1f       	adc	r31, r31
    35f0:	bb 1f       	adc	r27, r27
    35f2:	66 1f       	adc	r22, r22
    35f4:	77 1f       	adc	r23, r23
    35f6:	88 1f       	adc	r24, r24
    35f8:	91 50       	subi	r25, 0x01	; 1
    35fa:	50 40       	sbci	r21, 0x00	; 0
    35fc:	a9 f7       	brne	.-22     	; 0x35e8 <__mulsf3_pse+0x64>
    35fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3600:	51 05       	cpc	r21, r1
    3602:	80 f0       	brcs	.+32     	; 0x3624 <__mulsf3_pse+0xa0>
    3604:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    3608:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>
    360c:	5f 3f       	cpi	r21, 0xFF	; 255
    360e:	e4 f3       	brlt	.-8      	; 0x3608 <__mulsf3_pse+0x84>
    3610:	98 3e       	cpi	r25, 0xE8	; 232
    3612:	d4 f3       	brlt	.-12     	; 0x3608 <__mulsf3_pse+0x84>
    3614:	86 95       	lsr	r24
    3616:	77 95       	ror	r23
    3618:	67 95       	ror	r22
    361a:	b7 95       	ror	r27
    361c:	f7 95       	ror	r31
    361e:	e7 95       	ror	r30
    3620:	9f 5f       	subi	r25, 0xFF	; 255
    3622:	c1 f7       	brne	.-16     	; 0x3614 <__mulsf3_pse+0x90>
    3624:	fe 2b       	or	r31, r30
    3626:	88 0f       	add	r24, r24
    3628:	91 1d       	adc	r25, r1
    362a:	96 95       	lsr	r25
    362c:	87 95       	ror	r24
    362e:	97 f9       	bld	r25, 7
    3630:	08 95       	ret

00003632 <pow>:
    3632:	fa 01       	movw	r30, r20
    3634:	ee 0f       	add	r30, r30
    3636:	ff 1f       	adc	r31, r31
    3638:	30 96       	adiw	r30, 0x00	; 0
    363a:	21 05       	cpc	r18, r1
    363c:	31 05       	cpc	r19, r1
    363e:	a1 f1       	breq	.+104    	; 0x36a8 <pow+0x76>
    3640:	61 15       	cp	r22, r1
    3642:	71 05       	cpc	r23, r1
    3644:	61 f4       	brne	.+24     	; 0x365e <pow+0x2c>
    3646:	80 38       	cpi	r24, 0x80	; 128
    3648:	bf e3       	ldi	r27, 0x3F	; 63
    364a:	9b 07       	cpc	r25, r27
    364c:	49 f1       	breq	.+82     	; 0x36a0 <pow+0x6e>
    364e:	68 94       	set
    3650:	90 38       	cpi	r25, 0x80	; 128
    3652:	81 05       	cpc	r24, r1
    3654:	61 f0       	breq	.+24     	; 0x366e <pow+0x3c>
    3656:	80 38       	cpi	r24, 0x80	; 128
    3658:	bf ef       	ldi	r27, 0xFF	; 255
    365a:	9b 07       	cpc	r25, r27
    365c:	41 f0       	breq	.+16     	; 0x366e <pow+0x3c>
    365e:	99 23       	and	r25, r25
    3660:	4a f5       	brpl	.+82     	; 0x36b4 <pow+0x82>
    3662:	ff 3f       	cpi	r31, 0xFF	; 255
    3664:	e1 05       	cpc	r30, r1
    3666:	31 05       	cpc	r19, r1
    3668:	21 05       	cpc	r18, r1
    366a:	19 f1       	breq	.+70     	; 0x36b2 <pow+0x80>
    366c:	e8 94       	clt
    366e:	08 94       	sec
    3670:	e7 95       	ror	r30
    3672:	d9 01       	movw	r26, r18
    3674:	aa 23       	and	r26, r26
    3676:	29 f4       	brne	.+10     	; 0x3682 <pow+0x50>
    3678:	ab 2f       	mov	r26, r27
    367a:	be 2f       	mov	r27, r30
    367c:	f8 5f       	subi	r31, 0xF8	; 248
    367e:	d0 f3       	brcs	.-12     	; 0x3674 <pow+0x42>
    3680:	10 c0       	rjmp	.+32     	; 0x36a2 <pow+0x70>
    3682:	ff 5f       	subi	r31, 0xFF	; 255
    3684:	70 f4       	brcc	.+28     	; 0x36a2 <pow+0x70>
    3686:	a6 95       	lsr	r26
    3688:	e0 f7       	brcc	.-8      	; 0x3682 <pow+0x50>
    368a:	f7 39       	cpi	r31, 0x97	; 151
    368c:	50 f0       	brcs	.+20     	; 0x36a2 <pow+0x70>
    368e:	19 f0       	breq	.+6      	; 0x3696 <pow+0x64>
    3690:	ff 3a       	cpi	r31, 0xAF	; 175
    3692:	38 f4       	brcc	.+14     	; 0x36a2 <pow+0x70>
    3694:	9f 77       	andi	r25, 0x7F	; 127
    3696:	9f 93       	push	r25
    3698:	0d d0       	rcall	.+26     	; 0x36b4 <pow+0x82>
    369a:	0f 90       	pop	r0
    369c:	07 fc       	sbrc	r0, 7
    369e:	90 58       	subi	r25, 0x80	; 128
    36a0:	08 95       	ret
    36a2:	46 f0       	brts	.+16     	; 0x36b4 <pow+0x82>
    36a4:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>
    36a8:	60 e0       	ldi	r22, 0x00	; 0
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	80 e8       	ldi	r24, 0x80	; 128
    36ae:	9f e3       	ldi	r25, 0x3F	; 63
    36b0:	08 95       	ret
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	9f 77       	andi	r25, 0x7F	; 127
    36b6:	5f 93       	push	r21
    36b8:	4f 93       	push	r20
    36ba:	3f 93       	push	r19
    36bc:	2f 93       	push	r18
    36be:	0e 94 14 1c 	call	0x3828	; 0x3828 <log>
    36c2:	2f 91       	pop	r18
    36c4:	3f 91       	pop	r19
    36c6:	4f 91       	pop	r20
    36c8:	5f 91       	pop	r21
    36ca:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__mulsf3>
    36ce:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <exp>
    36d2:	29 f4       	brne	.+10     	; 0x36de <pow+0xac>
    36d4:	16 f0       	brts	.+4      	; 0x36da <pow+0xa8>
    36d6:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    36da:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__fp_zero>
    36de:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>

000036e2 <exp>:
    36e2:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_splitA>
    36e6:	a8 f3       	brcs	.-22     	; 0x36d2 <pow+0xa0>
    36e8:	96 38       	cpi	r25, 0x86	; 134
    36ea:	a0 f7       	brcc	.-24     	; 0x36d4 <pow+0xa2>
    36ec:	07 f8       	bld	r0, 7
    36ee:	0f 92       	push	r0
    36f0:	e8 94       	clt
    36f2:	2b e3       	ldi	r18, 0x3B	; 59
    36f4:	3a ea       	ldi	r19, 0xAA	; 170
    36f6:	48 eb       	ldi	r20, 0xB8	; 184
    36f8:	5f e7       	ldi	r21, 0x7F	; 127
    36fa:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__mulsf3_pse>
    36fe:	0f 92       	push	r0
    3700:	0f 92       	push	r0
    3702:	0f 92       	push	r0
    3704:	4d b7       	in	r20, 0x3d	; 61
    3706:	5e b7       	in	r21, 0x3e	; 62
    3708:	0f 92       	push	r0
    370a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <modf>
    370e:	e2 e5       	ldi	r30, 0x52	; 82
    3710:	f2 e0       	ldi	r31, 0x02	; 2
    3712:	0e 94 a3 1b 	call	0x3746	; 0x3746 <__fp_powser>
    3716:	4f 91       	pop	r20
    3718:	5f 91       	pop	r21
    371a:	ef 91       	pop	r30
    371c:	ff 91       	pop	r31
    371e:	e5 95       	asr	r30
    3720:	ee 1f       	adc	r30, r30
    3722:	ff 1f       	adc	r31, r31
    3724:	49 f0       	breq	.+18     	; 0x3738 <exp+0x56>
    3726:	fe 57       	subi	r31, 0x7E	; 126
    3728:	e0 68       	ori	r30, 0x80	; 128
    372a:	44 27       	eor	r20, r20
    372c:	ee 0f       	add	r30, r30
    372e:	44 1f       	adc	r20, r20
    3730:	fa 95       	dec	r31
    3732:	e1 f7       	brne	.-8      	; 0x372c <exp+0x4a>
    3734:	41 95       	neg	r20
    3736:	55 0b       	sbc	r21, r21
    3738:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <ldexp>
    373c:	0f 90       	pop	r0
    373e:	07 fe       	sbrs	r0, 7
    3740:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <inverse>
    3744:	08 95       	ret

00003746 <__fp_powser>:
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	1f 93       	push	r17
    374c:	0f 93       	push	r16
    374e:	ff 92       	push	r15
    3750:	ef 92       	push	r14
    3752:	df 92       	push	r13
    3754:	7b 01       	movw	r14, r22
    3756:	8c 01       	movw	r16, r24
    3758:	68 94       	set
    375a:	06 c0       	rjmp	.+12     	; 0x3768 <__fp_powser+0x22>
    375c:	da 2e       	mov	r13, r26
    375e:	ef 01       	movw	r28, r30
    3760:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3x>
    3764:	fe 01       	movw	r30, r28
    3766:	e8 94       	clt
    3768:	a5 91       	lpm	r26, Z+
    376a:	25 91       	lpm	r18, Z+
    376c:	35 91       	lpm	r19, Z+
    376e:	45 91       	lpm	r20, Z+
    3770:	55 91       	lpm	r21, Z+
    3772:	a6 f3       	brts	.-24     	; 0x375c <__fp_powser+0x16>
    3774:	ef 01       	movw	r28, r30
    3776:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__addsf3x>
    377a:	fe 01       	movw	r30, r28
    377c:	97 01       	movw	r18, r14
    377e:	a8 01       	movw	r20, r16
    3780:	da 94       	dec	r13
    3782:	69 f7       	brne	.-38     	; 0x375e <__fp_powser+0x18>
    3784:	df 90       	pop	r13
    3786:	ef 90       	pop	r14
    3788:	ff 90       	pop	r15
    378a:	0f 91       	pop	r16
    378c:	1f 91       	pop	r17
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <inverse>:
    3794:	9b 01       	movw	r18, r22
    3796:	ac 01       	movw	r20, r24
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	80 e8       	ldi	r24, 0x80	; 128
    379e:	9f e3       	ldi	r25, 0x3F	; 63
    37a0:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__divsf3>
    37a4:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>
    37a8:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__fp_mpack>

000037ac <ldexp>:
    37ac:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_splitA>
    37b0:	d8 f3       	brcs	.-10     	; 0x37a8 <inverse+0x14>
    37b2:	99 23       	and	r25, r25
    37b4:	c9 f3       	breq	.-14     	; 0x37a8 <inverse+0x14>
    37b6:	94 0f       	add	r25, r20
    37b8:	51 1d       	adc	r21, r1
    37ba:	a3 f3       	brvs	.-24     	; 0x37a4 <inverse+0x10>
    37bc:	91 50       	subi	r25, 0x01	; 1
    37be:	50 40       	sbci	r21, 0x00	; 0
    37c0:	94 f0       	brlt	.+36     	; 0x37e6 <ldexp+0x3a>
    37c2:	59 f0       	breq	.+22     	; 0x37da <ldexp+0x2e>
    37c4:	88 23       	and	r24, r24
    37c6:	32 f0       	brmi	.+12     	; 0x37d4 <ldexp+0x28>
    37c8:	66 0f       	add	r22, r22
    37ca:	77 1f       	adc	r23, r23
    37cc:	88 1f       	adc	r24, r24
    37ce:	91 50       	subi	r25, 0x01	; 1
    37d0:	50 40       	sbci	r21, 0x00	; 0
    37d2:	c1 f7       	brne	.-16     	; 0x37c4 <ldexp+0x18>
    37d4:	9e 3f       	cpi	r25, 0xFE	; 254
    37d6:	51 05       	cpc	r21, r1
    37d8:	2c f7       	brge	.-54     	; 0x37a4 <inverse+0x10>
    37da:	88 0f       	add	r24, r24
    37dc:	91 1d       	adc	r25, r1
    37de:	96 95       	lsr	r25
    37e0:	87 95       	ror	r24
    37e2:	97 f9       	bld	r25, 7
    37e4:	08 95       	ret
    37e6:	5f 3f       	cpi	r21, 0xFF	; 255
    37e8:	ac f0       	brlt	.+42     	; 0x3814 <ldexp+0x68>
    37ea:	98 3e       	cpi	r25, 0xE8	; 232
    37ec:	9c f0       	brlt	.+38     	; 0x3814 <ldexp+0x68>
    37ee:	bb 27       	eor	r27, r27
    37f0:	86 95       	lsr	r24
    37f2:	77 95       	ror	r23
    37f4:	67 95       	ror	r22
    37f6:	b7 95       	ror	r27
    37f8:	08 f4       	brcc	.+2      	; 0x37fc <ldexp+0x50>
    37fa:	b1 60       	ori	r27, 0x01	; 1
    37fc:	93 95       	inc	r25
    37fe:	c1 f7       	brne	.-16     	; 0x37f0 <ldexp+0x44>
    3800:	bb 0f       	add	r27, r27
    3802:	58 f7       	brcc	.-42     	; 0x37da <ldexp+0x2e>
    3804:	11 f4       	brne	.+4      	; 0x380a <ldexp+0x5e>
    3806:	60 ff       	sbrs	r22, 0
    3808:	e8 cf       	rjmp	.-48     	; 0x37da <ldexp+0x2e>
    380a:	6f 5f       	subi	r22, 0xFF	; 255
    380c:	7f 4f       	sbci	r23, 0xFF	; 255
    380e:	8f 4f       	sbci	r24, 0xFF	; 255
    3810:	9f 4f       	sbci	r25, 0xFF	; 255
    3812:	e3 cf       	rjmp	.-58     	; 0x37da <ldexp+0x2e>
    3814:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_szero>
    3818:	16 f0       	brts	.+4      	; 0x381e <ldexp+0x72>
    381a:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__fp_mpack>
    381e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_nan>
    3822:	68 94       	set
    3824:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__fp_inf>

00003828 <log>:
    3828:	0e 94 86 1a 	call	0x350c	; 0x350c <__fp_splitA>
    382c:	a8 f3       	brcs	.-22     	; 0x3818 <ldexp+0x6c>
    382e:	99 23       	and	r25, r25
    3830:	c1 f3       	breq	.-16     	; 0x3822 <ldexp+0x76>
    3832:	ae f3       	brts	.-22     	; 0x381e <ldexp+0x72>
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	1f 93       	push	r17
    383a:	0f 93       	push	r16
    383c:	ff 92       	push	r15
    383e:	c9 2f       	mov	r28, r25
    3840:	dd 27       	eor	r29, r29
    3842:	88 23       	and	r24, r24
    3844:	2a f0       	brmi	.+10     	; 0x3850 <log+0x28>
    3846:	21 97       	sbiw	r28, 0x01	; 1
    3848:	66 0f       	add	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	88 1f       	adc	r24, r24
    384e:	da f7       	brpl	.-10     	; 0x3846 <log+0x1e>
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e8       	ldi	r20, 0x80	; 128
    3856:	5f eb       	ldi	r21, 0xBF	; 191
    3858:	9f e3       	ldi	r25, 0x3F	; 63
    385a:	88 39       	cpi	r24, 0x98	; 152
    385c:	20 f0       	brcs	.+8      	; 0x3866 <log+0x3e>
    385e:	80 3e       	cpi	r24, 0xE0	; 224
    3860:	38 f0       	brcs	.+14     	; 0x3870 <log+0x48>
    3862:	21 96       	adiw	r28, 0x01	; 1
    3864:	8f 77       	andi	r24, 0x7F	; 127
    3866:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__addsf3>
    386a:	ea e7       	ldi	r30, 0x7A	; 122
    386c:	f2 e0       	ldi	r31, 0x02	; 2
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <log+0x50>
    3870:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__addsf3>
    3874:	e7 ea       	ldi	r30, 0xA7	; 167
    3876:	f2 e0       	ldi	r31, 0x02	; 2
    3878:	0e 94 a3 1b 	call	0x3746	; 0x3746 <__fp_powser>
    387c:	8b 01       	movw	r16, r22
    387e:	be 01       	movw	r22, r28
    3880:	ec 01       	movw	r28, r24
    3882:	fb 2e       	mov	r15, r27
    3884:	6f 57       	subi	r22, 0x7F	; 127
    3886:	71 09       	sbc	r23, r1
    3888:	75 95       	asr	r23
    388a:	77 1f       	adc	r23, r23
    388c:	88 0b       	sbc	r24, r24
    388e:	99 0b       	sbc	r25, r25
    3890:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__floatsisf>
    3894:	28 e1       	ldi	r18, 0x18	; 24
    3896:	32 e7       	ldi	r19, 0x72	; 114
    3898:	41 e3       	ldi	r20, 0x31	; 49
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3x>
    38a0:	af 2d       	mov	r26, r15
    38a2:	98 01       	movw	r18, r16
    38a4:	ae 01       	movw	r20, r28
    38a6:	ff 90       	pop	r15
    38a8:	0f 91       	pop	r16
    38aa:	1f 91       	pop	r17
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <__addsf3x>
    38b4:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__fp_round>

000038b8 <modf>:
    38b8:	fa 01       	movw	r30, r20
    38ba:	dc 01       	movw	r26, r24
    38bc:	aa 0f       	add	r26, r26
    38be:	bb 1f       	adc	r27, r27
    38c0:	9b 01       	movw	r18, r22
    38c2:	ac 01       	movw	r20, r24
    38c4:	bf 57       	subi	r27, 0x7F	; 127
    38c6:	28 f4       	brcc	.+10     	; 0x38d2 <modf+0x1a>
    38c8:	22 27       	eor	r18, r18
    38ca:	33 27       	eor	r19, r19
    38cc:	44 27       	eor	r20, r20
    38ce:	50 78       	andi	r21, 0x80	; 128
    38d0:	20 c0       	rjmp	.+64     	; 0x3912 <modf+0x5a>
    38d2:	b7 51       	subi	r27, 0x17	; 23
    38d4:	90 f4       	brcc	.+36     	; 0x38fa <modf+0x42>
    38d6:	ab 2f       	mov	r26, r27
    38d8:	00 24       	eor	r0, r0
    38da:	46 95       	lsr	r20
    38dc:	37 95       	ror	r19
    38de:	27 95       	ror	r18
    38e0:	01 1c       	adc	r0, r1
    38e2:	a3 95       	inc	r26
    38e4:	d2 f3       	brmi	.-12     	; 0x38da <modf+0x22>
    38e6:	00 20       	and	r0, r0
    38e8:	71 f0       	breq	.+28     	; 0x3906 <modf+0x4e>
    38ea:	22 0f       	add	r18, r18
    38ec:	33 1f       	adc	r19, r19
    38ee:	44 1f       	adc	r20, r20
    38f0:	b3 95       	inc	r27
    38f2:	da f3       	brmi	.-10     	; 0x38ea <modf+0x32>
    38f4:	0e d0       	rcall	.+28     	; 0x3912 <modf+0x5a>
    38f6:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__subsf3>
    38fa:	61 30       	cpi	r22, 0x01	; 1
    38fc:	71 05       	cpc	r23, r1
    38fe:	a0 e8       	ldi	r26, 0x80	; 128
    3900:	8a 07       	cpc	r24, r26
    3902:	b9 46       	sbci	r27, 0x69	; 105
    3904:	30 f4       	brcc	.+12     	; 0x3912 <modf+0x5a>
    3906:	9b 01       	movw	r18, r22
    3908:	ac 01       	movw	r20, r24
    390a:	66 27       	eor	r22, r22
    390c:	77 27       	eor	r23, r23
    390e:	88 27       	eor	r24, r24
    3910:	90 78       	andi	r25, 0x80	; 128
    3912:	30 96       	adiw	r30, 0x00	; 0
    3914:	21 f0       	breq	.+8      	; 0x391e <modf+0x66>
    3916:	20 83       	st	Z, r18
    3918:	31 83       	std	Z+1, r19	; 0x01
    391a:	42 83       	std	Z+2, r20	; 0x02
    391c:	53 83       	std	Z+3, r21	; 0x03
    391e:	08 95       	ret

00003920 <__fp_mpack>:
    3920:	9f 3f       	cpi	r25, 0xFF	; 255
    3922:	31 f0       	breq	.+12     	; 0x3930 <__fp_mpack_finite+0xc>

00003924 <__fp_mpack_finite>:
    3924:	91 50       	subi	r25, 0x01	; 1
    3926:	20 f4       	brcc	.+8      	; 0x3930 <__fp_mpack_finite+0xc>
    3928:	87 95       	ror	r24
    392a:	77 95       	ror	r23
    392c:	67 95       	ror	r22
    392e:	b7 95       	ror	r27
    3930:	88 0f       	add	r24, r24
    3932:	91 1d       	adc	r25, r1
    3934:	96 95       	lsr	r25
    3936:	87 95       	ror	r24
    3938:	97 f9       	bld	r25, 7
    393a:	08 95       	ret

0000393c <vfprintf>:
    393c:	a0 e1       	ldi	r26, 0x10	; 16
    393e:	b0 e0       	ldi	r27, 0x00	; 0
    3940:	e4 ea       	ldi	r30, 0xA4	; 164
    3942:	fc e1       	ldi	r31, 0x1C	; 28
    3944:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__>
    3948:	7c 01       	movw	r14, r24
    394a:	1b 01       	movw	r2, r22
    394c:	6a 01       	movw	r12, r20
    394e:	fc 01       	movw	r30, r24
    3950:	17 82       	std	Z+7, r1	; 0x07
    3952:	16 82       	std	Z+6, r1	; 0x06
    3954:	83 81       	ldd	r24, Z+3	; 0x03
    3956:	81 ff       	sbrs	r24, 1
    3958:	44 c3       	rjmp	.+1672   	; 0x3fe2 <vfprintf+0x6a6>
    395a:	9e 01       	movw	r18, r28
    395c:	2f 5f       	subi	r18, 0xFF	; 255
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	39 01       	movw	r6, r18
    3962:	f7 01       	movw	r30, r14
    3964:	93 81       	ldd	r25, Z+3	; 0x03
    3966:	f1 01       	movw	r30, r2
    3968:	93 fd       	sbrc	r25, 3
    396a:	85 91       	lpm	r24, Z+
    396c:	93 ff       	sbrs	r25, 3
    396e:	81 91       	ld	r24, Z+
    3970:	1f 01       	movw	r2, r30
    3972:	88 23       	and	r24, r24
    3974:	09 f4       	brne	.+2      	; 0x3978 <vfprintf+0x3c>
    3976:	31 c3       	rjmp	.+1634   	; 0x3fda <vfprintf+0x69e>
    3978:	85 32       	cpi	r24, 0x25	; 37
    397a:	39 f4       	brne	.+14     	; 0x398a <vfprintf+0x4e>
    397c:	93 fd       	sbrc	r25, 3
    397e:	85 91       	lpm	r24, Z+
    3980:	93 ff       	sbrs	r25, 3
    3982:	81 91       	ld	r24, Z+
    3984:	1f 01       	movw	r2, r30
    3986:	85 32       	cpi	r24, 0x25	; 37
    3988:	39 f4       	brne	.+14     	; 0x3998 <vfprintf+0x5c>
    398a:	b7 01       	movw	r22, r14
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3992:	56 01       	movw	r10, r12
    3994:	65 01       	movw	r12, r10
    3996:	e5 cf       	rjmp	.-54     	; 0x3962 <vfprintf+0x26>
    3998:	10 e0       	ldi	r17, 0x00	; 0
    399a:	51 2c       	mov	r5, r1
    399c:	91 2c       	mov	r9, r1
    399e:	ff e1       	ldi	r31, 0x1F	; 31
    39a0:	f9 15       	cp	r31, r9
    39a2:	d8 f0       	brcs	.+54     	; 0x39da <vfprintf+0x9e>
    39a4:	8b 32       	cpi	r24, 0x2B	; 43
    39a6:	79 f0       	breq	.+30     	; 0x39c6 <vfprintf+0x8a>
    39a8:	38 f4       	brcc	.+14     	; 0x39b8 <vfprintf+0x7c>
    39aa:	80 32       	cpi	r24, 0x20	; 32
    39ac:	79 f0       	breq	.+30     	; 0x39cc <vfprintf+0x90>
    39ae:	83 32       	cpi	r24, 0x23	; 35
    39b0:	a1 f4       	brne	.+40     	; 0x39da <vfprintf+0x9e>
    39b2:	f9 2d       	mov	r31, r9
    39b4:	f0 61       	ori	r31, 0x10	; 16
    39b6:	2e c0       	rjmp	.+92     	; 0x3a14 <vfprintf+0xd8>
    39b8:	8d 32       	cpi	r24, 0x2D	; 45
    39ba:	61 f0       	breq	.+24     	; 0x39d4 <vfprintf+0x98>
    39bc:	80 33       	cpi	r24, 0x30	; 48
    39be:	69 f4       	brne	.+26     	; 0x39da <vfprintf+0x9e>
    39c0:	29 2d       	mov	r18, r9
    39c2:	21 60       	ori	r18, 0x01	; 1
    39c4:	2d c0       	rjmp	.+90     	; 0x3a20 <vfprintf+0xe4>
    39c6:	39 2d       	mov	r19, r9
    39c8:	32 60       	ori	r19, 0x02	; 2
    39ca:	93 2e       	mov	r9, r19
    39cc:	89 2d       	mov	r24, r9
    39ce:	84 60       	ori	r24, 0x04	; 4
    39d0:	98 2e       	mov	r9, r24
    39d2:	2a c0       	rjmp	.+84     	; 0x3a28 <vfprintf+0xec>
    39d4:	e9 2d       	mov	r30, r9
    39d6:	e8 60       	ori	r30, 0x08	; 8
    39d8:	15 c0       	rjmp	.+42     	; 0x3a04 <vfprintf+0xc8>
    39da:	97 fc       	sbrc	r9, 7
    39dc:	2d c0       	rjmp	.+90     	; 0x3a38 <vfprintf+0xfc>
    39de:	20 ed       	ldi	r18, 0xD0	; 208
    39e0:	28 0f       	add	r18, r24
    39e2:	2a 30       	cpi	r18, 0x0A	; 10
    39e4:	88 f4       	brcc	.+34     	; 0x3a08 <vfprintf+0xcc>
    39e6:	96 fe       	sbrs	r9, 6
    39e8:	06 c0       	rjmp	.+12     	; 0x39f6 <vfprintf+0xba>
    39ea:	3a e0       	ldi	r19, 0x0A	; 10
    39ec:	13 9f       	mul	r17, r19
    39ee:	20 0d       	add	r18, r0
    39f0:	11 24       	eor	r1, r1
    39f2:	12 2f       	mov	r17, r18
    39f4:	19 c0       	rjmp	.+50     	; 0x3a28 <vfprintf+0xec>
    39f6:	8a e0       	ldi	r24, 0x0A	; 10
    39f8:	58 9e       	mul	r5, r24
    39fa:	20 0d       	add	r18, r0
    39fc:	11 24       	eor	r1, r1
    39fe:	52 2e       	mov	r5, r18
    3a00:	e9 2d       	mov	r30, r9
    3a02:	e0 62       	ori	r30, 0x20	; 32
    3a04:	9e 2e       	mov	r9, r30
    3a06:	10 c0       	rjmp	.+32     	; 0x3a28 <vfprintf+0xec>
    3a08:	8e 32       	cpi	r24, 0x2E	; 46
    3a0a:	31 f4       	brne	.+12     	; 0x3a18 <vfprintf+0xdc>
    3a0c:	96 fc       	sbrc	r9, 6
    3a0e:	e5 c2       	rjmp	.+1482   	; 0x3fda <vfprintf+0x69e>
    3a10:	f9 2d       	mov	r31, r9
    3a12:	f0 64       	ori	r31, 0x40	; 64
    3a14:	9f 2e       	mov	r9, r31
    3a16:	08 c0       	rjmp	.+16     	; 0x3a28 <vfprintf+0xec>
    3a18:	8c 36       	cpi	r24, 0x6C	; 108
    3a1a:	21 f4       	brne	.+8      	; 0x3a24 <vfprintf+0xe8>
    3a1c:	29 2d       	mov	r18, r9
    3a1e:	20 68       	ori	r18, 0x80	; 128
    3a20:	92 2e       	mov	r9, r18
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <vfprintf+0xec>
    3a24:	88 36       	cpi	r24, 0x68	; 104
    3a26:	41 f4       	brne	.+16     	; 0x3a38 <vfprintf+0xfc>
    3a28:	f1 01       	movw	r30, r2
    3a2a:	93 fd       	sbrc	r25, 3
    3a2c:	85 91       	lpm	r24, Z+
    3a2e:	93 ff       	sbrs	r25, 3
    3a30:	81 91       	ld	r24, Z+
    3a32:	1f 01       	movw	r2, r30
    3a34:	81 11       	cpse	r24, r1
    3a36:	b3 cf       	rjmp	.-154    	; 0x399e <vfprintf+0x62>
    3a38:	9b eb       	ldi	r25, 0xBB	; 187
    3a3a:	98 0f       	add	r25, r24
    3a3c:	93 30       	cpi	r25, 0x03	; 3
    3a3e:	20 f4       	brcc	.+8      	; 0x3a48 <vfprintf+0x10c>
    3a40:	99 2d       	mov	r25, r9
    3a42:	90 61       	ori	r25, 0x10	; 16
    3a44:	80 5e       	subi	r24, 0xE0	; 224
    3a46:	07 c0       	rjmp	.+14     	; 0x3a56 <vfprintf+0x11a>
    3a48:	9b e9       	ldi	r25, 0x9B	; 155
    3a4a:	98 0f       	add	r25, r24
    3a4c:	93 30       	cpi	r25, 0x03	; 3
    3a4e:	08 f0       	brcs	.+2      	; 0x3a52 <vfprintf+0x116>
    3a50:	66 c1       	rjmp	.+716    	; 0x3d1e <vfprintf+0x3e2>
    3a52:	99 2d       	mov	r25, r9
    3a54:	9f 7e       	andi	r25, 0xEF	; 239
    3a56:	96 ff       	sbrs	r25, 6
    3a58:	16 e0       	ldi	r17, 0x06	; 6
    3a5a:	9f 73       	andi	r25, 0x3F	; 63
    3a5c:	99 2e       	mov	r9, r25
    3a5e:	85 36       	cpi	r24, 0x65	; 101
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <vfprintf+0x12c>
    3a62:	90 64       	ori	r25, 0x40	; 64
    3a64:	99 2e       	mov	r9, r25
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <vfprintf+0x13c>
    3a68:	86 36       	cpi	r24, 0x66	; 102
    3a6a:	21 f4       	brne	.+8      	; 0x3a74 <vfprintf+0x138>
    3a6c:	39 2f       	mov	r19, r25
    3a6e:	30 68       	ori	r19, 0x80	; 128
    3a70:	93 2e       	mov	r9, r19
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <vfprintf+0x13c>
    3a74:	11 11       	cpse	r17, r1
    3a76:	11 50       	subi	r17, 0x01	; 1
    3a78:	97 fe       	sbrs	r9, 7
    3a7a:	07 c0       	rjmp	.+14     	; 0x3a8a <vfprintf+0x14e>
    3a7c:	1c 33       	cpi	r17, 0x3C	; 60
    3a7e:	50 f4       	brcc	.+20     	; 0x3a94 <vfprintf+0x158>
    3a80:	44 24       	eor	r4, r4
    3a82:	43 94       	inc	r4
    3a84:	41 0e       	add	r4, r17
    3a86:	27 e0       	ldi	r18, 0x07	; 7
    3a88:	0b c0       	rjmp	.+22     	; 0x3aa0 <vfprintf+0x164>
    3a8a:	18 30       	cpi	r17, 0x08	; 8
    3a8c:	38 f0       	brcs	.+14     	; 0x3a9c <vfprintf+0x160>
    3a8e:	27 e0       	ldi	r18, 0x07	; 7
    3a90:	17 e0       	ldi	r17, 0x07	; 7
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <vfprintf+0x162>
    3a94:	27 e0       	ldi	r18, 0x07	; 7
    3a96:	9c e3       	ldi	r25, 0x3C	; 60
    3a98:	49 2e       	mov	r4, r25
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <vfprintf+0x164>
    3a9c:	21 2f       	mov	r18, r17
    3a9e:	41 2c       	mov	r4, r1
    3aa0:	56 01       	movw	r10, r12
    3aa2:	84 e0       	ldi	r24, 0x04	; 4
    3aa4:	a8 0e       	add	r10, r24
    3aa6:	b1 1c       	adc	r11, r1
    3aa8:	f6 01       	movw	r30, r12
    3aaa:	60 81       	ld	r22, Z
    3aac:	71 81       	ldd	r23, Z+1	; 0x01
    3aae:	82 81       	ldd	r24, Z+2	; 0x02
    3ab0:	93 81       	ldd	r25, Z+3	; 0x03
    3ab2:	04 2d       	mov	r16, r4
    3ab4:	a3 01       	movw	r20, r6
    3ab6:	0e 94 b1 20 	call	0x4162	; 0x4162 <__ftoa_engine>
    3aba:	6c 01       	movw	r12, r24
    3abc:	f9 81       	ldd	r31, Y+1	; 0x01
    3abe:	fc 87       	std	Y+12, r31	; 0x0c
    3ac0:	f0 ff       	sbrs	r31, 0
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <vfprintf+0x18c>
    3ac4:	f3 ff       	sbrs	r31, 3
    3ac6:	06 c0       	rjmp	.+12     	; 0x3ad4 <vfprintf+0x198>
    3ac8:	91 fc       	sbrc	r9, 1
    3aca:	06 c0       	rjmp	.+12     	; 0x3ad8 <vfprintf+0x19c>
    3acc:	92 fe       	sbrs	r9, 2
    3ace:	06 c0       	rjmp	.+12     	; 0x3adc <vfprintf+0x1a0>
    3ad0:	00 e2       	ldi	r16, 0x20	; 32
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <vfprintf+0x1a2>
    3ad4:	0d e2       	ldi	r16, 0x2D	; 45
    3ad6:	03 c0       	rjmp	.+6      	; 0x3ade <vfprintf+0x1a2>
    3ad8:	0b e2       	ldi	r16, 0x2B	; 43
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <vfprintf+0x1a2>
    3adc:	00 e0       	ldi	r16, 0x00	; 0
    3ade:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ae0:	8c 70       	andi	r24, 0x0C	; 12
    3ae2:	19 f0       	breq	.+6      	; 0x3aea <vfprintf+0x1ae>
    3ae4:	01 11       	cpse	r16, r1
    3ae6:	5a c2       	rjmp	.+1204   	; 0x3f9c <vfprintf+0x660>
    3ae8:	9b c2       	rjmp	.+1334   	; 0x4020 <vfprintf+0x6e4>
    3aea:	97 fe       	sbrs	r9, 7
    3aec:	10 c0       	rjmp	.+32     	; 0x3b0e <vfprintf+0x1d2>
    3aee:	4c 0c       	add	r4, r12
    3af0:	fc 85       	ldd	r31, Y+12	; 0x0c
    3af2:	f4 ff       	sbrs	r31, 4
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <vfprintf+0x1c2>
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	81 33       	cpi	r24, 0x31	; 49
    3afa:	09 f4       	brne	.+2      	; 0x3afe <vfprintf+0x1c2>
    3afc:	4a 94       	dec	r4
    3afe:	14 14       	cp	r1, r4
    3b00:	74 f5       	brge	.+92     	; 0x3b5e <vfprintf+0x222>
    3b02:	28 e0       	ldi	r18, 0x08	; 8
    3b04:	24 15       	cp	r18, r4
    3b06:	78 f5       	brcc	.+94     	; 0x3b66 <vfprintf+0x22a>
    3b08:	88 e0       	ldi	r24, 0x08	; 8
    3b0a:	48 2e       	mov	r4, r24
    3b0c:	2c c0       	rjmp	.+88     	; 0x3b66 <vfprintf+0x22a>
    3b0e:	96 fc       	sbrc	r9, 6
    3b10:	2a c0       	rjmp	.+84     	; 0x3b66 <vfprintf+0x22a>
    3b12:	81 2f       	mov	r24, r17
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	8c 15       	cp	r24, r12
    3b18:	9d 05       	cpc	r25, r13
    3b1a:	9c f0       	brlt	.+38     	; 0x3b42 <vfprintf+0x206>
    3b1c:	3c ef       	ldi	r19, 0xFC	; 252
    3b1e:	c3 16       	cp	r12, r19
    3b20:	3f ef       	ldi	r19, 0xFF	; 255
    3b22:	d3 06       	cpc	r13, r19
    3b24:	74 f0       	brlt	.+28     	; 0x3b42 <vfprintf+0x206>
    3b26:	89 2d       	mov	r24, r9
    3b28:	80 68       	ori	r24, 0x80	; 128
    3b2a:	98 2e       	mov	r9, r24
    3b2c:	0a c0       	rjmp	.+20     	; 0x3b42 <vfprintf+0x206>
    3b2e:	e2 e0       	ldi	r30, 0x02	; 2
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	ec 0f       	add	r30, r28
    3b34:	fd 1f       	adc	r31, r29
    3b36:	e1 0f       	add	r30, r17
    3b38:	f1 1d       	adc	r31, r1
    3b3a:	80 81       	ld	r24, Z
    3b3c:	80 33       	cpi	r24, 0x30	; 48
    3b3e:	19 f4       	brne	.+6      	; 0x3b46 <vfprintf+0x20a>
    3b40:	11 50       	subi	r17, 0x01	; 1
    3b42:	11 11       	cpse	r17, r1
    3b44:	f4 cf       	rjmp	.-24     	; 0x3b2e <vfprintf+0x1f2>
    3b46:	97 fe       	sbrs	r9, 7
    3b48:	0e c0       	rjmp	.+28     	; 0x3b66 <vfprintf+0x22a>
    3b4a:	44 24       	eor	r4, r4
    3b4c:	43 94       	inc	r4
    3b4e:	41 0e       	add	r4, r17
    3b50:	81 2f       	mov	r24, r17
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	c8 16       	cp	r12, r24
    3b56:	d9 06       	cpc	r13, r25
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <vfprintf+0x228>
    3b5a:	1c 19       	sub	r17, r12
    3b5c:	04 c0       	rjmp	.+8      	; 0x3b66 <vfprintf+0x22a>
    3b5e:	44 24       	eor	r4, r4
    3b60:	43 94       	inc	r4
    3b62:	01 c0       	rjmp	.+2      	; 0x3b66 <vfprintf+0x22a>
    3b64:	10 e0       	ldi	r17, 0x00	; 0
    3b66:	97 fe       	sbrs	r9, 7
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <vfprintf+0x23a>
    3b6a:	1c 14       	cp	r1, r12
    3b6c:	1d 04       	cpc	r1, r13
    3b6e:	34 f4       	brge	.+12     	; 0x3b7c <vfprintf+0x240>
    3b70:	c6 01       	movw	r24, r12
    3b72:	01 96       	adiw	r24, 0x01	; 1
    3b74:	05 c0       	rjmp	.+10     	; 0x3b80 <vfprintf+0x244>
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <vfprintf+0x244>
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	01 11       	cpse	r16, r1
    3b82:	01 96       	adiw	r24, 0x01	; 1
    3b84:	11 23       	and	r17, r17
    3b86:	31 f0       	breq	.+12     	; 0x3b94 <vfprintf+0x258>
    3b88:	21 2f       	mov	r18, r17
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	2f 5f       	subi	r18, 0xFF	; 255
    3b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b90:	82 0f       	add	r24, r18
    3b92:	93 1f       	adc	r25, r19
    3b94:	25 2d       	mov	r18, r5
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	82 17       	cp	r24, r18
    3b9a:	93 07       	cpc	r25, r19
    3b9c:	14 f4       	brge	.+4      	; 0x3ba2 <vfprintf+0x266>
    3b9e:	58 1a       	sub	r5, r24
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <vfprintf+0x268>
    3ba2:	51 2c       	mov	r5, r1
    3ba4:	89 2d       	mov	r24, r9
    3ba6:	89 70       	andi	r24, 0x09	; 9
    3ba8:	49 f4       	brne	.+18     	; 0x3bbc <vfprintf+0x280>
    3baa:	55 20       	and	r5, r5
    3bac:	39 f0       	breq	.+14     	; 0x3bbc <vfprintf+0x280>
    3bae:	b7 01       	movw	r22, r14
    3bb0:	80 e2       	ldi	r24, 0x20	; 32
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3bb8:	5a 94       	dec	r5
    3bba:	f7 cf       	rjmp	.-18     	; 0x3baa <vfprintf+0x26e>
    3bbc:	00 23       	and	r16, r16
    3bbe:	29 f0       	breq	.+10     	; 0x3bca <vfprintf+0x28e>
    3bc0:	b7 01       	movw	r22, r14
    3bc2:	80 2f       	mov	r24, r16
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3bca:	93 fc       	sbrc	r9, 3
    3bcc:	09 c0       	rjmp	.+18     	; 0x3be0 <vfprintf+0x2a4>
    3bce:	55 20       	and	r5, r5
    3bd0:	39 f0       	breq	.+14     	; 0x3be0 <vfprintf+0x2a4>
    3bd2:	b7 01       	movw	r22, r14
    3bd4:	80 e3       	ldi	r24, 0x30	; 48
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3bdc:	5a 94       	dec	r5
    3bde:	f7 cf       	rjmp	.-18     	; 0x3bce <vfprintf+0x292>
    3be0:	97 fe       	sbrs	r9, 7
    3be2:	4c c0       	rjmp	.+152    	; 0x3c7c <vfprintf+0x340>
    3be4:	46 01       	movw	r8, r12
    3be6:	d7 fe       	sbrs	r13, 7
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <vfprintf+0x2b2>
    3bea:	81 2c       	mov	r8, r1
    3bec:	91 2c       	mov	r9, r1
    3bee:	c6 01       	movw	r24, r12
    3bf0:	88 19       	sub	r24, r8
    3bf2:	99 09       	sbc	r25, r9
    3bf4:	f3 01       	movw	r30, r6
    3bf6:	e8 0f       	add	r30, r24
    3bf8:	f9 1f       	adc	r31, r25
    3bfa:	fe 87       	std	Y+14, r31	; 0x0e
    3bfc:	ed 87       	std	Y+13, r30	; 0x0d
    3bfe:	96 01       	movw	r18, r12
    3c00:	24 19       	sub	r18, r4
    3c02:	31 09       	sbc	r19, r1
    3c04:	38 8b       	std	Y+16, r19	; 0x10
    3c06:	2f 87       	std	Y+15, r18	; 0x0f
    3c08:	01 2f       	mov	r16, r17
    3c0a:	10 e0       	ldi	r17, 0x00	; 0
    3c0c:	11 95       	neg	r17
    3c0e:	01 95       	neg	r16
    3c10:	11 09       	sbc	r17, r1
    3c12:	3f ef       	ldi	r19, 0xFF	; 255
    3c14:	83 16       	cp	r8, r19
    3c16:	93 06       	cpc	r9, r19
    3c18:	29 f4       	brne	.+10     	; 0x3c24 <vfprintf+0x2e8>
    3c1a:	b7 01       	movw	r22, r14
    3c1c:	8e e2       	ldi	r24, 0x2E	; 46
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3c24:	c8 14       	cp	r12, r8
    3c26:	d9 04       	cpc	r13, r9
    3c28:	4c f0       	brlt	.+18     	; 0x3c3c <vfprintf+0x300>
    3c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c2c:	98 89       	ldd	r25, Y+16	; 0x10
    3c2e:	88 15       	cp	r24, r8
    3c30:	99 05       	cpc	r25, r9
    3c32:	24 f4       	brge	.+8      	; 0x3c3c <vfprintf+0x300>
    3c34:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c36:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c38:	81 81       	ldd	r24, Z+1	; 0x01
    3c3a:	01 c0       	rjmp	.+2      	; 0x3c3e <vfprintf+0x302>
    3c3c:	80 e3       	ldi	r24, 0x30	; 48
    3c3e:	f1 e0       	ldi	r31, 0x01	; 1
    3c40:	8f 1a       	sub	r8, r31
    3c42:	91 08       	sbc	r9, r1
    3c44:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c46:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4c:	3e 87       	std	Y+14, r19	; 0x0e
    3c4e:	2d 87       	std	Y+13, r18	; 0x0d
    3c50:	80 16       	cp	r8, r16
    3c52:	91 06       	cpc	r9, r17
    3c54:	2c f0       	brlt	.+10     	; 0x3c60 <vfprintf+0x324>
    3c56:	b7 01       	movw	r22, r14
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3c5e:	d9 cf       	rjmp	.-78     	; 0x3c12 <vfprintf+0x2d6>
    3c60:	c8 14       	cp	r12, r8
    3c62:	d9 04       	cpc	r13, r9
    3c64:	41 f4       	brne	.+16     	; 0x3c76 <vfprintf+0x33a>
    3c66:	9a 81       	ldd	r25, Y+2	; 0x02
    3c68:	96 33       	cpi	r25, 0x36	; 54
    3c6a:	20 f4       	brcc	.+8      	; 0x3c74 <vfprintf+0x338>
    3c6c:	95 33       	cpi	r25, 0x35	; 53
    3c6e:	19 f4       	brne	.+6      	; 0x3c76 <vfprintf+0x33a>
    3c70:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c72:	34 ff       	sbrs	r19, 4
    3c74:	81 e3       	ldi	r24, 0x31	; 49
    3c76:	b7 01       	movw	r22, r14
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	4e c0       	rjmp	.+156    	; 0x3d18 <vfprintf+0x3dc>
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	81 33       	cpi	r24, 0x31	; 49
    3c80:	19 f0       	breq	.+6      	; 0x3c88 <vfprintf+0x34c>
    3c82:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c84:	9f 7e       	andi	r25, 0xEF	; 239
    3c86:	9c 87       	std	Y+12, r25	; 0x0c
    3c88:	b7 01       	movw	r22, r14
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3c90:	11 11       	cpse	r17, r1
    3c92:	05 c0       	rjmp	.+10     	; 0x3c9e <vfprintf+0x362>
    3c94:	94 fc       	sbrc	r9, 4
    3c96:	18 c0       	rjmp	.+48     	; 0x3cc8 <vfprintf+0x38c>
    3c98:	85 e6       	ldi	r24, 0x65	; 101
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	17 c0       	rjmp	.+46     	; 0x3ccc <vfprintf+0x390>
    3c9e:	b7 01       	movw	r22, r14
    3ca0:	8e e2       	ldi	r24, 0x2E	; 46
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3ca8:	1e 5f       	subi	r17, 0xFE	; 254
    3caa:	82 e0       	ldi	r24, 0x02	; 2
    3cac:	01 e0       	ldi	r16, 0x01	; 1
    3cae:	08 0f       	add	r16, r24
    3cb0:	f3 01       	movw	r30, r6
    3cb2:	e8 0f       	add	r30, r24
    3cb4:	f1 1d       	adc	r31, r1
    3cb6:	80 81       	ld	r24, Z
    3cb8:	b7 01       	movw	r22, r14
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3cc0:	80 2f       	mov	r24, r16
    3cc2:	01 13       	cpse	r16, r17
    3cc4:	f3 cf       	rjmp	.-26     	; 0x3cac <vfprintf+0x370>
    3cc6:	e6 cf       	rjmp	.-52     	; 0x3c94 <vfprintf+0x358>
    3cc8:	85 e4       	ldi	r24, 0x45	; 69
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	b7 01       	movw	r22, r14
    3cce:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3cd2:	d7 fc       	sbrc	r13, 7
    3cd4:	06 c0       	rjmp	.+12     	; 0x3ce2 <vfprintf+0x3a6>
    3cd6:	c1 14       	cp	r12, r1
    3cd8:	d1 04       	cpc	r13, r1
    3cda:	41 f4       	brne	.+16     	; 0x3cec <vfprintf+0x3b0>
    3cdc:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cde:	e4 ff       	sbrs	r30, 4
    3ce0:	05 c0       	rjmp	.+10     	; 0x3cec <vfprintf+0x3b0>
    3ce2:	d1 94       	neg	r13
    3ce4:	c1 94       	neg	r12
    3ce6:	d1 08       	sbc	r13, r1
    3ce8:	8d e2       	ldi	r24, 0x2D	; 45
    3cea:	01 c0       	rjmp	.+2      	; 0x3cee <vfprintf+0x3b2>
    3cec:	8b e2       	ldi	r24, 0x2B	; 43
    3cee:	b7 01       	movw	r22, r14
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3cf6:	80 e3       	ldi	r24, 0x30	; 48
    3cf8:	2a e0       	ldi	r18, 0x0A	; 10
    3cfa:	c2 16       	cp	r12, r18
    3cfc:	d1 04       	cpc	r13, r1
    3cfe:	2c f0       	brlt	.+10     	; 0x3d0a <vfprintf+0x3ce>
    3d00:	8f 5f       	subi	r24, 0xFF	; 255
    3d02:	fa e0       	ldi	r31, 0x0A	; 10
    3d04:	cf 1a       	sub	r12, r31
    3d06:	d1 08       	sbc	r13, r1
    3d08:	f7 cf       	rjmp	.-18     	; 0x3cf8 <vfprintf+0x3bc>
    3d0a:	b7 01       	movw	r22, r14
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3d12:	b7 01       	movw	r22, r14
    3d14:	c6 01       	movw	r24, r12
    3d16:	c0 96       	adiw	r24, 0x30	; 48
    3d18:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3d1c:	54 c1       	rjmp	.+680    	; 0x3fc6 <vfprintf+0x68a>
    3d1e:	83 36       	cpi	r24, 0x63	; 99
    3d20:	31 f0       	breq	.+12     	; 0x3d2e <vfprintf+0x3f2>
    3d22:	83 37       	cpi	r24, 0x73	; 115
    3d24:	79 f0       	breq	.+30     	; 0x3d44 <vfprintf+0x408>
    3d26:	83 35       	cpi	r24, 0x53	; 83
    3d28:	09 f0       	breq	.+2      	; 0x3d2c <vfprintf+0x3f0>
    3d2a:	56 c0       	rjmp	.+172    	; 0x3dd8 <vfprintf+0x49c>
    3d2c:	20 c0       	rjmp	.+64     	; 0x3d6e <vfprintf+0x432>
    3d2e:	56 01       	movw	r10, r12
    3d30:	32 e0       	ldi	r19, 0x02	; 2
    3d32:	a3 0e       	add	r10, r19
    3d34:	b1 1c       	adc	r11, r1
    3d36:	f6 01       	movw	r30, r12
    3d38:	80 81       	ld	r24, Z
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	01 e0       	ldi	r16, 0x01	; 1
    3d3e:	10 e0       	ldi	r17, 0x00	; 0
    3d40:	63 01       	movw	r12, r6
    3d42:	12 c0       	rjmp	.+36     	; 0x3d68 <vfprintf+0x42c>
    3d44:	56 01       	movw	r10, r12
    3d46:	f2 e0       	ldi	r31, 0x02	; 2
    3d48:	af 0e       	add	r10, r31
    3d4a:	b1 1c       	adc	r11, r1
    3d4c:	f6 01       	movw	r30, r12
    3d4e:	c0 80       	ld	r12, Z
    3d50:	d1 80       	ldd	r13, Z+1	; 0x01
    3d52:	96 fe       	sbrs	r9, 6
    3d54:	03 c0       	rjmp	.+6      	; 0x3d5c <vfprintf+0x420>
    3d56:	61 2f       	mov	r22, r17
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <vfprintf+0x424>
    3d5c:	6f ef       	ldi	r22, 0xFF	; 255
    3d5e:	7f ef       	ldi	r23, 0xFF	; 255
    3d60:	c6 01       	movw	r24, r12
    3d62:	0e 94 a1 21 	call	0x4342	; 0x4342 <strnlen>
    3d66:	8c 01       	movw	r16, r24
    3d68:	f9 2d       	mov	r31, r9
    3d6a:	ff 77       	andi	r31, 0x7F	; 127
    3d6c:	14 c0       	rjmp	.+40     	; 0x3d96 <vfprintf+0x45a>
    3d6e:	56 01       	movw	r10, r12
    3d70:	22 e0       	ldi	r18, 0x02	; 2
    3d72:	a2 0e       	add	r10, r18
    3d74:	b1 1c       	adc	r11, r1
    3d76:	f6 01       	movw	r30, r12
    3d78:	c0 80       	ld	r12, Z
    3d7a:	d1 80       	ldd	r13, Z+1	; 0x01
    3d7c:	96 fe       	sbrs	r9, 6
    3d7e:	03 c0       	rjmp	.+6      	; 0x3d86 <vfprintf+0x44a>
    3d80:	61 2f       	mov	r22, r17
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <vfprintf+0x44e>
    3d86:	6f ef       	ldi	r22, 0xFF	; 255
    3d88:	7f ef       	ldi	r23, 0xFF	; 255
    3d8a:	c6 01       	movw	r24, r12
    3d8c:	0e 94 89 21 	call	0x4312	; 0x4312 <strnlen_P>
    3d90:	8c 01       	movw	r16, r24
    3d92:	f9 2d       	mov	r31, r9
    3d94:	f0 68       	ori	r31, 0x80	; 128
    3d96:	9f 2e       	mov	r9, r31
    3d98:	f3 fd       	sbrc	r31, 3
    3d9a:	1a c0       	rjmp	.+52     	; 0x3dd0 <vfprintf+0x494>
    3d9c:	85 2d       	mov	r24, r5
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	08 17       	cp	r16, r24
    3da2:	19 07       	cpc	r17, r25
    3da4:	a8 f4       	brcc	.+42     	; 0x3dd0 <vfprintf+0x494>
    3da6:	b7 01       	movw	r22, r14
    3da8:	80 e2       	ldi	r24, 0x20	; 32
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3db0:	5a 94       	dec	r5
    3db2:	f4 cf       	rjmp	.-24     	; 0x3d9c <vfprintf+0x460>
    3db4:	f6 01       	movw	r30, r12
    3db6:	97 fc       	sbrc	r9, 7
    3db8:	85 91       	lpm	r24, Z+
    3dba:	97 fe       	sbrs	r9, 7
    3dbc:	81 91       	ld	r24, Z+
    3dbe:	6f 01       	movw	r12, r30
    3dc0:	b7 01       	movw	r22, r14
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3dc8:	51 10       	cpse	r5, r1
    3dca:	5a 94       	dec	r5
    3dcc:	01 50       	subi	r16, 0x01	; 1
    3dce:	11 09       	sbc	r17, r1
    3dd0:	01 15       	cp	r16, r1
    3dd2:	11 05       	cpc	r17, r1
    3dd4:	79 f7       	brne	.-34     	; 0x3db4 <vfprintf+0x478>
    3dd6:	f7 c0       	rjmp	.+494    	; 0x3fc6 <vfprintf+0x68a>
    3dd8:	84 36       	cpi	r24, 0x64	; 100
    3dda:	11 f0       	breq	.+4      	; 0x3de0 <vfprintf+0x4a4>
    3ddc:	89 36       	cpi	r24, 0x69	; 105
    3dde:	61 f5       	brne	.+88     	; 0x3e38 <vfprintf+0x4fc>
    3de0:	56 01       	movw	r10, r12
    3de2:	97 fe       	sbrs	r9, 7
    3de4:	09 c0       	rjmp	.+18     	; 0x3df8 <vfprintf+0x4bc>
    3de6:	24 e0       	ldi	r18, 0x04	; 4
    3de8:	a2 0e       	add	r10, r18
    3dea:	b1 1c       	adc	r11, r1
    3dec:	f6 01       	movw	r30, r12
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	0a c0       	rjmp	.+20     	; 0x3e0c <vfprintf+0x4d0>
    3df8:	f2 e0       	ldi	r31, 0x02	; 2
    3dfa:	af 0e       	add	r10, r31
    3dfc:	b1 1c       	adc	r11, r1
    3dfe:	f6 01       	movw	r30, r12
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	07 2e       	mov	r0, r23
    3e06:	00 0c       	add	r0, r0
    3e08:	88 0b       	sbc	r24, r24
    3e0a:	99 0b       	sbc	r25, r25
    3e0c:	f9 2d       	mov	r31, r9
    3e0e:	ff 76       	andi	r31, 0x6F	; 111
    3e10:	9f 2e       	mov	r9, r31
    3e12:	97 ff       	sbrs	r25, 7
    3e14:	09 c0       	rjmp	.+18     	; 0x3e28 <vfprintf+0x4ec>
    3e16:	90 95       	com	r25
    3e18:	80 95       	com	r24
    3e1a:	70 95       	com	r23
    3e1c:	61 95       	neg	r22
    3e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e20:	8f 4f       	sbci	r24, 0xFF	; 255
    3e22:	9f 4f       	sbci	r25, 0xFF	; 255
    3e24:	f0 68       	ori	r31, 0x80	; 128
    3e26:	9f 2e       	mov	r9, r31
    3e28:	2a e0       	ldi	r18, 0x0A	; 10
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	a3 01       	movw	r20, r6
    3e2e:	0e 94 04 22 	call	0x4408	; 0x4408 <__ultoa_invert>
    3e32:	c8 2e       	mov	r12, r24
    3e34:	c6 18       	sub	r12, r6
    3e36:	3f c0       	rjmp	.+126    	; 0x3eb6 <vfprintf+0x57a>
    3e38:	09 2d       	mov	r16, r9
    3e3a:	85 37       	cpi	r24, 0x75	; 117
    3e3c:	21 f4       	brne	.+8      	; 0x3e46 <vfprintf+0x50a>
    3e3e:	0f 7e       	andi	r16, 0xEF	; 239
    3e40:	2a e0       	ldi	r18, 0x0A	; 10
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	1d c0       	rjmp	.+58     	; 0x3e80 <vfprintf+0x544>
    3e46:	09 7f       	andi	r16, 0xF9	; 249
    3e48:	8f 36       	cpi	r24, 0x6F	; 111
    3e4a:	91 f0       	breq	.+36     	; 0x3e70 <vfprintf+0x534>
    3e4c:	18 f4       	brcc	.+6      	; 0x3e54 <vfprintf+0x518>
    3e4e:	88 35       	cpi	r24, 0x58	; 88
    3e50:	59 f0       	breq	.+22     	; 0x3e68 <vfprintf+0x52c>
    3e52:	c3 c0       	rjmp	.+390    	; 0x3fda <vfprintf+0x69e>
    3e54:	80 37       	cpi	r24, 0x70	; 112
    3e56:	19 f0       	breq	.+6      	; 0x3e5e <vfprintf+0x522>
    3e58:	88 37       	cpi	r24, 0x78	; 120
    3e5a:	11 f0       	breq	.+4      	; 0x3e60 <vfprintf+0x524>
    3e5c:	be c0       	rjmp	.+380    	; 0x3fda <vfprintf+0x69e>
    3e5e:	00 61       	ori	r16, 0x10	; 16
    3e60:	04 ff       	sbrs	r16, 4
    3e62:	09 c0       	rjmp	.+18     	; 0x3e76 <vfprintf+0x53a>
    3e64:	04 60       	ori	r16, 0x04	; 4
    3e66:	07 c0       	rjmp	.+14     	; 0x3e76 <vfprintf+0x53a>
    3e68:	94 fe       	sbrs	r9, 4
    3e6a:	08 c0       	rjmp	.+16     	; 0x3e7c <vfprintf+0x540>
    3e6c:	06 60       	ori	r16, 0x06	; 6
    3e6e:	06 c0       	rjmp	.+12     	; 0x3e7c <vfprintf+0x540>
    3e70:	28 e0       	ldi	r18, 0x08	; 8
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	05 c0       	rjmp	.+10     	; 0x3e80 <vfprintf+0x544>
    3e76:	20 e1       	ldi	r18, 0x10	; 16
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	02 c0       	rjmp	.+4      	; 0x3e80 <vfprintf+0x544>
    3e7c:	20 e1       	ldi	r18, 0x10	; 16
    3e7e:	32 e0       	ldi	r19, 0x02	; 2
    3e80:	56 01       	movw	r10, r12
    3e82:	07 ff       	sbrs	r16, 7
    3e84:	09 c0       	rjmp	.+18     	; 0x3e98 <vfprintf+0x55c>
    3e86:	84 e0       	ldi	r24, 0x04	; 4
    3e88:	a8 0e       	add	r10, r24
    3e8a:	b1 1c       	adc	r11, r1
    3e8c:	f6 01       	movw	r30, r12
    3e8e:	60 81       	ld	r22, Z
    3e90:	71 81       	ldd	r23, Z+1	; 0x01
    3e92:	82 81       	ldd	r24, Z+2	; 0x02
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	08 c0       	rjmp	.+16     	; 0x3ea8 <vfprintf+0x56c>
    3e98:	f2 e0       	ldi	r31, 0x02	; 2
    3e9a:	af 0e       	add	r10, r31
    3e9c:	b1 1c       	adc	r11, r1
    3e9e:	f6 01       	movw	r30, r12
    3ea0:	60 81       	ld	r22, Z
    3ea2:	71 81       	ldd	r23, Z+1	; 0x01
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	a3 01       	movw	r20, r6
    3eaa:	0e 94 04 22 	call	0x4408	; 0x4408 <__ultoa_invert>
    3eae:	c8 2e       	mov	r12, r24
    3eb0:	c6 18       	sub	r12, r6
    3eb2:	0f 77       	andi	r16, 0x7F	; 127
    3eb4:	90 2e       	mov	r9, r16
    3eb6:	96 fe       	sbrs	r9, 6
    3eb8:	0b c0       	rjmp	.+22     	; 0x3ed0 <vfprintf+0x594>
    3eba:	09 2d       	mov	r16, r9
    3ebc:	0e 7f       	andi	r16, 0xFE	; 254
    3ebe:	c1 16       	cp	r12, r17
    3ec0:	50 f4       	brcc	.+20     	; 0x3ed6 <vfprintf+0x59a>
    3ec2:	94 fe       	sbrs	r9, 4
    3ec4:	0a c0       	rjmp	.+20     	; 0x3eda <vfprintf+0x59e>
    3ec6:	92 fc       	sbrc	r9, 2
    3ec8:	08 c0       	rjmp	.+16     	; 0x3eda <vfprintf+0x59e>
    3eca:	09 2d       	mov	r16, r9
    3ecc:	0e 7e       	andi	r16, 0xEE	; 238
    3ece:	05 c0       	rjmp	.+10     	; 0x3eda <vfprintf+0x59e>
    3ed0:	dc 2c       	mov	r13, r12
    3ed2:	09 2d       	mov	r16, r9
    3ed4:	03 c0       	rjmp	.+6      	; 0x3edc <vfprintf+0x5a0>
    3ed6:	dc 2c       	mov	r13, r12
    3ed8:	01 c0       	rjmp	.+2      	; 0x3edc <vfprintf+0x5a0>
    3eda:	d1 2e       	mov	r13, r17
    3edc:	04 ff       	sbrs	r16, 4
    3ede:	0d c0       	rjmp	.+26     	; 0x3efa <vfprintf+0x5be>
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	ec 0d       	add	r30, r12
    3ee4:	f1 1d       	adc	r31, r1
    3ee6:	80 81       	ld	r24, Z
    3ee8:	80 33       	cpi	r24, 0x30	; 48
    3eea:	11 f4       	brne	.+4      	; 0x3ef0 <vfprintf+0x5b4>
    3eec:	09 7e       	andi	r16, 0xE9	; 233
    3eee:	09 c0       	rjmp	.+18     	; 0x3f02 <vfprintf+0x5c6>
    3ef0:	02 ff       	sbrs	r16, 2
    3ef2:	06 c0       	rjmp	.+12     	; 0x3f00 <vfprintf+0x5c4>
    3ef4:	d3 94       	inc	r13
    3ef6:	d3 94       	inc	r13
    3ef8:	04 c0       	rjmp	.+8      	; 0x3f02 <vfprintf+0x5c6>
    3efa:	80 2f       	mov	r24, r16
    3efc:	86 78       	andi	r24, 0x86	; 134
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <vfprintf+0x5c6>
    3f00:	d3 94       	inc	r13
    3f02:	03 fd       	sbrc	r16, 3
    3f04:	11 c0       	rjmp	.+34     	; 0x3f28 <vfprintf+0x5ec>
    3f06:	00 ff       	sbrs	r16, 0
    3f08:	06 c0       	rjmp	.+12     	; 0x3f16 <vfprintf+0x5da>
    3f0a:	1c 2d       	mov	r17, r12
    3f0c:	d5 14       	cp	r13, r5
    3f0e:	80 f4       	brcc	.+32     	; 0x3f30 <vfprintf+0x5f4>
    3f10:	15 0d       	add	r17, r5
    3f12:	1d 19       	sub	r17, r13
    3f14:	0d c0       	rjmp	.+26     	; 0x3f30 <vfprintf+0x5f4>
    3f16:	d5 14       	cp	r13, r5
    3f18:	58 f4       	brcc	.+22     	; 0x3f30 <vfprintf+0x5f4>
    3f1a:	b7 01       	movw	r22, r14
    3f1c:	80 e2       	ldi	r24, 0x20	; 32
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3f24:	d3 94       	inc	r13
    3f26:	f7 cf       	rjmp	.-18     	; 0x3f16 <vfprintf+0x5da>
    3f28:	d5 14       	cp	r13, r5
    3f2a:	10 f4       	brcc	.+4      	; 0x3f30 <vfprintf+0x5f4>
    3f2c:	5d 18       	sub	r5, r13
    3f2e:	01 c0       	rjmp	.+2      	; 0x3f32 <vfprintf+0x5f6>
    3f30:	51 2c       	mov	r5, r1
    3f32:	04 ff       	sbrs	r16, 4
    3f34:	10 c0       	rjmp	.+32     	; 0x3f56 <vfprintf+0x61a>
    3f36:	b7 01       	movw	r22, r14
    3f38:	80 e3       	ldi	r24, 0x30	; 48
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3f40:	02 ff       	sbrs	r16, 2
    3f42:	17 c0       	rjmp	.+46     	; 0x3f72 <vfprintf+0x636>
    3f44:	01 fd       	sbrc	r16, 1
    3f46:	03 c0       	rjmp	.+6      	; 0x3f4e <vfprintf+0x612>
    3f48:	88 e7       	ldi	r24, 0x78	; 120
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <vfprintf+0x616>
    3f4e:	88 e5       	ldi	r24, 0x58	; 88
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	b7 01       	movw	r22, r14
    3f54:	0c c0       	rjmp	.+24     	; 0x3f6e <vfprintf+0x632>
    3f56:	80 2f       	mov	r24, r16
    3f58:	86 78       	andi	r24, 0x86	; 134
    3f5a:	59 f0       	breq	.+22     	; 0x3f72 <vfprintf+0x636>
    3f5c:	01 ff       	sbrs	r16, 1
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <vfprintf+0x628>
    3f60:	8b e2       	ldi	r24, 0x2B	; 43
    3f62:	01 c0       	rjmp	.+2      	; 0x3f66 <vfprintf+0x62a>
    3f64:	80 e2       	ldi	r24, 0x20	; 32
    3f66:	07 fd       	sbrc	r16, 7
    3f68:	8d e2       	ldi	r24, 0x2D	; 45
    3f6a:	b7 01       	movw	r22, r14
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3f72:	c1 16       	cp	r12, r17
    3f74:	38 f4       	brcc	.+14     	; 0x3f84 <vfprintf+0x648>
    3f76:	b7 01       	movw	r22, r14
    3f78:	80 e3       	ldi	r24, 0x30	; 48
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3f80:	11 50       	subi	r17, 0x01	; 1
    3f82:	f7 cf       	rjmp	.-18     	; 0x3f72 <vfprintf+0x636>
    3f84:	ca 94       	dec	r12
    3f86:	f3 01       	movw	r30, r6
    3f88:	ec 0d       	add	r30, r12
    3f8a:	f1 1d       	adc	r31, r1
    3f8c:	80 81       	ld	r24, Z
    3f8e:	b7 01       	movw	r22, r14
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3f96:	c1 10       	cpse	r12, r1
    3f98:	f5 cf       	rjmp	.-22     	; 0x3f84 <vfprintf+0x648>
    3f9a:	15 c0       	rjmp	.+42     	; 0x3fc6 <vfprintf+0x68a>
    3f9c:	f4 e0       	ldi	r31, 0x04	; 4
    3f9e:	f5 15       	cp	r31, r5
    3fa0:	60 f5       	brcc	.+88     	; 0x3ffa <vfprintf+0x6be>
    3fa2:	84 e0       	ldi	r24, 0x04	; 4
    3fa4:	58 1a       	sub	r5, r24
    3fa6:	93 fe       	sbrs	r9, 3
    3fa8:	1f c0       	rjmp	.+62     	; 0x3fe8 <vfprintf+0x6ac>
    3faa:	01 11       	cpse	r16, r1
    3fac:	27 c0       	rjmp	.+78     	; 0x3ffc <vfprintf+0x6c0>
    3fae:	2c 85       	ldd	r18, Y+12	; 0x0c
    3fb0:	23 ff       	sbrs	r18, 3
    3fb2:	2a c0       	rjmp	.+84     	; 0x4008 <vfprintf+0x6cc>
    3fb4:	04 ed       	ldi	r16, 0xD4	; 212
    3fb6:	12 e0       	ldi	r17, 0x02	; 2
    3fb8:	39 2d       	mov	r19, r9
    3fba:	30 71       	andi	r19, 0x10	; 16
    3fbc:	93 2e       	mov	r9, r19
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	84 91       	lpm	r24, Z
    3fc2:	81 11       	cpse	r24, r1
    3fc4:	24 c0       	rjmp	.+72     	; 0x400e <vfprintf+0x6d2>
    3fc6:	55 20       	and	r5, r5
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <vfprintf+0x690>
    3fca:	e4 cc       	rjmp	.-1592   	; 0x3994 <vfprintf+0x58>
    3fcc:	b7 01       	movw	r22, r14
    3fce:	80 e2       	ldi	r24, 0x20	; 32
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3fd6:	5a 94       	dec	r5
    3fd8:	f6 cf       	rjmp	.-20     	; 0x3fc6 <vfprintf+0x68a>
    3fda:	f7 01       	movw	r30, r14
    3fdc:	86 81       	ldd	r24, Z+6	; 0x06
    3fde:	97 81       	ldd	r25, Z+7	; 0x07
    3fe0:	26 c0       	rjmp	.+76     	; 0x402e <vfprintf+0x6f2>
    3fe2:	8f ef       	ldi	r24, 0xFF	; 255
    3fe4:	9f ef       	ldi	r25, 0xFF	; 255
    3fe6:	23 c0       	rjmp	.+70     	; 0x402e <vfprintf+0x6f2>
    3fe8:	b7 01       	movw	r22, r14
    3fea:	80 e2       	ldi	r24, 0x20	; 32
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    3ff2:	5a 94       	dec	r5
    3ff4:	51 10       	cpse	r5, r1
    3ff6:	f8 cf       	rjmp	.-16     	; 0x3fe8 <vfprintf+0x6ac>
    3ff8:	d8 cf       	rjmp	.-80     	; 0x3faa <vfprintf+0x66e>
    3ffa:	51 2c       	mov	r5, r1
    3ffc:	b7 01       	movw	r22, r14
    3ffe:	80 2f       	mov	r24, r16
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    4006:	d3 cf       	rjmp	.-90     	; 0x3fae <vfprintf+0x672>
    4008:	08 ed       	ldi	r16, 0xD8	; 216
    400a:	12 e0       	ldi	r17, 0x02	; 2
    400c:	d5 cf       	rjmp	.-86     	; 0x3fb8 <vfprintf+0x67c>
    400e:	91 10       	cpse	r9, r1
    4010:	80 52       	subi	r24, 0x20	; 32
    4012:	b7 01       	movw	r22, r14
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 ac 21 	call	0x4358	; 0x4358 <fputc>
    401a:	0f 5f       	subi	r16, 0xFF	; 255
    401c:	1f 4f       	sbci	r17, 0xFF	; 255
    401e:	cf cf       	rjmp	.-98     	; 0x3fbe <vfprintf+0x682>
    4020:	23 e0       	ldi	r18, 0x03	; 3
    4022:	25 15       	cp	r18, r5
    4024:	10 f4       	brcc	.+4      	; 0x402a <vfprintf+0x6ee>
    4026:	83 e0       	ldi	r24, 0x03	; 3
    4028:	bd cf       	rjmp	.-134    	; 0x3fa4 <vfprintf+0x668>
    402a:	51 2c       	mov	r5, r1
    402c:	c0 cf       	rjmp	.-128    	; 0x3fae <vfprintf+0x672>
    402e:	60 96       	adiw	r28, 0x10	; 16
    4030:	e2 e1       	ldi	r30, 0x12	; 18
    4032:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__>

00004036 <__divmodhi4>:
    4036:	97 fb       	bst	r25, 7
    4038:	07 2e       	mov	r0, r23
    403a:	16 f4       	brtc	.+4      	; 0x4040 <__divmodhi4+0xa>
    403c:	00 94       	com	r0
    403e:	07 d0       	rcall	.+14     	; 0x404e <__divmodhi4_neg1>
    4040:	77 fd       	sbrc	r23, 7
    4042:	09 d0       	rcall	.+18     	; 0x4056 <__divmodhi4_neg2>
    4044:	0e 94 9d 20 	call	0x413a	; 0x413a <__udivmodhi4>
    4048:	07 fc       	sbrc	r0, 7
    404a:	05 d0       	rcall	.+10     	; 0x4056 <__divmodhi4_neg2>
    404c:	3e f4       	brtc	.+14     	; 0x405c <__divmodhi4_exit>

0000404e <__divmodhi4_neg1>:
    404e:	90 95       	com	r25
    4050:	81 95       	neg	r24
    4052:	9f 4f       	sbci	r25, 0xFF	; 255
    4054:	08 95       	ret

00004056 <__divmodhi4_neg2>:
    4056:	70 95       	com	r23
    4058:	61 95       	neg	r22
    405a:	7f 4f       	sbci	r23, 0xFF	; 255

0000405c <__divmodhi4_exit>:
    405c:	08 95       	ret

0000405e <__udivmodsi4>:
    405e:	a1 e2       	ldi	r26, 0x21	; 33
    4060:	1a 2e       	mov	r1, r26
    4062:	aa 1b       	sub	r26, r26
    4064:	bb 1b       	sub	r27, r27
    4066:	fd 01       	movw	r30, r26
    4068:	0d c0       	rjmp	.+26     	; 0x4084 <__udivmodsi4_ep>

0000406a <__udivmodsi4_loop>:
    406a:	aa 1f       	adc	r26, r26
    406c:	bb 1f       	adc	r27, r27
    406e:	ee 1f       	adc	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	a2 17       	cp	r26, r18
    4074:	b3 07       	cpc	r27, r19
    4076:	e4 07       	cpc	r30, r20
    4078:	f5 07       	cpc	r31, r21
    407a:	20 f0       	brcs	.+8      	; 0x4084 <__udivmodsi4_ep>
    407c:	a2 1b       	sub	r26, r18
    407e:	b3 0b       	sbc	r27, r19
    4080:	e4 0b       	sbc	r30, r20
    4082:	f5 0b       	sbc	r31, r21

00004084 <__udivmodsi4_ep>:
    4084:	66 1f       	adc	r22, r22
    4086:	77 1f       	adc	r23, r23
    4088:	88 1f       	adc	r24, r24
    408a:	99 1f       	adc	r25, r25
    408c:	1a 94       	dec	r1
    408e:	69 f7       	brne	.-38     	; 0x406a <__udivmodsi4_loop>
    4090:	60 95       	com	r22
    4092:	70 95       	com	r23
    4094:	80 95       	com	r24
    4096:	90 95       	com	r25
    4098:	9b 01       	movw	r18, r22
    409a:	ac 01       	movw	r20, r24
    409c:	bd 01       	movw	r22, r26
    409e:	cf 01       	movw	r24, r30
    40a0:	08 95       	ret

000040a2 <__tablejump2__>:
    40a2:	ee 0f       	add	r30, r30
    40a4:	ff 1f       	adc	r31, r31
    40a6:	05 90       	lpm	r0, Z+
    40a8:	f4 91       	lpm	r31, Z
    40aa:	e0 2d       	mov	r30, r0
    40ac:	09 94       	ijmp

000040ae <__umulhisi3>:
    40ae:	a2 9f       	mul	r26, r18
    40b0:	b0 01       	movw	r22, r0
    40b2:	b3 9f       	mul	r27, r19
    40b4:	c0 01       	movw	r24, r0
    40b6:	a3 9f       	mul	r26, r19
    40b8:	70 0d       	add	r23, r0
    40ba:	81 1d       	adc	r24, r1
    40bc:	11 24       	eor	r1, r1
    40be:	91 1d       	adc	r25, r1
    40c0:	b2 9f       	mul	r27, r18
    40c2:	70 0d       	add	r23, r0
    40c4:	81 1d       	adc	r24, r1
    40c6:	11 24       	eor	r1, r1
    40c8:	91 1d       	adc	r25, r1
    40ca:	08 95       	ret

000040cc <__prologue_saves__>:
    40cc:	2f 92       	push	r2
    40ce:	3f 92       	push	r3
    40d0:	4f 92       	push	r4
    40d2:	5f 92       	push	r5
    40d4:	6f 92       	push	r6
    40d6:	7f 92       	push	r7
    40d8:	8f 92       	push	r8
    40da:	9f 92       	push	r9
    40dc:	af 92       	push	r10
    40de:	bf 92       	push	r11
    40e0:	cf 92       	push	r12
    40e2:	df 92       	push	r13
    40e4:	ef 92       	push	r14
    40e6:	ff 92       	push	r15
    40e8:	0f 93       	push	r16
    40ea:	1f 93       	push	r17
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
    40f4:	ca 1b       	sub	r28, r26
    40f6:	db 0b       	sbc	r29, r27
    40f8:	0f b6       	in	r0, 0x3f	; 63
    40fa:	f8 94       	cli
    40fc:	de bf       	out	0x3e, r29	; 62
    40fe:	0f be       	out	0x3f, r0	; 63
    4100:	cd bf       	out	0x3d, r28	; 61
    4102:	09 94       	ijmp

00004104 <__epilogue_restores__>:
    4104:	2a 88       	ldd	r2, Y+18	; 0x12
    4106:	39 88       	ldd	r3, Y+17	; 0x11
    4108:	48 88       	ldd	r4, Y+16	; 0x10
    410a:	5f 84       	ldd	r5, Y+15	; 0x0f
    410c:	6e 84       	ldd	r6, Y+14	; 0x0e
    410e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4110:	8c 84       	ldd	r8, Y+12	; 0x0c
    4112:	9b 84       	ldd	r9, Y+11	; 0x0b
    4114:	aa 84       	ldd	r10, Y+10	; 0x0a
    4116:	b9 84       	ldd	r11, Y+9	; 0x09
    4118:	c8 84       	ldd	r12, Y+8	; 0x08
    411a:	df 80       	ldd	r13, Y+7	; 0x07
    411c:	ee 80       	ldd	r14, Y+6	; 0x06
    411e:	fd 80       	ldd	r15, Y+5	; 0x05
    4120:	0c 81       	ldd	r16, Y+4	; 0x04
    4122:	1b 81       	ldd	r17, Y+3	; 0x03
    4124:	aa 81       	ldd	r26, Y+2	; 0x02
    4126:	b9 81       	ldd	r27, Y+1	; 0x01
    4128:	ce 0f       	add	r28, r30
    412a:	d1 1d       	adc	r29, r1
    412c:	0f b6       	in	r0, 0x3f	; 63
    412e:	f8 94       	cli
    4130:	de bf       	out	0x3e, r29	; 62
    4132:	0f be       	out	0x3f, r0	; 63
    4134:	cd bf       	out	0x3d, r28	; 61
    4136:	ed 01       	movw	r28, r26
    4138:	08 95       	ret

0000413a <__udivmodhi4>:
    413a:	aa 1b       	sub	r26, r26
    413c:	bb 1b       	sub	r27, r27
    413e:	51 e1       	ldi	r21, 0x11	; 17
    4140:	07 c0       	rjmp	.+14     	; 0x4150 <__udivmodhi4_ep>

00004142 <__udivmodhi4_loop>:
    4142:	aa 1f       	adc	r26, r26
    4144:	bb 1f       	adc	r27, r27
    4146:	a6 17       	cp	r26, r22
    4148:	b7 07       	cpc	r27, r23
    414a:	10 f0       	brcs	.+4      	; 0x4150 <__udivmodhi4_ep>
    414c:	a6 1b       	sub	r26, r22
    414e:	b7 0b       	sbc	r27, r23

00004150 <__udivmodhi4_ep>:
    4150:	88 1f       	adc	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	5a 95       	dec	r21
    4156:	a9 f7       	brne	.-22     	; 0x4142 <__udivmodhi4_loop>
    4158:	80 95       	com	r24
    415a:	90 95       	com	r25
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	08 95       	ret

00004162 <__ftoa_engine>:
    4162:	28 30       	cpi	r18, 0x08	; 8
    4164:	08 f0       	brcs	.+2      	; 0x4168 <__ftoa_engine+0x6>
    4166:	27 e0       	ldi	r18, 0x07	; 7
    4168:	33 27       	eor	r19, r19
    416a:	da 01       	movw	r26, r20
    416c:	99 0f       	add	r25, r25
    416e:	31 1d       	adc	r19, r1
    4170:	87 fd       	sbrc	r24, 7
    4172:	91 60       	ori	r25, 0x01	; 1
    4174:	00 96       	adiw	r24, 0x00	; 0
    4176:	61 05       	cpc	r22, r1
    4178:	71 05       	cpc	r23, r1
    417a:	39 f4       	brne	.+14     	; 0x418a <__ftoa_engine+0x28>
    417c:	32 60       	ori	r19, 0x02	; 2
    417e:	2e 5f       	subi	r18, 0xFE	; 254
    4180:	3d 93       	st	X+, r19
    4182:	30 e3       	ldi	r19, 0x30	; 48
    4184:	2a 95       	dec	r18
    4186:	e1 f7       	brne	.-8      	; 0x4180 <__ftoa_engine+0x1e>
    4188:	08 95       	ret
    418a:	9f 3f       	cpi	r25, 0xFF	; 255
    418c:	30 f0       	brcs	.+12     	; 0x419a <__ftoa_engine+0x38>
    418e:	80 38       	cpi	r24, 0x80	; 128
    4190:	71 05       	cpc	r23, r1
    4192:	61 05       	cpc	r22, r1
    4194:	09 f0       	breq	.+2      	; 0x4198 <__ftoa_engine+0x36>
    4196:	3c 5f       	subi	r19, 0xFC	; 252
    4198:	3c 5f       	subi	r19, 0xFC	; 252
    419a:	3d 93       	st	X+, r19
    419c:	91 30       	cpi	r25, 0x01	; 1
    419e:	08 f0       	brcs	.+2      	; 0x41a2 <__ftoa_engine+0x40>
    41a0:	80 68       	ori	r24, 0x80	; 128
    41a2:	91 1d       	adc	r25, r1
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	1f 93       	push	r17
    41aa:	0f 93       	push	r16
    41ac:	ff 92       	push	r15
    41ae:	ef 92       	push	r14
    41b0:	19 2f       	mov	r17, r25
    41b2:	98 7f       	andi	r25, 0xF8	; 248
    41b4:	96 95       	lsr	r25
    41b6:	e9 2f       	mov	r30, r25
    41b8:	96 95       	lsr	r25
    41ba:	96 95       	lsr	r25
    41bc:	e9 0f       	add	r30, r25
    41be:	ff 27       	eor	r31, r31
    41c0:	ea 5c       	subi	r30, 0xCA	; 202
    41c2:	fc 4f       	sbci	r31, 0xFC	; 252
    41c4:	99 27       	eor	r25, r25
    41c6:	33 27       	eor	r19, r19
    41c8:	ee 24       	eor	r14, r14
    41ca:	ff 24       	eor	r15, r15
    41cc:	a7 01       	movw	r20, r14
    41ce:	e7 01       	movw	r28, r14
    41d0:	05 90       	lpm	r0, Z+
    41d2:	08 94       	sec
    41d4:	07 94       	ror	r0
    41d6:	28 f4       	brcc	.+10     	; 0x41e2 <__ftoa_engine+0x80>
    41d8:	36 0f       	add	r19, r22
    41da:	e7 1e       	adc	r14, r23
    41dc:	f8 1e       	adc	r15, r24
    41de:	49 1f       	adc	r20, r25
    41e0:	51 1d       	adc	r21, r1
    41e2:	66 0f       	add	r22, r22
    41e4:	77 1f       	adc	r23, r23
    41e6:	88 1f       	adc	r24, r24
    41e8:	99 1f       	adc	r25, r25
    41ea:	06 94       	lsr	r0
    41ec:	a1 f7       	brne	.-24     	; 0x41d6 <__ftoa_engine+0x74>
    41ee:	05 90       	lpm	r0, Z+
    41f0:	07 94       	ror	r0
    41f2:	28 f4       	brcc	.+10     	; 0x41fe <__ftoa_engine+0x9c>
    41f4:	e7 0e       	add	r14, r23
    41f6:	f8 1e       	adc	r15, r24
    41f8:	49 1f       	adc	r20, r25
    41fa:	56 1f       	adc	r21, r22
    41fc:	c1 1d       	adc	r28, r1
    41fe:	77 0f       	add	r23, r23
    4200:	88 1f       	adc	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	66 1f       	adc	r22, r22
    4206:	06 94       	lsr	r0
    4208:	a1 f7       	brne	.-24     	; 0x41f2 <__ftoa_engine+0x90>
    420a:	05 90       	lpm	r0, Z+
    420c:	07 94       	ror	r0
    420e:	28 f4       	brcc	.+10     	; 0x421a <__ftoa_engine+0xb8>
    4210:	f8 0e       	add	r15, r24
    4212:	49 1f       	adc	r20, r25
    4214:	56 1f       	adc	r21, r22
    4216:	c7 1f       	adc	r28, r23
    4218:	d1 1d       	adc	r29, r1
    421a:	88 0f       	add	r24, r24
    421c:	99 1f       	adc	r25, r25
    421e:	66 1f       	adc	r22, r22
    4220:	77 1f       	adc	r23, r23
    4222:	06 94       	lsr	r0
    4224:	a1 f7       	brne	.-24     	; 0x420e <__ftoa_engine+0xac>
    4226:	05 90       	lpm	r0, Z+
    4228:	07 94       	ror	r0
    422a:	20 f4       	brcc	.+8      	; 0x4234 <__ftoa_engine+0xd2>
    422c:	49 0f       	add	r20, r25
    422e:	56 1f       	adc	r21, r22
    4230:	c7 1f       	adc	r28, r23
    4232:	d8 1f       	adc	r29, r24
    4234:	99 0f       	add	r25, r25
    4236:	66 1f       	adc	r22, r22
    4238:	77 1f       	adc	r23, r23
    423a:	88 1f       	adc	r24, r24
    423c:	06 94       	lsr	r0
    423e:	a9 f7       	brne	.-22     	; 0x422a <__ftoa_engine+0xc8>
    4240:	84 91       	lpm	r24, Z
    4242:	10 95       	com	r17
    4244:	17 70       	andi	r17, 0x07	; 7
    4246:	41 f0       	breq	.+16     	; 0x4258 <__ftoa_engine+0xf6>
    4248:	d6 95       	lsr	r29
    424a:	c7 95       	ror	r28
    424c:	57 95       	ror	r21
    424e:	47 95       	ror	r20
    4250:	f7 94       	ror	r15
    4252:	e7 94       	ror	r14
    4254:	1a 95       	dec	r17
    4256:	c1 f7       	brne	.-16     	; 0x4248 <__ftoa_engine+0xe6>
    4258:	ec ed       	ldi	r30, 0xDC	; 220
    425a:	f2 e0       	ldi	r31, 0x02	; 2
    425c:	68 94       	set
    425e:	15 90       	lpm	r1, Z+
    4260:	15 91       	lpm	r17, Z+
    4262:	35 91       	lpm	r19, Z+
    4264:	65 91       	lpm	r22, Z+
    4266:	95 91       	lpm	r25, Z+
    4268:	05 90       	lpm	r0, Z+
    426a:	7f e2       	ldi	r23, 0x2F	; 47
    426c:	73 95       	inc	r23
    426e:	e1 18       	sub	r14, r1
    4270:	f1 0a       	sbc	r15, r17
    4272:	43 0b       	sbc	r20, r19
    4274:	56 0b       	sbc	r21, r22
    4276:	c9 0b       	sbc	r28, r25
    4278:	d0 09       	sbc	r29, r0
    427a:	c0 f7       	brcc	.-16     	; 0x426c <__ftoa_engine+0x10a>
    427c:	e1 0c       	add	r14, r1
    427e:	f1 1e       	adc	r15, r17
    4280:	43 1f       	adc	r20, r19
    4282:	56 1f       	adc	r21, r22
    4284:	c9 1f       	adc	r28, r25
    4286:	d0 1d       	adc	r29, r0
    4288:	7e f4       	brtc	.+30     	; 0x42a8 <__ftoa_engine+0x146>
    428a:	70 33       	cpi	r23, 0x30	; 48
    428c:	11 f4       	brne	.+4      	; 0x4292 <__ftoa_engine+0x130>
    428e:	8a 95       	dec	r24
    4290:	e6 cf       	rjmp	.-52     	; 0x425e <__ftoa_engine+0xfc>
    4292:	e8 94       	clt
    4294:	01 50       	subi	r16, 0x01	; 1
    4296:	30 f0       	brcs	.+12     	; 0x42a4 <__ftoa_engine+0x142>
    4298:	08 0f       	add	r16, r24
    429a:	0a f4       	brpl	.+2      	; 0x429e <__ftoa_engine+0x13c>
    429c:	00 27       	eor	r16, r16
    429e:	02 17       	cp	r16, r18
    42a0:	08 f4       	brcc	.+2      	; 0x42a4 <__ftoa_engine+0x142>
    42a2:	20 2f       	mov	r18, r16
    42a4:	23 95       	inc	r18
    42a6:	02 2f       	mov	r16, r18
    42a8:	7a 33       	cpi	r23, 0x3A	; 58
    42aa:	28 f0       	brcs	.+10     	; 0x42b6 <__ftoa_engine+0x154>
    42ac:	79 e3       	ldi	r23, 0x39	; 57
    42ae:	7d 93       	st	X+, r23
    42b0:	2a 95       	dec	r18
    42b2:	e9 f7       	brne	.-6      	; 0x42ae <__ftoa_engine+0x14c>
    42b4:	10 c0       	rjmp	.+32     	; 0x42d6 <__ftoa_engine+0x174>
    42b6:	7d 93       	st	X+, r23
    42b8:	2a 95       	dec	r18
    42ba:	89 f6       	brne	.-94     	; 0x425e <__ftoa_engine+0xfc>
    42bc:	06 94       	lsr	r0
    42be:	97 95       	ror	r25
    42c0:	67 95       	ror	r22
    42c2:	37 95       	ror	r19
    42c4:	17 95       	ror	r17
    42c6:	17 94       	ror	r1
    42c8:	e1 18       	sub	r14, r1
    42ca:	f1 0a       	sbc	r15, r17
    42cc:	43 0b       	sbc	r20, r19
    42ce:	56 0b       	sbc	r21, r22
    42d0:	c9 0b       	sbc	r28, r25
    42d2:	d0 09       	sbc	r29, r0
    42d4:	98 f0       	brcs	.+38     	; 0x42fc <__ftoa_engine+0x19a>
    42d6:	23 95       	inc	r18
    42d8:	7e 91       	ld	r23, -X
    42da:	73 95       	inc	r23
    42dc:	7a 33       	cpi	r23, 0x3A	; 58
    42de:	08 f0       	brcs	.+2      	; 0x42e2 <__ftoa_engine+0x180>
    42e0:	70 e3       	ldi	r23, 0x30	; 48
    42e2:	7c 93       	st	X, r23
    42e4:	20 13       	cpse	r18, r16
    42e6:	b8 f7       	brcc	.-18     	; 0x42d6 <__ftoa_engine+0x174>
    42e8:	7e 91       	ld	r23, -X
    42ea:	70 61       	ori	r23, 0x10	; 16
    42ec:	7d 93       	st	X+, r23
    42ee:	30 f0       	brcs	.+12     	; 0x42fc <__ftoa_engine+0x19a>
    42f0:	83 95       	inc	r24
    42f2:	71 e3       	ldi	r23, 0x31	; 49
    42f4:	7d 93       	st	X+, r23
    42f6:	70 e3       	ldi	r23, 0x30	; 48
    42f8:	2a 95       	dec	r18
    42fa:	e1 f7       	brne	.-8      	; 0x42f4 <__ftoa_engine+0x192>
    42fc:	11 24       	eor	r1, r1
    42fe:	ef 90       	pop	r14
    4300:	ff 90       	pop	r15
    4302:	0f 91       	pop	r16
    4304:	1f 91       	pop	r17
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	99 27       	eor	r25, r25
    430c:	87 fd       	sbrc	r24, 7
    430e:	90 95       	com	r25
    4310:	08 95       	ret

00004312 <strnlen_P>:
    4312:	fc 01       	movw	r30, r24
    4314:	05 90       	lpm	r0, Z+
    4316:	61 50       	subi	r22, 0x01	; 1
    4318:	70 40       	sbci	r23, 0x00	; 0
    431a:	01 10       	cpse	r0, r1
    431c:	d8 f7       	brcc	.-10     	; 0x4314 <strnlen_P+0x2>
    431e:	80 95       	com	r24
    4320:	90 95       	com	r25
    4322:	8e 0f       	add	r24, r30
    4324:	9f 1f       	adc	r25, r31
    4326:	08 95       	ret

00004328 <memcmp>:
    4328:	fb 01       	movw	r30, r22
    432a:	dc 01       	movw	r26, r24
    432c:	04 c0       	rjmp	.+8      	; 0x4336 <memcmp+0xe>
    432e:	8d 91       	ld	r24, X+
    4330:	01 90       	ld	r0, Z+
    4332:	80 19       	sub	r24, r0
    4334:	21 f4       	brne	.+8      	; 0x433e <memcmp+0x16>
    4336:	41 50       	subi	r20, 0x01	; 1
    4338:	50 40       	sbci	r21, 0x00	; 0
    433a:	c8 f7       	brcc	.-14     	; 0x432e <memcmp+0x6>
    433c:	88 1b       	sub	r24, r24
    433e:	99 0b       	sbc	r25, r25
    4340:	08 95       	ret

00004342 <strnlen>:
    4342:	fc 01       	movw	r30, r24
    4344:	61 50       	subi	r22, 0x01	; 1
    4346:	70 40       	sbci	r23, 0x00	; 0
    4348:	01 90       	ld	r0, Z+
    434a:	01 10       	cpse	r0, r1
    434c:	d8 f7       	brcc	.-10     	; 0x4344 <strnlen+0x2>
    434e:	80 95       	com	r24
    4350:	90 95       	com	r25
    4352:	8e 0f       	add	r24, r30
    4354:	9f 1f       	adc	r25, r31
    4356:	08 95       	ret

00004358 <fputc>:
    4358:	0f 93       	push	r16
    435a:	1f 93       	push	r17
    435c:	cf 93       	push	r28
    435e:	df 93       	push	r29
    4360:	fb 01       	movw	r30, r22
    4362:	23 81       	ldd	r18, Z+3	; 0x03
    4364:	21 fd       	sbrc	r18, 1
    4366:	03 c0       	rjmp	.+6      	; 0x436e <fputc+0x16>
    4368:	8f ef       	ldi	r24, 0xFF	; 255
    436a:	9f ef       	ldi	r25, 0xFF	; 255
    436c:	2c c0       	rjmp	.+88     	; 0x43c6 <fputc+0x6e>
    436e:	22 ff       	sbrs	r18, 2
    4370:	16 c0       	rjmp	.+44     	; 0x439e <fputc+0x46>
    4372:	46 81       	ldd	r20, Z+6	; 0x06
    4374:	57 81       	ldd	r21, Z+7	; 0x07
    4376:	24 81       	ldd	r18, Z+4	; 0x04
    4378:	35 81       	ldd	r19, Z+5	; 0x05
    437a:	42 17       	cp	r20, r18
    437c:	53 07       	cpc	r21, r19
    437e:	44 f4       	brge	.+16     	; 0x4390 <fputc+0x38>
    4380:	a0 81       	ld	r26, Z
    4382:	b1 81       	ldd	r27, Z+1	; 0x01
    4384:	9d 01       	movw	r18, r26
    4386:	2f 5f       	subi	r18, 0xFF	; 255
    4388:	3f 4f       	sbci	r19, 0xFF	; 255
    438a:	31 83       	std	Z+1, r19	; 0x01
    438c:	20 83       	st	Z, r18
    438e:	8c 93       	st	X, r24
    4390:	26 81       	ldd	r18, Z+6	; 0x06
    4392:	37 81       	ldd	r19, Z+7	; 0x07
    4394:	2f 5f       	subi	r18, 0xFF	; 255
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	37 83       	std	Z+7, r19	; 0x07
    439a:	26 83       	std	Z+6, r18	; 0x06
    439c:	14 c0       	rjmp	.+40     	; 0x43c6 <fputc+0x6e>
    439e:	8b 01       	movw	r16, r22
    43a0:	ec 01       	movw	r28, r24
    43a2:	fb 01       	movw	r30, r22
    43a4:	00 84       	ldd	r0, Z+8	; 0x08
    43a6:	f1 85       	ldd	r31, Z+9	; 0x09
    43a8:	e0 2d       	mov	r30, r0
    43aa:	09 95       	icall
    43ac:	89 2b       	or	r24, r25
    43ae:	e1 f6       	brne	.-72     	; 0x4368 <fputc+0x10>
    43b0:	d8 01       	movw	r26, r16
    43b2:	16 96       	adiw	r26, 0x06	; 6
    43b4:	8d 91       	ld	r24, X+
    43b6:	9c 91       	ld	r25, X
    43b8:	17 97       	sbiw	r26, 0x07	; 7
    43ba:	01 96       	adiw	r24, 0x01	; 1
    43bc:	17 96       	adiw	r26, 0x07	; 7
    43be:	9c 93       	st	X, r25
    43c0:	8e 93       	st	-X, r24
    43c2:	16 97       	sbiw	r26, 0x06	; 6
    43c4:	ce 01       	movw	r24, r28
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	08 95       	ret

000043d0 <vsprintf>:
    43d0:	ae e0       	ldi	r26, 0x0E	; 14
    43d2:	b0 e0       	ldi	r27, 0x00	; 0
    43d4:	ee ee       	ldi	r30, 0xEE	; 238
    43d6:	f1 e2       	ldi	r31, 0x21	; 33
    43d8:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__prologue_saves__+0x1c>
    43dc:	8c 01       	movw	r16, r24
    43de:	86 e0       	ldi	r24, 0x06	; 6
    43e0:	8c 83       	std	Y+4, r24	; 0x04
    43e2:	1a 83       	std	Y+2, r17	; 0x02
    43e4:	09 83       	std	Y+1, r16	; 0x01
    43e6:	8f ef       	ldi	r24, 0xFF	; 255
    43e8:	9f e7       	ldi	r25, 0x7F	; 127
    43ea:	9e 83       	std	Y+6, r25	; 0x06
    43ec:	8d 83       	std	Y+5, r24	; 0x05
    43ee:	ce 01       	movw	r24, r28
    43f0:	01 96       	adiw	r24, 0x01	; 1
    43f2:	0e 94 9e 1c 	call	0x393c	; 0x393c <vfprintf>
    43f6:	ef 81       	ldd	r30, Y+7	; 0x07
    43f8:	f8 85       	ldd	r31, Y+8	; 0x08
    43fa:	e0 0f       	add	r30, r16
    43fc:	f1 1f       	adc	r31, r17
    43fe:	10 82       	st	Z, r1
    4400:	2e 96       	adiw	r28, 0x0e	; 14
    4402:	e4 e0       	ldi	r30, 0x04	; 4
    4404:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__epilogue_restores__+0x1c>

00004408 <__ultoa_invert>:
    4408:	fa 01       	movw	r30, r20
    440a:	aa 27       	eor	r26, r26
    440c:	28 30       	cpi	r18, 0x08	; 8
    440e:	51 f1       	breq	.+84     	; 0x4464 <__ultoa_invert+0x5c>
    4410:	20 31       	cpi	r18, 0x10	; 16
    4412:	81 f1       	breq	.+96     	; 0x4474 <__ultoa_invert+0x6c>
    4414:	e8 94       	clt
    4416:	6f 93       	push	r22
    4418:	6e 7f       	andi	r22, 0xFE	; 254
    441a:	6e 5f       	subi	r22, 0xFE	; 254
    441c:	7f 4f       	sbci	r23, 0xFF	; 255
    441e:	8f 4f       	sbci	r24, 0xFF	; 255
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	af 4f       	sbci	r26, 0xFF	; 255
    4424:	b1 e0       	ldi	r27, 0x01	; 1
    4426:	3e d0       	rcall	.+124    	; 0x44a4 <__ultoa_invert+0x9c>
    4428:	b4 e0       	ldi	r27, 0x04	; 4
    442a:	3c d0       	rcall	.+120    	; 0x44a4 <__ultoa_invert+0x9c>
    442c:	67 0f       	add	r22, r23
    442e:	78 1f       	adc	r23, r24
    4430:	89 1f       	adc	r24, r25
    4432:	9a 1f       	adc	r25, r26
    4434:	a1 1d       	adc	r26, r1
    4436:	68 0f       	add	r22, r24
    4438:	79 1f       	adc	r23, r25
    443a:	8a 1f       	adc	r24, r26
    443c:	91 1d       	adc	r25, r1
    443e:	a1 1d       	adc	r26, r1
    4440:	6a 0f       	add	r22, r26
    4442:	71 1d       	adc	r23, r1
    4444:	81 1d       	adc	r24, r1
    4446:	91 1d       	adc	r25, r1
    4448:	a1 1d       	adc	r26, r1
    444a:	20 d0       	rcall	.+64     	; 0x448c <__ultoa_invert+0x84>
    444c:	09 f4       	brne	.+2      	; 0x4450 <__ultoa_invert+0x48>
    444e:	68 94       	set
    4450:	3f 91       	pop	r19
    4452:	2a e0       	ldi	r18, 0x0A	; 10
    4454:	26 9f       	mul	r18, r22
    4456:	11 24       	eor	r1, r1
    4458:	30 19       	sub	r19, r0
    445a:	30 5d       	subi	r19, 0xD0	; 208
    445c:	31 93       	st	Z+, r19
    445e:	de f6       	brtc	.-74     	; 0x4416 <__ultoa_invert+0xe>
    4460:	cf 01       	movw	r24, r30
    4462:	08 95       	ret
    4464:	46 2f       	mov	r20, r22
    4466:	47 70       	andi	r20, 0x07	; 7
    4468:	40 5d       	subi	r20, 0xD0	; 208
    446a:	41 93       	st	Z+, r20
    446c:	b3 e0       	ldi	r27, 0x03	; 3
    446e:	0f d0       	rcall	.+30     	; 0x448e <__ultoa_invert+0x86>
    4470:	c9 f7       	brne	.-14     	; 0x4464 <__ultoa_invert+0x5c>
    4472:	f6 cf       	rjmp	.-20     	; 0x4460 <__ultoa_invert+0x58>
    4474:	46 2f       	mov	r20, r22
    4476:	4f 70       	andi	r20, 0x0F	; 15
    4478:	40 5d       	subi	r20, 0xD0	; 208
    447a:	4a 33       	cpi	r20, 0x3A	; 58
    447c:	18 f0       	brcs	.+6      	; 0x4484 <__ultoa_invert+0x7c>
    447e:	49 5d       	subi	r20, 0xD9	; 217
    4480:	31 fd       	sbrc	r19, 1
    4482:	40 52       	subi	r20, 0x20	; 32
    4484:	41 93       	st	Z+, r20
    4486:	02 d0       	rcall	.+4      	; 0x448c <__ultoa_invert+0x84>
    4488:	a9 f7       	brne	.-22     	; 0x4474 <__ultoa_invert+0x6c>
    448a:	ea cf       	rjmp	.-44     	; 0x4460 <__ultoa_invert+0x58>
    448c:	b4 e0       	ldi	r27, 0x04	; 4
    448e:	a6 95       	lsr	r26
    4490:	97 95       	ror	r25
    4492:	87 95       	ror	r24
    4494:	77 95       	ror	r23
    4496:	67 95       	ror	r22
    4498:	ba 95       	dec	r27
    449a:	c9 f7       	brne	.-14     	; 0x448e <__ultoa_invert+0x86>
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	61 05       	cpc	r22, r1
    44a0:	71 05       	cpc	r23, r1
    44a2:	08 95       	ret
    44a4:	9b 01       	movw	r18, r22
    44a6:	ac 01       	movw	r20, r24
    44a8:	0a 2e       	mov	r0, r26
    44aa:	06 94       	lsr	r0
    44ac:	57 95       	ror	r21
    44ae:	47 95       	ror	r20
    44b0:	37 95       	ror	r19
    44b2:	27 95       	ror	r18
    44b4:	ba 95       	dec	r27
    44b6:	c9 f7       	brne	.-14     	; 0x44aa <__ultoa_invert+0xa2>
    44b8:	62 0f       	add	r22, r18
    44ba:	73 1f       	adc	r23, r19
    44bc:	84 1f       	adc	r24, r20
    44be:	95 1f       	adc	r25, r21
    44c0:	a0 1d       	adc	r26, r0
    44c2:	08 95       	ret

000044c4 <_exit>:
    44c4:	f8 94       	cli

000044c6 <__stop_program>:
    44c6:	ff cf       	rjmp	.-2      	; 0x44c6 <__stop_program>
