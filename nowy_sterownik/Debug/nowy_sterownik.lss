
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  00003714  000037a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000263  0080015c  0080015c  000038a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000528  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000490b  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bfa  00000000  00000000  0000876f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000324b  00000000  00000000  0000a369  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  0000d5b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000178b  00000000  00000000  0000e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ec8  00000000  00000000  0000f89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00011767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_10>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_13>
      38:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__vector_14>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	37 06       	cpc	r3, r23
      56:	3e 06       	cpc	r3, r30
      58:	41 06       	cpc	r4, r17
      5a:	47 06       	cpc	r4, r23
      5c:	4d 06       	cpc	r4, r29
      5e:	52 06       	cpc	r5, r18
      60:	58 06       	cpc	r5, r24
      62:	5f 06       	cpc	r5, r31
      64:	63 06       	cpc	r6, r19
      66:	6b 06       	cpc	r6, r27
      68:	ba 06       	cpc	r11, r26
      6a:	ba 06       	cpc	r11, r26
      6c:	ba 06       	cpc	r11, r26
      6e:	ba 06       	cpc	r11, r26
      70:	ba 06       	cpc	r11, r26
      72:	ba 06       	cpc	r11, r26
      74:	ba 06       	cpc	r11, r26
      76:	ba 06       	cpc	r11, r26
      78:	ba 06       	cpc	r11, r26
      7a:	ba 06       	cpc	r11, r26
      7c:	ba 06       	cpc	r11, r26
      7e:	ba 06       	cpc	r11, r26
      80:	ba 06       	cpc	r11, r26
      82:	ba 06       	cpc	r11, r26
      84:	ba 06       	cpc	r11, r26
      86:	ba 06       	cpc	r11, r26
      88:	ba 06       	cpc	r11, r26
      8a:	ba 06       	cpc	r11, r26
      8c:	ba 06       	cpc	r11, r26
      8e:	ba 06       	cpc	r11, r26
      90:	ba 06       	cpc	r11, r26
      92:	ba 06       	cpc	r11, r26
      94:	ba 06       	cpc	r11, r26
      96:	ba 06       	cpc	r11, r26
      98:	ba 06       	cpc	r11, r26
      9a:	ba 06       	cpc	r11, r26
      9c:	ba 06       	cpc	r11, r26
      9e:	ba 06       	cpc	r11, r26
      a0:	ba 06       	cpc	r11, r26
      a2:	ba 06       	cpc	r11, r26
      a4:	ba 06       	cpc	r11, r26
      a6:	ba 06       	cpc	r11, r26
      a8:	ba 06       	cpc	r11, r26
      aa:	ba 06       	cpc	r11, r26
      ac:	ba 06       	cpc	r11, r26
      ae:	ba 06       	cpc	r11, r26
      b0:	ba 06       	cpc	r11, r26
      b2:	ba 06       	cpc	r11, r26
      b4:	ba 06       	cpc	r11, r26
      b6:	ba 06       	cpc	r11, r26
      b8:	ba 06       	cpc	r11, r26
      ba:	ba 06       	cpc	r11, r26
      bc:	ba 06       	cpc	r11, r26
      be:	ba 06       	cpc	r11, r26
      c0:	ba 06       	cpc	r11, r26
      c2:	ba 06       	cpc	r11, r26
      c4:	ba 06       	cpc	r11, r26
      c6:	ba 06       	cpc	r11, r26
      c8:	ba 06       	cpc	r11, r26
      ca:	ba 06       	cpc	r11, r26
      cc:	ba 06       	cpc	r11, r26
      ce:	ba 06       	cpc	r11, r26
      d0:	ba 06       	cpc	r11, r26
      d2:	ba 06       	cpc	r11, r26
      d4:	ba 06       	cpc	r11, r26
      d6:	ba 06       	cpc	r11, r26
      d8:	ba 06       	cpc	r11, r26
      da:	ba 06       	cpc	r11, r26
      dc:	ba 06       	cpc	r11, r26
      de:	ba 06       	cpc	r11, r26
      e0:	ba 06       	cpc	r11, r26
      e2:	ba 06       	cpc	r11, r26
      e4:	ba 06       	cpc	r11, r26
      e6:	ba 06       	cpc	r11, r26
      e8:	ba 06       	cpc	r11, r26
      ea:	ba 06       	cpc	r11, r26
      ec:	ba 06       	cpc	r11, r26
      ee:	ba 06       	cpc	r11, r26
      f0:	ba 06       	cpc	r11, r26
      f2:	ba 06       	cpc	r11, r26
      f4:	ba 06       	cpc	r11, r26
      f6:	ba 06       	cpc	r11, r26
      f8:	ba 06       	cpc	r11, r26
      fa:	ba 06       	cpc	r11, r26
      fc:	ba 06       	cpc	r11, r26
      fe:	ba 06       	cpc	r11, r26
     100:	ba 06       	cpc	r11, r26
     102:	ba 06       	cpc	r11, r26
     104:	ba 06       	cpc	r11, r26
     106:	ba 06       	cpc	r11, r26
     108:	ba 06       	cpc	r11, r26
     10a:	ba 06       	cpc	r11, r26
     10c:	ba 06       	cpc	r11, r26
     10e:	ba 06       	cpc	r11, r26
     110:	ba 06       	cpc	r11, r26
     112:	ba 06       	cpc	r11, r26
     114:	ba 06       	cpc	r11, r26
     116:	72 06       	cpc	r7, r18
     118:	79 06       	cpc	r7, r25
     11a:	7f 06       	cpc	r7, r31
     11c:	84 06       	cpc	r8, r20
     11e:	8a 06       	cpc	r8, r26
     120:	90 06       	cpc	r9, r16
     122:	ba 06       	cpc	r11, r26
     124:	ba 06       	cpc	r11, r26
     126:	ba 06       	cpc	r11, r26
     128:	ba 06       	cpc	r11, r26
     12a:	ba 06       	cpc	r11, r26
     12c:	a9 06       	cpc	r10, r25
     12e:	ba 06       	cpc	r11, r26
     130:	ba 06       	cpc	r11, r26
     132:	98 06       	cpc	r9, r24
     134:	9d 06       	cpc	r9, r29
     136:	ba 06       	cpc	r11, r26
     138:	95 06       	cpc	r9, r21
     13a:	a3 06       	cpc	r10, r19
     13c:	ba 06       	cpc	r11, r26
     13e:	ba 06       	cpc	r11, r26
     140:	ba 06       	cpc	r11, r26
     142:	ba 06       	cpc	r11, r26
     144:	ba 06       	cpc	r11, r26
     146:	ba 06       	cpc	r11, r26
     148:	ba 06       	cpc	r11, r26
     14a:	ba 06       	cpc	r11, r26
     14c:	ba 06       	cpc	r11, r26
     14e:	ba 06       	cpc	r11, r26
     150:	ba 06       	cpc	r11, r26
     152:	ba 06       	cpc	r11, r26
     154:	ba 06       	cpc	r11, r26
     156:	ba 06       	cpc	r11, r26
     158:	ba 06       	cpc	r11, r26
     15a:	ba 06       	cpc	r11, r26
     15c:	ba 06       	cpc	r11, r26
     15e:	ba 06       	cpc	r11, r26
     160:	ba 06       	cpc	r11, r26
     162:	ba 06       	cpc	r11, r26
     164:	ba 06       	cpc	r11, r26
     166:	ba 06       	cpc	r11, r26
     168:	ba 06       	cpc	r11, r26
     16a:	ba 06       	cpc	r11, r26
     16c:	ba 06       	cpc	r11, r26
     16e:	ba 06       	cpc	r11, r26
     170:	ba 06       	cpc	r11, r26
     172:	ba 06       	cpc	r11, r26
     174:	ba 06       	cpc	r11, r26
     176:	ba 06       	cpc	r11, r26
     178:	ba 06       	cpc	r11, r26
     17a:	ba 06       	cpc	r11, r26
     17c:	ba 06       	cpc	r11, r26
     17e:	ba 06       	cpc	r11, r26
     180:	ba 06       	cpc	r11, r26
     182:	ba 06       	cpc	r11, r26
     184:	ba 06       	cpc	r11, r26
     186:	ba 06       	cpc	r11, r26
     188:	ba 06       	cpc	r11, r26
     18a:	ba 06       	cpc	r11, r26
     18c:	ba 06       	cpc	r11, r26
     18e:	ba 06       	cpc	r11, r26
     190:	ba 06       	cpc	r11, r26
     192:	ba 06       	cpc	r11, r26
     194:	ba 06       	cpc	r11, r26
     196:	ba 06       	cpc	r11, r26
     198:	ba 06       	cpc	r11, r26
     19a:	ba 06       	cpc	r11, r26
     19c:	ba 06       	cpc	r11, r26
     19e:	ba 06       	cpc	r11, r26
     1a0:	ba 06       	cpc	r11, r26
     1a2:	ba 06       	cpc	r11, r26
     1a4:	ba 06       	cpc	r11, r26
     1a6:	ba 06       	cpc	r11, r26
     1a8:	ba 06       	cpc	r11, r26
     1aa:	ba 06       	cpc	r11, r26
     1ac:	ba 06       	cpc	r11, r26
     1ae:	ba 06       	cpc	r11, r26
     1b0:	ba 06       	cpc	r11, r26
     1b2:	ba 06       	cpc	r11, r26
     1b4:	ba 06       	cpc	r11, r26
     1b6:	ba 06       	cpc	r11, r26
     1b8:	ba 06       	cpc	r11, r26
     1ba:	ba 06       	cpc	r11, r26
     1bc:	ba 06       	cpc	r11, r26
     1be:	ba 06       	cpc	r11, r26
     1c0:	ba 06       	cpc	r11, r26
     1c2:	ba 06       	cpc	r11, r26
     1c4:	ba 06       	cpc	r11, r26
     1c6:	ba 06       	cpc	r11, r26
     1c8:	ba 06       	cpc	r11, r26
     1ca:	ba 06       	cpc	r11, r26
     1cc:	ba 06       	cpc	r11, r26
     1ce:	ba 06       	cpc	r11, r26
     1d0:	ba 06       	cpc	r11, r26
     1d2:	ba 06       	cpc	r11, r26
     1d4:	ba 06       	cpc	r11, r26
     1d6:	ba 06       	cpc	r11, r26
     1d8:	ba 06       	cpc	r11, r26
     1da:	ba 06       	cpc	r11, r26
     1dc:	ba 06       	cpc	r11, r26
     1de:	ba 06       	cpc	r11, r26
     1e0:	ba 06       	cpc	r11, r26
     1e2:	ba 06       	cpc	r11, r26
     1e4:	ba 06       	cpc	r11, r26
     1e6:	ba 06       	cpc	r11, r26
     1e8:	ba 06       	cpc	r11, r26
     1ea:	ba 06       	cpc	r11, r26
     1ec:	ba 06       	cpc	r11, r26
     1ee:	ba 06       	cpc	r11, r26
     1f0:	ba 06       	cpc	r11, r26
     1f2:	ba 06       	cpc	r11, r26
     1f4:	ba 06       	cpc	r11, r26
     1f6:	ba 06       	cpc	r11, r26
     1f8:	ba 06       	cpc	r11, r26
     1fa:	ba 06       	cpc	r11, r26
     1fc:	ba 06       	cpc	r11, r26
     1fe:	ba 06       	cpc	r11, r26
     200:	ba 06       	cpc	r11, r26
     202:	ba 06       	cpc	r11, r26
     204:	ba 06       	cpc	r11, r26
     206:	ba 06       	cpc	r11, r26
     208:	ba 06       	cpc	r11, r26
     20a:	ba 06       	cpc	r11, r26
     20c:	ba 06       	cpc	r11, r26
     20e:	ba 06       	cpc	r11, r26
     210:	ba 06       	cpc	r11, r26
     212:	ba 06       	cpc	r11, r26
     214:	ba 06       	cpc	r11, r26
     216:	ba 06       	cpc	r11, r26
     218:	ba 06       	cpc	r11, r26
     21a:	ba 06       	cpc	r11, r26
     21c:	ba 06       	cpc	r11, r26
     21e:	ba 06       	cpc	r11, r26
     220:	ba 06       	cpc	r11, r26
     222:	ba 06       	cpc	r11, r26
     224:	ba 06       	cpc	r11, r26
     226:	ba 06       	cpc	r11, r26
     228:	ba 06       	cpc	r11, r26
     22a:	ba 06       	cpc	r11, r26
     22c:	ba 06       	cpc	r11, r26
     22e:	ba 06       	cpc	r11, r26
     230:	ba 06       	cpc	r11, r26
     232:	ba 06       	cpc	r11, r26
     234:	ba 06       	cpc	r11, r26
     236:	ba 06       	cpc	r11, r26
     238:	ba 06       	cpc	r11, r26
     23a:	ba 06       	cpc	r11, r26
     23c:	ba 06       	cpc	r11, r26
     23e:	ba 06       	cpc	r11, r26
     240:	ba 06       	cpc	r11, r26
     242:	ba 06       	cpc	r11, r26
     244:	ad 06       	cpc	r10, r29
     246:	b9 06       	cpc	r11, r25
     248:	b7 06       	cpc	r11, r23
     24a:	b5 06       	cpc	r11, r21
     24c:	b3 06       	cpc	r11, r19
     24e:	b1 06       	cpc	r11, r17
     250:	af 06       	cpc	r10, r31

00000252 <__trampolines_end>:
     252:	6e 61       	ori	r22, 0x1E	; 30
     254:	6e 00       	.word	0x006e	; ????

00000256 <__c.2332>:
     256:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     266:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     276:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     286:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     296:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     306:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     316:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     326:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     336:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     346:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e4 e1       	ldi	r30, 0x14	; 20
     368:	f7 e3       	ldi	r31, 0x37	; 55
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__do_copy_data+0x10>
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	ac 35       	cpi	r26, 0x5C	; 92
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <__do_copy_data+0xc>

00000376 <__do_clear_bss>:
     376:	23 e0       	ldi	r18, 0x03	; 3
     378:	ac e5       	ldi	r26, 0x5C	; 92
     37a:	b1 e0       	ldi	r27, 0x01	; 1
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	af 3b       	cpi	r26, 0xBF	; 191
     382:	b2 07       	cpc	r27, r18
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
     38a:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	ae 01       	movw	r20, r28
     39c:	4b 5f       	subi	r20, 0xFB	; 251
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	fa 01       	movw	r30, r20
     3a2:	61 91       	ld	r22, Z+
     3a4:	71 91       	ld	r23, Z+
     3a6:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     3a8:	8a ea       	ldi	r24, 0xAA	; 170
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0e 94 0e 1b 	call	0x361c	; 0x361c <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     3b0:	8a ea       	ldi	r24, 0xAA	; 170
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	0e 94 ab 13 	call	0x2756	; 0x2756 <uart0_puts>
	#endif
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     3be:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     3c0:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     3c2:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     3c4:	89 9a       	sbi	0x11, 1	; 17
     3c6:	08 95       	ret

000003c8 <init_driver>:
}

void init_driver(void)
{
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     3c8:	62 e3       	ldi	r22, 0x32	; 50
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 71 12 	call	0x24e2	; 0x24e2 <timer0_init>
	init_display_drv();
     3d0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <init_display_drv>
	init_buttons();
     3d4:	0e 94 85 04 	call	0x90a	; 0x90a <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 80 13 	call	0x2700	; 0x2700 <uart0_init>
	#endif
	init_system();
     3e0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <init_system>
	init_measure();
     3e4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     3e8:	80 b7       	in	r24, 0x30	; 48
     3ea:	8b 7f       	andi	r24, 0xFB	; 251
     3ec:	80 bf       	out	0x30, r24	; 48
     3ee:	08 95       	ret

000003f0 <main>:
}

int main(void)
{
	init_pin();
     3f0:	0e 94 df 01 	call	0x3be	; 0x3be <init_pin>
	sei();
     3f4:	78 94       	sei
	init_driver();
     3f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     3fa:	87 e7       	ldi	r24, 0x77	; 119
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     40a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <disp_process>
		animation();
     40e:	0e 94 29 09 	call	0x1252	; 0x1252 <animation>
		process_button();
     412:	0e 94 db 03 	call	0x7b6	; 0x7b6 <process_button>
		disp_fast_process();
     416:	0e 94 13 11 	call	0x2226	; 0x2226 <disp_fast_process>
		disp_very_fast_process();
     41a:	0e 94 c6 11 	call	0x238c	; 0x238c <disp_very_fast_process>
		dcmotor_process(motor_value);
     41e:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <motor_value>
     422:	0e 94 72 05 	call	0xae4	; 0xae4 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     426:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
     42a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <servo_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     42e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <error_event>
		error_led_blink();
     432:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <error_led_blink>
		measure_process();
     436:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <measure_process>
		accumulator_process();
     43a:	0e 94 40 02 	call	0x480	; 0x480 <accumulator_process>
		accum_led_process();
     43e:	0e 94 89 02 	call	0x512	; 0x512 <accum_led_process>
		buzzer_process();
     442:	0e 94 9c 04 	call	0x938	; 0x938 <buzzer_process>
     446:	e1 cf       	rjmp	.-62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000448 <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <measure_get_filtered_value>
	#endif
    return voltage;
     44e:	bc 01       	movw	r22, r24
     450:	66 0f       	add	r22, r22
     452:	77 1f       	adc	r23, r23
     454:	66 0f       	add	r22, r22
     456:	77 1f       	adc	r23, r23
     458:	86 0f       	add	r24, r22
     45a:	97 1f       	adc	r25, r23
     45c:	bc 01       	movw	r22, r24
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
     466:	26 e6       	ldi	r18, 0x66	; 102
     468:	36 e6       	ldi	r19, 0x66	; 102
     46a:	46 eb       	ldi	r20, 0xB6	; 182
     46c:	50 e4       	ldi	r21, 0x40	; 64
     46e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e8       	ldi	r20, 0x80	; 128
     478:	5a e3       	ldi	r21, 0x3A	; 58
     47a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
}
     47e:	08 95       	ret

00000480 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     480:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
     484:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
     488:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
     48c:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
     490:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <accumulator_timer.1911>
     494:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <accumulator_timer.1911+0x1>
     498:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <accumulator_timer.1911+0x2>
     49c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <accumulator_timer.1911+0x3>
     4a0:	84 17       	cp	r24, r20
     4a2:	95 07       	cpc	r25, r21
     4a4:	a6 07       	cpc	r26, r22
     4a6:	b7 07       	cpc	r27, r23
     4a8:	98 f5       	brcc	.+102    	; 0x510 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	0e 94 a4 0c 	call	0x1948	; 0x1948 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     4b0:	89 35       	cpi	r24, 0x59	; 89
     4b2:	22 e0       	ldi	r18, 0x02	; 2
     4b4:	92 07       	cpc	r25, r18
     4b6:	18 f0       	brcs	.+6      	; 0x4be <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     4be:	8b 38       	cpi	r24, 0x8B	; 139
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	92 07       	cpc	r25, r18
     4c4:	18 f4       	brcc	.+6      	; 0x4cc <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     4c6:	22 e0       	ldi	r18, 0x02	; 2
     4c8:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     4cc:	8e 35       	cpi	r24, 0x5E	; 94
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	92 07       	cpc	r25, r18
     4d2:	18 f4       	brcc	.+6      	; 0x4da <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     4d4:	23 e0       	ldi	r18, 0x03	; 3
     4d6:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     4da:	8c 58       	subi	r24, 0x8C	; 140
     4dc:	91 40       	sbci	r25, 0x01	; 1
     4de:	8c 3c       	cpi	r24, 0xCC	; 204
     4e0:	91 05       	cpc	r25, r1
     4e2:	10 f4       	brcc	.+4      	; 0x4e8 <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     4e4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     4e8:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
     4ec:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
     4f0:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
     4f4:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
     4f8:	8c 59       	subi	r24, 0x9C	; 156
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	af 4f       	sbci	r26, 0xFF	; 255
     4fe:	bf 4f       	sbci	r27, 0xFF	; 255
     500:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <accumulator_timer.1911>
     504:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <accumulator_timer.1911+0x1>
     508:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <accumulator_timer.1911+0x2>
     50c:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <accumulator_timer.1911+0x3>
     510:	08 95       	ret

00000512 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     512:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
     516:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
     51a:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
     51e:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
     522:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     526:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     52a:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     52e:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     532:	84 17       	cp	r24, r20
     534:	95 07       	cpc	r25, r21
     536:	a6 07       	cpc	r26, r22
     538:	b7 07       	cpc	r27, r23
     53a:	08 f0       	brcs	.+2      	; 0x53e <accum_led_process+0x2c>
     53c:	86 c0       	rjmp	.+268    	; 0x64a <accum_led_process+0x138>
	{
        switch (accumulator_state)
     53e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <accumulator_state>
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	e9 f0       	breq	.+58     	; 0x580 <accum_led_process+0x6e>
     546:	30 f0       	brcs	.+12     	; 0x554 <accum_led_process+0x42>
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	99 f1       	breq	.+102    	; 0x5b2 <accum_led_process+0xa0>
     54c:	83 30       	cpi	r24, 0x03	; 3
     54e:	09 f4       	brne	.+2      	; 0x552 <accum_led_process+0x40>
     550:	67 c0       	rjmp	.+206    	; 0x620 <accum_led_process+0x10e>
     552:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     554:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     556:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     55a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     55e:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     562:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     566:	88 53       	subi	r24, 0x38	; 56
     568:	9f 4f       	sbci	r25, 0xFF	; 255
     56a:	af 4f       	sbci	r26, 0xFF	; 255
     56c:	bf 4f       	sbci	r27, 0xFF	; 255
     56e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <process_timer.1915>
     572:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <process_timer.1915+0x1>
     576:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <process_timer.1915+0x2>
     57a:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <process_timer.1915+0x3>
            break;
     57e:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     580:	98 b3       	in	r25, 0x18	; 24
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	89 27       	eor	r24, r25
     586:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     588:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     58c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     590:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     594:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     598:	86 50       	subi	r24, 0x06	; 6
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	af 4f       	sbci	r26, 0xFF	; 255
     59e:	bf 4f       	sbci	r27, 0xFF	; 255
     5a0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <process_timer.1915>
     5a4:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <process_timer.1915+0x1>
     5a8:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <process_timer.1915+0x2>
     5ac:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <process_timer.1915+0x3>
            break;
     5b0:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     5b2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     5b6:	81 11       	cpse	r24, r1
     5b8:	19 c0       	rjmp	.+50     	; 0x5ec <accum_led_process+0xda>
            {
                state_led = 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
                LED_ACUM_ON;
     5c0:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     5c2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     5c6:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     5ca:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     5ce:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     5d2:	8c 50       	subi	r24, 0x0C	; 12
     5d4:	9e 4f       	sbci	r25, 0xFE	; 254
     5d6:	af 4f       	sbci	r26, 0xFF	; 255
     5d8:	bf 4f       	sbci	r27, 0xFF	; 255
     5da:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <process_timer.1915>
     5de:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <process_timer.1915+0x1>
     5e2:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <process_timer.1915+0x2>
     5e6:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <process_timer.1915+0x3>
     5ea:	08 95       	ret
            }
            else if (state_led == 1)
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	69 f5       	brne	.+90     	; 0x64a <accum_led_process+0x138>
            {
                state_led = 0;
     5f0:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
                LED_ACUM_OFF;
     5f4:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     5f6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     5fa:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     5fe:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     602:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     606:	84 52       	subi	r24, 0x24	; 36
     608:	9a 4f       	sbci	r25, 0xFA	; 250
     60a:	af 4f       	sbci	r26, 0xFF	; 255
     60c:	bf 4f       	sbci	r27, 0xFF	; 255
     60e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <process_timer.1915>
     612:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <process_timer.1915+0x1>
     616:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <process_timer.1915+0x2>
     61a:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <process_timer.1915+0x3>
     61e:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     620:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     622:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <process_timer.1915>
     626:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <process_timer.1915+0x1>
     62a:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <process_timer.1915+0x2>
     62e:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <process_timer.1915+0x3>
     632:	88 51       	subi	r24, 0x18	; 24
     634:	9c 4f       	sbci	r25, 0xFC	; 252
     636:	af 4f       	sbci	r26, 0xFF	; 255
     638:	bf 4f       	sbci	r27, 0xFF	; 255
     63a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <process_timer.1915>
     63e:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <process_timer.1915+0x1>
     642:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <process_timer.1915+0x2>
     646:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <process_timer.1915+0x3>
     64a:	08 95       	ret

0000064c <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     64c:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     64e:	97 b1       	in	r25, 0x07	; 7
     650:	98 7f       	andi	r25, 0xF8	; 248
     652:	87 70       	andi	r24, 0x07	; 7
     654:	89 2b       	or	r24, r25
     656:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     658:	37 9a       	sbi	0x06, 7	; 6
     65a:	08 95       	ret

0000065c <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     65c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     65e:	36 99       	sbic	0x06, 6	; 6
     660:	fe cf       	rjmp	.-4      	; 0x65e <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     662:	84 b1       	in	r24, 0x04	; 4
     664:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     666:	08 95       	ret

00000668 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     668:	0e 94 26 03 	call	0x64c	; 0x64c <adc_setchannel>
	return adc_readsel();
     66c:	0e 94 2e 03 	call	0x65c	; 0x65c <adc_readsel>
}
     670:	08 95       	ret

00000672 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     672:	dc 01       	movw	r26, r24
     674:	16 96       	adiw	r26, 0x06	; 6
     676:	ed 91       	ld	r30, X+
     678:	fc 91       	ld	r31, X
     67a:	17 97       	sbiw	r26, 0x07	; 7
     67c:	20 81       	ld	r18, Z
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	18 96       	adiw	r26, 0x08	; 8
     684:	0c 90       	ld	r0, X
     686:	02 c0       	rjmp	.+4      	; 0x68c <read_button+0x1a>
     688:	f5 95       	asr	r31
     68a:	e7 95       	ror	r30
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <read_button+0x16>
     690:	cf 01       	movw	r24, r30
     692:	81 70       	andi	r24, 0x01	; 1
     694:	08 95       	ret

00000696 <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     696:	e7 e5       	ldi	r30, 0x57	; 87
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     6a0:	14 86       	std	Z+12, r1	; 0x0c
     6a2:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     6a4:	12 86       	std	Z+10, r1	; 0x0a
     6a6:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     6a8:	16 86       	std	Z+14, r1	; 0x0e
     6aa:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     6ac:	26 e3       	ldi	r18, 0x36	; 54
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	37 83       	std	Z+7, r19	; 0x07
     6b2:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     6b8:	ea e2       	ldi	r30, 0x2A	; 42
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     6be:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     6c0:	14 86       	std	Z+12, r1	; 0x0c
     6c2:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     6c4:	12 86       	std	Z+10, r1	; 0x0a
     6c6:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     6c8:	16 86       	std	Z+14, r1	; 0x0e
     6ca:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     6cc:	37 83       	std	Z+7, r19	; 0x07
     6ce:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     6d0:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     6d2:	e9 e3       	ldi	r30, 0x39	; 57
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     6d8:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     6da:	14 86       	std	Z+12, r1	; 0x0c
     6dc:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     6de:	12 86       	std	Z+10, r1	; 0x0a
     6e0:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     6e2:	16 86       	std	Z+14, r1	; 0x0e
     6e4:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     6e6:	37 83       	std	Z+7, r19	; 0x07
     6e8:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     6ea:	96 e0       	ldi	r25, 0x06	; 6
     6ec:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     6ee:	e7 e1       	ldi	r30, 0x17	; 23
     6f0:	f3 e0       	ldi	r31, 0x03	; 3
     6f2:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     6f4:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     6f6:	14 86       	std	Z+12, r1	; 0x0c
     6f8:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     6fa:	12 86       	std	Z+10, r1	; 0x0a
     6fc:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     6fe:	16 86       	std	Z+14, r1	; 0x0e
     700:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     702:	40 e3       	ldi	r20, 0x30	; 48
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	57 83       	std	Z+7, r21	; 0x07
     708:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     70e:	e8 e0       	ldi	r30, 0x08	; 8
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     714:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     716:	14 86       	std	Z+12, r1	; 0x0c
     718:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     71a:	12 86       	std	Z+10, r1	; 0x0a
     71c:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     71e:	16 86       	std	Z+14, r1	; 0x0e
     720:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     722:	37 83       	std	Z+7, r19	; 0x07
     724:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     726:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     728:	e8 e4       	ldi	r30, 0x48	; 72
     72a:	f3 e0       	ldi	r31, 0x03	; 3
     72c:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     72e:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     730:	14 86       	std	Z+12, r1	; 0x0c
     732:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     734:	12 86       	std	Z+10, r1	; 0x0a
     736:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     738:	16 86       	std	Z+14, r1	; 0x0e
     73a:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     73c:	69 e3       	ldi	r22, 0x39	; 57
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	77 83       	std	Z+7, r23	; 0x07
     742:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     744:	a4 e0       	ldi	r26, 0x04	; 4
     746:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     748:	e6 e6       	ldi	r30, 0x66	; 102
     74a:	f3 e0       	ldi	r31, 0x03	; 3
     74c:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     74e:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     750:	14 86       	std	Z+12, r1	; 0x0c
     752:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     754:	12 86       	std	Z+10, r1	; 0x0a
     756:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     758:	16 86       	std	Z+14, r1	; 0x0e
     75a:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     75c:	43 e3       	ldi	r20, 0x33	; 51
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	57 83       	std	Z+7, r21	; 0x07
     762:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     764:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     766:	e5 e7       	ldi	r30, 0x75	; 117
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     76c:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     76e:	14 86       	std	Z+12, r1	; 0x0c
     770:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     772:	12 86       	std	Z+10, r1	; 0x0a
     774:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     776:	16 86       	std	Z+14, r1	; 0x0e
     778:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     77a:	37 83       	std	Z+7, r19	; 0x07
     77c:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     77e:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     780:	ea ee       	ldi	r30, 0xEA	; 234
     782:	f2 e0       	ldi	r31, 0x02	; 2
     784:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     786:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     788:	14 86       	std	Z+12, r1	; 0x0c
     78a:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     78c:	12 86       	std	Z+10, r1	; 0x0a
     78e:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     790:	16 86       	std	Z+14, r1	; 0x0e
     792:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     794:	77 83       	std	Z+7, r23	; 0x07
     796:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     798:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     79a:	e9 ef       	ldi	r30, 0xF9	; 249
     79c:	f2 e0       	ldi	r31, 0x02	; 2
     79e:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     7a0:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     7a2:	14 86       	std	Z+12, r1	; 0x0c
     7a4:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     7a6:	12 86       	std	Z+10, r1	; 0x0a
     7a8:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     7aa:	16 86       	std	Z+14, r1	; 0x0e
     7ac:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     7ae:	57 83       	std	Z+7, r21	; 0x07
     7b0:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     7b2:	10 86       	std	Z+8, r1	; 0x08
     7b4:	08 95       	ret

000007b6 <process_button>:
}

void process_button(void)
{
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     7c4:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
     7c8:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
     7cc:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
     7d0:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
     7d4:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer_button>
     7d8:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer_button+0x1>
     7dc:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer_button+0x2>
     7e0:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer_button+0x3>
     7e4:	84 17       	cp	r24, r20
     7e6:	95 07       	cpc	r25, r21
     7e8:	a6 07       	cpc	r26, r22
     7ea:	b7 07       	cpc	r27, r23
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <process_button+0x3a>
     7ee:	85 c0       	rjmp	.+266    	; 0x8fa <__stack+0x9b>
	{
		timer_button = mktime.ms + 20;
     7f0:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
     7f4:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
     7f8:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
     7fc:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
     800:	44 96       	adiw	r24, 0x14	; 20
     802:	a1 1d       	adc	r26, r1
     804:	b1 1d       	adc	r27, r1
     806:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <timer_button>
     80a:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <timer_button+0x1>
     80e:	a0 93 28 03 	sts	0x0328, r26	; 0x800328 <timer_button+0x2>
     812:	b0 93 29 03 	sts	0x0329, r27	; 0x800329 <timer_button+0x3>
     816:	c0 e6       	ldi	r28, 0x60	; 96
     818:	d0 e0       	ldi	r29, 0x00	; 0
     81a:	0f 2e       	mov	r0, r31
     81c:	f4 e7       	ldi	r31, 0x74	; 116
     81e:	ef 2e       	mov	r14, r31
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ff 2e       	mov	r15, r31
     824:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     826:	dd 24       	eor	r13, r13
     828:	d3 94       	inc	r13
     82a:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     82c:	88 81       	ld	r24, Y
     82e:	99 81       	ldd	r25, Y+1	; 0x01
     830:	0e 94 39 03 	call	0x672	; 0x672 <read_button>
			if(red_val != but_tab[i]->value)
     834:	e8 81       	ld	r30, Y
     836:	f9 81       	ldd	r31, Y+1	; 0x01
     838:	95 81       	ldd	r25, Z+5	; 0x05
     83a:	89 17       	cp	r24, r25
     83c:	e1 f0       	breq	.+56     	; 0x876 <__stack+0x17>
			{
				but_tab[i]->value = red_val;
     83e:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	61 f4       	brne	.+24     	; 0x85c <process_button+0xa6>
     844:	88 81       	ld	r24, Y
     846:	99 81       	ldd	r25, Y+1	; 0x01
     848:	dc 01       	movw	r26, r24
     84a:	19 96       	adiw	r26, 0x09	; 9
     84c:	ed 91       	ld	r30, X+
     84e:	fc 91       	ld	r31, X
     850:	1a 97       	sbiw	r26, 0x0a	; 10
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	09 f4       	brne	.+2      	; 0x858 <process_button+0xa2>
     856:	41 c0       	rjmp	.+130    	; 0x8da <__stack+0x7b>
				but_tab[i]->rise_callback(but_tab[i]);
     858:	09 95       	icall
     85a:	3f c0       	rjmp	.+126    	; 0x8da <__stack+0x7b>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     85c:	81 11       	cpse	r24, r1
     85e:	3d c0       	rjmp	.+122    	; 0x8da <__stack+0x7b>
     860:	88 81       	ld	r24, Y
     862:	99 81       	ldd	r25, Y+1	; 0x01
     864:	dc 01       	movw	r26, r24
     866:	1b 96       	adiw	r26, 0x0b	; 11
     868:	ed 91       	ld	r30, X+
     86a:	fc 91       	ld	r31, X
     86c:	1c 97       	sbiw	r26, 0x0c	; 12
     86e:	30 97       	sbiw	r30, 0x00	; 0
     870:	21 f0       	breq	.+8      	; 0x87a <__stack+0x1b>
				but_tab[i]->fall_callback(but_tab[i]);
     872:	09 95       	icall
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
			}
			//timer
			if (red_val == 0)
     876:	81 11       	cpse	r24, r1
     878:	30 c0       	rjmp	.+96     	; 0x8da <__stack+0x7b>
			{
				but_tab[i]->tim_cnt++;
     87a:	d8 01       	movw	r26, r16
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	a2 81       	ldd	r26, Z+2	; 0x02
     886:	b3 81       	ldd	r27, Z+3	; 0x03
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	a1 1d       	adc	r26, r1
     88c:	b1 1d       	adc	r27, r1
     88e:	80 83       	st	Z, r24
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	a2 83       	std	Z+2, r26	; 0x02
     894:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     896:	d8 01       	movw	r26, r16
     898:	ed 91       	ld	r30, X+
     89a:	fc 91       	ld	r31, X
     89c:	80 81       	ld	r24, Z
     89e:	91 81       	ldd	r25, Z+1	; 0x01
     8a0:	a2 81       	ldd	r26, Z+2	; 0x02
     8a2:	b3 81       	ldd	r27, Z+3	; 0x03
     8a4:	88 97       	sbiw	r24, 0x28	; 40
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	10 f1       	brcs	.+68     	; 0x8f0 <__stack+0x91>
     8ac:	84 81       	ldd	r24, Z+4	; 0x04
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	f9 f0       	breq	.+62     	; 0x8f0 <__stack+0x91>
				{
					if (but_tab[i]->timer_callback != 0)
     8b2:	05 84       	ldd	r0, Z+13	; 0x0d
     8b4:	f6 85       	ldd	r31, Z+14	; 0x0e
     8b6:	e0 2d       	mov	r30, r0
     8b8:	30 97       	sbiw	r30, 0x00	; 0
     8ba:	19 f0       	breq	.+6      	; 0x8c2 <__stack+0x63>
					but_tab[i]->timer_callback(&button1);
     8bc:	87 e5       	ldi	r24, 0x57	; 87
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     8c2:	d8 01       	movw	r26, r16
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	10 82       	st	Z, r1
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	12 82       	std	Z+2, r1	; 0x02
     8d0:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	d4 82       	std	Z+4, r13	; 0x04
     8d8:	0b c0       	rjmp	.+22     	; 0x8f0 <__stack+0x91>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     8da:	d8 01       	movw	r26, r16
     8dc:	ed 91       	ld	r30, X+
     8de:	fc 91       	ld	r31, X
     8e0:	11 97       	sbiw	r26, 0x01	; 1
     8e2:	10 82       	st	Z, r1
     8e4:	11 82       	std	Z+1, r1	; 0x01
     8e6:	12 82       	std	Z+2, r1	; 0x02
     8e8:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     8ea:	ed 91       	ld	r30, X+
     8ec:	fc 91       	ld	r31, X
     8ee:	14 82       	std	Z+4, r1	; 0x04
     8f0:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     8f2:	ce 15       	cp	r28, r14
     8f4:	df 05       	cpc	r29, r15
     8f6:	09 f0       	breq	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	98 cf       	rjmp	.-208    	; 0x82a <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	08 95       	ret

0000090a <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     90a:	0e 94 4b 03 	call	0x696	; 0x696 <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     90e:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     910:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     912:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     914:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     916:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     918:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     91a:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     91c:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     91e:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     920:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     922:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     924:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     926:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     928:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     92a:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     92c:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     92e:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     930:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     932:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     934:	a8 9a       	sbi	0x15, 0	; 21
     936:	08 95       	ret

00000938 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     938:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
     93c:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
     940:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
     944:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
     948:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <buzzer_timer>
     94c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <buzzer_timer+0x1>
     950:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <buzzer_timer+0x2>
     954:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <buzzer_timer+0x3>
     958:	84 17       	cp	r24, r20
     95a:	95 07       	cpc	r25, r21
     95c:	a6 07       	cpc	r26, r22
     95e:	b7 07       	cpc	r27, r23
     960:	08 f0       	brcs	.+2      	; 0x964 <buzzer_process+0x2c>
     962:	59 c0       	rjmp	.+178    	; 0xa16 <buzzer_process+0xde>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     964:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
     968:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
     96c:	95 ff       	sbrs	r25, 5
     96e:	37 c0       	rjmp	.+110    	; 0x9de <buzzer_process+0xa6>
     970:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <buzzer_state>
     974:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <buzzer_state+0x1>
     978:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <buzzer_state+0x2>
     97c:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <buzzer_state+0x3>
     980:	89 2b       	or	r24, r25
     982:	8a 2b       	or	r24, r26
     984:	8b 2b       	or	r24, r27
     986:	59 f5       	brne	.+86     	; 0x9de <buzzer_process+0xa6>
		{
			ON_BUZZER;
     988:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     98a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
     98e:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
     992:	9f 7d       	andi	r25, 0xDF	; 223
     994:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
     998:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
			buzzer_state = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a0 e0       	ldi	r26, 0x00	; 0
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <buzzer_state>
     9a8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <buzzer_state+0x1>
     9ac:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <buzzer_state+0x2>
     9b0:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <buzzer_state+0x3>
			buzzer_timer += 100;
     9b4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <buzzer_timer>
     9b8:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <buzzer_timer+0x1>
     9bc:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <buzzer_timer+0x2>
     9c0:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <buzzer_timer+0x3>
     9c4:	8c 59       	subi	r24, 0x9C	; 156
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	af 4f       	sbci	r26, 0xFF	; 255
     9ca:	bf 4f       	sbci	r27, 0xFF	; 255
     9cc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <buzzer_timer>
     9d0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <buzzer_timer+0x1>
     9d4:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <buzzer_timer+0x2>
     9d8:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <buzzer_timer+0x3>
     9dc:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     9de:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     9e0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <buzzer_state>
     9e4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <buzzer_state+0x1>
     9e8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <buzzer_state+0x2>
     9ec:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <buzzer_state+0x3>
			buzzer_timer += 50;
     9f0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <buzzer_timer>
     9f4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <buzzer_timer+0x1>
     9f8:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <buzzer_timer+0x2>
     9fc:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <buzzer_timer+0x3>
     a00:	c2 96       	adiw	r24, 0x32	; 50
     a02:	a1 1d       	adc	r26, r1
     a04:	b1 1d       	adc	r27, r1
     a06:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <buzzer_timer>
     a0a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <buzzer_timer+0x1>
     a0e:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <buzzer_timer+0x2>
     a12:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <buzzer_timer+0x3>
     a16:	08 95       	ret

00000a18 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     a18:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     a1a:	c0 98       	cbi	0x18, 0	; 24
     a1c:	08 95       	ret

00000a1e <dcmotorpwm_init>:
	{
		motorD.state = MOTOR_TRY;
		return 1;
	}
	return 0;
}
     a1e:	8e e9       	ldi	r24, 0x9E	; 158
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	9f 93       	push	r25
     a24:	8f 93       	push	r24
     a26:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     a2a:	88 e8       	ldi	r24, 0x88	; 136
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	0e 94 9d 12 	call	0x253a	; 0x253a <evTime_init>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <motorD>
     a38:	94 98       	cbi	0x12, 4	; 18
     a3a:	15 bc       	out	0x25, r1	; 37
     a3c:	8f 9a       	sbi	0x11, 7	; 17
     a3e:	97 9a       	sbi	0x12, 7	; 18
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	08 95       	ret

00000a46 <dcmotorpwm_deinit>:
     a46:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <motorD>
     a4a:	15 bc       	out	0x25, r1	; 37
     a4c:	97 9a       	sbi	0x12, 7	; 18
     a4e:	94 98       	cbi	0x12, 4	; 18
     a50:	08 95       	ret

00000a52 <dcmotor_is_on>:
     a52:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <motorD>
     a56:	92 50       	subi	r25, 0x02	; 2
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	93 30       	cpi	r25, 0x03	; 3
     a5e:	10 f0       	brcs	.+4      	; 0xa64 <dcmotor_is_on+0x12>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	c9 01       	movw	r24, r18
     a66:	08 95       	ret

00000a68 <dcmotorpwm_stop>:
     a68:	0e 94 29 05 	call	0xa52	; 0xa52 <dcmotor_is_on>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	99 f0       	breq	.+38     	; 0xa96 <dcmotorpwm_stop+0x2e>
     a70:	8c ea       	ldi	r24, 0xAC	; 172
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     a7c:	15 bc       	out	0x25, r1	; 37
     a7e:	97 9a       	sbi	0x12, 7	; 18
     a80:	94 98       	cbi	0x12, 4	; 18
     a82:	e4 e8       	ldi	r30, 0x84	; 132
     a84:	f3 e0       	ldi	r31, 0x03	; 3
     a86:	80 81       	ld	r24, Z
     a88:	81 83       	std	Z+1, r24	; 0x01
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 83       	st	Z, r24
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	08 95       	ret

00000a98 <dcmotorpwm_start>:
     a98:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <motorD>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	d9 f4       	brne	.+54     	; 0xad6 <dcmotorpwm_start+0x3e>
     aa0:	94 9a       	sbi	0x12, 4	; 18
     aa2:	85 b5       	in	r24, 0x25	; 37
     aa4:	80 63       	ori	r24, 0x30	; 48
     aa6:	85 bd       	out	0x25, r24	; 37
     aa8:	85 b5       	in	r24, 0x25	; 37
     aaa:	80 64       	ori	r24, 0x40	; 64
     aac:	85 bd       	out	0x25, r24	; 37
     aae:	85 b5       	in	r24, 0x25	; 37
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	85 bd       	out	0x25, r24	; 37
     ab4:	e4 e8       	ldi	r30, 0x84	; 132
     ab6:	f3 e0       	ldi	r31, 0x03	; 3
     ab8:	80 81       	ld	r24, Z
     aba:	81 83       	std	Z+1, r24	; 0x01
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	80 83       	st	Z, r24
     ac0:	48 ee       	ldi	r20, 0xE8	; 232
     ac2:	53 e0       	ldi	r21, 0x03	; 3
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	88 e8       	ldi	r24, 0x88	; 136
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	08 95       	ret
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	08 95       	ret

00000adc <dcmotor_get_pwm>:
     adc:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <motorD+0x3>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	08 95       	ret

00000ae4 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     ae4:	cf 93       	push	r28
     ae6:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     ae8:	46 e9       	ldi	r20, 0x96	; 150
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	8e e6       	ldi	r24, 0x6E	; 110
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <evTime_process_period>
     af8:	89 2b       	or	r24, r25
     afa:	09 f4       	brne	.+2      	; 0xafe <dcmotor_process+0x1a>
     afc:	58 c0       	rjmp	.+176    	; 0xbae <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     afe:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <motorD>
     b02:	93 30       	cpi	r25, 0x03	; 3
     b04:	e9 f0       	breq	.+58     	; 0xb40 <dcmotor_process+0x5c>
     b06:	28 f4       	brcc	.+10     	; 0xb12 <dcmotor_process+0x2e>
     b08:	91 30       	cpi	r25, 0x01	; 1
     b0a:	b9 f0       	breq	.+46     	; 0xb3a <dcmotor_process+0x56>
     b0c:	92 30       	cpi	r25, 0x02	; 2
     b0e:	41 f0       	breq	.+16     	; 0xb20 <dcmotor_process+0x3c>
     b10:	4e c0       	rjmp	.+156    	; 0xbae <dcmotor_process+0xca>
     b12:	94 30       	cpi	r25, 0x04	; 4
     b14:	09 f4       	brne	.+2      	; 0xb18 <dcmotor_process+0x34>
     b16:	48 c0       	rjmp	.+144    	; 0xba8 <dcmotor_process+0xc4>
     b18:	95 30       	cpi	r25, 0x05	; 5
     b1a:	09 f4       	brne	.+2      	; 0xb1e <dcmotor_process+0x3a>
     b1c:	42 c0       	rjmp	.+132    	; 0xba2 <dcmotor_process+0xbe>
     b1e:	47 c0       	rjmp	.+142    	; 0xbae <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     b20:	c0 93 87 03 	sts	0x0387, r28	; 0x800387 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     b24:	2d ec       	ldi	r18, 0xCD	; 205
     b26:	c2 9f       	mul	r28, r18
     b28:	c0 01       	movw	r24, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	63 e6       	ldi	r22, 0x63	; 99
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
     b34:	6e 5c       	subi	r22, 0xCE	; 206
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     b36:	63 bd       	out	0x23, r22	; 35
			break;
     b38:	3a c0       	rjmp	.+116    	; 0xbae <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     b3a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <motorD+0x3>
			break;
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     b40:	c3 33       	cpi	r28, 0x33	; 51
     b42:	78 f4       	brcc	.+30     	; 0xb62 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     b44:	84 e1       	ldi	r24, 0x14	; 20
     b46:	8c 0f       	add	r24, r28
     b48:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     b4c:	2d ec       	ldi	r18, 0xCD	; 205
     b4e:	82 9f       	mul	r24, r18
     b50:	c0 01       	movw	r24, r0
     b52:	11 24       	eor	r1, r1
     b54:	63 e6       	ldi	r22, 0x63	; 99
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
     b5c:	6e 5c       	subi	r22, 0xCE	; 206

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     b5e:	63 bd       	out	0x23, r22	; 35
     b60:	26 c0       	rjmp	.+76     	; 0xbae <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     b62:	8d ec       	ldi	r24, 0xCD	; 205
     b64:	8c 0f       	add	r24, r28
     b66:	84 31       	cpi	r24, 0x14	; 20
     b68:	78 f4       	brcc	.+30     	; 0xb88 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	8c 0f       	add	r24, r28
     b6e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     b72:	2d ec       	ldi	r18, 0xCD	; 205
     b74:	82 9f       	mul	r24, r18
     b76:	c0 01       	movw	r24, r0
     b78:	11 24       	eor	r1, r1
     b7a:	63 e6       	ldi	r22, 0x63	; 99
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
     b82:	6e 5c       	subi	r22, 0xCE	; 206
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     b84:	63 bd       	out	0x23, r22	; 35
     b86:	13 c0       	rjmp	.+38     	; 0xbae <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     b88:	c0 93 87 03 	sts	0x0387, r28	; 0x800387 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     b8c:	2d ec       	ldi	r18, 0xCD	; 205
     b8e:	c2 9f       	mul	r28, r18
     b90:	c0 01       	movw	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	63 e6       	ldi	r22, 0x63	; 99
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
     b9c:	6e 5c       	subi	r22, 0xCE	; 206
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     b9e:	63 bd       	out	0x23, r22	; 35
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
     ba2:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     ba4:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     bb2:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     bb4:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     bb6:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     bb8:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     bba:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     bbc:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     bbe:	af 9a       	sbi	0x15, 7	; 21
     bc0:	08 95       	ret

00000bc2 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     bc2:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     bc4:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     bc8:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     bca:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     bce:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     bd0:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     bd4:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     bd6:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <DispD4+0x1>
     bda:	08 95       	ret

00000bdc <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     bdc:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
     bde:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
     be0:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
     be2:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
     be4:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
     be6:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
     be8:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
     bea:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
     bec:	ec e9       	ldi	r30, 0x9C	; 156
     bee:	f3 e0       	ldi	r31, 0x03	; 3
     bf0:	8a e9       	ldi	r24, 0x9A	; 154
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
     bf8:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
     bfa:	26 ea       	ldi	r18, 0xA6	; 166
     bfc:	33 e0       	ldi	r19, 0x03	; 3
     bfe:	33 83       	std	Z+3, r19	; 0x03
     c00:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
     c02:	a3 e9       	ldi	r26, 0x93	; 147
     c04:	b3 e0       	ldi	r27, 0x03	; 3
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	3c 93       	st	X, r19
     c0a:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
     c14:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
     c16:	28 e9       	ldi	r18, 0x98	; 152
     c18:	33 e0       	ldi	r19, 0x03	; 3
     c1a:	35 83       	std	Z+5, r19	; 0x05
     c1c:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
     c1e:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
     c20:	84 ea       	ldi	r24, 0xA4	; 164
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	97 83       	std	Z+7, r25	; 0x07
     c26:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
     c28:	ee e8       	ldi	r30, 0x8E	; 142
     c2a:	f3 e0       	ldi	r31, 0x03	; 3
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
     c30:	93 83       	std	Z+3, r25	; 0x03
     c32:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
     c34:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <off_all_displays>
	clear_display();
     c38:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <clear_display>
     c3c:	08 95       	ret

00000c3e <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
	if (DispD->value != displaying_value)
     c42:	fc 01       	movw	r30, r24
     c44:	30 81       	ld	r19, Z
     c46:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
     c4a:	32 17       	cp	r19, r18
     c4c:	09 f4       	brne	.+2      	; 0xc50 <display_set_value+0x12>
     c4e:	95 c0       	rjmp	.+298    	; 0xd7a <display_set_value+0x13c>
     c50:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
     c52:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <clear_display>
		switch(DispD->value)
     c56:	e8 81       	ld	r30, Y
     c58:	8e 2f       	mov	r24, r30
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	91 05       	cpc	r25, r1
     c60:	08 f0       	brcs	.+2      	; 0xc64 <display_set_value+0x26>
     c62:	88 c0       	rjmp	.+272    	; 0xd74 <display_set_value+0x136>
     c64:	fc 01       	movw	r30, r24
     c66:	e6 5d       	subi	r30, 0xD6	; 214
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
     c6e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     c70:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     c72:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c74:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c76:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c78:	aa 98       	cbi	0x15, 2	; 21
			break;
     c7a:	7c c0       	rjmp	.+248    	; 0xd74 <display_set_value+0x136>
			case 1:
			LED_ON_B;
     c7c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     c7e:	dd 98       	cbi	0x1b, 5	; 27
			break;
     c80:	79 c0       	rjmp	.+242    	; 0xd74 <display_set_value+0x136>
			case 2:
			LED_ON_A;
     c82:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     c84:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     c86:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
     c88:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
     c8a:	df 98       	cbi	0x1b, 7	; 27
			break;
     c8c:	73 c0       	rjmp	.+230    	; 0xd74 <display_set_value+0x136>
			case 3:
			LED_ON_A;
     c8e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     c90:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     c92:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     c94:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c96:	df 98       	cbi	0x1b, 7	; 27
			break;
     c98:	6d c0       	rjmp	.+218    	; 0xd74 <display_set_value+0x136>
			case 4:
			LED_ON_F;
     c9a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c9c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
     c9e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     ca0:	dd 98       	cbi	0x1b, 5	; 27
			break;
     ca2:	68 c0       	rjmp	.+208    	; 0xd74 <display_set_value+0x136>
			case 5:
			LED_ON_A;
     ca4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     ca6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     ca8:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     caa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     cac:	df 98       	cbi	0x1b, 7	; 27
			break;
     cae:	62 c0       	rjmp	.+196    	; 0xd74 <display_set_value+0x136>
			case 6:
			LED_ON_A;
     cb0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     cb2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     cb4:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     cb6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     cb8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     cba:	de 98       	cbi	0x1b, 6	; 27
			break;
     cbc:	5b c0       	rjmp	.+182    	; 0xd74 <display_set_value+0x136>
			case 7:
			LED_ON_A;
     cbe:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     cc0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     cc2:	dd 98       	cbi	0x1b, 5	; 27
			break;
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <display_set_value+0x136>
			case 8:
			LED_ON_A;
     cc6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     cc8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     cca:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     ccc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     cce:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     cd0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     cd2:	af 98       	cbi	0x15, 7	; 21
			break;
     cd4:	4f c0       	rjmp	.+158    	; 0xd74 <display_set_value+0x136>
			case 9:
			LED_ON_A;
     cd6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     cd8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     cda:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     cdc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     cde:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     ce0:	af 98       	cbi	0x15, 7	; 21
			break;
     ce2:	48 c0       	rjmp	.+144    	; 0xd74 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
     ce4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     ce6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     ce8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
     cea:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     cec:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     cee:	af 98       	cbi	0x15, 7	; 21
			break;
     cf0:	41 c0       	rjmp	.+130    	; 0xd74 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
     cf2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     cf4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     cf6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     cf8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     cfa:	af 98       	cbi	0x15, 7	; 21
			break;
     cfc:	3b c0       	rjmp	.+118    	; 0xd74 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
     cfe:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     d00:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d02:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d04:	aa 98       	cbi	0x15, 2	; 21
			break;
     d06:	36 c0       	rjmp	.+108    	; 0xd74 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
     d08:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     d0a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     d0c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d0e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     d10:	af 98       	cbi	0x15, 7	; 21
			break;
     d12:	30 c0       	rjmp	.+96     	; 0xd74 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
     d14:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     d16:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d18:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d1a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     d1c:	af 98       	cbi	0x15, 7	; 21
			break;
     d1e:	2a c0       	rjmp	.+84     	; 0xd74 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
     d20:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
     d22:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d24:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     d26:	af 98       	cbi	0x15, 7	; 21
			break;
     d28:	25 c0       	rjmp	.+74     	; 0xd74 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
     d2a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     d2c:	af 98       	cbi	0x15, 7	; 21
			break;
     d2e:	22 c0       	rjmp	.+68     	; 0xd74 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
     d30:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     d32:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d34:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     d36:	af 98       	cbi	0x15, 7	; 21
			break;
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
     d3a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     d3c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
     d3e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d40:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     d42:	af 98       	cbi	0x15, 7	; 21
			break;
     d44:	17 c0       	rjmp	.+46     	; 0xd74 <display_set_value+0x136>
			case 's':
			LED_ON_A;
     d46:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
     d48:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     d4a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     d4c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     d4e:	af 98       	cbi	0x15, 7	; 21
			break;
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
     d52:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     d54:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     d56:	aa 98       	cbi	0x15, 2	; 21
			break;
     d58:	0d c0       	rjmp	.+26     	; 0xd74 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
     d5a:	af 98       	cbi	0x15, 7	; 21
			break;
     d5c:	0b c0       	rjmp	.+22     	; 0xd74 <display_set_value+0x136>
			case 254:
			LED_ON_F;
     d5e:	aa 98       	cbi	0x15, 2	; 21
			break;
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <display_set_value+0x136>
			case 253:
			LED_ON_E;
     d62:	de 98       	cbi	0x1b, 6	; 27
			break;
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <display_set_value+0x136>
			case 252:
			LED_ON_D;
     d66:	df 98       	cbi	0x1b, 7	; 27
			break;
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <display_set_value+0x136>
			case 251:
			LED_ON_C;
     d6a:	dd 98       	cbi	0x1b, 5	; 27
			break;
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <display_set_value+0x136>
			case 250:
			LED_ON_B;
     d6e:	ad 98       	cbi	0x15, 5	; 21
			break;
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <display_set_value+0x136>
			case 249:
			LED_ON_A;
     d72:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
     d74:	88 81       	ld	r24, Y
     d76:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <on_display>:
void on_display(disp_drv *DispD)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
	off_all_displays();
     d86:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <off_all_displays>
	display_set_value(DispD);
     d8a:	ce 01       	movw	r24, r28
     d8c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	ca 39       	cpi	r28, 0x9A	; 154
     d94:	d8 07       	cpc	r29, r24
     d96:	29 f4       	brne	.+10     	; 0xda2 <on_display+0x22>
	{
		LED_ON_DISP1;
     d98:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <DispD1+0x1>
     da0:	19 c0       	rjmp	.+50     	; 0xdd4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	c6 3a       	cpi	r28, 0xA6	; 166
     da6:	d8 07       	cpc	r29, r24
     da8:	29 f4       	brne	.+10     	; 0xdb4 <on_display+0x34>
	{
		LED_ON_DISP2;
     daa:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <DispD2+0x1>
     db2:	10 c0       	rjmp	.+32     	; 0xdd4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	c8 39       	cpi	r28, 0x98	; 152
     db8:	d8 07       	cpc	r29, r24
     dba:	29 f4       	brne	.+10     	; 0xdc6 <on_display+0x46>
	{
		LED_ON_DISP3;
     dbc:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <DispD3+0x1>
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
     dc6:	c4 5a       	subi	r28, 0xA4	; 164
     dc8:	d3 40       	sbci	r29, 0x03	; 3
     dca:	21 f4       	brne	.+8      	; 0xdd4 <on_display+0x54>
	{
		LED_ON_DISP4;
     dcc:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <DispD4+0x1>
	}
	#endif
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
     de6:	c0 81       	ld	r28, Z
     de8:	d1 81       	ldd	r29, Z+1	; 0x01
     dea:	21 96       	adiw	r28, 0x01	; 1
     dec:	d1 83       	std	Z+1, r29	; 0x01
     dee:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
     df0:	9e 01       	movw	r18, r28
     df2:	ad ec       	ldi	r26, 0xCD	; 205
     df4:	bc ec       	ldi	r27, 0xCC	; 204
     df6:	0e 94 8a 19 	call	0x3314	; 0x3314 <__umulhisi3>
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	9c 01       	movw	r18, r24
     e08:	22 0f       	add	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	c8 17       	cp	r28, r24
     e1e:	d9 07       	cpc	r29, r25
     e20:	01 f5       	brne	.+64     	; 0xe62 <display_process+0x88>
     e22:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
     e24:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <iteration>
     e28:	14 30       	cpi	r17, 0x04	; 4
     e2a:	58 f4       	brcc	.+22     	; 0xe42 <display_process+0x68>
			on_display(disp_tab[iteration]);
     e2c:	e1 2f       	mov	r30, r17
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	e4 56       	subi	r30, 0x64	; 100
     e36:	fc 4f       	sbci	r31, 0xFC	; 252
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	0e 94 c0 06 	call	0xd80	; 0xd80 <on_display>
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <display_process+0x6c>
		else
			off_all_displays();
     e42:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <off_all_displays>
		iteration++;
     e46:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     e48:	15 30       	cpi	r17, 0x05	; 5
     e4a:	19 f0       	breq	.+6      	; 0xe52 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
     e4c:	10 93 73 01 	sts	0x0173, r17	; 0x800173 <iteration>
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     e52:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
     e56:	c0 39       	cpi	r28, 0x90	; 144
     e58:	d1 40       	sbci	r29, 0x01	; 1
     e5a:	19 f4       	brne	.+6      	; 0xe62 <display_process+0x88>
     e5c:	f7 01       	movw	r30, r14
     e5e:	11 82       	std	Z+1, r1	; 0x01
     e60:	10 82       	st	Z, r1
	}
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	08 95       	ret

00000e6e <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
     e6e:	fc 01       	movw	r30, r24
	if (number >= 100) return;
     e70:	64 36       	cpi	r22, 0x64	; 100
     e72:	f8 f4       	brcc	.+62     	; 0xeb2 <disp_set_number+0x44>
	else if (number == 0)
     e74:	61 11       	cpse	r22, r1
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
     e78:	a0 81       	ld	r26, Z
     e7a:	b1 81       	ldd	r27, Z+1	; 0x01
     e7c:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
     e7e:	02 80       	ldd	r0, Z+2	; 0x02
     e80:	f3 81       	ldd	r31, Z+3	; 0x03
     e82:	e0 2d       	mov	r30, r0
     e84:	10 82       	st	Z, r1
     e86:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
     e88:	a0 81       	ld	r26, Z
     e8a:	b1 81       	ldd	r27, Z+1	; 0x01
     e8c:	9d ec       	ldi	r25, 0xCD	; 205
     e8e:	69 9f       	mul	r22, r25
     e90:	91 2d       	mov	r25, r1
     e92:	11 24       	eor	r1, r1
     e94:	96 95       	lsr	r25
     e96:	96 95       	lsr	r25
     e98:	96 95       	lsr	r25
     e9a:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
     e9c:	02 80       	ldd	r0, Z+2	; 0x02
     e9e:	f3 81       	ldd	r31, Z+3	; 0x03
     ea0:	e0 2d       	mov	r30, r0
     ea2:	89 2f       	mov	r24, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	98 2f       	mov	r25, r24
     ea8:	99 0f       	add	r25, r25
     eaa:	99 0f       	add	r25, r25
     eac:	89 0f       	add	r24, r25
     eae:	68 1b       	sub	r22, r24
     eb0:	60 83       	st	Z, r22
     eb2:	08 95       	ret

00000eb4 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
     eb4:	fc 01       	movw	r30, r24
     eb6:	60 83       	st	Z, r22
     eb8:	08 95       	ret

00000eba <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	39 f0       	breq	.+14     	; 0xecc <dip_set_value+0x12>
     ebe:	18 f0       	brcs	.+6      	; 0xec6 <dip_set_value+0xc>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	39 f0       	breq	.+14     	; 0xed2 <dip_set_value+0x18>
     ec4:	08 95       	ret
     ec6:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <motor_disp_value>
     eca:	08 95       	ret
     ecc:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <servo_disp_value>
     ed0:	08 95       	ret
     ed2:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <servo_disp_value>
     ed6:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <motor_disp_value>
     eda:	08 95       	ret

00000edc <disp_get_state>:
     edc:	88 23       	and	r24, r24
     ede:	19 f0       	breq	.+6      	; 0xee6 <disp_get_state+0xa>
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	29 f0       	breq	.+10     	; 0xeee <disp_get_state+0x12>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <disp_get_state+0x1a>
     ee6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	08 95       	ret
     eee:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	08 95       	ret
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	08 95       	ret

00000efc <disp_disable_voltage>:
     efc:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     f00:	86 30       	cpi	r24, 0x06	; 6
     f02:	21 f4       	brne	.+8      	; 0xf0c <disp_disable_voltage+0x10>
     f04:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <disp1_last_state>
     f08:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <segment1+0x4>
     f0c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
     f10:	86 30       	cpi	r24, 0x06	; 6
     f12:	21 f4       	brne	.+8      	; 0xf1c <disp_disable_voltage+0x20>
     f14:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <disp2_last_state>
     f18:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <segment2+0x4>
     f1c:	08 95       	ret

00000f1e <disp_set_state>:
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	a1 f0       	breq	.+40     	; 0xf4a <disp_set_state+0x2c>
     f22:	18 f0       	brcs	.+6      	; 0xf2a <disp_set_state+0xc>
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	09 f1       	breq	.+66     	; 0xf6a <disp_set_state+0x4c>
     f28:	08 95       	ret
     f2a:	66 30       	cpi	r22, 0x06	; 6
     f2c:	21 f4       	brne	.+8      	; 0xf36 <disp_set_state+0x18>
     f2e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     f32:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <disp1_last_state>
     f36:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     f3a:	86 30       	cpi	r24, 0x06	; 6
     f3c:	19 f4       	brne	.+6      	; 0xf44 <disp_set_state+0x26>
     f3e:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <disp1_last_state>
     f42:	08 95       	ret
     f44:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <segment1+0x4>
     f48:	08 95       	ret
     f4a:	66 30       	cpi	r22, 0x06	; 6
     f4c:	21 f4       	brne	.+8      	; 0xf56 <disp_set_state+0x38>
     f4e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
     f52:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <disp2_last_state>
     f56:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
     f5a:	86 30       	cpi	r24, 0x06	; 6
     f5c:	19 f4       	brne	.+6      	; 0xf64 <disp_set_state+0x46>
     f5e:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <disp2_last_state>
     f62:	08 95       	ret
     f64:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <segment2+0x4>
     f68:	08 95       	ret
     f6a:	66 30       	cpi	r22, 0x06	; 6
     f6c:	41 f4       	brne	.+16     	; 0xf7e <disp_set_state+0x60>
     f6e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     f72:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <disp1_last_state>
     f76:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
     f7a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <disp2_last_state>
     f7e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     f82:	86 30       	cpi	r24, 0x06	; 6
     f84:	29 f4       	brne	.+10     	; 0xf90 <disp_set_state+0x72>
     f86:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <disp2_last_state>
     f8a:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <disp1_last_state>
     f8e:	08 95       	ret
     f90:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <segment1+0x4>
     f94:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <segment2+0x4>
     f98:	08 95       	ret

00000f9a <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
     f9a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
     f9e:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
     fa2:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
     fa6:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
     faa:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <timer_disp_process.1974>
     fae:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <timer_disp_process.1974+0x1>
     fb2:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <timer_disp_process.1974+0x2>
     fb6:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <timer_disp_process.1974+0x3>
     fba:	48 17       	cp	r20, r24
     fbc:	59 07       	cpc	r21, r25
     fbe:	6a 07       	cpc	r22, r26
     fc0:	7b 07       	cpc	r23, r27
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <disp_process+0x2c>
     fc4:	26 c1       	rjmp	.+588    	; 0x1212 <disp_process+0x278>
	{
        
        switch(segment1.state)
     fc6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <disp_process+0x36>
     fce:	59 c0       	rjmp	.+178    	; 0x1082 <disp_process+0xe8>
     fd0:	30 f4       	brcc	.+12     	; 0xfde <disp_process+0x44>
     fd2:	88 23       	and	r24, r24
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <disp_process+0x3e>
     fd6:	87 c0       	rjmp	.+270    	; 0x10e6 <disp_process+0x14c>
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	39 f1       	breq	.+78     	; 0x102a <disp_process+0x90>
     fdc:	8e c0       	rjmp	.+284    	; 0x10fa <disp_process+0x160>
     fde:	85 30       	cpi	r24, 0x05	; 5
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <disp_process+0x4a>
     fe2:	74 c0       	rjmp	.+232    	; 0x10cc <disp_process+0x132>
     fe4:	48 f1       	brcs	.+82     	; 0x1038 <disp_process+0x9e>
     fe6:	86 30       	cpi	r24, 0x06	; 6
     fe8:	09 f0       	breq	.+2      	; 0xfec <disp_process+0x52>
     fea:	87 c0       	rjmp	.+270    	; 0x10fa <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
     fec:	0e 94 24 02 	call	0x448	; 0x448 <accum_get_voltage>
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	48 ec       	ldi	r20, 0xC8	; 200
     ff6:	52 e4       	ldi	r21, 0x42	; 66
     ff8:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
     ffc:	0e 94 9e 14 	call	0x293c	; 0x293c <__fixsfsi>
    1000:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <voltage+0x1>
    1004:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <voltage>
            disp_set_number(&segment1, voltage/100);
    1008:	9b 01       	movw	r18, r22
    100a:	36 95       	lsr	r19
    100c:	27 95       	ror	r18
    100e:	36 95       	lsr	r19
    1010:	27 95       	ror	r18
    1012:	ab e7       	ldi	r26, 0x7B	; 123
    1014:	b4 e1       	ldi	r27, 0x14	; 20
    1016:	0e 94 8a 19 	call	0x3314	; 0x3314 <__umulhisi3>
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	68 2f       	mov	r22, r24
    1020:	83 e9       	ldi	r24, 0x93	; 147
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
            break;
    1028:	68 c0       	rjmp	.+208    	; 0x10fa <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    102a:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <motor_disp_value>
    102e:	83 e9       	ldi	r24, 0x93	; 147
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
            break;
    1036:	61 c0       	rjmp	.+194    	; 0x10fa <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1038:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	31 f0       	breq	.+12     	; 0x104c <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1046:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <segment2+0x4>
                break;
    104a:	57 c0       	rjmp	.+174    	; 0x10fa <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    104c:	48 51       	subi	r20, 0x18	; 24
    104e:	5c 4f       	sbci	r21, 0xFC	; 252
    1050:	6f 4f       	sbci	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timer_disp_process.1974>
    1058:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timer_disp_process.1974+0x1>
    105c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timer_disp_process.1974+0x2>
    1060:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timer_disp_process.1974+0x3>
			DispD2.value = 's';
    1064:	83 e7       	ldi	r24, 0x73	; 115
    1066:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <DispD2>
			DispD1.value = 'a';
    106a:	81 e6       	ldi	r24, 0x61	; 97
    106c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <DispD1>
			DispD3.value = 'p';
    1070:	80 e7       	ldi	r24, 0x70	; 112
    1072:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <DispD3>
			segment1.state = SEG_VALUE;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <segment1+0x4>
			segment2.state = SEG_VALUE;
    107c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <segment2+0x4>
			return;
    1080:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    1082:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	31 f0       	breq	.+12     	; 0x1096 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    1090:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <segment2+0x4>
                break;
    1094:	32 c0       	rjmp	.+100    	; 0x10fa <disp_process+0x160>
            }
			timer_disp_process += 1000;
    1096:	48 51       	subi	r20, 0x18	; 24
    1098:	5c 4f       	sbci	r21, 0xFC	; 252
    109a:	6f 4f       	sbci	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <timer_disp_process.1974>
    10a2:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <timer_disp_process.1974+0x1>
    10a6:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <timer_disp_process.1974+0x2>
    10aa:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
    10ae:	8c e6       	ldi	r24, 0x6C	; 108
    10b0:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <DispD2>
			DispD1.value = 'o';
    10b4:	8f e6       	ldi	r24, 0x6F	; 111
    10b6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <DispD1>
			DispD3.value = 'p';
    10ba:	80 e7       	ldi	r24, 0x70	; 112
    10bc:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <DispD3>
			segment1.state = SEG_VALUE;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <segment1+0x4>
			segment2.state = SEG_VALUE;
    10c6:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <segment2+0x4>
            break;
    10ca:	17 c0       	rjmp	.+46     	; 0x10fa <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    10cc:	85 e6       	ldi	r24, 0x65	; 101
    10ce:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <DispD2>
			DispD1.value = 'r';
    10d2:	82 e7       	ldi	r24, 0x72	; 114
    10d4:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <DispD1>
			disp_set_number(&segment2, error_reason);
    10d8:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <error_reason>
    10dc:	8e e8       	ldi	r24, 0x8E	; 142
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
            break;
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    10e6:	68 ef       	ldi	r22, 0xF8	; 248
    10e8:	8a e9       	ldi	r24, 0x9A	; 154
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    10f0:	68 ef       	ldi	r22, 0xF8	; 248
    10f2:	86 ea       	ldi	r24, 0xA6	; 166
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    10fa:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	19 f1       	breq	.+70     	; 0x1148 <disp_process+0x1ae>
    1102:	48 f1       	brcs	.+82     	; 0x1156 <disp_process+0x1bc>
    1104:	86 30       	cpi	r24, 0x06	; 6
    1106:	19 f0       	breq	.+6      	; 0x110e <disp_process+0x174>
    1108:	8d 30       	cpi	r24, 0x0D	; 13
    110a:	81 f1       	breq	.+96     	; 0x116c <disp_process+0x1d2>
    110c:	6f c0       	rjmp	.+222    	; 0x11ec <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    110e:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <voltage>
    1112:	50 91 88 01 	lds	r21, 0x0188	; 0x800188 <voltage+0x1>
    1116:	9a 01       	movw	r18, r20
    1118:	36 95       	lsr	r19
    111a:	27 95       	ror	r18
    111c:	36 95       	lsr	r19
    111e:	27 95       	ror	r18
    1120:	ab e7       	ldi	r26, 0x7B	; 123
    1122:	b4 e1       	ldi	r27, 0x14	; 20
    1124:	0e 94 8a 19 	call	0x3314	; 0x3314 <__umulhisi3>
    1128:	96 95       	lsr	r25
    112a:	87 95       	ror	r24
    112c:	64 e6       	ldi	r22, 0x64	; 100
    112e:	68 9f       	mul	r22, r24
    1130:	90 01       	movw	r18, r0
    1132:	69 9f       	mul	r22, r25
    1134:	30 0d       	add	r19, r0
    1136:	11 24       	eor	r1, r1
    1138:	ba 01       	movw	r22, r20
    113a:	62 1b       	sub	r22, r18
    113c:	73 0b       	sbc	r23, r19
    113e:	8e e8       	ldi	r24, 0x8E	; 142
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
            break;
    1146:	52 c0       	rjmp	.+164    	; 0x11ec <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1148:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <servo_disp_value>
    114c:	8e e8       	ldi	r24, 0x8E	; 142
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
            break;
    1154:	4b c0       	rjmp	.+150    	; 0x11ec <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1156:	68 ef       	ldi	r22, 0xF8	; 248
    1158:	88 e9       	ldi	r24, 0x98	; 152
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1160:	68 ef       	ldi	r22, 0xF8	; 248
    1162:	84 ea       	ldi	r24, 0xA4	; 164
    1164:	93 e0       	ldi	r25, 0x03	; 3
    1166:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
            break;
    116a:	40 c0       	rjmp	.+128    	; 0x11ec <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    116c:	44 ef       	ldi	r20, 0xF4	; 244
    116e:	51 e0       	ldi	r21, 0x01	; 1
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	82 e8       	ldi	r24, 0x82	; 130
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <evTime_process_period>
    117c:	89 2b       	or	r24, r25
    117e:	b1 f1       	breq	.+108    	; 0x11ec <disp_process+0x252>
			{
				if (blink_state == 0)
    1180:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <blink_state>
    1184:	81 11       	cpse	r24, r1
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <disp_process+0x20a>
				{
					blink_state = 1;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    118e:	67 ef       	ldi	r22, 0xF7	; 247
    1190:	88 e9       	ldi	r24, 0x98	; 152
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    1198:	67 ef       	ldi	r22, 0xF7	; 247
    119a:	84 ea       	ldi	r24, 0xA4	; 164
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
    11a2:	24 c0       	rjmp	.+72     	; 0x11ec <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    11a4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <blink_state>
					if (blink_cnt == 0) 
    11a8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <blink_cnt>
    11ac:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <blink_cnt+0x1>
    11b0:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <blink_cnt+0x2>
    11b4:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <blink_cnt+0x3>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	a1 05       	cpc	r26, r1
    11bc:	b1 05       	cpc	r27, r1
    11be:	29 f4       	brne	.+10     	; 0x11ca <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
						break;
    11c8:	11 c0       	rjmp	.+34     	; 0x11ec <disp_process+0x252>
					}
					blink_cnt--;
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	a1 09       	sbc	r26, r1
    11ce:	b1 09       	sbc	r27, r1
    11d0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <blink_cnt>
    11d4:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <blink_cnt+0x1>
    11d8:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <blink_cnt+0x2>
    11dc:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    11e0:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <second_disp_blink_val>
    11e4:	8e e8       	ldi	r24, 0x8E	; 142
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	0e 94 37 07 	call	0xe6e	; 0xe6e <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    11ec:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <timer_disp_process.1974>
    11f0:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <timer_disp_process.1974+0x1>
    11f4:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <timer_disp_process.1974+0x2>
    11f8:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <timer_disp_process.1974+0x3>
    11fc:	c2 96       	adiw	r24, 0x32	; 50
    11fe:	a1 1d       	adc	r26, r1
    1200:	b1 1d       	adc	r27, r1
    1202:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timer_disp_process.1974>
    1206:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timer_disp_process.1974+0x1>
    120a:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <timer_disp_process.1974+0x2>
    120e:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <timer_disp_process.1974+0x3>
    1212:	08 95       	ret

00001214 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1218:	00 91 bb 03 	lds	r16, 0x03BB	; 0x8003bb <mktime+0x2>
    121c:	10 91 bc 03 	lds	r17, 0x03BC	; 0x8003bc <mktime+0x3>
    1220:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <mktime+0x4>
    1224:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <mktime+0x5>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	80 0f       	add	r24, r16
    122e:	91 1f       	adc	r25, r17
    1230:	a2 1f       	adc	r26, r18
    1232:	b3 1f       	adc	r27, r19
    1234:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <animation_time>
    1238:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <animation_time+0x1>
    123c:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <animation_time+0x2>
    1240:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    1244:	62 e0       	ldi	r22, 0x02	; 2
    1246:	84 2f       	mov	r24, r20
    1248:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
}
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	08 95       	ret

00001252 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1252:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	29 f0       	breq	.+10     	; 0x1264 <animation+0x12>
    125a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	09 f0       	breq	.+2      	; 0x1264 <animation+0x12>
    1262:	78 c0       	rjmp	.+240    	; 0x1354 <animation+0x102>
    1264:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    1268:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    126c:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    1270:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    1274:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timer_anim.1994>
    1278:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <timer_anim.1994+0x1>
    127c:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <timer_anim.1994+0x2>
    1280:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <timer_anim.1994+0x3>
    1284:	84 17       	cp	r24, r20
    1286:	95 07       	cpc	r25, r21
    1288:	a6 07       	cpc	r26, r22
    128a:	b7 07       	cpc	r27, r23
    128c:	08 f0       	brcs	.+2      	; 0x1290 <animation+0x3e>
    128e:	62 c0       	rjmp	.+196    	; 0x1354 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1290:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
    1294:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
    1298:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
    129c:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
    12a0:	81 55       	subi	r24, 0x51	; 81
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	af 4f       	sbci	r26, 0xFF	; 255
    12a6:	bf 4f       	sbci	r27, 0xFF	; 255
    12a8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timer_anim.1994>
    12ac:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timer_anim.1994+0x1>
    12b0:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timer_anim.1994+0x2>
    12b4:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    12b8:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <segment1+0x4>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	61 f4       	brne	.+24     	; 0x12d8 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    12c0:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    12c4:	8a e9       	ldi	r24, 0x9A	; 154
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    12cc:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    12d0:	86 ea       	ldi	r24, 0xA6	; 166
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    12d8:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <segment2+0x4>
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	61 f4       	brne	.+24     	; 0x12f8 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    12e0:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    12e4:	88 e9       	ldi	r24, 0x98	; 152
    12e6:	93 e0       	ldi	r25, 0x03	; 3
    12e8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    12ec:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    12f0:	84 ea       	ldi	r24, 0xA4	; 164
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    12f8:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    12fc:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    1300:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    1304:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    1308:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <animation_time>
    130c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <animation_time+0x1>
    1310:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <animation_time+0x2>
    1314:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <animation_time+0x3>
    1318:	84 17       	cp	r24, r20
    131a:	95 07       	cpc	r25, r21
    131c:	a6 07       	cpc	r26, r22
    131e:	b7 07       	cpc	r27, r23
    1320:	28 f4       	brcc	.+10     	; 0x132c <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
			LED_ACUM_OFF;
    132a:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    132c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    1330:	9f 5f       	subi	r25, 0xFF	; 255
    1332:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    1336:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    1340:	9f 3f       	cpi	r25, 0xFF	; 255
    1342:	19 f4       	brne	.+6      	; 0x134a <animation+0xf8>
    1344:	99 ef       	ldi	r25, 0xF9	; 249
    1346:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    134a:	88 3f       	cpi	r24, 0xF8	; 248
    134c:	19 f4       	brne	.+6      	; 0x1354 <animation+0x102>
    134e:	8e ef       	ldi	r24, 0xFE	; 254
    1350:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    1354:	08 95       	ret

00001356 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1356:	e1 99       	sbic	0x1c, 1	; 28
    1358:	fe cf       	rjmp	.-4      	; 0x1356 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    135a:	9f bb       	out	0x1f, r25	; 31
    135c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    135e:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1360:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1362:	e1 9a       	sbi	0x1c, 1	; 28
    1364:	08 95       	ret

00001366 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1366:	e1 99       	sbic	0x1c, 1	; 28
    1368:	fe cf       	rjmp	.-4      	; 0x1366 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    136a:	9f bb       	out	0x1f, r25	; 31
    136c:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    136e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1370:	8d b3       	in	r24, 0x1d	; 29
    1372:	08 95       	ret

00001374 <error_init>:
}

uint16_t errorGetMotorVal(void)
{
	return motor_error_value;
}
    1374:	80 ea       	ldi	r24, 0xA0	; 160
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 e7 12 	call	0x25ce	; 0x25ce <evTime_off>
    137c:	89 e9       	ldi	r24, 0x99	; 153
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 e7 12 	call	0x25ce	; 0x25ce <evTime_off>
    1384:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <led_blink>
    1388:	08 95       	ret

0000138a <error_deinit>:
    138a:	80 ea       	ldi	r24, 0xA0	; 160
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <evTime_off>
    1392:	89 e9       	ldi	r24, 0x99	; 153
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 e7 12 	call	0x25ce	; 0x25ce <evTime_off>
    139a:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <led_blink>
    139e:	08 95       	ret

000013a0 <error_event>:

void error_event(void)
{
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    13ac:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    13b0:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    13b4:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    13b8:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    13bc:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <error_event_timer.1925>
    13c0:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <error_event_timer.1925+0x1>
    13c4:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <error_event_timer.1925+0x2>
    13c8:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <error_event_timer.1925+0x3>
    13cc:	84 17       	cp	r24, r20
    13ce:	95 07       	cpc	r25, r21
    13d0:	a6 07       	cpc	r26, r22
    13d2:	b7 07       	cpc	r27, r23
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <error_event+0x38>
    13d6:	8b c1       	rjmp	.+790    	; 0x16ee <error_event+0x34e>
    13d8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    13dc:	80 ff       	sbrs	r24, 0
    13de:	87 c1       	rjmp	.+782    	; 0x16ee <error_event+0x34e>
	{
		error_event_timer = mktime.ms + 500;
    13e0:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    13e4:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    13e8:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    13ec:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    13f0:	4c 50       	subi	r20, 0x0C	; 12
    13f2:	5e 4f       	sbci	r21, 0xFE	; 254
    13f4:	6f 4f       	sbci	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <error_event_timer.1925>
    13fc:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <error_event_timer.1925+0x1>
    1400:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <error_event_timer.1925+0x2>
    1404:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <error_event_timer.1925+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1408:	81 fd       	sbrc	r24, 1
    140a:	71 c1       	rjmp	.+738    	; 0x16ee <error_event+0x34e>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    140c:	0e 94 6e 05 	call	0xadc	; 0xadc <dcmotor_get_pwm>
    1410:	ec 01       	movw	r28, r24


static uint16_t count_motor_error_value(uint16_t x)
{
	uint16_t error_max_voltage;
	float voltage = accum_get_voltage();
    1412:	0e 94 24 02 	call	0x448	; 0x448 <accum_get_voltage>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
	if (voltage < 9) voltage = 9;
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e1       	ldi	r20, 0x10	; 16
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 27 14 	call	0x284e	; 0x284e <__cmpsf2>
    1426:	88 23       	and	r24, r24
    1428:	44 f4       	brge	.+16     	; 0x143a <error_event+0x9a>
    142a:	0f 2e       	mov	r0, r31
    142c:	c1 2c       	mov	r12, r1
    142e:	d1 2c       	mov	r13, r1
    1430:	f0 e1       	ldi	r31, 0x10	; 16
    1432:	ef 2e       	mov	r14, r31
    1434:	f1 e4       	ldi	r31, 0x41	; 65
    1436:	ff 2e       	mov	r15, r31
    1438:	f0 2d       	mov	r31, r0
	if (x >=10 && x < 15)
    143a:	ce 01       	movw	r24, r28
    143c:	0a 97       	sbiw	r24, 0x0a	; 10
    143e:	05 97       	sbiw	r24, 0x05	; 5
    1440:	78 f5       	brcc	.+94     	; 0x14a0 <error_event+0x100>
	error_max_voltage = 2*x-15 + (voltage-9)*x/6;
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e1       	ldi	r20, 0x10	; 16
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	c7 01       	movw	r24, r14
    144c:	b6 01       	movw	r22, r12
    144e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	be 01       	movw	r22, r28
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	c7 01       	movw	r24, r14
    1466:	b6 01       	movw	r22, r12
    1468:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 ec       	ldi	r20, 0xC0	; 192
    1472:	50 e4       	ldi	r21, 0x40	; 64
    1474:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	be 01       	movw	r22, r28
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	6f 50       	subi	r22, 0x0F	; 15
    1484:	71 09       	sbc	r23, r1
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    148e:	9b 01       	movw	r18, r22
    1490:	ac 01       	movw	r20, r24
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    149a:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    149e:	00 c1       	rjmp	.+512    	; 0x16a0 <error_event+0x300>
	else if (x >=15 && x < 25)
    14a0:	ce 01       	movw	r24, r28
    14a2:	0f 97       	sbiw	r24, 0x0f	; 15
    14a4:	0a 97       	sbiw	r24, 0x0a	; 10
    14a6:	78 f5       	brcc	.+94     	; 0x1506 <error_event+0x166>
	error_max_voltage = 2*x-20 + (voltage-9)*x/6;
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e1       	ldi	r20, 0x10	; 16
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    14b8:	6b 01       	movw	r12, r22
    14ba:	7c 01       	movw	r14, r24
    14bc:	be 01       	movw	r22, r28
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	c7 01       	movw	r24, r14
    14cc:	b6 01       	movw	r22, r12
    14ce:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 ec       	ldi	r20, 0xC0	; 192
    14d8:	50 e4       	ldi	r21, 0x40	; 64
    14da:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    14de:	6b 01       	movw	r12, r22
    14e0:	7c 01       	movw	r14, r24
    14e2:	be 01       	movw	r22, r28
    14e4:	6a 50       	subi	r22, 0x0A	; 10
    14e6:	70 48       	sbci	r23, 0x80	; 128
    14e8:	66 0f       	add	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	c7 01       	movw	r24, r14
    14fa:	b6 01       	movw	r22, r12
    14fc:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    1500:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    1504:	cd c0       	rjmp	.+410    	; 0x16a0 <error_event+0x300>
	else if (x >=25 && x < 40)
    1506:	ce 01       	movw	r24, r28
    1508:	49 97       	sbiw	r24, 0x19	; 25
    150a:	0f 97       	sbiw	r24, 0x0f	; 15
    150c:	78 f5       	brcc	.+94     	; 0x156c <error_event+0x1cc>
	error_max_voltage = 2*x-25 + (voltage-9)*x/6;
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e1       	ldi	r20, 0x10	; 16
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    151e:	6b 01       	movw	r12, r22
    1520:	7c 01       	movw	r14, r24
    1522:	be 01       	movw	r22, r28
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    152c:	9b 01       	movw	r18, r22
    152e:	ac 01       	movw	r20, r24
    1530:	c7 01       	movw	r24, r14
    1532:	b6 01       	movw	r22, r12
    1534:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 ec       	ldi	r20, 0xC0	; 192
    153e:	50 e4       	ldi	r21, 0x40	; 64
    1540:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    1544:	6b 01       	movw	r12, r22
    1546:	7c 01       	movw	r14, r24
    1548:	be 01       	movw	r22, r28
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	69 51       	subi	r22, 0x19	; 25
    1550:	71 09       	sbc	r23, r1
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    1566:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    156a:	9a c0       	rjmp	.+308    	; 0x16a0 <error_event+0x300>
	else if (x >=40 && x < 50)
    156c:	ce 01       	movw	r24, r28
    156e:	88 97       	sbiw	r24, 0x28	; 40
    1570:	0a 97       	sbiw	r24, 0x0a	; 10
    1572:	78 f5       	brcc	.+94     	; 0x15d2 <error_event+0x232>
	error_max_voltage = 2*x-10 + (voltage-9)*x/6;
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e1       	ldi	r20, 0x10	; 16
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	c7 01       	movw	r24, r14
    157e:	b6 01       	movw	r22, r12
    1580:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
    1588:	be 01       	movw	r22, r28
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	c7 01       	movw	r24, r14
    1598:	b6 01       	movw	r22, r12
    159a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 ec       	ldi	r20, 0xC0	; 192
    15a4:	50 e4       	ldi	r21, 0x40	; 64
    15a6:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	be 01       	movw	r22, r28
    15b0:	65 50       	subi	r22, 0x05	; 5
    15b2:	70 48       	sbci	r23, 0x80	; 128
    15b4:	66 0f       	add	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    15cc:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    15d0:	67 c0       	rjmp	.+206    	; 0x16a0 <error_event+0x300>
	else if (x >=50 && x < 70)
    15d2:	ce 01       	movw	r24, r28
    15d4:	c2 97       	sbiw	r24, 0x32	; 50
    15d6:	44 97       	sbiw	r24, 0x14	; 20
    15d8:	78 f5       	brcc	.+94     	; 0x1638 <error_event+0x298>
	error_max_voltage = 2*x+10 + (voltage-9)*x/6;
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e1       	ldi	r20, 0x10	; 16
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	c7 01       	movw	r24, r14
    15e4:	b6 01       	movw	r22, r12
    15e6:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    15ea:	6b 01       	movw	r12, r22
    15ec:	7c 01       	movw	r14, r24
    15ee:	be 01       	movw	r22, r28
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	c7 01       	movw	r24, r14
    15fe:	b6 01       	movw	r22, r12
    1600:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 ec       	ldi	r20, 0xC0	; 192
    160a:	50 e4       	ldi	r21, 0x40	; 64
    160c:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    1610:	6b 01       	movw	r12, r22
    1612:	7c 01       	movw	r14, r24
    1614:	be 01       	movw	r22, r28
    1616:	6b 5f       	subi	r22, 0xFB	; 251
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	c7 01       	movw	r24, r14
    162c:	b6 01       	movw	r22, r12
    162e:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    1632:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    1636:	34 c0       	rjmp	.+104    	; 0x16a0 <error_event+0x300>
	else if (x >= 70)
    1638:	c6 34       	cpi	r28, 0x46	; 70
    163a:	d1 05       	cpc	r29, r1
    163c:	78 f1       	brcs	.+94     	; 0x169c <error_event+0x2fc>
	error_max_voltage = 2*x+20 + (voltage-9)*x/6;
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e1       	ldi	r20, 0x10	; 16
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	c7 01       	movw	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__subsf3>
    164e:	6b 01       	movw	r12, r22
    1650:	7c 01       	movw	r14, r24
    1652:	be 01       	movw	r22, r28
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	c7 01       	movw	r24, r14
    1662:	b6 01       	movw	r22, r12
    1664:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 ec       	ldi	r20, 0xC0	; 192
    166e:	50 e4       	ldi	r21, 0x40	; 64
    1670:	0e 94 2c 14 	call	0x2858	; 0x2858 <__divsf3>
    1674:	6b 01       	movw	r12, r22
    1676:	7c 01       	movw	r14, r24
    1678:	be 01       	movw	r22, r28
    167a:	66 5f       	subi	r22, 0xF6	; 246
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    168a:	9b 01       	movw	r18, r22
    168c:	ac 01       	movw	r20, r24
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    1696:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <error_event+0x300>
	else
	error_max_voltage = 10;
    169c:	6a e0       	ldi	r22, 0x0A	; 10
    169e:	70 e0       	ldi	r23, 0x00	; 0
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    16a0:	6c 59       	subi	r22, 0x9C	; 156
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <motor_error_value+0x1>
    16a8:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <motor_error_value>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0e 94 a4 0c 	call	0x1948	; 0x1948 <measure_get_filtered_value>
    16b2:	f8 2e       	mov	r15, r24
    16b4:	e9 2e       	mov	r14, r25
		float volt = accum_get_voltage();
    16b6:	0e 94 24 02 	call	0x448	; 0x448 <accum_get_voltage>
		debug_msg("MOTOR ADC: %d, ADC_max: %d, voltage: %f\n", motor_adc_filterd, motor_error_value, volt);
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	7f 93       	push	r23
    16c0:	6f 93       	push	r22
    16c2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <motor_error_value+0x1>
    16c6:	8f 93       	push	r24
    16c8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <motor_error_value>
    16cc:	8f 93       	push	r24
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	89 ec       	ldi	r24, 0xC9	; 201
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9f 93       	push	r25
    16d8:	8f 93       	push	r24
    16da:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    16de:	8d b7       	in	r24, 0x3d	; 61
    16e0:	9e b7       	in	r25, 0x3e	; 62
    16e2:	0a 96       	adiw	r24, 0x0a	; 10
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	9e bf       	out	0x3e, r25	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	8d bf       	out	0x3d, r24	; 61
				break;
			} //switch
		} //else (error_servo_status == 1)
		#endif
	} //error_event_timer
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	08 95       	ret

000016fc <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    16fc:	4e e5       	ldi	r20, 0x5E	; 94
    16fe:	51 e0       	ldi	r21, 0x01	; 1
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	80 e9       	ldi	r24, 0x90	; 144
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <evTime_process_period>
    170c:	89 2b       	or	r24, r25
    170e:	09 f1       	breq	.+66     	; 0x1752 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1710:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <led_blink>
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	71 f4       	brne	.+28     	; 0x1734 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1718:	92 b3       	in	r25, 0x12	; 18
    171a:	80 e1       	ldi	r24, 0x10	; 16
    171c:	89 27       	eor	r24, r25
    171e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1720:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1724:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1728:	90 62       	ori	r25, 0x20	; 32
    172a:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    172e:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1732:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	69 f4       	brne	.+26     	; 0x1752 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1738:	92 b3       	in	r25, 0x12	; 18
    173a:	80 e4       	ldi	r24, 0x40	; 64
    173c:	89 27       	eor	r24, r25
    173e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1740:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1744:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1748:	90 62       	ori	r25, 0x20	; 32
    174a:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    174e:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1752:	08 95       	ret

00001754 <filtered_value>:
static uint8_t s_o_t_iteration_adc_table = 0;
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
    1754:	fc 01       	movw	r30, r24
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
    175a:	62 30       	cpi	r22, 0x02	; 2
    175c:	58 f0       	brcs	.+22     	; 0x1774 <filtered_value+0x20>
    175e:	32 96       	adiw	r30, 0x02	; 2
    1760:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
    1762:	41 91       	ld	r20, Z+
    1764:	51 91       	ld	r21, Z+
    1766:	24 0f       	add	r18, r20
    1768:	35 1f       	adc	r19, r21
    176a:	36 95       	lsr	r19
    176c:	27 95       	ror	r18
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
    176e:	9f 5f       	subi	r25, 0xFF	; 255
    1770:	69 13       	cpse	r22, r25
    1772:	f7 cf       	rjmp	.-18     	; 0x1762 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
    1774:	c9 01       	movw	r24, r18
    1776:	08 95       	ret

00001778 <init_measure>:

void init_measure(void)
{
    1778:	e5 ed       	ldi	r30, 0xD5	; 213
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	2d ef       	ldi	r18, 0xFD	; 253
    177e:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
    1780:	81 ef       	ldi	r24, 0xF1	; 241
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	81 93       	st	Z+, r24
    1786:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
    1788:	2e 17       	cp	r18, r30
    178a:	3f 07       	cpc	r19, r31
    178c:	d9 f7       	brne	.-10     	; 0x1784 <init_measure+0xc>
    178e:	e4 ec       	ldi	r30, 0xC4	; 196
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	82 ed       	ldi	r24, 0xD2	; 210
    1794:	91 e0       	ldi	r25, 0x01	; 1
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
    1796:	11 92       	st	Z+, r1
    1798:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
    179a:	8e 17       	cp	r24, r30
    179c:	9f 07       	cpc	r25, r31
    179e:	d9 f7       	brne	.-10     	; 0x1796 <init_measure+0x1e>
    17a0:	ec ea       	ldi	r30, 0xAC	; 172
    17a2:	f1 e0       	ldi	r31, 0x01	; 1
    17a4:	80 ec       	ldi	r24, 0xC0	; 192
    17a6:	91 e0       	ldi	r25, 0x01	; 1
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
    17a8:	11 92       	st	Z+, r1
    17aa:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
    17ac:	8e 17       	cp	r24, r30
    17ae:	9f 07       	cpc	r25, r31
    17b0:	d9 f7       	brne	.-10     	; 0x17a8 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
    17b2:	08 95       	ret

000017b4 <measure_process>:
static timer_t measure_timer;
void measure_process(void)
{
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
	if (measure_timer < mktime.ms)
    17c0:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    17c4:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    17c8:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    17cc:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    17d0:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <measure_timer>
    17d4:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <measure_timer+0x1>
    17d8:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <measure_timer+0x2>
    17dc:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <measure_timer+0x3>
    17e0:	84 17       	cp	r24, r20
    17e2:	95 07       	cpc	r25, r21
    17e4:	a6 07       	cpc	r26, r22
    17e6:	b7 07       	cpc	r27, r23
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <measure_process+0x38>
    17ea:	a7 c0       	rjmp	.+334    	; 0x193a <measure_process+0x186>
	{
		measure_timer = mktime.ms + 50;
    17ec:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
    17f0:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
    17f4:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
    17f8:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
    17fc:	c2 96       	adiw	r24, 0x32	; 50
    17fe:	a1 1d       	adc	r26, r1
    1800:	b1 1d       	adc	r27, r1
    1802:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <measure_timer>
    1806:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <measure_timer+0x1>
    180a:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <measure_timer+0x2>
    180e:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 34 03 	call	0x668	; 0x668 <adc_read>
    1818:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
    181a:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <motor_filter_value>
    181e:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <motor_filter_value+0x1>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    182a:	21 e7       	ldi	r18, 0x71	; 113
    182c:	3d e3       	ldi	r19, 0x3D	; 61
    182e:	4a e8       	ldi	r20, 0x8A	; 138
    1830:	5e e3       	ldi	r21, 0x3E	; 62
    1832:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <__mulsf3>
    1836:	6b 01       	movw	r12, r22
    1838:	7c 01       	movw	r14, r24
    183a:	be 01       	movw	r22, r28
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__floatunsisf>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	c7 01       	movw	r24, r14
    184a:	b6 01       	movw	r22, r12
    184c:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    1850:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    1854:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <accum_adc+0x1>
    1858:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
    185c:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <iteration_adc_accum_table>
    1860:	e2 2f       	mov	r30, r18
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	eb 52       	subi	r30, 0x2B	; 43
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	71 83       	std	Z+1, r23	; 0x01
    186e:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	82 0f       	add	r24, r18
    1874:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	0e 94 34 03 	call	0x668	; 0x668 <adc_read>
    187e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <motor_adc+0x1>
    1882:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
    1886:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <iteration_adc_motor_table>
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	ec 53       	subi	r30, 0x3C	; 60
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 34 03 	call	0x668	; 0x668 <adc_read>
		
		#if CONFIG_DEVICE_SIEWNIK
		if (s_o_t_adc < SERVO_CALIBRATION_VALUE) s_o_t_adc = 0;
    189e:	88 35       	cpi	r24, 0x58	; 88
    18a0:	22 e0       	ldi	r18, 0x02	; 2
    18a2:	92 07       	cpc	r25, r18
    18a4:	28 f4       	brcc	.+10     	; 0x18b0 <measure_process+0xfc>
    18a6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <s_o_t_adc+0x1>
    18aa:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <s_o_t_adc>
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <measure_process+0x108>
		else s_o_t_adc = s_o_t_adc - SERVO_CALIBRATION_VALUE;
    18b0:	88 55       	subi	r24, 0x58	; 88
    18b2:	92 40       	sbci	r25, 0x02	; 2
    18b4:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <s_o_t_adc+0x1>
    18b8:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <s_o_t_adc>
		#endif

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
    18bc:	c0 91 ab 01 	lds	r28, 0x01AB	; 0x8001ab <s_o_t_iteration_adc_table>
    18c0:	ec 2f       	mov	r30, r28
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e4 55       	subi	r30, 0x54	; 84
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <s_o_t_adc>
    18d0:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <s_o_t_adc+0x1>
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
    18d8:	d0 91 d4 01 	lds	r29, 0x01D4	; 0x8001d4 <iteration_adc_motor_table>
    18dc:	df 5f       	subi	r29, 0xFF	; 255
    18de:	d0 93 d4 01 	sts	0x01D4, r29	; 0x8001d4 <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
    18e2:	cf 5f       	subi	r28, 0xFF	; 255
    18e4:	c0 93 ab 01 	sts	0x01AB, r28	; 0x8001ab <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
    18e8:	64 e1       	ldi	r22, 0x14	; 20
    18ea:	85 ed       	ldi	r24, 0xD5	; 213
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 aa 0b 	call	0x1754	; 0x1754 <filtered_value>
    18f2:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <filtered_accum_adc_val+0x1>
    18f6:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
    18fa:	67 e0       	ldi	r22, 0x07	; 7
    18fc:	84 ec       	ldi	r24, 0xC4	; 196
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 aa 0b 	call	0x1754	; 0x1754 <filtered_value>
    1904:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <motor_filter_value+0x1>
    1908:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
    190c:	6a e0       	ldi	r22, 0x0A	; 10
    190e:	8c ea       	ldi	r24, 0xAC	; 172
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 aa 0b 	call	0x1754	; 0x1754 <filtered_value>
    1916:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <s_o_t_filter_value+0x1>
    191a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <s_o_t_filter_value>
		//debug_msg("ADC: accum %d, servo %d, motor %d\n",accum_adc, s_o_t_adc, motor_adc);
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
    191e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <iteration_adc_accum_table>
    1922:	84 31       	cpi	r24, 0x14	; 20
    1924:	11 f4       	brne	.+4      	; 0x192a <measure_process+0x176>
    1926:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
    192a:	ca 30       	cpi	r28, 0x0A	; 10
    192c:	11 f4       	brne	.+4      	; 0x1932 <measure_process+0x17e>
    192e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
    1932:	d7 30       	cpi	r29, 0x07	; 7
    1934:	11 f4       	brne	.+4      	; 0x193a <measure_process+0x186>
    1936:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <iteration_adc_motor_table>
	}
}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	cf 90       	pop	r12
    1946:	08 95       	ret

00001948 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	18 f4       	brcc	.+6      	; 0x1952 <measure_get_filtered_value+0xa>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	40 f0       	brcs	.+16     	; 0x1960 <measure_get_filtered_value+0x18>
    1950:	0c c0       	rjmp	.+24     	; 0x196a <measure_get_filtered_value+0x22>
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	79 f4       	brne	.+30     	; 0x1974 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
    1956:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <filtered_accum_adc_val>
    195a:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <filtered_accum_adc_val+0x1>
    195e:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
    1960:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <motor_filter_value>
    1964:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <motor_filter_value+0x1>
    1968:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
    196a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <s_o_t_filter_value>
    196e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <s_o_t_filter_value+0x1>
    1972:	08 95       	ret
        break;
    }
	return 0;
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
}
    1978:	08 95       	ret

0000197a <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1986:	82 30       	cpi	r24, 0x02	; 2
    1988:	59 f0       	breq	.+22     	; 0x19a0 <mem_save_data+0x26>
    198a:	28 f4       	brcc	.+10     	; 0x1996 <mem_save_data+0x1c>
    198c:	88 23       	and	r24, r24
    198e:	91 f0       	breq	.+36     	; 0x19b4 <mem_save_data+0x3a>
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	19 f1       	breq	.+70     	; 0x19da <mem_save_data+0x60>
    1994:	30 c0       	rjmp	.+96     	; 0x19f6 <mem_save_data+0x7c>
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	29 f1       	breq	.+74     	; 0x19e4 <mem_save_data+0x6a>
    199a:	84 30       	cpi	r24, 0x04	; 4
    199c:	31 f0       	breq	.+12     	; 0x19aa <mem_save_data+0x30>
    199e:	2b c0       	rjmp	.+86     	; 0x19f6 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    19a0:	22 e0       	ldi	r18, 0x02	; 2
    19a2:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    19a4:	84 e0       	ldi	r24, 0x04	; 4
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	21 c0       	rjmp	.+66     	; 0x19ec <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    19aa:	23 e0       	ldi	r18, 0x03	; 3
    19ac:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    19ae:	88 e0       	ldi	r24, 0x08	; 8
    19b0:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    19b2:	1c c0       	rjmp	.+56     	; 0x19ec <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    19b4:	68 94       	set
    19b6:	ee 24       	eor	r14, r14
    19b8:	e1 f8       	bld	r14, 1
    19ba:	f1 2c       	mov	r15, r1
    19bc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    19be:	f8 01       	movw	r30, r16
    19c0:	61 91       	ld	r22, Z+
    19c2:	8f 01       	movw	r16, r30
    19c4:	8c 2f       	mov	r24, r28
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 ab 09 	call	0x1356	; 0x1356 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    19cc:	cf 5f       	subi	r28, 0xFF	; 255
    19ce:	8c 2f       	mov	r24, r28
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	8e 15       	cp	r24, r14
    19d4:	9f 05       	cpc	r25, r15
    19d6:	9c f3       	brlt	.-26     	; 0x19be <mem_save_data+0x44>
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    19da:	22 e0       	ldi	r18, 0x02	; 2
    19dc:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    19e4:	22 e0       	ldi	r18, 0x02	; 2
    19e6:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    19ec:	c8 2f       	mov	r28, r24
    19ee:	79 01       	movw	r14, r18
    19f0:	e8 0e       	add	r14, r24
    19f2:	f9 1e       	adc	r15, r25
    19f4:	e4 cf       	rjmp	.-56     	; 0x19be <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	08 95       	ret

00001a02 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	59 f0       	breq	.+22     	; 0x1a28 <mem_read_data+0x26>
    1a12:	28 f4       	brcc	.+10     	; 0x1a1e <mem_read_data+0x1c>
    1a14:	88 23       	and	r24, r24
    1a16:	91 f0       	breq	.+36     	; 0x1a3c <mem_read_data+0x3a>
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	19 f1       	breq	.+70     	; 0x1a62 <mem_read_data+0x60>
    1a1c:	30 c0       	rjmp	.+96     	; 0x1a7e <mem_read_data+0x7c>
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	29 f1       	breq	.+74     	; 0x1a6c <mem_read_data+0x6a>
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	31 f0       	breq	.+12     	; 0x1a32 <mem_read_data+0x30>
    1a26:	2b c0       	rjmp	.+86     	; 0x1a7e <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1a28:	22 e0       	ldi	r18, 0x02	; 2
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	21 c0       	rjmp	.+66     	; 0x1a74 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1a32:	23 e0       	ldi	r18, 0x03	; 3
    1a34:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1a36:	88 e0       	ldi	r24, 0x08	; 8
    1a38:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1a3c:	68 94       	set
    1a3e:	ee 24       	eor	r14, r14
    1a40:	e1 f8       	bld	r14, 1
    1a42:	f1 2c       	mov	r15, r1
    1a44:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    1a46:	8c 2f       	mov	r24, r28
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 b3 09 	call	0x1366	; 0x1366 <EEPROM_read>
    1a4e:	f8 01       	movw	r30, r16
    1a50:	81 93       	st	Z+, r24
    1a52:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1a54:	cf 5f       	subi	r28, 0xFF	; 255
    1a56:	8c 2f       	mov	r24, r28
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	8e 15       	cp	r24, r14
    1a5c:	9f 05       	cpc	r25, r15
    1a5e:	9c f3       	brlt	.-26     	; 0x1a46 <mem_read_data+0x44>
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1a62:	22 e0       	ldi	r18, 0x02	; 2
    1a64:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1a6c:	22 e0       	ldi	r18, 0x02	; 2
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1a70:	86 e0       	ldi	r24, 0x06	; 6
    1a72:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1a74:	c8 2f       	mov	r28, r24
    1a76:	79 01       	movw	r14, r18
    1a78:	e8 0e       	add	r14, r24
    1a7a:	f9 1e       	adc	r15, r25
    1a7c:	e4 cf       	rjmp	.-56     	; 0x1a46 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	08 95       	ret

00001a8a <servo_init>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	2f e1       	ldi	r18, 0x1F	; 31
    1a90:	3e e4       	ldi	r19, 0x4E	; 78
    1a92:	37 bd       	out	0x27, r19	; 39
    1a94:	26 bd       	out	0x26, r18	; 38
    1a96:	81 b3       	in	r24, 0x11	; 17
    1a98:	80 63       	ori	r24, 0x30	; 48
    1a9a:	81 bb       	out	0x11, r24	; 17
    1a9c:	19 bc       	out	0x29, r1	; 41
    1a9e:	18 bc       	out	0x28, r1	; 40
    1aa0:	1b bc       	out	0x2b, r1	; 43
    1aa2:	1a bc       	out	0x2a, r1	; 42
    1aa4:	8f b5       	in	r24, 0x2f	; 47
    1aa6:	82 60       	ori	r24, 0x02	; 2
    1aa8:	8f bd       	out	0x2f, r24	; 47
    1aaa:	8e b5       	in	r24, 0x2e	; 46
    1aac:	88 61       	ori	r24, 0x18	; 24
    1aae:	8e bd       	out	0x2e, r24	; 46
    1ab0:	8f b5       	in	r24, 0x2f	; 47
    1ab2:	80 68       	ori	r24, 0x80	; 128
    1ab4:	8f bd       	out	0x2f, r24	; 47
    1ab6:	8e b5       	in	r24, 0x2e	; 46
    1ab8:	82 60       	ori	r24, 0x02	; 2
    1aba:	8e bd       	out	0x2e, r24	; 46
    1abc:	3b bd       	out	0x2b, r19	; 43
    1abe:	2a bd       	out	0x2a, r18	; 42
    1ac0:	96 98       	cbi	0x12, 6	; 18
    1ac2:	cb ea       	ldi	r28, 0xAB	; 171
    1ac4:	d3 e0       	ldi	r29, 0x03	; 3
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	88 83       	st	Y, r24
    1aca:	1b 82       	std	Y+3, r1	; 0x03
    1acc:	8f ea       	ldi	r24, 0xAF	; 175
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 9d 12 	call	0x253a	; 0x253a <evTime_init>
    1ad4:	19 86       	std	Y+9, r1	; 0x09
    1ad6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <try_count>
    1ada:	82 ef       	ldi	r24, 0xF2	; 242
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9f 93       	push	r25
    1ae0:	8f 93       	push	r24
    1ae2:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <servo_is_open>:
    1af0:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <servoD>
    1af4:	92 50       	subi	r25, 0x02	; 2
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	92 30       	cpi	r25, 0x02	; 2
    1afc:	10 f0       	brcs	.+4      	; 0x1b02 <servo_is_open+0x12>
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	c9 01       	movw	r24, r18
    1b04:	08 95       	ret

00001b06 <servo_delayed_open>:
    1b06:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <servoD>
    1b0a:	91 30       	cpi	r25, 0x01	; 1
    1b0c:	a1 f4       	brne	.+40     	; 0x1b36 <servo_delayed_open+0x30>
    1b0e:	eb ea       	ldi	r30, 0xAB	; 171
    1b10:	f3 e0       	ldi	r31, 0x03	; 3
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	90 83       	st	Z, r25
    1b16:	83 83       	std	Z+3, r24	; 0x03
    1b18:	1f 92       	push	r1
    1b1a:	8f 93       	push	r24
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	08 95       	ret
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	08 95       	ret

00001b3c <servo_close>:
    1b3c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <servo_is_open>
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	b9 f0       	breq	.+46     	; 0x1b72 <servo_close+0x36>
    1b44:	1b bc       	out	0x2b, r1	; 43
    1b46:	1a bc       	out	0x2a, r1	; 42
    1b48:	eb ea       	ldi	r30, 0xAB	; 171
    1b4a:	f3 e0       	ldi	r31, 0x03	; 3
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 83       	st	Z, r24
    1b50:	13 82       	std	Z+3, r1	; 0x03
    1b52:	1f 92       	push	r1
    1b54:	1f 92       	push	r1
    1b56:	86 e1       	ldi	r24, 0x16	; 22
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	9f 93       	push	r25
    1b5c:	8f 93       	push	r24
    1b5e:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1b62:	96 98       	cbi	0x12, 6	; 18
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	08 95       	ret
    1b72:	20 91 ab 03 	lds	r18, 0x03AB	; 0x8003ab <servoD>
    1b76:	24 30       	cpi	r18, 0x04	; 4
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <servo_close+0x46>
    1b7a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <servo_exit_try>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	08 95       	ret

00001b84 <servo_exit_try>:
    1b84:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <servoD+0x1>
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	29 f4       	brne	.+10     	; 0x1b96 <servo_exit_try+0x12>
    1b8c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <servoD>
    1b90:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <servo_close>
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <servo_exit_try+0x24>
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	71 f4       	brne	.+28     	; 0x1bb6 <servo_exit_try+0x32>
    1b9a:	eb ea       	ldi	r30, 0xAB	; 171
    1b9c:	f3 e0       	ldi	r31, 0x03	; 3
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	80 83       	st	Z, r24
    1ba2:	83 81       	ldd	r24, Z+3	; 0x03
    1ba4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <servo_open>
    1ba8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <try_count>
    1bac:	eb ea       	ldi	r30, 0xAB	; 171
    1bae:	f3 e0       	ldi	r31, 0x03	; 3
    1bb0:	81 85       	ldd	r24, Z+9	; 0x09
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	81 87       	std	Z+9, r24	; 0x09
    1bb6:	08 95       	ret

00001bb8 <servo_open>:
    1bb8:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <servoD>
    1bbc:	2f ef       	ldi	r18, 0xFF	; 255
    1bbe:	29 0f       	add	r18, r25
    1bc0:	23 30       	cpi	r18, 0x03	; 3
    1bc2:	c8 f4       	brcc	.+50     	; 0x1bf6 <servo_open+0x3e>
    1bc4:	eb ea       	ldi	r30, 0xAB	; 171
    1bc6:	f3 e0       	ldi	r31, 0x03	; 3
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	90 83       	st	Z, r25
    1bcc:	83 83       	std	Z+3, r24	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3b bd       	out	0x2b, r19	; 43
    1bd4:	2a bd       	out	0x2a, r18	; 42
    1bd6:	1f 92       	push	r1
    1bd8:	8f 93       	push	r24
    1bda:	87 e2       	ldi	r24, 0x27	; 39
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	9f 93       	push	r25
    1be0:	8f 93       	push	r24
    1be2:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1be6:	96 9a       	sbi	0x12, 6	; 18
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	08 95       	ret
    1bf6:	94 30       	cpi	r25, 0x04	; 4
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <servo_open+0x4c>
    1bfa:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <servo_exit_try>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	08 95       	ret
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	08 95       	ret

00001c0a <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    1c0a:	cf 93       	push	r28
    1c0c:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 500))
    1c0e:	44 ef       	ldi	r20, 0xF4	; 244
    1c10:	51 e0       	ldi	r21, 0x01	; 1
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	8c e0       	ldi	r24, 0x0C	; 12
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <evTime_process_period>
    1c1e:	89 2b       	or	r24, r25
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <servo_process+0x1a>
    1c22:	92 c0       	rjmp	.+292    	; 0x1d48 <servo_process+0x13e>
	{
		switch(servoD.state)
    1c24:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <servoD>
    1c28:	83 30       	cpi	r24, 0x03	; 3
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <servo_process+0x24>
    1c2c:	64 c0       	rjmp	.+200    	; 0x1cf6 <servo_process+0xec>
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	51 f0       	breq	.+20     	; 0x1c46 <servo_process+0x3c>
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <servo_process+0x2e>
    1c36:	78 c0       	rjmp	.+240    	; 0x1d28 <servo_process+0x11e>
		{
			case SERVO_OPEN:
			servoD.value = value;
    1c38:	c0 93 ae 03 	sts	0x03AE, r28	; 0x8003ae <servoD+0x3>
			set_pwm((uint16_t)value);
    1c3c:	8c 2f       	mov	r24, r28
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1c40:	9b bd       	out	0x2b, r25	; 43
    1c42:	8a bd       	out	0x2a, r24	; 42
    1c44:	71 c0       	rjmp	.+226    	; 0x1d28 <servo_process+0x11e>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    1c46:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <try_count>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	15 c0       	rjmp	.+42     	; 0x1c78 <servo_process+0x6e>
	{
		evTime_start(&timeout, 100);
    1c4e:	44 e6       	ldi	r20, 0x64	; 100
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	87 e0       	ldi	r24, 0x07	; 7
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
		try_count++;
    1c5e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <try_count>
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <try_count>
		set_pwm(servoD.value + try_count);
    1c68:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <servoD+0x3>
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	82 0f       	add	r24, r18
    1c70:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1c72:	9b bd       	out	0x2b, r25	; 43
    1c74:	8a bd       	out	0x2a, r24	; 42
    1c76:	2b c0       	rjmp	.+86     	; 0x1cce <servo_process+0xc4>
	{
		evTime_start(&timeout, 100);
		try_count++;
		set_pwm(servoD.value + try_count);
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    1c78:	81 50       	subi	r24, 0x01	; 1
    1c7a:	89 30       	cpi	r24, 0x09	; 9
    1c7c:	d8 f4       	brcc	.+54     	; 0x1cb4 <servo_process+0xaa>
	{
		if (evTime_check(&timeout) == 1)
    1c7e:	87 e0       	ldi	r24, 0x07	; 7
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	0e 94 c7 12 	call	0x258e	; 0x258e <evTime_check>
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	11 f5       	brne	.+68     	; 0x1cce <servo_process+0xc4>
		{
			evTime_start(&timeout, 100);
    1c8a:	44 e6       	ldi	r20, 0x64	; 100
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	87 e0       	ldi	r24, 0x07	; 7
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
			try_count++;
    1c9a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <try_count>
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <try_count>
			set_pwm(servoD.value + try_count);
    1ca4:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <servoD+0x3>
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	82 0f       	add	r24, r18
    1cac:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1cae:	9b bd       	out	0x2b, r25	; 43
    1cb0:	8a bd       	out	0x2a, r24	; 42
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <servo_process+0xc4>
			set_pwm(servoD.value + try_count);
		}
	}
	else
	{
		try_count = 0;
    1cb4:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <try_count>
		set_pwm(servoD.value);
    1cb8:	eb ea       	ldi	r30, 0xAB	; 171
    1cba:	f3 e0       	ldi	r31, 0x03	; 3
    1cbc:	83 81       	ldd	r24, Z+3	; 0x03
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1cc0:	9b bd       	out	0x2b, r25	; 43
    1cc2:	8a bd       	out	0x2a, r24	; 42
	}
	else
	{
		try_count = 0;
		set_pwm(servoD.value);
		servoD.state = servoD.last_state;
    1cc4:	81 81       	ldd	r24, Z+1	; 0x01
    1cc6:	80 83       	st	Z, r24
		servoD.try_cnt++;
    1cc8:	81 85       	ldd	r24, Z+9	; 0x09
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	81 87       	std	Z+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    1cce:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <servoD+0x3>
    1cd2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <try_count>
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	82 0f       	add	r24, r18
    1cda:	91 1d       	adc	r25, r1
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	89 e3       	ldi	r24, 0x39	; 57
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	9f 93       	push	r25
    1ce6:	8f 93       	push	r24
    1ce8:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	19 c0       	rjmp	.+50     	; 0x1d28 <servo_process+0x11e>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	92 e0       	ldi	r25, 0x02	; 2
    1cfa:	0e 94 bd 12 	call	0x257a	; 0x257a <evTime_is_stated>
    1cfe:	89 2b       	or	r24, r25
    1d00:	59 f0       	breq	.+22     	; 0x1d18 <servo_process+0x10e>
	{
		if (evTime_check(&timeout) == 1)
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 c7 12 	call	0x258e	; 0x258e <evTime_check>
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	69 f4       	brne	.+26     	; 0x1d28 <servo_process+0x11e>
		{
			servoD.state = SERVO_OPEN;
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <servoD>
			LED_SERVO_ON;
    1d14:	96 9a       	sbi	0x12, 6	; 18
    1d16:	08 c0       	rjmp	.+16     	; 0x1d28 <servo_process+0x11e>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    1d18:	40 ed       	ldi	r20, 0xD0	; 208
    1d1a:	57 e0       	ldi	r21, 0x07	; 7
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	92 e0       	ldi	r25, 0x02	; 2
    1d24:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
			break;
			case SERVO_DELAYED_OPEN:
			servo_delayed_open_process();
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    1d28:	8f ea       	ldi	r24, 0xAF	; 175
    1d2a:	93 e0       	ldi	r25, 0x03	; 3
    1d2c:	0e 94 c7 12 	call	0x258e	; 0x258e <evTime_check>
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	51 f4       	brne	.+20     	; 0x1d48 <servo_process+0x13e>
		{
			servoD.try_cnt = 0;
    1d34:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    1d38:	87 e4       	ldi	r24, 0x47	; 71
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	9f 93       	push	r25
    1d3e:	8f 93       	push	r24
    1d40:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
		}
	}
}
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    1d4c:	e7 e5       	ldi	r30, 0x57	; 87
    1d4e:	f3 e0       	ldi	r31, 0x03	; 3
    1d50:	16 86       	std	Z+14, r1	; 0x0e
    1d52:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    1d54:	12 86       	std	Z+10, r1	; 0x0a
    1d56:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    1d58:	14 86       	std	Z+12, r1	; 0x0c
    1d5a:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    1d5c:	ea e2       	ldi	r30, 0x2A	; 42
    1d5e:	f3 e0       	ldi	r31, 0x03	; 3
    1d60:	16 86       	std	Z+14, r1	; 0x0e
    1d62:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    1d64:	12 86       	std	Z+10, r1	; 0x0a
    1d66:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    1d68:	14 86       	std	Z+12, r1	; 0x0c
    1d6a:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    1d6c:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <button3+0xc>
    1d70:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <button3+0xb>
	
	button5.timer_callback = 0;
    1d74:	e8 e0       	ldi	r30, 0x08	; 8
    1d76:	f3 e0       	ldi	r31, 0x03	; 3
    1d78:	16 86       	std	Z+14, r1	; 0x0e
    1d7a:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    1d7c:	14 86       	std	Z+12, r1	; 0x0c
    1d7e:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    1d80:	12 86       	std	Z+10, r1	; 0x0a
    1d82:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    1d84:	e8 e4       	ldi	r30, 0x48	; 72
    1d86:	f3 e0       	ldi	r31, 0x03	; 3
    1d88:	16 86       	std	Z+14, r1	; 0x0e
    1d8a:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    1d8c:	14 86       	std	Z+12, r1	; 0x0c
    1d8e:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    1d90:	12 86       	std	Z+10, r1	; 0x0a
    1d92:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    1d94:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <button7+0xc>
    1d98:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <button7+0xb>
	
	button8.fall_callback = 0;
    1d9c:	e5 e7       	ldi	r30, 0x75	; 117
    1d9e:	f3 e0       	ldi	r31, 0x03	; 3
    1da0:	14 86       	std	Z+12, r1	; 0x0c
    1da2:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    1da4:	16 86       	std	Z+14, r1	; 0x0e
    1da6:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    1da8:	12 86       	std	Z+10, r1	; 0x0a
    1daa:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    1dac:	ea ee       	ldi	r30, 0xEA	; 234
    1dae:	f2 e0       	ldi	r31, 0x02	; 2
    1db0:	14 86       	std	Z+12, r1	; 0x0c
    1db2:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    1db4:	16 86       	std	Z+14, r1	; 0x0e
    1db6:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    1db8:	12 86       	std	Z+10, r1	; 0x0a
    1dba:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    1dbc:	e9 ef       	ldi	r30, 0xF9	; 249
    1dbe:	f2 e0       	ldi	r31, 0x02	; 2
    1dc0:	14 86       	std	Z+12, r1	; 0x0c
    1dc2:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    1dc4:	16 86       	std	Z+14, r1	; 0x0e
    1dc6:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    1dc8:	12 86       	std	Z+10, r1	; 0x0a
    1dca:	11 86       	std	Z+9, r1	; 0x09
    1dcc:	08 95       	ret

00001dce <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    1dce:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	49 f0       	breq	.+18     	; 0x1de8 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    1dd6:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1dda:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1dde:	98 60       	ori	r25, 0x08	; 8
    1de0:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1de4:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1de8:	08 95       	ret

00001dea <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    1dea:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	49 f0       	breq	.+18     	; 0x1e04 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    1df2:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1df6:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e00:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1e04:	08 95       	ret

00001e06 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    1e06:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e0a:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e0e:	92 60       	ori	r25, 0x02	; 2
    1e10:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e14:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1e18:	08 95       	ret

00001e1a <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    1e1a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e1e:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e22:	99 7f       	andi	r25, 0xF9	; 249
    1e24:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e28:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	counter_very_fast_motor_sub = 0;
    1e2c:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter_very_fast_motor_sub>
    1e30:	08 95       	ret

00001e32 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    1e32:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e36:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e3a:	80 62       	ori	r24, 0x20	; 32
    1e3c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e40:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    1e44:	08 95       	ret

00001e46 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    1e46:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e4a:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e4e:	8f 79       	andi	r24, 0x9F	; 159
    1e50:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e54:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	counter_very_fast_motor_sub = 0;
    1e58:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter_very_fast_motor_sub>
    1e5c:	08 95       	ret

00001e5e <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    1e5e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e62:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e66:	90 62       	ori	r25, 0x20	; 32
    1e68:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1e6c:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    1e70:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    1e74:	8b 30       	cpi	r24, 0x0B	; 11
    1e76:	18 f0       	brcs	.+6      	; 0x1e7e <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    1e78:	81 50       	subi	r24, 0x01	; 1
    1e7a:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    1e7e:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1e90:	08 95       	ret

00001e92 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    1e92:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1e96:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1e9a:	90 62       	ori	r25, 0x20	; 32
    1e9c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1ea0:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    1ea4:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    1ea8:	83 36       	cpi	r24, 0x63	; 99
    1eaa:	18 f4       	brcc	.+6      	; 0x1eb2 <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    1eb2:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1ec4:	08 95       	ret

00001ec6 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    1ec6:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1eca:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1ece:	90 62       	ori	r25, 0x20	; 32
    1ed0:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1ed4:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	if (motor_value > 10)
    1ed8:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <motor_value>
    1edc:	8b 30       	cpi	r24, 0x0B	; 11
    1ede:	18 f0       	brcs	.+6      	; 0x1ee6 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    1ee6:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0e 94 6e 07 	call	0xedc	; 0xedc <disp_get_state>
    1ef6:	02 97       	sbiw	r24, 0x02	; 2
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
	state_measure_volt++;
    1f0c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <state_measure_volt>
	if (state_measure_volt == 2)
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	19 f4       	brne	.+6      	; 0x1f20 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1f20:	08 95       	ret

00001f22 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    1f22:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1f26:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1f2a:	90 62       	ori	r25, 0x20	; 32
    1f2c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1f30:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	if (motor_value < 99)
    1f34:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <motor_value>
    1f38:	83 36       	cpi	r24, 0x63	; 99
    1f3a:	18 f4       	brcc	.+6      	; 0x1f42 <button_motor_add_fall_cb+0x20>
		motor_value++;
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    1f42:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 6e 07 	call	0xedc	; 0xedc <disp_get_state>
    1f52:	02 97       	sbiw	r24, 0x02	; 2
    1f54:	29 f4       	brne	.+10     	; 0x1f60 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    1f56:	61 e0       	ldi	r22, 0x01	; 1
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
	state_measure_volt++;
    1f68:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <state_measure_volt>
	if (state_measure_volt == 2)
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    1f76:	66 e0       	ldi	r22, 0x06	; 6
    1f78:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1f7c:	08 95       	ret

00001f7e <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    1f7e:	0e 94 7e 07 	call	0xefc	; 0xefc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    1f82:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1f86:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1f8a:	97 7e       	andi	r25, 0xE7	; 231
    1f8c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1f90:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	counter_very_fast_motor_sub = 0;
    1f94:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    1f98:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1f9c:	88 23       	and	r24, r24
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    1fa0:	81 50       	subi	r24, 0x01	; 1
    1fa2:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0e 94 6e 07 	call	0xedc	; 0xedc <disp_get_state>
    1fac:	02 97       	sbiw	r24, 0x02	; 2
    1fae:	29 f4       	brne	.+10     	; 0x1fba <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1fb8:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    1fc2:	08 95       	ret

00001fc4 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    1fc4:	0e 94 7e 07 	call	0xefc	; 0xefc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    1fc8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    1fcc:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    1fd0:	8f 77       	andi	r24, 0x7F	; 127
    1fd2:	9e 7f       	andi	r25, 0xFE	; 254
    1fd4:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    1fd8:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	counter_very_fast_motor_sub = 0;
    1fdc:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    1fe0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <state_measure_volt>
    1fe4:	88 23       	and	r24, r24
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    1fe8:	81 50       	subi	r24, 0x01	; 1
    1fea:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 6e 07 	call	0xedc	; 0xedc <disp_get_state>
    1ff4:	02 97       	sbiw	r24, 0x02	; 2
    1ff6:	29 f4       	brne	.+10     	; 0x2002 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    1ff8:	61 e0       	ldi	r22, 0x01	; 1
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    2000:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
    200a:	08 95       	ret

0000200c <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    200c:	e7 eb       	ldi	r30, 0xB7	; 183
    200e:	f3 e0       	ldi	r31, 0x03	; 3
    2010:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <motor_value>
    2014:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2016:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    201a:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    201c:	bf 01       	movw	r22, r30
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	0e 94 bd 0c 	call	0x197a	; 0x197a <mem_save_data>
    2024:	08 95       	ret

00002026 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2026:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    202a:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    202e:	90 62       	ori	r25, 0x20	; 32
    2030:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    2034:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	if (motor_value < 10)
    2038:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <motor_value>
    203c:	8a 30       	cpi	r24, 0x0A	; 10
    203e:	38 f4       	brcc	.+14     	; 0x204e <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2040:	8a e0       	ldi	r24, 0x0A	; 10
    2042:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2046:	6a e0       	ldi	r22, 0x0A	; 10
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	}
	sys_save_display();
    204e:	0e 94 06 10 	call	0x200c	; 0x200c <sys_save_display>
	if(!dcmotor_is_on())
    2052:	0e 94 29 05 	call	0xa52	; 0xa52 <dcmotor_is_on>
    2056:	89 2b       	or	r24, r25
    2058:	39 f4       	brne	.+14     	; 0x2068 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    205a:	0e 94 4c 05 	call	0xa98	; 0xa98 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    205e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    2062:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <servo_delayed_open>
    2066:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2068:	0e 94 34 05 	call	0xa68	; 0xa68 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    206c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <servo_close>
    2070:	08 95       	ret

00002072 <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2072:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2076:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    207a:	90 62       	ori	r25, 0x20	; 32
    207c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    2080:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
	if (servo_vibro_value < 10)
    2084:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    2088:	8a 30       	cpi	r24, 0x0A	; 10
    208a:	38 f4       	brcc	.+14     	; 0x209a <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    208c:	8a e0       	ldi	r24, 0x0A	; 10
    208e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2092:	6a e0       	ldi	r22, 0x0A	; 10
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    209a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <servo_is_open>
    209e:	89 2b       	or	r24, r25
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <button_on_off_pwm+0x36>
    20a2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <servo_close>
    20a6:	08 95       	ret
	else servo_open(servo_vibro_value);
    20a8:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <servo_vibro_value>
    20ac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <servo_open>
    20b0:	08 95       	ret

000020b2 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    20b2:	8e ef       	ldi	r24, 0xFE	; 254
    20b4:	90 e1       	ldi	r25, 0x10	; 16
    20b6:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <button4+0xa>
    20ba:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    20c6:	65 eb       	ldi	r22, 0xB5	; 181
    20c8:	73 e0       	ldi	r23, 0x03	; 3
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    20d0:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <mem_last_save+0x1>
    20d4:	96 ef       	ldi	r25, 0xF6	; 246
    20d6:	98 0f       	add	r25, r24
    20d8:	9a 35       	cpi	r25, 0x5A	; 90
    20da:	10 f4       	brcc	.+4      	; 0x20e0 <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    20dc:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    20e0:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <mem_last_save>
    20e4:	96 ef       	ldi	r25, 0xF6	; 246
    20e6:	98 0f       	add	r25, r24
    20e8:	9a 35       	cpi	r25, 0x5A	; 90
    20ea:	10 f4       	brcc	.+4      	; 0x20f0 <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    20ec:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <motor_value>
    20f0:	08 95       	ret

000020f2 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    20f2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    20f6:	42 e0       	ldi	r20, 0x02	; 2
    20f8:	68 ee       	ldi	r22, 0xE8	; 232
    20fa:	73 e0       	ldi	r23, 0x03	; 3
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 0a 09 	call	0x1214	; 0x1214 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2104:	0e 94 0f 05 	call	0xa1e	; 0xa1e <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <servo_init>
	#endif
	error_init();
    210e:	0e 94 ba 09 	call	0x1374	; 0x1374 <error_init>
	init_measure();
    2112:	0e 94 bc 0b 	call	0x1778	; 0x1778 <init_measure>
	init_buzzer();
    2116:	0e 94 0c 05 	call	0xa18	; 0xa18 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    2122:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2126:	e7 e5       	ldi	r30, 0x57	; 87
    2128:	f3 e0       	ldi	r31, 0x03	; 3
    212a:	87 ee       	ldi	r24, 0xE7	; 231
    212c:	9e e0       	ldi	r25, 0x0E	; 14
    212e:	96 87       	std	Z+14, r25	; 0x0e
    2130:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2132:	83 e6       	ldi	r24, 0x63	; 99
    2134:	9f e0       	ldi	r25, 0x0F	; 15
    2136:	94 87       	std	Z+12, r25	; 0x0c
    2138:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    213a:	8f eb       	ldi	r24, 0xBF	; 191
    213c:	9f e0       	ldi	r25, 0x0F	; 15
    213e:	92 87       	std	Z+10, r25	; 0x0a
    2140:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2142:	ea e2       	ldi	r30, 0x2A	; 42
    2144:	f3 e0       	ldi	r31, 0x03	; 3
    2146:	85 ef       	ldi	r24, 0xF5	; 245
    2148:	9e e0       	ldi	r25, 0x0E	; 14
    214a:	96 87       	std	Z+14, r25	; 0x0e
    214c:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    214e:	81 e9       	ldi	r24, 0x91	; 145
    2150:	9f e0       	ldi	r25, 0x0F	; 15
    2152:	94 87       	std	Z+12, r25	; 0x0c
    2154:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2156:	82 ee       	ldi	r24, 0xE2	; 226
    2158:	9f e0       	ldi	r25, 0x0F	; 15
    215a:	92 87       	std	Z+10, r25	; 0x0a
    215c:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    215e:	83 e1       	ldi	r24, 0x13	; 19
    2160:	90 e1       	ldi	r25, 0x10	; 16
    2162:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <button3+0xc>
    2166:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    216a:	e8 e0       	ldi	r30, 0x08	; 8
    216c:	f3 e0       	ldi	r31, 0x03	; 3
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	9f e0       	ldi	r25, 0x0F	; 15
    2172:	96 87       	std	Z+14, r25	; 0x0e
    2174:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2176:	8d e0       	ldi	r24, 0x0D	; 13
    2178:	9f e0       	ldi	r25, 0x0F	; 15
    217a:	92 87       	std	Z+10, r25	; 0x0a
    217c:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    217e:	8f e2       	ldi	r24, 0x2F	; 47
    2180:	9f e0       	ldi	r25, 0x0F	; 15
    2182:	94 87       	std	Z+12, r25	; 0x0c
    2184:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2186:	e8 e4       	ldi	r30, 0x48	; 72
    2188:	f3 e0       	ldi	r31, 0x03	; 3
    218a:	89 e1       	ldi	r24, 0x19	; 25
    218c:	9f e0       	ldi	r25, 0x0F	; 15
    218e:	96 87       	std	Z+14, r25	; 0x0e
    2190:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2192:	83 e2       	ldi	r24, 0x23	; 35
    2194:	9f e0       	ldi	r25, 0x0F	; 15
    2196:	92 87       	std	Z+10, r25	; 0x0a
    2198:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    219a:	89 e4       	ldi	r24, 0x49	; 73
    219c:	9f e0       	ldi	r25, 0x0F	; 15
    219e:	94 87       	std	Z+12, r25	; 0x0c
    21a0:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    21a2:	89 e3       	ldi	r24, 0x39	; 57
    21a4:	90 e1       	ldi	r25, 0x10	; 16
    21a6:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <button7+0xc>
    21aa:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    21ae:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    21b8:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
    21c2:	08 95       	ret

000021c4 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    21c4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <state_measure_volt>
	dcmotorpwm_deinit();
    21c8:	0e 94 23 05 	call	0xa46	; 0xa46 <dcmotorpwm_deinit>
	off_button();
    21cc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <off_button>
	error_deinit();
    21d0:	0e 94 c5 09 	call	0x138a	; 0x138a <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    21d4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    21d8:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <system_events+0x1>
    21dc:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	82 e0       	ldi	r24, 0x02	; 2
    21e4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    21e8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    21ec:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    21f0:	8e 7f       	andi	r24, 0xFE	; 254
    21f2:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    21f6:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    21fa:	08 95       	ret

000021fc <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    21fc:	0e 94 06 10 	call	0x200c	; 0x200c <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2200:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2204:	80 ff       	sbrs	r24, 0
    2206:	03 c0       	rjmp	.+6      	; 0x220e <button4_toggle_system+0x12>
	{
		off_system();
    2208:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <off_system>
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    220e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2212:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2216:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    221a:	90 62       	ori	r25, 0x20	; 32
    221c:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    2220:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
    2224:	08 95       	ret

00002226 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2226:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    222a:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    222e:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    2232:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    2236:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <disp_fast_timer.2071>
    223a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <disp_fast_timer.2071+0x1>
    223e:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <disp_fast_timer.2071+0x2>
    2242:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <disp_fast_timer.2071+0x3>
    2246:	84 17       	cp	r24, r20
    2248:	95 07       	cpc	r25, r21
    224a:	a6 07       	cpc	r26, r22
    224c:	b7 07       	cpc	r27, r23
    224e:	08 f0       	brcs	.+2      	; 0x2252 <disp_fast_process+0x2c>
    2250:	9c c0       	rjmp	.+312    	; 0x238a <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2252:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2256:	85 ff       	sbrs	r24, 5
    2258:	1d c0       	rjmp	.+58     	; 0x2294 <disp_fast_process+0x6e>
    225a:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    225e:	63 36       	cpi	r22, 0x63	; 99
    2260:	c8 f4       	brcc	.+50     	; 0x2294 <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2262:	6f 5f       	subi	r22, 0xFF	; 255
    2264:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <servo_vibro_value>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    226e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <counter_very_fast_servo_add>
    2272:	8f 5f       	subi	r24, 0xFF	; 255
    2274:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2278:	8f 30       	cpi	r24, 0x0F	; 15
    227a:	60 f0       	brcs	.+24     	; 0x2294 <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    227c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2280:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    2284:	8f 7d       	andi	r24, 0xDF	; 223
    2286:	80 64       	ori	r24, 0x40	; 64
    2288:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    228c:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
				counter_very_fast_servo_add = 0;
    2290:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2294:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2298:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    229c:	91 ff       	sbrs	r25, 1
    229e:	1d c0       	rjmp	.+58     	; 0x22da <disp_fast_process+0xb4>
    22a0:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    22a4:	66 23       	and	r22, r22
    22a6:	c9 f0       	breq	.+50     	; 0x22da <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    22a8:	61 50       	subi	r22, 0x01	; 1
    22aa:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <servo_vibro_value>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    22b4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <counter_very_fast_servo_sub>
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    22be:	8f 30       	cpi	r24, 0x0F	; 15
    22c0:	60 f0       	brcs	.+24     	; 0x22da <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    22c2:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    22c6:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    22ca:	9d 7f       	andi	r25, 0xFD	; 253
    22cc:	94 60       	ori	r25, 0x04	; 4
    22ce:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    22d2:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
				counter_very_fast_servo_sub = 0;
    22d6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    22da:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    22de:	87 ff       	sbrs	r24, 7
    22e0:	1d c0       	rjmp	.+58     	; 0x231c <disp_fast_process+0xf6>
    22e2:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    22e6:	63 36       	cpi	r22, 0x63	; 99
    22e8:	c8 f4       	brcc	.+50     	; 0x231c <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    22ea:	6f 5f       	subi	r22, 0xFF	; 255
    22ec:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <motor_value>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			counter_very_fast_motor_add++;
    22f6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <counter_very_fast_motor_add>
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2300:	8f 30       	cpi	r24, 0x0F	; 15
    2302:	60 f0       	brcs	.+24     	; 0x231c <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2304:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2308:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    230c:	8f 77       	andi	r24, 0x7F	; 127
    230e:	91 60       	ori	r25, 0x01	; 1
    2310:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    2314:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
				counter_very_fast_motor_add = 0;
    2318:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    231c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2320:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    2324:	93 ff       	sbrs	r25, 3
    2326:	1d c0       	rjmp	.+58     	; 0x2362 <disp_fast_process+0x13c>
    2328:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    232c:	6b 30       	cpi	r22, 0x0B	; 11
    232e:	c8 f0       	brcs	.+50     	; 0x2362 <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2330:	61 50       	subi	r22, 0x01	; 1
    2332:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <motor_value>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			counter_very_fast_motor_sub++;
    233c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <counter_very_fast_motor_sub>
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2346:	8f 30       	cpi	r24, 0x0F	; 15
    2348:	60 f0       	brcs	.+24     	; 0x2362 <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    234a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    234e:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    2352:	97 7f       	andi	r25, 0xF7	; 247
    2354:	90 61       	ori	r25, 0x10	; 16
    2356:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <system_events+0x1>
    235a:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <system_events>
				counter_very_fast_motor_sub = 0;
    235e:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2362:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <disp_fast_timer.2071>
    2366:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <disp_fast_timer.2071+0x1>
    236a:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <disp_fast_timer.2071+0x2>
    236e:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <disp_fast_timer.2071+0x3>
    2372:	80 5b       	subi	r24, 0xB0	; 176
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	af 4f       	sbci	r26, 0xFF	; 255
    2378:	bf 4f       	sbci	r27, 0xFF	; 255
    237a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <disp_fast_timer.2071>
    237e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <disp_fast_timer.2071+0x1>
    2382:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <disp_fast_timer.2071+0x2>
    2386:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <disp_fast_timer.2071+0x3>
    238a:	08 95       	ret

0000238c <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    238c:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <mktime+0x2>
    2390:	50 91 bc 03 	lds	r21, 0x03BC	; 0x8003bc <mktime+0x3>
    2394:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <mktime+0x4>
    2398:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <mktime+0x5>
    239c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <disp_very_fast_timer>
    23a0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <disp_very_fast_timer+0x1>
    23a4:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <disp_very_fast_timer+0x2>
    23a8:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <disp_very_fast_timer+0x3>
    23ac:	84 17       	cp	r24, r20
    23ae:	95 07       	cpc	r25, r21
    23b0:	a6 07       	cpc	r26, r22
    23b2:	b7 07       	cpc	r27, r23
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <disp_very_fast_process+0x2c>
    23b6:	51 c0       	rjmp	.+162    	; 0x245a <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    23b8:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    23bc:	63 36       	cpi	r22, 0x63	; 99
    23be:	50 f4       	brcc	.+20     	; 0x23d4 <disp_very_fast_process+0x48>
    23c0:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    23c4:	86 ff       	sbrs	r24, 6
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    23c8:	6f 5f       	subi	r22, 0xFF	; 255
    23ca:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <servo_vibro_value>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    23d4:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <servo_vibro_value>
    23d8:	66 23       	and	r22, r22
    23da:	61 f0       	breq	.+24     	; 0x23f4 <disp_very_fast_process+0x68>
    23dc:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    23e0:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    23e4:	92 ff       	sbrs	r25, 2
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    23e8:	61 50       	subi	r22, 0x01	; 1
    23ea:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <servo_vibro_value>
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    23f4:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    23f8:	63 36       	cpi	r22, 0x63	; 99
    23fa:	60 f4       	brcc	.+24     	; 0x2414 <disp_very_fast_process+0x88>
    23fc:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2400:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    2404:	90 ff       	sbrs	r25, 0
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2408:	6f 5f       	subi	r22, 0xFF	; 255
    240a:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <motor_value>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2414:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <motor_value>
    2418:	6b 30       	cpi	r22, 0x0B	; 11
    241a:	60 f0       	brcs	.+24     	; 0x2434 <disp_very_fast_process+0xa8>
    241c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <system_events>
    2420:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <system_events+0x1>
    2424:	94 ff       	sbrs	r25, 4
    2426:	06 c0       	rjmp	.+12     	; 0x2434 <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2428:	61 50       	subi	r22, 0x01	; 1
    242a:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <motor_value>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	0e 94 5d 07 	call	0xeba	; 0xeba <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2434:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <disp_very_fast_timer>
    2438:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <disp_very_fast_timer+0x1>
    243c:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <disp_very_fast_timer+0x2>
    2440:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <disp_very_fast_timer+0x3>
    2444:	4e 96       	adiw	r24, 0x1e	; 30
    2446:	a1 1d       	adc	r26, r1
    2448:	b1 1d       	adc	r27, r1
    244a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <disp_very_fast_timer>
    244e:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <disp_very_fast_timer+0x1>
    2452:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <disp_very_fast_timer+0x2>
    2456:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <disp_very_fast_timer+0x3>
    245a:	08 95       	ret

0000245c <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	e9 eb       	ldi	r30, 0xB9	; 185
    2480:	f3 e0       	ldi	r31, 0x03	; 3
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	c2 96       	adiw	r24, 0x32	; 50
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	88 3e       	cpi	r24, 0xE8	; 232
    2492:	93 40       	sbci	r25, 0x03	; 3
    2494:	88 f0       	brcs	.+34     	; 0x24b8 <__vector_10+0x5c>
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	a4 81       	ldd	r26, Z+4	; 0x04
    249c:	b5 81       	ldd	r27, Z+5	; 0x05
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	a1 1d       	adc	r26, r1
    24a2:	b1 1d       	adc	r27, r1
    24a4:	82 83       	std	Z+2, r24	; 0x02
    24a6:	93 83       	std	Z+3, r25	; 0x03
    24a8:	a4 83       	std	Z+4, r26	; 0x04
    24aa:	b5 83       	std	Z+5, r27	; 0x05
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	88 5e       	subi	r24, 0xE8	; 232
    24b2:	93 40       	sbci	r25, 0x03	; 3
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	8f e1       	ldi	r24, 0x1F	; 31
    24ba:	92 e0       	ldi	r25, 0x02	; 2
    24bc:	0e 94 ed 06 	call	0xdda	; 0xdda <display_process>
    24c0:	ff 91       	pop	r31
    24c2:	ef 91       	pop	r30
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	0f 90       	pop	r0
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <timer0_init>:
    24e2:	93 b7       	in	r25, 0x33	; 51
    24e4:	98 60       	ori	r25, 0x08	; 8
    24e6:	93 bf       	out	0x33, r25	; 51
    24e8:	6c bf       	out	0x3c, r22	; 60
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	99 f0       	breq	.+38     	; 0x2514 <timer0_init+0x32>
    24ee:	28 f4       	brcc	.+10     	; 0x24fa <timer0_init+0x18>
    24f0:	88 23       	and	r24, r24
    24f2:	41 f0       	breq	.+16     	; 0x2504 <timer0_init+0x22>
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	51 f0       	breq	.+20     	; 0x250c <timer0_init+0x2a>
    24f8:	19 c0       	rjmp	.+50     	; 0x252c <timer0_init+0x4a>
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	79 f0       	breq	.+30     	; 0x251c <timer0_init+0x3a>
    24fe:	84 30       	cpi	r24, 0x04	; 4
    2500:	89 f0       	breq	.+34     	; 0x2524 <timer0_init+0x42>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <timer0_init+0x4a>
    2504:	83 b7       	in	r24, 0x33	; 51
    2506:	81 60       	ori	r24, 0x01	; 1
    2508:	83 bf       	out	0x33, r24	; 51
    250a:	13 c0       	rjmp	.+38     	; 0x2532 <timer0_init+0x50>
    250c:	83 b7       	in	r24, 0x33	; 51
    250e:	82 60       	ori	r24, 0x02	; 2
    2510:	83 bf       	out	0x33, r24	; 51
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <timer0_init+0x50>
    2514:	83 b7       	in	r24, 0x33	; 51
    2516:	83 60       	ori	r24, 0x03	; 3
    2518:	83 bf       	out	0x33, r24	; 51
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <timer0_init+0x50>
    251c:	83 b7       	in	r24, 0x33	; 51
    251e:	84 60       	ori	r24, 0x04	; 4
    2520:	83 bf       	out	0x33, r24	; 51
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <timer0_init+0x50>
    2524:	83 b7       	in	r24, 0x33	; 51
    2526:	85 60       	ori	r24, 0x05	; 5
    2528:	83 bf       	out	0x33, r24	; 51
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <timer0_init+0x50>
    252c:	83 b7       	in	r24, 0x33	; 51
    252e:	81 60       	ori	r24, 0x01	; 1
    2530:	83 bf       	out	0x33, r24	; 51
    2532:	89 b7       	in	r24, 0x39	; 57
    2534:	82 60       	ori	r24, 0x02	; 2
    2536:	89 bf       	out	0x39, r24	; 57
    2538:	08 95       	ret

0000253a <evTime_init>:
    253a:	23 e0       	ldi	r18, 0x03	; 3
    253c:	fc 01       	movw	r30, r24
    253e:	24 83       	std	Z+4, r18	; 0x04
    2540:	10 82       	st	Z, r1
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	12 82       	std	Z+2, r1	; 0x02
    2546:	13 82       	std	Z+3, r1	; 0x03
    2548:	08 95       	ret

0000254a <evTime_start>:
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	fc 01       	movw	r30, r24
    2552:	24 83       	std	Z+4, r18	; 0x04
    2554:	00 91 bb 03 	lds	r16, 0x03BB	; 0x8003bb <mktime+0x2>
    2558:	10 91 bc 03 	lds	r17, 0x03BC	; 0x8003bc <mktime+0x3>
    255c:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <mktime+0x4>
    2560:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <mktime+0x5>
    2564:	40 0f       	add	r20, r16
    2566:	51 1f       	adc	r21, r17
    2568:	62 1f       	adc	r22, r18
    256a:	73 1f       	adc	r23, r19
    256c:	40 83       	st	Z, r20
    256e:	51 83       	std	Z+1, r21	; 0x01
    2570:	62 83       	std	Z+2, r22	; 0x02
    2572:	73 83       	std	Z+3, r23	; 0x03
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <evTime_is_stated>:
    257a:	21 e0       	ldi	r18, 0x01	; 1
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	fc 01       	movw	r30, r24
    2580:	84 81       	ldd	r24, Z+4	; 0x04
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	11 f0       	breq	.+4      	; 0x258a <evTime_is_stated+0x10>
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	c9 01       	movw	r24, r18
    258c:	08 95       	ret

0000258e <evTime_check>:

int evTime_check(evTime * evt)
{
    258e:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2590:	84 81       	ldd	r24, Z+4	; 0x04
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	b1 f4       	brne	.+44     	; 0x25c2 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2596:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <mktime+0x2>
    259a:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <mktime+0x3>
    259e:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <mktime+0x4>
    25a2:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <mktime+0x5>
    25a6:	40 81       	ld	r20, Z
    25a8:	51 81       	ldd	r21, Z+1	; 0x01
    25aa:	62 81       	ldd	r22, Z+2	; 0x02
    25ac:	73 81       	ldd	r23, Z+3	; 0x03
    25ae:	48 17       	cp	r20, r24
    25b0:	59 07       	cpc	r21, r25
    25b2:	6a 07       	cpc	r22, r26
    25b4:	7b 07       	cpc	r23, r27
    25b6:	40 f4       	brcc	.+16     	; 0x25c8 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    25c2:	8f ef       	ldi	r24, 0xFF	; 255
    25c4:	9f ef       	ldi	r25, 0xFF	; 255
    25c6:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    25cc:	08 95       	ret

000025ce <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    25ce:	21 e0       	ldi	r18, 0x01	; 1
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	fc 01       	movw	r30, r24
    25d4:	84 81       	ldd	r24, Z+4	; 0x04
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	11 f0       	breq	.+4      	; 0x25de <evTime_off+0x10>
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
}
    25de:	c9 01       	movw	r24, r18
    25e0:	08 95       	ret

000025e2 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	ec 01       	movw	r28, r24
    25f4:	6a 01       	movw	r12, r20
    25f6:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	81 11       	cpse	r24, r1
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2602:	18 82       	st	Y, r1
    2604:	19 82       	std	Y+1, r1	; 0x01
    2606:	1a 82       	std	Y+2, r1	; 0x02
    2608:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    260a:	ce 01       	movw	r24, r28
    260c:	0e 94 c7 12 	call	0x258e	; 0x258e <evTime_check>
    2610:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	31 f4       	brne	.+12     	; 0x2622 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2616:	b7 01       	movw	r22, r14
    2618:	a6 01       	movw	r20, r12
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
		return 1;
    2620:	0d c0       	rjmp	.+26     	; 0x263c <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	41 f4       	brne	.+16     	; 0x2638 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2628:	b7 01       	movw	r22, r14
    262a:	a6 01       	movw	r20, r12
    262c:	ce 01       	movw	r24, r28
    262e:	0e 94 a5 12 	call	0x254a	; 0x254a <evTime_start>
	}
	return 0;
    2632:	00 e0       	ldi	r16, 0x00	; 0
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	02 c0       	rjmp	.+4      	; 0x263c <evTime_process_period+0x5a>
    2638:	00 e0       	ldi	r16, 0x00	; 0
    263a:	10 e0       	ldi	r17, 0x00	; 0
}
    263c:	c8 01       	movw	r24, r16
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	cf 90       	pop	r12
    264e:	08 95       	ret

00002650 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	2f 93       	push	r18
    265c:	3f 93       	push	r19
    265e:	4f 93       	push	r20
    2660:	5f 93       	push	r21
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	ef 93       	push	r30
    2668:	ff 93       	push	r31
    266a:	2b b1       	in	r18, 0x0b	; 11
    266c:	3c b1       	in	r19, 0x0c	; 12
    266e:	28 71       	andi	r18, 0x18	; 24
    2670:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <UART_RxHead>
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <UART_RxTail>
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	84 17       	cp	r24, r20
    2680:	95 07       	cpc	r25, r21
    2682:	39 f0       	breq	.+14     	; 0x2692 <__vector_13+0x42>
    2684:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <UART_RxHead>
    2688:	fc 01       	movw	r30, r24
    268a:	ea 5d       	subi	r30, 0xDA	; 218
    268c:	fd 4f       	sbci	r31, 0xFD	; 253
    268e:	30 83       	st	Z, r19
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <__vector_13+0x44>
    2692:	22 e0       	ldi	r18, 0x02	; 2
    2694:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <UART_LastRxError>
    2698:	ff 91       	pop	r31
    269a:	ef 91       	pop	r30
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f 90       	pop	r0
    26ae:	1f 90       	pop	r1
    26b0:	18 95       	reti

000026b2 <__vector_14>:
    26b2:	1f 92       	push	r1
    26b4:	0f 92       	push	r0
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	0f 92       	push	r0
    26ba:	11 24       	eor	r1, r1
    26bc:	8f 93       	push	r24
    26be:	9f 93       	push	r25
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
    26c4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <UART_TxHead>
    26c8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UART_TxTail>
    26cc:	98 17       	cp	r25, r24
    26ce:	71 f0       	breq	.+28     	; 0x26ec <__vector_14+0x3a>
    26d0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UART_TxTail>
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	8f 77       	andi	r24, 0x7F	; 127
    26da:	99 27       	eor	r25, r25
    26dc:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <UART_TxTail>
    26e0:	fc 01       	movw	r30, r24
    26e2:	ea 5d       	subi	r30, 0xDA	; 218
    26e4:	fd 4f       	sbci	r31, 0xFD	; 253
    26e6:	80 81       	ld	r24, Z
    26e8:	8c b9       	out	0x0c, r24	; 12
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <__vector_14+0x3c>
    26ec:	55 98       	cbi	0x0a, 5	; 10
    26ee:	ff 91       	pop	r31
    26f0:	ef 91       	pop	r30
    26f2:	9f 91       	pop	r25
    26f4:	8f 91       	pop	r24
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <uart0_init>:
    2700:	f8 94       	cli
    2702:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <UART_TxHead>
    2706:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <UART_TxTail>
    270a:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <UART_RxHead>
    270e:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <UART_RxTail>
    2712:	78 94       	sei
    2714:	99 23       	and	r25, r25
    2716:	1c f4       	brge	.+6      	; 0x271e <uart0_init+0x1e>
    2718:	22 e0       	ldi	r18, 0x02	; 2
    271a:	2b b9       	out	0x0b, r18	; 11
    271c:	9f 77       	andi	r25, 0x7F	; 127
    271e:	90 bd       	out	0x20, r25	; 32
    2720:	89 b9       	out	0x09, r24	; 9
    2722:	88 e9       	ldi	r24, 0x98	; 152
    2724:	8a b9       	out	0x0a, r24	; 10
    2726:	86 e8       	ldi	r24, 0x86	; 134
    2728:	80 bd       	out	0x20, r24	; 32
    272a:	08 95       	ret

0000272c <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    272c:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <UART_TxHead>
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	4f 5f       	subi	r20, 0xFF	; 255
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	4f 77       	andi	r20, 0x7F	; 127
    2738:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    273a:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <UART_TxTail>
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	42 17       	cp	r20, r18
    2742:	53 07       	cpc	r21, r19
    2744:	d1 f3       	breq	.-12     	; 0x273a <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    2746:	fa 01       	movw	r30, r20
    2748:	ea 5d       	subi	r30, 0xDA	; 218
    274a:	fd 4f       	sbci	r31, 0xFD	; 253
    274c:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    274e:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    2752:	55 9a       	sbi	0x0a, 5	; 10
    2754:	08 95       	ret

00002756 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	ec 01       	movw	r28, r24
	while (*s) {
    275c:	88 81       	ld	r24, Y
    275e:	88 23       	and	r24, r24
    2760:	31 f0       	breq	.+12     	; 0x276e <uart0_puts+0x18>
    2762:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    2764:	0e 94 96 13 	call	0x272c	; 0x272c <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    2768:	89 91       	ld	r24, Y+
    276a:	81 11       	cpse	r24, r1
    276c:	fb cf       	rjmp	.-10     	; 0x2764 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <__subsf3>:
    2774:	50 58       	subi	r21, 0x80	; 128

00002776 <__addsf3>:
    2776:	bb 27       	eor	r27, r27
    2778:	aa 27       	eor	r26, r26
    277a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__addsf3x>
    277e:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__fp_round>
    2782:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fp_pscA>
    2786:	38 f0       	brcs	.+14     	; 0x2796 <__addsf3+0x20>
    2788:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fp_pscB>
    278c:	20 f0       	brcs	.+8      	; 0x2796 <__addsf3+0x20>
    278e:	39 f4       	brne	.+14     	; 0x279e <__addsf3+0x28>
    2790:	9f 3f       	cpi	r25, 0xFF	; 255
    2792:	19 f4       	brne	.+6      	; 0x279a <__addsf3+0x24>
    2794:	26 f4       	brtc	.+8      	; 0x279e <__addsf3+0x28>
    2796:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_nan>
    279a:	0e f4       	brtc	.+2      	; 0x279e <__addsf3+0x28>
    279c:	e0 95       	com	r30
    279e:	e7 fb       	bst	r30, 7
    27a0:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__fp_inf>

000027a4 <__addsf3x>:
    27a4:	e9 2f       	mov	r30, r25
    27a6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_split3>
    27aa:	58 f3       	brcs	.-42     	; 0x2782 <__addsf3+0xc>
    27ac:	ba 17       	cp	r27, r26
    27ae:	62 07       	cpc	r22, r18
    27b0:	73 07       	cpc	r23, r19
    27b2:	84 07       	cpc	r24, r20
    27b4:	95 07       	cpc	r25, r21
    27b6:	20 f0       	brcs	.+8      	; 0x27c0 <__addsf3x+0x1c>
    27b8:	79 f4       	brne	.+30     	; 0x27d8 <__addsf3x+0x34>
    27ba:	a6 f5       	brtc	.+104    	; 0x2824 <__addsf3x+0x80>
    27bc:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__fp_zero>
    27c0:	0e f4       	brtc	.+2      	; 0x27c4 <__addsf3x+0x20>
    27c2:	e0 95       	com	r30
    27c4:	0b 2e       	mov	r0, r27
    27c6:	ba 2f       	mov	r27, r26
    27c8:	a0 2d       	mov	r26, r0
    27ca:	0b 01       	movw	r0, r22
    27cc:	b9 01       	movw	r22, r18
    27ce:	90 01       	movw	r18, r0
    27d0:	0c 01       	movw	r0, r24
    27d2:	ca 01       	movw	r24, r20
    27d4:	a0 01       	movw	r20, r0
    27d6:	11 24       	eor	r1, r1
    27d8:	ff 27       	eor	r31, r31
    27da:	59 1b       	sub	r21, r25
    27dc:	99 f0       	breq	.+38     	; 0x2804 <__addsf3x+0x60>
    27de:	59 3f       	cpi	r21, 0xF9	; 249
    27e0:	50 f4       	brcc	.+20     	; 0x27f6 <__addsf3x+0x52>
    27e2:	50 3e       	cpi	r21, 0xE0	; 224
    27e4:	68 f1       	brcs	.+90     	; 0x2840 <__addsf3x+0x9c>
    27e6:	1a 16       	cp	r1, r26
    27e8:	f0 40       	sbci	r31, 0x00	; 0
    27ea:	a2 2f       	mov	r26, r18
    27ec:	23 2f       	mov	r18, r19
    27ee:	34 2f       	mov	r19, r20
    27f0:	44 27       	eor	r20, r20
    27f2:	58 5f       	subi	r21, 0xF8	; 248
    27f4:	f3 cf       	rjmp	.-26     	; 0x27dc <__addsf3x+0x38>
    27f6:	46 95       	lsr	r20
    27f8:	37 95       	ror	r19
    27fa:	27 95       	ror	r18
    27fc:	a7 95       	ror	r26
    27fe:	f0 40       	sbci	r31, 0x00	; 0
    2800:	53 95       	inc	r21
    2802:	c9 f7       	brne	.-14     	; 0x27f6 <__addsf3x+0x52>
    2804:	7e f4       	brtc	.+30     	; 0x2824 <__addsf3x+0x80>
    2806:	1f 16       	cp	r1, r31
    2808:	ba 0b       	sbc	r27, r26
    280a:	62 0b       	sbc	r22, r18
    280c:	73 0b       	sbc	r23, r19
    280e:	84 0b       	sbc	r24, r20
    2810:	ba f0       	brmi	.+46     	; 0x2840 <__addsf3x+0x9c>
    2812:	91 50       	subi	r25, 0x01	; 1
    2814:	a1 f0       	breq	.+40     	; 0x283e <__addsf3x+0x9a>
    2816:	ff 0f       	add	r31, r31
    2818:	bb 1f       	adc	r27, r27
    281a:	66 1f       	adc	r22, r22
    281c:	77 1f       	adc	r23, r23
    281e:	88 1f       	adc	r24, r24
    2820:	c2 f7       	brpl	.-16     	; 0x2812 <__addsf3x+0x6e>
    2822:	0e c0       	rjmp	.+28     	; 0x2840 <__addsf3x+0x9c>
    2824:	ba 0f       	add	r27, r26
    2826:	62 1f       	adc	r22, r18
    2828:	73 1f       	adc	r23, r19
    282a:	84 1f       	adc	r24, r20
    282c:	48 f4       	brcc	.+18     	; 0x2840 <__addsf3x+0x9c>
    282e:	87 95       	ror	r24
    2830:	77 95       	ror	r23
    2832:	67 95       	ror	r22
    2834:	b7 95       	ror	r27
    2836:	f7 95       	ror	r31
    2838:	9e 3f       	cpi	r25, 0xFE	; 254
    283a:	08 f0       	brcs	.+2      	; 0x283e <__addsf3x+0x9a>
    283c:	b0 cf       	rjmp	.-160    	; 0x279e <__addsf3+0x28>
    283e:	93 95       	inc	r25
    2840:	88 0f       	add	r24, r24
    2842:	08 f0       	brcs	.+2      	; 0x2846 <__addsf3x+0xa2>
    2844:	99 27       	eor	r25, r25
    2846:	ee 0f       	add	r30, r30
    2848:	97 95       	ror	r25
    284a:	87 95       	ror	r24
    284c:	08 95       	ret

0000284e <__cmpsf2>:
    284e:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fp_cmp>
    2852:	08 f4       	brcc	.+2      	; 0x2856 <__cmpsf2+0x8>
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	08 95       	ret

00002858 <__divsf3>:
    2858:	0e 94 40 14 	call	0x2880	; 0x2880 <__divsf3x>
    285c:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__fp_round>
    2860:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fp_pscB>
    2864:	58 f0       	brcs	.+22     	; 0x287c <__divsf3+0x24>
    2866:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fp_pscA>
    286a:	40 f0       	brcs	.+16     	; 0x287c <__divsf3+0x24>
    286c:	29 f4       	brne	.+10     	; 0x2878 <__divsf3+0x20>
    286e:	5f 3f       	cpi	r21, 0xFF	; 255
    2870:	29 f0       	breq	.+10     	; 0x287c <__divsf3+0x24>
    2872:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__fp_inf>
    2876:	51 11       	cpse	r21, r1
    2878:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__fp_szero>
    287c:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_nan>

00002880 <__divsf3x>:
    2880:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_split3>
    2884:	68 f3       	brcs	.-38     	; 0x2860 <__divsf3+0x8>

00002886 <__divsf3_pse>:
    2886:	99 23       	and	r25, r25
    2888:	b1 f3       	breq	.-20     	; 0x2876 <__divsf3+0x1e>
    288a:	55 23       	and	r21, r21
    288c:	91 f3       	breq	.-28     	; 0x2872 <__divsf3+0x1a>
    288e:	95 1b       	sub	r25, r21
    2890:	55 0b       	sbc	r21, r21
    2892:	bb 27       	eor	r27, r27
    2894:	aa 27       	eor	r26, r26
    2896:	62 17       	cp	r22, r18
    2898:	73 07       	cpc	r23, r19
    289a:	84 07       	cpc	r24, r20
    289c:	38 f0       	brcs	.+14     	; 0x28ac <__divsf3_pse+0x26>
    289e:	9f 5f       	subi	r25, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	44 1f       	adc	r20, r20
    28a8:	aa 1f       	adc	r26, r26
    28aa:	a9 f3       	breq	.-22     	; 0x2896 <__divsf3_pse+0x10>
    28ac:	35 d0       	rcall	.+106    	; 0x2918 <__divsf3_pse+0x92>
    28ae:	0e 2e       	mov	r0, r30
    28b0:	3a f0       	brmi	.+14     	; 0x28c0 <__divsf3_pse+0x3a>
    28b2:	e0 e8       	ldi	r30, 0x80	; 128
    28b4:	32 d0       	rcall	.+100    	; 0x291a <__divsf3_pse+0x94>
    28b6:	91 50       	subi	r25, 0x01	; 1
    28b8:	50 40       	sbci	r21, 0x00	; 0
    28ba:	e6 95       	lsr	r30
    28bc:	00 1c       	adc	r0, r0
    28be:	ca f7       	brpl	.-14     	; 0x28b2 <__divsf3_pse+0x2c>
    28c0:	2b d0       	rcall	.+86     	; 0x2918 <__divsf3_pse+0x92>
    28c2:	fe 2f       	mov	r31, r30
    28c4:	29 d0       	rcall	.+82     	; 0x2918 <__divsf3_pse+0x92>
    28c6:	66 0f       	add	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	88 1f       	adc	r24, r24
    28cc:	bb 1f       	adc	r27, r27
    28ce:	26 17       	cp	r18, r22
    28d0:	37 07       	cpc	r19, r23
    28d2:	48 07       	cpc	r20, r24
    28d4:	ab 07       	cpc	r26, r27
    28d6:	b0 e8       	ldi	r27, 0x80	; 128
    28d8:	09 f0       	breq	.+2      	; 0x28dc <__divsf3_pse+0x56>
    28da:	bb 0b       	sbc	r27, r27
    28dc:	80 2d       	mov	r24, r0
    28de:	bf 01       	movw	r22, r30
    28e0:	ff 27       	eor	r31, r31
    28e2:	93 58       	subi	r25, 0x83	; 131
    28e4:	5f 4f       	sbci	r21, 0xFF	; 255
    28e6:	3a f0       	brmi	.+14     	; 0x28f6 <__divsf3_pse+0x70>
    28e8:	9e 3f       	cpi	r25, 0xFE	; 254
    28ea:	51 05       	cpc	r21, r1
    28ec:	78 f0       	brcs	.+30     	; 0x290c <__divsf3_pse+0x86>
    28ee:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__fp_inf>
    28f2:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__fp_szero>
    28f6:	5f 3f       	cpi	r21, 0xFF	; 255
    28f8:	e4 f3       	brlt	.-8      	; 0x28f2 <__divsf3_pse+0x6c>
    28fa:	98 3e       	cpi	r25, 0xE8	; 232
    28fc:	d4 f3       	brlt	.-12     	; 0x28f2 <__divsf3_pse+0x6c>
    28fe:	86 95       	lsr	r24
    2900:	77 95       	ror	r23
    2902:	67 95       	ror	r22
    2904:	b7 95       	ror	r27
    2906:	f7 95       	ror	r31
    2908:	9f 5f       	subi	r25, 0xFF	; 255
    290a:	c9 f7       	brne	.-14     	; 0x28fe <__divsf3_pse+0x78>
    290c:	88 0f       	add	r24, r24
    290e:	91 1d       	adc	r25, r1
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	97 f9       	bld	r25, 7
    2916:	08 95       	ret
    2918:	e1 e0       	ldi	r30, 0x01	; 1
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	bb 1f       	adc	r27, r27
    2922:	62 17       	cp	r22, r18
    2924:	73 07       	cpc	r23, r19
    2926:	84 07       	cpc	r24, r20
    2928:	ba 07       	cpc	r27, r26
    292a:	20 f0       	brcs	.+8      	; 0x2934 <__divsf3_pse+0xae>
    292c:	62 1b       	sub	r22, r18
    292e:	73 0b       	sbc	r23, r19
    2930:	84 0b       	sbc	r24, r20
    2932:	ba 0b       	sbc	r27, r26
    2934:	ee 1f       	adc	r30, r30
    2936:	88 f7       	brcc	.-30     	; 0x291a <__divsf3_pse+0x94>
    2938:	e0 95       	com	r30
    293a:	08 95       	ret

0000293c <__fixsfsi>:
    293c:	0e 94 a5 14 	call	0x294a	; 0x294a <__fixunssfsi>
    2940:	68 94       	set
    2942:	b1 11       	cpse	r27, r1
    2944:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__fp_szero>
    2948:	08 95       	ret

0000294a <__fixunssfsi>:
    294a:	0e 94 65 15 	call	0x2aca	; 0x2aca <__fp_splitA>
    294e:	88 f0       	brcs	.+34     	; 0x2972 <__fixunssfsi+0x28>
    2950:	9f 57       	subi	r25, 0x7F	; 127
    2952:	98 f0       	brcs	.+38     	; 0x297a <__fixunssfsi+0x30>
    2954:	b9 2f       	mov	r27, r25
    2956:	99 27       	eor	r25, r25
    2958:	b7 51       	subi	r27, 0x17	; 23
    295a:	b0 f0       	brcs	.+44     	; 0x2988 <__fixunssfsi+0x3e>
    295c:	e1 f0       	breq	.+56     	; 0x2996 <__fixunssfsi+0x4c>
    295e:	66 0f       	add	r22, r22
    2960:	77 1f       	adc	r23, r23
    2962:	88 1f       	adc	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	1a f0       	brmi	.+6      	; 0x296e <__fixunssfsi+0x24>
    2968:	ba 95       	dec	r27
    296a:	c9 f7       	brne	.-14     	; 0x295e <__fixunssfsi+0x14>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <__fixunssfsi+0x4c>
    296e:	b1 30       	cpi	r27, 0x01	; 1
    2970:	91 f0       	breq	.+36     	; 0x2996 <__fixunssfsi+0x4c>
    2972:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__fp_zero>
    2976:	b1 e0       	ldi	r27, 0x01	; 1
    2978:	08 95       	ret
    297a:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__fp_zero>
    297e:	67 2f       	mov	r22, r23
    2980:	78 2f       	mov	r23, r24
    2982:	88 27       	eor	r24, r24
    2984:	b8 5f       	subi	r27, 0xF8	; 248
    2986:	39 f0       	breq	.+14     	; 0x2996 <__fixunssfsi+0x4c>
    2988:	b9 3f       	cpi	r27, 0xF9	; 249
    298a:	cc f3       	brlt	.-14     	; 0x297e <__fixunssfsi+0x34>
    298c:	86 95       	lsr	r24
    298e:	77 95       	ror	r23
    2990:	67 95       	ror	r22
    2992:	b3 95       	inc	r27
    2994:	d9 f7       	brne	.-10     	; 0x298c <__fixunssfsi+0x42>
    2996:	3e f4       	brtc	.+14     	; 0x29a6 <__fixunssfsi+0x5c>
    2998:	90 95       	com	r25
    299a:	80 95       	com	r24
    299c:	70 95       	com	r23
    299e:	61 95       	neg	r22
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255
    29a2:	8f 4f       	sbci	r24, 0xFF	; 255
    29a4:	9f 4f       	sbci	r25, 0xFF	; 255
    29a6:	08 95       	ret

000029a8 <__floatunsisf>:
    29a8:	e8 94       	clt
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <__floatsisf+0x12>

000029ac <__floatsisf>:
    29ac:	97 fb       	bst	r25, 7
    29ae:	3e f4       	brtc	.+14     	; 0x29be <__floatsisf+0x12>
    29b0:	90 95       	com	r25
    29b2:	80 95       	com	r24
    29b4:	70 95       	com	r23
    29b6:	61 95       	neg	r22
    29b8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ba:	8f 4f       	sbci	r24, 0xFF	; 255
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	99 23       	and	r25, r25
    29c0:	a9 f0       	breq	.+42     	; 0x29ec <__floatsisf+0x40>
    29c2:	f9 2f       	mov	r31, r25
    29c4:	96 e9       	ldi	r25, 0x96	; 150
    29c6:	bb 27       	eor	r27, r27
    29c8:	93 95       	inc	r25
    29ca:	f6 95       	lsr	r31
    29cc:	87 95       	ror	r24
    29ce:	77 95       	ror	r23
    29d0:	67 95       	ror	r22
    29d2:	b7 95       	ror	r27
    29d4:	f1 11       	cpse	r31, r1
    29d6:	f8 cf       	rjmp	.-16     	; 0x29c8 <__floatsisf+0x1c>
    29d8:	fa f4       	brpl	.+62     	; 0x2a18 <__floatsisf+0x6c>
    29da:	bb 0f       	add	r27, r27
    29dc:	11 f4       	brne	.+4      	; 0x29e2 <__floatsisf+0x36>
    29de:	60 ff       	sbrs	r22, 0
    29e0:	1b c0       	rjmp	.+54     	; 0x2a18 <__floatsisf+0x6c>
    29e2:	6f 5f       	subi	r22, 0xFF	; 255
    29e4:	7f 4f       	sbci	r23, 0xFF	; 255
    29e6:	8f 4f       	sbci	r24, 0xFF	; 255
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	16 c0       	rjmp	.+44     	; 0x2a18 <__floatsisf+0x6c>
    29ec:	88 23       	and	r24, r24
    29ee:	11 f0       	breq	.+4      	; 0x29f4 <__floatsisf+0x48>
    29f0:	96 e9       	ldi	r25, 0x96	; 150
    29f2:	11 c0       	rjmp	.+34     	; 0x2a16 <__floatsisf+0x6a>
    29f4:	77 23       	and	r23, r23
    29f6:	21 f0       	breq	.+8      	; 0x2a00 <__floatsisf+0x54>
    29f8:	9e e8       	ldi	r25, 0x8E	; 142
    29fa:	87 2f       	mov	r24, r23
    29fc:	76 2f       	mov	r23, r22
    29fe:	05 c0       	rjmp	.+10     	; 0x2a0a <__floatsisf+0x5e>
    2a00:	66 23       	and	r22, r22
    2a02:	71 f0       	breq	.+28     	; 0x2a20 <__floatsisf+0x74>
    2a04:	96 e8       	ldi	r25, 0x86	; 134
    2a06:	86 2f       	mov	r24, r22
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	2a f0       	brmi	.+10     	; 0x2a18 <__floatsisf+0x6c>
    2a0e:	9a 95       	dec	r25
    2a10:	66 0f       	add	r22, r22
    2a12:	77 1f       	adc	r23, r23
    2a14:	88 1f       	adc	r24, r24
    2a16:	da f7       	brpl	.-10     	; 0x2a0e <__floatsisf+0x62>
    2a18:	88 0f       	add	r24, r24
    2a1a:	96 95       	lsr	r25
    2a1c:	87 95       	ror	r24
    2a1e:	97 f9       	bld	r25, 7
    2a20:	08 95       	ret

00002a22 <__fp_cmp>:
    2a22:	99 0f       	add	r25, r25
    2a24:	00 08       	sbc	r0, r0
    2a26:	55 0f       	add	r21, r21
    2a28:	aa 0b       	sbc	r26, r26
    2a2a:	e0 e8       	ldi	r30, 0x80	; 128
    2a2c:	fe ef       	ldi	r31, 0xFE	; 254
    2a2e:	16 16       	cp	r1, r22
    2a30:	17 06       	cpc	r1, r23
    2a32:	e8 07       	cpc	r30, r24
    2a34:	f9 07       	cpc	r31, r25
    2a36:	c0 f0       	brcs	.+48     	; 0x2a68 <__fp_cmp+0x46>
    2a38:	12 16       	cp	r1, r18
    2a3a:	13 06       	cpc	r1, r19
    2a3c:	e4 07       	cpc	r30, r20
    2a3e:	f5 07       	cpc	r31, r21
    2a40:	98 f0       	brcs	.+38     	; 0x2a68 <__fp_cmp+0x46>
    2a42:	62 1b       	sub	r22, r18
    2a44:	73 0b       	sbc	r23, r19
    2a46:	84 0b       	sbc	r24, r20
    2a48:	95 0b       	sbc	r25, r21
    2a4a:	39 f4       	brne	.+14     	; 0x2a5a <__fp_cmp+0x38>
    2a4c:	0a 26       	eor	r0, r26
    2a4e:	61 f0       	breq	.+24     	; 0x2a68 <__fp_cmp+0x46>
    2a50:	23 2b       	or	r18, r19
    2a52:	24 2b       	or	r18, r20
    2a54:	25 2b       	or	r18, r21
    2a56:	21 f4       	brne	.+8      	; 0x2a60 <__fp_cmp+0x3e>
    2a58:	08 95       	ret
    2a5a:	0a 26       	eor	r0, r26
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <__fp_cmp+0x3e>
    2a5e:	a1 40       	sbci	r26, 0x01	; 1
    2a60:	a6 95       	lsr	r26
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	81 1d       	adc	r24, r1
    2a66:	81 1d       	adc	r24, r1
    2a68:	08 95       	ret

00002a6a <__fp_inf>:
    2a6a:	97 f9       	bld	r25, 7
    2a6c:	9f 67       	ori	r25, 0x7F	; 127
    2a6e:	80 e8       	ldi	r24, 0x80	; 128
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	08 95       	ret

00002a76 <__fp_nan>:
    2a76:	9f ef       	ldi	r25, 0xFF	; 255
    2a78:	80 ec       	ldi	r24, 0xC0	; 192
    2a7a:	08 95       	ret

00002a7c <__fp_pscA>:
    2a7c:	00 24       	eor	r0, r0
    2a7e:	0a 94       	dec	r0
    2a80:	16 16       	cp	r1, r22
    2a82:	17 06       	cpc	r1, r23
    2a84:	18 06       	cpc	r1, r24
    2a86:	09 06       	cpc	r0, r25
    2a88:	08 95       	ret

00002a8a <__fp_pscB>:
    2a8a:	00 24       	eor	r0, r0
    2a8c:	0a 94       	dec	r0
    2a8e:	12 16       	cp	r1, r18
    2a90:	13 06       	cpc	r1, r19
    2a92:	14 06       	cpc	r1, r20
    2a94:	05 06       	cpc	r0, r21
    2a96:	08 95       	ret

00002a98 <__fp_round>:
    2a98:	09 2e       	mov	r0, r25
    2a9a:	03 94       	inc	r0
    2a9c:	00 0c       	add	r0, r0
    2a9e:	11 f4       	brne	.+4      	; 0x2aa4 <__fp_round+0xc>
    2aa0:	88 23       	and	r24, r24
    2aa2:	52 f0       	brmi	.+20     	; 0x2ab8 <__fp_round+0x20>
    2aa4:	bb 0f       	add	r27, r27
    2aa6:	40 f4       	brcc	.+16     	; 0x2ab8 <__fp_round+0x20>
    2aa8:	bf 2b       	or	r27, r31
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <__fp_round+0x18>
    2aac:	60 ff       	sbrs	r22, 0
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <__fp_round+0x20>
    2ab0:	6f 5f       	subi	r22, 0xFF	; 255
    2ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab8:	08 95       	ret

00002aba <__fp_split3>:
    2aba:	57 fd       	sbrc	r21, 7
    2abc:	90 58       	subi	r25, 0x80	; 128
    2abe:	44 0f       	add	r20, r20
    2ac0:	55 1f       	adc	r21, r21
    2ac2:	59 f0       	breq	.+22     	; 0x2ada <__fp_splitA+0x10>
    2ac4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac6:	71 f0       	breq	.+28     	; 0x2ae4 <__fp_splitA+0x1a>
    2ac8:	47 95       	ror	r20

00002aca <__fp_splitA>:
    2aca:	88 0f       	add	r24, r24
    2acc:	97 fb       	bst	r25, 7
    2ace:	99 1f       	adc	r25, r25
    2ad0:	61 f0       	breq	.+24     	; 0x2aea <__fp_splitA+0x20>
    2ad2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ad4:	79 f0       	breq	.+30     	; 0x2af4 <__fp_splitA+0x2a>
    2ad6:	87 95       	ror	r24
    2ad8:	08 95       	ret
    2ada:	12 16       	cp	r1, r18
    2adc:	13 06       	cpc	r1, r19
    2ade:	14 06       	cpc	r1, r20
    2ae0:	55 1f       	adc	r21, r21
    2ae2:	f2 cf       	rjmp	.-28     	; 0x2ac8 <__fp_split3+0xe>
    2ae4:	46 95       	lsr	r20
    2ae6:	f1 df       	rcall	.-30     	; 0x2aca <__fp_splitA>
    2ae8:	08 c0       	rjmp	.+16     	; 0x2afa <__fp_splitA+0x30>
    2aea:	16 16       	cp	r1, r22
    2aec:	17 06       	cpc	r1, r23
    2aee:	18 06       	cpc	r1, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	f1 cf       	rjmp	.-30     	; 0x2ad6 <__fp_splitA+0xc>
    2af4:	86 95       	lsr	r24
    2af6:	71 05       	cpc	r23, r1
    2af8:	61 05       	cpc	r22, r1
    2afa:	08 94       	sec
    2afc:	08 95       	ret

00002afe <__fp_zero>:
    2afe:	e8 94       	clt

00002b00 <__fp_szero>:
    2b00:	bb 27       	eor	r27, r27
    2b02:	66 27       	eor	r22, r22
    2b04:	77 27       	eor	r23, r23
    2b06:	cb 01       	movw	r24, r22
    2b08:	97 f9       	bld	r25, 7
    2b0a:	08 95       	ret

00002b0c <__mulsf3>:
    2b0c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3x>
    2b10:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__fp_round>
    2b14:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__fp_pscA>
    2b18:	38 f0       	brcs	.+14     	; 0x2b28 <__mulsf3+0x1c>
    2b1a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__fp_pscB>
    2b1e:	20 f0       	brcs	.+8      	; 0x2b28 <__mulsf3+0x1c>
    2b20:	95 23       	and	r25, r21
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <__mulsf3+0x1c>
    2b24:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__fp_inf>
    2b28:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_nan>
    2b2c:	11 24       	eor	r1, r1
    2b2e:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__fp_szero>

00002b32 <__mulsf3x>:
    2b32:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__fp_split3>
    2b36:	70 f3       	brcs	.-36     	; 0x2b14 <__mulsf3+0x8>

00002b38 <__mulsf3_pse>:
    2b38:	95 9f       	mul	r25, r21
    2b3a:	c1 f3       	breq	.-16     	; 0x2b2c <__mulsf3+0x20>
    2b3c:	95 0f       	add	r25, r21
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	55 1f       	adc	r21, r21
    2b42:	62 9f       	mul	r22, r18
    2b44:	f0 01       	movw	r30, r0
    2b46:	72 9f       	mul	r23, r18
    2b48:	bb 27       	eor	r27, r27
    2b4a:	f0 0d       	add	r31, r0
    2b4c:	b1 1d       	adc	r27, r1
    2b4e:	63 9f       	mul	r22, r19
    2b50:	aa 27       	eor	r26, r26
    2b52:	f0 0d       	add	r31, r0
    2b54:	b1 1d       	adc	r27, r1
    2b56:	aa 1f       	adc	r26, r26
    2b58:	64 9f       	mul	r22, r20
    2b5a:	66 27       	eor	r22, r22
    2b5c:	b0 0d       	add	r27, r0
    2b5e:	a1 1d       	adc	r26, r1
    2b60:	66 1f       	adc	r22, r22
    2b62:	82 9f       	mul	r24, r18
    2b64:	22 27       	eor	r18, r18
    2b66:	b0 0d       	add	r27, r0
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	62 1f       	adc	r22, r18
    2b6c:	73 9f       	mul	r23, r19
    2b6e:	b0 0d       	add	r27, r0
    2b70:	a1 1d       	adc	r26, r1
    2b72:	62 1f       	adc	r22, r18
    2b74:	83 9f       	mul	r24, r19
    2b76:	a0 0d       	add	r26, r0
    2b78:	61 1d       	adc	r22, r1
    2b7a:	22 1f       	adc	r18, r18
    2b7c:	74 9f       	mul	r23, r20
    2b7e:	33 27       	eor	r19, r19
    2b80:	a0 0d       	add	r26, r0
    2b82:	61 1d       	adc	r22, r1
    2b84:	23 1f       	adc	r18, r19
    2b86:	84 9f       	mul	r24, r20
    2b88:	60 0d       	add	r22, r0
    2b8a:	21 1d       	adc	r18, r1
    2b8c:	82 2f       	mov	r24, r18
    2b8e:	76 2f       	mov	r23, r22
    2b90:	6a 2f       	mov	r22, r26
    2b92:	11 24       	eor	r1, r1
    2b94:	9f 57       	subi	r25, 0x7F	; 127
    2b96:	50 40       	sbci	r21, 0x00	; 0
    2b98:	9a f0       	brmi	.+38     	; 0x2bc0 <__mulsf3_pse+0x88>
    2b9a:	f1 f0       	breq	.+60     	; 0x2bd8 <__mulsf3_pse+0xa0>
    2b9c:	88 23       	and	r24, r24
    2b9e:	4a f0       	brmi	.+18     	; 0x2bb2 <__mulsf3_pse+0x7a>
    2ba0:	ee 0f       	add	r30, r30
    2ba2:	ff 1f       	adc	r31, r31
    2ba4:	bb 1f       	adc	r27, r27
    2ba6:	66 1f       	adc	r22, r22
    2ba8:	77 1f       	adc	r23, r23
    2baa:	88 1f       	adc	r24, r24
    2bac:	91 50       	subi	r25, 0x01	; 1
    2bae:	50 40       	sbci	r21, 0x00	; 0
    2bb0:	a9 f7       	brne	.-22     	; 0x2b9c <__mulsf3_pse+0x64>
    2bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bb4:	51 05       	cpc	r21, r1
    2bb6:	80 f0       	brcs	.+32     	; 0x2bd8 <__mulsf3_pse+0xa0>
    2bb8:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__fp_inf>
    2bbc:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__fp_szero>
    2bc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2bc2:	e4 f3       	brlt	.-8      	; 0x2bbc <__mulsf3_pse+0x84>
    2bc4:	98 3e       	cpi	r25, 0xE8	; 232
    2bc6:	d4 f3       	brlt	.-12     	; 0x2bbc <__mulsf3_pse+0x84>
    2bc8:	86 95       	lsr	r24
    2bca:	77 95       	ror	r23
    2bcc:	67 95       	ror	r22
    2bce:	b7 95       	ror	r27
    2bd0:	f7 95       	ror	r31
    2bd2:	e7 95       	ror	r30
    2bd4:	9f 5f       	subi	r25, 0xFF	; 255
    2bd6:	c1 f7       	brne	.-16     	; 0x2bc8 <__mulsf3_pse+0x90>
    2bd8:	fe 2b       	or	r31, r30
    2bda:	88 0f       	add	r24, r24
    2bdc:	91 1d       	adc	r25, r1
    2bde:	96 95       	lsr	r25
    2be0:	87 95       	ror	r24
    2be2:	97 f9       	bld	r25, 7
    2be4:	08 95       	ret

00002be6 <vfprintf>:
    2be6:	a0 e1       	ldi	r26, 0x10	; 16
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e9 ef       	ldi	r30, 0xF9	; 249
    2bec:	f5 e1       	ldi	r31, 0x15	; 21
    2bee:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__prologue_saves__>
    2bf2:	7c 01       	movw	r14, r24
    2bf4:	1b 01       	movw	r2, r22
    2bf6:	6a 01       	movw	r12, r20
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	17 82       	std	Z+7, r1	; 0x07
    2bfc:	16 82       	std	Z+6, r1	; 0x06
    2bfe:	83 81       	ldd	r24, Z+3	; 0x03
    2c00:	81 ff       	sbrs	r24, 1
    2c02:	44 c3       	rjmp	.+1672   	; 0x328c <vfprintf+0x6a6>
    2c04:	9e 01       	movw	r18, r28
    2c06:	2f 5f       	subi	r18, 0xFF	; 255
    2c08:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0a:	39 01       	movw	r6, r18
    2c0c:	f7 01       	movw	r30, r14
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	f1 01       	movw	r30, r2
    2c12:	93 fd       	sbrc	r25, 3
    2c14:	85 91       	lpm	r24, Z+
    2c16:	93 ff       	sbrs	r25, 3
    2c18:	81 91       	ld	r24, Z+
    2c1a:	1f 01       	movw	r2, r30
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <vfprintf+0x3c>
    2c20:	31 c3       	rjmp	.+1634   	; 0x3284 <vfprintf+0x69e>
    2c22:	85 32       	cpi	r24, 0x25	; 37
    2c24:	39 f4       	brne	.+14     	; 0x2c34 <vfprintf+0x4e>
    2c26:	93 fd       	sbrc	r25, 3
    2c28:	85 91       	lpm	r24, Z+
    2c2a:	93 ff       	sbrs	r25, 3
    2c2c:	81 91       	ld	r24, Z+
    2c2e:	1f 01       	movw	r2, r30
    2c30:	85 32       	cpi	r24, 0x25	; 37
    2c32:	39 f4       	brne	.+14     	; 0x2c42 <vfprintf+0x5c>
    2c34:	b7 01       	movw	r22, r14
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2c3c:	56 01       	movw	r10, r12
    2c3e:	65 01       	movw	r12, r10
    2c40:	e5 cf       	rjmp	.-54     	; 0x2c0c <vfprintf+0x26>
    2c42:	10 e0       	ldi	r17, 0x00	; 0
    2c44:	51 2c       	mov	r5, r1
    2c46:	91 2c       	mov	r9, r1
    2c48:	ff e1       	ldi	r31, 0x1F	; 31
    2c4a:	f9 15       	cp	r31, r9
    2c4c:	d8 f0       	brcs	.+54     	; 0x2c84 <vfprintf+0x9e>
    2c4e:	8b 32       	cpi	r24, 0x2B	; 43
    2c50:	79 f0       	breq	.+30     	; 0x2c70 <vfprintf+0x8a>
    2c52:	38 f4       	brcc	.+14     	; 0x2c62 <vfprintf+0x7c>
    2c54:	80 32       	cpi	r24, 0x20	; 32
    2c56:	79 f0       	breq	.+30     	; 0x2c76 <vfprintf+0x90>
    2c58:	83 32       	cpi	r24, 0x23	; 35
    2c5a:	a1 f4       	brne	.+40     	; 0x2c84 <vfprintf+0x9e>
    2c5c:	f9 2d       	mov	r31, r9
    2c5e:	f0 61       	ori	r31, 0x10	; 16
    2c60:	2e c0       	rjmp	.+92     	; 0x2cbe <vfprintf+0xd8>
    2c62:	8d 32       	cpi	r24, 0x2D	; 45
    2c64:	61 f0       	breq	.+24     	; 0x2c7e <vfprintf+0x98>
    2c66:	80 33       	cpi	r24, 0x30	; 48
    2c68:	69 f4       	brne	.+26     	; 0x2c84 <vfprintf+0x9e>
    2c6a:	29 2d       	mov	r18, r9
    2c6c:	21 60       	ori	r18, 0x01	; 1
    2c6e:	2d c0       	rjmp	.+90     	; 0x2cca <vfprintf+0xe4>
    2c70:	39 2d       	mov	r19, r9
    2c72:	32 60       	ori	r19, 0x02	; 2
    2c74:	93 2e       	mov	r9, r19
    2c76:	89 2d       	mov	r24, r9
    2c78:	84 60       	ori	r24, 0x04	; 4
    2c7a:	98 2e       	mov	r9, r24
    2c7c:	2a c0       	rjmp	.+84     	; 0x2cd2 <vfprintf+0xec>
    2c7e:	e9 2d       	mov	r30, r9
    2c80:	e8 60       	ori	r30, 0x08	; 8
    2c82:	15 c0       	rjmp	.+42     	; 0x2cae <vfprintf+0xc8>
    2c84:	97 fc       	sbrc	r9, 7
    2c86:	2d c0       	rjmp	.+90     	; 0x2ce2 <vfprintf+0xfc>
    2c88:	20 ed       	ldi	r18, 0xD0	; 208
    2c8a:	28 0f       	add	r18, r24
    2c8c:	2a 30       	cpi	r18, 0x0A	; 10
    2c8e:	88 f4       	brcc	.+34     	; 0x2cb2 <vfprintf+0xcc>
    2c90:	96 fe       	sbrs	r9, 6
    2c92:	06 c0       	rjmp	.+12     	; 0x2ca0 <vfprintf+0xba>
    2c94:	3a e0       	ldi	r19, 0x0A	; 10
    2c96:	13 9f       	mul	r17, r19
    2c98:	20 0d       	add	r18, r0
    2c9a:	11 24       	eor	r1, r1
    2c9c:	12 2f       	mov	r17, r18
    2c9e:	19 c0       	rjmp	.+50     	; 0x2cd2 <vfprintf+0xec>
    2ca0:	8a e0       	ldi	r24, 0x0A	; 10
    2ca2:	58 9e       	mul	r5, r24
    2ca4:	20 0d       	add	r18, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	52 2e       	mov	r5, r18
    2caa:	e9 2d       	mov	r30, r9
    2cac:	e0 62       	ori	r30, 0x20	; 32
    2cae:	9e 2e       	mov	r9, r30
    2cb0:	10 c0       	rjmp	.+32     	; 0x2cd2 <vfprintf+0xec>
    2cb2:	8e 32       	cpi	r24, 0x2E	; 46
    2cb4:	31 f4       	brne	.+12     	; 0x2cc2 <vfprintf+0xdc>
    2cb6:	96 fc       	sbrc	r9, 6
    2cb8:	e5 c2       	rjmp	.+1482   	; 0x3284 <vfprintf+0x69e>
    2cba:	f9 2d       	mov	r31, r9
    2cbc:	f0 64       	ori	r31, 0x40	; 64
    2cbe:	9f 2e       	mov	r9, r31
    2cc0:	08 c0       	rjmp	.+16     	; 0x2cd2 <vfprintf+0xec>
    2cc2:	8c 36       	cpi	r24, 0x6C	; 108
    2cc4:	21 f4       	brne	.+8      	; 0x2cce <vfprintf+0xe8>
    2cc6:	29 2d       	mov	r18, r9
    2cc8:	20 68       	ori	r18, 0x80	; 128
    2cca:	92 2e       	mov	r9, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <vfprintf+0xec>
    2cce:	88 36       	cpi	r24, 0x68	; 104
    2cd0:	41 f4       	brne	.+16     	; 0x2ce2 <vfprintf+0xfc>
    2cd2:	f1 01       	movw	r30, r2
    2cd4:	93 fd       	sbrc	r25, 3
    2cd6:	85 91       	lpm	r24, Z+
    2cd8:	93 ff       	sbrs	r25, 3
    2cda:	81 91       	ld	r24, Z+
    2cdc:	1f 01       	movw	r2, r30
    2cde:	81 11       	cpse	r24, r1
    2ce0:	b3 cf       	rjmp	.-154    	; 0x2c48 <vfprintf+0x62>
    2ce2:	9b eb       	ldi	r25, 0xBB	; 187
    2ce4:	98 0f       	add	r25, r24
    2ce6:	93 30       	cpi	r25, 0x03	; 3
    2ce8:	20 f4       	brcc	.+8      	; 0x2cf2 <vfprintf+0x10c>
    2cea:	99 2d       	mov	r25, r9
    2cec:	90 61       	ori	r25, 0x10	; 16
    2cee:	80 5e       	subi	r24, 0xE0	; 224
    2cf0:	07 c0       	rjmp	.+14     	; 0x2d00 <vfprintf+0x11a>
    2cf2:	9b e9       	ldi	r25, 0x9B	; 155
    2cf4:	98 0f       	add	r25, r24
    2cf6:	93 30       	cpi	r25, 0x03	; 3
    2cf8:	08 f0       	brcs	.+2      	; 0x2cfc <vfprintf+0x116>
    2cfa:	66 c1       	rjmp	.+716    	; 0x2fc8 <vfprintf+0x3e2>
    2cfc:	99 2d       	mov	r25, r9
    2cfe:	9f 7e       	andi	r25, 0xEF	; 239
    2d00:	96 ff       	sbrs	r25, 6
    2d02:	16 e0       	ldi	r17, 0x06	; 6
    2d04:	9f 73       	andi	r25, 0x3F	; 63
    2d06:	99 2e       	mov	r9, r25
    2d08:	85 36       	cpi	r24, 0x65	; 101
    2d0a:	19 f4       	brne	.+6      	; 0x2d12 <vfprintf+0x12c>
    2d0c:	90 64       	ori	r25, 0x40	; 64
    2d0e:	99 2e       	mov	r9, r25
    2d10:	08 c0       	rjmp	.+16     	; 0x2d22 <vfprintf+0x13c>
    2d12:	86 36       	cpi	r24, 0x66	; 102
    2d14:	21 f4       	brne	.+8      	; 0x2d1e <vfprintf+0x138>
    2d16:	39 2f       	mov	r19, r25
    2d18:	30 68       	ori	r19, 0x80	; 128
    2d1a:	93 2e       	mov	r9, r19
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <vfprintf+0x13c>
    2d1e:	11 11       	cpse	r17, r1
    2d20:	11 50       	subi	r17, 0x01	; 1
    2d22:	97 fe       	sbrs	r9, 7
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <vfprintf+0x14e>
    2d26:	1c 33       	cpi	r17, 0x3C	; 60
    2d28:	50 f4       	brcc	.+20     	; 0x2d3e <vfprintf+0x158>
    2d2a:	44 24       	eor	r4, r4
    2d2c:	43 94       	inc	r4
    2d2e:	41 0e       	add	r4, r17
    2d30:	27 e0       	ldi	r18, 0x07	; 7
    2d32:	0b c0       	rjmp	.+22     	; 0x2d4a <vfprintf+0x164>
    2d34:	18 30       	cpi	r17, 0x08	; 8
    2d36:	38 f0       	brcs	.+14     	; 0x2d46 <vfprintf+0x160>
    2d38:	27 e0       	ldi	r18, 0x07	; 7
    2d3a:	17 e0       	ldi	r17, 0x07	; 7
    2d3c:	05 c0       	rjmp	.+10     	; 0x2d48 <vfprintf+0x162>
    2d3e:	27 e0       	ldi	r18, 0x07	; 7
    2d40:	9c e3       	ldi	r25, 0x3C	; 60
    2d42:	49 2e       	mov	r4, r25
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x164>
    2d46:	21 2f       	mov	r18, r17
    2d48:	41 2c       	mov	r4, r1
    2d4a:	56 01       	movw	r10, r12
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	a8 0e       	add	r10, r24
    2d50:	b1 1c       	adc	r11, r1
    2d52:	f6 01       	movw	r30, r12
    2d54:	60 81       	ld	r22, Z
    2d56:	71 81       	ldd	r23, Z+1	; 0x01
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	93 81       	ldd	r25, Z+3	; 0x03
    2d5c:	04 2d       	mov	r16, r4
    2d5e:	a3 01       	movw	r20, r6
    2d60:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__ftoa_engine>
    2d64:	6c 01       	movw	r12, r24
    2d66:	f9 81       	ldd	r31, Y+1	; 0x01
    2d68:	fc 87       	std	Y+12, r31	; 0x0c
    2d6a:	f0 ff       	sbrs	r31, 0
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <vfprintf+0x18c>
    2d6e:	f3 ff       	sbrs	r31, 3
    2d70:	06 c0       	rjmp	.+12     	; 0x2d7e <vfprintf+0x198>
    2d72:	91 fc       	sbrc	r9, 1
    2d74:	06 c0       	rjmp	.+12     	; 0x2d82 <vfprintf+0x19c>
    2d76:	92 fe       	sbrs	r9, 2
    2d78:	06 c0       	rjmp	.+12     	; 0x2d86 <vfprintf+0x1a0>
    2d7a:	00 e2       	ldi	r16, 0x20	; 32
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <vfprintf+0x1a2>
    2d7e:	0d e2       	ldi	r16, 0x2D	; 45
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <vfprintf+0x1a2>
    2d82:	0b e2       	ldi	r16, 0x2B	; 43
    2d84:	01 c0       	rjmp	.+2      	; 0x2d88 <vfprintf+0x1a2>
    2d86:	00 e0       	ldi	r16, 0x00	; 0
    2d88:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d8a:	8c 70       	andi	r24, 0x0C	; 12
    2d8c:	19 f0       	breq	.+6      	; 0x2d94 <vfprintf+0x1ae>
    2d8e:	01 11       	cpse	r16, r1
    2d90:	5a c2       	rjmp	.+1204   	; 0x3246 <vfprintf+0x660>
    2d92:	9b c2       	rjmp	.+1334   	; 0x32ca <vfprintf+0x6e4>
    2d94:	97 fe       	sbrs	r9, 7
    2d96:	10 c0       	rjmp	.+32     	; 0x2db8 <vfprintf+0x1d2>
    2d98:	4c 0c       	add	r4, r12
    2d9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d9c:	f4 ff       	sbrs	r31, 4
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <vfprintf+0x1c2>
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	81 33       	cpi	r24, 0x31	; 49
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <vfprintf+0x1c2>
    2da6:	4a 94       	dec	r4
    2da8:	14 14       	cp	r1, r4
    2daa:	74 f5       	brge	.+92     	; 0x2e08 <vfprintf+0x222>
    2dac:	28 e0       	ldi	r18, 0x08	; 8
    2dae:	24 15       	cp	r18, r4
    2db0:	78 f5       	brcc	.+94     	; 0x2e10 <vfprintf+0x22a>
    2db2:	88 e0       	ldi	r24, 0x08	; 8
    2db4:	48 2e       	mov	r4, r24
    2db6:	2c c0       	rjmp	.+88     	; 0x2e10 <vfprintf+0x22a>
    2db8:	96 fc       	sbrc	r9, 6
    2dba:	2a c0       	rjmp	.+84     	; 0x2e10 <vfprintf+0x22a>
    2dbc:	81 2f       	mov	r24, r17
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	8c 15       	cp	r24, r12
    2dc2:	9d 05       	cpc	r25, r13
    2dc4:	9c f0       	brlt	.+38     	; 0x2dec <vfprintf+0x206>
    2dc6:	3c ef       	ldi	r19, 0xFC	; 252
    2dc8:	c3 16       	cp	r12, r19
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	d3 06       	cpc	r13, r19
    2dce:	74 f0       	brlt	.+28     	; 0x2dec <vfprintf+0x206>
    2dd0:	89 2d       	mov	r24, r9
    2dd2:	80 68       	ori	r24, 0x80	; 128
    2dd4:	98 2e       	mov	r9, r24
    2dd6:	0a c0       	rjmp	.+20     	; 0x2dec <vfprintf+0x206>
    2dd8:	e2 e0       	ldi	r30, 0x02	; 2
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	ec 0f       	add	r30, r28
    2dde:	fd 1f       	adc	r31, r29
    2de0:	e1 0f       	add	r30, r17
    2de2:	f1 1d       	adc	r31, r1
    2de4:	80 81       	ld	r24, Z
    2de6:	80 33       	cpi	r24, 0x30	; 48
    2de8:	19 f4       	brne	.+6      	; 0x2df0 <vfprintf+0x20a>
    2dea:	11 50       	subi	r17, 0x01	; 1
    2dec:	11 11       	cpse	r17, r1
    2dee:	f4 cf       	rjmp	.-24     	; 0x2dd8 <vfprintf+0x1f2>
    2df0:	97 fe       	sbrs	r9, 7
    2df2:	0e c0       	rjmp	.+28     	; 0x2e10 <vfprintf+0x22a>
    2df4:	44 24       	eor	r4, r4
    2df6:	43 94       	inc	r4
    2df8:	41 0e       	add	r4, r17
    2dfa:	81 2f       	mov	r24, r17
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	c8 16       	cp	r12, r24
    2e00:	d9 06       	cpc	r13, r25
    2e02:	2c f4       	brge	.+10     	; 0x2e0e <vfprintf+0x228>
    2e04:	1c 19       	sub	r17, r12
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <vfprintf+0x22a>
    2e08:	44 24       	eor	r4, r4
    2e0a:	43 94       	inc	r4
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <vfprintf+0x22a>
    2e0e:	10 e0       	ldi	r17, 0x00	; 0
    2e10:	97 fe       	sbrs	r9, 7
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <vfprintf+0x23a>
    2e14:	1c 14       	cp	r1, r12
    2e16:	1d 04       	cpc	r1, r13
    2e18:	34 f4       	brge	.+12     	; 0x2e26 <vfprintf+0x240>
    2e1a:	c6 01       	movw	r24, r12
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <vfprintf+0x244>
    2e20:	85 e0       	ldi	r24, 0x05	; 5
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <vfprintf+0x244>
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	01 11       	cpse	r16, r1
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	11 23       	and	r17, r17
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <vfprintf+0x258>
    2e32:	21 2f       	mov	r18, r17
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	2f 5f       	subi	r18, 0xFF	; 255
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	82 0f       	add	r24, r18
    2e3c:	93 1f       	adc	r25, r19
    2e3e:	25 2d       	mov	r18, r5
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	82 17       	cp	r24, r18
    2e44:	93 07       	cpc	r25, r19
    2e46:	14 f4       	brge	.+4      	; 0x2e4c <vfprintf+0x266>
    2e48:	58 1a       	sub	r5, r24
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <vfprintf+0x268>
    2e4c:	51 2c       	mov	r5, r1
    2e4e:	89 2d       	mov	r24, r9
    2e50:	89 70       	andi	r24, 0x09	; 9
    2e52:	49 f4       	brne	.+18     	; 0x2e66 <vfprintf+0x280>
    2e54:	55 20       	and	r5, r5
    2e56:	39 f0       	breq	.+14     	; 0x2e66 <vfprintf+0x280>
    2e58:	b7 01       	movw	r22, r14
    2e5a:	80 e2       	ldi	r24, 0x20	; 32
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2e62:	5a 94       	dec	r5
    2e64:	f7 cf       	rjmp	.-18     	; 0x2e54 <vfprintf+0x26e>
    2e66:	00 23       	and	r16, r16
    2e68:	29 f0       	breq	.+10     	; 0x2e74 <vfprintf+0x28e>
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	80 2f       	mov	r24, r16
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2e74:	93 fc       	sbrc	r9, 3
    2e76:	09 c0       	rjmp	.+18     	; 0x2e8a <vfprintf+0x2a4>
    2e78:	55 20       	and	r5, r5
    2e7a:	39 f0       	breq	.+14     	; 0x2e8a <vfprintf+0x2a4>
    2e7c:	b7 01       	movw	r22, r14
    2e7e:	80 e3       	ldi	r24, 0x30	; 48
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2e86:	5a 94       	dec	r5
    2e88:	f7 cf       	rjmp	.-18     	; 0x2e78 <vfprintf+0x292>
    2e8a:	97 fe       	sbrs	r9, 7
    2e8c:	4c c0       	rjmp	.+152    	; 0x2f26 <vfprintf+0x340>
    2e8e:	46 01       	movw	r8, r12
    2e90:	d7 fe       	sbrs	r13, 7
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <vfprintf+0x2b2>
    2e94:	81 2c       	mov	r8, r1
    2e96:	91 2c       	mov	r9, r1
    2e98:	c6 01       	movw	r24, r12
    2e9a:	88 19       	sub	r24, r8
    2e9c:	99 09       	sbc	r25, r9
    2e9e:	f3 01       	movw	r30, r6
    2ea0:	e8 0f       	add	r30, r24
    2ea2:	f9 1f       	adc	r31, r25
    2ea4:	fe 87       	std	Y+14, r31	; 0x0e
    2ea6:	ed 87       	std	Y+13, r30	; 0x0d
    2ea8:	96 01       	movw	r18, r12
    2eaa:	24 19       	sub	r18, r4
    2eac:	31 09       	sbc	r19, r1
    2eae:	38 8b       	std	Y+16, r19	; 0x10
    2eb0:	2f 87       	std	Y+15, r18	; 0x0f
    2eb2:	01 2f       	mov	r16, r17
    2eb4:	10 e0       	ldi	r17, 0x00	; 0
    2eb6:	11 95       	neg	r17
    2eb8:	01 95       	neg	r16
    2eba:	11 09       	sbc	r17, r1
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	83 16       	cp	r8, r19
    2ec0:	93 06       	cpc	r9, r19
    2ec2:	29 f4       	brne	.+10     	; 0x2ece <vfprintf+0x2e8>
    2ec4:	b7 01       	movw	r22, r14
    2ec6:	8e e2       	ldi	r24, 0x2E	; 46
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2ece:	c8 14       	cp	r12, r8
    2ed0:	d9 04       	cpc	r13, r9
    2ed2:	4c f0       	brlt	.+18     	; 0x2ee6 <vfprintf+0x300>
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	98 89       	ldd	r25, Y+16	; 0x10
    2ed8:	88 15       	cp	r24, r8
    2eda:	99 05       	cpc	r25, r9
    2edc:	24 f4       	brge	.+8      	; 0x2ee6 <vfprintf+0x300>
    2ede:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ee0:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ee2:	81 81       	ldd	r24, Z+1	; 0x01
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <vfprintf+0x302>
    2ee6:	80 e3       	ldi	r24, 0x30	; 48
    2ee8:	f1 e0       	ldi	r31, 0x01	; 1
    2eea:	8f 1a       	sub	r8, r31
    2eec:	91 08       	sbc	r9, r1
    2eee:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ef0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	3e 87       	std	Y+14, r19	; 0x0e
    2ef8:	2d 87       	std	Y+13, r18	; 0x0d
    2efa:	80 16       	cp	r8, r16
    2efc:	91 06       	cpc	r9, r17
    2efe:	2c f0       	brlt	.+10     	; 0x2f0a <vfprintf+0x324>
    2f00:	b7 01       	movw	r22, r14
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2f08:	d9 cf       	rjmp	.-78     	; 0x2ebc <vfprintf+0x2d6>
    2f0a:	c8 14       	cp	r12, r8
    2f0c:	d9 04       	cpc	r13, r9
    2f0e:	41 f4       	brne	.+16     	; 0x2f20 <vfprintf+0x33a>
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	96 33       	cpi	r25, 0x36	; 54
    2f14:	20 f4       	brcc	.+8      	; 0x2f1e <vfprintf+0x338>
    2f16:	95 33       	cpi	r25, 0x35	; 53
    2f18:	19 f4       	brne	.+6      	; 0x2f20 <vfprintf+0x33a>
    2f1a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f1c:	34 ff       	sbrs	r19, 4
    2f1e:	81 e3       	ldi	r24, 0x31	; 49
    2f20:	b7 01       	movw	r22, r14
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	4e c0       	rjmp	.+156    	; 0x2fc2 <vfprintf+0x3dc>
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	81 33       	cpi	r24, 0x31	; 49
    2f2a:	19 f0       	breq	.+6      	; 0x2f32 <vfprintf+0x34c>
    2f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f2e:	9f 7e       	andi	r25, 0xEF	; 239
    2f30:	9c 87       	std	Y+12, r25	; 0x0c
    2f32:	b7 01       	movw	r22, r14
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2f3a:	11 11       	cpse	r17, r1
    2f3c:	05 c0       	rjmp	.+10     	; 0x2f48 <vfprintf+0x362>
    2f3e:	94 fc       	sbrc	r9, 4
    2f40:	18 c0       	rjmp	.+48     	; 0x2f72 <vfprintf+0x38c>
    2f42:	85 e6       	ldi	r24, 0x65	; 101
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	17 c0       	rjmp	.+46     	; 0x2f76 <vfprintf+0x390>
    2f48:	b7 01       	movw	r22, r14
    2f4a:	8e e2       	ldi	r24, 0x2E	; 46
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2f52:	1e 5f       	subi	r17, 0xFE	; 254
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	01 e0       	ldi	r16, 0x01	; 1
    2f58:	08 0f       	add	r16, r24
    2f5a:	f3 01       	movw	r30, r6
    2f5c:	e8 0f       	add	r30, r24
    2f5e:	f1 1d       	adc	r31, r1
    2f60:	80 81       	ld	r24, Z
    2f62:	b7 01       	movw	r22, r14
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2f6a:	80 2f       	mov	r24, r16
    2f6c:	01 13       	cpse	r16, r17
    2f6e:	f3 cf       	rjmp	.-26     	; 0x2f56 <vfprintf+0x370>
    2f70:	e6 cf       	rjmp	.-52     	; 0x2f3e <vfprintf+0x358>
    2f72:	85 e4       	ldi	r24, 0x45	; 69
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	b7 01       	movw	r22, r14
    2f78:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2f7c:	d7 fc       	sbrc	r13, 7
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <vfprintf+0x3a6>
    2f80:	c1 14       	cp	r12, r1
    2f82:	d1 04       	cpc	r13, r1
    2f84:	41 f4       	brne	.+16     	; 0x2f96 <vfprintf+0x3b0>
    2f86:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f88:	e4 ff       	sbrs	r30, 4
    2f8a:	05 c0       	rjmp	.+10     	; 0x2f96 <vfprintf+0x3b0>
    2f8c:	d1 94       	neg	r13
    2f8e:	c1 94       	neg	r12
    2f90:	d1 08       	sbc	r13, r1
    2f92:	8d e2       	ldi	r24, 0x2D	; 45
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <vfprintf+0x3b2>
    2f96:	8b e2       	ldi	r24, 0x2B	; 43
    2f98:	b7 01       	movw	r22, r14
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2fa0:	80 e3       	ldi	r24, 0x30	; 48
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	c2 16       	cp	r12, r18
    2fa6:	d1 04       	cpc	r13, r1
    2fa8:	2c f0       	brlt	.+10     	; 0x2fb4 <vfprintf+0x3ce>
    2faa:	8f 5f       	subi	r24, 0xFF	; 255
    2fac:	fa e0       	ldi	r31, 0x0A	; 10
    2fae:	cf 1a       	sub	r12, r31
    2fb0:	d1 08       	sbc	r13, r1
    2fb2:	f7 cf       	rjmp	.-18     	; 0x2fa2 <vfprintf+0x3bc>
    2fb4:	b7 01       	movw	r22, r14
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2fbc:	b7 01       	movw	r22, r14
    2fbe:	c6 01       	movw	r24, r12
    2fc0:	c0 96       	adiw	r24, 0x30	; 48
    2fc2:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    2fc6:	54 c1       	rjmp	.+680    	; 0x3270 <vfprintf+0x68a>
    2fc8:	83 36       	cpi	r24, 0x63	; 99
    2fca:	31 f0       	breq	.+12     	; 0x2fd8 <vfprintf+0x3f2>
    2fcc:	83 37       	cpi	r24, 0x73	; 115
    2fce:	79 f0       	breq	.+30     	; 0x2fee <vfprintf+0x408>
    2fd0:	83 35       	cpi	r24, 0x53	; 83
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <vfprintf+0x3f0>
    2fd4:	56 c0       	rjmp	.+172    	; 0x3082 <vfprintf+0x49c>
    2fd6:	20 c0       	rjmp	.+64     	; 0x3018 <vfprintf+0x432>
    2fd8:	56 01       	movw	r10, r12
    2fda:	32 e0       	ldi	r19, 0x02	; 2
    2fdc:	a3 0e       	add	r10, r19
    2fde:	b1 1c       	adc	r11, r1
    2fe0:	f6 01       	movw	r30, r12
    2fe2:	80 81       	ld	r24, Z
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	01 e0       	ldi	r16, 0x01	; 1
    2fe8:	10 e0       	ldi	r17, 0x00	; 0
    2fea:	63 01       	movw	r12, r6
    2fec:	12 c0       	rjmp	.+36     	; 0x3012 <vfprintf+0x42c>
    2fee:	56 01       	movw	r10, r12
    2ff0:	f2 e0       	ldi	r31, 0x02	; 2
    2ff2:	af 0e       	add	r10, r31
    2ff4:	b1 1c       	adc	r11, r1
    2ff6:	f6 01       	movw	r30, r12
    2ff8:	c0 80       	ld	r12, Z
    2ffa:	d1 80       	ldd	r13, Z+1	; 0x01
    2ffc:	96 fe       	sbrs	r9, 6
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <vfprintf+0x420>
    3000:	61 2f       	mov	r22, r17
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <vfprintf+0x424>
    3006:	6f ef       	ldi	r22, 0xFF	; 255
    3008:	7f ef       	ldi	r23, 0xFF	; 255
    300a:	c6 01       	movw	r24, r12
    300c:	0e 94 c7 1a 	call	0x358e	; 0x358e <strnlen>
    3010:	8c 01       	movw	r16, r24
    3012:	f9 2d       	mov	r31, r9
    3014:	ff 77       	andi	r31, 0x7F	; 127
    3016:	14 c0       	rjmp	.+40     	; 0x3040 <vfprintf+0x45a>
    3018:	56 01       	movw	r10, r12
    301a:	22 e0       	ldi	r18, 0x02	; 2
    301c:	a2 0e       	add	r10, r18
    301e:	b1 1c       	adc	r11, r1
    3020:	f6 01       	movw	r30, r12
    3022:	c0 80       	ld	r12, Z
    3024:	d1 80       	ldd	r13, Z+1	; 0x01
    3026:	96 fe       	sbrs	r9, 6
    3028:	03 c0       	rjmp	.+6      	; 0x3030 <vfprintf+0x44a>
    302a:	61 2f       	mov	r22, r17
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <vfprintf+0x44e>
    3030:	6f ef       	ldi	r22, 0xFF	; 255
    3032:	7f ef       	ldi	r23, 0xFF	; 255
    3034:	c6 01       	movw	r24, r12
    3036:	0e 94 bc 1a 	call	0x3578	; 0x3578 <strnlen_P>
    303a:	8c 01       	movw	r16, r24
    303c:	f9 2d       	mov	r31, r9
    303e:	f0 68       	ori	r31, 0x80	; 128
    3040:	9f 2e       	mov	r9, r31
    3042:	f3 fd       	sbrc	r31, 3
    3044:	1a c0       	rjmp	.+52     	; 0x307a <vfprintf+0x494>
    3046:	85 2d       	mov	r24, r5
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	08 17       	cp	r16, r24
    304c:	19 07       	cpc	r17, r25
    304e:	a8 f4       	brcc	.+42     	; 0x307a <vfprintf+0x494>
    3050:	b7 01       	movw	r22, r14
    3052:	80 e2       	ldi	r24, 0x20	; 32
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    305a:	5a 94       	dec	r5
    305c:	f4 cf       	rjmp	.-24     	; 0x3046 <vfprintf+0x460>
    305e:	f6 01       	movw	r30, r12
    3060:	97 fc       	sbrc	r9, 7
    3062:	85 91       	lpm	r24, Z+
    3064:	97 fe       	sbrs	r9, 7
    3066:	81 91       	ld	r24, Z+
    3068:	6f 01       	movw	r12, r30
    306a:	b7 01       	movw	r22, r14
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    3072:	51 10       	cpse	r5, r1
    3074:	5a 94       	dec	r5
    3076:	01 50       	subi	r16, 0x01	; 1
    3078:	11 09       	sbc	r17, r1
    307a:	01 15       	cp	r16, r1
    307c:	11 05       	cpc	r17, r1
    307e:	79 f7       	brne	.-34     	; 0x305e <vfprintf+0x478>
    3080:	f7 c0       	rjmp	.+494    	; 0x3270 <vfprintf+0x68a>
    3082:	84 36       	cpi	r24, 0x64	; 100
    3084:	11 f0       	breq	.+4      	; 0x308a <vfprintf+0x4a4>
    3086:	89 36       	cpi	r24, 0x69	; 105
    3088:	61 f5       	brne	.+88     	; 0x30e2 <vfprintf+0x4fc>
    308a:	56 01       	movw	r10, r12
    308c:	97 fe       	sbrs	r9, 7
    308e:	09 c0       	rjmp	.+18     	; 0x30a2 <vfprintf+0x4bc>
    3090:	24 e0       	ldi	r18, 0x04	; 4
    3092:	a2 0e       	add	r10, r18
    3094:	b1 1c       	adc	r11, r1
    3096:	f6 01       	movw	r30, r12
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	0a c0       	rjmp	.+20     	; 0x30b6 <vfprintf+0x4d0>
    30a2:	f2 e0       	ldi	r31, 0x02	; 2
    30a4:	af 0e       	add	r10, r31
    30a6:	b1 1c       	adc	r11, r1
    30a8:	f6 01       	movw	r30, r12
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	07 2e       	mov	r0, r23
    30b0:	00 0c       	add	r0, r0
    30b2:	88 0b       	sbc	r24, r24
    30b4:	99 0b       	sbc	r25, r25
    30b6:	f9 2d       	mov	r31, r9
    30b8:	ff 76       	andi	r31, 0x6F	; 111
    30ba:	9f 2e       	mov	r9, r31
    30bc:	97 ff       	sbrs	r25, 7
    30be:	09 c0       	rjmp	.+18     	; 0x30d2 <vfprintf+0x4ec>
    30c0:	90 95       	com	r25
    30c2:	80 95       	com	r24
    30c4:	70 95       	com	r23
    30c6:	61 95       	neg	r22
    30c8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ca:	8f 4f       	sbci	r24, 0xFF	; 255
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	f0 68       	ori	r31, 0x80	; 128
    30d0:	9f 2e       	mov	r9, r31
    30d2:	2a e0       	ldi	r18, 0x0A	; 10
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	a3 01       	movw	r20, r6
    30d8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__ultoa_invert>
    30dc:	c8 2e       	mov	r12, r24
    30de:	c6 18       	sub	r12, r6
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <vfprintf+0x57a>
    30e2:	09 2d       	mov	r16, r9
    30e4:	85 37       	cpi	r24, 0x75	; 117
    30e6:	21 f4       	brne	.+8      	; 0x30f0 <vfprintf+0x50a>
    30e8:	0f 7e       	andi	r16, 0xEF	; 239
    30ea:	2a e0       	ldi	r18, 0x0A	; 10
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	1d c0       	rjmp	.+58     	; 0x312a <vfprintf+0x544>
    30f0:	09 7f       	andi	r16, 0xF9	; 249
    30f2:	8f 36       	cpi	r24, 0x6F	; 111
    30f4:	91 f0       	breq	.+36     	; 0x311a <vfprintf+0x534>
    30f6:	18 f4       	brcc	.+6      	; 0x30fe <vfprintf+0x518>
    30f8:	88 35       	cpi	r24, 0x58	; 88
    30fa:	59 f0       	breq	.+22     	; 0x3112 <vfprintf+0x52c>
    30fc:	c3 c0       	rjmp	.+390    	; 0x3284 <vfprintf+0x69e>
    30fe:	80 37       	cpi	r24, 0x70	; 112
    3100:	19 f0       	breq	.+6      	; 0x3108 <vfprintf+0x522>
    3102:	88 37       	cpi	r24, 0x78	; 120
    3104:	11 f0       	breq	.+4      	; 0x310a <vfprintf+0x524>
    3106:	be c0       	rjmp	.+380    	; 0x3284 <vfprintf+0x69e>
    3108:	00 61       	ori	r16, 0x10	; 16
    310a:	04 ff       	sbrs	r16, 4
    310c:	09 c0       	rjmp	.+18     	; 0x3120 <vfprintf+0x53a>
    310e:	04 60       	ori	r16, 0x04	; 4
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <vfprintf+0x53a>
    3112:	94 fe       	sbrs	r9, 4
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <vfprintf+0x540>
    3116:	06 60       	ori	r16, 0x06	; 6
    3118:	06 c0       	rjmp	.+12     	; 0x3126 <vfprintf+0x540>
    311a:	28 e0       	ldi	r18, 0x08	; 8
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	05 c0       	rjmp	.+10     	; 0x312a <vfprintf+0x544>
    3120:	20 e1       	ldi	r18, 0x10	; 16
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	02 c0       	rjmp	.+4      	; 0x312a <vfprintf+0x544>
    3126:	20 e1       	ldi	r18, 0x10	; 16
    3128:	32 e0       	ldi	r19, 0x02	; 2
    312a:	56 01       	movw	r10, r12
    312c:	07 ff       	sbrs	r16, 7
    312e:	09 c0       	rjmp	.+18     	; 0x3142 <vfprintf+0x55c>
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	a8 0e       	add	r10, r24
    3134:	b1 1c       	adc	r11, r1
    3136:	f6 01       	movw	r30, r12
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	08 c0       	rjmp	.+16     	; 0x3152 <vfprintf+0x56c>
    3142:	f2 e0       	ldi	r31, 0x02	; 2
    3144:	af 0e       	add	r10, r31
    3146:	b1 1c       	adc	r11, r1
    3148:	f6 01       	movw	r30, r12
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	a3 01       	movw	r20, r6
    3154:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__ultoa_invert>
    3158:	c8 2e       	mov	r12, r24
    315a:	c6 18       	sub	r12, r6
    315c:	0f 77       	andi	r16, 0x7F	; 127
    315e:	90 2e       	mov	r9, r16
    3160:	96 fe       	sbrs	r9, 6
    3162:	0b c0       	rjmp	.+22     	; 0x317a <vfprintf+0x594>
    3164:	09 2d       	mov	r16, r9
    3166:	0e 7f       	andi	r16, 0xFE	; 254
    3168:	c1 16       	cp	r12, r17
    316a:	50 f4       	brcc	.+20     	; 0x3180 <vfprintf+0x59a>
    316c:	94 fe       	sbrs	r9, 4
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <vfprintf+0x59e>
    3170:	92 fc       	sbrc	r9, 2
    3172:	08 c0       	rjmp	.+16     	; 0x3184 <vfprintf+0x59e>
    3174:	09 2d       	mov	r16, r9
    3176:	0e 7e       	andi	r16, 0xEE	; 238
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <vfprintf+0x59e>
    317a:	dc 2c       	mov	r13, r12
    317c:	09 2d       	mov	r16, r9
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <vfprintf+0x5a0>
    3180:	dc 2c       	mov	r13, r12
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <vfprintf+0x5a0>
    3184:	d1 2e       	mov	r13, r17
    3186:	04 ff       	sbrs	r16, 4
    3188:	0d c0       	rjmp	.+26     	; 0x31a4 <vfprintf+0x5be>
    318a:	fe 01       	movw	r30, r28
    318c:	ec 0d       	add	r30, r12
    318e:	f1 1d       	adc	r31, r1
    3190:	80 81       	ld	r24, Z
    3192:	80 33       	cpi	r24, 0x30	; 48
    3194:	11 f4       	brne	.+4      	; 0x319a <vfprintf+0x5b4>
    3196:	09 7e       	andi	r16, 0xE9	; 233
    3198:	09 c0       	rjmp	.+18     	; 0x31ac <vfprintf+0x5c6>
    319a:	02 ff       	sbrs	r16, 2
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <vfprintf+0x5c4>
    319e:	d3 94       	inc	r13
    31a0:	d3 94       	inc	r13
    31a2:	04 c0       	rjmp	.+8      	; 0x31ac <vfprintf+0x5c6>
    31a4:	80 2f       	mov	r24, r16
    31a6:	86 78       	andi	r24, 0x86	; 134
    31a8:	09 f0       	breq	.+2      	; 0x31ac <vfprintf+0x5c6>
    31aa:	d3 94       	inc	r13
    31ac:	03 fd       	sbrc	r16, 3
    31ae:	11 c0       	rjmp	.+34     	; 0x31d2 <vfprintf+0x5ec>
    31b0:	00 ff       	sbrs	r16, 0
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <vfprintf+0x5da>
    31b4:	1c 2d       	mov	r17, r12
    31b6:	d5 14       	cp	r13, r5
    31b8:	80 f4       	brcc	.+32     	; 0x31da <vfprintf+0x5f4>
    31ba:	15 0d       	add	r17, r5
    31bc:	1d 19       	sub	r17, r13
    31be:	0d c0       	rjmp	.+26     	; 0x31da <vfprintf+0x5f4>
    31c0:	d5 14       	cp	r13, r5
    31c2:	58 f4       	brcc	.+22     	; 0x31da <vfprintf+0x5f4>
    31c4:	b7 01       	movw	r22, r14
    31c6:	80 e2       	ldi	r24, 0x20	; 32
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    31ce:	d3 94       	inc	r13
    31d0:	f7 cf       	rjmp	.-18     	; 0x31c0 <vfprintf+0x5da>
    31d2:	d5 14       	cp	r13, r5
    31d4:	10 f4       	brcc	.+4      	; 0x31da <vfprintf+0x5f4>
    31d6:	5d 18       	sub	r5, r13
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <vfprintf+0x5f6>
    31da:	51 2c       	mov	r5, r1
    31dc:	04 ff       	sbrs	r16, 4
    31de:	10 c0       	rjmp	.+32     	; 0x3200 <vfprintf+0x61a>
    31e0:	b7 01       	movw	r22, r14
    31e2:	80 e3       	ldi	r24, 0x30	; 48
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    31ea:	02 ff       	sbrs	r16, 2
    31ec:	17 c0       	rjmp	.+46     	; 0x321c <vfprintf+0x636>
    31ee:	01 fd       	sbrc	r16, 1
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <vfprintf+0x612>
    31f2:	88 e7       	ldi	r24, 0x78	; 120
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <vfprintf+0x616>
    31f8:	88 e5       	ldi	r24, 0x58	; 88
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	b7 01       	movw	r22, r14
    31fe:	0c c0       	rjmp	.+24     	; 0x3218 <vfprintf+0x632>
    3200:	80 2f       	mov	r24, r16
    3202:	86 78       	andi	r24, 0x86	; 134
    3204:	59 f0       	breq	.+22     	; 0x321c <vfprintf+0x636>
    3206:	01 ff       	sbrs	r16, 1
    3208:	02 c0       	rjmp	.+4      	; 0x320e <vfprintf+0x628>
    320a:	8b e2       	ldi	r24, 0x2B	; 43
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <vfprintf+0x62a>
    320e:	80 e2       	ldi	r24, 0x20	; 32
    3210:	07 fd       	sbrc	r16, 7
    3212:	8d e2       	ldi	r24, 0x2D	; 45
    3214:	b7 01       	movw	r22, r14
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    321c:	c1 16       	cp	r12, r17
    321e:	38 f4       	brcc	.+14     	; 0x322e <vfprintf+0x648>
    3220:	b7 01       	movw	r22, r14
    3222:	80 e3       	ldi	r24, 0x30	; 48
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    322a:	11 50       	subi	r17, 0x01	; 1
    322c:	f7 cf       	rjmp	.-18     	; 0x321c <vfprintf+0x636>
    322e:	ca 94       	dec	r12
    3230:	f3 01       	movw	r30, r6
    3232:	ec 0d       	add	r30, r12
    3234:	f1 1d       	adc	r31, r1
    3236:	80 81       	ld	r24, Z
    3238:	b7 01       	movw	r22, r14
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    3240:	c1 10       	cpse	r12, r1
    3242:	f5 cf       	rjmp	.-22     	; 0x322e <vfprintf+0x648>
    3244:	15 c0       	rjmp	.+42     	; 0x3270 <vfprintf+0x68a>
    3246:	f4 e0       	ldi	r31, 0x04	; 4
    3248:	f5 15       	cp	r31, r5
    324a:	60 f5       	brcc	.+88     	; 0x32a4 <vfprintf+0x6be>
    324c:	84 e0       	ldi	r24, 0x04	; 4
    324e:	58 1a       	sub	r5, r24
    3250:	93 fe       	sbrs	r9, 3
    3252:	1f c0       	rjmp	.+62     	; 0x3292 <vfprintf+0x6ac>
    3254:	01 11       	cpse	r16, r1
    3256:	27 c0       	rjmp	.+78     	; 0x32a6 <vfprintf+0x6c0>
    3258:	2c 85       	ldd	r18, Y+12	; 0x0c
    325a:	23 ff       	sbrs	r18, 3
    325c:	2a c0       	rjmp	.+84     	; 0x32b2 <vfprintf+0x6cc>
    325e:	02 e5       	ldi	r16, 0x52	; 82
    3260:	12 e0       	ldi	r17, 0x02	; 2
    3262:	39 2d       	mov	r19, r9
    3264:	30 71       	andi	r19, 0x10	; 16
    3266:	93 2e       	mov	r9, r19
    3268:	f8 01       	movw	r30, r16
    326a:	84 91       	lpm	r24, Z
    326c:	81 11       	cpse	r24, r1
    326e:	24 c0       	rjmp	.+72     	; 0x32b8 <vfprintf+0x6d2>
    3270:	55 20       	and	r5, r5
    3272:	09 f4       	brne	.+2      	; 0x3276 <vfprintf+0x690>
    3274:	e4 cc       	rjmp	.-1592   	; 0x2c3e <vfprintf+0x58>
    3276:	b7 01       	movw	r22, r14
    3278:	80 e2       	ldi	r24, 0x20	; 32
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    3280:	5a 94       	dec	r5
    3282:	f6 cf       	rjmp	.-20     	; 0x3270 <vfprintf+0x68a>
    3284:	f7 01       	movw	r30, r14
    3286:	86 81       	ldd	r24, Z+6	; 0x06
    3288:	97 81       	ldd	r25, Z+7	; 0x07
    328a:	26 c0       	rjmp	.+76     	; 0x32d8 <vfprintf+0x6f2>
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	9f ef       	ldi	r25, 0xFF	; 255
    3290:	23 c0       	rjmp	.+70     	; 0x32d8 <vfprintf+0x6f2>
    3292:	b7 01       	movw	r22, r14
    3294:	80 e2       	ldi	r24, 0x20	; 32
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    329c:	5a 94       	dec	r5
    329e:	51 10       	cpse	r5, r1
    32a0:	f8 cf       	rjmp	.-16     	; 0x3292 <vfprintf+0x6ac>
    32a2:	d8 cf       	rjmp	.-80     	; 0x3254 <vfprintf+0x66e>
    32a4:	51 2c       	mov	r5, r1
    32a6:	b7 01       	movw	r22, r14
    32a8:	80 2f       	mov	r24, r16
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    32b0:	d3 cf       	rjmp	.-90     	; 0x3258 <vfprintf+0x672>
    32b2:	06 e5       	ldi	r16, 0x56	; 86
    32b4:	12 e0       	ldi	r17, 0x02	; 2
    32b6:	d5 cf       	rjmp	.-86     	; 0x3262 <vfprintf+0x67c>
    32b8:	91 10       	cpse	r9, r1
    32ba:	80 52       	subi	r24, 0x20	; 32
    32bc:	b7 01       	movw	r22, r14
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <fputc>
    32c4:	0f 5f       	subi	r16, 0xFF	; 255
    32c6:	1f 4f       	sbci	r17, 0xFF	; 255
    32c8:	cf cf       	rjmp	.-98     	; 0x3268 <vfprintf+0x682>
    32ca:	23 e0       	ldi	r18, 0x03	; 3
    32cc:	25 15       	cp	r18, r5
    32ce:	10 f4       	brcc	.+4      	; 0x32d4 <vfprintf+0x6ee>
    32d0:	83 e0       	ldi	r24, 0x03	; 3
    32d2:	bd cf       	rjmp	.-134    	; 0x324e <vfprintf+0x668>
    32d4:	51 2c       	mov	r5, r1
    32d6:	c0 cf       	rjmp	.-128    	; 0x3258 <vfprintf+0x672>
    32d8:	60 96       	adiw	r28, 0x10	; 16
    32da:	e2 e1       	ldi	r30, 0x12	; 18
    32dc:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__epilogue_restores__>

000032e0 <__divmodhi4>:
    32e0:	97 fb       	bst	r25, 7
    32e2:	07 2e       	mov	r0, r23
    32e4:	16 f4       	brtc	.+4      	; 0x32ea <__divmodhi4+0xa>
    32e6:	00 94       	com	r0
    32e8:	07 d0       	rcall	.+14     	; 0x32f8 <__divmodhi4_neg1>
    32ea:	77 fd       	sbrc	r23, 7
    32ec:	09 d0       	rcall	.+18     	; 0x3300 <__divmodhi4_neg2>
    32ee:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <__udivmodhi4>
    32f2:	07 fc       	sbrc	r0, 7
    32f4:	05 d0       	rcall	.+10     	; 0x3300 <__divmodhi4_neg2>
    32f6:	3e f4       	brtc	.+14     	; 0x3306 <__divmodhi4_exit>

000032f8 <__divmodhi4_neg1>:
    32f8:	90 95       	com	r25
    32fa:	81 95       	neg	r24
    32fc:	9f 4f       	sbci	r25, 0xFF	; 255
    32fe:	08 95       	ret

00003300 <__divmodhi4_neg2>:
    3300:	70 95       	com	r23
    3302:	61 95       	neg	r22
    3304:	7f 4f       	sbci	r23, 0xFF	; 255

00003306 <__divmodhi4_exit>:
    3306:	08 95       	ret

00003308 <__tablejump2__>:
    3308:	ee 0f       	add	r30, r30
    330a:	ff 1f       	adc	r31, r31
    330c:	05 90       	lpm	r0, Z+
    330e:	f4 91       	lpm	r31, Z
    3310:	e0 2d       	mov	r30, r0
    3312:	09 94       	ijmp

00003314 <__umulhisi3>:
    3314:	a2 9f       	mul	r26, r18
    3316:	b0 01       	movw	r22, r0
    3318:	b3 9f       	mul	r27, r19
    331a:	c0 01       	movw	r24, r0
    331c:	a3 9f       	mul	r26, r19
    331e:	70 0d       	add	r23, r0
    3320:	81 1d       	adc	r24, r1
    3322:	11 24       	eor	r1, r1
    3324:	91 1d       	adc	r25, r1
    3326:	b2 9f       	mul	r27, r18
    3328:	70 0d       	add	r23, r0
    332a:	81 1d       	adc	r24, r1
    332c:	11 24       	eor	r1, r1
    332e:	91 1d       	adc	r25, r1
    3330:	08 95       	ret

00003332 <__prologue_saves__>:
    3332:	2f 92       	push	r2
    3334:	3f 92       	push	r3
    3336:	4f 92       	push	r4
    3338:	5f 92       	push	r5
    333a:	6f 92       	push	r6
    333c:	7f 92       	push	r7
    333e:	8f 92       	push	r8
    3340:	9f 92       	push	r9
    3342:	af 92       	push	r10
    3344:	bf 92       	push	r11
    3346:	cf 92       	push	r12
    3348:	df 92       	push	r13
    334a:	ef 92       	push	r14
    334c:	ff 92       	push	r15
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	ca 1b       	sub	r28, r26
    335c:	db 0b       	sbc	r29, r27
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	09 94       	ijmp

0000336a <__epilogue_restores__>:
    336a:	2a 88       	ldd	r2, Y+18	; 0x12
    336c:	39 88       	ldd	r3, Y+17	; 0x11
    336e:	48 88       	ldd	r4, Y+16	; 0x10
    3370:	5f 84       	ldd	r5, Y+15	; 0x0f
    3372:	6e 84       	ldd	r6, Y+14	; 0x0e
    3374:	7d 84       	ldd	r7, Y+13	; 0x0d
    3376:	8c 84       	ldd	r8, Y+12	; 0x0c
    3378:	9b 84       	ldd	r9, Y+11	; 0x0b
    337a:	aa 84       	ldd	r10, Y+10	; 0x0a
    337c:	b9 84       	ldd	r11, Y+9	; 0x09
    337e:	c8 84       	ldd	r12, Y+8	; 0x08
    3380:	df 80       	ldd	r13, Y+7	; 0x07
    3382:	ee 80       	ldd	r14, Y+6	; 0x06
    3384:	fd 80       	ldd	r15, Y+5	; 0x05
    3386:	0c 81       	ldd	r16, Y+4	; 0x04
    3388:	1b 81       	ldd	r17, Y+3	; 0x03
    338a:	aa 81       	ldd	r26, Y+2	; 0x02
    338c:	b9 81       	ldd	r27, Y+1	; 0x01
    338e:	ce 0f       	add	r28, r30
    3390:	d1 1d       	adc	r29, r1
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	ed 01       	movw	r28, r26
    339e:	08 95       	ret

000033a0 <__udivmodhi4>:
    33a0:	aa 1b       	sub	r26, r26
    33a2:	bb 1b       	sub	r27, r27
    33a4:	51 e1       	ldi	r21, 0x11	; 17
    33a6:	07 c0       	rjmp	.+14     	; 0x33b6 <__udivmodhi4_ep>

000033a8 <__udivmodhi4_loop>:
    33a8:	aa 1f       	adc	r26, r26
    33aa:	bb 1f       	adc	r27, r27
    33ac:	a6 17       	cp	r26, r22
    33ae:	b7 07       	cpc	r27, r23
    33b0:	10 f0       	brcs	.+4      	; 0x33b6 <__udivmodhi4_ep>
    33b2:	a6 1b       	sub	r26, r22
    33b4:	b7 0b       	sbc	r27, r23

000033b6 <__udivmodhi4_ep>:
    33b6:	88 1f       	adc	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	5a 95       	dec	r21
    33bc:	a9 f7       	brne	.-22     	; 0x33a8 <__udivmodhi4_loop>
    33be:	80 95       	com	r24
    33c0:	90 95       	com	r25
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	08 95       	ret

000033c8 <__ftoa_engine>:
    33c8:	28 30       	cpi	r18, 0x08	; 8
    33ca:	08 f0       	brcs	.+2      	; 0x33ce <__ftoa_engine+0x6>
    33cc:	27 e0       	ldi	r18, 0x07	; 7
    33ce:	33 27       	eor	r19, r19
    33d0:	da 01       	movw	r26, r20
    33d2:	99 0f       	add	r25, r25
    33d4:	31 1d       	adc	r19, r1
    33d6:	87 fd       	sbrc	r24, 7
    33d8:	91 60       	ori	r25, 0x01	; 1
    33da:	00 96       	adiw	r24, 0x00	; 0
    33dc:	61 05       	cpc	r22, r1
    33de:	71 05       	cpc	r23, r1
    33e0:	39 f4       	brne	.+14     	; 0x33f0 <__ftoa_engine+0x28>
    33e2:	32 60       	ori	r19, 0x02	; 2
    33e4:	2e 5f       	subi	r18, 0xFE	; 254
    33e6:	3d 93       	st	X+, r19
    33e8:	30 e3       	ldi	r19, 0x30	; 48
    33ea:	2a 95       	dec	r18
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <__ftoa_engine+0x1e>
    33ee:	08 95       	ret
    33f0:	9f 3f       	cpi	r25, 0xFF	; 255
    33f2:	30 f0       	brcs	.+12     	; 0x3400 <__ftoa_engine+0x38>
    33f4:	80 38       	cpi	r24, 0x80	; 128
    33f6:	71 05       	cpc	r23, r1
    33f8:	61 05       	cpc	r22, r1
    33fa:	09 f0       	breq	.+2      	; 0x33fe <__ftoa_engine+0x36>
    33fc:	3c 5f       	subi	r19, 0xFC	; 252
    33fe:	3c 5f       	subi	r19, 0xFC	; 252
    3400:	3d 93       	st	X+, r19
    3402:	91 30       	cpi	r25, 0x01	; 1
    3404:	08 f0       	brcs	.+2      	; 0x3408 <__ftoa_engine+0x40>
    3406:	80 68       	ori	r24, 0x80	; 128
    3408:	91 1d       	adc	r25, r1
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	1f 93       	push	r17
    3410:	0f 93       	push	r16
    3412:	ff 92       	push	r15
    3414:	ef 92       	push	r14
    3416:	19 2f       	mov	r17, r25
    3418:	98 7f       	andi	r25, 0xF8	; 248
    341a:	96 95       	lsr	r25
    341c:	e9 2f       	mov	r30, r25
    341e:	96 95       	lsr	r25
    3420:	96 95       	lsr	r25
    3422:	e9 0f       	add	r30, r25
    3424:	ff 27       	eor	r31, r31
    3426:	ec 54       	subi	r30, 0x4C	; 76
    3428:	fd 4f       	sbci	r31, 0xFD	; 253
    342a:	99 27       	eor	r25, r25
    342c:	33 27       	eor	r19, r19
    342e:	ee 24       	eor	r14, r14
    3430:	ff 24       	eor	r15, r15
    3432:	a7 01       	movw	r20, r14
    3434:	e7 01       	movw	r28, r14
    3436:	05 90       	lpm	r0, Z+
    3438:	08 94       	sec
    343a:	07 94       	ror	r0
    343c:	28 f4       	brcc	.+10     	; 0x3448 <__ftoa_engine+0x80>
    343e:	36 0f       	add	r19, r22
    3440:	e7 1e       	adc	r14, r23
    3442:	f8 1e       	adc	r15, r24
    3444:	49 1f       	adc	r20, r25
    3446:	51 1d       	adc	r21, r1
    3448:	66 0f       	add	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	88 1f       	adc	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	06 94       	lsr	r0
    3452:	a1 f7       	brne	.-24     	; 0x343c <__ftoa_engine+0x74>
    3454:	05 90       	lpm	r0, Z+
    3456:	07 94       	ror	r0
    3458:	28 f4       	brcc	.+10     	; 0x3464 <__ftoa_engine+0x9c>
    345a:	e7 0e       	add	r14, r23
    345c:	f8 1e       	adc	r15, r24
    345e:	49 1f       	adc	r20, r25
    3460:	56 1f       	adc	r21, r22
    3462:	c1 1d       	adc	r28, r1
    3464:	77 0f       	add	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	66 1f       	adc	r22, r22
    346c:	06 94       	lsr	r0
    346e:	a1 f7       	brne	.-24     	; 0x3458 <__ftoa_engine+0x90>
    3470:	05 90       	lpm	r0, Z+
    3472:	07 94       	ror	r0
    3474:	28 f4       	brcc	.+10     	; 0x3480 <__ftoa_engine+0xb8>
    3476:	f8 0e       	add	r15, r24
    3478:	49 1f       	adc	r20, r25
    347a:	56 1f       	adc	r21, r22
    347c:	c7 1f       	adc	r28, r23
    347e:	d1 1d       	adc	r29, r1
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	66 1f       	adc	r22, r22
    3486:	77 1f       	adc	r23, r23
    3488:	06 94       	lsr	r0
    348a:	a1 f7       	brne	.-24     	; 0x3474 <__ftoa_engine+0xac>
    348c:	05 90       	lpm	r0, Z+
    348e:	07 94       	ror	r0
    3490:	20 f4       	brcc	.+8      	; 0x349a <__ftoa_engine+0xd2>
    3492:	49 0f       	add	r20, r25
    3494:	56 1f       	adc	r21, r22
    3496:	c7 1f       	adc	r28, r23
    3498:	d8 1f       	adc	r29, r24
    349a:	99 0f       	add	r25, r25
    349c:	66 1f       	adc	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	88 1f       	adc	r24, r24
    34a2:	06 94       	lsr	r0
    34a4:	a9 f7       	brne	.-22     	; 0x3490 <__ftoa_engine+0xc8>
    34a6:	84 91       	lpm	r24, Z
    34a8:	10 95       	com	r17
    34aa:	17 70       	andi	r17, 0x07	; 7
    34ac:	41 f0       	breq	.+16     	; 0x34be <__ftoa_engine+0xf6>
    34ae:	d6 95       	lsr	r29
    34b0:	c7 95       	ror	r28
    34b2:	57 95       	ror	r21
    34b4:	47 95       	ror	r20
    34b6:	f7 94       	ror	r15
    34b8:	e7 94       	ror	r14
    34ba:	1a 95       	dec	r17
    34bc:	c1 f7       	brne	.-16     	; 0x34ae <__ftoa_engine+0xe6>
    34be:	ea e5       	ldi	r30, 0x5A	; 90
    34c0:	f2 e0       	ldi	r31, 0x02	; 2
    34c2:	68 94       	set
    34c4:	15 90       	lpm	r1, Z+
    34c6:	15 91       	lpm	r17, Z+
    34c8:	35 91       	lpm	r19, Z+
    34ca:	65 91       	lpm	r22, Z+
    34cc:	95 91       	lpm	r25, Z+
    34ce:	05 90       	lpm	r0, Z+
    34d0:	7f e2       	ldi	r23, 0x2F	; 47
    34d2:	73 95       	inc	r23
    34d4:	e1 18       	sub	r14, r1
    34d6:	f1 0a       	sbc	r15, r17
    34d8:	43 0b       	sbc	r20, r19
    34da:	56 0b       	sbc	r21, r22
    34dc:	c9 0b       	sbc	r28, r25
    34de:	d0 09       	sbc	r29, r0
    34e0:	c0 f7       	brcc	.-16     	; 0x34d2 <__ftoa_engine+0x10a>
    34e2:	e1 0c       	add	r14, r1
    34e4:	f1 1e       	adc	r15, r17
    34e6:	43 1f       	adc	r20, r19
    34e8:	56 1f       	adc	r21, r22
    34ea:	c9 1f       	adc	r28, r25
    34ec:	d0 1d       	adc	r29, r0
    34ee:	7e f4       	brtc	.+30     	; 0x350e <__ftoa_engine+0x146>
    34f0:	70 33       	cpi	r23, 0x30	; 48
    34f2:	11 f4       	brne	.+4      	; 0x34f8 <__ftoa_engine+0x130>
    34f4:	8a 95       	dec	r24
    34f6:	e6 cf       	rjmp	.-52     	; 0x34c4 <__ftoa_engine+0xfc>
    34f8:	e8 94       	clt
    34fa:	01 50       	subi	r16, 0x01	; 1
    34fc:	30 f0       	brcs	.+12     	; 0x350a <__ftoa_engine+0x142>
    34fe:	08 0f       	add	r16, r24
    3500:	0a f4       	brpl	.+2      	; 0x3504 <__ftoa_engine+0x13c>
    3502:	00 27       	eor	r16, r16
    3504:	02 17       	cp	r16, r18
    3506:	08 f4       	brcc	.+2      	; 0x350a <__ftoa_engine+0x142>
    3508:	20 2f       	mov	r18, r16
    350a:	23 95       	inc	r18
    350c:	02 2f       	mov	r16, r18
    350e:	7a 33       	cpi	r23, 0x3A	; 58
    3510:	28 f0       	brcs	.+10     	; 0x351c <__ftoa_engine+0x154>
    3512:	79 e3       	ldi	r23, 0x39	; 57
    3514:	7d 93       	st	X+, r23
    3516:	2a 95       	dec	r18
    3518:	e9 f7       	brne	.-6      	; 0x3514 <__ftoa_engine+0x14c>
    351a:	10 c0       	rjmp	.+32     	; 0x353c <__ftoa_engine+0x174>
    351c:	7d 93       	st	X+, r23
    351e:	2a 95       	dec	r18
    3520:	89 f6       	brne	.-94     	; 0x34c4 <__ftoa_engine+0xfc>
    3522:	06 94       	lsr	r0
    3524:	97 95       	ror	r25
    3526:	67 95       	ror	r22
    3528:	37 95       	ror	r19
    352a:	17 95       	ror	r17
    352c:	17 94       	ror	r1
    352e:	e1 18       	sub	r14, r1
    3530:	f1 0a       	sbc	r15, r17
    3532:	43 0b       	sbc	r20, r19
    3534:	56 0b       	sbc	r21, r22
    3536:	c9 0b       	sbc	r28, r25
    3538:	d0 09       	sbc	r29, r0
    353a:	98 f0       	brcs	.+38     	; 0x3562 <__ftoa_engine+0x19a>
    353c:	23 95       	inc	r18
    353e:	7e 91       	ld	r23, -X
    3540:	73 95       	inc	r23
    3542:	7a 33       	cpi	r23, 0x3A	; 58
    3544:	08 f0       	brcs	.+2      	; 0x3548 <__ftoa_engine+0x180>
    3546:	70 e3       	ldi	r23, 0x30	; 48
    3548:	7c 93       	st	X, r23
    354a:	20 13       	cpse	r18, r16
    354c:	b8 f7       	brcc	.-18     	; 0x353c <__ftoa_engine+0x174>
    354e:	7e 91       	ld	r23, -X
    3550:	70 61       	ori	r23, 0x10	; 16
    3552:	7d 93       	st	X+, r23
    3554:	30 f0       	brcs	.+12     	; 0x3562 <__ftoa_engine+0x19a>
    3556:	83 95       	inc	r24
    3558:	71 e3       	ldi	r23, 0x31	; 49
    355a:	7d 93       	st	X+, r23
    355c:	70 e3       	ldi	r23, 0x30	; 48
    355e:	2a 95       	dec	r18
    3560:	e1 f7       	brne	.-8      	; 0x355a <__ftoa_engine+0x192>
    3562:	11 24       	eor	r1, r1
    3564:	ef 90       	pop	r14
    3566:	ff 90       	pop	r15
    3568:	0f 91       	pop	r16
    356a:	1f 91       	pop	r17
    356c:	cf 91       	pop	r28
    356e:	df 91       	pop	r29
    3570:	99 27       	eor	r25, r25
    3572:	87 fd       	sbrc	r24, 7
    3574:	90 95       	com	r25
    3576:	08 95       	ret

00003578 <strnlen_P>:
    3578:	fc 01       	movw	r30, r24
    357a:	05 90       	lpm	r0, Z+
    357c:	61 50       	subi	r22, 0x01	; 1
    357e:	70 40       	sbci	r23, 0x00	; 0
    3580:	01 10       	cpse	r0, r1
    3582:	d8 f7       	brcc	.-10     	; 0x357a <strnlen_P+0x2>
    3584:	80 95       	com	r24
    3586:	90 95       	com	r25
    3588:	8e 0f       	add	r24, r30
    358a:	9f 1f       	adc	r25, r31
    358c:	08 95       	ret

0000358e <strnlen>:
    358e:	fc 01       	movw	r30, r24
    3590:	61 50       	subi	r22, 0x01	; 1
    3592:	70 40       	sbci	r23, 0x00	; 0
    3594:	01 90       	ld	r0, Z+
    3596:	01 10       	cpse	r0, r1
    3598:	d8 f7       	brcc	.-10     	; 0x3590 <strnlen+0x2>
    359a:	80 95       	com	r24
    359c:	90 95       	com	r25
    359e:	8e 0f       	add	r24, r30
    35a0:	9f 1f       	adc	r25, r31
    35a2:	08 95       	ret

000035a4 <fputc>:
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	fb 01       	movw	r30, r22
    35ae:	23 81       	ldd	r18, Z+3	; 0x03
    35b0:	21 fd       	sbrc	r18, 1
    35b2:	03 c0       	rjmp	.+6      	; 0x35ba <fputc+0x16>
    35b4:	8f ef       	ldi	r24, 0xFF	; 255
    35b6:	9f ef       	ldi	r25, 0xFF	; 255
    35b8:	2c c0       	rjmp	.+88     	; 0x3612 <fputc+0x6e>
    35ba:	22 ff       	sbrs	r18, 2
    35bc:	16 c0       	rjmp	.+44     	; 0x35ea <fputc+0x46>
    35be:	46 81       	ldd	r20, Z+6	; 0x06
    35c0:	57 81       	ldd	r21, Z+7	; 0x07
    35c2:	24 81       	ldd	r18, Z+4	; 0x04
    35c4:	35 81       	ldd	r19, Z+5	; 0x05
    35c6:	42 17       	cp	r20, r18
    35c8:	53 07       	cpc	r21, r19
    35ca:	44 f4       	brge	.+16     	; 0x35dc <fputc+0x38>
    35cc:	a0 81       	ld	r26, Z
    35ce:	b1 81       	ldd	r27, Z+1	; 0x01
    35d0:	9d 01       	movw	r18, r26
    35d2:	2f 5f       	subi	r18, 0xFF	; 255
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	31 83       	std	Z+1, r19	; 0x01
    35d8:	20 83       	st	Z, r18
    35da:	8c 93       	st	X, r24
    35dc:	26 81       	ldd	r18, Z+6	; 0x06
    35de:	37 81       	ldd	r19, Z+7	; 0x07
    35e0:	2f 5f       	subi	r18, 0xFF	; 255
    35e2:	3f 4f       	sbci	r19, 0xFF	; 255
    35e4:	37 83       	std	Z+7, r19	; 0x07
    35e6:	26 83       	std	Z+6, r18	; 0x06
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <fputc+0x6e>
    35ea:	8b 01       	movw	r16, r22
    35ec:	ec 01       	movw	r28, r24
    35ee:	fb 01       	movw	r30, r22
    35f0:	00 84       	ldd	r0, Z+8	; 0x08
    35f2:	f1 85       	ldd	r31, Z+9	; 0x09
    35f4:	e0 2d       	mov	r30, r0
    35f6:	09 95       	icall
    35f8:	89 2b       	or	r24, r25
    35fa:	e1 f6       	brne	.-72     	; 0x35b4 <fputc+0x10>
    35fc:	d8 01       	movw	r26, r16
    35fe:	16 96       	adiw	r26, 0x06	; 6
    3600:	8d 91       	ld	r24, X+
    3602:	9c 91       	ld	r25, X
    3604:	17 97       	sbiw	r26, 0x07	; 7
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	17 96       	adiw	r26, 0x07	; 7
    360a:	9c 93       	st	X, r25
    360c:	8e 93       	st	-X, r24
    360e:	16 97       	sbiw	r26, 0x06	; 6
    3610:	ce 01       	movw	r24, r28
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	08 95       	ret

0000361c <vsprintf>:
    361c:	ae e0       	ldi	r26, 0x0E	; 14
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e4 e1       	ldi	r30, 0x14	; 20
    3622:	fb e1       	ldi	r31, 0x1B	; 27
    3624:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__prologue_saves__+0x1c>
    3628:	8c 01       	movw	r16, r24
    362a:	86 e0       	ldi	r24, 0x06	; 6
    362c:	8c 83       	std	Y+4, r24	; 0x04
    362e:	1a 83       	std	Y+2, r17	; 0x02
    3630:	09 83       	std	Y+1, r16	; 0x01
    3632:	8f ef       	ldi	r24, 0xFF	; 255
    3634:	9f e7       	ldi	r25, 0x7F	; 127
    3636:	9e 83       	std	Y+6, r25	; 0x06
    3638:	8d 83       	std	Y+5, r24	; 0x05
    363a:	ce 01       	movw	r24, r28
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vfprintf>
    3642:	ef 81       	ldd	r30, Y+7	; 0x07
    3644:	f8 85       	ldd	r31, Y+8	; 0x08
    3646:	e0 0f       	add	r30, r16
    3648:	f1 1f       	adc	r31, r17
    364a:	10 82       	st	Z, r1
    364c:	2e 96       	adiw	r28, 0x0e	; 14
    364e:	e4 e0       	ldi	r30, 0x04	; 4
    3650:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__epilogue_restores__+0x1c>

00003654 <__ultoa_invert>:
    3654:	fa 01       	movw	r30, r20
    3656:	aa 27       	eor	r26, r26
    3658:	28 30       	cpi	r18, 0x08	; 8
    365a:	51 f1       	breq	.+84     	; 0x36b0 <__ultoa_invert+0x5c>
    365c:	20 31       	cpi	r18, 0x10	; 16
    365e:	81 f1       	breq	.+96     	; 0x36c0 <__ultoa_invert+0x6c>
    3660:	e8 94       	clt
    3662:	6f 93       	push	r22
    3664:	6e 7f       	andi	r22, 0xFE	; 254
    3666:	6e 5f       	subi	r22, 0xFE	; 254
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	8f 4f       	sbci	r24, 0xFF	; 255
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	af 4f       	sbci	r26, 0xFF	; 255
    3670:	b1 e0       	ldi	r27, 0x01	; 1
    3672:	3e d0       	rcall	.+124    	; 0x36f0 <__ultoa_invert+0x9c>
    3674:	b4 e0       	ldi	r27, 0x04	; 4
    3676:	3c d0       	rcall	.+120    	; 0x36f0 <__ultoa_invert+0x9c>
    3678:	67 0f       	add	r22, r23
    367a:	78 1f       	adc	r23, r24
    367c:	89 1f       	adc	r24, r25
    367e:	9a 1f       	adc	r25, r26
    3680:	a1 1d       	adc	r26, r1
    3682:	68 0f       	add	r22, r24
    3684:	79 1f       	adc	r23, r25
    3686:	8a 1f       	adc	r24, r26
    3688:	91 1d       	adc	r25, r1
    368a:	a1 1d       	adc	r26, r1
    368c:	6a 0f       	add	r22, r26
    368e:	71 1d       	adc	r23, r1
    3690:	81 1d       	adc	r24, r1
    3692:	91 1d       	adc	r25, r1
    3694:	a1 1d       	adc	r26, r1
    3696:	20 d0       	rcall	.+64     	; 0x36d8 <__ultoa_invert+0x84>
    3698:	09 f4       	brne	.+2      	; 0x369c <__ultoa_invert+0x48>
    369a:	68 94       	set
    369c:	3f 91       	pop	r19
    369e:	2a e0       	ldi	r18, 0x0A	; 10
    36a0:	26 9f       	mul	r18, r22
    36a2:	11 24       	eor	r1, r1
    36a4:	30 19       	sub	r19, r0
    36a6:	30 5d       	subi	r19, 0xD0	; 208
    36a8:	31 93       	st	Z+, r19
    36aa:	de f6       	brtc	.-74     	; 0x3662 <__ultoa_invert+0xe>
    36ac:	cf 01       	movw	r24, r30
    36ae:	08 95       	ret
    36b0:	46 2f       	mov	r20, r22
    36b2:	47 70       	andi	r20, 0x07	; 7
    36b4:	40 5d       	subi	r20, 0xD0	; 208
    36b6:	41 93       	st	Z+, r20
    36b8:	b3 e0       	ldi	r27, 0x03	; 3
    36ba:	0f d0       	rcall	.+30     	; 0x36da <__ultoa_invert+0x86>
    36bc:	c9 f7       	brne	.-14     	; 0x36b0 <__ultoa_invert+0x5c>
    36be:	f6 cf       	rjmp	.-20     	; 0x36ac <__ultoa_invert+0x58>
    36c0:	46 2f       	mov	r20, r22
    36c2:	4f 70       	andi	r20, 0x0F	; 15
    36c4:	40 5d       	subi	r20, 0xD0	; 208
    36c6:	4a 33       	cpi	r20, 0x3A	; 58
    36c8:	18 f0       	brcs	.+6      	; 0x36d0 <__ultoa_invert+0x7c>
    36ca:	49 5d       	subi	r20, 0xD9	; 217
    36cc:	31 fd       	sbrc	r19, 1
    36ce:	40 52       	subi	r20, 0x20	; 32
    36d0:	41 93       	st	Z+, r20
    36d2:	02 d0       	rcall	.+4      	; 0x36d8 <__ultoa_invert+0x84>
    36d4:	a9 f7       	brne	.-22     	; 0x36c0 <__ultoa_invert+0x6c>
    36d6:	ea cf       	rjmp	.-44     	; 0x36ac <__ultoa_invert+0x58>
    36d8:	b4 e0       	ldi	r27, 0x04	; 4
    36da:	a6 95       	lsr	r26
    36dc:	97 95       	ror	r25
    36de:	87 95       	ror	r24
    36e0:	77 95       	ror	r23
    36e2:	67 95       	ror	r22
    36e4:	ba 95       	dec	r27
    36e6:	c9 f7       	brne	.-14     	; 0x36da <__ultoa_invert+0x86>
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	61 05       	cpc	r22, r1
    36ec:	71 05       	cpc	r23, r1
    36ee:	08 95       	ret
    36f0:	9b 01       	movw	r18, r22
    36f2:	ac 01       	movw	r20, r24
    36f4:	0a 2e       	mov	r0, r26
    36f6:	06 94       	lsr	r0
    36f8:	57 95       	ror	r21
    36fa:	47 95       	ror	r20
    36fc:	37 95       	ror	r19
    36fe:	27 95       	ror	r18
    3700:	ba 95       	dec	r27
    3702:	c9 f7       	brne	.-14     	; 0x36f6 <__ultoa_invert+0xa2>
    3704:	62 0f       	add	r22, r18
    3706:	73 1f       	adc	r23, r19
    3708:	84 1f       	adc	r24, r20
    370a:	95 1f       	adc	r25, r21
    370c:	a0 1d       	adc	r26, r0
    370e:	08 95       	ret

00003710 <_exit>:
    3710:	f8 94       	cli

00003712 <__stop_program>:
    3712:	ff cf       	rjmp	.-2      	; 0x3712 <__stop_program>
