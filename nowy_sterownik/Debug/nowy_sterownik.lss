
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  00004464  000044f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029f  00800214  00800214  000046ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00004744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060ff  00000000  00000000  00004d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ce  00000000  00000000  0000ae73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cab  00000000  00000000  0000cf41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e98  00000000  00000000  00010bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ca3  00000000  00000000  00011a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c02  00000000  00000000  00013727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00016329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 3e 18 	jmp	0x307c	; 0x307c <__vector_13>
      38:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	94 08       	sbc	r9, r4
      56:	9b 08       	sbc	r9, r11
      58:	9e 08       	sbc	r9, r14
      5a:	a4 08       	sbc	r10, r4
      5c:	aa 08       	sbc	r10, r10
      5e:	af 08       	sbc	r10, r15
      60:	b5 08       	sbc	r11, r5
      62:	bc 08       	sbc	r11, r12
      64:	c0 08       	sbc	r12, r0
      66:	c8 08       	sbc	r12, r8
      68:	17 09       	sbc	r17, r7
      6a:	17 09       	sbc	r17, r7
      6c:	17 09       	sbc	r17, r7
      6e:	17 09       	sbc	r17, r7
      70:	17 09       	sbc	r17, r7
      72:	17 09       	sbc	r17, r7
      74:	17 09       	sbc	r17, r7
      76:	17 09       	sbc	r17, r7
      78:	17 09       	sbc	r17, r7
      7a:	17 09       	sbc	r17, r7
      7c:	17 09       	sbc	r17, r7
      7e:	17 09       	sbc	r17, r7
      80:	17 09       	sbc	r17, r7
      82:	17 09       	sbc	r17, r7
      84:	17 09       	sbc	r17, r7
      86:	17 09       	sbc	r17, r7
      88:	17 09       	sbc	r17, r7
      8a:	17 09       	sbc	r17, r7
      8c:	17 09       	sbc	r17, r7
      8e:	17 09       	sbc	r17, r7
      90:	17 09       	sbc	r17, r7
      92:	17 09       	sbc	r17, r7
      94:	17 09       	sbc	r17, r7
      96:	17 09       	sbc	r17, r7
      98:	17 09       	sbc	r17, r7
      9a:	17 09       	sbc	r17, r7
      9c:	17 09       	sbc	r17, r7
      9e:	17 09       	sbc	r17, r7
      a0:	17 09       	sbc	r17, r7
      a2:	17 09       	sbc	r17, r7
      a4:	17 09       	sbc	r17, r7
      a6:	17 09       	sbc	r17, r7
      a8:	17 09       	sbc	r17, r7
      aa:	17 09       	sbc	r17, r7
      ac:	17 09       	sbc	r17, r7
      ae:	17 09       	sbc	r17, r7
      b0:	17 09       	sbc	r17, r7
      b2:	17 09       	sbc	r17, r7
      b4:	17 09       	sbc	r17, r7
      b6:	17 09       	sbc	r17, r7
      b8:	17 09       	sbc	r17, r7
      ba:	17 09       	sbc	r17, r7
      bc:	17 09       	sbc	r17, r7
      be:	17 09       	sbc	r17, r7
      c0:	17 09       	sbc	r17, r7
      c2:	17 09       	sbc	r17, r7
      c4:	17 09       	sbc	r17, r7
      c6:	17 09       	sbc	r17, r7
      c8:	17 09       	sbc	r17, r7
      ca:	17 09       	sbc	r17, r7
      cc:	17 09       	sbc	r17, r7
      ce:	17 09       	sbc	r17, r7
      d0:	17 09       	sbc	r17, r7
      d2:	17 09       	sbc	r17, r7
      d4:	17 09       	sbc	r17, r7
      d6:	17 09       	sbc	r17, r7
      d8:	17 09       	sbc	r17, r7
      da:	17 09       	sbc	r17, r7
      dc:	17 09       	sbc	r17, r7
      de:	17 09       	sbc	r17, r7
      e0:	17 09       	sbc	r17, r7
      e2:	17 09       	sbc	r17, r7
      e4:	17 09       	sbc	r17, r7
      e6:	17 09       	sbc	r17, r7
      e8:	17 09       	sbc	r17, r7
      ea:	17 09       	sbc	r17, r7
      ec:	17 09       	sbc	r17, r7
      ee:	17 09       	sbc	r17, r7
      f0:	17 09       	sbc	r17, r7
      f2:	17 09       	sbc	r17, r7
      f4:	17 09       	sbc	r17, r7
      f6:	17 09       	sbc	r17, r7
      f8:	17 09       	sbc	r17, r7
      fa:	17 09       	sbc	r17, r7
      fc:	17 09       	sbc	r17, r7
      fe:	17 09       	sbc	r17, r7
     100:	17 09       	sbc	r17, r7
     102:	17 09       	sbc	r17, r7
     104:	17 09       	sbc	r17, r7
     106:	17 09       	sbc	r17, r7
     108:	17 09       	sbc	r17, r7
     10a:	17 09       	sbc	r17, r7
     10c:	17 09       	sbc	r17, r7
     10e:	17 09       	sbc	r17, r7
     110:	17 09       	sbc	r17, r7
     112:	17 09       	sbc	r17, r7
     114:	17 09       	sbc	r17, r7
     116:	cf 08       	sbc	r12, r15
     118:	d6 08       	sbc	r13, r6
     11a:	dc 08       	sbc	r13, r12
     11c:	e1 08       	sbc	r14, r1
     11e:	e7 08       	sbc	r14, r7
     120:	ed 08       	sbc	r14, r13
     122:	17 09       	sbc	r17, r7
     124:	17 09       	sbc	r17, r7
     126:	17 09       	sbc	r17, r7
     128:	17 09       	sbc	r17, r7
     12a:	17 09       	sbc	r17, r7
     12c:	06 09       	sbc	r16, r6
     12e:	17 09       	sbc	r17, r7
     130:	17 09       	sbc	r17, r7
     132:	f5 08       	sbc	r15, r5
     134:	fa 08       	sbc	r15, r10
     136:	17 09       	sbc	r17, r7
     138:	f2 08       	sbc	r15, r2
     13a:	00 09       	sbc	r16, r0
     13c:	17 09       	sbc	r17, r7
     13e:	17 09       	sbc	r17, r7
     140:	17 09       	sbc	r17, r7
     142:	17 09       	sbc	r17, r7
     144:	17 09       	sbc	r17, r7
     146:	17 09       	sbc	r17, r7
     148:	17 09       	sbc	r17, r7
     14a:	17 09       	sbc	r17, r7
     14c:	17 09       	sbc	r17, r7
     14e:	17 09       	sbc	r17, r7
     150:	17 09       	sbc	r17, r7
     152:	17 09       	sbc	r17, r7
     154:	17 09       	sbc	r17, r7
     156:	17 09       	sbc	r17, r7
     158:	17 09       	sbc	r17, r7
     15a:	17 09       	sbc	r17, r7
     15c:	17 09       	sbc	r17, r7
     15e:	17 09       	sbc	r17, r7
     160:	17 09       	sbc	r17, r7
     162:	17 09       	sbc	r17, r7
     164:	17 09       	sbc	r17, r7
     166:	17 09       	sbc	r17, r7
     168:	17 09       	sbc	r17, r7
     16a:	17 09       	sbc	r17, r7
     16c:	17 09       	sbc	r17, r7
     16e:	17 09       	sbc	r17, r7
     170:	17 09       	sbc	r17, r7
     172:	17 09       	sbc	r17, r7
     174:	17 09       	sbc	r17, r7
     176:	17 09       	sbc	r17, r7
     178:	17 09       	sbc	r17, r7
     17a:	17 09       	sbc	r17, r7
     17c:	17 09       	sbc	r17, r7
     17e:	17 09       	sbc	r17, r7
     180:	17 09       	sbc	r17, r7
     182:	17 09       	sbc	r17, r7
     184:	17 09       	sbc	r17, r7
     186:	17 09       	sbc	r17, r7
     188:	17 09       	sbc	r17, r7
     18a:	17 09       	sbc	r17, r7
     18c:	17 09       	sbc	r17, r7
     18e:	17 09       	sbc	r17, r7
     190:	17 09       	sbc	r17, r7
     192:	17 09       	sbc	r17, r7
     194:	17 09       	sbc	r17, r7
     196:	17 09       	sbc	r17, r7
     198:	17 09       	sbc	r17, r7
     19a:	17 09       	sbc	r17, r7
     19c:	17 09       	sbc	r17, r7
     19e:	17 09       	sbc	r17, r7
     1a0:	17 09       	sbc	r17, r7
     1a2:	17 09       	sbc	r17, r7
     1a4:	17 09       	sbc	r17, r7
     1a6:	17 09       	sbc	r17, r7
     1a8:	17 09       	sbc	r17, r7
     1aa:	17 09       	sbc	r17, r7
     1ac:	17 09       	sbc	r17, r7
     1ae:	17 09       	sbc	r17, r7
     1b0:	17 09       	sbc	r17, r7
     1b2:	17 09       	sbc	r17, r7
     1b4:	17 09       	sbc	r17, r7
     1b6:	17 09       	sbc	r17, r7
     1b8:	17 09       	sbc	r17, r7
     1ba:	17 09       	sbc	r17, r7
     1bc:	17 09       	sbc	r17, r7
     1be:	17 09       	sbc	r17, r7
     1c0:	17 09       	sbc	r17, r7
     1c2:	17 09       	sbc	r17, r7
     1c4:	17 09       	sbc	r17, r7
     1c6:	17 09       	sbc	r17, r7
     1c8:	17 09       	sbc	r17, r7
     1ca:	17 09       	sbc	r17, r7
     1cc:	17 09       	sbc	r17, r7
     1ce:	17 09       	sbc	r17, r7
     1d0:	17 09       	sbc	r17, r7
     1d2:	17 09       	sbc	r17, r7
     1d4:	17 09       	sbc	r17, r7
     1d6:	17 09       	sbc	r17, r7
     1d8:	17 09       	sbc	r17, r7
     1da:	17 09       	sbc	r17, r7
     1dc:	17 09       	sbc	r17, r7
     1de:	17 09       	sbc	r17, r7
     1e0:	17 09       	sbc	r17, r7
     1e2:	17 09       	sbc	r17, r7
     1e4:	17 09       	sbc	r17, r7
     1e6:	17 09       	sbc	r17, r7
     1e8:	17 09       	sbc	r17, r7
     1ea:	17 09       	sbc	r17, r7
     1ec:	17 09       	sbc	r17, r7
     1ee:	17 09       	sbc	r17, r7
     1f0:	17 09       	sbc	r17, r7
     1f2:	17 09       	sbc	r17, r7
     1f4:	17 09       	sbc	r17, r7
     1f6:	17 09       	sbc	r17, r7
     1f8:	17 09       	sbc	r17, r7
     1fa:	17 09       	sbc	r17, r7
     1fc:	17 09       	sbc	r17, r7
     1fe:	17 09       	sbc	r17, r7
     200:	17 09       	sbc	r17, r7
     202:	17 09       	sbc	r17, r7
     204:	17 09       	sbc	r17, r7
     206:	17 09       	sbc	r17, r7
     208:	17 09       	sbc	r17, r7
     20a:	17 09       	sbc	r17, r7
     20c:	17 09       	sbc	r17, r7
     20e:	17 09       	sbc	r17, r7
     210:	17 09       	sbc	r17, r7
     212:	17 09       	sbc	r17, r7
     214:	17 09       	sbc	r17, r7
     216:	17 09       	sbc	r17, r7
     218:	17 09       	sbc	r17, r7
     21a:	17 09       	sbc	r17, r7
     21c:	17 09       	sbc	r17, r7
     21e:	17 09       	sbc	r17, r7
     220:	17 09       	sbc	r17, r7
     222:	17 09       	sbc	r17, r7
     224:	17 09       	sbc	r17, r7
     226:	17 09       	sbc	r17, r7
     228:	17 09       	sbc	r17, r7
     22a:	17 09       	sbc	r17, r7
     22c:	17 09       	sbc	r17, r7
     22e:	17 09       	sbc	r17, r7
     230:	17 09       	sbc	r17, r7
     232:	17 09       	sbc	r17, r7
     234:	17 09       	sbc	r17, r7
     236:	17 09       	sbc	r17, r7
     238:	17 09       	sbc	r17, r7
     23a:	17 09       	sbc	r17, r7
     23c:	17 09       	sbc	r17, r7
     23e:	17 09       	sbc	r17, r7
     240:	17 09       	sbc	r17, r7
     242:	17 09       	sbc	r17, r7
     244:	0a 09       	sbc	r16, r10
     246:	16 09       	sbc	r17, r6
     248:	14 09       	sbc	r17, r4
     24a:	12 09       	sbc	r17, r2
     24c:	10 09       	sbc	r17, r0
     24e:	0e 09       	sbc	r16, r14
     250:	0c 09       	sbc	r16, r12
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_2_menu+0x2>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e4 e6       	ldi	r30, 0x64	; 100
     3ea:	f4 e4       	ldi	r31, 0x44	; 68
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a4 31       	cpi	r26, 0x14	; 20
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	a4 e1       	ldi	r26, 0x14	; 20
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a3 3b       	cpi	r26, 0xB3	; 179
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 30 22 	jmp	0x4460	; 0x4460 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	8e e8       	ldi	r24, 0x8E	; 142
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 b6 21 	call	0x436c	; 0x436c <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	8e e8       	ldi	r24, 0x8E	; 142
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	0e 94 c1 18 	call	0x3182	; 0x3182 <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 96 18 	call	0x312c	; 0x312c <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <timer0_init>
	init_display_drv();
     45a:	0e 94 4b 08 	call	0x1096	; 0x1096 <init_display_drv>
	init_buttons();
     45e:	0e 94 cf 04 	call	0x99e	; 0x99e <init_buttons>
	init_system();
     462:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <init_system>
	init_measure();
     466:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 f7 11 	call	0x23ee	; 0x23ee <servo_init>
	#endif
	init_pin();
     478:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     47c:	78 94       	sei
	init_driver();
     47e:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     482:	85 e8       	ldi	r24, 0x85	; 133
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     48e:	0e 94 f1 06 	call	0xde2	; 0xde2 <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     492:	0e 94 56 10 	call	0x20ac	; 0x20ac <measure_get_servo_calibration>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     49a:	0e 94 47 0a 	call	0x148e	; 0x148e <disp_process>
		animation();
     49e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <animation>
		process_button();
     4a2:	0e 94 25 04 	call	0x84a	; 0x84a <process_button>
		disp_fast_process();
     4a6:	0e 94 18 16 	call	0x2c30	; 0x2c30 <disp_fast_process>
		disp_very_fast_process();
     4aa:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <disp_very_fast_process>
		dcmotor_process(motor_value);
     4ae:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <motor_value>
     4b2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
     4ba:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <servo_process>
		menu_process();
     4be:	0e 94 19 06 	call	0xc32	; 0xc32 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4c2:	0e 94 92 0c 	call	0x1924	; 0x1924 <error_event>
		error_led_blink();
     4c6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <error_led_blink>
		measure_process();
     4ca:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <measure_process>
		accumulator_process();
     4ce:	0e 94 8a 02 	call	0x514	; 0x514 <accumulator_process>
		accum_led_process();
     4d2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <accum_led_process>
		buzzer_process();
     4d6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <buzzer_process>
     4da:	df cf       	rjmp	.-66     	; 0x49a <main+0x28>

000004dc <accum_get_voltage>:
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 92 10 	call	0x2124	; 0x2124 <measure_get_filtered_value>
     4e2:	bc 01       	movw	r22, r24
     4e4:	66 0f       	add	r22, r22
     4e6:	77 1f       	adc	r23, r23
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	86 0f       	add	r24, r22
     4ee:	97 1f       	adc	r25, r23
     4f0:	bc 01       	movw	r22, r24
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 eb       	ldi	r20, 0xB6	; 182
     500:	50 e4       	ldi	r21, 0x40	; 64
     502:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	5a e3       	ldi	r21, 0x3A	; 58
     50e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
     512:	08 95       	ret

00000514 <accumulator_process>:
     514:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     518:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     51c:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     520:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     524:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <accumulator_timer.1914>
     528:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <accumulator_timer.1914+0x1>
     52c:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <accumulator_timer.1914+0x2>
     530:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <accumulator_timer.1914+0x3>
     534:	84 17       	cp	r24, r20
     536:	95 07       	cpc	r25, r21
     538:	a6 07       	cpc	r26, r22
     53a:	b7 07       	cpc	r27, r23
     53c:	98 f5       	brcc	.+102    	; 0x5a4 <accumulator_process+0x90>
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 92 10 	call	0x2124	; 0x2124 <measure_get_filtered_value>
     544:	89 35       	cpi	r24, 0x59	; 89
     546:	22 e0       	ldi	r18, 0x02	; 2
     548:	92 07       	cpc	r25, r18
     54a:	18 f0       	brcs	.+6      	; 0x552 <accumulator_process+0x3e>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <accumulator_state>
     552:	8b 38       	cpi	r24, 0x8B	; 139
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	92 07       	cpc	r25, r18
     558:	18 f4       	brcc	.+6      	; 0x560 <accumulator_process+0x4c>
     55a:	22 e0       	ldi	r18, 0x02	; 2
     55c:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <accumulator_state>
     560:	8e 35       	cpi	r24, 0x5E	; 94
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	92 07       	cpc	r25, r18
     566:	18 f4       	brcc	.+6      	; 0x56e <accumulator_process+0x5a>
     568:	23 e0       	ldi	r18, 0x03	; 3
     56a:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <accumulator_state>
     56e:	8c 58       	subi	r24, 0x8C	; 140
     570:	91 40       	sbci	r25, 0x01	; 1
     572:	8c 3c       	cpi	r24, 0xCC	; 204
     574:	91 05       	cpc	r25, r1
     576:	10 f4       	brcc	.+4      	; 0x57c <accumulator_process+0x68>
     578:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <accumulator_state>
     57c:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
     580:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
     584:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
     588:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
     58c:	8c 59       	subi	r24, 0x9C	; 156
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	af 4f       	sbci	r26, 0xFF	; 255
     592:	bf 4f       	sbci	r27, 0xFF	; 255
     594:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <accumulator_timer.1914>
     598:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <accumulator_timer.1914+0x1>
     59c:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <accumulator_timer.1914+0x2>
     5a0:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <accumulator_timer.1914+0x3>
     5a4:	08 95       	ret

000005a6 <accum_led_process>:
     5a6:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     5aa:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     5ae:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     5b2:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     5b6:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     5ba:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     5be:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     5c2:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     5c6:	84 17       	cp	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	a6 07       	cpc	r26, r22
     5cc:	b7 07       	cpc	r27, r23
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <accum_led_process+0x2c>
     5d0:	86 c0       	rjmp	.+268    	; 0x6de <accum_led_process+0x138>
     5d2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <accumulator_state>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	e9 f0       	breq	.+58     	; 0x614 <accum_led_process+0x6e>
     5da:	30 f0       	brcs	.+12     	; 0x5e8 <accum_led_process+0x42>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	99 f1       	breq	.+102    	; 0x646 <accum_led_process+0xa0>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <accum_led_process+0x40>
     5e4:	67 c0       	rjmp	.+206    	; 0x6b4 <accum_led_process+0x10e>
     5e6:	08 95       	ret
     5e8:	c5 98       	cbi	0x18, 5	; 24
     5ea:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     5ee:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     5f2:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     5f6:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     5fa:	88 53       	subi	r24, 0x38	; 56
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	af 4f       	sbci	r26, 0xFF	; 255
     600:	bf 4f       	sbci	r27, 0xFF	; 255
     602:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <process_timer.1918>
     606:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <process_timer.1918+0x1>
     60a:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <process_timer.1918+0x2>
     60e:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <process_timer.1918+0x3>
     612:	08 95       	ret
     614:	98 b3       	in	r25, 0x18	; 24
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	89 27       	eor	r24, r25
     61a:	88 bb       	out	0x18, r24	; 24
     61c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     620:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     624:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     628:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     62c:	86 50       	subi	r24, 0x06	; 6
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	af 4f       	sbci	r26, 0xFF	; 255
     632:	bf 4f       	sbci	r27, 0xFF	; 255
     634:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <process_timer.1918>
     638:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <process_timer.1918+0x1>
     63c:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <process_timer.1918+0x2>
     640:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <process_timer.1918+0x3>
     644:	08 95       	ret
     646:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     64a:	81 11       	cpse	r24, r1
     64c:	19 c0       	rjmp	.+50     	; 0x680 <accum_led_process+0xda>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     654:	c5 9a       	sbi	0x18, 5	; 24
     656:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     65a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     65e:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     662:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     666:	8c 50       	subi	r24, 0x0C	; 12
     668:	9e 4f       	sbci	r25, 0xFE	; 254
     66a:	af 4f       	sbci	r26, 0xFF	; 255
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <process_timer.1918>
     672:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <process_timer.1918+0x1>
     676:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <process_timer.1918+0x2>
     67a:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <process_timer.1918+0x3>
     67e:	08 95       	ret
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	69 f5       	brne	.+90     	; 0x6de <accum_led_process+0x138>
     684:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
     688:	c5 98       	cbi	0x18, 5	; 24
     68a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     68e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     692:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     696:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     69a:	84 52       	subi	r24, 0x24	; 36
     69c:	9a 4f       	sbci	r25, 0xFA	; 250
     69e:	af 4f       	sbci	r26, 0xFF	; 255
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <process_timer.1918>
     6a6:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <process_timer.1918+0x1>
     6aa:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <process_timer.1918+0x2>
     6ae:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <process_timer.1918+0x3>
     6b2:	08 95       	ret
     6b4:	c5 9a       	sbi	0x18, 5	; 24
     6b6:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <process_timer.1918>
     6ba:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <process_timer.1918+0x1>
     6be:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <process_timer.1918+0x2>
     6c2:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <process_timer.1918+0x3>
     6c6:	88 51       	subi	r24, 0x18	; 24
     6c8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ca:	af 4f       	sbci	r26, 0xFF	; 255
     6cc:	bf 4f       	sbci	r27, 0xFF	; 255
     6ce:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <process_timer.1918>
     6d2:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <process_timer.1918+0x1>
     6d6:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <process_timer.1918+0x2>
     6da:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <process_timer.1918+0x3>
     6de:	08 95       	ret

000006e0 <adc_setchannel>:
     6e0:	37 98       	cbi	0x06, 7	; 6
     6e2:	97 b1       	in	r25, 0x07	; 7
     6e4:	98 7f       	andi	r25, 0xF8	; 248
     6e6:	87 70       	andi	r24, 0x07	; 7
     6e8:	89 2b       	or	r24, r25
     6ea:	87 b9       	out	0x07, r24	; 7
     6ec:	37 9a       	sbi	0x06, 7	; 6
     6ee:	08 95       	ret

000006f0 <adc_readsel>:
     6f0:	36 9a       	sbi	0x06, 6	; 6
     6f2:	36 99       	sbic	0x06, 6	; 6
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <adc_readsel+0x2>
     6f6:	84 b1       	in	r24, 0x04	; 4
     6f8:	95 b1       	in	r25, 0x05	; 5
     6fa:	08 95       	ret

000006fc <adc_read>:
     6fc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_setchannel>
     700:	0e 94 78 03 	call	0x6f0	; 0x6f0 <adc_readsel>
     704:	08 95       	ret

00000706 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     706:	dc 01       	movw	r26, r24
     708:	16 96       	adiw	r26, 0x06	; 6
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	17 97       	sbiw	r26, 0x07	; 7
     710:	20 81       	ld	r18, Z
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	18 96       	adiw	r26, 0x08	; 8
     718:	0c 90       	ld	r0, X
     71a:	02 c0       	rjmp	.+4      	; 0x720 <read_button+0x1a>
     71c:	f5 95       	asr	r31
     71e:	e7 95       	ror	r30
     720:	0a 94       	dec	r0
     722:	e2 f7       	brpl	.-8      	; 0x71c <read_button+0x16>
     724:	cf 01       	movw	r24, r30
     726:	81 70       	andi	r24, 0x01	; 1
     728:	08 95       	ret

0000072a <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     72a:	eb e3       	ldi	r30, 0x3B	; 59
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     734:	14 86       	std	Z+12, r1	; 0x0c
     736:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     738:	12 86       	std	Z+10, r1	; 0x0a
     73a:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     73c:	16 86       	std	Z+14, r1	; 0x0e
     73e:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     740:	26 e3       	ldi	r18, 0x36	; 54
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	37 83       	std	Z+7, r19	; 0x07
     746:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     74c:	ee e0       	ldi	r30, 0x0E	; 14
     74e:	f4 e0       	ldi	r31, 0x04	; 4
     750:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     752:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     758:	12 86       	std	Z+10, r1	; 0x0a
     75a:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     75c:	16 86       	std	Z+14, r1	; 0x0e
     75e:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     760:	37 83       	std	Z+7, r19	; 0x07
     762:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     764:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     766:	ed e1       	ldi	r30, 0x1D	; 29
     768:	f4 e0       	ldi	r31, 0x04	; 4
     76a:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     76c:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     76e:	14 86       	std	Z+12, r1	; 0x0c
     770:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     772:	12 86       	std	Z+10, r1	; 0x0a
     774:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     776:	16 86       	std	Z+14, r1	; 0x0e
     778:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     77a:	37 83       	std	Z+7, r19	; 0x07
     77c:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     782:	eb ef       	ldi	r30, 0xFB	; 251
     784:	f3 e0       	ldi	r31, 0x03	; 3
     786:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     788:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     78a:	14 86       	std	Z+12, r1	; 0x0c
     78c:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     78e:	12 86       	std	Z+10, r1	; 0x0a
     790:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     792:	16 86       	std	Z+14, r1	; 0x0e
     794:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     796:	40 e3       	ldi	r20, 0x30	; 48
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	57 83       	std	Z+7, r21	; 0x07
     79c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     7a2:	ec ee       	ldi	r30, 0xEC	; 236
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     7a8:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     7aa:	14 86       	std	Z+12, r1	; 0x0c
     7ac:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     7ae:	12 86       	std	Z+10, r1	; 0x0a
     7b0:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     7b2:	16 86       	std	Z+14, r1	; 0x0e
     7b4:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     7b6:	37 83       	std	Z+7, r19	; 0x07
     7b8:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     7ba:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     7bc:	ec e2       	ldi	r30, 0x2C	; 44
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     7c2:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     7c4:	14 86       	std	Z+12, r1	; 0x0c
     7c6:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     7c8:	12 86       	std	Z+10, r1	; 0x0a
     7ca:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     7cc:	16 86       	std	Z+14, r1	; 0x0e
     7ce:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     7d0:	69 e3       	ldi	r22, 0x39	; 57
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	77 83       	std	Z+7, r23	; 0x07
     7d6:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     7d8:	a4 e0       	ldi	r26, 0x04	; 4
     7da:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     7dc:	ea e4       	ldi	r30, 0x4A	; 74
     7de:	f4 e0       	ldi	r31, 0x04	; 4
     7e0:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     7e2:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     7e4:	14 86       	std	Z+12, r1	; 0x0c
     7e6:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     7e8:	12 86       	std	Z+10, r1	; 0x0a
     7ea:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     7ec:	16 86       	std	Z+14, r1	; 0x0e
     7ee:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     7f0:	43 e3       	ldi	r20, 0x33	; 51
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	57 83       	std	Z+7, r21	; 0x07
     7f6:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     7f8:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     7fa:	e9 e5       	ldi	r30, 0x59	; 89
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     800:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     802:	14 86       	std	Z+12, r1	; 0x0c
     804:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     806:	12 86       	std	Z+10, r1	; 0x0a
     808:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     80a:	16 86       	std	Z+14, r1	; 0x0e
     80c:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     80e:	37 83       	std	Z+7, r19	; 0x07
     810:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     812:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     814:	ee ec       	ldi	r30, 0xCE	; 206
     816:	f3 e0       	ldi	r31, 0x03	; 3
     818:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     81a:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     81c:	14 86       	std	Z+12, r1	; 0x0c
     81e:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     820:	12 86       	std	Z+10, r1	; 0x0a
     822:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     824:	16 86       	std	Z+14, r1	; 0x0e
     826:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     828:	77 83       	std	Z+7, r23	; 0x07
     82a:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     82c:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     82e:	ed ed       	ldi	r30, 0xDD	; 221
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     834:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     836:	14 86       	std	Z+12, r1	; 0x0c
     838:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     83e:	16 86       	std	Z+14, r1	; 0x0e
     840:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     842:	57 83       	std	Z+7, r21	; 0x07
     844:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     846:	10 86       	std	Z+8, r1	; 0x08
     848:	08 95       	ret

0000084a <process_button>:
}

void process_button(void)
{
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     858:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     85c:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     860:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     864:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     868:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <timer_button>
     86c:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <timer_button+0x1>
     870:	a0 91 0c 04 	lds	r26, 0x040C	; 0x80040c <timer_button+0x2>
     874:	b0 91 0d 04 	lds	r27, 0x040D	; 0x80040d <timer_button+0x3>
     878:	84 17       	cp	r24, r20
     87a:	95 07       	cpc	r25, r21
     87c:	a6 07       	cpc	r26, r22
     87e:	b7 07       	cpc	r27, r23
     880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
     882:	85 c0       	rjmp	.+266    	; 0x98e <__stack+0x12f>
	{
		timer_button = mktime.ms + 20;
     884:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
     888:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
     88c:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
     890:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
     894:	44 96       	adiw	r24, 0x14	; 20
     896:	a1 1d       	adc	r26, r1
     898:	b1 1d       	adc	r27, r1
     89a:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <timer_button>
     89e:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <timer_button+0x1>
     8a2:	a0 93 0c 04 	sts	0x040C, r26	; 0x80040c <timer_button+0x2>
     8a6:	b0 93 0d 04 	sts	0x040D, r27	; 0x80040d <timer_button+0x3>
     8aa:	c0 e6       	ldi	r28, 0x60	; 96
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f4 e7       	ldi	r31, 0x74	; 116
     8b2:	ef 2e       	mov	r14, r31
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ff 2e       	mov	r15, r31
     8b8:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     8ba:	dd 24       	eor	r13, r13
     8bc:	d3 94       	inc	r13
     8be:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	0e 94 83 03 	call	0x706	; 0x706 <read_button>
			if(red_val != but_tab[i]->value)
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	95 81       	ldd	r25, Z+5	; 0x05
     8ce:	89 17       	cp	r24, r25
     8d0:	e1 f0       	breq	.+56     	; 0x90a <__stack+0xab>
			{
				but_tab[i]->value = red_val;
     8d2:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <__stack+0x91>
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	dc 01       	movw	r26, r24
     8de:	19 96       	adiw	r26, 0x09	; 9
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	1a 97       	sbiw	r26, 0x0a	; 10
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x10f>
				but_tab[i]->rise_callback(but_tab[i]);
     8ec:	09 95       	icall
     8ee:	3f c0       	rjmp	.+126    	; 0x96e <__stack+0x10f>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     8f0:	81 11       	cpse	r24, r1
     8f2:	3d c0       	rjmp	.+122    	; 0x96e <__stack+0x10f>
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	dc 01       	movw	r26, r24
     8fa:	1b 96       	adiw	r26, 0x0b	; 11
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	1c 97       	sbiw	r26, 0x0c	; 12
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xaf>
				but_tab[i]->fall_callback(but_tab[i]);
     906:	09 95       	icall
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
			}
			//timer
			if (red_val == 0)
     90a:	81 11       	cpse	r24, r1
     90c:	30 c0       	rjmp	.+96     	; 0x96e <__stack+0x10f>
			{
				but_tab[i]->tim_cnt++;
     90e:	d8 01       	movw	r26, r16
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	a2 81       	ldd	r26, Z+2	; 0x02
     91a:	b3 81       	ldd	r27, Z+3	; 0x03
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	a1 1d       	adc	r26, r1
     920:	b1 1d       	adc	r27, r1
     922:	80 83       	st	Z, r24
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	a2 83       	std	Z+2, r26	; 0x02
     928:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     92a:	d8 01       	movw	r26, r16
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	a2 81       	ldd	r26, Z+2	; 0x02
     936:	b3 81       	ldd	r27, Z+3	; 0x03
     938:	88 97       	sbiw	r24, 0x28	; 40
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	10 f1       	brcs	.+68     	; 0x984 <__stack+0x125>
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	f9 f0       	breq	.+62     	; 0x984 <__stack+0x125>
				{
					if (but_tab[i]->timer_callback != 0)
     946:	05 84       	ldd	r0, Z+13	; 0x0d
     948:	f6 85       	ldd	r31, Z+14	; 0x0e
     94a:	e0 2d       	mov	r30, r0
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0xf7>
					but_tab[i]->timer_callback(&button1);
     950:	8b e3       	ldi	r24, 0x3B	; 59
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     956:	d8 01       	movw	r26, r16
     958:	ed 91       	ld	r30, X+
     95a:	fc 91       	ld	r31, X
     95c:	11 97       	sbiw	r26, 0x01	; 1
     95e:	10 82       	st	Z, r1
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	12 82       	std	Z+2, r1	; 0x02
     964:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	d4 82       	std	Z+4, r13	; 0x04
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x125>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     96e:	d8 01       	movw	r26, r16
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	11 97       	sbiw	r26, 0x01	; 1
     976:	10 82       	st	Z, r1
     978:	11 82       	std	Z+1, r1	; 0x01
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     97e:	ed 91       	ld	r30, X+
     980:	fc 91       	ld	r31, X
     982:	14 82       	std	Z+4, r1	; 0x04
     984:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     986:	ce 15       	cp	r28, r14
     988:	df 05       	cpc	r29, r15
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x12f>
     98c:	98 cf       	rjmp	.-208    	; 0x8be <__stack+0x5f>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	08 95       	ret

0000099e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     99e:	0e 94 95 03 	call	0x72a	; 0x72a <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     9a2:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     9a4:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     9a6:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     9a8:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     9aa:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     9ac:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     9ae:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     9b0:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     9b2:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     9b4:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     9b6:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     9b8:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     9ba:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     9bc:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     9be:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     9c0:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     9c2:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     9c4:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     9c6:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     9c8:	a8 9a       	sbi	0x15, 0	; 21
     9ca:	08 95       	ret

000009cc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9cc:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     9d0:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     9d4:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     9d8:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     9dc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <buzzer_timer>
     9e0:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <buzzer_timer+0x1>
     9e4:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <buzzer_timer+0x2>
     9e8:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <buzzer_timer+0x3>
     9ec:	84 17       	cp	r24, r20
     9ee:	95 07       	cpc	r25, r21
     9f0:	a6 07       	cpc	r26, r22
     9f2:	b7 07       	cpc	r27, r23
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <buzzer_process+0x2c>
     9f6:	5e c0       	rjmp	.+188    	; 0xab4 <buzzer_process+0xe8>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER) == 0)
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
     9fe:	81 11       	cpse	r24, r1
     a00:	59 c0       	rjmp	.+178    	; 0xab4 <buzzer_process+0xe8>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     a02:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
     a06:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
     a0a:	95 ff       	sbrs	r25, 5
     a0c:	37 c0       	rjmp	.+110    	; 0xa7c <buzzer_process+0xb0>
     a0e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <buzzer_state>
     a12:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <buzzer_state+0x1>
     a16:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <buzzer_state+0x2>
     a1a:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <buzzer_state+0x3>
     a1e:	89 2b       	or	r24, r25
     a20:	8a 2b       	or	r24, r26
     a22:	8b 2b       	or	r24, r27
     a24:	59 f5       	brne	.+86     	; 0xa7c <buzzer_process+0xb0>
			{
				ON_BUZZER;
     a26:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a28:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
     a2c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
     a30:	9f 7d       	andi	r25, 0xDF	; 223
     a32:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
     a36:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
				buzzer_state = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <buzzer_state>
     a46:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <buzzer_state+0x1>
     a4a:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <buzzer_state+0x2>
     a4e:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <buzzer_state+0x3>
				buzzer_timer += 100;
     a52:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <buzzer_timer>
     a56:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <buzzer_timer+0x1>
     a5a:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <buzzer_timer+0x2>
     a5e:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <buzzer_timer+0x3>
     a62:	8c 59       	subi	r24, 0x9C	; 156
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	af 4f       	sbci	r26, 0xFF	; 255
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <buzzer_timer>
     a6e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <buzzer_timer+0x1>
     a72:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <buzzer_timer+0x2>
     a76:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <buzzer_timer+0x3>
     a7a:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a7c:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a7e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <buzzer_state>
     a82:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <buzzer_state+0x1>
     a86:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <buzzer_state+0x2>
     a8a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <buzzer_state+0x3>
				buzzer_timer += 50;
     a8e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <buzzer_timer>
     a92:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <buzzer_timer+0x1>
     a96:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <buzzer_timer+0x2>
     a9a:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <buzzer_timer+0x3>
     a9e:	c2 96       	adiw	r24, 0x32	; 50
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <buzzer_timer>
     aa8:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <buzzer_timer+0x1>
     aac:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <buzzer_timer+0x2>
     ab0:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <buzzer_timer+0x3>
     ab4:	08 95       	ret

00000ab6 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     ab6:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     ab8:	c0 98       	cbi	0x18, 0	; 24
     aba:	08 95       	ret

00000abc <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     abc:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     ac0:	88 23       	and	r24, r24
     ac2:	19 f0       	breq	.+6      	; 0xaca <button_1_menu+0xe>
		configured_parameter--;
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <configured_parameter>
     aca:	08 95       	ret

00000acc <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     acc:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     ad0:	86 30       	cpi	r24, 0x06	; 6
     ad2:	18 f4       	brcc	.+6      	; 0xada <button_2_menu+0xe>
		configured_parameter++;
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <configured_parameter>
     ada:	08 95       	ret

00000adc <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     adc:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	e2 59       	subi	r30, 0x92	; 146
     ae6:	fb 4f       	sbci	r31, 0xFB	; 251
     ae8:	20 81       	ld	r18, Z
     aea:	22 23       	and	r18, r18
     aec:	29 f0       	breq	.+10     	; 0xaf8 <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     aee:	fc 01       	movw	r30, r24
     af0:	e2 59       	subi	r30, 0x92	; 146
     af2:	fb 4f       	sbci	r31, 0xFB	; 251
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	20 83       	st	Z, r18
     af8:	08 95       	ret

00000afa <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     afa:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	fc 01       	movw	r30, r24
     b02:	e2 59       	subi	r30, 0x92	; 146
     b04:	fb 4f       	sbci	r31, 0xFB	; 251
     b06:	20 81       	ld	r18, Z
     b08:	fc 01       	movw	r30, r24
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ec 58       	subi	r30, 0x8C	; 140
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	30 81       	ld	r19, Z
     b14:	23 17       	cp	r18, r19
     b16:	28 f4       	brcc	.+10     	; 0xb22 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b18:	fc 01       	movw	r30, r24
     b1a:	e2 59       	subi	r30, 0x92	; 146
     b1c:	fb 4f       	sbci	r31, 0xFB	; 251
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	20 83       	st	Z, r18
     b22:	08 95       	ret

00000b24 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     b24:	a4 e7       	ldi	r26, 0x74	; 116
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	ee e6       	ldi	r30, 0x6E	; 110
     b2a:	f4 e0       	ldi	r31, 0x04	; 4
     b2c:	25 e7       	ldi	r18, 0x75	; 117
     b2e:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	8c 91       	ld	r24, X
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	81 93       	st	Z+, r24
     b38:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	c1 f7       	brne	.-16     	; 0xb30 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     b40:	08 95       	ret

00000b42 <enter_to_menu>:
	return 0;
}

static void enter_to_menu(menuState_t state)
{
	dark_menu_state = state;
     b42:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     b46:	8e e5       	ldi	r24, 0x5E	; 94
     b48:	95 e0       	ldi	r25, 0x05	; 5
     b4a:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <button1+0xc>
     b4e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <button1+0xb>
	button2.fall_callback = button_2_menu;
     b52:	86 e6       	ldi	r24, 0x66	; 102
     b54:	95 e0       	ldi	r25, 0x05	; 5
     b56:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <button2+0xc>
     b5a:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <button2+0xb>
	button3.fall_callback = button_3_menu;
     b5e:	8c ec       	ldi	r24, 0xCC	; 204
     b60:	95 e0       	ldi	r25, 0x05	; 5
     b62:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <button3+0xc>
     b66:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <button3+0xb>
	button5.fall_callback = button_5_menu;
     b6a:	8e e6       	ldi	r24, 0x6E	; 110
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <button5+0xc>
     b72:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <button5+0xb>
	button6.fall_callback = button_6_menu;
     b76:	8d e7       	ldi	r24, 0x7D	; 125
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <button6+0xc>
     b7e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <button6+0xb>
	button7.fall_callback = button_7_menu;
     b82:	82 e9       	ldi	r24, 0x92	; 146
     b84:	95 e0       	ldi	r25, 0x05	; 5
     b86:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <button7+0xc>
     b8a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     b8e:	67 e0       	ldi	r22, 0x07	; 7
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
     b96:	08 95       	ret

00000b98 <button_3_menu>:

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b98:	6e e6       	ldi	r22, 0x6E	; 110
     b9a:	74 e0       	ldi	r23, 0x04	; 4
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     ba2:	88 e0       	ldi	r24, 0x08	; 8
     ba4:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     ba8:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
	LED_MOTOR_OFF;
     bac:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     bae:	96 98       	cbi	0x12, 6	; 18
     bb0:	08 95       	ret

00000bb2 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     bb2:	cf 93       	push	r28
	pass[pass_len++] = number;
     bb4:	e0 91 76 04 	lds	r30, 0x0476	; 0x800476 <pass_len>
     bb8:	c1 e0       	ldi	r28, 0x01	; 1
     bba:	ce 0f       	add	r28, r30
     bbc:	c0 93 76 04 	sts	0x0476, r28	; 0x800476 <pass_len>
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	e8 59       	subi	r30, 0x98	; 152
     bc4:	fb 4f       	sbci	r31, 0xFB	; 251
     bc6:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     bc8:	4c 2f       	mov	r20, r28
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	61 ec       	ldi	r22, 0xC1	; 193
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	88 e6       	ldi	r24, 0x68	; 104
     bd2:	94 e0       	ldi	r25, 0x04	; 4
     bd4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <memcmp>
     bd8:	89 2b       	or	r24, r25
     bda:	51 f0       	breq	.+20     	; 0xbf0 <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     bdc:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <pass_len>
	memset(pass, 0, sizeof(pass));
     be0:	86 e0       	ldi	r24, 0x06	; 6
     be2:	e8 e6       	ldi	r30, 0x68	; 104
     be4:	f4 e0       	ldi	r31, 0x04	; 4
     be6:	df 01       	movw	r26, r30
     be8:	1d 92       	st	X+, r1
     bea:	8a 95       	dec	r24
     bec:	e9 f7       	brne	.-6      	; 0xbe8 <pass_add_number+0x36>
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <pass_add_number+0x48>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     bf0:	c6 30       	cpi	r28, 0x06	; 6
     bf2:	19 f4       	brne	.+6      	; 0xbfa <pass_add_number+0x48>
		//debug_msg("enter_to_menu\n");
		enter_to_menu(MENU_PARAMETERS);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 a1 05 	call	0xb42	; 0xb42 <enter_to_menu>
	}
}
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c04:	08 95       	ret

00000c06 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c0c:	08 95       	ret

00000c0e <button_5_number>:
	pass_add_number(2);
}

static void button_5_number(void *pv)
{
	pass_add_number(3);
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c14:	08 95       	ret

00000c16 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c1c:	08 95       	ret

00000c1e <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c24:	08 95       	ret

00000c26 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pass_add_number>
     c2c:	08 95       	ret

00000c2e <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	08 95       	ret

00000c32 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state > MENU_PASSWORD)
     c32:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     c36:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     c3a:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     c3e:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     c42:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <menu_timer.2234>
     c46:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <menu_timer.2234+0x1>
     c4a:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <menu_timer.2234+0x2>
     c4e:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <menu_timer.2234+0x3>
     c52:	84 17       	cp	r24, r20
     c54:	95 07       	cpc	r25, r21
     c56:	a6 07       	cpc	r26, r22
     c58:	b7 07       	cpc	r27, r23
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <menu_process+0x2c>
     c5c:	89 c0       	rjmp	.+274    	; 0xd70 <menu_process+0x13e>
     c5e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <dark_menu_state>
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <menu_process+0x36>
     c66:	84 c0       	rjmp	.+264    	; 0xd70 <menu_process+0x13e>
	{
		menu_timer = mktime.ms + 250;
     c68:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
     c6c:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
     c70:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
     c74:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
     c78:	46 50       	subi	r20, 0x06	; 6
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	6f 4f       	sbci	r22, 0xFF	; 255
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <menu_timer.2234>
     c84:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <menu_timer.2234+0x1>
     c88:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <menu_timer.2234+0x2>
     c8c:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <menu_timer.2234+0x3>
		if (dark_menu_state == MENU_SERVO)
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	69 f4       	brne	.+26     	; 0xcae <menu_process+0x7c>
		{
			if (configured_parameter < MENU_CLOSE_SERVO_REGULATION)
     c94:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	20 f4       	brcc	.+8      	; 0xca4 <menu_process+0x72>
				configured_parameter = MENU_CLOSE_SERVO_REGULATION;
     c9c:	85 e0       	ldi	r24, 0x05	; 5
     c9e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <configured_parameter>
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <menu_process+0x7c>
			if (configured_parameter > MENU_OPEN_SERVO_REGULATION)
     ca4:	87 30       	cpi	r24, 0x07	; 7
     ca6:	18 f0       	brcs	.+6      	; 0xcae <menu_process+0x7c>
				configured_parameter = MENU_OPEN_SERVO_REGULATION;	
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <configured_parameter>
		}
		if (segment1.state == SEG_MENU)
     cae:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
     cb2:	87 30       	cpi	r24, 0x07	; 7
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <menu_process+0x90>
			disp_set_number(&segment1, configured_parameter);
     cb6:	60 91 75 04 	lds	r22, 0x0475	; 0x800475 <configured_parameter>
     cba:	87 e8       	ldi	r24, 0x87	; 135
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
		if (segment2.state == SEG_MENU)
     cc2:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
     cc6:	87 30       	cpi	r24, 0x07	; 7
     cc8:	51 f4       	brne	.+20     	; 0xcde <menu_process+0xac>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     cca:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <configured_parameter>
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	e2 59       	subi	r30, 0x92	; 146
     cd2:	fb 4f       	sbci	r31, 0xFB	; 251
     cd4:	60 81       	ld	r22, Z
     cd6:	82 e8       	ldi	r24, 0x82	; 130
     cd8:	94 e0       	ldi	r25, 0x04	; 4
     cda:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     cde:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
     ce2:	88 30       	cpi	r24, 0x08	; 8
     ce4:	49 f5       	brne	.+82     	; 0xd38 <menu_process+0x106>
     ce6:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
     cea:	88 30       	cpi	r24, 0x08	; 8
     cec:	29 f5       	brne	.+74     	; 0xd38 <menu_process+0x106>
		{
			menu_timer = 1000 + mktime.ms;
     cee:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
     cf2:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
     cf6:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
     cfa:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
     cfe:	88 51       	subi	r24, 0x18	; 24
     d00:	9c 4f       	sbci	r25, 0xFC	; 252
     d02:	af 4f       	sbci	r26, 0xFF	; 255
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <menu_timer.2234>
     d0a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <menu_timer.2234+0x1>
     d0e:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <menu_timer.2234+0x2>
     d12:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <menu_timer.2234+0x3>
			DispD2.value = 's';
     d16:	83 e7       	ldi	r24, 0x73	; 115
     d18:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <DispD2>
			DispD1.value = 'a';
     d1c:	81 e6       	ldi	r24, 0x61	; 97
     d1e:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DispD1>
			DispD3.value = 'p';
     d22:	80 e7       	ldi	r24, 0x70	; 112
     d24:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <DispD3>
			DispD4.value = 0;
     d28:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d2c:	8a e0       	ldi	r24, 0x0A	; 10
     d2e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d32:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
			
			return;
     d36:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d38:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
     d3c:	8a 30       	cpi	r24, 0x0A	; 10
     d3e:	51 f4       	brne	.+20     	; 0xd54 <menu_process+0x122>
     d40:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
     d44:	8a 30       	cpi	r24, 0x0A	; 10
     d46:	31 f4       	brne	.+12     	; 0xd54 <menu_process+0x122>
		{
			segment1.state = SEG_OFF;
     d48:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <segment1+0x4>
			segment2.state = SEG_OFF;
     d4c:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <segment2+0x4>
			dark_menu_state = MENU_PASSWORD;
     d50:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     d54:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	19 f4       	brne	.+6      	; 0xd62 <menu_process+0x130>
		{
			servo_regulation(0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     d62:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <configured_parameter>
     d66:	86 30       	cpi	r24, 0x06	; 6
     d68:	19 f4       	brne	.+6      	; 0xd70 <menu_process+0x13e>
		{
			servo_regulation(99);
     d6a:	83 e6       	ldi	r24, 0x63	; 99
     d6c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <servo_regulation>
     d70:	08 95       	ret

00000d72 <check_servo_config_menu>:
	enter_to_menu(MENU_SERVO);
	debug_msg("enter_to_menu_servo\n");
}

void check_servo_config_menu(void)
{
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
	timer_t menu_timer = mktime.ms + 20;
     d7e:	c0 90 af 04 	lds	r12, 0x04AF	; 0x8004af <mktime+0x2>
     d82:	d0 90 b0 04 	lds	r13, 0x04B0	; 0x8004b0 <mktime+0x3>
     d86:	e0 90 b1 04 	lds	r14, 0x04B1	; 0x8004b1 <mktime+0x4>
     d8a:	f0 90 b2 04 	lds	r15, 0x04B2	; 0x8004b2 <mktime+0x5>
     d8e:	84 e1       	ldi	r24, 0x14	; 20
     d90:	c8 0e       	add	r12, r24
     d92:	d1 1c       	adc	r13, r1
     d94:	e1 1c       	adc	r14, r1
     d96:	f1 1c       	adc	r15, r1
	while (menu_timer > mktime.ms)
     d98:	cd ea       	ldi	r28, 0xAD	; 173
     d9a:	d4 e0       	ldi	r29, 0x04	; 4
     d9c:	12 c0       	rjmp	.+36     	; 0xdc2 <check_servo_config_menu+0x50>
	{
		if (read_button(&button1) == 0) {
     d9e:	8b e3       	ldi	r24, 0x3B	; 59
     da0:	94 e0       	ldi	r25, 0x04	; 4
     da2:	0e 94 83 03 	call	0x706	; 0x706 <read_button>
     da6:	81 11       	cpse	r24, r1
     da8:	0c c0       	rjmp	.+24     	; 0xdc2 <check_servo_config_menu+0x50>
	}
}

static void enter_servo_config(void *pv)
{
	enter_to_menu(MENU_SERVO);
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 a1 05 	call	0xb42	; 0xb42 <enter_to_menu>
	debug_msg("enter_to_menu_servo\n");
     db0:	8c ea       	ldi	r24, 0xAC	; 172
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <check_servo_config_menu+0x62>
}

void check_servo_config_menu(void)
{
	timer_t menu_timer = mktime.ms + 20;
	while (menu_timer > mktime.ms)
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	ac 81       	ldd	r26, Y+4	; 0x04
     dc8:	bd 81       	ldd	r27, Y+5	; 0x05
     dca:	8c 15       	cp	r24, r12
     dcc:	9d 05       	cpc	r25, r13
     dce:	ae 05       	cpc	r26, r14
     dd0:	bf 05       	cpc	r27, r15
     dd2:	28 f3       	brcs	.-54     	; 0xd9e <check_servo_config_menu+0x2c>
		if (read_button(&button1) == 0) {
			enter_servo_config(NULL);
			break;
		}
	}
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	08 95       	ret

00000de2 <init_menu>:
void init_menu(void)
{
	button1.fall_callback = button_1_number;
     de2:	83 e1       	ldi	r24, 0x13	; 19
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <button1+0xc>
     dea:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <button1+0xb>
	button2.fall_callback = button_2_number;
     dee:	8f e0       	ldi	r24, 0x0F	; 15
     df0:	96 e0       	ldi	r25, 0x06	; 6
     df2:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <button2+0xc>
     df6:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <button2+0xb>
	button3.fall_callback = button_3_number;
     dfa:	8b e0       	ldi	r24, 0x0B	; 11
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <button3+0xc>
     e02:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <button3+0xb>
	button5.fall_callback = button_5_number;
     e06:	87 e0       	ldi	r24, 0x07	; 7
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <button5+0xc>
     e0e:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <button5+0xb>
	button6.fall_callback = button_6_number;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <button6+0xc>
     e1a:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <button6+0xb>
	button7.fall_callback = button_7_number;
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	95 e0       	ldi	r25, 0x05	; 5
     e22:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <button7+0xc>
     e26:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e2a:	6e e6       	ldi	r22, 0x6E	; 110
     e2c:	74 e0       	ldi	r23, 0x04	; 4
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	0e 94 2f 11 	call	0x225e	; 0x225e <mem_read_data>
     e34:	ae e6       	ldi	r26, 0x6E	; 110
     e36:	b4 e0       	ldi	r27, 0x04	; 4
     e38:	e4 e7       	ldi	r30, 0x74	; 116
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	42 e8       	ldi	r20, 0x82	; 130
     e3e:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e40:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e42:	9c 91       	ld	r25, X
     e44:	80 81       	ld	r24, Z
     e46:	89 17       	cp	r24, r25
     e48:	18 f4       	brcc	.+6      	; 0xe50 <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	8c 93       	st	X, r24
			check_error++;
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e54:	e4 17       	cp	r30, r20
     e56:	f5 07       	cpc	r31, r21
     e58:	a1 f7       	brne	.-24     	; 0xe42 <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e5a:	22 23       	and	r18, r18
     e5c:	29 f0       	breq	.+10     	; 0xe68 <init_menu+0x86>

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e5e:	6e e6       	ldi	r22, 0x6E	; 110
     e60:	74 e0       	ldi	r23, 0x04	; 4
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	0e 94 e7 10 	call	0x21ce	; 0x21ce <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e68:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <pass_len>
	memset(pass, 0, sizeof(pass));
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	e8 e6       	ldi	r30, 0x68	; 104
     e70:	f4 e0       	ldi	r31, 0x04	; 4
     e72:	df 01       	movw	r26, r30
     e74:	1d 92       	st	X+, r1
     e76:	8a 95       	dec	r24
     e78:	e9 f7       	brne	.-6      	; 0xe74 <init_menu+0x92>
	button6.fall_callback = button_6_number;
	button7.fall_callback = button_7_number;
	read_menu_parametrs();
	check_menu_parameters();
	clear_password();
	check_servo_config_menu();
     e7a:	0e 94 b9 06 	call	0xd72	; 0xd72 <check_servo_config_menu>
     e7e:	08 95       	ret

00000e80 <dark_menu_get_value>:
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e80:	87 30       	cpi	r24, 0x07	; 7
     e82:	30 f4       	brcc	.+12     	; 0xe90 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e84:	e8 2f       	mov	r30, r24
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	e2 59       	subi	r30, 0x92	; 146
     e8a:	fb 4f       	sbci	r31, 0xFB	; 251
     e8c:	80 81       	ld	r24, Z
     e8e:	08 95       	ret
	}
	return 0;
     e90:	80 e0       	ldi	r24, 0x00	; 0
}
     e92:	08 95       	ret

00000e94 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     e94:	87 ec       	ldi	r24, 0xC7	; 199
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     ea0:	8c e7       	ldi	r24, 0x7C	; 124
     ea2:	94 e0       	ldi	r25, 0x04	; 4
     ea4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <evTime_init>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <motorD>
     eae:	94 98       	cbi	0x12, 4	; 18
     eb0:	15 bc       	out	0x25, r1	; 37
     eb2:	8f 9a       	sbi	0x11, 7	; 17
     eb4:	97 9a       	sbi	0x12, 7	; 18
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	08 95       	ret

00000ebc <dcmotorpwm_deinit>:
     ebc:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <motorD>
     ec0:	15 bc       	out	0x25, r1	; 37
     ec2:	97 9a       	sbi	0x12, 7	; 18
     ec4:	94 98       	cbi	0x12, 4	; 18
     ec6:	08 95       	ret

00000ec8 <dcmotor_is_on>:
     ec8:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <motorD>
     ecc:	92 50       	subi	r25, 0x02	; 2
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	93 30       	cpi	r25, 0x03	; 3
     ed4:	10 f0       	brcs	.+4      	; 0xeda <dcmotor_is_on+0x12>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	c9 01       	movw	r24, r18
     edc:	08 95       	ret

00000ede <dcmotorpwm_stop>:
     ede:	0e 94 64 07 	call	0xec8	; 0xec8 <dcmotor_is_on>
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	99 f0       	breq	.+38     	; 0xf0c <dcmotorpwm_stop+0x2e>
     ee6:	85 ed       	ldi	r24, 0xD5	; 213
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     ef2:	15 bc       	out	0x25, r1	; 37
     ef4:	97 9a       	sbi	0x12, 7	; 18
     ef6:	94 98       	cbi	0x12, 4	; 18
     ef8:	e8 e7       	ldi	r30, 0x78	; 120
     efa:	f4 e0       	ldi	r31, 0x04	; 4
     efc:	80 81       	ld	r24, Z
     efe:	81 83       	std	Z+1, r24	; 0x01
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 83       	st	Z, r24
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <dcmotorpwm_start>:
     f0e:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <motorD>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	d9 f4       	brne	.+54     	; 0xf4c <dcmotorpwm_start+0x3e>
     f16:	94 9a       	sbi	0x12, 4	; 18
     f18:	85 b5       	in	r24, 0x25	; 37
     f1a:	80 63       	ori	r24, 0x30	; 48
     f1c:	85 bd       	out	0x25, r24	; 37
     f1e:	85 b5       	in	r24, 0x25	; 37
     f20:	80 64       	ori	r24, 0x40	; 64
     f22:	85 bd       	out	0x25, r24	; 37
     f24:	85 b5       	in	r24, 0x25	; 37
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	85 bd       	out	0x25, r24	; 37
     f2a:	e8 e7       	ldi	r30, 0x78	; 120
     f2c:	f4 e0       	ldi	r31, 0x04	; 4
     f2e:	80 81       	ld	r24, Z
     f30:	81 83       	std	Z+1, r24	; 0x01
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	80 83       	st	Z, r24
     f36:	48 ee       	ldi	r20, 0xE8	; 232
     f38:	53 e0       	ldi	r21, 0x03	; 3
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	8c e7       	ldi	r24, 0x7C	; 124
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	08 95       	ret
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	08 95       	ret

00000f52 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f52:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <motorD+0x3>
}
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	08 95       	ret

00000f5a <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f5a:	83 ee       	ldi	r24, 0xE3	; 227
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f66:	0e 94 6f 07 	call	0xede	; 0xede <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f6a:	85 e0       	ldi	r24, 0x05	; 5
     f6c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <motorD>
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	08 95       	ret

00000f76 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f76:	0e 94 64 07 	call	0xec8	; 0xec8 <dcmotor_is_on>
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <motorD>
		return 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f88:	08 95       	ret

00000f8a <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     f8a:	0e 94 64 07 	call	0xec8	; 0xec8 <dcmotor_is_on>
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	29 f0       	breq	.+10     	; 0xf9c <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <motorD>
		return 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f9c:	08 95       	ret

00000f9e <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     f9e:	cf 93       	push	r28
     fa0:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     fa2:	46 e9       	ldi	r20, 0x96	; 150
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	8a e2       	ldi	r24, 0x2A	; 42
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 07 18 	call	0x300e	; 0x300e <evTime_process_period>
     fb2:	89 2b       	or	r24, r25
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <dcmotor_process+0x1a>
     fb6:	58 c0       	rjmp	.+176    	; 0x1068 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     fb8:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <motorD>
     fbc:	93 30       	cpi	r25, 0x03	; 3
     fbe:	e9 f0       	breq	.+58     	; 0xffa <dcmotor_process+0x5c>
     fc0:	28 f4       	brcc	.+10     	; 0xfcc <dcmotor_process+0x2e>
     fc2:	91 30       	cpi	r25, 0x01	; 1
     fc4:	b9 f0       	breq	.+46     	; 0xff4 <dcmotor_process+0x56>
     fc6:	92 30       	cpi	r25, 0x02	; 2
     fc8:	41 f0       	breq	.+16     	; 0xfda <dcmotor_process+0x3c>
     fca:	4e c0       	rjmp	.+156    	; 0x1068 <dcmotor_process+0xca>
     fcc:	94 30       	cpi	r25, 0x04	; 4
     fce:	09 f4       	brne	.+2      	; 0xfd2 <dcmotor_process+0x34>
     fd0:	48 c0       	rjmp	.+144    	; 0x1062 <dcmotor_process+0xc4>
     fd2:	95 30       	cpi	r25, 0x05	; 5
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <dcmotor_process+0x3a>
     fd6:	42 c0       	rjmp	.+132    	; 0x105c <dcmotor_process+0xbe>
     fd8:	47 c0       	rjmp	.+142    	; 0x1068 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     fda:	c0 93 7b 04 	sts	0x047B, r28	; 0x80047b <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     fde:	2b ee       	ldi	r18, 0xEB	; 235
     fe0:	c2 9f       	mul	r28, r18
     fe2:	c0 01       	movw	r24, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	63 e6       	ldi	r22, 0x63	; 99
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 0b 20 	call	0x4016	; 0x4016 <__divmodhi4>
     fee:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     ff0:	63 bd       	out	0x23, r22	; 35
			break;
     ff2:	3a c0       	rjmp	.+116    	; 0x1068 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     ff4:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <motorD+0x3>
			break;
     ff8:	37 c0       	rjmp	.+110    	; 0x1068 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     ffa:	c3 33       	cpi	r28, 0x33	; 51
     ffc:	78 f4       	brcc	.+30     	; 0x101c <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     ffe:	84 e1       	ldi	r24, 0x14	; 20
    1000:	8c 0f       	add	r24, r28
    1002:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1006:	2b ee       	ldi	r18, 0xEB	; 235
    1008:	82 9f       	mul	r24, r18
    100a:	c0 01       	movw	r24, r0
    100c:	11 24       	eor	r1, r1
    100e:	63 e6       	ldi	r22, 0x63	; 99
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	0e 94 0b 20 	call	0x4016	; 0x4016 <__divmodhi4>
    1016:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
    1018:	63 bd       	out	0x23, r22	; 35
    101a:	26 c0       	rjmp	.+76     	; 0x1068 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    101c:	8d ec       	ldi	r24, 0xCD	; 205
    101e:	8c 0f       	add	r24, r28
    1020:	84 31       	cpi	r24, 0x14	; 20
    1022:	78 f4       	brcc	.+30     	; 0x1042 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    1024:	8f e0       	ldi	r24, 0x0F	; 15
    1026:	8c 0f       	add	r24, r28
    1028:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    102c:	2b ee       	ldi	r18, 0xEB	; 235
    102e:	82 9f       	mul	r24, r18
    1030:	c0 01       	movw	r24, r0
    1032:	11 24       	eor	r1, r1
    1034:	63 e6       	ldi	r22, 0x63	; 99
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	0e 94 0b 20 	call	0x4016	; 0x4016 <__divmodhi4>
    103c:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    103e:	63 bd       	out	0x23, r22	; 35
    1040:	13 c0       	rjmp	.+38     	; 0x1068 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    1042:	c0 93 7b 04 	sts	0x047B, r28	; 0x80047b <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1046:	2b ee       	ldi	r18, 0xEB	; 235
    1048:	c2 9f       	mul	r28, r18
    104a:	c0 01       	movw	r24, r0
    104c:	11 24       	eor	r1, r1
    104e:	63 e6       	ldi	r22, 0x63	; 99
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	0e 94 0b 20 	call	0x4016	; 0x4016 <__divmodhi4>
    1056:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    1058:	63 bd       	out	0x23, r22	; 35
    105a:	06 c0       	rjmp	.+12     	; 0x1068 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    105c:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    105e:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    106c:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    106e:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1070:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1072:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    1074:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    1076:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    1078:	af 9a       	sbi	0x15, 7	; 21
    107a:	08 95       	ret

0000107c <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    107c:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    107e:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1082:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    1084:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    1088:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    108a:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    108e:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    1090:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <DispD4+0x1>
    1094:	08 95       	ret

00001096 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    1096:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    1098:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    109a:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    109c:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    109e:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10a0:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10a2:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10a4:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10a6:	e0 e9       	ldi	r30, 0x90	; 144
    10a8:	f4 e0       	ldi	r31, 0x04	; 4
    10aa:	8e e8       	ldi	r24, 0x8E	; 142
    10ac:	94 e0       	ldi	r25, 0x04	; 4
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10b2:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10b4:	2a e9       	ldi	r18, 0x9A	; 154
    10b6:	34 e0       	ldi	r19, 0x04	; 4
    10b8:	33 83       	std	Z+3, r19	; 0x03
    10ba:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10bc:	a7 e8       	ldi	r26, 0x87	; 135
    10be:	b4 e0       	ldi	r27, 0x04	; 4
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	3c 93       	st	X, r19
    10c4:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10c6:	13 96       	adiw	r26, 0x03	; 3
    10c8:	9c 93       	st	X, r25
    10ca:	8e 93       	st	-X, r24
    10cc:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10ce:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10d0:	2c e8       	ldi	r18, 0x8C	; 140
    10d2:	34 e0       	ldi	r19, 0x04	; 4
    10d4:	35 83       	std	Z+5, r19	; 0x05
    10d6:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10d8:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10da:	88 e9       	ldi	r24, 0x98	; 152
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	97 83       	std	Z+7, r25	; 0x07
    10e0:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10e2:	e2 e8       	ldi	r30, 0x82	; 130
    10e4:	f4 e0       	ldi	r31, 0x04	; 4
    10e6:	31 83       	std	Z+1, r19	; 0x01
    10e8:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    10ea:	93 83       	std	Z+3, r25	; 0x03
    10ec:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    10ee:	0e 94 3e 08 	call	0x107c	; 0x107c <off_all_displays>
	clear_display();
    10f2:	0e 94 36 08 	call	0x106c	; 0x106c <clear_display>
    10f6:	08 95       	ret

000010f8 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
	if (DispD->value != displaying_value)
    10fc:	fc 01       	movw	r30, r24
    10fe:	30 81       	ld	r19, Z
    1100:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <displaying_value>
    1104:	32 17       	cp	r19, r18
    1106:	09 f4       	brne	.+2      	; 0x110a <display_set_value+0x12>
    1108:	95 c0       	rjmp	.+298    	; 0x1234 <display_set_value+0x13c>
    110a:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    110c:	0e 94 36 08 	call	0x106c	; 0x106c <clear_display>
		switch(DispD->value)
    1110:	e8 81       	ld	r30, Y
    1112:	8e 2f       	mov	r24, r30
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	8f 3f       	cpi	r24, 0xFF	; 255
    1118:	91 05       	cpc	r25, r1
    111a:	08 f0       	brcs	.+2      	; 0x111e <display_set_value+0x26>
    111c:	88 c0       	rjmp	.+272    	; 0x122e <display_set_value+0x136>
    111e:	fc 01       	movw	r30, r24
    1120:	e6 5d       	subi	r30, 0xD6	; 214
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    1128:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    112a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    112c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    112e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1130:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1132:	aa 98       	cbi	0x15, 2	; 21
			break;
    1134:	7c c0       	rjmp	.+248    	; 0x122e <display_set_value+0x136>
			case 1:
			LED_ON_B;
    1136:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1138:	dd 98       	cbi	0x1b, 5	; 27
			break;
    113a:	79 c0       	rjmp	.+242    	; 0x122e <display_set_value+0x136>
			case 2:
			LED_ON_A;
    113c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    113e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1140:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1142:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    1144:	df 98       	cbi	0x1b, 7	; 27
			break;
    1146:	73 c0       	rjmp	.+230    	; 0x122e <display_set_value+0x136>
			case 3:
			LED_ON_A;
    1148:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    114a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    114c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    114e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1150:	df 98       	cbi	0x1b, 7	; 27
			break;
    1152:	6d c0       	rjmp	.+218    	; 0x122e <display_set_value+0x136>
			case 4:
			LED_ON_F;
    1154:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1156:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    1158:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    115a:	dd 98       	cbi	0x1b, 5	; 27
			break;
    115c:	68 c0       	rjmp	.+208    	; 0x122e <display_set_value+0x136>
			case 5:
			LED_ON_A;
    115e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1160:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1162:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1164:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1166:	df 98       	cbi	0x1b, 7	; 27
			break;
    1168:	62 c0       	rjmp	.+196    	; 0x122e <display_set_value+0x136>
			case 6:
			LED_ON_A;
    116a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    116c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    116e:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1170:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1172:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1174:	de 98       	cbi	0x1b, 6	; 27
			break;
    1176:	5b c0       	rjmp	.+182    	; 0x122e <display_set_value+0x136>
			case 7:
			LED_ON_A;
    1178:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    117a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    117c:	dd 98       	cbi	0x1b, 5	; 27
			break;
    117e:	57 c0       	rjmp	.+174    	; 0x122e <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1180:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1182:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1184:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1186:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1188:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    118a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    118c:	af 98       	cbi	0x15, 7	; 21
			break;
    118e:	4f c0       	rjmp	.+158    	; 0x122e <display_set_value+0x136>
			case 9:
			LED_ON_A;
    1190:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1192:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1194:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1196:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1198:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    119a:	af 98       	cbi	0x15, 7	; 21
			break;
    119c:	48 c0       	rjmp	.+144    	; 0x122e <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    119e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11a0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11a2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11a4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11a6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11a8:	af 98       	cbi	0x15, 7	; 21
			break;
    11aa:	41 c0       	rjmp	.+130    	; 0x122e <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11ac:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ae:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11b0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11b2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11b4:	af 98       	cbi	0x15, 7	; 21
			break;
    11b6:	3b c0       	rjmp	.+118    	; 0x122e <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11b8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11ba:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11bc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11be:	aa 98       	cbi	0x15, 2	; 21
			break;
    11c0:	36 c0       	rjmp	.+108    	; 0x122e <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11c2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11c4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11c6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11c8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11ca:	af 98       	cbi	0x15, 7	; 21
			break;
    11cc:	30 c0       	rjmp	.+96     	; 0x122e <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11ce:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11d0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11d2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11d4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11d6:	af 98       	cbi	0x15, 7	; 21
			break;
    11d8:	2a c0       	rjmp	.+84     	; 0x122e <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11da:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11dc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11de:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11e0:	af 98       	cbi	0x15, 7	; 21
			break;
    11e2:	25 c0       	rjmp	.+74     	; 0x122e <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    11e4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11e6:	af 98       	cbi	0x15, 7	; 21
			break;
    11e8:	22 c0       	rjmp	.+68     	; 0x122e <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    11ea:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ec:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ee:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11f0:	af 98       	cbi	0x15, 7	; 21
			break;
    11f2:	1d c0       	rjmp	.+58     	; 0x122e <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    11f4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11f6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    11f8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11fa:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11fc:	af 98       	cbi	0x15, 7	; 21
			break;
    11fe:	17 c0       	rjmp	.+46     	; 0x122e <display_set_value+0x136>
			case 's':
			LED_ON_A;
    1200:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    1202:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1204:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1206:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1208:	af 98       	cbi	0x15, 7	; 21
			break;
    120a:	11 c0       	rjmp	.+34     	; 0x122e <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    120c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    120e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1210:	aa 98       	cbi	0x15, 2	; 21
			break;
    1212:	0d c0       	rjmp	.+26     	; 0x122e <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    1214:	af 98       	cbi	0x15, 7	; 21
			break;
    1216:	0b c0       	rjmp	.+22     	; 0x122e <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1218:	aa 98       	cbi	0x15, 2	; 21
			break;
    121a:	09 c0       	rjmp	.+18     	; 0x122e <display_set_value+0x136>
			case 253:
			LED_ON_E;
    121c:	de 98       	cbi	0x1b, 6	; 27
			break;
    121e:	07 c0       	rjmp	.+14     	; 0x122e <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1220:	df 98       	cbi	0x1b, 7	; 27
			break;
    1222:	05 c0       	rjmp	.+10     	; 0x122e <display_set_value+0x136>
			case 251:
			LED_ON_C;
    1224:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1226:	03 c0       	rjmp	.+6      	; 0x122e <display_set_value+0x136>
			case 250:
			LED_ON_B;
    1228:	ad 98       	cbi	0x15, 5	; 21
			break;
    122a:	01 c0       	rjmp	.+2      	; 0x122e <display_set_value+0x136>
			case 249:
			LED_ON_A;
    122c:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    122e:	88 81       	ld	r24, Y
    1230:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <displaying_value>
	}
	
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <on_display>:
void on_display(disp_drv *DispD)
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
	off_all_displays();
    1240:	0e 94 3e 08 	call	0x107c	; 0x107c <off_all_displays>
	display_set_value(DispD);
    1244:	ce 01       	movw	r24, r28
    1246:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	ce 38       	cpi	r28, 0x8E	; 142
    124e:	d8 07       	cpc	r29, r24
    1250:	29 f4       	brne	.+10     	; 0x125c <on_display+0x22>
	{
		LED_ON_DISP1;
    1252:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <DispD1+0x1>
    125a:	19 c0       	rjmp	.+50     	; 0x128e <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    125c:	84 e0       	ldi	r24, 0x04	; 4
    125e:	ca 39       	cpi	r28, 0x9A	; 154
    1260:	d8 07       	cpc	r29, r24
    1262:	29 f4       	brne	.+10     	; 0x126e <on_display+0x34>
	{
		LED_ON_DISP2;
    1264:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <DispD2+0x1>
    126c:	10 c0       	rjmp	.+32     	; 0x128e <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	cc 38       	cpi	r28, 0x8C	; 140
    1272:	d8 07       	cpc	r29, r24
    1274:	29 f4       	brne	.+10     	; 0x1280 <on_display+0x46>
	{
		LED_ON_DISP3;
    1276:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <DispD3+0x1>
    127e:	07 c0       	rjmp	.+14     	; 0x128e <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1280:	c8 59       	subi	r28, 0x98	; 152
    1282:	d4 40       	sbci	r29, 0x04	; 4
    1284:	21 f4       	brne	.+8      	; 0x128e <on_display+0x54>
	{
		LED_ON_DISP4;
    1286:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <DispD4+0x1>
	}
	#endif
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12a0:	c0 81       	ld	r28, Z
    12a2:	d1 81       	ldd	r29, Z+1	; 0x01
    12a4:	21 96       	adiw	r28, 0x01	; 1
    12a6:	d1 83       	std	Z+1, r29	; 0x01
    12a8:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12aa:	9e 01       	movw	r18, r28
    12ac:	ad ec       	ldi	r26, 0xCD	; 205
    12ae:	bc ec       	ldi	r27, 0xCC	; 204
    12b0:	0e 94 25 20 	call	0x404a	; 0x404a <__umulhisi3>
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	96 95       	lsr	r25
    12ba:	87 95       	ror	r24
    12bc:	96 95       	lsr	r25
    12be:	87 95       	ror	r24
    12c0:	9c 01       	movw	r18, r24
    12c2:	22 0f       	add	r18, r18
    12c4:	33 1f       	adc	r19, r19
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	82 0f       	add	r24, r18
    12d4:	93 1f       	adc	r25, r19
    12d6:	c8 17       	cp	r28, r24
    12d8:	d9 07       	cpc	r29, r25
    12da:	01 f5       	brne	.+64     	; 0x131c <display_process+0x88>
    12dc:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12de:	10 91 2f 02 	lds	r17, 0x022F	; 0x80022f <iteration>
    12e2:	14 30       	cpi	r17, 0x04	; 4
    12e4:	58 f4       	brcc	.+22     	; 0x12fc <display_process+0x68>
			on_display(disp_tab[iteration]);
    12e6:	e1 2f       	mov	r30, r17
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	e0 57       	subi	r30, 0x70	; 112
    12f0:	fb 4f       	sbci	r31, 0xFB	; 251
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	0e 94 1d 09 	call	0x123a	; 0x123a <on_display>
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <display_process+0x6c>
		else
			off_all_displays();
    12fc:	0e 94 3e 08 	call	0x107c	; 0x107c <off_all_displays>
		iteration++;
    1300:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1302:	15 30       	cpi	r17, 0x05	; 5
    1304:	19 f0       	breq	.+6      	; 0x130c <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    1306:	10 93 2f 02 	sts	0x022F, r17	; 0x80022f <iteration>
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    130c:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1310:	c0 39       	cpi	r28, 0x90	; 144
    1312:	d1 40       	sbci	r29, 0x01	; 1
    1314:	19 f4       	brne	.+6      	; 0x131c <display_process+0x88>
    1316:	f7 01       	movw	r30, r14
    1318:	11 82       	std	Z+1, r1	; 0x01
    131a:	10 82       	st	Z, r1
	}
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	08 95       	ret

00001328 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    1328:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    132a:	64 36       	cpi	r22, 0x64	; 100
    132c:	f8 f4       	brcc	.+62     	; 0x136c <disp_set_number+0x44>
	else if (number == 0)
    132e:	61 11       	cpse	r22, r1
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    1332:	a0 81       	ld	r26, Z
    1334:	b1 81       	ldd	r27, Z+1	; 0x01
    1336:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    1338:	02 80       	ldd	r0, Z+2	; 0x02
    133a:	f3 81       	ldd	r31, Z+3	; 0x03
    133c:	e0 2d       	mov	r30, r0
    133e:	10 82       	st	Z, r1
    1340:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1342:	a0 81       	ld	r26, Z
    1344:	b1 81       	ldd	r27, Z+1	; 0x01
    1346:	9d ec       	ldi	r25, 0xCD	; 205
    1348:	69 9f       	mul	r22, r25
    134a:	91 2d       	mov	r25, r1
    134c:	11 24       	eor	r1, r1
    134e:	96 95       	lsr	r25
    1350:	96 95       	lsr	r25
    1352:	96 95       	lsr	r25
    1354:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    1356:	02 80       	ldd	r0, Z+2	; 0x02
    1358:	f3 81       	ldd	r31, Z+3	; 0x03
    135a:	e0 2d       	mov	r30, r0
    135c:	89 2f       	mov	r24, r25
    135e:	88 0f       	add	r24, r24
    1360:	98 2f       	mov	r25, r24
    1362:	99 0f       	add	r25, r25
    1364:	99 0f       	add	r25, r25
    1366:	89 0f       	add	r24, r25
    1368:	68 1b       	sub	r22, r24
    136a:	60 83       	st	Z, r22
    136c:	08 95       	ret

0000136e <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    136e:	fc 01       	movw	r30, r24
    1370:	60 83       	st	Z, r22
    1372:	08 95       	ret

00001374 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	39 f0       	breq	.+14     	; 0x1386 <dip_set_value+0x12>
    1378:	18 f0       	brcs	.+6      	; 0x1380 <dip_set_value+0xc>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	39 f0       	breq	.+14     	; 0x138c <dip_set_value+0x18>
    137e:	08 95       	ret
    1380:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <motor_disp_value>
    1384:	08 95       	ret
    1386:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <servo_disp_value>
    138a:	08 95       	ret
    138c:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <servo_disp_value>
    1390:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <motor_disp_value>
    1394:	08 95       	ret

00001396 <disp_get_state>:
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <disp_get_state+0xa>
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	29 f0       	breq	.+10     	; 0x13a8 <disp_get_state+0x12>
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <disp_get_state+0x1a>
    13a0:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	08 95       	ret
    13a8:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	08 95       	ret
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <disp_disable_voltage>:
    13b6:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    13ba:	86 30       	cpi	r24, 0x06	; 6
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <disp_disable_voltage+0x10>
    13be:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <disp1_last_state>
    13c2:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
    13c6:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    13ca:	86 30       	cpi	r24, 0x06	; 6
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <disp_disable_voltage+0x20>
    13ce:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <disp2_last_state>
    13d2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
    13d6:	08 95       	ret

000013d8 <disp_set_state>:
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f0       	breq	.+40     	; 0x1404 <disp_set_state+0x2c>
    13dc:	18 f0       	brcs	.+6      	; 0x13e4 <disp_set_state+0xc>
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	09 f1       	breq	.+66     	; 0x1424 <disp_set_state+0x4c>
    13e2:	08 95       	ret
    13e4:	66 30       	cpi	r22, 0x06	; 6
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <disp_set_state+0x18>
    13e8:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    13ec:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <disp1_last_state>
    13f0:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    13f4:	86 30       	cpi	r24, 0x06	; 6
    13f6:	19 f4       	brne	.+6      	; 0x13fe <disp_set_state+0x26>
    13f8:	60 93 9c 04 	sts	0x049C, r22	; 0x80049c <disp1_last_state>
    13fc:	08 95       	ret
    13fe:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <segment1+0x4>
    1402:	08 95       	ret
    1404:	66 30       	cpi	r22, 0x06	; 6
    1406:	21 f4       	brne	.+8      	; 0x1410 <disp_set_state+0x38>
    1408:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    140c:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <disp2_last_state>
    1410:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    1414:	86 30       	cpi	r24, 0x06	; 6
    1416:	19 f4       	brne	.+6      	; 0x141e <disp_set_state+0x46>
    1418:	60 93 9d 04 	sts	0x049D, r22	; 0x80049d <disp2_last_state>
    141c:	08 95       	ret
    141e:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <segment2+0x4>
    1422:	08 95       	ret
    1424:	66 30       	cpi	r22, 0x06	; 6
    1426:	41 f4       	brne	.+16     	; 0x1438 <disp_set_state+0x60>
    1428:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    142c:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <disp1_last_state>
    1430:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    1434:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <disp2_last_state>
    1438:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    143c:	86 30       	cpi	r24, 0x06	; 6
    143e:	29 f4       	brne	.+10     	; 0x144a <disp_set_state+0x72>
    1440:	60 93 9d 04 	sts	0x049D, r22	; 0x80049d <disp2_last_state>
    1444:	60 93 9c 04 	sts	0x049C, r22	; 0x80049c <disp1_last_state>
    1448:	08 95       	ret
    144a:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <segment1+0x4>
    144e:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <segment2+0x4>
    1452:	08 95       	ret

00001454 <display_set_error>:
    1454:	95 e0       	ldi	r25, 0x05	; 5
    1456:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <segment1+0x4>
    145a:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <segment2+0x4>
    145e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <error_reason>
    1462:	08 95       	ret

00001464 <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1464:	68 ef       	ldi	r22, 0xF8	; 248
    1466:	8e e8       	ldi	r24, 0x8E	; 142
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    146e:	68 ef       	ldi	r22, 0xF8	; 248
    1470:	8a e9       	ldi	r24, 0x9A	; 154
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1478:	68 ef       	ldi	r22, 0xF8	; 248
    147a:	8c e8       	ldi	r24, 0x8C	; 140
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1482:	68 ef       	ldi	r22, 0xF8	; 248
    1484:	88 e9       	ldi	r24, 0x98	; 152
    1486:	94 e0       	ldi	r25, 0x04	; 4
    1488:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
    148c:	08 95       	ret

0000148e <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    148e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
    1492:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
    1496:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
    149a:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
    149e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <timer_disp_process.1979>
    14a2:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <timer_disp_process.1979+0x1>
    14a6:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <timer_disp_process.1979+0x2>
    14aa:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <timer_disp_process.1979+0x3>
    14ae:	48 17       	cp	r20, r24
    14b0:	59 07       	cpc	r21, r25
    14b2:	6a 07       	cpc	r22, r26
    14b4:	7b 07       	cpc	r23, r27
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <disp_process+0x2c>
    14b8:	26 c1       	rjmp	.+588    	; 0x1706 <disp_process+0x278>
	{
        
        switch(segment1.state)
    14ba:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <disp_process+0x36>
    14c2:	59 c0       	rjmp	.+178    	; 0x1576 <disp_process+0xe8>
    14c4:	30 f4       	brcc	.+12     	; 0x14d2 <disp_process+0x44>
    14c6:	88 23       	and	r24, r24
    14c8:	09 f4       	brne	.+2      	; 0x14cc <disp_process+0x3e>
    14ca:	87 c0       	rjmp	.+270    	; 0x15da <disp_process+0x14c>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	39 f1       	breq	.+78     	; 0x151e <disp_process+0x90>
    14d0:	8e c0       	rjmp	.+284    	; 0x15ee <disp_process+0x160>
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <disp_process+0x4a>
    14d6:	74 c0       	rjmp	.+232    	; 0x15c0 <disp_process+0x132>
    14d8:	48 f1       	brcs	.+82     	; 0x152c <disp_process+0x9e>
    14da:	86 30       	cpi	r24, 0x06	; 6
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <disp_process+0x52>
    14de:	87 c0       	rjmp	.+270    	; 0x15ee <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14e0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	48 ec       	ldi	r20, 0xC8	; 200
    14ea:	52 e4       	ldi	r21, 0x42	; 66
    14ec:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    14f0:	0e 94 af 19 	call	0x335e	; 0x335e <__fixsfsi>
    14f4:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <voltage+0x1>
    14f8:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <voltage>
            disp_set_number(&segment1, voltage/100);
    14fc:	9b 01       	movw	r18, r22
    14fe:	36 95       	lsr	r19
    1500:	27 95       	ror	r18
    1502:	36 95       	lsr	r19
    1504:	27 95       	ror	r18
    1506:	ab e7       	ldi	r26, 0x7B	; 123
    1508:	b4 e1       	ldi	r27, 0x14	; 20
    150a:	0e 94 25 20 	call	0x404a	; 0x404a <__umulhisi3>
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	68 2f       	mov	r22, r24
    1514:	87 e8       	ldi	r24, 0x87	; 135
    1516:	94 e0       	ldi	r25, 0x04	; 4
    1518:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
            break;
    151c:	68 c0       	rjmp	.+208    	; 0x15ee <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    151e:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <motor_disp_value>
    1522:	87 e8       	ldi	r24, 0x87	; 135
    1524:	94 e0       	ldi	r25, 0x04	; 4
    1526:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
            break;
    152a:	61 c0       	rjmp	.+194    	; 0x15ee <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    152c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	31 f0       	breq	.+12     	; 0x1540 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
			    segment2.state = SEG_VALUE;
    153a:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
                break;
    153e:	57 c0       	rjmp	.+174    	; 0x15ee <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1540:	48 51       	subi	r20, 0x18	; 24
    1542:	5c 4f       	sbci	r21, 0xFC	; 252
    1544:	6f 4f       	sbci	r22, 0xFF	; 255
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <timer_disp_process.1979>
    154c:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <timer_disp_process.1979+0x1>
    1550:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <timer_disp_process.1979+0x2>
    1554:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    1558:	83 e7       	ldi	r24, 0x73	; 115
    155a:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <DispD2>
			DispD1.value = 'a';
    155e:	81 e6       	ldi	r24, 0x61	; 97
    1560:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DispD1>
			DispD3.value = 'p';
    1564:	80 e7       	ldi	r24, 0x70	; 112
    1566:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <DispD3>
			segment1.state = SEG_VALUE;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
			segment2.state = SEG_VALUE;
    1570:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
			return;
    1574:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    1576:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	31 f0       	breq	.+12     	; 0x158a <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    1584:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
                break;
    1588:	32 c0       	rjmp	.+100    	; 0x15ee <disp_process+0x160>
            }
			timer_disp_process += 1000;
    158a:	48 51       	subi	r20, 0x18	; 24
    158c:	5c 4f       	sbci	r21, 0xFC	; 252
    158e:	6f 4f       	sbci	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <timer_disp_process.1979>
    1596:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <timer_disp_process.1979+0x1>
    159a:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <timer_disp_process.1979+0x2>
    159e:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15a2:	8c e6       	ldi	r24, 0x6C	; 108
    15a4:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <DispD2>
			DispD1.value = 'o';
    15a8:	8f e6       	ldi	r24, 0x6F	; 111
    15aa:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DispD1>
			DispD3.value = 'p';
    15ae:	80 e7       	ldi	r24, 0x70	; 112
    15b0:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <DispD3>
			segment1.state = SEG_VALUE;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <segment1+0x4>
			segment2.state = SEG_VALUE;
    15ba:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <segment2+0x4>
            break;
    15be:	17 c0       	rjmp	.+46     	; 0x15ee <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15c0:	85 e6       	ldi	r24, 0x65	; 101
    15c2:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <DispD2>
			DispD1.value = 'r';
    15c6:	82 e7       	ldi	r24, 0x72	; 114
    15c8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <DispD1>
			disp_set_number(&segment2, error_reason);
    15cc:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <error_reason>
    15d0:	82 e8       	ldi	r24, 0x82	; 130
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
            break;
    15d8:	0a c0       	rjmp	.+20     	; 0x15ee <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15da:	68 ef       	ldi	r22, 0xF8	; 248
    15dc:	8e e8       	ldi	r24, 0x8E	; 142
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    15e4:	68 ef       	ldi	r22, 0xF8	; 248
    15e6:	8a e9       	ldi	r24, 0x9A	; 154
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
            break;
        }

        switch(segment2.state)
    15ee:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	19 f1       	breq	.+70     	; 0x163c <disp_process+0x1ae>
    15f6:	48 f1       	brcs	.+82     	; 0x164a <disp_process+0x1bc>
    15f8:	86 30       	cpi	r24, 0x06	; 6
    15fa:	19 f0       	breq	.+6      	; 0x1602 <disp_process+0x174>
    15fc:	8d 30       	cpi	r24, 0x0D	; 13
    15fe:	81 f1       	breq	.+96     	; 0x1660 <disp_process+0x1d2>
    1600:	6f c0       	rjmp	.+222    	; 0x16e0 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1602:	40 91 43 02 	lds	r20, 0x0243	; 0x800243 <voltage>
    1606:	50 91 44 02 	lds	r21, 0x0244	; 0x800244 <voltage+0x1>
    160a:	9a 01       	movw	r18, r20
    160c:	36 95       	lsr	r19
    160e:	27 95       	ror	r18
    1610:	36 95       	lsr	r19
    1612:	27 95       	ror	r18
    1614:	ab e7       	ldi	r26, 0x7B	; 123
    1616:	b4 e1       	ldi	r27, 0x14	; 20
    1618:	0e 94 25 20 	call	0x404a	; 0x404a <__umulhisi3>
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	64 e6       	ldi	r22, 0x64	; 100
    1622:	68 9f       	mul	r22, r24
    1624:	90 01       	movw	r18, r0
    1626:	69 9f       	mul	r22, r25
    1628:	30 0d       	add	r19, r0
    162a:	11 24       	eor	r1, r1
    162c:	ba 01       	movw	r22, r20
    162e:	62 1b       	sub	r22, r18
    1630:	73 0b       	sbc	r23, r19
    1632:	82 e8       	ldi	r24, 0x82	; 130
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
            break;
    163a:	52 c0       	rjmp	.+164    	; 0x16e0 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    163c:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <servo_disp_value>
    1640:	82 e8       	ldi	r24, 0x82	; 130
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
            break;
    1648:	4b c0       	rjmp	.+150    	; 0x16e0 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    164a:	68 ef       	ldi	r22, 0xF8	; 248
    164c:	8c e8       	ldi	r24, 0x8C	; 140
    164e:	94 e0       	ldi	r25, 0x04	; 4
    1650:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1654:	68 ef       	ldi	r22, 0xF8	; 248
    1656:	88 e9       	ldi	r24, 0x98	; 152
    1658:	94 e0       	ldi	r25, 0x04	; 4
    165a:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
            break;
    165e:	40 c0       	rjmp	.+128    	; 0x16e0 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1660:	44 ef       	ldi	r20, 0xF4	; 244
    1662:	51 e0       	ldi	r21, 0x01	; 1
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	8e e3       	ldi	r24, 0x3E	; 62
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	0e 94 07 18 	call	0x300e	; 0x300e <evTime_process_period>
    1670:	89 2b       	or	r24, r25
    1672:	b1 f1       	breq	.+108    	; 0x16e0 <disp_process+0x252>
			{
				if (blink_state == 0)
    1674:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <blink_state>
    1678:	81 11       	cpse	r24, r1
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <disp_process+0x20a>
				{
					blink_state = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1682:	67 ef       	ldi	r22, 0xF7	; 247
    1684:	8c e8       	ldi	r24, 0x8C	; 140
    1686:	94 e0       	ldi	r25, 0x04	; 4
    1688:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    168c:	67 ef       	ldi	r22, 0xF7	; 247
    168e:	88 e9       	ldi	r24, 0x98	; 152
    1690:	94 e0       	ldi	r25, 0x04	; 4
    1692:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
    1696:	24 c0       	rjmp	.+72     	; 0x16e0 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    1698:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <blink_state>
					if (blink_cnt == 0) 
    169c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <blink_cnt>
    16a0:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <blink_cnt+0x1>
    16a4:	a0 91 3b 02 	lds	r26, 0x023B	; 0x80023b <blink_cnt+0x2>
    16a8:	b0 91 3c 02 	lds	r27, 0x023C	; 0x80023c <blink_cnt+0x3>
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	a1 05       	cpc	r26, r1
    16b0:	b1 05       	cpc	r27, r1
    16b2:	29 f4       	brne	.+10     	; 0x16be <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
						break;
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <disp_process+0x252>
					}
					blink_cnt--;
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	a1 09       	sbc	r26, r1
    16c2:	b1 09       	sbc	r27, r1
    16c4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <blink_cnt>
    16c8:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <blink_cnt+0x1>
    16cc:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <blink_cnt+0x2>
    16d0:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16d4:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <second_disp_blink_val>
    16d8:	82 e8       	ldi	r24, 0x82	; 130
    16da:	94 e0       	ldi	r25, 0x04	; 4
    16dc:	0e 94 94 09 	call	0x1328	; 0x1328 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16e0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <timer_disp_process.1979>
    16e4:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <timer_disp_process.1979+0x1>
    16e8:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <timer_disp_process.1979+0x2>
    16ec:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <timer_disp_process.1979+0x3>
    16f0:	c2 96       	adiw	r24, 0x32	; 50
    16f2:	a1 1d       	adc	r26, r1
    16f4:	b1 1d       	adc	r27, r1
    16f6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <timer_disp_process.1979>
    16fa:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <timer_disp_process.1979+0x1>
    16fe:	a0 93 36 02 	sts	0x0236, r26	; 0x800236 <timer_disp_process.1979+0x2>
    1702:	b0 93 37 02 	sts	0x0237, r27	; 0x800237 <timer_disp_process.1979+0x3>
    1706:	08 95       	ret

00001708 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    170c:	00 91 af 04 	lds	r16, 0x04AF	; 0x8004af <mktime+0x2>
    1710:	10 91 b0 04 	lds	r17, 0x04B0	; 0x8004b0 <mktime+0x3>
    1714:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <mktime+0x4>
    1718:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <mktime+0x5>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	80 0f       	add	r24, r16
    1722:	91 1f       	adc	r25, r17
    1724:	a2 1f       	adc	r26, r18
    1726:	b3 1f       	adc	r27, r19
    1728:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <animation_time>
    172c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <animation_time+0x1>
    1730:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <animation_time+0x2>
    1734:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	84 2f       	mov	r24, r20
    173c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
}
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1746:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	29 f0       	breq	.+10     	; 0x1758 <animation+0x12>
    174e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	09 f0       	breq	.+2      	; 0x1758 <animation+0x12>
    1756:	78 c0       	rjmp	.+240    	; 0x1848 <animation+0x102>
    1758:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    175c:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    1760:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    1764:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    1768:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <timer_anim.1999>
    176c:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <timer_anim.1999+0x1>
    1770:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <timer_anim.1999+0x2>
    1774:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <timer_anim.1999+0x3>
    1778:	84 17       	cp	r24, r20
    177a:	95 07       	cpc	r25, r21
    177c:	a6 07       	cpc	r26, r22
    177e:	b7 07       	cpc	r27, r23
    1780:	08 f0       	brcs	.+2      	; 0x1784 <animation+0x3e>
    1782:	62 c0       	rjmp	.+196    	; 0x1848 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1784:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
    1788:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
    178c:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
    1790:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
    1794:	81 55       	subi	r24, 0x51	; 81
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	af 4f       	sbci	r26, 0xFF	; 255
    179a:	bf 4f       	sbci	r27, 0xFF	; 255
    179c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <timer_anim.1999>
    17a0:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <timer_anim.1999+0x1>
    17a4:	a0 93 32 02 	sts	0x0232, r26	; 0x800232 <timer_anim.1999+0x2>
    17a8:	b0 93 33 02 	sts	0x0233, r27	; 0x800233 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17ac:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <segment1+0x4>
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	61 f4       	brne	.+24     	; 0x17cc <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17b4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <anim_iteration.2000>
    17b8:	8e e8       	ldi	r24, 0x8E	; 142
    17ba:	94 e0       	ldi	r25, 0x04	; 4
    17bc:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17c0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <anim_iteration.2000>
    17c4:	8a e9       	ldi	r24, 0x9A	; 154
    17c6:	94 e0       	ldi	r25, 0x04	; 4
    17c8:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17cc:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <segment2+0x4>
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	61 f4       	brne	.+24     	; 0x17ec <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17d4:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <anim_iteration2.2001>
    17d8:	8c e8       	ldi	r24, 0x8C	; 140
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17e0:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <anim_iteration2.2001>
    17e4:	88 e9       	ldi	r24, 0x98	; 152
    17e6:	94 e0       	ldi	r25, 0x04	; 4
    17e8:	0e 94 b7 09 	call	0x136e	; 0x136e <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    17ec:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    17f0:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    17f4:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    17f8:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    17fc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <animation_time>
    1800:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <animation_time+0x1>
    1804:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <animation_time+0x2>
    1808:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <animation_time+0x3>
    180c:	84 17       	cp	r24, r20
    180e:	95 07       	cpc	r25, r21
    1810:	a6 07       	cpc	r26, r22
    1812:	b7 07       	cpc	r27, r23
    1814:	28 f4       	brcc	.+10     	; 0x1820 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
			LED_ACUM_OFF;
    181e:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1820:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <anim_iteration.2000>
    1824:	9f 5f       	subi	r25, 0xFF	; 255
    1826:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <anim_iteration.2000>
		anim_iteration2--;
    182a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <anim_iteration2.2001>
    182e:	81 50       	subi	r24, 0x01	; 1
    1830:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    1834:	9f 3f       	cpi	r25, 0xFF	; 255
    1836:	19 f4       	brne	.+6      	; 0x183e <animation+0xf8>
    1838:	99 ef       	ldi	r25, 0xF9	; 249
    183a:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    183e:	88 3f       	cpi	r24, 0xF8	; 248
    1840:	19 f4       	brne	.+6      	; 0x1848 <animation+0x102>
    1842:	8e ef       	ldi	r24, 0xFE	; 254
    1844:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <anim_iteration2.2001>
    1848:	08 95       	ret

0000184a <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    184a:	e1 99       	sbic	0x1c, 1	; 28
    184c:	fe cf       	rjmp	.-4      	; 0x184a <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    184e:	9f bb       	out	0x1f, r25	; 31
    1850:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1852:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1854:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1856:	e1 9a       	sbi	0x1c, 1	; 28
    1858:	08 95       	ret

0000185a <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    185a:	e1 99       	sbic	0x1c, 1	; 28
    185c:	fe cf       	rjmp	.-4      	; 0x185a <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    185e:	9f bb       	out	0x1f, r25	; 31
    1860:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1862:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1864:	8d b3       	in	r24, 0x1d	; 29
    1866:	08 95       	ret

00001868 <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    1868:	cf 93       	push	r28
    186a:	c8 2f       	mov	r28, r24
    186c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    1870:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    187a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    187e:	8c 2f       	mov	r24, r28
    1880:	0e 94 2a 0a 	call	0x1454	; 0x1454 <display_set_error>
    1884:	0e 94 ad 07 	call	0xf5a	; 0xf5a <dcmotor_set_error>
    1888:	c1 30       	cpi	r28, 0x01	; 1
    188a:	21 f4       	brne	.+8      	; 0x1894 <set_error_state+0x2c>
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_error>
    1892:	03 c0       	rjmp	.+6      	; 0x189a <set_error_state+0x32>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_error>
    189a:	0e 94 41 17 	call	0x2e82	; 0x2e82 <system_error>
    189e:	c0 93 9e 04 	sts	0x049E, r28	; 0x80049e <led_blink>
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <error_init>:
    18a6:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_state>
    18aa:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <error_motor_last_state>
    18ae:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <error_motor_status>
    18b2:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <error_servo_status>
    18b6:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <error_servo_state>
    18ba:	89 e6       	ldi	r24, 0x69	; 105
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <evTime_off>
    18c2:	89 e5       	ldi	r24, 0x59	; 89
    18c4:	92 e0       	ldi	r25, 0x02	; 2
    18c6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <evTime_off>
    18ca:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <led_blink>
    18ce:	08 95       	ret

000018d0 <error_deinit>:
    18d0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_state>
    18d4:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <error_motor_last_state>
    18d8:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <error_motor_status>
    18dc:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <error_servo_status>
    18e0:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <error_servo_state>
    18e4:	89 e6       	ldi	r24, 0x69	; 105
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <evTime_off>
    18ec:	89 e5       	ldi	r24, 0x59	; 89
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <evTime_off>
    18f4:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <led_blink>
    18f8:	08 95       	ret

000018fa <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    18fa:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
    18fe:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
    1902:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
    1906:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
    190a:	80 53       	subi	r24, 0x30	; 48
    190c:	98 4f       	sbci	r25, 0xF8	; 248
    190e:	af 4f       	sbci	r26, 0xFF	; 255
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <error_servo_tim>
    1916:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <error_servo_tim+0x1>
    191a:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <error_servo_tim+0x2>
    191e:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <error_servo_tim+0x3>
    1922:	08 95       	ret

00001924 <error_event>:
}

void error_event(void)
{
    1924:	4f 92       	push	r4
    1926:	5f 92       	push	r5
    1928:	6f 92       	push	r6
    192a:	7f 92       	push	r7
    192c:	8f 92       	push	r8
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    193c:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    1940:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    1944:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    1948:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    194c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <error_event_timer.2076>
    1950:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <error_event_timer.2076+0x1>
    1954:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <error_event_timer.2076+0x2>
    1958:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <error_event_timer.2076+0x3>
    195c:	84 17       	cp	r24, r20
    195e:	95 07       	cpc	r25, r21
    1960:	a6 07       	cpc	r26, r22
    1962:	b7 07       	cpc	r27, r23
    1964:	08 f0       	brcs	.+2      	; 0x1968 <error_event+0x44>
    1966:	45 c2       	rjmp	.+1162   	; 0x1df2 <error_event+0x4ce>
    1968:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    196c:	80 ff       	sbrs	r24, 0
    196e:	41 c2       	rjmp	.+1154   	; 0x1df2 <error_event+0x4ce>
	{
		error_event_timer = mktime.ms + 250;
    1970:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    1974:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    1978:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    197c:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    1980:	46 50       	subi	r20, 0x06	; 6
    1982:	5f 4f       	sbci	r21, 0xFF	; 255
    1984:	6f 4f       	sbci	r22, 0xFF	; 255
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	40 93 51 02 	sts	0x0251, r20	; 0x800251 <error_event_timer.2076>
    198c:	50 93 52 02 	sts	0x0252, r21	; 0x800252 <error_event_timer.2076+0x1>
    1990:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <error_event_timer.2076+0x2>
    1994:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <error_event_timer.2076+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1998:	81 fd       	sbrc	r24, 1
    199a:	2b c2       	rjmp	.+1110   	; 0x1df2 <error_event+0x4ce>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    199c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    19a0:	4b 01       	movw	r8, r22
    19a2:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    19a4:	0e 94 a9 07 	call	0xf52	; 0xf52 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    19a8:	bc 01       	movw	r22, r24
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
    19b2:	6b 01       	movw	r12, r22
    19b4:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    19b6:	25 e9       	ldi	r18, 0x95	; 149
    19b8:	35 e6       	ldi	r19, 0x65	; 101
    19ba:	40 ed       	ldi	r20, 0xD0	; 208
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 09 1b 	call	0x3612	; 0x3612 <pow>
    19c2:	2b 01       	movw	r4, r22
    19c4:	3c 01       	movw	r6, r24
    19c6:	a7 01       	movw	r20, r14
    19c8:	96 01       	movw	r18, r12
    19ca:	c5 01       	movw	r24, r10
    19cc:	b4 01       	movw	r22, r8
    19ce:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	48 ec       	ldi	r20, 0xC8	; 200
    19d8:	52 e4       	ldi	r21, 0x42	; 66
    19da:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    19de:	4b 01       	movw	r8, r22
    19e0:	5c 01       	movw	r10, r24
    19e2:	23 e3       	ldi	r18, 0x33	; 51
    19e4:	33 e3       	ldi	r19, 0x33	; 51
    19e6:	43 e6       	ldi	r20, 0x63	; 99
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	c7 01       	movw	r24, r14
    19ec:	b6 01       	movw	r22, r12
    19ee:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	48 ec       	ldi	r20, 0xC8	; 200
    19f8:	52 e4       	ldi	r21, 0x42	; 66
    19fa:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	c5 01       	movw	r24, r10
    1a04:	b4 01       	movw	r22, r8
    1a06:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__subsf3>
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e4       	ldi	r20, 0x40	; 64
    1a10:	50 e4       	ldi	r21, 0x40	; 64
    1a12:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    1a16:	4b 01       	movw	r8, r22
    1a18:	5c 01       	movw	r10, r24
    1a1a:	28 e5       	ldi	r18, 0x58	; 88
    1a1c:	39 e3       	ldi	r19, 0x39	; 57
    1a1e:	44 e3       	ldi	r20, 0x34	; 52
    1a20:	5c e3       	ldi	r21, 0x3C	; 60
    1a22:	c3 01       	movw	r24, r6
    1a24:	b2 01       	movw	r22, r4
    1a26:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	c5 01       	movw	r24, r10
    1a30:	b4 01       	movw	r22, r8
    1a32:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    1a36:	4b 01       	movw	r8, r22
    1a38:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a40:	68 2f       	mov	r22, r24
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	62 53       	subi	r22, 0x32	; 50
    1a46:	71 09       	sbc	r23, r1
    1a48:	07 2e       	mov	r0, r23
    1a4a:	00 0c       	add	r0, r0
    1a4c:	88 0b       	sbc	r24, r24
    1a4e:	99 0b       	sbc	r25, r25
    1a50:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__floatsisf>
    1a54:	a7 01       	movw	r20, r14
    1a56:	96 01       	movw	r18, r12
    1a58:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	48 ec       	ldi	r20, 0xC8	; 200
    1a62:	53 e4       	ldi	r21, 0x43	; 67
    1a64:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    1a68:	a5 01       	movw	r20, r10
    1a6a:	94 01       	movw	r18, r8
    1a6c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    1a70:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <motor_error_value>
    1a74:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <motor_error_value+0x1>
    1a78:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <motor_error_value+0x2>
    1a7c:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 92 10 	call	0x2124	; 0x2124 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1a86:	42 e0       	ldi	r20, 0x02	; 2
    1a88:	5b e2       	ldi	r21, 0x2B	; 43
    1a8a:	67 e0       	ldi	r22, 0x07	; 7
    1a8c:	7d e3       	ldi	r23, 0x3D	; 61
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 ab 10 	call	0x2156	; 0x2156 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1a94:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <motor_error_value>
    1a98:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <motor_error_value+0x1>
    1a9c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <motor_error_value+0x2>
    1aa0:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <motor_error_value+0x3>
    1aa4:	0e 94 97 1a 	call	0x352e	; 0x352e <__gesf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	44 f4       	brge	.+16     	; 0x1abc <error_event+0x198>
    1aac:	0e 94 64 07 	call	0xec8	; 0xec8 <dcmotor_is_on>
    1ab0:	89 2b       	or	r24, r25
    1ab2:	21 f0       	breq	.+8      	; 0x1abc <error_event+0x198>
		{
			error_motor_status = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <error_motor_status>
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1abc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	d2 c0       	rjmp	.+420    	; 0x1c6e <error_event+0x34a>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1aca:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <error_motor_status>
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <error_event+0x1b0>
    1ad2:	88 c0       	rjmp	.+272    	; 0x1be4 <error_event+0x2c0>
			{
				switch(error_motor_state)
    1ad4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <error_motor_state>
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	09 f4       	brne	.+2      	; 0x1ade <error_event+0x1ba>
    1adc:	60 c0       	rjmp	.+192    	; 0x1b9e <error_event+0x27a>
    1ade:	28 f4       	brcc	.+10     	; 0x1aea <error_event+0x1c6>
    1ae0:	88 23       	and	r24, r24
    1ae2:	51 f0       	breq	.+20     	; 0x1af8 <error_event+0x1d4>
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	69 f1       	breq	.+90     	; 0x1b42 <error_event+0x21e>
    1ae8:	c2 c0       	rjmp	.+388    	; 0x1c6e <error_event+0x34a>
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <error_event+0x1cc>
    1aee:	62 c0       	rjmp	.+196    	; 0x1bb4 <error_event+0x290>
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <error_event+0x1d2>
    1af4:	63 c0       	rjmp	.+198    	; 0x1bbc <error_event+0x298>
    1af6:	bb c0       	rjmp	.+374    	; 0x1c6e <error_event+0x34a>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1afe:	0e 94 a9 07 	call	0xf52	; 0xf52 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b02:	2e e1       	ldi	r18, 0x1E	; 30
    1b04:	ac 01       	movw	r20, r24
    1b06:	24 9f       	mul	r18, r20
    1b08:	c0 01       	movw	r24, r0
    1b0a:	25 9f       	mul	r18, r21
    1b0c:	90 0d       	add	r25, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	48 e8       	ldi	r20, 0x88	; 136
    1b12:	53 e1       	ldi	r21, 0x13	; 19
    1b14:	7a 01       	movw	r14, r20
    1b16:	e8 1a       	sub	r14, r24
    1b18:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b1a:	ff 92       	push	r15
    1b1c:	ef 92       	push	r14
    1b1e:	82 ef       	ldi	r24, 0xF2	; 242
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9f 93       	push	r25
    1b24:	8f 93       	push	r24
    1b26:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b2a:	a7 01       	movw	r20, r14
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	89 e6       	ldi	r24, 0x69	; 105
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
					break;
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	96 c0       	rjmp	.+300    	; 0x1c6e <error_event+0x34a>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b42:	89 e6       	ldi	r24, 0x69	; 105
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1b4a:	89 2b       	or	r24, r25
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <error_event+0x22c>
    1b4e:	8f c0       	rjmp	.+286    	; 0x1c6e <error_event+0x34a>
						{
							dcmotor_set_try();
    1b50:	0e 94 bb 07 	call	0xf76	; 0xf76 <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b54:	0e 94 a9 07 	call	0xf52	; 0xf52 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b58:	2e e1       	ldi	r18, 0x1E	; 30
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	24 9f       	mul	r18, r20
    1b5e:	c0 01       	movw	r24, r0
    1b60:	25 9f       	mul	r18, r21
    1b62:	90 0d       	add	r25, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	48 e8       	ldi	r20, 0x88	; 136
    1b68:	53 e1       	ldi	r21, 0x13	; 19
    1b6a:	7a 01       	movw	r14, r20
    1b6c:	e8 1a       	sub	r14, r24
    1b6e:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b70:	ff 92       	push	r15
    1b72:	ef 92       	push	r14
    1b74:	81 e1       	ldi	r24, 0x11	; 17
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9f 93       	push	r25
    1b7a:	8f 93       	push	r24
    1b7c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b80:	a7 01       	movw	r20, r14
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	89 e6       	ldi	r24, 0x69	; 105
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	68 c0       	rjmp	.+208    	; 0x1c6e <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1b9e:	89 e6       	ldi	r24, 0x69	; 105
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <error_event+0x288>
    1baa:	61 c0       	rjmp	.+194    	; 0x1c6e <error_event+0x34a>
						{
							error_motor_state = ERR_M_ERROR;
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
    1bb2:	5d c0       	rjmp	.+186    	; 0x1c6e <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_error_state>
					break;
    1bba:	59 c0       	rjmp	.+178    	; 0x1c6e <error_event+0x34a>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1bbc:	89 e6       	ldi	r24, 0x69	; 105
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1bc4:	89 2b       	or	r24, r25
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <error_event+0x2a6>
    1bc8:	52 c0       	rjmp	.+164    	; 0x1c6e <error_event+0x34a>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bca:	40 ed       	ldi	r20, 0xD0	; 208
    1bcc:	57 e0       	ldi	r21, 0x07	; 7
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	89 e6       	ldi	r24, 0x69	; 105
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
    1bd6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
							error_motor_state = error_motor_last_state;
    1bda:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <error_motor_last_state>
    1bde:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
    1be2:	45 c0       	rjmp	.+138    	; 0x1c6e <error_event+0x34a>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1be4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <error_motor_state>
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	f1 f0       	breq	.+60     	; 0x1c28 <error_event+0x304>
    1bec:	18 f4       	brcc	.+6      	; 0x1bf4 <error_event+0x2d0>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <error_event+0x2da>
    1bf2:	3d c0       	rjmp	.+122    	; 0x1c6e <error_event+0x34a>
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	79 f1       	breq	.+94     	; 0x1c56 <error_event+0x332>
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	89 f1       	breq	.+98     	; 0x1c5e <error_event+0x33a>
    1bfc:	38 c0       	rjmp	.+112    	; 0x1c6e <error_event+0x34a>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1bfe:	89 e6       	ldi	r24, 0x69	; 105
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1c06:	89 2b       	or	r24, r25
    1c08:	91 f1       	breq	.+100    	; 0x1c6e <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c0a:	40 ed       	ldi	r20, 0xD0	; 208
    1c0c:	57 e0       	ldi	r21, 0x07	; 7
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	89 e6       	ldi	r24, 0x69	; 105
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <error_motor_last_state>
    1c26:	23 c0       	rjmp	.+70     	; 0x1c6e <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c28:	89 e6       	ldi	r24, 0x69	; 105
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1c30:	89 2b       	or	r24, r25
    1c32:	e9 f0       	breq	.+58     	; 0x1c6e <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c34:	40 ed       	ldi	r20, 0xD0	; 208
    1c36:	57 e0       	ldi	r21, 0x07	; 7
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	89 e6       	ldi	r24, 0x69	; 105
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
						dcmotor_set_normal_state();
    1c44:	0e 94 c5 07 	call	0xf8a	; 0xf8a <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c48:	84 e0       	ldi	r24, 0x04	; 4
    1c4a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <error_motor_last_state>
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_error_state>
					break;
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <error_event+0x34a>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c5e:	89 e6       	ldi	r24, 0x69	; 105
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1c66:	89 2b       	or	r24, r25
    1c68:	11 f0       	breq	.+4      	; 0x1c6e <error_event+0x34a>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1c6a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
    1c74:	81 11       	cpse	r24, r1
    1c76:	bd c0       	rjmp	.+378    	; 0x1df2 <error_event+0x4ce>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <servo_error_value+0x1>
    1c84:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0e 94 92 10 	call	0x2124	; 0x2124 <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1c8e:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <servo_error_value>
    1c92:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <servo_error_value+0x1>
    1c96:	28 17       	cp	r18, r24
    1c98:	39 07       	cpc	r19, r25
    1c9a:	20 f5       	brcc	.+72     	; 0x1ce4 <error_event+0x3c0>
    1c9c:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    1ca0:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    1ca4:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    1ca8:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    1cac:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <error_servo_tim>
    1cb0:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <error_servo_tim+0x1>
    1cb4:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <error_servo_tim+0x2>
    1cb8:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <error_servo_tim+0x3>
    1cbc:	84 17       	cp	r24, r20
    1cbe:	95 07       	cpc	r25, r21
    1cc0:	a6 07       	cpc	r26, r22
    1cc2:	b7 07       	cpc	r27, r23
    1cc4:	78 f4       	brcc	.+30     	; 0x1ce4 <error_event+0x3c0>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1ccc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <error_servo_state>
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	51 f1       	breq	.+84     	; 0x1d28 <error_event+0x404>
    1cd4:	a8 f0       	brcs	.+42     	; 0x1d00 <error_event+0x3dc>
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <error_event+0x3b8>
    1cda:	4b c0       	rjmp	.+150    	; 0x1d72 <error_event+0x44e>
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <error_event+0x3be>
    1ce0:	51 c0       	rjmp	.+162    	; 0x1d84 <error_event+0x460>
    1ce2:	87 c0       	rjmp	.+270    	; 0x1df2 <error_event+0x4ce>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1ce4:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1ce8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <error_servo_state>
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <error_event+0x3ce>
    1cf0:	66 c0       	rjmp	.+204    	; 0x1dbe <error_event+0x49a>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <error_event+0x3d4>
    1cf6:	7a c0       	rjmp	.+244    	; 0x1dec <error_event+0x4c8>
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <error_event+0x3da>
    1cfc:	7a c0       	rjmp	.+244    	; 0x1df2 <error_event+0x4ce>
    1cfe:	46 c0       	rjmp	.+140    	; 0x1d8c <error_event+0x468>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1d06:	85 e3       	ldi	r24, 0x35	; 53
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	9f 93       	push	r25
    1d0c:	8f 93       	push	r24
    1d0e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1d12:	4c ed       	ldi	r20, 0xDC	; 220
    1d14:	55 e0       	ldi	r21, 0x05	; 5
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	89 e5       	ldi	r24, 0x59	; 89
    1d1c:	92 e0       	ldi	r25, 0x02	; 2
    1d1e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
					break;
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	65 c0       	rjmp	.+202    	; 0x1df2 <error_event+0x4ce>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d28:	89 e5       	ldi	r24, 0x59	; 89
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1d30:	89 2b       	or	r24, r25
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <error_event+0x412>
    1d34:	5e c0       	rjmp	.+188    	; 0x1df2 <error_event+0x4ce>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1d36:	0e 94 5f 12 	call	0x24be	; 0x24be <servo_get_try_cnt>
    1d3a:	04 97       	sbiw	r24, 0x04	; 4
    1d3c:	24 f0       	brlt	.+8      	; 0x1d46 <error_event+0x422>
							{
								error_servo_state = ERR_S_ERROR;
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <error_servo_state>
								break;
    1d44:	56 c0       	rjmp	.+172    	; 0x1df2 <error_event+0x4ce>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1d46:	40 ed       	ldi	r20, 0xD0	; 208
    1d48:	57 e0       	ldi	r21, 0x07	; 7
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	89 e5       	ldi	r24, 0x59	; 89
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
							error_servo_state = ERR_S_TRY;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <error_servo_state>
							servo_enable_try();
    1d5c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1d60:	80 e5       	ldi	r24, 0x50	; 80
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	9f 93       	push	r25
    1d66:	8f 93       	push	r24
    1d68:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <error_event+0x4ce>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1d72:	89 e5       	ldi	r24, 0x59	; 89
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1d7a:	89 2b       	or	r24, r25
    1d7c:	d1 f1       	breq	.+116    	; 0x1df2 <error_event+0x4ce>
						{
							error_servo_state = ERR_S_OK;
    1d7e:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <error_servo_state>
    1d82:	37 c0       	rjmp	.+110    	; 0x1df2 <error_event+0x4ce>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_error_state>
					break;
    1d8a:	33 c0       	rjmp	.+102    	; 0x1df2 <error_event+0x4ce>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1d8c:	89 e5       	ldi	r24, 0x59	; 89
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1d94:	89 2b       	or	r24, r25
    1d96:	69 f1       	breq	.+90     	; 0x1df2 <error_event+0x4ce>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1d98:	40 ed       	ldi	r20, 0xD0	; 208
    1d9a:	57 e0       	ldi	r21, 0x07	; 7
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	89 e5       	ldi	r24, 0x59	; 89
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
						error_servo_state = ERR_M_OK;
    1da8:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dac:	8a e6       	ldi	r24, 0x6A	; 106
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	9f 93       	push	r25
    1db2:	8f 93       	push	r24
    1db4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	1a c0       	rjmp	.+52     	; 0x1df2 <error_event+0x4ce>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1dbe:	89 e5       	ldi	r24, 0x59	; 89
    1dc0:	92 e0       	ldi	r25, 0x02	; 2
    1dc2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    1dc6:	89 2b       	or	r24, r25
    1dc8:	a1 f0       	breq	.+40     	; 0x1df2 <error_event+0x4ce>
					{
						error_servo_state = ERR_S_OK;
    1dca:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dce:	8a e6       	ldi	r24, 0x6A	; 106
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	9f 93       	push	r25
    1dd4:	8f 93       	push	r24
    1dd6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1dda:	6c ea       	ldi	r22, 0xAC	; 172
    1ddc:	7d e0       	ldi	r23, 0x0D	; 13
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <servo_try_reset_timeout>
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <error_event+0x4ce>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	9f 90       	pop	r9
    1e00:	8f 90       	pop	r8
    1e02:	7f 90       	pop	r7
    1e04:	6f 90       	pop	r6
    1e06:	5f 90       	pop	r5
    1e08:	4f 90       	pop	r4
    1e0a:	08 95       	ret

00001e0c <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1e0c:	4e e5       	ldi	r20, 0x5E	; 94
    1e0e:	51 e0       	ldi	r21, 0x01	; 1
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	8c e4       	ldi	r24, 0x4C	; 76
    1e16:	92 e0       	ldi	r25, 0x02	; 2
    1e18:	0e 94 07 18 	call	0x300e	; 0x300e <evTime_process_period>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	09 f1       	breq	.+66     	; 0x1e62 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e20:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <led_blink>
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	71 f4       	brne	.+28     	; 0x1e44 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e28:	92 b3       	in	r25, 0x12	; 18
    1e2a:	80 e1       	ldi	r24, 0x10	; 16
    1e2c:	89 27       	eor	r24, r25
    1e2e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e30:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    1e34:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    1e38:	90 62       	ori	r25, 0x20	; 32
    1e3a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    1e3e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    1e42:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	69 f4       	brne	.+26     	; 0x1e62 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1e48:	92 b3       	in	r25, 0x12	; 18
    1e4a:	80 e4       	ldi	r24, 0x40	; 64
    1e4c:	89 27       	eor	r24, r25
    1e4e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e50:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    1e54:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    1e58:	90 62       	ori	r25, 0x20	; 32
    1e5a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    1e5e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    1e62:	08 95       	ret

00001e64 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1e64:	fc 01       	movw	r30, r24
    1e66:	20 81       	ld	r18, Z
    1e68:	31 81       	ldd	r19, Z+1	; 0x01
    1e6a:	62 30       	cpi	r22, 0x02	; 2
    1e6c:	58 f0       	brcs	.+22     	; 0x1e84 <filtered_value+0x20>
    1e6e:	32 96       	adiw	r30, 0x02	; 2
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	41 91       	ld	r20, Z+
    1e74:	51 91       	ld	r21, Z+
    1e76:	24 0f       	add	r18, r20
    1e78:	35 1f       	adc	r19, r21
    1e7a:	36 95       	lsr	r19
    1e7c:	27 95       	ror	r18
    1e7e:	9f 5f       	subi	r25, 0xFF	; 255
    1e80:	69 13       	cpse	r22, r25
    1e82:	f7 cf       	rjmp	.-18     	; 0x1e72 <filtered_value+0xe>
    1e84:	c9 01       	movw	r24, r18
    1e86:	08 95       	ret

00001e88 <init_measure>:
    1e88:	e4 eb       	ldi	r30, 0xB4	; 180
    1e8a:	f2 e0       	ldi	r31, 0x02	; 2
    1e8c:	2c ed       	ldi	r18, 0xDC	; 220
    1e8e:	32 e0       	ldi	r19, 0x02	; 2
    1e90:	81 ef       	ldi	r24, 0xF1	; 241
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	81 93       	st	Z+, r24
    1e96:	91 93       	st	Z+, r25
    1e98:	2e 17       	cp	r18, r30
    1e9a:	3f 07       	cpc	r19, r31
    1e9c:	d9 f7       	brne	.-10     	; 0x1e94 <init_measure+0xc>
    1e9e:	e3 e9       	ldi	r30, 0x93	; 147
    1ea0:	f2 e0       	ldi	r31, 0x02	; 2
    1ea2:	81 eb       	ldi	r24, 0xB1	; 177
    1ea4:	92 e0       	ldi	r25, 0x02	; 2
    1ea6:	11 92       	st	Z+, r1
    1ea8:	11 92       	st	Z+, r1
    1eaa:	8e 17       	cp	r24, r30
    1eac:	9f 07       	cpc	r25, r31
    1eae:	d9 f7       	brne	.-10     	; 0x1ea6 <init_measure+0x1e>
    1eb0:	eb e7       	ldi	r30, 0x7B	; 123
    1eb2:	f2 e0       	ldi	r31, 0x02	; 2
    1eb4:	8f e8       	ldi	r24, 0x8F	; 143
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	11 92       	st	Z+, r1
    1eba:	11 92       	st	Z+, r1
    1ebc:	8e 17       	cp	r24, r30
    1ebe:	9f 07       	cpc	r25, r31
    1ec0:	d9 f7       	brne	.-10     	; 0x1eb8 <init_measure+0x30>
    1ec2:	08 95       	ret

00001ec4 <measure_process>:
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    1ed4:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    1ed8:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    1edc:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    1ee0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <measure_timer>
    1ee4:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <measure_timer+0x1>
    1ee8:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <measure_timer+0x2>
    1eec:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <measure_timer+0x3>
    1ef0:	84 17       	cp	r24, r20
    1ef2:	95 07       	cpc	r25, r21
    1ef4:	a6 07       	cpc	r26, r22
    1ef6:	b7 07       	cpc	r27, r23
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <measure_process+0x38>
    1efa:	d1 c0       	rjmp	.+418    	; 0x209e <measure_process+0x1da>
    1efc:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
    1f00:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
    1f04:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
    1f08:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
    1f0c:	44 96       	adiw	r24, 0x14	; 20
    1f0e:	a1 1d       	adc	r26, r1
    1f10:	b1 1d       	adc	r27, r1
    1f12:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <measure_timer>
    1f16:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <measure_timer+0x1>
    1f1a:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <measure_timer+0x2>
    1f1e:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <measure_timer+0x3>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1f28:	ec 01       	movw	r28, r24
    1f2a:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <motor_filter_value>
    1f2e:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <motor_filter_value+0x1>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
    1f3a:	21 e7       	ldi	r18, 0x71	; 113
    1f3c:	3d e3       	ldi	r19, 0x3D	; 61
    1f3e:	4a e8       	ldi	r20, 0x8A	; 138
    1f40:	5e e3       	ldi	r21, 0x3E	; 62
    1f42:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    1f46:	6b 01       	movw	r12, r22
    1f48:	7c 01       	movw	r14, r24
    1f4a:	be 01       	movw	r22, r28
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	c7 01       	movw	r24, r14
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    1f60:	0e 94 b6 19 	call	0x336c	; 0x336c <__fixunssfsi>
    1f64:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <accum_adc+0x1>
    1f68:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <accum_adc>
    1f6c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <iteration_adc_accum_table>
    1f70:	e2 2f       	mov	r30, r18
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	ec 54       	subi	r30, 0x4C	; 76
    1f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7c:	71 83       	std	Z+1, r23	; 0x01
    1f7e:	60 83       	st	Z, r22
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	82 0f       	add	r24, r18
    1f84:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <iteration_adc_accum_table>
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1f8e:	80 32       	cpi	r24, 0x20	; 32
    1f90:	91 05       	cpc	r25, r1
    1f92:	30 f0       	brcs	.+12     	; 0x1fa0 <measure_process+0xdc>
    1f94:	4f 97       	sbiw	r24, 0x1f	; 31
    1f96:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <motor_adc+0x1>
    1f9a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <motor_adc>
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <measure_process+0xe4>
    1fa0:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <motor_adc+0x1>
    1fa4:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <motor_adc>
    1fa8:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <iteration_adc_motor_table>
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	ed 56       	subi	r30, 0x6D	; 109
    1fb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <motor_adc>
    1fba:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <motor_adc+0x1>
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1fc8:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <s_o_t_adc+0x1>
    1fcc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <s_o_t_adc>
    1fd0:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <calibration_value>
    1fd4:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <calibration_value+0x1>
    1fd8:	21 15       	cp	r18, r1
    1fda:	31 05       	cpc	r19, r1
    1fdc:	71 f0       	breq	.+28     	; 0x1ffa <measure_process+0x136>
    1fde:	28 17       	cp	r18, r24
    1fe0:	39 07       	cpc	r19, r25
    1fe2:	28 f4       	brcc	.+10     	; 0x1fee <measure_process+0x12a>
    1fe4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <s_o_t_adc+0x1>
    1fe8:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <s_o_t_adc>
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <measure_process+0x136>
    1fee:	28 1b       	sub	r18, r24
    1ff0:	39 0b       	sbc	r19, r25
    1ff2:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <s_o_t_adc+0x1>
    1ff6:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <s_o_t_adc>
    1ffa:	c0 91 7a 02 	lds	r28, 0x027A	; 0x80027a <s_o_t_iteration_adc_table>
    1ffe:	ec 2f       	mov	r30, r28
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	e5 58       	subi	r30, 0x85	; 133
    2008:	fd 4f       	sbci	r31, 0xFD	; 253
    200a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <s_o_t_adc>
    200e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <s_o_t_adc+0x1>
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	d0 91 b3 02 	lds	r29, 0x02B3	; 0x8002b3 <iteration_adc_motor_table>
    201a:	df 5f       	subi	r29, 0xFF	; 255
    201c:	d0 93 b3 02 	sts	0x02B3, r29	; 0x8002b3 <iteration_adc_motor_table>
    2020:	cf 5f       	subi	r28, 0xFF	; 255
    2022:	c0 93 7a 02 	sts	0x027A, r28	; 0x80027a <s_o_t_iteration_adc_table>
    2026:	64 e1       	ldi	r22, 0x14	; 20
    2028:	84 eb       	ldi	r24, 0xB4	; 180
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <filtered_value>
    2030:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <filtered_accum_adc_val+0x1>
    2034:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <filtered_accum_adc_val>
    2038:	6f e0       	ldi	r22, 0x0F	; 15
    203a:	83 e9       	ldi	r24, 0x93	; 147
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <filtered_value>
    2042:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <motor_filter_value+0x1>
    2046:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <motor_filter_value>
    204a:	6a e0       	ldi	r22, 0x0A	; 10
    204c:	8b e7       	ldi	r24, 0x7B	; 123
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <filtered_value>
    2054:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <s_o_t_filter_value+0x1>
    2058:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <s_o_t_filter_value>
    205c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <debug_msg_counter>
    2060:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <debug_msg_counter+0x1>
    2064:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <debug_msg_counter+0x2>
    2068:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <debug_msg_counter+0x3>
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	a1 1d       	adc	r26, r1
    2070:	b1 1d       	adc	r27, r1
    2072:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <debug_msg_counter>
    2076:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <debug_msg_counter+0x1>
    207a:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <debug_msg_counter+0x2>
    207e:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <debug_msg_counter+0x3>
    2082:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <iteration_adc_accum_table>
    2086:	84 31       	cpi	r24, 0x14	; 20
    2088:	11 f4       	brne	.+4      	; 0x208e <measure_process+0x1ca>
    208a:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <iteration_adc_accum_table>
    208e:	ca 30       	cpi	r28, 0x0A	; 10
    2090:	11 f4       	brne	.+4      	; 0x2096 <measure_process+0x1d2>
    2092:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <s_o_t_iteration_adc_table>
    2096:	df 30       	cpi	r29, 0x0F	; 15
    2098:	11 f4       	brne	.+4      	; 0x209e <measure_process+0x1da>
    209a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <iteration_adc_motor_table>
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <measure_get_servo_calibration>:
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	c0 90 af 04 	lds	r12, 0x04AF	; 0x8004af <mktime+0x2>
    20bc:	d0 90 b0 04 	lds	r13, 0x04B0	; 0x8004b0 <mktime+0x3>
    20c0:	e0 90 b1 04 	lds	r14, 0x04B1	; 0x8004b1 <mktime+0x4>
    20c4:	f0 90 b2 04 	lds	r15, 0x04B2	; 0x8004b2 <mktime+0x5>
    20c8:	8c ed       	ldi	r24, 0xDC	; 220
    20ca:	c8 0e       	add	r12, r24
    20cc:	85 e0       	ldi	r24, 0x05	; 5
    20ce:	d8 1e       	adc	r13, r24
    20d0:	e1 1c       	adc	r14, r1
    20d2:	f1 1c       	adc	r15, r1
    20d4:	cd ea       	ldi	r28, 0xAD	; 173
    20d6:	d4 e0       	ldi	r29, 0x04	; 4
    20d8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <measure_process>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	ac 81       	ldd	r26, Y+4	; 0x04
    20e2:	bd 81       	ldd	r27, Y+5	; 0x05
    20e4:	c8 16       	cp	r12, r24
    20e6:	d9 06       	cpc	r13, r25
    20e8:	ea 06       	cpc	r14, r26
    20ea:	fb 06       	cpc	r15, r27
    20ec:	a8 f7       	brcc	.-22     	; 0x20d8 <measure_get_servo_calibration+0x2c>
    20ee:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <s_o_t_filter_value>
    20f2:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <s_o_t_filter_value+0x1>
    20f6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <calibration_value>
    20fa:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <calibration_value+0x1>
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	83 e8       	ldi	r24, 0x83	; 131
    2104:	91 e0       	ldi	r25, 0x01	; 1
    2106:	9f 93       	push	r25
    2108:	8f 93       	push	r24
    210a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	ff 90       	pop	r15
    211c:	ef 90       	pop	r14
    211e:	df 90       	pop	r13
    2120:	cf 90       	pop	r12
    2122:	08 95       	ret

00002124 <measure_get_filtered_value>:
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	18 f4       	brcc	.+6      	; 0x212e <measure_get_filtered_value+0xa>
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	40 f0       	brcs	.+16     	; 0x213c <measure_get_filtered_value+0x18>
    212c:	0c c0       	rjmp	.+24     	; 0x2146 <measure_get_filtered_value+0x22>
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	79 f4       	brne	.+30     	; 0x2150 <measure_get_filtered_value+0x2c>
    2132:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <filtered_accum_adc_val>
    2136:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <filtered_accum_adc_val+0x1>
    213a:	08 95       	ret
    213c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <motor_filter_value>
    2140:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <motor_filter_value+0x1>
    2144:	08 95       	ret
    2146:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <s_o_t_filter_value>
    214a:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <s_o_t_filter_value+0x1>
    214e:	08 95       	ret
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	08 95       	ret

00002156 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	6a 01       	movw	r12, r20
    2160:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    2162:	83 30       	cpi	r24, 0x03	; 3
    2164:	18 f4       	brcc	.+6      	; 0x216c <measure_get_current+0x16>
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	50 f0       	brcs	.+20     	; 0x217e <measure_get_current+0x28>
    216a:	10 c0       	rjmp	.+32     	; 0x218c <measure_get_current+0x36>
    216c:	83 30       	cpi	r24, 0x03	; 3
    216e:	a9 f4       	brne	.+42     	; 0x219a <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    2170:	60 91 dc 02 	lds	r22, 0x02DC	; 0x8002dc <filtered_accum_adc_val>
    2174:	70 91 dd 02 	lds	r23, 0x02DD	; 0x8002dd <filtered_accum_adc_val+0x1>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
		break;
    217c:	11 c0       	rjmp	.+34     	; 0x21a0 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    217e:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <motor_filter_value>
    2182:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <motor_filter_value+0x1>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
		break;
    218a:	0a c0       	rjmp	.+20     	; 0x21a0 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    218c:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <s_o_t_filter_value>
    2190:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <s_o_t_filter_value+0x1>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    21a0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5a e3       	ldi	r21, 0x3A	; 58
    21ac:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 ea       	ldi	r20, 0xA0	; 160
    21b6:	50 e4       	ldi	r21, 0x40	; 64
    21b8:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    21bc:	a7 01       	movw	r20, r14
    21be:	96 01       	movw	r18, r12
    21c0:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	08 95       	ret

000021ce <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    21da:	82 30       	cpi	r24, 0x02	; 2
    21dc:	59 f0       	breq	.+22     	; 0x21f4 <mem_save_data+0x26>
    21de:	28 f4       	brcc	.+10     	; 0x21ea <mem_save_data+0x1c>
    21e0:	88 23       	and	r24, r24
    21e2:	91 f0       	breq	.+36     	; 0x2208 <mem_save_data+0x3a>
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	51 f1       	breq	.+84     	; 0x223c <mem_save_data+0x6e>
    21e8:	34 c0       	rjmp	.+104    	; 0x2252 <mem_save_data+0x84>
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	51 f1       	breq	.+84     	; 0x2242 <mem_save_data+0x74>
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	21 f0       	breq	.+8      	; 0x21fa <mem_save_data+0x2c>
    21f2:	2f c0       	rjmp	.+94     	; 0x2252 <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    21f4:	84 e0       	ldi	r24, 0x04	; 4
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	26 c0       	rjmp	.+76     	; 0x2246 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    21fa:	0e 94 17 06 	call	0xc2e	; 0xc2e <dark_menu_parameters_len>
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2202:	88 e0       	ldi	r24, 0x08	; 8
    2204:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2208:	22 e0       	ldi	r18, 0x02	; 2
    220a:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2210:	c8 2f       	mov	r28, r24
    2212:	7c 01       	movw	r14, r24
    2214:	e2 0e       	add	r14, r18
    2216:	f3 1e       	adc	r15, r19
    2218:	99 27       	eor	r25, r25
    221a:	8e 15       	cp	r24, r14
    221c:	9f 05       	cpc	r25, r15
    221e:	cc f4       	brge	.+50     	; 0x2252 <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2220:	f8 01       	movw	r30, r16
    2222:	61 91       	ld	r22, Z+
    2224:	8f 01       	movw	r16, r30
    2226:	8c 2f       	mov	r24, r28
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 25 0c 	call	0x184a	; 0x184a <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    222e:	cf 5f       	subi	r28, 0xFF	; 255
    2230:	8c 2f       	mov	r24, r28
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	8e 15       	cp	r24, r14
    2236:	9f 05       	cpc	r25, r15
    2238:	9c f3       	brlt	.-26     	; 0x2220 <mem_save_data+0x52>
    223a:	0b c0       	rjmp	.+22     	; 0x2252 <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2242:	86 e0       	ldi	r24, 0x06	; 6
    2244:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2246:	c8 2f       	mov	r28, r24
    2248:	7c 01       	movw	r14, r24
    224a:	f2 e0       	ldi	r31, 0x02	; 2
    224c:	ef 0e       	add	r14, r31
    224e:	f1 1c       	adc	r15, r1
    2250:	e7 cf       	rjmp	.-50     	; 0x2220 <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	ef 90       	pop	r14
    225c:	08 95       	ret

0000225e <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    226a:	82 30       	cpi	r24, 0x02	; 2
    226c:	59 f0       	breq	.+22     	; 0x2284 <mem_read_data+0x26>
    226e:	28 f4       	brcc	.+10     	; 0x227a <mem_read_data+0x1c>
    2270:	88 23       	and	r24, r24
    2272:	91 f0       	breq	.+36     	; 0x2298 <mem_read_data+0x3a>
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	51 f1       	breq	.+84     	; 0x22cc <mem_read_data+0x6e>
    2278:	34 c0       	rjmp	.+104    	; 0x22e2 <mem_read_data+0x84>
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	51 f1       	breq	.+84     	; 0x22d2 <mem_read_data+0x74>
    227e:	84 30       	cpi	r24, 0x04	; 4
    2280:	21 f0       	breq	.+8      	; 0x228a <mem_read_data+0x2c>
    2282:	2f c0       	rjmp	.+94     	; 0x22e2 <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2284:	84 e0       	ldi	r24, 0x04	; 4
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	26 c0       	rjmp	.+76     	; 0x22d6 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    228a:	0e 94 17 06 	call	0xc2e	; 0xc2e <dark_menu_parameters_len>
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2292:	88 e0       	ldi	r24, 0x08	; 8
    2294:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2298:	22 e0       	ldi	r18, 0x02	; 2
    229a:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22a0:	c8 2f       	mov	r28, r24
    22a2:	7c 01       	movw	r14, r24
    22a4:	e2 0e       	add	r14, r18
    22a6:	f3 1e       	adc	r15, r19
    22a8:	99 27       	eor	r25, r25
    22aa:	8e 15       	cp	r24, r14
    22ac:	9f 05       	cpc	r25, r15
    22ae:	cc f4       	brge	.+50     	; 0x22e2 <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    22b0:	8c 2f       	mov	r24, r28
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 2d 0c 	call	0x185a	; 0x185a <EEPROM_read>
    22b8:	f8 01       	movw	r30, r16
    22ba:	81 93       	st	Z+, r24
    22bc:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22be:	cf 5f       	subi	r28, 0xFF	; 255
    22c0:	8c 2f       	mov	r24, r28
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	8e 15       	cp	r24, r14
    22c6:	9f 05       	cpc	r25, r15
    22c8:	9c f3       	brlt	.-26     	; 0x22b0 <mem_read_data+0x52>
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    22d2:	86 e0       	ldi	r24, 0x06	; 6
    22d4:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22d6:	c8 2f       	mov	r28, r24
    22d8:	7c 01       	movw	r14, r24
    22da:	f2 e0       	ldi	r31, 0x02	; 2
    22dc:	ef 0e       	add	r14, r31
    22de:	f1 1c       	adc	r15, r1
    22e0:	e7 cf       	rjmp	.-50     	; 0x22b0 <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	08 95       	ret

000022ee <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    22ee:	8f 92       	push	r8
    22f0:	9f 92       	push	r9
    22f2:	af 92       	push	r10
    22f4:	bf 92       	push	r11
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    2308:	85 e0       	ldi	r24, 0x05	; 5
    230a:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
    230e:	c2 e3       	ldi	r28, 0x32	; 50
    2310:	d0 e0       	ldi	r29, 0x00	; 0
    2312:	9e 01       	movw	r18, r28
    2314:	28 1b       	sub	r18, r24
    2316:	31 09       	sbc	r19, r1
    2318:	c9 01       	movw	r24, r18
    231a:	89 01       	movw	r16, r18
    231c:	00 0f       	add	r16, r16
    231e:	11 1f       	adc	r17, r17
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	08 0f       	add	r16, r24
    232e:	19 1f       	adc	r17, r25
    2330:	00 53       	subi	r16, 0x30	; 48
    2332:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	0e 94 40 07 	call	0xe80	; 0xe80 <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    233a:	c8 1b       	sub	r28, r24
    233c:	d1 09       	sbc	r29, r1
    233e:	be 01       	movw	r22, r28
    2340:	66 0f       	add	r22, r22
    2342:	77 1f       	adc	r23, r23
    2344:	cc 0f       	add	r28, r28
    2346:	dd 1f       	adc	r29, r29
    2348:	cc 0f       	add	r28, r28
    234a:	dd 1f       	adc	r29, r29
    234c:	cc 0f       	add	r28, r28
    234e:	dd 1f       	adc	r29, r29
    2350:	6c 0f       	add	r22, r28
    2352:	7d 1f       	adc	r23, r29
    2354:	65 50       	subi	r22, 0x05	; 5
    2356:	7b 4f       	sbci	r23, 0xFB	; 251
    2358:	60 1b       	sub	r22, r16
    235a:	71 0b       	sbc	r23, r17
    235c:	07 2e       	mov	r0, r23
    235e:	00 0c       	add	r0, r0
    2360:	88 0b       	sbc	r24, r24
    2362:	99 0b       	sbc	r25, r25
    2364:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__floatsisf>
    2368:	4b 01       	movw	r8, r22
    236a:	5c 01       	movw	r10, r24
    236c:	6f 2d       	mov	r22, r15
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__floatunsisf>
    2378:	9b 01       	movw	r18, r22
    237a:	ac 01       	movw	r20, r24
    237c:	c5 01       	movw	r24, r10
    237e:	b4 01       	movw	r22, r8
    2380:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	46 ec       	ldi	r20, 0xC6	; 198
    238a:	52 e4       	ldi	r21, 0x42	; 66
    238c:	0e 94 3d 19 	call	0x327a	; 0x327a <__divsf3>
    2390:	6b 01       	movw	r12, r22
    2392:	7c 01       	movw	r14, r24
    2394:	b8 01       	movw	r22, r16
    2396:	11 0f       	add	r17, r17
    2398:	88 0b       	sbc	r24, r24
    239a:	99 0b       	sbc	r25, r25
    239c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__floatsisf>
    23a0:	9b 01       	movw	r18, r22
    23a2:	ac 01       	movw	r20, r24
    23a4:	c7 01       	movw	r24, r14
    23a6:	b6 01       	movw	r22, r12
    23a8:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    23ac:	0e 94 b6 19 	call	0x336c	; 0x336c <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    23b0:	7b bd       	out	0x2b, r23	; 43
    23b2:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	cf 90       	pop	r12
    23c4:	bf 90       	pop	r11
    23c6:	af 90       	pop	r10
    23c8:	9f 90       	pop	r9
    23ca:	8f 90       	pop	r8
    23cc:	08 95       	ret

000023ce <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    23ce:	94 e0       	ldi	r25, 0x04	; 4
    23d0:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <servoD>
	servo_set_pwm_val(value);
    23d4:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
    23d8:	08 95       	ret

000023da <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    23da:	88 23       	and	r24, r24
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <servo_error+0xa>
		servo_set_pwm_val(0);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
	LED_SERVO_OFF;
    23e4:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    23e6:	86 e0       	ldi	r24, 0x06	; 6
    23e8:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <servoD>
    23ec:	08 95       	ret

000023ee <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    23f2:	2f e1       	ldi	r18, 0x1F	; 31
    23f4:	3e e4       	ldi	r19, 0x4E	; 78
    23f6:	37 bd       	out	0x27, r19	; 39
    23f8:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    23fa:	81 b3       	in	r24, 0x11	; 17
    23fc:	80 63       	ori	r24, 0x30	; 48
    23fe:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    2400:	19 bc       	out	0x29, r1	; 41
    2402:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    2404:	1b bc       	out	0x2b, r1	; 43
    2406:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    2408:	8f b5       	in	r24, 0x2f	; 47
    240a:	82 60       	ori	r24, 0x02	; 2
    240c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    240e:	8e b5       	in	r24, 0x2e	; 46
    2410:	88 61       	ori	r24, 0x18	; 24
    2412:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    2414:	8f b5       	in	r24, 0x2f	; 47
    2416:	80 68       	ori	r24, 0x80	; 128
    2418:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    241a:	8e b5       	in	r24, 0x2e	; 46
    241c:	82 60       	ori	r24, 0x02	; 2
    241e:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2420:	3b bd       	out	0x2b, r19	; 43
    2422:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    2424:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    242c:	cf e9       	ldi	r28, 0x9F	; 159
    242e:	d4 e0       	ldi	r29, 0x04	; 4
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	88 83       	st	Y, r24
	servoD.value = 0;
    2434:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    2436:	83 ea       	ldi	r24, 0xA3	; 163
    2438:	94 e0       	ldi	r25, 0x04	; 4
    243a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <evTime_init>
	servoD.try_cnt = 0;
    243e:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    2440:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <try_count>
	debug_msg("SERVO: init\n");
    2444:	89 ea       	ldi	r24, 0xA9	; 169
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	9f 93       	push	r25
    244a:	8f 93       	push	r24
    244c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    245a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <servoD>
    245e:	92 50       	subi	r25, 0x02	; 2
    2460:	21 e0       	ldi	r18, 0x01	; 1
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	92 30       	cpi	r25, 0x02	; 2
    2466:	10 f0       	brcs	.+4      	; 0x246c <servo_is_open+0x12>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
}
    246c:	c9 01       	movw	r24, r18
    246e:	08 95       	ret

00002470 <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    2470:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <servoD>
    2474:	91 30       	cpi	r25, 0x01	; 1
    2476:	a1 f4       	brne	.+40     	; 0x24a0 <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    2478:	ef e9       	ldi	r30, 0x9F	; 159
    247a:	f4 e0       	ldi	r31, 0x04	; 4
    247c:	93 e0       	ldi	r25, 0x03	; 3
    247e:	90 83       	st	Z, r25
		servoD.value = value;
    2480:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    2482:	1f 92       	push	r1
    2484:	8f 93       	push	r24
    2486:	86 eb       	ldi	r24, 0xB6	; 182
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	9f 93       	push	r25
    248c:	8f 93       	push	r24
    248e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
}
    24a4:	08 95       	ret

000024a6 <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    24a6:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <servoD>
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	98 0f       	add	r25, r24
    24ae:	92 30       	cpi	r25, 0x02	; 2
    24b0:	28 f4       	brcc	.+10     	; 0x24bc <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    24b2:	ef e9       	ldi	r30, 0x9F	; 159
    24b4:	f4 e0       	ldi	r31, 0x04	; 4
    24b6:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    24b8:	85 e0       	ldi	r24, 0x05	; 5
    24ba:	80 83       	st	Z, r24
    24bc:	08 95       	ret

000024be <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    24be:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <servoD+0x9>
}
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	08 95       	ret

000024c6 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    24c6:	0e 94 2d 12 	call	0x245a	; 0x245a <servo_is_open>
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	d1 f0       	breq	.+52     	; 0x2502 <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    24d4:	ef e9       	ldi	r30, 0x9F	; 159
    24d6:	f4 e0       	ldi	r31, 0x04	; 4
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	80 83       	st	Z, r24
		servoD.value = 0;
    24dc:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    24de:	1f 92       	push	r1
    24e0:	1f 92       	push	r1
    24e2:	8d ec       	ldi	r24, 0xCD	; 205
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	9f 93       	push	r25
    24e8:	8f 93       	push	r24
    24ea:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    24ee:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    24f0:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
		return 1;
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    2502:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <servoD>
    2506:	25 30       	cpi	r18, 0x05	; 5
    2508:	31 f4       	brne	.+12     	; 0x2516 <servo_close+0x50>
	{
		servo_exit_try();
    250a:	0e 94 8c 12 	call	0x2518	; 0x2518 <servo_exit_try>
		error_servo_timer();
    250e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
		return 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    2516:	08 95       	ret

00002518 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    2518:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <servoD+0x1>
    251c:	82 30       	cpi	r24, 0x02	; 2
    251e:	29 f4       	brne	.+10     	; 0x252a <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    2520:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <servoD>
		servo_close();
    2524:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_close>
    2528:	09 c0       	rjmp	.+18     	; 0x253c <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	71 f4       	brne	.+28     	; 0x254a <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    252e:	ef e9       	ldi	r30, 0x9F	; 159
    2530:	f4 e0       	ldi	r31, 0x04	; 4
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	80 83       	st	Z, r24
		servo_open(servoD.value);
    2536:	83 81       	ldd	r24, Z+3	; 0x03
    2538:	0e 94 a6 12 	call	0x254c	; 0x254c <servo_open>
	}
	else return;
	try_count = 0;
    253c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <try_count>
	servoD.try_cnt++;
    2540:	ef e9       	ldi	r30, 0x9F	; 159
    2542:	f4 e0       	ldi	r31, 0x04	; 4
    2544:	81 85       	ldd	r24, Z+9	; 0x09
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	81 87       	std	Z+9, r24	; 0x09
    254a:	08 95       	ret

0000254c <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    254c:	cf 93       	push	r28
    254e:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    2550:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <servoD>
    2554:	9f ef       	ldi	r25, 0xFF	; 255
    2556:	98 0f       	add	r25, r24
    2558:	93 30       	cpi	r25, 0x03	; 3
    255a:	d0 f4       	brcc	.+52     	; 0x2590 <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    255c:	ef e9       	ldi	r30, 0x9F	; 159
    255e:	f4 e0       	ldi	r31, 0x04	; 4
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	80 83       	st	Z, r24
		servoD.value = value;
    2564:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    2566:	8c 2f       	mov	r24, r28
    2568:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    256c:	1f 92       	push	r1
    256e:	cf 93       	push	r28
    2570:	8e ed       	ldi	r24, 0xDE	; 222
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	9f 93       	push	r25
    2576:	8f 93       	push	r24
    2578:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    257c:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    257e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
		return 1;
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0b c0       	rjmp	.+22     	; 0x25a6 <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    2590:	85 30       	cpi	r24, 0x05	; 5
    2592:	39 f4       	brne	.+14     	; 0x25a2 <servo_open+0x56>
	{
		servo_exit_try();
    2594:	0e 94 8c 12 	call	0x2518	; 0x2518 <servo_exit_try>
		error_servo_timer();
    2598:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
		return 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <servo_open+0x5a>
	}
	else return 0;
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
}
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    25aa:	ab 01       	movw	r20, r22
    25ac:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    25ae:	83 ea       	ldi	r24, 0xA3	; 163
    25b0:	94 e0       	ldi	r25, 0x04	; 4
    25b2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
    25b6:	08 95       	ret

000025b8 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    25be:	4b e4       	ldi	r20, 0x4B	; 75
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 ef       	ldi	r24, 0xF0	; 240
    25c8:	92 e0       	ldi	r25, 0x02	; 2
    25ca:	0e 94 07 18 	call	0x300e	; 0x300e <evTime_process_period>
    25ce:	89 2b       	or	r24, r25
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <servo_process+0x1c>
    25d2:	b8 c0       	rjmp	.+368    	; 0x2744 <servo_process+0x18c>
	{
		switch(servoD.state)
    25d4:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <servoD>
    25d8:	85 30       	cpi	r24, 0x05	; 5
    25da:	a1 f0       	breq	.+40     	; 0x2604 <servo_process+0x4c>
    25dc:	30 f4       	brcc	.+12     	; 0x25ea <servo_process+0x32>
    25de:	82 30       	cpi	r24, 0x02	; 2
    25e0:	59 f0       	breq	.+22     	; 0x25f8 <servo_process+0x40>
    25e2:	83 30       	cpi	r24, 0x03	; 3
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <servo_process+0x30>
    25e6:	63 c0       	rjmp	.+198    	; 0x26ae <servo_process+0xf6>
    25e8:	9d c0       	rjmp	.+314    	; 0x2724 <servo_process+0x16c>
    25ea:	86 30       	cpi	r24, 0x06	; 6
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <servo_process+0x38>
    25ee:	79 c0       	rjmp	.+242    	; 0x26e2 <servo_process+0x12a>
    25f0:	87 30       	cpi	r24, 0x07	; 7
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <servo_process+0x3e>
    25f4:	93 c0       	rjmp	.+294    	; 0x271c <servo_process+0x164>
    25f6:	96 c0       	rjmp	.+300    	; 0x2724 <servo_process+0x16c>
		{
			case SERVO_OPEN:
			servoD.value = value;
    25f8:	c0 93 a2 04 	sts	0x04A2, r28	; 0x8004a2 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    25fc:	8c 2f       	mov	r24, r28
    25fe:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
			break;
    2602:	90 c0       	rjmp	.+288    	; 0x2724 <servo_process+0x16c>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    2604:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <try_count>
    2608:	81 11       	cpse	r24, r1
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    260c:	4a ef       	ldi	r20, 0xFA	; 250
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	8b ee       	ldi	r24, 0xEB	; 235
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
		try_count++;
    261c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <try_count>
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    2626:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <servoD+0x3>
    262a:	89 0f       	add	r24, r25
    262c:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
    2630:	2a c0       	rjmp	.+84     	; 0x2686 <servo_process+0xce>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    2632:	81 50       	subi	r24, 0x01	; 1
    2634:	89 30       	cpi	r24, 0x09	; 9
    2636:	d8 f4       	brcc	.+54     	; 0x266e <servo_process+0xb6>
	{
		if (evTime_check(&timeout) == 1)
    2638:	8b ee       	ldi	r24, 0xEB	; 235
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	09 f5       	brne	.+66     	; 0x2686 <servo_process+0xce>
		{
			evTime_start(&timeout, 250);
    2644:	4a ef       	ldi	r20, 0xFA	; 250
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	8b ee       	ldi	r24, 0xEB	; 235
    264e:	92 e0       	ldi	r25, 0x02	; 2
    2650:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
			try_count++;
    2654:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <try_count>
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <try_count>
			servo_set_pwm_val(servoD.value + try_count*4);
    265e:	88 0f       	add	r24, r24
    2660:	88 0f       	add	r24, r24
    2662:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <servoD+0x3>
    2666:	89 0f       	add	r24, r25
    2668:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
    266c:	0c c0       	rjmp	.+24     	; 0x2686 <servo_process+0xce>
		}
	}
	else
	{
		try_count = 0;
    266e:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <try_count>
		servo_set_pwm_val(servoD.value);
    2672:	cf e9       	ldi	r28, 0x9F	; 159
    2674:	d4 e0       	ldi	r29, 0x04	; 4
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2680:	89 85       	ldd	r24, Y+9	; 0x09
    2682:	8f 5f       	subi	r24, 0xFF	; 255
    2684:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    2686:	20 91 a2 04 	lds	r18, 0x04A2	; 0x8004a2 <servoD+0x3>
    268a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <try_count>
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	82 0f       	add	r24, r18
    2692:	91 1d       	adc	r25, r1
    2694:	9f 93       	push	r25
    2696:	8f 93       	push	r24
    2698:	80 ef       	ldi	r24, 0xF0	; 240
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	9f 93       	push	r25
    269e:	8f 93       	push	r24
    26a0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	3b c0       	rjmp	.+118    	; 0x2724 <servo_process+0x16c>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26ae:	86 ee       	ldi	r24, 0xE6	; 230
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <evTime_is_stated>
    26b6:	89 2b       	or	r24, r25
    26b8:	59 f0       	breq	.+22     	; 0x26d0 <servo_process+0x118>
	{
		if (evTime_check(&timeout) == 1)
    26ba:	86 ee       	ldi	r24, 0xE6	; 230
    26bc:	92 e0       	ldi	r25, 0x02	; 2
    26be:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	79 f5       	brne	.+94     	; 0x2724 <servo_process+0x16c>
		{
			servoD.state = SERVO_OPEN;
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <servoD>
			LED_SERVO_ON;
    26cc:	96 9a       	sbi	0x12, 6	; 18
    26ce:	2a c0       	rjmp	.+84     	; 0x2724 <servo_process+0x16c>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    26d0:	48 eb       	ldi	r20, 0xB8	; 184
    26d2:	5b e0       	ldi	r21, 0x0B	; 11
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	86 ee       	ldi	r24, 0xE6	; 230
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
    26e0:	21 c0       	rjmp	.+66     	; 0x2724 <servo_process+0x16c>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    26e2:	81 ee       	ldi	r24, 0xE1	; 225
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <evTime_is_stated>
    26ea:	89 2b       	or	r24, r25
    26ec:	71 f0       	breq	.+28     	; 0x270a <servo_process+0x152>
	{
		if (evTime_check(&timeout) == 1)
    26ee:	81 ee       	ldi	r24, 0xE1	; 225
    26f0:	92 e0       	ldi	r25, 0x02	; 2
    26f2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	a9 f4       	brne	.+42     	; 0x2724 <servo_process+0x16c>
		{
			servoD.state = SERVO_ERROR;
    26fa:	87 e0       	ldi	r24, 0x07	; 7
    26fc:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2700:	8f e1       	ldi	r24, 0x1F	; 31
    2702:	9e e4       	ldi	r25, 0x4E	; 78
    2704:	9b bd       	out	0x2b, r25	; 43
    2706:	8a bd       	out	0x2a, r24	; 42
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <servo_process+0x16c>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    270a:	4c ea       	ldi	r20, 0xAC	; 172
    270c:	5d e0       	ldi	r21, 0x0D	; 13
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	81 ee       	ldi	r24, 0xE1	; 225
    2714:	92 e0       	ldi	r25, 0x02	; 2
    2716:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <servo_process+0x16c>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    271c:	8f e1       	ldi	r24, 0x1F	; 31
    271e:	9e e4       	ldi	r25, 0x4E	; 78
    2720:	9b bd       	out	0x2b, r25	; 43
    2722:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    2724:	83 ea       	ldi	r24, 0xA3	; 163
    2726:	94 e0       	ldi	r25, 0x04	; 4
    2728:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	51 f4       	brne	.+20     	; 0x2744 <servo_process+0x18c>
		{
			servoD.try_cnt = 0;
    2730:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    2734:	8e ef       	ldi	r24, 0xFE	; 254
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	9f 93       	push	r25
    273a:	8f 93       	push	r24
    273c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
		}
	}
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    274a:	eb e3       	ldi	r30, 0x3B	; 59
    274c:	f4 e0       	ldi	r31, 0x04	; 4
    274e:	16 86       	std	Z+14, r1	; 0x0e
    2750:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    2752:	12 86       	std	Z+10, r1	; 0x0a
    2754:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    2756:	14 86       	std	Z+12, r1	; 0x0c
    2758:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    275a:	ee e0       	ldi	r30, 0x0E	; 14
    275c:	f4 e0       	ldi	r31, 0x04	; 4
    275e:	16 86       	std	Z+14, r1	; 0x0e
    2760:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    2762:	12 86       	std	Z+10, r1	; 0x0a
    2764:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    2766:	14 86       	std	Z+12, r1	; 0x0c
    2768:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    276a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <button3+0xc>
    276e:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <button3+0xb>
	
	button5.timer_callback = 0;
    2772:	ec ee       	ldi	r30, 0xEC	; 236
    2774:	f3 e0       	ldi	r31, 0x03	; 3
    2776:	16 86       	std	Z+14, r1	; 0x0e
    2778:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    277a:	14 86       	std	Z+12, r1	; 0x0c
    277c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    277e:	12 86       	std	Z+10, r1	; 0x0a
    2780:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    2782:	ec e2       	ldi	r30, 0x2C	; 44
    2784:	f4 e0       	ldi	r31, 0x04	; 4
    2786:	16 86       	std	Z+14, r1	; 0x0e
    2788:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    278a:	14 86       	std	Z+12, r1	; 0x0c
    278c:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    278e:	12 86       	std	Z+10, r1	; 0x0a
    2790:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    2792:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <button7+0xc>
    2796:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <button7+0xb>
	
	button8.fall_callback = 0;
    279a:	e9 e5       	ldi	r30, 0x59	; 89
    279c:	f4 e0       	ldi	r31, 0x04	; 4
    279e:	14 86       	std	Z+12, r1	; 0x0c
    27a0:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    27a2:	16 86       	std	Z+14, r1	; 0x0e
    27a4:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    27a6:	12 86       	std	Z+10, r1	; 0x0a
    27a8:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    27aa:	ee ec       	ldi	r30, 0xCE	; 206
    27ac:	f3 e0       	ldi	r31, 0x03	; 3
    27ae:	14 86       	std	Z+12, r1	; 0x0c
    27b0:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    27b2:	16 86       	std	Z+14, r1	; 0x0e
    27b4:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    27b6:	12 86       	std	Z+10, r1	; 0x0a
    27b8:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    27ba:	ed ed       	ldi	r30, 0xDD	; 221
    27bc:	f3 e0       	ldi	r31, 0x03	; 3
    27be:	14 86       	std	Z+12, r1	; 0x0c
    27c0:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    27c2:	16 86       	std	Z+14, r1	; 0x0e
    27c4:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    27c6:	12 86       	std	Z+10, r1	; 0x0a
    27c8:	11 86       	std	Z+9, r1	; 0x09
    27ca:	08 95       	ret

000027cc <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    27cc:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	49 f0       	breq	.+18     	; 0x27e6 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    27d4:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    27d8:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    27dc:	98 60       	ori	r25, 0x08	; 8
    27de:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    27e2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    27e6:	08 95       	ret

000027e8 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    27e8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	49 f0       	breq	.+18     	; 0x2802 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    27f0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    27f4:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    27f8:	80 68       	ori	r24, 0x80	; 128
    27fa:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    27fe:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    2802:	08 95       	ret

00002804 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2804:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2808:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    280c:	92 60       	ori	r25, 0x02	; 2
    280e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2812:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    2816:	08 95       	ret

00002818 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2818:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    281c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2820:	99 7f       	andi	r25, 0xF9	; 249
    2822:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2826:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	counter_very_fast_motor_sub = 0;
    282a:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <counter_very_fast_motor_sub>
    282e:	08 95       	ret

00002830 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2830:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2834:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2838:	80 62       	ori	r24, 0x20	; 32
    283a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    283e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    2842:	08 95       	ret

00002844 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2844:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2848:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    284c:	8f 79       	andi	r24, 0x9F	; 159
    284e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2852:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	counter_very_fast_motor_sub = 0;
    2856:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <counter_very_fast_motor_sub>
    285a:	08 95       	ret

0000285c <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    285c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2860:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2864:	90 62       	ori	r25, 0x20	; 32
    2866:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    286a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    286e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2872:	8b 30       	cpi	r24, 0x0B	; 11
    2874:	18 f0       	brcs	.+6      	; 0x287c <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    2876:	81 50       	subi	r24, 0x01	; 1
    2878:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    287c:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    288e:	08 95       	ret

00002890 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2890:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2894:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2898:	90 62       	ori	r25, 0x20	; 32
    289a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    289e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	if (motor_value > 10)
    28a2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <motor_value>
    28a6:	8b 30       	cpi	r24, 0x0B	; 11
    28a8:	18 f0       	brcs	.+6      	; 0x28b0 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    28aa:	81 50       	subi	r24, 0x01	; 1
    28ac:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    28b0:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 cb 09 	call	0x1396	; 0x1396 <disp_get_state>
    28c0:	02 97       	sbiw	r24, 0x02	; 2
    28c2:	29 f4       	brne	.+10     	; 0x28ce <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28ce:	61 e0       	ldi	r22, 0x01	; 1
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
	state_measure_volt++;
    28d6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <state_measure_volt>
	if (state_measure_volt == 2)
    28e0:	82 30       	cpi	r24, 0x02	; 2
    28e2:	19 f4       	brne	.+6      	; 0x28ea <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28e4:	66 e0       	ldi	r22, 0x06	; 6
    28e6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    28ea:	08 95       	ret

000028ec <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    28ec:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    28f0:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    28f4:	90 62       	ori	r25, 0x20	; 32
    28f6:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    28fa:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	if (motor_value < 99)
    28fe:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <motor_value>
    2902:	83 36       	cpi	r24, 0x63	; 99
    2904:	18 f4       	brcc	.+6      	; 0x290c <button_motor_add_fall_cb+0x20>
		motor_value++;
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    290c:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	0e 94 cb 09 	call	0x1396	; 0x1396 <disp_get_state>
    291c:	02 97       	sbiw	r24, 0x02	; 2
    291e:	29 f4       	brne	.+10     	; 0x292a <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    2928:	04 c0       	rjmp	.+8      	; 0x2932 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
	state_measure_volt++;
    2932:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <state_measure_volt>
	if (state_measure_volt == 2)
    293c:	82 30       	cpi	r24, 0x02	; 2
    293e:	19 f4       	brne	.+6      	; 0x2946 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2940:	66 e0       	ldi	r22, 0x06	; 6
    2942:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    2946:	08 95       	ret

00002948 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2948:	0e 94 db 09 	call	0x13b6	; 0x13b6 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    294c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2950:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2954:	97 7e       	andi	r25, 0xE7	; 231
    2956:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    295a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	counter_very_fast_motor_sub = 0;
    295e:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2962:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    2966:	88 23       	and	r24, r24
    2968:	19 f0       	breq	.+6      	; 0x2970 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    296a:	81 50       	subi	r24, 0x01	; 1
    296c:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	0e 94 cb 09 	call	0x1396	; 0x1396 <disp_get_state>
    2976:	02 97       	sbiw	r24, 0x02	; 2
    2978:	29 f4       	brne	.+10     	; 0x2984 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    2982:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2984:	61 e0       	ldi	r22, 0x01	; 1
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    298c:	08 95       	ret

0000298e <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    298e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2992:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2996:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    299a:	8f 77       	andi	r24, 0x7F	; 127
    299c:	9e 7f       	andi	r25, 0xFE	; 254
    299e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    29a2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	counter_very_fast_motor_sub = 0;
    29a6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    29aa:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <state_measure_volt>
    29ae:	88 23       	and	r24, r24
    29b0:	19 f0       	breq	.+6      	; 0x29b8 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    29b2:	81 50       	subi	r24, 0x01	; 1
    29b4:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0e 94 cb 09 	call	0x1396	; 0x1396 <disp_get_state>
    29be:	02 97       	sbiw	r24, 0x02	; 2
    29c0:	29 f4       	brne	.+10     	; 0x29cc <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29c2:	61 e0       	ldi	r22, 0x01	; 1
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    29ca:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    29d4:	08 95       	ret

000029d6 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    29d6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    29da:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    29de:	90 62       	ori	r25, 0x20	; 32
    29e0:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    29e4:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    29e8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    29ec:	83 36       	cpi	r24, 0x63	; 99
    29ee:	28 f4       	brcc	.+10     	; 0x29fa <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <servo_vibro_value>
		error_servo_timer();
    29f6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    29fa:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
    2a0c:	08 95       	ret

00002a0e <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2a0e:	eb ea       	ldi	r30, 0xAB	; 171
    2a10:	f4 e0       	ldi	r31, 0x04	; 4
    2a12:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <motor_value>
    2a16:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2a18:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2a1c:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2a1e:	bf 01       	movw	r22, r30
    2a20:	83 e0       	ldi	r24, 0x03	; 3
    2a22:	0e 94 e7 10 	call	0x21ce	; 0x21ce <mem_save_data>
    2a26:	08 95       	ret

00002a28 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a28:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2a2c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2a30:	90 62       	ori	r25, 0x20	; 32
    2a32:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2a36:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	if (motor_value < 10)
    2a3a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <motor_value>
    2a3e:	8a 30       	cpi	r24, 0x0A	; 10
    2a40:	38 f4       	brcc	.+14     	; 0x2a50 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2a42:	8a e0       	ldi	r24, 0x0A	; 10
    2a44:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2a48:	6a e0       	ldi	r22, 0x0A	; 10
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	}
	sys_save_display();
    2a50:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <sys_save_display>
	if(!dcmotor_is_on())
    2a54:	0e 94 64 07 	call	0xec8	; 0xec8 <dcmotor_is_on>
    2a58:	89 2b       	or	r24, r25
    2a5a:	39 f4       	brne	.+14     	; 0x2a6a <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2a5c:	0e 94 87 07 	call	0xf0e	; 0xf0e <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2a60:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2a64:	0e 94 38 12 	call	0x2470	; 0x2470 <servo_delayed_open>
    2a68:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2a6a:	0e 94 6f 07 	call	0xede	; 0xede <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2a6e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_close>
    2a72:	08 95       	ret

00002a74 <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a74:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2a78:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2a7c:	90 62       	ori	r25, 0x20	; 32
    2a7e:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2a82:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	if (servo_vibro_value < 10)
    2a86:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2a8a:	8a 30       	cpi	r24, 0x0A	; 10
    2a8c:	38 f4       	brcc	.+14     	; 0x2a9c <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2a8e:	8a e0       	ldi	r24, 0x0A	; 10
    2a90:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2a94:	6a e0       	ldi	r22, 0x0A	; 10
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2a9c:	0e 94 2d 12 	call	0x245a	; 0x245a <servo_is_open>
    2aa0:	89 2b       	or	r24, r25
    2aa2:	19 f0       	breq	.+6      	; 0x2aaa <button_on_off_pwm+0x36>
    2aa4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_close>
    2aa8:	08 95       	ret
	else servo_open(servo_vibro_value);
    2aaa:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2aae:	0e 94 a6 12 	call	0x254c	; 0x254c <servo_open>
    2ab2:	08 95       	ret

00002ab4 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	96 e1       	ldi	r25, 0x16	; 22
    2ab8:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <button4+0xa>
    2abc:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	82 e0       	ldi	r24, 0x02	; 2
    2ac4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
	disp_off_segments();
    2ac8:	0e 94 32 0a 	call	0x1464	; 0x1464 <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2acc:	69 ea       	ldi	r22, 0xA9	; 169
    2ace:	74 e0       	ldi	r23, 0x04	; 4
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	0e 94 2f 11 	call	0x225e	; 0x225e <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2ad6:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <mem_last_save+0x1>
    2ada:	96 ef       	ldi	r25, 0xF6	; 246
    2adc:	98 0f       	add	r25, r24
    2ade:	9a 35       	cpi	r25, 0x5A	; 90
    2ae0:	10 f4       	brcc	.+4      	; 0x2ae6 <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2ae2:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2ae6:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <mem_last_save>
    2aea:	96 ef       	ldi	r25, 0xF6	; 246
    2aec:	98 0f       	add	r25, r24
    2aee:	9a 35       	cpi	r25, 0x5A	; 90
    2af0:	10 f4       	brcc	.+4      	; 0x2af6 <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2af2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <motor_value>
    2af6:	08 95       	ret

00002af8 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2af8:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2afc:	42 e0       	ldi	r20, 0x02	; 2
    2afe:	68 ee       	ldi	r22, 0xE8	; 232
    2b00:	73 e0       	ldi	r23, 0x03	; 3
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 84 0b 	call	0x1708	; 0x1708 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2b0a:	0e 94 4a 07 	call	0xe94	; 0xe94 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	0e 94 f7 11 	call	0x23ee	; 0x23ee <servo_init>
	#endif
	error_init();
    2b14:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <error_init>
	init_measure();
    2b18:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <init_measure>
	init_buzzer();
    2b1c:	0e 94 5b 05 	call	0xab6	; 0xab6 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2b28:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2b2c:	eb e3       	ldi	r30, 0x3B	; 59
    2b2e:	f4 e0       	ldi	r31, 0x04	; 4
    2b30:	86 ee       	ldi	r24, 0xE6	; 230
    2b32:	93 e1       	ldi	r25, 0x13	; 19
    2b34:	96 87       	std	Z+14, r25	; 0x0e
    2b36:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2b38:	88 e4       	ldi	r24, 0x48	; 72
    2b3a:	94 e1       	ldi	r25, 0x14	; 20
    2b3c:	94 87       	std	Z+12, r25	; 0x0c
    2b3e:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2b40:	84 ea       	ldi	r24, 0xA4	; 164
    2b42:	94 e1       	ldi	r25, 0x14	; 20
    2b44:	92 87       	std	Z+10, r25	; 0x0a
    2b46:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2b48:	ee e0       	ldi	r30, 0x0E	; 14
    2b4a:	f4 e0       	ldi	r31, 0x04	; 4
    2b4c:	84 ef       	ldi	r24, 0xF4	; 244
    2b4e:	93 e1       	ldi	r25, 0x13	; 19
    2b50:	96 87       	std	Z+14, r25	; 0x0e
    2b52:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2b54:	86 e7       	ldi	r24, 0x76	; 118
    2b56:	94 e1       	ldi	r25, 0x14	; 20
    2b58:	94 87       	std	Z+12, r25	; 0x0c
    2b5a:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2b5c:	87 ec       	ldi	r24, 0xC7	; 199
    2b5e:	94 e1       	ldi	r25, 0x14	; 20
    2b60:	92 87       	std	Z+10, r25	; 0x0a
    2b62:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2b64:	84 e1       	ldi	r24, 0x14	; 20
    2b66:	95 e1       	ldi	r25, 0x15	; 21
    2b68:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <button3+0xc>
    2b6c:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2b70:	ec ee       	ldi	r30, 0xEC	; 236
    2b72:	f3 e0       	ldi	r31, 0x03	; 3
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	94 e1       	ldi	r25, 0x14	; 20
    2b78:	96 87       	std	Z+14, r25	; 0x0e
    2b7a:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2b7c:	8c e0       	ldi	r24, 0x0C	; 12
    2b7e:	94 e1       	ldi	r25, 0x14	; 20
    2b80:	92 87       	std	Z+10, r25	; 0x0a
    2b82:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2b84:	8e e2       	ldi	r24, 0x2E	; 46
    2b86:	94 e1       	ldi	r25, 0x14	; 20
    2b88:	94 87       	std	Z+12, r25	; 0x0c
    2b8a:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2b8c:	ec e2       	ldi	r30, 0x2C	; 44
    2b8e:	f4 e0       	ldi	r31, 0x04	; 4
    2b90:	88 e1       	ldi	r24, 0x18	; 24
    2b92:	94 e1       	ldi	r25, 0x14	; 20
    2b94:	96 87       	std	Z+14, r25	; 0x0e
    2b96:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2b98:	82 e2       	ldi	r24, 0x22	; 34
    2b9a:	94 e1       	ldi	r25, 0x14	; 20
    2b9c:	92 87       	std	Z+10, r25	; 0x0a
    2b9e:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2ba0:	8b ee       	ldi	r24, 0xEB	; 235
    2ba2:	94 e1       	ldi	r25, 0x14	; 20
    2ba4:	94 87       	std	Z+12, r25	; 0x0c
    2ba6:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2ba8:	8a e3       	ldi	r24, 0x3A	; 58
    2baa:	95 e1       	ldi	r25, 0x15	; 21
    2bac:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <button7+0xc>
    2bb0:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2bb4:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2bbe:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
    2bc8:	08 95       	ret

00002bca <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2bca:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <state_measure_volt>
	dcmotorpwm_deinit();
    2bce:	0e 94 5e 07 	call	0xebc	; 0xebc <dcmotorpwm_deinit>
	off_button();
    2bd2:	0e 94 a5 13 	call	0x274a	; 0x274a <off_button>
	error_deinit();
    2bd6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2bda:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2bde:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <system_events+0x1>
    2be2:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2bee:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2bf2:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2bf6:	8e 7f       	andi	r24, 0xFE	; 254
    2bf8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2bfc:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
	#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
	init_menu();
    2c00:	0e 94 f1 06 	call	0xde2	; 0xde2 <init_menu>
    2c04:	08 95       	ret

00002c06 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2c06:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2c0a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2c0e:	80 ff       	sbrs	r24, 0
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <button4_toggle_system+0x12>
	{
		off_system();
    2c12:	0e 94 e5 15 	call	0x2bca	; 0x2bca <off_system>
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2c18:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2c1c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2c20:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2c24:	90 62       	ori	r25, 0x20	; 32
    2c26:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2c2a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
    2c2e:	08 95       	ret

00002c30 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2c30:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    2c34:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    2c38:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    2c3c:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    2c40:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <disp_fast_timer.2119>
    2c44:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <disp_fast_timer.2119+0x1>
    2c48:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <disp_fast_timer.2119+0x2>
    2c4c:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <disp_fast_timer.2119+0x3>
    2c50:	84 17       	cp	r24, r20
    2c52:	95 07       	cpc	r25, r21
    2c54:	a6 07       	cpc	r26, r22
    2c56:	b7 07       	cpc	r27, r23
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <disp_fast_process+0x2c>
    2c5a:	a4 c0       	rjmp	.+328    	; 0x2da4 <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2c5c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2c60:	85 ff       	sbrs	r24, 5
    2c62:	21 c0       	rjmp	.+66     	; 0x2ca6 <disp_fast_process+0x76>
    2c64:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2c68:	63 36       	cpi	r22, 0x63	; 99
    2c6a:	e8 f4       	brcc	.+58     	; 0x2ca6 <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2c6c:	6b 30       	cpi	r22, 0x0B	; 11
    2c6e:	40 f0       	brcs	.+16     	; 0x2c80 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2c70:	6f 5f       	subi	r22, 0xFF	; 255
    2c72:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <servo_vibro_value>
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
				error_servo_timer();
    2c7c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2c80:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <counter_very_fast_servo_add>
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2c8a:	8f 30       	cpi	r24, 0x0F	; 15
    2c8c:	60 f0       	brcs	.+24     	; 0x2ca6 <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2c8e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2c92:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2c96:	8f 7d       	andi	r24, 0xDF	; 223
    2c98:	80 64       	ori	r24, 0x40	; 64
    2c9a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2c9e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
				counter_very_fast_servo_add = 0;
    2ca2:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2ca6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2caa:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2cae:	91 ff       	sbrs	r25, 1
    2cb0:	21 c0       	rjmp	.+66     	; 0x2cf4 <disp_fast_process+0xc4>
    2cb2:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2cb6:	66 23       	and	r22, r22
    2cb8:	e9 f0       	breq	.+58     	; 0x2cf4 <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2cba:	6b 30       	cpi	r22, 0x0B	; 11
    2cbc:	40 f0       	brcs	.+16     	; 0x2cce <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2cbe:	61 50       	subi	r22, 0x01	; 1
    2cc0:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <servo_vibro_value>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
				error_servo_timer();
    2cca:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2cce:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <counter_very_fast_servo_sub>
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2cd8:	8f 30       	cpi	r24, 0x0F	; 15
    2cda:	60 f0       	brcs	.+24     	; 0x2cf4 <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2cdc:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2ce0:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2ce4:	9d 7f       	andi	r25, 0xFD	; 253
    2ce6:	94 60       	ori	r25, 0x04	; 4
    2ce8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2cec:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
				counter_very_fast_servo_sub = 0;
    2cf0:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2cf4:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2cf8:	87 ff       	sbrs	r24, 7
    2cfa:	1d c0       	rjmp	.+58     	; 0x2d36 <disp_fast_process+0x106>
    2cfc:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2d00:	63 36       	cpi	r22, 0x63	; 99
    2d02:	c8 f4       	brcc	.+50     	; 0x2d36 <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2d04:	6f 5f       	subi	r22, 0xFF	; 255
    2d06:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <motor_value>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
			counter_very_fast_motor_add++;
    2d10:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <counter_very_fast_motor_add>
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2d1a:	8f 30       	cpi	r24, 0x0F	; 15
    2d1c:	60 f0       	brcs	.+24     	; 0x2d36 <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2d1e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2d22:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2d26:	8f 77       	andi	r24, 0x7F	; 127
    2d28:	91 60       	ori	r25, 0x01	; 1
    2d2a:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2d2e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
				counter_very_fast_motor_add = 0;
    2d32:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2d36:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2d3a:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2d3e:	93 ff       	sbrs	r25, 3
    2d40:	1d c0       	rjmp	.+58     	; 0x2d7c <disp_fast_process+0x14c>
    2d42:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2d46:	6b 30       	cpi	r22, 0x0B	; 11
    2d48:	c8 f0       	brcs	.+50     	; 0x2d7c <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2d4a:	61 50       	subi	r22, 0x01	; 1
    2d4c:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <motor_value>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
			counter_very_fast_motor_sub++;
    2d56:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <counter_very_fast_motor_sub>
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2d60:	8f 30       	cpi	r24, 0x0F	; 15
    2d62:	60 f0       	brcs	.+24     	; 0x2d7c <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2d64:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2d68:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2d6c:	97 7f       	andi	r25, 0xF7	; 247
    2d6e:	90 61       	ori	r25, 0x10	; 16
    2d70:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <system_events+0x1>
    2d74:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <system_events>
				counter_very_fast_motor_sub = 0;
    2d78:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2d7c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <disp_fast_timer.2119>
    2d80:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <disp_fast_timer.2119+0x1>
    2d84:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <disp_fast_timer.2119+0x2>
    2d88:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <disp_fast_timer.2119+0x3>
    2d8c:	80 5b       	subi	r24, 0xB0	; 176
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	af 4f       	sbci	r26, 0xFF	; 255
    2d92:	bf 4f       	sbci	r27, 0xFF	; 255
    2d94:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <disp_fast_timer.2119>
    2d98:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <disp_fast_timer.2119+0x1>
    2d9c:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <disp_fast_timer.2119+0x2>
    2da0:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <disp_fast_timer.2119+0x3>
    2da4:	08 95       	ret

00002da6 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2da6:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <mktime+0x2>
    2daa:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <mktime+0x3>
    2dae:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <mktime+0x4>
    2db2:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <mktime+0x5>
    2db6:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <disp_very_fast_timer>
    2dba:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <disp_very_fast_timer+0x1>
    2dbe:	a0 91 fc 02 	lds	r26, 0x02FC	; 0x8002fc <disp_very_fast_timer+0x2>
    2dc2:	b0 91 fd 02 	lds	r27, 0x02FD	; 0x8002fd <disp_very_fast_timer+0x3>
    2dc6:	84 17       	cp	r24, r20
    2dc8:	95 07       	cpc	r25, r21
    2dca:	a6 07       	cpc	r26, r22
    2dcc:	b7 07       	cpc	r27, r23
    2dce:	08 f0       	brcs	.+2      	; 0x2dd2 <disp_very_fast_process+0x2c>
    2dd0:	57 c0       	rjmp	.+174    	; 0x2e80 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2dd2:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <servo_vibro_value>
    2dd6:	83 36       	cpi	r24, 0x63	; 99
    2dd8:	70 f4       	brcc	.+28     	; 0x2df6 <disp_very_fast_process+0x50>
    2dda:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2dde:	86 ff       	sbrs	r24, 6
    2de0:	0a c0       	rjmp	.+20     	; 0x2df6 <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2de2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2de6:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2dea:	6f 5f       	subi	r22, 0xFF	; 255
    2dec:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <servo_vibro_value>
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2df6:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <servo_vibro_value>
    2dfa:	6b 30       	cpi	r22, 0x0B	; 11
    2dfc:	70 f0       	brcs	.+28     	; 0x2e1a <disp_very_fast_process+0x74>
    2dfe:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2e02:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2e06:	92 ff       	sbrs	r25, 2
    2e08:	08 c0       	rjmp	.+16     	; 0x2e1a <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2e0a:	61 50       	subi	r22, 0x01	; 1
    2e0c:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <servo_vibro_value>
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
				error_servo_timer();
    2e16:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2e1a:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2e1e:	63 36       	cpi	r22, 0x63	; 99
    2e20:	60 f4       	brcc	.+24     	; 0x2e3a <disp_very_fast_process+0x94>
    2e22:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2e26:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2e2a:	90 ff       	sbrs	r25, 0
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2e2e:	6f 5f       	subi	r22, 0xFF	; 255
    2e30:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <motor_value>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2e3a:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <motor_value>
    2e3e:	6b 30       	cpi	r22, 0x0B	; 11
    2e40:	60 f0       	brcs	.+24     	; 0x2e5a <disp_very_fast_process+0xb4>
    2e42:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <system_events>
    2e46:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <system_events+0x1>
    2e4a:	94 ff       	sbrs	r25, 4
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2e4e:	61 50       	subi	r22, 0x01	; 1
    2e50:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <motor_value>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	0e 94 ba 09 	call	0x1374	; 0x1374 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2e5a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <disp_very_fast_timer>
    2e5e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <disp_very_fast_timer+0x1>
    2e62:	a0 91 fc 02 	lds	r26, 0x02FC	; 0x8002fc <disp_very_fast_timer+0x2>
    2e66:	b0 91 fd 02 	lds	r27, 0x02FD	; 0x8002fd <disp_very_fast_timer+0x3>
    2e6a:	4e 96       	adiw	r24, 0x1e	; 30
    2e6c:	a1 1d       	adc	r26, r1
    2e6e:	b1 1d       	adc	r27, r1
    2e70:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <disp_very_fast_timer>
    2e74:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <disp_very_fast_timer+0x1>
    2e78:	a0 93 fc 02 	sts	0x02FC, r26	; 0x8002fc <disp_very_fast_timer+0x2>
    2e7c:	b0 93 fd 02 	sts	0x02FD, r27	; 0x8002fd <disp_very_fast_timer+0x3>
    2e80:	08 95       	ret

00002e82 <system_error>:
}


void system_error(void)
{
	off_button();
    2e82:	0e 94 a5 13 	call	0x274a	; 0x274a <off_button>
    2e86:	08 95       	ret

00002e88 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2e88:	1f 92       	push	r1
    2e8a:	0f 92       	push	r0
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	0f 92       	push	r0
    2e90:	11 24       	eor	r1, r1
    2e92:	2f 93       	push	r18
    2e94:	3f 93       	push	r19
    2e96:	4f 93       	push	r20
    2e98:	5f 93       	push	r21
    2e9a:	6f 93       	push	r22
    2e9c:	7f 93       	push	r23
    2e9e:	8f 93       	push	r24
    2ea0:	9f 93       	push	r25
    2ea2:	af 93       	push	r26
    2ea4:	bf 93       	push	r27
    2ea6:	ef 93       	push	r30
    2ea8:	ff 93       	push	r31
    2eaa:	ed ea       	ldi	r30, 0xAD	; 173
    2eac:	f4 e0       	ldi	r31, 0x04	; 4
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	c2 96       	adiw	r24, 0x32	; 50
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	88 3e       	cpi	r24, 0xE8	; 232
    2ebe:	93 40       	sbci	r25, 0x03	; 3
    2ec0:	88 f0       	brcs	.+34     	; 0x2ee4 <__vector_10+0x5c>
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	a4 81       	ldd	r26, Z+4	; 0x04
    2ec8:	b5 81       	ldd	r27, Z+5	; 0x05
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	a1 1d       	adc	r26, r1
    2ece:	b1 1d       	adc	r27, r1
    2ed0:	82 83       	std	Z+2, r24	; 0x02
    2ed2:	93 83       	std	Z+3, r25	; 0x03
    2ed4:	a4 83       	std	Z+4, r26	; 0x04
    2ed6:	b5 83       	std	Z+5, r27	; 0x05
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	88 5e       	subi	r24, 0xE8	; 232
    2ede:	93 40       	sbci	r25, 0x03	; 3
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
    2ee4:	83 e0       	ldi	r24, 0x03	; 3
    2ee6:	93 e0       	ldi	r25, 0x03	; 3
    2ee8:	0e 94 4a 09 	call	0x1294	; 0x1294 <display_process>
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	bf 91       	pop	r27
    2ef2:	af 91       	pop	r26
    2ef4:	9f 91       	pop	r25
    2ef6:	8f 91       	pop	r24
    2ef8:	7f 91       	pop	r23
    2efa:	6f 91       	pop	r22
    2efc:	5f 91       	pop	r21
    2efe:	4f 91       	pop	r20
    2f00:	3f 91       	pop	r19
    2f02:	2f 91       	pop	r18
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	1f 90       	pop	r1
    2f0c:	18 95       	reti

00002f0e <timer0_init>:
    2f0e:	93 b7       	in	r25, 0x33	; 51
    2f10:	98 60       	ori	r25, 0x08	; 8
    2f12:	93 bf       	out	0x33, r25	; 51
    2f14:	6c bf       	out	0x3c, r22	; 60
    2f16:	82 30       	cpi	r24, 0x02	; 2
    2f18:	99 f0       	breq	.+38     	; 0x2f40 <timer0_init+0x32>
    2f1a:	28 f4       	brcc	.+10     	; 0x2f26 <timer0_init+0x18>
    2f1c:	88 23       	and	r24, r24
    2f1e:	41 f0       	breq	.+16     	; 0x2f30 <timer0_init+0x22>
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	51 f0       	breq	.+20     	; 0x2f38 <timer0_init+0x2a>
    2f24:	19 c0       	rjmp	.+50     	; 0x2f58 <timer0_init+0x4a>
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	79 f0       	breq	.+30     	; 0x2f48 <timer0_init+0x3a>
    2f2a:	84 30       	cpi	r24, 0x04	; 4
    2f2c:	89 f0       	breq	.+34     	; 0x2f50 <timer0_init+0x42>
    2f2e:	14 c0       	rjmp	.+40     	; 0x2f58 <timer0_init+0x4a>
    2f30:	83 b7       	in	r24, 0x33	; 51
    2f32:	81 60       	ori	r24, 0x01	; 1
    2f34:	83 bf       	out	0x33, r24	; 51
    2f36:	13 c0       	rjmp	.+38     	; 0x2f5e <timer0_init+0x50>
    2f38:	83 b7       	in	r24, 0x33	; 51
    2f3a:	82 60       	ori	r24, 0x02	; 2
    2f3c:	83 bf       	out	0x33, r24	; 51
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <timer0_init+0x50>
    2f40:	83 b7       	in	r24, 0x33	; 51
    2f42:	83 60       	ori	r24, 0x03	; 3
    2f44:	83 bf       	out	0x33, r24	; 51
    2f46:	0b c0       	rjmp	.+22     	; 0x2f5e <timer0_init+0x50>
    2f48:	83 b7       	in	r24, 0x33	; 51
    2f4a:	84 60       	ori	r24, 0x04	; 4
    2f4c:	83 bf       	out	0x33, r24	; 51
    2f4e:	07 c0       	rjmp	.+14     	; 0x2f5e <timer0_init+0x50>
    2f50:	83 b7       	in	r24, 0x33	; 51
    2f52:	85 60       	ori	r24, 0x05	; 5
    2f54:	83 bf       	out	0x33, r24	; 51
    2f56:	03 c0       	rjmp	.+6      	; 0x2f5e <timer0_init+0x50>
    2f58:	83 b7       	in	r24, 0x33	; 51
    2f5a:	81 60       	ori	r24, 0x01	; 1
    2f5c:	83 bf       	out	0x33, r24	; 51
    2f5e:	89 b7       	in	r24, 0x39	; 57
    2f60:	82 60       	ori	r24, 0x02	; 2
    2f62:	89 bf       	out	0x39, r24	; 57
    2f64:	08 95       	ret

00002f66 <evTime_init>:
    2f66:	23 e0       	ldi	r18, 0x03	; 3
    2f68:	fc 01       	movw	r30, r24
    2f6a:	24 83       	std	Z+4, r18	; 0x04
    2f6c:	10 82       	st	Z, r1
    2f6e:	11 82       	std	Z+1, r1	; 0x01
    2f70:	12 82       	std	Z+2, r1	; 0x02
    2f72:	13 82       	std	Z+3, r1	; 0x03
    2f74:	08 95       	ret

00002f76 <evTime_start>:
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	21 e0       	ldi	r18, 0x01	; 1
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	24 83       	std	Z+4, r18	; 0x04
    2f80:	00 91 af 04 	lds	r16, 0x04AF	; 0x8004af <mktime+0x2>
    2f84:	10 91 b0 04 	lds	r17, 0x04B0	; 0x8004b0 <mktime+0x3>
    2f88:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <mktime+0x4>
    2f8c:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <mktime+0x5>
    2f90:	40 0f       	add	r20, r16
    2f92:	51 1f       	adc	r21, r17
    2f94:	62 1f       	adc	r22, r18
    2f96:	73 1f       	adc	r23, r19
    2f98:	40 83       	st	Z, r20
    2f9a:	51 83       	std	Z+1, r21	; 0x01
    2f9c:	62 83       	std	Z+2, r22	; 0x02
    2f9e:	73 83       	std	Z+3, r23	; 0x03
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	08 95       	ret

00002fa6 <evTime_is_stated>:
    2fa6:	21 e0       	ldi	r18, 0x01	; 1
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	fc 01       	movw	r30, r24
    2fac:	84 81       	ldd	r24, Z+4	; 0x04
    2fae:	81 30       	cpi	r24, 0x01	; 1
    2fb0:	11 f0       	breq	.+4      	; 0x2fb6 <evTime_is_stated+0x10>
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	c9 01       	movw	r24, r18
    2fb8:	08 95       	ret

00002fba <evTime_check>:

int evTime_check(evTime * evt)
{
    2fba:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2fbc:	84 81       	ldd	r24, Z+4	; 0x04
    2fbe:	81 30       	cpi	r24, 0x01	; 1
    2fc0:	b1 f4       	brne	.+44     	; 0x2fee <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2fc2:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <mktime+0x2>
    2fc6:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <mktime+0x3>
    2fca:	a0 91 b1 04 	lds	r26, 0x04B1	; 0x8004b1 <mktime+0x4>
    2fce:	b0 91 b2 04 	lds	r27, 0x04B2	; 0x8004b2 <mktime+0x5>
    2fd2:	40 81       	ld	r20, Z
    2fd4:	51 81       	ldd	r21, Z+1	; 0x01
    2fd6:	62 81       	ldd	r22, Z+2	; 0x02
    2fd8:	73 81       	ldd	r23, Z+3	; 0x03
    2fda:	48 17       	cp	r20, r24
    2fdc:	59 07       	cpc	r21, r25
    2fde:	6a 07       	cpc	r22, r26
    2fe0:	7b 07       	cpc	r23, r27
    2fe2:	40 f4       	brcc	.+16     	; 0x2ff4 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	9f ef       	ldi	r25, 0xFF	; 255
    2ff2:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2ff8:	08 95       	ret

00002ffa <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2ffa:	21 e0       	ldi	r18, 0x01	; 1
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	fc 01       	movw	r30, r24
    3000:	84 81       	ldd	r24, Z+4	; 0x04
    3002:	83 30       	cpi	r24, 0x03	; 3
    3004:	11 f0       	breq	.+4      	; 0x300a <evTime_off+0x10>
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
}
    300a:	c9 01       	movw	r24, r18
    300c:	08 95       	ret

0000300e <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    300e:	cf 92       	push	r12
    3010:	df 92       	push	r13
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	ec 01       	movw	r28, r24
    3020:	6a 01       	movw	r12, r20
    3022:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	81 11       	cpse	r24, r1
    3028:	06 c0       	rjmp	.+12     	; 0x3036 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    302a:	83 e0       	ldi	r24, 0x03	; 3
    302c:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    302e:	18 82       	st	Y, r1
    3030:	19 82       	std	Y+1, r1	; 0x01
    3032:	1a 82       	std	Y+2, r1	; 0x02
    3034:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    3036:	ce 01       	movw	r24, r28
    3038:	0e 94 dd 17 	call	0x2fba	; 0x2fba <evTime_check>
    303c:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	31 f4       	brne	.+12     	; 0x304e <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    3042:	b7 01       	movw	r22, r14
    3044:	a6 01       	movw	r20, r12
    3046:	ce 01       	movw	r24, r28
    3048:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
		return 1;
    304c:	0d c0       	rjmp	.+26     	; 0x3068 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    304e:	8c 81       	ldd	r24, Y+4	; 0x04
    3050:	83 30       	cpi	r24, 0x03	; 3
    3052:	41 f4       	brne	.+16     	; 0x3064 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    3054:	b7 01       	movw	r22, r14
    3056:	a6 01       	movw	r20, r12
    3058:	ce 01       	movw	r24, r28
    305a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_start>
	}
	return 0;
    305e:	00 e0       	ldi	r16, 0x00	; 0
    3060:	10 e0       	ldi	r17, 0x00	; 0
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <evTime_process_period+0x5a>
    3064:	00 e0       	ldi	r16, 0x00	; 0
    3066:	10 e0       	ldi	r17, 0x00	; 0
}
    3068:	c8 01       	movw	r24, r16
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	ef 90       	pop	r14
    3076:	df 90       	pop	r13
    3078:	cf 90       	pop	r12
    307a:	08 95       	ret

0000307c <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    307c:	1f 92       	push	r1
    307e:	0f 92       	push	r0
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	0f 92       	push	r0
    3084:	11 24       	eor	r1, r1
    3086:	2f 93       	push	r18
    3088:	3f 93       	push	r19
    308a:	4f 93       	push	r20
    308c:	5f 93       	push	r21
    308e:	8f 93       	push	r24
    3090:	9f 93       	push	r25
    3092:	ef 93       	push	r30
    3094:	ff 93       	push	r31
    3096:	2b b1       	in	r18, 0x0b	; 11
    3098:	3c b1       	in	r19, 0x0c	; 12
    309a:	28 71       	andi	r18, 0x18	; 24
    309c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <UART_RxHead>
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <UART_RxTail>
    30a8:	50 e0       	ldi	r21, 0x00	; 0
    30aa:	84 17       	cp	r24, r20
    30ac:	95 07       	cpc	r25, r21
    30ae:	39 f0       	breq	.+14     	; 0x30be <__vector_13+0x42>
    30b0:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <UART_RxHead>
    30b4:	fc 01       	movw	r30, r24
    30b6:	e6 5f       	subi	r30, 0xF6	; 246
    30b8:	fc 4f       	sbci	r31, 0xFC	; 252
    30ba:	30 83       	st	Z, r19
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <__vector_13+0x44>
    30be:	22 e0       	ldi	r18, 0x02	; 2
    30c0:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <UART_LastRxError>
    30c4:	ff 91       	pop	r31
    30c6:	ef 91       	pop	r30
    30c8:	9f 91       	pop	r25
    30ca:	8f 91       	pop	r24
    30cc:	5f 91       	pop	r21
    30ce:	4f 91       	pop	r20
    30d0:	3f 91       	pop	r19
    30d2:	2f 91       	pop	r18
    30d4:	0f 90       	pop	r0
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	0f 90       	pop	r0
    30da:	1f 90       	pop	r1
    30dc:	18 95       	reti

000030de <__vector_14>:
    30de:	1f 92       	push	r1
    30e0:	0f 92       	push	r0
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	0f 92       	push	r0
    30e6:	11 24       	eor	r1, r1
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	ef 93       	push	r30
    30ee:	ff 93       	push	r31
    30f0:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <UART_TxHead>
    30f4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <UART_TxTail>
    30f8:	98 17       	cp	r25, r24
    30fa:	71 f0       	breq	.+28     	; 0x3118 <__vector_14+0x3a>
    30fc:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <UART_TxTail>
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	8f 77       	andi	r24, 0x7F	; 127
    3106:	99 27       	eor	r25, r25
    3108:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <UART_TxTail>
    310c:	fc 01       	movw	r30, r24
    310e:	e6 5f       	subi	r30, 0xF6	; 246
    3110:	fc 4f       	sbci	r31, 0xFC	; 252
    3112:	80 81       	ld	r24, Z
    3114:	8c b9       	out	0x0c, r24	; 12
    3116:	01 c0       	rjmp	.+2      	; 0x311a <__vector_14+0x3c>
    3118:	55 98       	cbi	0x0a, 5	; 10
    311a:	ff 91       	pop	r31
    311c:	ef 91       	pop	r30
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	0f 90       	pop	r0
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	0f 90       	pop	r0
    3128:	1f 90       	pop	r1
    312a:	18 95       	reti

0000312c <uart0_init>:
    312c:	f8 94       	cli
    312e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <UART_TxHead>
    3132:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <UART_TxTail>
    3136:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <UART_RxHead>
    313a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <UART_RxTail>
    313e:	78 94       	sei
    3140:	99 23       	and	r25, r25
    3142:	1c f4       	brge	.+6      	; 0x314a <uart0_init+0x1e>
    3144:	22 e0       	ldi	r18, 0x02	; 2
    3146:	2b b9       	out	0x0b, r18	; 11
    3148:	9f 77       	andi	r25, 0x7F	; 127
    314a:	90 bd       	out	0x20, r25	; 32
    314c:	89 b9       	out	0x09, r24	; 9
    314e:	88 e9       	ldi	r24, 0x98	; 152
    3150:	8a b9       	out	0x0a, r24	; 10
    3152:	86 e8       	ldi	r24, 0x86	; 134
    3154:	80 bd       	out	0x20, r24	; 32
    3156:	08 95       	ret

00003158 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    3158:	40 91 09 03 	lds	r20, 0x0309	; 0x800309 <UART_TxHead>
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	4f 5f       	subi	r20, 0xFF	; 255
    3160:	5f 4f       	sbci	r21, 0xFF	; 255
    3162:	4f 77       	andi	r20, 0x7F	; 127
    3164:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    3166:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <UART_TxTail>
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	42 17       	cp	r20, r18
    316e:	53 07       	cpc	r21, r19
    3170:	d1 f3       	breq	.-12     	; 0x3166 <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3172:	fa 01       	movw	r30, r20
    3174:	e6 5f       	subi	r30, 0xF6	; 246
    3176:	fc 4f       	sbci	r31, 0xFC	; 252
    3178:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    317a:	40 93 09 03 	sts	0x0309, r20	; 0x800309 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    317e:	55 9a       	sbi	0x0a, 5	; 10
    3180:	08 95       	ret

00003182 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
	while (*s) {
    3188:	88 81       	ld	r24, Y
    318a:	88 23       	and	r24, r24
    318c:	31 f0       	breq	.+12     	; 0x319a <uart0_puts+0x18>
    318e:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    3190:	0e 94 ac 18 	call	0x3158	; 0x3158 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    3194:	89 91       	ld	r24, Y+
    3196:	81 11       	cpse	r24, r1
    3198:	fb cf       	rjmp	.-10     	; 0x3190 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	08 95       	ret

000031a0 <__subsf3>:
    31a0:	50 58       	subi	r21, 0x80	; 128

000031a2 <__addsf3>:
    31a2:	bb 27       	eor	r27, r27
    31a4:	aa 27       	eor	r26, r26
    31a6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__addsf3x>
    31aa:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_round>
    31ae:	0e 94 4f 1a 	call	0x349e	; 0x349e <__fp_pscA>
    31b2:	38 f0       	brcs	.+14     	; 0x31c2 <__addsf3+0x20>
    31b4:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__fp_pscB>
    31b8:	20 f0       	brcs	.+8      	; 0x31c2 <__addsf3+0x20>
    31ba:	39 f4       	brne	.+14     	; 0x31ca <__addsf3+0x28>
    31bc:	9f 3f       	cpi	r25, 0xFF	; 255
    31be:	19 f4       	brne	.+6      	; 0x31c6 <__addsf3+0x24>
    31c0:	26 f4       	brtc	.+8      	; 0x31ca <__addsf3+0x28>
    31c2:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>
    31c6:	0e f4       	brtc	.+2      	; 0x31ca <__addsf3+0x28>
    31c8:	e0 95       	com	r30
    31ca:	e7 fb       	bst	r30, 7
    31cc:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>

000031d0 <__addsf3x>:
    31d0:	e9 2f       	mov	r30, r25
    31d2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__fp_split3>
    31d6:	58 f3       	brcs	.-42     	; 0x31ae <__addsf3+0xc>
    31d8:	ba 17       	cp	r27, r26
    31da:	62 07       	cpc	r22, r18
    31dc:	73 07       	cpc	r23, r19
    31de:	84 07       	cpc	r24, r20
    31e0:	95 07       	cpc	r25, r21
    31e2:	20 f0       	brcs	.+8      	; 0x31ec <__addsf3x+0x1c>
    31e4:	79 f4       	brne	.+30     	; 0x3204 <__addsf3x+0x34>
    31e6:	a6 f5       	brtc	.+104    	; 0x3250 <__addsf3x+0x80>
    31e8:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__fp_zero>
    31ec:	0e f4       	brtc	.+2      	; 0x31f0 <__addsf3x+0x20>
    31ee:	e0 95       	com	r30
    31f0:	0b 2e       	mov	r0, r27
    31f2:	ba 2f       	mov	r27, r26
    31f4:	a0 2d       	mov	r26, r0
    31f6:	0b 01       	movw	r0, r22
    31f8:	b9 01       	movw	r22, r18
    31fa:	90 01       	movw	r18, r0
    31fc:	0c 01       	movw	r0, r24
    31fe:	ca 01       	movw	r24, r20
    3200:	a0 01       	movw	r20, r0
    3202:	11 24       	eor	r1, r1
    3204:	ff 27       	eor	r31, r31
    3206:	59 1b       	sub	r21, r25
    3208:	99 f0       	breq	.+38     	; 0x3230 <__addsf3x+0x60>
    320a:	59 3f       	cpi	r21, 0xF9	; 249
    320c:	50 f4       	brcc	.+20     	; 0x3222 <__addsf3x+0x52>
    320e:	50 3e       	cpi	r21, 0xE0	; 224
    3210:	68 f1       	brcs	.+90     	; 0x326c <__addsf3x+0x9c>
    3212:	1a 16       	cp	r1, r26
    3214:	f0 40       	sbci	r31, 0x00	; 0
    3216:	a2 2f       	mov	r26, r18
    3218:	23 2f       	mov	r18, r19
    321a:	34 2f       	mov	r19, r20
    321c:	44 27       	eor	r20, r20
    321e:	58 5f       	subi	r21, 0xF8	; 248
    3220:	f3 cf       	rjmp	.-26     	; 0x3208 <__addsf3x+0x38>
    3222:	46 95       	lsr	r20
    3224:	37 95       	ror	r19
    3226:	27 95       	ror	r18
    3228:	a7 95       	ror	r26
    322a:	f0 40       	sbci	r31, 0x00	; 0
    322c:	53 95       	inc	r21
    322e:	c9 f7       	brne	.-14     	; 0x3222 <__addsf3x+0x52>
    3230:	7e f4       	brtc	.+30     	; 0x3250 <__addsf3x+0x80>
    3232:	1f 16       	cp	r1, r31
    3234:	ba 0b       	sbc	r27, r26
    3236:	62 0b       	sbc	r22, r18
    3238:	73 0b       	sbc	r23, r19
    323a:	84 0b       	sbc	r24, r20
    323c:	ba f0       	brmi	.+46     	; 0x326c <__addsf3x+0x9c>
    323e:	91 50       	subi	r25, 0x01	; 1
    3240:	a1 f0       	breq	.+40     	; 0x326a <__addsf3x+0x9a>
    3242:	ff 0f       	add	r31, r31
    3244:	bb 1f       	adc	r27, r27
    3246:	66 1f       	adc	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	88 1f       	adc	r24, r24
    324c:	c2 f7       	brpl	.-16     	; 0x323e <__addsf3x+0x6e>
    324e:	0e c0       	rjmp	.+28     	; 0x326c <__addsf3x+0x9c>
    3250:	ba 0f       	add	r27, r26
    3252:	62 1f       	adc	r22, r18
    3254:	73 1f       	adc	r23, r19
    3256:	84 1f       	adc	r24, r20
    3258:	48 f4       	brcc	.+18     	; 0x326c <__addsf3x+0x9c>
    325a:	87 95       	ror	r24
    325c:	77 95       	ror	r23
    325e:	67 95       	ror	r22
    3260:	b7 95       	ror	r27
    3262:	f7 95       	ror	r31
    3264:	9e 3f       	cpi	r25, 0xFE	; 254
    3266:	08 f0       	brcs	.+2      	; 0x326a <__addsf3x+0x9a>
    3268:	b0 cf       	rjmp	.-160    	; 0x31ca <__addsf3+0x28>
    326a:	93 95       	inc	r25
    326c:	88 0f       	add	r24, r24
    326e:	08 f0       	brcs	.+2      	; 0x3272 <__addsf3x+0xa2>
    3270:	99 27       	eor	r25, r25
    3272:	ee 0f       	add	r30, r30
    3274:	97 95       	ror	r25
    3276:	87 95       	ror	r24
    3278:	08 95       	ret

0000327a <__divsf3>:
    327a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__divsf3x>
    327e:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_round>
    3282:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__fp_pscB>
    3286:	58 f0       	brcs	.+22     	; 0x329e <__divsf3+0x24>
    3288:	0e 94 4f 1a 	call	0x349e	; 0x349e <__fp_pscA>
    328c:	40 f0       	brcs	.+16     	; 0x329e <__divsf3+0x24>
    328e:	29 f4       	brne	.+10     	; 0x329a <__divsf3+0x20>
    3290:	5f 3f       	cpi	r21, 0xFF	; 255
    3292:	29 f0       	breq	.+10     	; 0x329e <__divsf3+0x24>
    3294:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    3298:	51 11       	cpse	r21, r1
    329a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>
    329e:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>

000032a2 <__divsf3x>:
    32a2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__fp_split3>
    32a6:	68 f3       	brcs	.-38     	; 0x3282 <__divsf3+0x8>

000032a8 <__divsf3_pse>:
    32a8:	99 23       	and	r25, r25
    32aa:	b1 f3       	breq	.-20     	; 0x3298 <__divsf3+0x1e>
    32ac:	55 23       	and	r21, r21
    32ae:	91 f3       	breq	.-28     	; 0x3294 <__divsf3+0x1a>
    32b0:	95 1b       	sub	r25, r21
    32b2:	55 0b       	sbc	r21, r21
    32b4:	bb 27       	eor	r27, r27
    32b6:	aa 27       	eor	r26, r26
    32b8:	62 17       	cp	r22, r18
    32ba:	73 07       	cpc	r23, r19
    32bc:	84 07       	cpc	r24, r20
    32be:	38 f0       	brcs	.+14     	; 0x32ce <__divsf3_pse+0x26>
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	5f 4f       	sbci	r21, 0xFF	; 255
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	44 1f       	adc	r20, r20
    32ca:	aa 1f       	adc	r26, r26
    32cc:	a9 f3       	breq	.-22     	; 0x32b8 <__divsf3_pse+0x10>
    32ce:	35 d0       	rcall	.+106    	; 0x333a <__divsf3_pse+0x92>
    32d0:	0e 2e       	mov	r0, r30
    32d2:	3a f0       	brmi	.+14     	; 0x32e2 <__divsf3_pse+0x3a>
    32d4:	e0 e8       	ldi	r30, 0x80	; 128
    32d6:	32 d0       	rcall	.+100    	; 0x333c <__divsf3_pse+0x94>
    32d8:	91 50       	subi	r25, 0x01	; 1
    32da:	50 40       	sbci	r21, 0x00	; 0
    32dc:	e6 95       	lsr	r30
    32de:	00 1c       	adc	r0, r0
    32e0:	ca f7       	brpl	.-14     	; 0x32d4 <__divsf3_pse+0x2c>
    32e2:	2b d0       	rcall	.+86     	; 0x333a <__divsf3_pse+0x92>
    32e4:	fe 2f       	mov	r31, r30
    32e6:	29 d0       	rcall	.+82     	; 0x333a <__divsf3_pse+0x92>
    32e8:	66 0f       	add	r22, r22
    32ea:	77 1f       	adc	r23, r23
    32ec:	88 1f       	adc	r24, r24
    32ee:	bb 1f       	adc	r27, r27
    32f0:	26 17       	cp	r18, r22
    32f2:	37 07       	cpc	r19, r23
    32f4:	48 07       	cpc	r20, r24
    32f6:	ab 07       	cpc	r26, r27
    32f8:	b0 e8       	ldi	r27, 0x80	; 128
    32fa:	09 f0       	breq	.+2      	; 0x32fe <__divsf3_pse+0x56>
    32fc:	bb 0b       	sbc	r27, r27
    32fe:	80 2d       	mov	r24, r0
    3300:	bf 01       	movw	r22, r30
    3302:	ff 27       	eor	r31, r31
    3304:	93 58       	subi	r25, 0x83	; 131
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	3a f0       	brmi	.+14     	; 0x3318 <__divsf3_pse+0x70>
    330a:	9e 3f       	cpi	r25, 0xFE	; 254
    330c:	51 05       	cpc	r21, r1
    330e:	78 f0       	brcs	.+30     	; 0x332e <__divsf3_pse+0x86>
    3310:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    3314:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>
    3318:	5f 3f       	cpi	r21, 0xFF	; 255
    331a:	e4 f3       	brlt	.-8      	; 0x3314 <__divsf3_pse+0x6c>
    331c:	98 3e       	cpi	r25, 0xE8	; 232
    331e:	d4 f3       	brlt	.-12     	; 0x3314 <__divsf3_pse+0x6c>
    3320:	86 95       	lsr	r24
    3322:	77 95       	ror	r23
    3324:	67 95       	ror	r22
    3326:	b7 95       	ror	r27
    3328:	f7 95       	ror	r31
    332a:	9f 5f       	subi	r25, 0xFF	; 255
    332c:	c9 f7       	brne	.-14     	; 0x3320 <__divsf3_pse+0x78>
    332e:	88 0f       	add	r24, r24
    3330:	91 1d       	adc	r25, r1
    3332:	96 95       	lsr	r25
    3334:	87 95       	ror	r24
    3336:	97 f9       	bld	r25, 7
    3338:	08 95       	ret
    333a:	e1 e0       	ldi	r30, 0x01	; 1
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	88 1f       	adc	r24, r24
    3342:	bb 1f       	adc	r27, r27
    3344:	62 17       	cp	r22, r18
    3346:	73 07       	cpc	r23, r19
    3348:	84 07       	cpc	r24, r20
    334a:	ba 07       	cpc	r27, r26
    334c:	20 f0       	brcs	.+8      	; 0x3356 <__divsf3_pse+0xae>
    334e:	62 1b       	sub	r22, r18
    3350:	73 0b       	sbc	r23, r19
    3352:	84 0b       	sbc	r24, r20
    3354:	ba 0b       	sbc	r27, r26
    3356:	ee 1f       	adc	r30, r30
    3358:	88 f7       	brcc	.-30     	; 0x333c <__divsf3_pse+0x94>
    335a:	e0 95       	com	r30
    335c:	08 95       	ret

0000335e <__fixsfsi>:
    335e:	0e 94 b6 19 	call	0x336c	; 0x336c <__fixunssfsi>
    3362:	68 94       	set
    3364:	b1 11       	cpse	r27, r1
    3366:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>
    336a:	08 95       	ret

0000336c <__fixunssfsi>:
    336c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_splitA>
    3370:	88 f0       	brcs	.+34     	; 0x3394 <__fixunssfsi+0x28>
    3372:	9f 57       	subi	r25, 0x7F	; 127
    3374:	98 f0       	brcs	.+38     	; 0x339c <__fixunssfsi+0x30>
    3376:	b9 2f       	mov	r27, r25
    3378:	99 27       	eor	r25, r25
    337a:	b7 51       	subi	r27, 0x17	; 23
    337c:	b0 f0       	brcs	.+44     	; 0x33aa <__fixunssfsi+0x3e>
    337e:	e1 f0       	breq	.+56     	; 0x33b8 <__fixunssfsi+0x4c>
    3380:	66 0f       	add	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	1a f0       	brmi	.+6      	; 0x3390 <__fixunssfsi+0x24>
    338a:	ba 95       	dec	r27
    338c:	c9 f7       	brne	.-14     	; 0x3380 <__fixunssfsi+0x14>
    338e:	14 c0       	rjmp	.+40     	; 0x33b8 <__fixunssfsi+0x4c>
    3390:	b1 30       	cpi	r27, 0x01	; 1
    3392:	91 f0       	breq	.+36     	; 0x33b8 <__fixunssfsi+0x4c>
    3394:	0e 94 90 1a 	call	0x3520	; 0x3520 <__fp_zero>
    3398:	b1 e0       	ldi	r27, 0x01	; 1
    339a:	08 95       	ret
    339c:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__fp_zero>
    33a0:	67 2f       	mov	r22, r23
    33a2:	78 2f       	mov	r23, r24
    33a4:	88 27       	eor	r24, r24
    33a6:	b8 5f       	subi	r27, 0xF8	; 248
    33a8:	39 f0       	breq	.+14     	; 0x33b8 <__fixunssfsi+0x4c>
    33aa:	b9 3f       	cpi	r27, 0xF9	; 249
    33ac:	cc f3       	brlt	.-14     	; 0x33a0 <__fixunssfsi+0x34>
    33ae:	86 95       	lsr	r24
    33b0:	77 95       	ror	r23
    33b2:	67 95       	ror	r22
    33b4:	b3 95       	inc	r27
    33b6:	d9 f7       	brne	.-10     	; 0x33ae <__fixunssfsi+0x42>
    33b8:	3e f4       	brtc	.+14     	; 0x33c8 <__fixunssfsi+0x5c>
    33ba:	90 95       	com	r25
    33bc:	80 95       	com	r24
    33be:	70 95       	com	r23
    33c0:	61 95       	neg	r22
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	8f 4f       	sbci	r24, 0xFF	; 255
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	08 95       	ret

000033ca <__floatunsisf>:
    33ca:	e8 94       	clt
    33cc:	09 c0       	rjmp	.+18     	; 0x33e0 <__floatsisf+0x12>

000033ce <__floatsisf>:
    33ce:	97 fb       	bst	r25, 7
    33d0:	3e f4       	brtc	.+14     	; 0x33e0 <__floatsisf+0x12>
    33d2:	90 95       	com	r25
    33d4:	80 95       	com	r24
    33d6:	70 95       	com	r23
    33d8:	61 95       	neg	r22
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	8f 4f       	sbci	r24, 0xFF	; 255
    33de:	9f 4f       	sbci	r25, 0xFF	; 255
    33e0:	99 23       	and	r25, r25
    33e2:	a9 f0       	breq	.+42     	; 0x340e <__floatsisf+0x40>
    33e4:	f9 2f       	mov	r31, r25
    33e6:	96 e9       	ldi	r25, 0x96	; 150
    33e8:	bb 27       	eor	r27, r27
    33ea:	93 95       	inc	r25
    33ec:	f6 95       	lsr	r31
    33ee:	87 95       	ror	r24
    33f0:	77 95       	ror	r23
    33f2:	67 95       	ror	r22
    33f4:	b7 95       	ror	r27
    33f6:	f1 11       	cpse	r31, r1
    33f8:	f8 cf       	rjmp	.-16     	; 0x33ea <__floatsisf+0x1c>
    33fa:	fa f4       	brpl	.+62     	; 0x343a <__floatsisf+0x6c>
    33fc:	bb 0f       	add	r27, r27
    33fe:	11 f4       	brne	.+4      	; 0x3404 <__floatsisf+0x36>
    3400:	60 ff       	sbrs	r22, 0
    3402:	1b c0       	rjmp	.+54     	; 0x343a <__floatsisf+0x6c>
    3404:	6f 5f       	subi	r22, 0xFF	; 255
    3406:	7f 4f       	sbci	r23, 0xFF	; 255
    3408:	8f 4f       	sbci	r24, 0xFF	; 255
    340a:	9f 4f       	sbci	r25, 0xFF	; 255
    340c:	16 c0       	rjmp	.+44     	; 0x343a <__floatsisf+0x6c>
    340e:	88 23       	and	r24, r24
    3410:	11 f0       	breq	.+4      	; 0x3416 <__floatsisf+0x48>
    3412:	96 e9       	ldi	r25, 0x96	; 150
    3414:	11 c0       	rjmp	.+34     	; 0x3438 <__floatsisf+0x6a>
    3416:	77 23       	and	r23, r23
    3418:	21 f0       	breq	.+8      	; 0x3422 <__floatsisf+0x54>
    341a:	9e e8       	ldi	r25, 0x8E	; 142
    341c:	87 2f       	mov	r24, r23
    341e:	76 2f       	mov	r23, r22
    3420:	05 c0       	rjmp	.+10     	; 0x342c <__floatsisf+0x5e>
    3422:	66 23       	and	r22, r22
    3424:	71 f0       	breq	.+28     	; 0x3442 <__floatsisf+0x74>
    3426:	96 e8       	ldi	r25, 0x86	; 134
    3428:	86 2f       	mov	r24, r22
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	2a f0       	brmi	.+10     	; 0x343a <__floatsisf+0x6c>
    3430:	9a 95       	dec	r25
    3432:	66 0f       	add	r22, r22
    3434:	77 1f       	adc	r23, r23
    3436:	88 1f       	adc	r24, r24
    3438:	da f7       	brpl	.-10     	; 0x3430 <__floatsisf+0x62>
    343a:	88 0f       	add	r24, r24
    343c:	96 95       	lsr	r25
    343e:	87 95       	ror	r24
    3440:	97 f9       	bld	r25, 7
    3442:	08 95       	ret

00003444 <__fp_cmp>:
    3444:	99 0f       	add	r25, r25
    3446:	00 08       	sbc	r0, r0
    3448:	55 0f       	add	r21, r21
    344a:	aa 0b       	sbc	r26, r26
    344c:	e0 e8       	ldi	r30, 0x80	; 128
    344e:	fe ef       	ldi	r31, 0xFE	; 254
    3450:	16 16       	cp	r1, r22
    3452:	17 06       	cpc	r1, r23
    3454:	e8 07       	cpc	r30, r24
    3456:	f9 07       	cpc	r31, r25
    3458:	c0 f0       	brcs	.+48     	; 0x348a <__fp_cmp+0x46>
    345a:	12 16       	cp	r1, r18
    345c:	13 06       	cpc	r1, r19
    345e:	e4 07       	cpc	r30, r20
    3460:	f5 07       	cpc	r31, r21
    3462:	98 f0       	brcs	.+38     	; 0x348a <__fp_cmp+0x46>
    3464:	62 1b       	sub	r22, r18
    3466:	73 0b       	sbc	r23, r19
    3468:	84 0b       	sbc	r24, r20
    346a:	95 0b       	sbc	r25, r21
    346c:	39 f4       	brne	.+14     	; 0x347c <__fp_cmp+0x38>
    346e:	0a 26       	eor	r0, r26
    3470:	61 f0       	breq	.+24     	; 0x348a <__fp_cmp+0x46>
    3472:	23 2b       	or	r18, r19
    3474:	24 2b       	or	r18, r20
    3476:	25 2b       	or	r18, r21
    3478:	21 f4       	brne	.+8      	; 0x3482 <__fp_cmp+0x3e>
    347a:	08 95       	ret
    347c:	0a 26       	eor	r0, r26
    347e:	09 f4       	brne	.+2      	; 0x3482 <__fp_cmp+0x3e>
    3480:	a1 40       	sbci	r26, 0x01	; 1
    3482:	a6 95       	lsr	r26
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	81 1d       	adc	r24, r1
    3488:	81 1d       	adc	r24, r1
    348a:	08 95       	ret

0000348c <__fp_inf>:
    348c:	97 f9       	bld	r25, 7
    348e:	9f 67       	ori	r25, 0x7F	; 127
    3490:	80 e8       	ldi	r24, 0x80	; 128
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	08 95       	ret

00003498 <__fp_nan>:
    3498:	9f ef       	ldi	r25, 0xFF	; 255
    349a:	80 ec       	ldi	r24, 0xC0	; 192
    349c:	08 95       	ret

0000349e <__fp_pscA>:
    349e:	00 24       	eor	r0, r0
    34a0:	0a 94       	dec	r0
    34a2:	16 16       	cp	r1, r22
    34a4:	17 06       	cpc	r1, r23
    34a6:	18 06       	cpc	r1, r24
    34a8:	09 06       	cpc	r0, r25
    34aa:	08 95       	ret

000034ac <__fp_pscB>:
    34ac:	00 24       	eor	r0, r0
    34ae:	0a 94       	dec	r0
    34b0:	12 16       	cp	r1, r18
    34b2:	13 06       	cpc	r1, r19
    34b4:	14 06       	cpc	r1, r20
    34b6:	05 06       	cpc	r0, r21
    34b8:	08 95       	ret

000034ba <__fp_round>:
    34ba:	09 2e       	mov	r0, r25
    34bc:	03 94       	inc	r0
    34be:	00 0c       	add	r0, r0
    34c0:	11 f4       	brne	.+4      	; 0x34c6 <__fp_round+0xc>
    34c2:	88 23       	and	r24, r24
    34c4:	52 f0       	brmi	.+20     	; 0x34da <__fp_round+0x20>
    34c6:	bb 0f       	add	r27, r27
    34c8:	40 f4       	brcc	.+16     	; 0x34da <__fp_round+0x20>
    34ca:	bf 2b       	or	r27, r31
    34cc:	11 f4       	brne	.+4      	; 0x34d2 <__fp_round+0x18>
    34ce:	60 ff       	sbrs	r22, 0
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <__fp_round+0x20>
    34d2:	6f 5f       	subi	r22, 0xFF	; 255
    34d4:	7f 4f       	sbci	r23, 0xFF	; 255
    34d6:	8f 4f       	sbci	r24, 0xFF	; 255
    34d8:	9f 4f       	sbci	r25, 0xFF	; 255
    34da:	08 95       	ret

000034dc <__fp_split3>:
    34dc:	57 fd       	sbrc	r21, 7
    34de:	90 58       	subi	r25, 0x80	; 128
    34e0:	44 0f       	add	r20, r20
    34e2:	55 1f       	adc	r21, r21
    34e4:	59 f0       	breq	.+22     	; 0x34fc <__fp_splitA+0x10>
    34e6:	5f 3f       	cpi	r21, 0xFF	; 255
    34e8:	71 f0       	breq	.+28     	; 0x3506 <__fp_splitA+0x1a>
    34ea:	47 95       	ror	r20

000034ec <__fp_splitA>:
    34ec:	88 0f       	add	r24, r24
    34ee:	97 fb       	bst	r25, 7
    34f0:	99 1f       	adc	r25, r25
    34f2:	61 f0       	breq	.+24     	; 0x350c <__fp_splitA+0x20>
    34f4:	9f 3f       	cpi	r25, 0xFF	; 255
    34f6:	79 f0       	breq	.+30     	; 0x3516 <__fp_splitA+0x2a>
    34f8:	87 95       	ror	r24
    34fa:	08 95       	ret
    34fc:	12 16       	cp	r1, r18
    34fe:	13 06       	cpc	r1, r19
    3500:	14 06       	cpc	r1, r20
    3502:	55 1f       	adc	r21, r21
    3504:	f2 cf       	rjmp	.-28     	; 0x34ea <__fp_split3+0xe>
    3506:	46 95       	lsr	r20
    3508:	f1 df       	rcall	.-30     	; 0x34ec <__fp_splitA>
    350a:	08 c0       	rjmp	.+16     	; 0x351c <__fp_splitA+0x30>
    350c:	16 16       	cp	r1, r22
    350e:	17 06       	cpc	r1, r23
    3510:	18 06       	cpc	r1, r24
    3512:	99 1f       	adc	r25, r25
    3514:	f1 cf       	rjmp	.-30     	; 0x34f8 <__fp_splitA+0xc>
    3516:	86 95       	lsr	r24
    3518:	71 05       	cpc	r23, r1
    351a:	61 05       	cpc	r22, r1
    351c:	08 94       	sec
    351e:	08 95       	ret

00003520 <__fp_zero>:
    3520:	e8 94       	clt

00003522 <__fp_szero>:
    3522:	bb 27       	eor	r27, r27
    3524:	66 27       	eor	r22, r22
    3526:	77 27       	eor	r23, r23
    3528:	cb 01       	movw	r24, r22
    352a:	97 f9       	bld	r25, 7
    352c:	08 95       	ret

0000352e <__gesf2>:
    352e:	0e 94 22 1a 	call	0x3444	; 0x3444 <__fp_cmp>
    3532:	08 f4       	brcc	.+2      	; 0x3536 <__gesf2+0x8>
    3534:	8f ef       	ldi	r24, 0xFF	; 255
    3536:	08 95       	ret

00003538 <__mulsf3>:
    3538:	0e 94 af 1a 	call	0x355e	; 0x355e <__mulsf3x>
    353c:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_round>
    3540:	0e 94 4f 1a 	call	0x349e	; 0x349e <__fp_pscA>
    3544:	38 f0       	brcs	.+14     	; 0x3554 <__mulsf3+0x1c>
    3546:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__fp_pscB>
    354a:	20 f0       	brcs	.+8      	; 0x3554 <__mulsf3+0x1c>
    354c:	95 23       	and	r25, r21
    354e:	11 f0       	breq	.+4      	; 0x3554 <__mulsf3+0x1c>
    3550:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    3554:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>
    3558:	11 24       	eor	r1, r1
    355a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>

0000355e <__mulsf3x>:
    355e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__fp_split3>
    3562:	70 f3       	brcs	.-36     	; 0x3540 <__mulsf3+0x8>

00003564 <__mulsf3_pse>:
    3564:	95 9f       	mul	r25, r21
    3566:	c1 f3       	breq	.-16     	; 0x3558 <__mulsf3+0x20>
    3568:	95 0f       	add	r25, r21
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	55 1f       	adc	r21, r21
    356e:	62 9f       	mul	r22, r18
    3570:	f0 01       	movw	r30, r0
    3572:	72 9f       	mul	r23, r18
    3574:	bb 27       	eor	r27, r27
    3576:	f0 0d       	add	r31, r0
    3578:	b1 1d       	adc	r27, r1
    357a:	63 9f       	mul	r22, r19
    357c:	aa 27       	eor	r26, r26
    357e:	f0 0d       	add	r31, r0
    3580:	b1 1d       	adc	r27, r1
    3582:	aa 1f       	adc	r26, r26
    3584:	64 9f       	mul	r22, r20
    3586:	66 27       	eor	r22, r22
    3588:	b0 0d       	add	r27, r0
    358a:	a1 1d       	adc	r26, r1
    358c:	66 1f       	adc	r22, r22
    358e:	82 9f       	mul	r24, r18
    3590:	22 27       	eor	r18, r18
    3592:	b0 0d       	add	r27, r0
    3594:	a1 1d       	adc	r26, r1
    3596:	62 1f       	adc	r22, r18
    3598:	73 9f       	mul	r23, r19
    359a:	b0 0d       	add	r27, r0
    359c:	a1 1d       	adc	r26, r1
    359e:	62 1f       	adc	r22, r18
    35a0:	83 9f       	mul	r24, r19
    35a2:	a0 0d       	add	r26, r0
    35a4:	61 1d       	adc	r22, r1
    35a6:	22 1f       	adc	r18, r18
    35a8:	74 9f       	mul	r23, r20
    35aa:	33 27       	eor	r19, r19
    35ac:	a0 0d       	add	r26, r0
    35ae:	61 1d       	adc	r22, r1
    35b0:	23 1f       	adc	r18, r19
    35b2:	84 9f       	mul	r24, r20
    35b4:	60 0d       	add	r22, r0
    35b6:	21 1d       	adc	r18, r1
    35b8:	82 2f       	mov	r24, r18
    35ba:	76 2f       	mov	r23, r22
    35bc:	6a 2f       	mov	r22, r26
    35be:	11 24       	eor	r1, r1
    35c0:	9f 57       	subi	r25, 0x7F	; 127
    35c2:	50 40       	sbci	r21, 0x00	; 0
    35c4:	9a f0       	brmi	.+38     	; 0x35ec <__mulsf3_pse+0x88>
    35c6:	f1 f0       	breq	.+60     	; 0x3604 <__mulsf3_pse+0xa0>
    35c8:	88 23       	and	r24, r24
    35ca:	4a f0       	brmi	.+18     	; 0x35de <__mulsf3_pse+0x7a>
    35cc:	ee 0f       	add	r30, r30
    35ce:	ff 1f       	adc	r31, r31
    35d0:	bb 1f       	adc	r27, r27
    35d2:	66 1f       	adc	r22, r22
    35d4:	77 1f       	adc	r23, r23
    35d6:	88 1f       	adc	r24, r24
    35d8:	91 50       	subi	r25, 0x01	; 1
    35da:	50 40       	sbci	r21, 0x00	; 0
    35dc:	a9 f7       	brne	.-22     	; 0x35c8 <__mulsf3_pse+0x64>
    35de:	9e 3f       	cpi	r25, 0xFE	; 254
    35e0:	51 05       	cpc	r21, r1
    35e2:	80 f0       	brcs	.+32     	; 0x3604 <__mulsf3_pse+0xa0>
    35e4:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    35e8:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>
    35ec:	5f 3f       	cpi	r21, 0xFF	; 255
    35ee:	e4 f3       	brlt	.-8      	; 0x35e8 <__mulsf3_pse+0x84>
    35f0:	98 3e       	cpi	r25, 0xE8	; 232
    35f2:	d4 f3       	brlt	.-12     	; 0x35e8 <__mulsf3_pse+0x84>
    35f4:	86 95       	lsr	r24
    35f6:	77 95       	ror	r23
    35f8:	67 95       	ror	r22
    35fa:	b7 95       	ror	r27
    35fc:	f7 95       	ror	r31
    35fe:	e7 95       	ror	r30
    3600:	9f 5f       	subi	r25, 0xFF	; 255
    3602:	c1 f7       	brne	.-16     	; 0x35f4 <__mulsf3_pse+0x90>
    3604:	fe 2b       	or	r31, r30
    3606:	88 0f       	add	r24, r24
    3608:	91 1d       	adc	r25, r1
    360a:	96 95       	lsr	r25
    360c:	87 95       	ror	r24
    360e:	97 f9       	bld	r25, 7
    3610:	08 95       	ret

00003612 <pow>:
    3612:	fa 01       	movw	r30, r20
    3614:	ee 0f       	add	r30, r30
    3616:	ff 1f       	adc	r31, r31
    3618:	30 96       	adiw	r30, 0x00	; 0
    361a:	21 05       	cpc	r18, r1
    361c:	31 05       	cpc	r19, r1
    361e:	a1 f1       	breq	.+104    	; 0x3688 <pow+0x76>
    3620:	61 15       	cp	r22, r1
    3622:	71 05       	cpc	r23, r1
    3624:	61 f4       	brne	.+24     	; 0x363e <pow+0x2c>
    3626:	80 38       	cpi	r24, 0x80	; 128
    3628:	bf e3       	ldi	r27, 0x3F	; 63
    362a:	9b 07       	cpc	r25, r27
    362c:	49 f1       	breq	.+82     	; 0x3680 <pow+0x6e>
    362e:	68 94       	set
    3630:	90 38       	cpi	r25, 0x80	; 128
    3632:	81 05       	cpc	r24, r1
    3634:	61 f0       	breq	.+24     	; 0x364e <pow+0x3c>
    3636:	80 38       	cpi	r24, 0x80	; 128
    3638:	bf ef       	ldi	r27, 0xFF	; 255
    363a:	9b 07       	cpc	r25, r27
    363c:	41 f0       	breq	.+16     	; 0x364e <pow+0x3c>
    363e:	99 23       	and	r25, r25
    3640:	4a f5       	brpl	.+82     	; 0x3694 <pow+0x82>
    3642:	ff 3f       	cpi	r31, 0xFF	; 255
    3644:	e1 05       	cpc	r30, r1
    3646:	31 05       	cpc	r19, r1
    3648:	21 05       	cpc	r18, r1
    364a:	19 f1       	breq	.+70     	; 0x3692 <pow+0x80>
    364c:	e8 94       	clt
    364e:	08 94       	sec
    3650:	e7 95       	ror	r30
    3652:	d9 01       	movw	r26, r18
    3654:	aa 23       	and	r26, r26
    3656:	29 f4       	brne	.+10     	; 0x3662 <pow+0x50>
    3658:	ab 2f       	mov	r26, r27
    365a:	be 2f       	mov	r27, r30
    365c:	f8 5f       	subi	r31, 0xF8	; 248
    365e:	d0 f3       	brcs	.-12     	; 0x3654 <pow+0x42>
    3660:	10 c0       	rjmp	.+32     	; 0x3682 <pow+0x70>
    3662:	ff 5f       	subi	r31, 0xFF	; 255
    3664:	70 f4       	brcc	.+28     	; 0x3682 <pow+0x70>
    3666:	a6 95       	lsr	r26
    3668:	e0 f7       	brcc	.-8      	; 0x3662 <pow+0x50>
    366a:	f7 39       	cpi	r31, 0x97	; 151
    366c:	50 f0       	brcs	.+20     	; 0x3682 <pow+0x70>
    366e:	19 f0       	breq	.+6      	; 0x3676 <pow+0x64>
    3670:	ff 3a       	cpi	r31, 0xAF	; 175
    3672:	38 f4       	brcc	.+14     	; 0x3682 <pow+0x70>
    3674:	9f 77       	andi	r25, 0x7F	; 127
    3676:	9f 93       	push	r25
    3678:	0d d0       	rcall	.+26     	; 0x3694 <pow+0x82>
    367a:	0f 90       	pop	r0
    367c:	07 fc       	sbrc	r0, 7
    367e:	90 58       	subi	r25, 0x80	; 128
    3680:	08 95       	ret
    3682:	46 f0       	brts	.+16     	; 0x3694 <pow+0x82>
    3684:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	80 e8       	ldi	r24, 0x80	; 128
    368e:	9f e3       	ldi	r25, 0x3F	; 63
    3690:	08 95       	ret
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	9f 77       	andi	r25, 0x7F	; 127
    3696:	5f 93       	push	r21
    3698:	4f 93       	push	r20
    369a:	3f 93       	push	r19
    369c:	2f 93       	push	r18
    369e:	0e 94 04 1c 	call	0x3808	; 0x3808 <log>
    36a2:	2f 91       	pop	r18
    36a4:	3f 91       	pop	r19
    36a6:	4f 91       	pop	r20
    36a8:	5f 91       	pop	r21
    36aa:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__mulsf3>
    36ae:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <exp>
    36b2:	29 f4       	brne	.+10     	; 0x36be <pow+0xac>
    36b4:	16 f0       	brts	.+4      	; 0x36ba <pow+0xa8>
    36b6:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    36ba:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__fp_zero>
    36be:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>

000036c2 <exp>:
    36c2:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_splitA>
    36c6:	a8 f3       	brcs	.-22     	; 0x36b2 <pow+0xa0>
    36c8:	96 38       	cpi	r25, 0x86	; 134
    36ca:	a0 f7       	brcc	.-24     	; 0x36b4 <pow+0xa2>
    36cc:	07 f8       	bld	r0, 7
    36ce:	0f 92       	push	r0
    36d0:	e8 94       	clt
    36d2:	2b e3       	ldi	r18, 0x3B	; 59
    36d4:	3a ea       	ldi	r19, 0xAA	; 170
    36d6:	48 eb       	ldi	r20, 0xB8	; 184
    36d8:	5f e7       	ldi	r21, 0x7F	; 127
    36da:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__mulsf3_pse>
    36de:	0f 92       	push	r0
    36e0:	0f 92       	push	r0
    36e2:	0f 92       	push	r0
    36e4:	4d b7       	in	r20, 0x3d	; 61
    36e6:	5e b7       	in	r21, 0x3e	; 62
    36e8:	0f 92       	push	r0
    36ea:	0e 94 4c 1c 	call	0x3898	; 0x3898 <modf>
    36ee:	e2 e5       	ldi	r30, 0x52	; 82
    36f0:	f2 e0       	ldi	r31, 0x02	; 2
    36f2:	0e 94 93 1b 	call	0x3726	; 0x3726 <__fp_powser>
    36f6:	4f 91       	pop	r20
    36f8:	5f 91       	pop	r21
    36fa:	ef 91       	pop	r30
    36fc:	ff 91       	pop	r31
    36fe:	e5 95       	asr	r30
    3700:	ee 1f       	adc	r30, r30
    3702:	ff 1f       	adc	r31, r31
    3704:	49 f0       	breq	.+18     	; 0x3718 <exp+0x56>
    3706:	fe 57       	subi	r31, 0x7E	; 126
    3708:	e0 68       	ori	r30, 0x80	; 128
    370a:	44 27       	eor	r20, r20
    370c:	ee 0f       	add	r30, r30
    370e:	44 1f       	adc	r20, r20
    3710:	fa 95       	dec	r31
    3712:	e1 f7       	brne	.-8      	; 0x370c <exp+0x4a>
    3714:	41 95       	neg	r20
    3716:	55 0b       	sbc	r21, r21
    3718:	0e 94 c6 1b 	call	0x378c	; 0x378c <ldexp>
    371c:	0f 90       	pop	r0
    371e:	07 fe       	sbrs	r0, 7
    3720:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <inverse>
    3724:	08 95       	ret

00003726 <__fp_powser>:
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	1f 93       	push	r17
    372c:	0f 93       	push	r16
    372e:	ff 92       	push	r15
    3730:	ef 92       	push	r14
    3732:	df 92       	push	r13
    3734:	7b 01       	movw	r14, r22
    3736:	8c 01       	movw	r16, r24
    3738:	68 94       	set
    373a:	06 c0       	rjmp	.+12     	; 0x3748 <__fp_powser+0x22>
    373c:	da 2e       	mov	r13, r26
    373e:	ef 01       	movw	r28, r30
    3740:	0e 94 af 1a 	call	0x355e	; 0x355e <__mulsf3x>
    3744:	fe 01       	movw	r30, r28
    3746:	e8 94       	clt
    3748:	a5 91       	lpm	r26, Z+
    374a:	25 91       	lpm	r18, Z+
    374c:	35 91       	lpm	r19, Z+
    374e:	45 91       	lpm	r20, Z+
    3750:	55 91       	lpm	r21, Z+
    3752:	a6 f3       	brts	.-24     	; 0x373c <__fp_powser+0x16>
    3754:	ef 01       	movw	r28, r30
    3756:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__addsf3x>
    375a:	fe 01       	movw	r30, r28
    375c:	97 01       	movw	r18, r14
    375e:	a8 01       	movw	r20, r16
    3760:	da 94       	dec	r13
    3762:	69 f7       	brne	.-38     	; 0x373e <__fp_powser+0x18>
    3764:	df 90       	pop	r13
    3766:	ef 90       	pop	r14
    3768:	ff 90       	pop	r15
    376a:	0f 91       	pop	r16
    376c:	1f 91       	pop	r17
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <inverse>:
    3774:	9b 01       	movw	r18, r22
    3776:	ac 01       	movw	r20, r24
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	70 e0       	ldi	r23, 0x00	; 0
    377c:	80 e8       	ldi	r24, 0x80	; 128
    377e:	9f e3       	ldi	r25, 0x3F	; 63
    3780:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__divsf3>
    3784:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>
    3788:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__fp_mpack>

0000378c <ldexp>:
    378c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_splitA>
    3790:	d8 f3       	brcs	.-10     	; 0x3788 <inverse+0x14>
    3792:	99 23       	and	r25, r25
    3794:	c9 f3       	breq	.-14     	; 0x3788 <inverse+0x14>
    3796:	94 0f       	add	r25, r20
    3798:	51 1d       	adc	r21, r1
    379a:	a3 f3       	brvs	.-24     	; 0x3784 <inverse+0x10>
    379c:	91 50       	subi	r25, 0x01	; 1
    379e:	50 40       	sbci	r21, 0x00	; 0
    37a0:	94 f0       	brlt	.+36     	; 0x37c6 <ldexp+0x3a>
    37a2:	59 f0       	breq	.+22     	; 0x37ba <ldexp+0x2e>
    37a4:	88 23       	and	r24, r24
    37a6:	32 f0       	brmi	.+12     	; 0x37b4 <ldexp+0x28>
    37a8:	66 0f       	add	r22, r22
    37aa:	77 1f       	adc	r23, r23
    37ac:	88 1f       	adc	r24, r24
    37ae:	91 50       	subi	r25, 0x01	; 1
    37b0:	50 40       	sbci	r21, 0x00	; 0
    37b2:	c1 f7       	brne	.-16     	; 0x37a4 <ldexp+0x18>
    37b4:	9e 3f       	cpi	r25, 0xFE	; 254
    37b6:	51 05       	cpc	r21, r1
    37b8:	2c f7       	brge	.-54     	; 0x3784 <inverse+0x10>
    37ba:	88 0f       	add	r24, r24
    37bc:	91 1d       	adc	r25, r1
    37be:	96 95       	lsr	r25
    37c0:	87 95       	ror	r24
    37c2:	97 f9       	bld	r25, 7
    37c4:	08 95       	ret
    37c6:	5f 3f       	cpi	r21, 0xFF	; 255
    37c8:	ac f0       	brlt	.+42     	; 0x37f4 <ldexp+0x68>
    37ca:	98 3e       	cpi	r25, 0xE8	; 232
    37cc:	9c f0       	brlt	.+38     	; 0x37f4 <ldexp+0x68>
    37ce:	bb 27       	eor	r27, r27
    37d0:	86 95       	lsr	r24
    37d2:	77 95       	ror	r23
    37d4:	67 95       	ror	r22
    37d6:	b7 95       	ror	r27
    37d8:	08 f4       	brcc	.+2      	; 0x37dc <ldexp+0x50>
    37da:	b1 60       	ori	r27, 0x01	; 1
    37dc:	93 95       	inc	r25
    37de:	c1 f7       	brne	.-16     	; 0x37d0 <ldexp+0x44>
    37e0:	bb 0f       	add	r27, r27
    37e2:	58 f7       	brcc	.-42     	; 0x37ba <ldexp+0x2e>
    37e4:	11 f4       	brne	.+4      	; 0x37ea <ldexp+0x5e>
    37e6:	60 ff       	sbrs	r22, 0
    37e8:	e8 cf       	rjmp	.-48     	; 0x37ba <ldexp+0x2e>
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	8f 4f       	sbci	r24, 0xFF	; 255
    37f0:	9f 4f       	sbci	r25, 0xFF	; 255
    37f2:	e3 cf       	rjmp	.-58     	; 0x37ba <ldexp+0x2e>
    37f4:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__fp_szero>
    37f8:	16 f0       	brts	.+4      	; 0x37fe <ldexp+0x72>
    37fa:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__fp_mpack>
    37fe:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_nan>
    3802:	68 94       	set
    3804:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__fp_inf>

00003808 <log>:
    3808:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__fp_splitA>
    380c:	a8 f3       	brcs	.-22     	; 0x37f8 <ldexp+0x6c>
    380e:	99 23       	and	r25, r25
    3810:	c1 f3       	breq	.-16     	; 0x3802 <ldexp+0x76>
    3812:	ae f3       	brts	.-22     	; 0x37fe <ldexp+0x72>
    3814:	df 93       	push	r29
    3816:	cf 93       	push	r28
    3818:	1f 93       	push	r17
    381a:	0f 93       	push	r16
    381c:	ff 92       	push	r15
    381e:	c9 2f       	mov	r28, r25
    3820:	dd 27       	eor	r29, r29
    3822:	88 23       	and	r24, r24
    3824:	2a f0       	brmi	.+10     	; 0x3830 <log+0x28>
    3826:	21 97       	sbiw	r28, 0x01	; 1
    3828:	66 0f       	add	r22, r22
    382a:	77 1f       	adc	r23, r23
    382c:	88 1f       	adc	r24, r24
    382e:	da f7       	brpl	.-10     	; 0x3826 <log+0x1e>
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f eb       	ldi	r21, 0xBF	; 191
    3838:	9f e3       	ldi	r25, 0x3F	; 63
    383a:	88 39       	cpi	r24, 0x98	; 152
    383c:	20 f0       	brcs	.+8      	; 0x3846 <log+0x3e>
    383e:	80 3e       	cpi	r24, 0xE0	; 224
    3840:	38 f0       	brcs	.+14     	; 0x3850 <log+0x48>
    3842:	21 96       	adiw	r28, 0x01	; 1
    3844:	8f 77       	andi	r24, 0x7F	; 127
    3846:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    384a:	ea e7       	ldi	r30, 0x7A	; 122
    384c:	f2 e0       	ldi	r31, 0x02	; 2
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <log+0x50>
    3850:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__addsf3>
    3854:	e7 ea       	ldi	r30, 0xA7	; 167
    3856:	f2 e0       	ldi	r31, 0x02	; 2
    3858:	0e 94 93 1b 	call	0x3726	; 0x3726 <__fp_powser>
    385c:	8b 01       	movw	r16, r22
    385e:	be 01       	movw	r22, r28
    3860:	ec 01       	movw	r28, r24
    3862:	fb 2e       	mov	r15, r27
    3864:	6f 57       	subi	r22, 0x7F	; 127
    3866:	71 09       	sbc	r23, r1
    3868:	75 95       	asr	r23
    386a:	77 1f       	adc	r23, r23
    386c:	88 0b       	sbc	r24, r24
    386e:	99 0b       	sbc	r25, r25
    3870:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__floatsisf>
    3874:	28 e1       	ldi	r18, 0x18	; 24
    3876:	32 e7       	ldi	r19, 0x72	; 114
    3878:	41 e3       	ldi	r20, 0x31	; 49
    387a:	5f e3       	ldi	r21, 0x3F	; 63
    387c:	0e 94 af 1a 	call	0x355e	; 0x355e <__mulsf3x>
    3880:	af 2d       	mov	r26, r15
    3882:	98 01       	movw	r18, r16
    3884:	ae 01       	movw	r20, r28
    3886:	ff 90       	pop	r15
    3888:	0f 91       	pop	r16
    388a:	1f 91       	pop	r17
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__addsf3x>
    3894:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <__fp_round>

00003898 <modf>:
    3898:	fa 01       	movw	r30, r20
    389a:	dc 01       	movw	r26, r24
    389c:	aa 0f       	add	r26, r26
    389e:	bb 1f       	adc	r27, r27
    38a0:	9b 01       	movw	r18, r22
    38a2:	ac 01       	movw	r20, r24
    38a4:	bf 57       	subi	r27, 0x7F	; 127
    38a6:	28 f4       	brcc	.+10     	; 0x38b2 <modf+0x1a>
    38a8:	22 27       	eor	r18, r18
    38aa:	33 27       	eor	r19, r19
    38ac:	44 27       	eor	r20, r20
    38ae:	50 78       	andi	r21, 0x80	; 128
    38b0:	20 c0       	rjmp	.+64     	; 0x38f2 <modf+0x5a>
    38b2:	b7 51       	subi	r27, 0x17	; 23
    38b4:	90 f4       	brcc	.+36     	; 0x38da <modf+0x42>
    38b6:	ab 2f       	mov	r26, r27
    38b8:	00 24       	eor	r0, r0
    38ba:	46 95       	lsr	r20
    38bc:	37 95       	ror	r19
    38be:	27 95       	ror	r18
    38c0:	01 1c       	adc	r0, r1
    38c2:	a3 95       	inc	r26
    38c4:	d2 f3       	brmi	.-12     	; 0x38ba <modf+0x22>
    38c6:	00 20       	and	r0, r0
    38c8:	71 f0       	breq	.+28     	; 0x38e6 <modf+0x4e>
    38ca:	22 0f       	add	r18, r18
    38cc:	33 1f       	adc	r19, r19
    38ce:	44 1f       	adc	r20, r20
    38d0:	b3 95       	inc	r27
    38d2:	da f3       	brmi	.-10     	; 0x38ca <modf+0x32>
    38d4:	0e d0       	rcall	.+28     	; 0x38f2 <modf+0x5a>
    38d6:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__subsf3>
    38da:	61 30       	cpi	r22, 0x01	; 1
    38dc:	71 05       	cpc	r23, r1
    38de:	a0 e8       	ldi	r26, 0x80	; 128
    38e0:	8a 07       	cpc	r24, r26
    38e2:	b9 46       	sbci	r27, 0x69	; 105
    38e4:	30 f4       	brcc	.+12     	; 0x38f2 <modf+0x5a>
    38e6:	9b 01       	movw	r18, r22
    38e8:	ac 01       	movw	r20, r24
    38ea:	66 27       	eor	r22, r22
    38ec:	77 27       	eor	r23, r23
    38ee:	88 27       	eor	r24, r24
    38f0:	90 78       	andi	r25, 0x80	; 128
    38f2:	30 96       	adiw	r30, 0x00	; 0
    38f4:	21 f0       	breq	.+8      	; 0x38fe <modf+0x66>
    38f6:	20 83       	st	Z, r18
    38f8:	31 83       	std	Z+1, r19	; 0x01
    38fa:	42 83       	std	Z+2, r20	; 0x02
    38fc:	53 83       	std	Z+3, r21	; 0x03
    38fe:	08 95       	ret

00003900 <__fp_mpack>:
    3900:	9f 3f       	cpi	r25, 0xFF	; 255
    3902:	31 f0       	breq	.+12     	; 0x3910 <__fp_mpack_finite+0xc>

00003904 <__fp_mpack_finite>:
    3904:	91 50       	subi	r25, 0x01	; 1
    3906:	20 f4       	brcc	.+8      	; 0x3910 <__fp_mpack_finite+0xc>
    3908:	87 95       	ror	r24
    390a:	77 95       	ror	r23
    390c:	67 95       	ror	r22
    390e:	b7 95       	ror	r27
    3910:	88 0f       	add	r24, r24
    3912:	91 1d       	adc	r25, r1
    3914:	96 95       	lsr	r25
    3916:	87 95       	ror	r24
    3918:	97 f9       	bld	r25, 7
    391a:	08 95       	ret

0000391c <vfprintf>:
    391c:	a0 e1       	ldi	r26, 0x10	; 16
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e4 e9       	ldi	r30, 0x94	; 148
    3922:	fc e1       	ldi	r31, 0x1C	; 28
    3924:	0c 94 34 20 	jmp	0x4068	; 0x4068 <__prologue_saves__>
    3928:	7c 01       	movw	r14, r24
    392a:	1b 01       	movw	r2, r22
    392c:	6a 01       	movw	r12, r20
    392e:	fc 01       	movw	r30, r24
    3930:	17 82       	std	Z+7, r1	; 0x07
    3932:	16 82       	std	Z+6, r1	; 0x06
    3934:	83 81       	ldd	r24, Z+3	; 0x03
    3936:	81 ff       	sbrs	r24, 1
    3938:	44 c3       	rjmp	.+1672   	; 0x3fc2 <vfprintf+0x6a6>
    393a:	9e 01       	movw	r18, r28
    393c:	2f 5f       	subi	r18, 0xFF	; 255
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
    3940:	39 01       	movw	r6, r18
    3942:	f7 01       	movw	r30, r14
    3944:	93 81       	ldd	r25, Z+3	; 0x03
    3946:	f1 01       	movw	r30, r2
    3948:	93 fd       	sbrc	r25, 3
    394a:	85 91       	lpm	r24, Z+
    394c:	93 ff       	sbrs	r25, 3
    394e:	81 91       	ld	r24, Z+
    3950:	1f 01       	movw	r2, r30
    3952:	88 23       	and	r24, r24
    3954:	09 f4       	brne	.+2      	; 0x3958 <vfprintf+0x3c>
    3956:	31 c3       	rjmp	.+1634   	; 0x3fba <vfprintf+0x69e>
    3958:	85 32       	cpi	r24, 0x25	; 37
    395a:	39 f4       	brne	.+14     	; 0x396a <vfprintf+0x4e>
    395c:	93 fd       	sbrc	r25, 3
    395e:	85 91       	lpm	r24, Z+
    3960:	93 ff       	sbrs	r25, 3
    3962:	81 91       	ld	r24, Z+
    3964:	1f 01       	movw	r2, r30
    3966:	85 32       	cpi	r24, 0x25	; 37
    3968:	39 f4       	brne	.+14     	; 0x3978 <vfprintf+0x5c>
    396a:	b7 01       	movw	r22, r14
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3972:	56 01       	movw	r10, r12
    3974:	65 01       	movw	r12, r10
    3976:	e5 cf       	rjmp	.-54     	; 0x3942 <vfprintf+0x26>
    3978:	10 e0       	ldi	r17, 0x00	; 0
    397a:	51 2c       	mov	r5, r1
    397c:	91 2c       	mov	r9, r1
    397e:	ff e1       	ldi	r31, 0x1F	; 31
    3980:	f9 15       	cp	r31, r9
    3982:	d8 f0       	brcs	.+54     	; 0x39ba <vfprintf+0x9e>
    3984:	8b 32       	cpi	r24, 0x2B	; 43
    3986:	79 f0       	breq	.+30     	; 0x39a6 <vfprintf+0x8a>
    3988:	38 f4       	brcc	.+14     	; 0x3998 <vfprintf+0x7c>
    398a:	80 32       	cpi	r24, 0x20	; 32
    398c:	79 f0       	breq	.+30     	; 0x39ac <vfprintf+0x90>
    398e:	83 32       	cpi	r24, 0x23	; 35
    3990:	a1 f4       	brne	.+40     	; 0x39ba <vfprintf+0x9e>
    3992:	f9 2d       	mov	r31, r9
    3994:	f0 61       	ori	r31, 0x10	; 16
    3996:	2e c0       	rjmp	.+92     	; 0x39f4 <vfprintf+0xd8>
    3998:	8d 32       	cpi	r24, 0x2D	; 45
    399a:	61 f0       	breq	.+24     	; 0x39b4 <vfprintf+0x98>
    399c:	80 33       	cpi	r24, 0x30	; 48
    399e:	69 f4       	brne	.+26     	; 0x39ba <vfprintf+0x9e>
    39a0:	29 2d       	mov	r18, r9
    39a2:	21 60       	ori	r18, 0x01	; 1
    39a4:	2d c0       	rjmp	.+90     	; 0x3a00 <vfprintf+0xe4>
    39a6:	39 2d       	mov	r19, r9
    39a8:	32 60       	ori	r19, 0x02	; 2
    39aa:	93 2e       	mov	r9, r19
    39ac:	89 2d       	mov	r24, r9
    39ae:	84 60       	ori	r24, 0x04	; 4
    39b0:	98 2e       	mov	r9, r24
    39b2:	2a c0       	rjmp	.+84     	; 0x3a08 <vfprintf+0xec>
    39b4:	e9 2d       	mov	r30, r9
    39b6:	e8 60       	ori	r30, 0x08	; 8
    39b8:	15 c0       	rjmp	.+42     	; 0x39e4 <vfprintf+0xc8>
    39ba:	97 fc       	sbrc	r9, 7
    39bc:	2d c0       	rjmp	.+90     	; 0x3a18 <vfprintf+0xfc>
    39be:	20 ed       	ldi	r18, 0xD0	; 208
    39c0:	28 0f       	add	r18, r24
    39c2:	2a 30       	cpi	r18, 0x0A	; 10
    39c4:	88 f4       	brcc	.+34     	; 0x39e8 <vfprintf+0xcc>
    39c6:	96 fe       	sbrs	r9, 6
    39c8:	06 c0       	rjmp	.+12     	; 0x39d6 <vfprintf+0xba>
    39ca:	3a e0       	ldi	r19, 0x0A	; 10
    39cc:	13 9f       	mul	r17, r19
    39ce:	20 0d       	add	r18, r0
    39d0:	11 24       	eor	r1, r1
    39d2:	12 2f       	mov	r17, r18
    39d4:	19 c0       	rjmp	.+50     	; 0x3a08 <vfprintf+0xec>
    39d6:	8a e0       	ldi	r24, 0x0A	; 10
    39d8:	58 9e       	mul	r5, r24
    39da:	20 0d       	add	r18, r0
    39dc:	11 24       	eor	r1, r1
    39de:	52 2e       	mov	r5, r18
    39e0:	e9 2d       	mov	r30, r9
    39e2:	e0 62       	ori	r30, 0x20	; 32
    39e4:	9e 2e       	mov	r9, r30
    39e6:	10 c0       	rjmp	.+32     	; 0x3a08 <vfprintf+0xec>
    39e8:	8e 32       	cpi	r24, 0x2E	; 46
    39ea:	31 f4       	brne	.+12     	; 0x39f8 <vfprintf+0xdc>
    39ec:	96 fc       	sbrc	r9, 6
    39ee:	e5 c2       	rjmp	.+1482   	; 0x3fba <vfprintf+0x69e>
    39f0:	f9 2d       	mov	r31, r9
    39f2:	f0 64       	ori	r31, 0x40	; 64
    39f4:	9f 2e       	mov	r9, r31
    39f6:	08 c0       	rjmp	.+16     	; 0x3a08 <vfprintf+0xec>
    39f8:	8c 36       	cpi	r24, 0x6C	; 108
    39fa:	21 f4       	brne	.+8      	; 0x3a04 <vfprintf+0xe8>
    39fc:	29 2d       	mov	r18, r9
    39fe:	20 68       	ori	r18, 0x80	; 128
    3a00:	92 2e       	mov	r9, r18
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <vfprintf+0xec>
    3a04:	88 36       	cpi	r24, 0x68	; 104
    3a06:	41 f4       	brne	.+16     	; 0x3a18 <vfprintf+0xfc>
    3a08:	f1 01       	movw	r30, r2
    3a0a:	93 fd       	sbrc	r25, 3
    3a0c:	85 91       	lpm	r24, Z+
    3a0e:	93 ff       	sbrs	r25, 3
    3a10:	81 91       	ld	r24, Z+
    3a12:	1f 01       	movw	r2, r30
    3a14:	81 11       	cpse	r24, r1
    3a16:	b3 cf       	rjmp	.-154    	; 0x397e <vfprintf+0x62>
    3a18:	9b eb       	ldi	r25, 0xBB	; 187
    3a1a:	98 0f       	add	r25, r24
    3a1c:	93 30       	cpi	r25, 0x03	; 3
    3a1e:	20 f4       	brcc	.+8      	; 0x3a28 <vfprintf+0x10c>
    3a20:	99 2d       	mov	r25, r9
    3a22:	90 61       	ori	r25, 0x10	; 16
    3a24:	80 5e       	subi	r24, 0xE0	; 224
    3a26:	07 c0       	rjmp	.+14     	; 0x3a36 <vfprintf+0x11a>
    3a28:	9b e9       	ldi	r25, 0x9B	; 155
    3a2a:	98 0f       	add	r25, r24
    3a2c:	93 30       	cpi	r25, 0x03	; 3
    3a2e:	08 f0       	brcs	.+2      	; 0x3a32 <vfprintf+0x116>
    3a30:	66 c1       	rjmp	.+716    	; 0x3cfe <vfprintf+0x3e2>
    3a32:	99 2d       	mov	r25, r9
    3a34:	9f 7e       	andi	r25, 0xEF	; 239
    3a36:	96 ff       	sbrs	r25, 6
    3a38:	16 e0       	ldi	r17, 0x06	; 6
    3a3a:	9f 73       	andi	r25, 0x3F	; 63
    3a3c:	99 2e       	mov	r9, r25
    3a3e:	85 36       	cpi	r24, 0x65	; 101
    3a40:	19 f4       	brne	.+6      	; 0x3a48 <vfprintf+0x12c>
    3a42:	90 64       	ori	r25, 0x40	; 64
    3a44:	99 2e       	mov	r9, r25
    3a46:	08 c0       	rjmp	.+16     	; 0x3a58 <vfprintf+0x13c>
    3a48:	86 36       	cpi	r24, 0x66	; 102
    3a4a:	21 f4       	brne	.+8      	; 0x3a54 <vfprintf+0x138>
    3a4c:	39 2f       	mov	r19, r25
    3a4e:	30 68       	ori	r19, 0x80	; 128
    3a50:	93 2e       	mov	r9, r19
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <vfprintf+0x13c>
    3a54:	11 11       	cpse	r17, r1
    3a56:	11 50       	subi	r17, 0x01	; 1
    3a58:	97 fe       	sbrs	r9, 7
    3a5a:	07 c0       	rjmp	.+14     	; 0x3a6a <vfprintf+0x14e>
    3a5c:	1c 33       	cpi	r17, 0x3C	; 60
    3a5e:	50 f4       	brcc	.+20     	; 0x3a74 <vfprintf+0x158>
    3a60:	44 24       	eor	r4, r4
    3a62:	43 94       	inc	r4
    3a64:	41 0e       	add	r4, r17
    3a66:	27 e0       	ldi	r18, 0x07	; 7
    3a68:	0b c0       	rjmp	.+22     	; 0x3a80 <vfprintf+0x164>
    3a6a:	18 30       	cpi	r17, 0x08	; 8
    3a6c:	38 f0       	brcs	.+14     	; 0x3a7c <vfprintf+0x160>
    3a6e:	27 e0       	ldi	r18, 0x07	; 7
    3a70:	17 e0       	ldi	r17, 0x07	; 7
    3a72:	05 c0       	rjmp	.+10     	; 0x3a7e <vfprintf+0x162>
    3a74:	27 e0       	ldi	r18, 0x07	; 7
    3a76:	9c e3       	ldi	r25, 0x3C	; 60
    3a78:	49 2e       	mov	r4, r25
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <vfprintf+0x164>
    3a7c:	21 2f       	mov	r18, r17
    3a7e:	41 2c       	mov	r4, r1
    3a80:	56 01       	movw	r10, r12
    3a82:	84 e0       	ldi	r24, 0x04	; 4
    3a84:	a8 0e       	add	r10, r24
    3a86:	b1 1c       	adc	r11, r1
    3a88:	f6 01       	movw	r30, r12
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	04 2d       	mov	r16, r4
    3a94:	a3 01       	movw	r20, r6
    3a96:	0e 94 7f 20 	call	0x40fe	; 0x40fe <__ftoa_engine>
    3a9a:	6c 01       	movw	r12, r24
    3a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9e:	fc 87       	std	Y+12, r31	; 0x0c
    3aa0:	f0 ff       	sbrs	r31, 0
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <vfprintf+0x18c>
    3aa4:	f3 ff       	sbrs	r31, 3
    3aa6:	06 c0       	rjmp	.+12     	; 0x3ab4 <vfprintf+0x198>
    3aa8:	91 fc       	sbrc	r9, 1
    3aaa:	06 c0       	rjmp	.+12     	; 0x3ab8 <vfprintf+0x19c>
    3aac:	92 fe       	sbrs	r9, 2
    3aae:	06 c0       	rjmp	.+12     	; 0x3abc <vfprintf+0x1a0>
    3ab0:	00 e2       	ldi	r16, 0x20	; 32
    3ab2:	05 c0       	rjmp	.+10     	; 0x3abe <vfprintf+0x1a2>
    3ab4:	0d e2       	ldi	r16, 0x2D	; 45
    3ab6:	03 c0       	rjmp	.+6      	; 0x3abe <vfprintf+0x1a2>
    3ab8:	0b e2       	ldi	r16, 0x2B	; 43
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <vfprintf+0x1a2>
    3abc:	00 e0       	ldi	r16, 0x00	; 0
    3abe:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac0:	8c 70       	andi	r24, 0x0C	; 12
    3ac2:	19 f0       	breq	.+6      	; 0x3aca <vfprintf+0x1ae>
    3ac4:	01 11       	cpse	r16, r1
    3ac6:	5a c2       	rjmp	.+1204   	; 0x3f7c <vfprintf+0x660>
    3ac8:	9b c2       	rjmp	.+1334   	; 0x4000 <vfprintf+0x6e4>
    3aca:	97 fe       	sbrs	r9, 7
    3acc:	10 c0       	rjmp	.+32     	; 0x3aee <vfprintf+0x1d2>
    3ace:	4c 0c       	add	r4, r12
    3ad0:	fc 85       	ldd	r31, Y+12	; 0x0c
    3ad2:	f4 ff       	sbrs	r31, 4
    3ad4:	04 c0       	rjmp	.+8      	; 0x3ade <vfprintf+0x1c2>
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	81 33       	cpi	r24, 0x31	; 49
    3ada:	09 f4       	brne	.+2      	; 0x3ade <vfprintf+0x1c2>
    3adc:	4a 94       	dec	r4
    3ade:	14 14       	cp	r1, r4
    3ae0:	74 f5       	brge	.+92     	; 0x3b3e <vfprintf+0x222>
    3ae2:	28 e0       	ldi	r18, 0x08	; 8
    3ae4:	24 15       	cp	r18, r4
    3ae6:	78 f5       	brcc	.+94     	; 0x3b46 <vfprintf+0x22a>
    3ae8:	88 e0       	ldi	r24, 0x08	; 8
    3aea:	48 2e       	mov	r4, r24
    3aec:	2c c0       	rjmp	.+88     	; 0x3b46 <vfprintf+0x22a>
    3aee:	96 fc       	sbrc	r9, 6
    3af0:	2a c0       	rjmp	.+84     	; 0x3b46 <vfprintf+0x22a>
    3af2:	81 2f       	mov	r24, r17
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	8c 15       	cp	r24, r12
    3af8:	9d 05       	cpc	r25, r13
    3afa:	9c f0       	brlt	.+38     	; 0x3b22 <vfprintf+0x206>
    3afc:	3c ef       	ldi	r19, 0xFC	; 252
    3afe:	c3 16       	cp	r12, r19
    3b00:	3f ef       	ldi	r19, 0xFF	; 255
    3b02:	d3 06       	cpc	r13, r19
    3b04:	74 f0       	brlt	.+28     	; 0x3b22 <vfprintf+0x206>
    3b06:	89 2d       	mov	r24, r9
    3b08:	80 68       	ori	r24, 0x80	; 128
    3b0a:	98 2e       	mov	r9, r24
    3b0c:	0a c0       	rjmp	.+20     	; 0x3b22 <vfprintf+0x206>
    3b0e:	e2 e0       	ldi	r30, 0x02	; 2
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	ec 0f       	add	r30, r28
    3b14:	fd 1f       	adc	r31, r29
    3b16:	e1 0f       	add	r30, r17
    3b18:	f1 1d       	adc	r31, r1
    3b1a:	80 81       	ld	r24, Z
    3b1c:	80 33       	cpi	r24, 0x30	; 48
    3b1e:	19 f4       	brne	.+6      	; 0x3b26 <vfprintf+0x20a>
    3b20:	11 50       	subi	r17, 0x01	; 1
    3b22:	11 11       	cpse	r17, r1
    3b24:	f4 cf       	rjmp	.-24     	; 0x3b0e <vfprintf+0x1f2>
    3b26:	97 fe       	sbrs	r9, 7
    3b28:	0e c0       	rjmp	.+28     	; 0x3b46 <vfprintf+0x22a>
    3b2a:	44 24       	eor	r4, r4
    3b2c:	43 94       	inc	r4
    3b2e:	41 0e       	add	r4, r17
    3b30:	81 2f       	mov	r24, r17
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	c8 16       	cp	r12, r24
    3b36:	d9 06       	cpc	r13, r25
    3b38:	2c f4       	brge	.+10     	; 0x3b44 <vfprintf+0x228>
    3b3a:	1c 19       	sub	r17, r12
    3b3c:	04 c0       	rjmp	.+8      	; 0x3b46 <vfprintf+0x22a>
    3b3e:	44 24       	eor	r4, r4
    3b40:	43 94       	inc	r4
    3b42:	01 c0       	rjmp	.+2      	; 0x3b46 <vfprintf+0x22a>
    3b44:	10 e0       	ldi	r17, 0x00	; 0
    3b46:	97 fe       	sbrs	r9, 7
    3b48:	06 c0       	rjmp	.+12     	; 0x3b56 <vfprintf+0x23a>
    3b4a:	1c 14       	cp	r1, r12
    3b4c:	1d 04       	cpc	r1, r13
    3b4e:	34 f4       	brge	.+12     	; 0x3b5c <vfprintf+0x240>
    3b50:	c6 01       	movw	r24, r12
    3b52:	01 96       	adiw	r24, 0x01	; 1
    3b54:	05 c0       	rjmp	.+10     	; 0x3b60 <vfprintf+0x244>
    3b56:	85 e0       	ldi	r24, 0x05	; 5
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	02 c0       	rjmp	.+4      	; 0x3b60 <vfprintf+0x244>
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	01 11       	cpse	r16, r1
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	11 23       	and	r17, r17
    3b66:	31 f0       	breq	.+12     	; 0x3b74 <vfprintf+0x258>
    3b68:	21 2f       	mov	r18, r17
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	2f 5f       	subi	r18, 0xFF	; 255
    3b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b70:	82 0f       	add	r24, r18
    3b72:	93 1f       	adc	r25, r19
    3b74:	25 2d       	mov	r18, r5
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	82 17       	cp	r24, r18
    3b7a:	93 07       	cpc	r25, r19
    3b7c:	14 f4       	brge	.+4      	; 0x3b82 <vfprintf+0x266>
    3b7e:	58 1a       	sub	r5, r24
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <vfprintf+0x268>
    3b82:	51 2c       	mov	r5, r1
    3b84:	89 2d       	mov	r24, r9
    3b86:	89 70       	andi	r24, 0x09	; 9
    3b88:	49 f4       	brne	.+18     	; 0x3b9c <vfprintf+0x280>
    3b8a:	55 20       	and	r5, r5
    3b8c:	39 f0       	breq	.+14     	; 0x3b9c <vfprintf+0x280>
    3b8e:	b7 01       	movw	r22, r14
    3b90:	80 e2       	ldi	r24, 0x20	; 32
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3b98:	5a 94       	dec	r5
    3b9a:	f7 cf       	rjmp	.-18     	; 0x3b8a <vfprintf+0x26e>
    3b9c:	00 23       	and	r16, r16
    3b9e:	29 f0       	breq	.+10     	; 0x3baa <vfprintf+0x28e>
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	80 2f       	mov	r24, r16
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3baa:	93 fc       	sbrc	r9, 3
    3bac:	09 c0       	rjmp	.+18     	; 0x3bc0 <vfprintf+0x2a4>
    3bae:	55 20       	and	r5, r5
    3bb0:	39 f0       	breq	.+14     	; 0x3bc0 <vfprintf+0x2a4>
    3bb2:	b7 01       	movw	r22, r14
    3bb4:	80 e3       	ldi	r24, 0x30	; 48
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3bbc:	5a 94       	dec	r5
    3bbe:	f7 cf       	rjmp	.-18     	; 0x3bae <vfprintf+0x292>
    3bc0:	97 fe       	sbrs	r9, 7
    3bc2:	4c c0       	rjmp	.+152    	; 0x3c5c <vfprintf+0x340>
    3bc4:	46 01       	movw	r8, r12
    3bc6:	d7 fe       	sbrs	r13, 7
    3bc8:	02 c0       	rjmp	.+4      	; 0x3bce <vfprintf+0x2b2>
    3bca:	81 2c       	mov	r8, r1
    3bcc:	91 2c       	mov	r9, r1
    3bce:	c6 01       	movw	r24, r12
    3bd0:	88 19       	sub	r24, r8
    3bd2:	99 09       	sbc	r25, r9
    3bd4:	f3 01       	movw	r30, r6
    3bd6:	e8 0f       	add	r30, r24
    3bd8:	f9 1f       	adc	r31, r25
    3bda:	fe 87       	std	Y+14, r31	; 0x0e
    3bdc:	ed 87       	std	Y+13, r30	; 0x0d
    3bde:	96 01       	movw	r18, r12
    3be0:	24 19       	sub	r18, r4
    3be2:	31 09       	sbc	r19, r1
    3be4:	38 8b       	std	Y+16, r19	; 0x10
    3be6:	2f 87       	std	Y+15, r18	; 0x0f
    3be8:	01 2f       	mov	r16, r17
    3bea:	10 e0       	ldi	r17, 0x00	; 0
    3bec:	11 95       	neg	r17
    3bee:	01 95       	neg	r16
    3bf0:	11 09       	sbc	r17, r1
    3bf2:	3f ef       	ldi	r19, 0xFF	; 255
    3bf4:	83 16       	cp	r8, r19
    3bf6:	93 06       	cpc	r9, r19
    3bf8:	29 f4       	brne	.+10     	; 0x3c04 <vfprintf+0x2e8>
    3bfa:	b7 01       	movw	r22, r14
    3bfc:	8e e2       	ldi	r24, 0x2E	; 46
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3c04:	c8 14       	cp	r12, r8
    3c06:	d9 04       	cpc	r13, r9
    3c08:	4c f0       	brlt	.+18     	; 0x3c1c <vfprintf+0x300>
    3c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0c:	98 89       	ldd	r25, Y+16	; 0x10
    3c0e:	88 15       	cp	r24, r8
    3c10:	99 05       	cpc	r25, r9
    3c12:	24 f4       	brge	.+8      	; 0x3c1c <vfprintf+0x300>
    3c14:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c16:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c18:	81 81       	ldd	r24, Z+1	; 0x01
    3c1a:	01 c0       	rjmp	.+2      	; 0x3c1e <vfprintf+0x302>
    3c1c:	80 e3       	ldi	r24, 0x30	; 48
    3c1e:	f1 e0       	ldi	r31, 0x01	; 1
    3c20:	8f 1a       	sub	r8, r31
    3c22:	91 08       	sbc	r9, r1
    3c24:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c26:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c28:	2f 5f       	subi	r18, 0xFF	; 255
    3c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2c:	3e 87       	std	Y+14, r19	; 0x0e
    3c2e:	2d 87       	std	Y+13, r18	; 0x0d
    3c30:	80 16       	cp	r8, r16
    3c32:	91 06       	cpc	r9, r17
    3c34:	2c f0       	brlt	.+10     	; 0x3c40 <vfprintf+0x324>
    3c36:	b7 01       	movw	r22, r14
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3c3e:	d9 cf       	rjmp	.-78     	; 0x3bf2 <vfprintf+0x2d6>
    3c40:	c8 14       	cp	r12, r8
    3c42:	d9 04       	cpc	r13, r9
    3c44:	41 f4       	brne	.+16     	; 0x3c56 <vfprintf+0x33a>
    3c46:	9a 81       	ldd	r25, Y+2	; 0x02
    3c48:	96 33       	cpi	r25, 0x36	; 54
    3c4a:	20 f4       	brcc	.+8      	; 0x3c54 <vfprintf+0x338>
    3c4c:	95 33       	cpi	r25, 0x35	; 53
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <vfprintf+0x33a>
    3c50:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c52:	34 ff       	sbrs	r19, 4
    3c54:	81 e3       	ldi	r24, 0x31	; 49
    3c56:	b7 01       	movw	r22, r14
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	4e c0       	rjmp	.+156    	; 0x3cf8 <vfprintf+0x3dc>
    3c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5e:	81 33       	cpi	r24, 0x31	; 49
    3c60:	19 f0       	breq	.+6      	; 0x3c68 <vfprintf+0x34c>
    3c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c64:	9f 7e       	andi	r25, 0xEF	; 239
    3c66:	9c 87       	std	Y+12, r25	; 0x0c
    3c68:	b7 01       	movw	r22, r14
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3c70:	11 11       	cpse	r17, r1
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <vfprintf+0x362>
    3c74:	94 fc       	sbrc	r9, 4
    3c76:	18 c0       	rjmp	.+48     	; 0x3ca8 <vfprintf+0x38c>
    3c78:	85 e6       	ldi	r24, 0x65	; 101
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	17 c0       	rjmp	.+46     	; 0x3cac <vfprintf+0x390>
    3c7e:	b7 01       	movw	r22, r14
    3c80:	8e e2       	ldi	r24, 0x2E	; 46
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3c88:	1e 5f       	subi	r17, 0xFE	; 254
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	01 e0       	ldi	r16, 0x01	; 1
    3c8e:	08 0f       	add	r16, r24
    3c90:	f3 01       	movw	r30, r6
    3c92:	e8 0f       	add	r30, r24
    3c94:	f1 1d       	adc	r31, r1
    3c96:	80 81       	ld	r24, Z
    3c98:	b7 01       	movw	r22, r14
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3ca0:	80 2f       	mov	r24, r16
    3ca2:	01 13       	cpse	r16, r17
    3ca4:	f3 cf       	rjmp	.-26     	; 0x3c8c <vfprintf+0x370>
    3ca6:	e6 cf       	rjmp	.-52     	; 0x3c74 <vfprintf+0x358>
    3ca8:	85 e4       	ldi	r24, 0x45	; 69
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	b7 01       	movw	r22, r14
    3cae:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3cb2:	d7 fc       	sbrc	r13, 7
    3cb4:	06 c0       	rjmp	.+12     	; 0x3cc2 <vfprintf+0x3a6>
    3cb6:	c1 14       	cp	r12, r1
    3cb8:	d1 04       	cpc	r13, r1
    3cba:	41 f4       	brne	.+16     	; 0x3ccc <vfprintf+0x3b0>
    3cbc:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cbe:	e4 ff       	sbrs	r30, 4
    3cc0:	05 c0       	rjmp	.+10     	; 0x3ccc <vfprintf+0x3b0>
    3cc2:	d1 94       	neg	r13
    3cc4:	c1 94       	neg	r12
    3cc6:	d1 08       	sbc	r13, r1
    3cc8:	8d e2       	ldi	r24, 0x2D	; 45
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <vfprintf+0x3b2>
    3ccc:	8b e2       	ldi	r24, 0x2B	; 43
    3cce:	b7 01       	movw	r22, r14
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3cd6:	80 e3       	ldi	r24, 0x30	; 48
    3cd8:	2a e0       	ldi	r18, 0x0A	; 10
    3cda:	c2 16       	cp	r12, r18
    3cdc:	d1 04       	cpc	r13, r1
    3cde:	2c f0       	brlt	.+10     	; 0x3cea <vfprintf+0x3ce>
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	fa e0       	ldi	r31, 0x0A	; 10
    3ce4:	cf 1a       	sub	r12, r31
    3ce6:	d1 08       	sbc	r13, r1
    3ce8:	f7 cf       	rjmp	.-18     	; 0x3cd8 <vfprintf+0x3bc>
    3cea:	b7 01       	movw	r22, r14
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3cf2:	b7 01       	movw	r22, r14
    3cf4:	c6 01       	movw	r24, r12
    3cf6:	c0 96       	adiw	r24, 0x30	; 48
    3cf8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3cfc:	54 c1       	rjmp	.+680    	; 0x3fa6 <vfprintf+0x68a>
    3cfe:	83 36       	cpi	r24, 0x63	; 99
    3d00:	31 f0       	breq	.+12     	; 0x3d0e <vfprintf+0x3f2>
    3d02:	83 37       	cpi	r24, 0x73	; 115
    3d04:	79 f0       	breq	.+30     	; 0x3d24 <vfprintf+0x408>
    3d06:	83 35       	cpi	r24, 0x53	; 83
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <vfprintf+0x3f0>
    3d0a:	56 c0       	rjmp	.+172    	; 0x3db8 <vfprintf+0x49c>
    3d0c:	20 c0       	rjmp	.+64     	; 0x3d4e <vfprintf+0x432>
    3d0e:	56 01       	movw	r10, r12
    3d10:	32 e0       	ldi	r19, 0x02	; 2
    3d12:	a3 0e       	add	r10, r19
    3d14:	b1 1c       	adc	r11, r1
    3d16:	f6 01       	movw	r30, r12
    3d18:	80 81       	ld	r24, Z
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	01 e0       	ldi	r16, 0x01	; 1
    3d1e:	10 e0       	ldi	r17, 0x00	; 0
    3d20:	63 01       	movw	r12, r6
    3d22:	12 c0       	rjmp	.+36     	; 0x3d48 <vfprintf+0x42c>
    3d24:	56 01       	movw	r10, r12
    3d26:	f2 e0       	ldi	r31, 0x02	; 2
    3d28:	af 0e       	add	r10, r31
    3d2a:	b1 1c       	adc	r11, r1
    3d2c:	f6 01       	movw	r30, r12
    3d2e:	c0 80       	ld	r12, Z
    3d30:	d1 80       	ldd	r13, Z+1	; 0x01
    3d32:	96 fe       	sbrs	r9, 6
    3d34:	03 c0       	rjmp	.+6      	; 0x3d3c <vfprintf+0x420>
    3d36:	61 2f       	mov	r22, r17
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <vfprintf+0x424>
    3d3c:	6f ef       	ldi	r22, 0xFF	; 255
    3d3e:	7f ef       	ldi	r23, 0xFF	; 255
    3d40:	c6 01       	movw	r24, r12
    3d42:	0e 94 6f 21 	call	0x42de	; 0x42de <strnlen>
    3d46:	8c 01       	movw	r16, r24
    3d48:	f9 2d       	mov	r31, r9
    3d4a:	ff 77       	andi	r31, 0x7F	; 127
    3d4c:	14 c0       	rjmp	.+40     	; 0x3d76 <vfprintf+0x45a>
    3d4e:	56 01       	movw	r10, r12
    3d50:	22 e0       	ldi	r18, 0x02	; 2
    3d52:	a2 0e       	add	r10, r18
    3d54:	b1 1c       	adc	r11, r1
    3d56:	f6 01       	movw	r30, r12
    3d58:	c0 80       	ld	r12, Z
    3d5a:	d1 80       	ldd	r13, Z+1	; 0x01
    3d5c:	96 fe       	sbrs	r9, 6
    3d5e:	03 c0       	rjmp	.+6      	; 0x3d66 <vfprintf+0x44a>
    3d60:	61 2f       	mov	r22, r17
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <vfprintf+0x44e>
    3d66:	6f ef       	ldi	r22, 0xFF	; 255
    3d68:	7f ef       	ldi	r23, 0xFF	; 255
    3d6a:	c6 01       	movw	r24, r12
    3d6c:	0e 94 57 21 	call	0x42ae	; 0x42ae <strnlen_P>
    3d70:	8c 01       	movw	r16, r24
    3d72:	f9 2d       	mov	r31, r9
    3d74:	f0 68       	ori	r31, 0x80	; 128
    3d76:	9f 2e       	mov	r9, r31
    3d78:	f3 fd       	sbrc	r31, 3
    3d7a:	1a c0       	rjmp	.+52     	; 0x3db0 <vfprintf+0x494>
    3d7c:	85 2d       	mov	r24, r5
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	08 17       	cp	r16, r24
    3d82:	19 07       	cpc	r17, r25
    3d84:	a8 f4       	brcc	.+42     	; 0x3db0 <vfprintf+0x494>
    3d86:	b7 01       	movw	r22, r14
    3d88:	80 e2       	ldi	r24, 0x20	; 32
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3d90:	5a 94       	dec	r5
    3d92:	f4 cf       	rjmp	.-24     	; 0x3d7c <vfprintf+0x460>
    3d94:	f6 01       	movw	r30, r12
    3d96:	97 fc       	sbrc	r9, 7
    3d98:	85 91       	lpm	r24, Z+
    3d9a:	97 fe       	sbrs	r9, 7
    3d9c:	81 91       	ld	r24, Z+
    3d9e:	6f 01       	movw	r12, r30
    3da0:	b7 01       	movw	r22, r14
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3da8:	51 10       	cpse	r5, r1
    3daa:	5a 94       	dec	r5
    3dac:	01 50       	subi	r16, 0x01	; 1
    3dae:	11 09       	sbc	r17, r1
    3db0:	01 15       	cp	r16, r1
    3db2:	11 05       	cpc	r17, r1
    3db4:	79 f7       	brne	.-34     	; 0x3d94 <vfprintf+0x478>
    3db6:	f7 c0       	rjmp	.+494    	; 0x3fa6 <vfprintf+0x68a>
    3db8:	84 36       	cpi	r24, 0x64	; 100
    3dba:	11 f0       	breq	.+4      	; 0x3dc0 <vfprintf+0x4a4>
    3dbc:	89 36       	cpi	r24, 0x69	; 105
    3dbe:	61 f5       	brne	.+88     	; 0x3e18 <vfprintf+0x4fc>
    3dc0:	56 01       	movw	r10, r12
    3dc2:	97 fe       	sbrs	r9, 7
    3dc4:	09 c0       	rjmp	.+18     	; 0x3dd8 <vfprintf+0x4bc>
    3dc6:	24 e0       	ldi	r18, 0x04	; 4
    3dc8:	a2 0e       	add	r10, r18
    3dca:	b1 1c       	adc	r11, r1
    3dcc:	f6 01       	movw	r30, r12
    3dce:	60 81       	ld	r22, Z
    3dd0:	71 81       	ldd	r23, Z+1	; 0x01
    3dd2:	82 81       	ldd	r24, Z+2	; 0x02
    3dd4:	93 81       	ldd	r25, Z+3	; 0x03
    3dd6:	0a c0       	rjmp	.+20     	; 0x3dec <vfprintf+0x4d0>
    3dd8:	f2 e0       	ldi	r31, 0x02	; 2
    3dda:	af 0e       	add	r10, r31
    3ddc:	b1 1c       	adc	r11, r1
    3dde:	f6 01       	movw	r30, r12
    3de0:	60 81       	ld	r22, Z
    3de2:	71 81       	ldd	r23, Z+1	; 0x01
    3de4:	07 2e       	mov	r0, r23
    3de6:	00 0c       	add	r0, r0
    3de8:	88 0b       	sbc	r24, r24
    3dea:	99 0b       	sbc	r25, r25
    3dec:	f9 2d       	mov	r31, r9
    3dee:	ff 76       	andi	r31, 0x6F	; 111
    3df0:	9f 2e       	mov	r9, r31
    3df2:	97 ff       	sbrs	r25, 7
    3df4:	09 c0       	rjmp	.+18     	; 0x3e08 <vfprintf+0x4ec>
    3df6:	90 95       	com	r25
    3df8:	80 95       	com	r24
    3dfa:	70 95       	com	r23
    3dfc:	61 95       	neg	r22
    3dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    3e00:	8f 4f       	sbci	r24, 0xFF	; 255
    3e02:	9f 4f       	sbci	r25, 0xFF	; 255
    3e04:	f0 68       	ori	r31, 0x80	; 128
    3e06:	9f 2e       	mov	r9, r31
    3e08:	2a e0       	ldi	r18, 0x0A	; 10
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	a3 01       	movw	r20, r6
    3e0e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__ultoa_invert>
    3e12:	c8 2e       	mov	r12, r24
    3e14:	c6 18       	sub	r12, r6
    3e16:	3f c0       	rjmp	.+126    	; 0x3e96 <vfprintf+0x57a>
    3e18:	09 2d       	mov	r16, r9
    3e1a:	85 37       	cpi	r24, 0x75	; 117
    3e1c:	21 f4       	brne	.+8      	; 0x3e26 <vfprintf+0x50a>
    3e1e:	0f 7e       	andi	r16, 0xEF	; 239
    3e20:	2a e0       	ldi	r18, 0x0A	; 10
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	1d c0       	rjmp	.+58     	; 0x3e60 <vfprintf+0x544>
    3e26:	09 7f       	andi	r16, 0xF9	; 249
    3e28:	8f 36       	cpi	r24, 0x6F	; 111
    3e2a:	91 f0       	breq	.+36     	; 0x3e50 <vfprintf+0x534>
    3e2c:	18 f4       	brcc	.+6      	; 0x3e34 <vfprintf+0x518>
    3e2e:	88 35       	cpi	r24, 0x58	; 88
    3e30:	59 f0       	breq	.+22     	; 0x3e48 <vfprintf+0x52c>
    3e32:	c3 c0       	rjmp	.+390    	; 0x3fba <vfprintf+0x69e>
    3e34:	80 37       	cpi	r24, 0x70	; 112
    3e36:	19 f0       	breq	.+6      	; 0x3e3e <vfprintf+0x522>
    3e38:	88 37       	cpi	r24, 0x78	; 120
    3e3a:	11 f0       	breq	.+4      	; 0x3e40 <vfprintf+0x524>
    3e3c:	be c0       	rjmp	.+380    	; 0x3fba <vfprintf+0x69e>
    3e3e:	00 61       	ori	r16, 0x10	; 16
    3e40:	04 ff       	sbrs	r16, 4
    3e42:	09 c0       	rjmp	.+18     	; 0x3e56 <vfprintf+0x53a>
    3e44:	04 60       	ori	r16, 0x04	; 4
    3e46:	07 c0       	rjmp	.+14     	; 0x3e56 <vfprintf+0x53a>
    3e48:	94 fe       	sbrs	r9, 4
    3e4a:	08 c0       	rjmp	.+16     	; 0x3e5c <vfprintf+0x540>
    3e4c:	06 60       	ori	r16, 0x06	; 6
    3e4e:	06 c0       	rjmp	.+12     	; 0x3e5c <vfprintf+0x540>
    3e50:	28 e0       	ldi	r18, 0x08	; 8
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	05 c0       	rjmp	.+10     	; 0x3e60 <vfprintf+0x544>
    3e56:	20 e1       	ldi	r18, 0x10	; 16
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <vfprintf+0x544>
    3e5c:	20 e1       	ldi	r18, 0x10	; 16
    3e5e:	32 e0       	ldi	r19, 0x02	; 2
    3e60:	56 01       	movw	r10, r12
    3e62:	07 ff       	sbrs	r16, 7
    3e64:	09 c0       	rjmp	.+18     	; 0x3e78 <vfprintf+0x55c>
    3e66:	84 e0       	ldi	r24, 0x04	; 4
    3e68:	a8 0e       	add	r10, r24
    3e6a:	b1 1c       	adc	r11, r1
    3e6c:	f6 01       	movw	r30, r12
    3e6e:	60 81       	ld	r22, Z
    3e70:	71 81       	ldd	r23, Z+1	; 0x01
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	93 81       	ldd	r25, Z+3	; 0x03
    3e76:	08 c0       	rjmp	.+16     	; 0x3e88 <vfprintf+0x56c>
    3e78:	f2 e0       	ldi	r31, 0x02	; 2
    3e7a:	af 0e       	add	r10, r31
    3e7c:	b1 1c       	adc	r11, r1
    3e7e:	f6 01       	movw	r30, r12
    3e80:	60 81       	ld	r22, Z
    3e82:	71 81       	ldd	r23, Z+1	; 0x01
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	a3 01       	movw	r20, r6
    3e8a:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <__ultoa_invert>
    3e8e:	c8 2e       	mov	r12, r24
    3e90:	c6 18       	sub	r12, r6
    3e92:	0f 77       	andi	r16, 0x7F	; 127
    3e94:	90 2e       	mov	r9, r16
    3e96:	96 fe       	sbrs	r9, 6
    3e98:	0b c0       	rjmp	.+22     	; 0x3eb0 <vfprintf+0x594>
    3e9a:	09 2d       	mov	r16, r9
    3e9c:	0e 7f       	andi	r16, 0xFE	; 254
    3e9e:	c1 16       	cp	r12, r17
    3ea0:	50 f4       	brcc	.+20     	; 0x3eb6 <vfprintf+0x59a>
    3ea2:	94 fe       	sbrs	r9, 4
    3ea4:	0a c0       	rjmp	.+20     	; 0x3eba <vfprintf+0x59e>
    3ea6:	92 fc       	sbrc	r9, 2
    3ea8:	08 c0       	rjmp	.+16     	; 0x3eba <vfprintf+0x59e>
    3eaa:	09 2d       	mov	r16, r9
    3eac:	0e 7e       	andi	r16, 0xEE	; 238
    3eae:	05 c0       	rjmp	.+10     	; 0x3eba <vfprintf+0x59e>
    3eb0:	dc 2c       	mov	r13, r12
    3eb2:	09 2d       	mov	r16, r9
    3eb4:	03 c0       	rjmp	.+6      	; 0x3ebc <vfprintf+0x5a0>
    3eb6:	dc 2c       	mov	r13, r12
    3eb8:	01 c0       	rjmp	.+2      	; 0x3ebc <vfprintf+0x5a0>
    3eba:	d1 2e       	mov	r13, r17
    3ebc:	04 ff       	sbrs	r16, 4
    3ebe:	0d c0       	rjmp	.+26     	; 0x3eda <vfprintf+0x5be>
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	ec 0d       	add	r30, r12
    3ec4:	f1 1d       	adc	r31, r1
    3ec6:	80 81       	ld	r24, Z
    3ec8:	80 33       	cpi	r24, 0x30	; 48
    3eca:	11 f4       	brne	.+4      	; 0x3ed0 <vfprintf+0x5b4>
    3ecc:	09 7e       	andi	r16, 0xE9	; 233
    3ece:	09 c0       	rjmp	.+18     	; 0x3ee2 <vfprintf+0x5c6>
    3ed0:	02 ff       	sbrs	r16, 2
    3ed2:	06 c0       	rjmp	.+12     	; 0x3ee0 <vfprintf+0x5c4>
    3ed4:	d3 94       	inc	r13
    3ed6:	d3 94       	inc	r13
    3ed8:	04 c0       	rjmp	.+8      	; 0x3ee2 <vfprintf+0x5c6>
    3eda:	80 2f       	mov	r24, r16
    3edc:	86 78       	andi	r24, 0x86	; 134
    3ede:	09 f0       	breq	.+2      	; 0x3ee2 <vfprintf+0x5c6>
    3ee0:	d3 94       	inc	r13
    3ee2:	03 fd       	sbrc	r16, 3
    3ee4:	11 c0       	rjmp	.+34     	; 0x3f08 <vfprintf+0x5ec>
    3ee6:	00 ff       	sbrs	r16, 0
    3ee8:	06 c0       	rjmp	.+12     	; 0x3ef6 <vfprintf+0x5da>
    3eea:	1c 2d       	mov	r17, r12
    3eec:	d5 14       	cp	r13, r5
    3eee:	80 f4       	brcc	.+32     	; 0x3f10 <vfprintf+0x5f4>
    3ef0:	15 0d       	add	r17, r5
    3ef2:	1d 19       	sub	r17, r13
    3ef4:	0d c0       	rjmp	.+26     	; 0x3f10 <vfprintf+0x5f4>
    3ef6:	d5 14       	cp	r13, r5
    3ef8:	58 f4       	brcc	.+22     	; 0x3f10 <vfprintf+0x5f4>
    3efa:	b7 01       	movw	r22, r14
    3efc:	80 e2       	ldi	r24, 0x20	; 32
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3f04:	d3 94       	inc	r13
    3f06:	f7 cf       	rjmp	.-18     	; 0x3ef6 <vfprintf+0x5da>
    3f08:	d5 14       	cp	r13, r5
    3f0a:	10 f4       	brcc	.+4      	; 0x3f10 <vfprintf+0x5f4>
    3f0c:	5d 18       	sub	r5, r13
    3f0e:	01 c0       	rjmp	.+2      	; 0x3f12 <vfprintf+0x5f6>
    3f10:	51 2c       	mov	r5, r1
    3f12:	04 ff       	sbrs	r16, 4
    3f14:	10 c0       	rjmp	.+32     	; 0x3f36 <vfprintf+0x61a>
    3f16:	b7 01       	movw	r22, r14
    3f18:	80 e3       	ldi	r24, 0x30	; 48
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3f20:	02 ff       	sbrs	r16, 2
    3f22:	17 c0       	rjmp	.+46     	; 0x3f52 <vfprintf+0x636>
    3f24:	01 fd       	sbrc	r16, 1
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <vfprintf+0x612>
    3f28:	88 e7       	ldi	r24, 0x78	; 120
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <vfprintf+0x616>
    3f2e:	88 e5       	ldi	r24, 0x58	; 88
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	b7 01       	movw	r22, r14
    3f34:	0c c0       	rjmp	.+24     	; 0x3f4e <vfprintf+0x632>
    3f36:	80 2f       	mov	r24, r16
    3f38:	86 78       	andi	r24, 0x86	; 134
    3f3a:	59 f0       	breq	.+22     	; 0x3f52 <vfprintf+0x636>
    3f3c:	01 ff       	sbrs	r16, 1
    3f3e:	02 c0       	rjmp	.+4      	; 0x3f44 <vfprintf+0x628>
    3f40:	8b e2       	ldi	r24, 0x2B	; 43
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <vfprintf+0x62a>
    3f44:	80 e2       	ldi	r24, 0x20	; 32
    3f46:	07 fd       	sbrc	r16, 7
    3f48:	8d e2       	ldi	r24, 0x2D	; 45
    3f4a:	b7 01       	movw	r22, r14
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3f52:	c1 16       	cp	r12, r17
    3f54:	38 f4       	brcc	.+14     	; 0x3f64 <vfprintf+0x648>
    3f56:	b7 01       	movw	r22, r14
    3f58:	80 e3       	ldi	r24, 0x30	; 48
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3f60:	11 50       	subi	r17, 0x01	; 1
    3f62:	f7 cf       	rjmp	.-18     	; 0x3f52 <vfprintf+0x636>
    3f64:	ca 94       	dec	r12
    3f66:	f3 01       	movw	r30, r6
    3f68:	ec 0d       	add	r30, r12
    3f6a:	f1 1d       	adc	r31, r1
    3f6c:	80 81       	ld	r24, Z
    3f6e:	b7 01       	movw	r22, r14
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3f76:	c1 10       	cpse	r12, r1
    3f78:	f5 cf       	rjmp	.-22     	; 0x3f64 <vfprintf+0x648>
    3f7a:	15 c0       	rjmp	.+42     	; 0x3fa6 <vfprintf+0x68a>
    3f7c:	f4 e0       	ldi	r31, 0x04	; 4
    3f7e:	f5 15       	cp	r31, r5
    3f80:	60 f5       	brcc	.+88     	; 0x3fda <vfprintf+0x6be>
    3f82:	84 e0       	ldi	r24, 0x04	; 4
    3f84:	58 1a       	sub	r5, r24
    3f86:	93 fe       	sbrs	r9, 3
    3f88:	1f c0       	rjmp	.+62     	; 0x3fc8 <vfprintf+0x6ac>
    3f8a:	01 11       	cpse	r16, r1
    3f8c:	27 c0       	rjmp	.+78     	; 0x3fdc <vfprintf+0x6c0>
    3f8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f90:	23 ff       	sbrs	r18, 3
    3f92:	2a c0       	rjmp	.+84     	; 0x3fe8 <vfprintf+0x6cc>
    3f94:	04 ed       	ldi	r16, 0xD4	; 212
    3f96:	12 e0       	ldi	r17, 0x02	; 2
    3f98:	39 2d       	mov	r19, r9
    3f9a:	30 71       	andi	r19, 0x10	; 16
    3f9c:	93 2e       	mov	r9, r19
    3f9e:	f8 01       	movw	r30, r16
    3fa0:	84 91       	lpm	r24, Z
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	24 c0       	rjmp	.+72     	; 0x3fee <vfprintf+0x6d2>
    3fa6:	55 20       	and	r5, r5
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <vfprintf+0x690>
    3faa:	e4 cc       	rjmp	.-1592   	; 0x3974 <vfprintf+0x58>
    3fac:	b7 01       	movw	r22, r14
    3fae:	80 e2       	ldi	r24, 0x20	; 32
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3fb6:	5a 94       	dec	r5
    3fb8:	f6 cf       	rjmp	.-20     	; 0x3fa6 <vfprintf+0x68a>
    3fba:	f7 01       	movw	r30, r14
    3fbc:	86 81       	ldd	r24, Z+6	; 0x06
    3fbe:	97 81       	ldd	r25, Z+7	; 0x07
    3fc0:	26 c0       	rjmp	.+76     	; 0x400e <vfprintf+0x6f2>
    3fc2:	8f ef       	ldi	r24, 0xFF	; 255
    3fc4:	9f ef       	ldi	r25, 0xFF	; 255
    3fc6:	23 c0       	rjmp	.+70     	; 0x400e <vfprintf+0x6f2>
    3fc8:	b7 01       	movw	r22, r14
    3fca:	80 e2       	ldi	r24, 0x20	; 32
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3fd2:	5a 94       	dec	r5
    3fd4:	51 10       	cpse	r5, r1
    3fd6:	f8 cf       	rjmp	.-16     	; 0x3fc8 <vfprintf+0x6ac>
    3fd8:	d8 cf       	rjmp	.-80     	; 0x3f8a <vfprintf+0x66e>
    3fda:	51 2c       	mov	r5, r1
    3fdc:	b7 01       	movw	r22, r14
    3fde:	80 2f       	mov	r24, r16
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3fe6:	d3 cf       	rjmp	.-90     	; 0x3f8e <vfprintf+0x672>
    3fe8:	08 ed       	ldi	r16, 0xD8	; 216
    3fea:	12 e0       	ldi	r17, 0x02	; 2
    3fec:	d5 cf       	rjmp	.-86     	; 0x3f98 <vfprintf+0x67c>
    3fee:	91 10       	cpse	r9, r1
    3ff0:	80 52       	subi	r24, 0x20	; 32
    3ff2:	b7 01       	movw	r22, r14
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <fputc>
    3ffa:	0f 5f       	subi	r16, 0xFF	; 255
    3ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffe:	cf cf       	rjmp	.-98     	; 0x3f9e <vfprintf+0x682>
    4000:	23 e0       	ldi	r18, 0x03	; 3
    4002:	25 15       	cp	r18, r5
    4004:	10 f4       	brcc	.+4      	; 0x400a <vfprintf+0x6ee>
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	bd cf       	rjmp	.-134    	; 0x3f84 <vfprintf+0x668>
    400a:	51 2c       	mov	r5, r1
    400c:	c0 cf       	rjmp	.-128    	; 0x3f8e <vfprintf+0x672>
    400e:	60 96       	adiw	r28, 0x10	; 16
    4010:	e2 e1       	ldi	r30, 0x12	; 18
    4012:	0c 94 50 20 	jmp	0x40a0	; 0x40a0 <__epilogue_restores__>

00004016 <__divmodhi4>:
    4016:	97 fb       	bst	r25, 7
    4018:	07 2e       	mov	r0, r23
    401a:	16 f4       	brtc	.+4      	; 0x4020 <__divmodhi4+0xa>
    401c:	00 94       	com	r0
    401e:	07 d0       	rcall	.+14     	; 0x402e <__divmodhi4_neg1>
    4020:	77 fd       	sbrc	r23, 7
    4022:	09 d0       	rcall	.+18     	; 0x4036 <__divmodhi4_neg2>
    4024:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__udivmodhi4>
    4028:	07 fc       	sbrc	r0, 7
    402a:	05 d0       	rcall	.+10     	; 0x4036 <__divmodhi4_neg2>
    402c:	3e f4       	brtc	.+14     	; 0x403c <__divmodhi4_exit>

0000402e <__divmodhi4_neg1>:
    402e:	90 95       	com	r25
    4030:	81 95       	neg	r24
    4032:	9f 4f       	sbci	r25, 0xFF	; 255
    4034:	08 95       	ret

00004036 <__divmodhi4_neg2>:
    4036:	70 95       	com	r23
    4038:	61 95       	neg	r22
    403a:	7f 4f       	sbci	r23, 0xFF	; 255

0000403c <__divmodhi4_exit>:
    403c:	08 95       	ret

0000403e <__tablejump2__>:
    403e:	ee 0f       	add	r30, r30
    4040:	ff 1f       	adc	r31, r31
    4042:	05 90       	lpm	r0, Z+
    4044:	f4 91       	lpm	r31, Z
    4046:	e0 2d       	mov	r30, r0
    4048:	09 94       	ijmp

0000404a <__umulhisi3>:
    404a:	a2 9f       	mul	r26, r18
    404c:	b0 01       	movw	r22, r0
    404e:	b3 9f       	mul	r27, r19
    4050:	c0 01       	movw	r24, r0
    4052:	a3 9f       	mul	r26, r19
    4054:	70 0d       	add	r23, r0
    4056:	81 1d       	adc	r24, r1
    4058:	11 24       	eor	r1, r1
    405a:	91 1d       	adc	r25, r1
    405c:	b2 9f       	mul	r27, r18
    405e:	70 0d       	add	r23, r0
    4060:	81 1d       	adc	r24, r1
    4062:	11 24       	eor	r1, r1
    4064:	91 1d       	adc	r25, r1
    4066:	08 95       	ret

00004068 <__prologue_saves__>:
    4068:	2f 92       	push	r2
    406a:	3f 92       	push	r3
    406c:	4f 92       	push	r4
    406e:	5f 92       	push	r5
    4070:	6f 92       	push	r6
    4072:	7f 92       	push	r7
    4074:	8f 92       	push	r8
    4076:	9f 92       	push	r9
    4078:	af 92       	push	r10
    407a:	bf 92       	push	r11
    407c:	cf 92       	push	r12
    407e:	df 92       	push	r13
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	1f 93       	push	r17
    4088:	cf 93       	push	r28
    408a:	df 93       	push	r29
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	ca 1b       	sub	r28, r26
    4092:	db 0b       	sbc	r29, r27
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
    409e:	09 94       	ijmp

000040a0 <__epilogue_restores__>:
    40a0:	2a 88       	ldd	r2, Y+18	; 0x12
    40a2:	39 88       	ldd	r3, Y+17	; 0x11
    40a4:	48 88       	ldd	r4, Y+16	; 0x10
    40a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    40a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    40aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    40ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    40ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    40b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    40b2:	b9 84       	ldd	r11, Y+9	; 0x09
    40b4:	c8 84       	ldd	r12, Y+8	; 0x08
    40b6:	df 80       	ldd	r13, Y+7	; 0x07
    40b8:	ee 80       	ldd	r14, Y+6	; 0x06
    40ba:	fd 80       	ldd	r15, Y+5	; 0x05
    40bc:	0c 81       	ldd	r16, Y+4	; 0x04
    40be:	1b 81       	ldd	r17, Y+3	; 0x03
    40c0:	aa 81       	ldd	r26, Y+2	; 0x02
    40c2:	b9 81       	ldd	r27, Y+1	; 0x01
    40c4:	ce 0f       	add	r28, r30
    40c6:	d1 1d       	adc	r29, r1
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	ed 01       	movw	r28, r26
    40d4:	08 95       	ret

000040d6 <__udivmodhi4>:
    40d6:	aa 1b       	sub	r26, r26
    40d8:	bb 1b       	sub	r27, r27
    40da:	51 e1       	ldi	r21, 0x11	; 17
    40dc:	07 c0       	rjmp	.+14     	; 0x40ec <__udivmodhi4_ep>

000040de <__udivmodhi4_loop>:
    40de:	aa 1f       	adc	r26, r26
    40e0:	bb 1f       	adc	r27, r27
    40e2:	a6 17       	cp	r26, r22
    40e4:	b7 07       	cpc	r27, r23
    40e6:	10 f0       	brcs	.+4      	; 0x40ec <__udivmodhi4_ep>
    40e8:	a6 1b       	sub	r26, r22
    40ea:	b7 0b       	sbc	r27, r23

000040ec <__udivmodhi4_ep>:
    40ec:	88 1f       	adc	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	5a 95       	dec	r21
    40f2:	a9 f7       	brne	.-22     	; 0x40de <__udivmodhi4_loop>
    40f4:	80 95       	com	r24
    40f6:	90 95       	com	r25
    40f8:	bc 01       	movw	r22, r24
    40fa:	cd 01       	movw	r24, r26
    40fc:	08 95       	ret

000040fe <__ftoa_engine>:
    40fe:	28 30       	cpi	r18, 0x08	; 8
    4100:	08 f0       	brcs	.+2      	; 0x4104 <__ftoa_engine+0x6>
    4102:	27 e0       	ldi	r18, 0x07	; 7
    4104:	33 27       	eor	r19, r19
    4106:	da 01       	movw	r26, r20
    4108:	99 0f       	add	r25, r25
    410a:	31 1d       	adc	r19, r1
    410c:	87 fd       	sbrc	r24, 7
    410e:	91 60       	ori	r25, 0x01	; 1
    4110:	00 96       	adiw	r24, 0x00	; 0
    4112:	61 05       	cpc	r22, r1
    4114:	71 05       	cpc	r23, r1
    4116:	39 f4       	brne	.+14     	; 0x4126 <__ftoa_engine+0x28>
    4118:	32 60       	ori	r19, 0x02	; 2
    411a:	2e 5f       	subi	r18, 0xFE	; 254
    411c:	3d 93       	st	X+, r19
    411e:	30 e3       	ldi	r19, 0x30	; 48
    4120:	2a 95       	dec	r18
    4122:	e1 f7       	brne	.-8      	; 0x411c <__ftoa_engine+0x1e>
    4124:	08 95       	ret
    4126:	9f 3f       	cpi	r25, 0xFF	; 255
    4128:	30 f0       	brcs	.+12     	; 0x4136 <__ftoa_engine+0x38>
    412a:	80 38       	cpi	r24, 0x80	; 128
    412c:	71 05       	cpc	r23, r1
    412e:	61 05       	cpc	r22, r1
    4130:	09 f0       	breq	.+2      	; 0x4134 <__ftoa_engine+0x36>
    4132:	3c 5f       	subi	r19, 0xFC	; 252
    4134:	3c 5f       	subi	r19, 0xFC	; 252
    4136:	3d 93       	st	X+, r19
    4138:	91 30       	cpi	r25, 0x01	; 1
    413a:	08 f0       	brcs	.+2      	; 0x413e <__ftoa_engine+0x40>
    413c:	80 68       	ori	r24, 0x80	; 128
    413e:	91 1d       	adc	r25, r1
    4140:	df 93       	push	r29
    4142:	cf 93       	push	r28
    4144:	1f 93       	push	r17
    4146:	0f 93       	push	r16
    4148:	ff 92       	push	r15
    414a:	ef 92       	push	r14
    414c:	19 2f       	mov	r17, r25
    414e:	98 7f       	andi	r25, 0xF8	; 248
    4150:	96 95       	lsr	r25
    4152:	e9 2f       	mov	r30, r25
    4154:	96 95       	lsr	r25
    4156:	96 95       	lsr	r25
    4158:	e9 0f       	add	r30, r25
    415a:	ff 27       	eor	r31, r31
    415c:	ea 5c       	subi	r30, 0xCA	; 202
    415e:	fc 4f       	sbci	r31, 0xFC	; 252
    4160:	99 27       	eor	r25, r25
    4162:	33 27       	eor	r19, r19
    4164:	ee 24       	eor	r14, r14
    4166:	ff 24       	eor	r15, r15
    4168:	a7 01       	movw	r20, r14
    416a:	e7 01       	movw	r28, r14
    416c:	05 90       	lpm	r0, Z+
    416e:	08 94       	sec
    4170:	07 94       	ror	r0
    4172:	28 f4       	brcc	.+10     	; 0x417e <__ftoa_engine+0x80>
    4174:	36 0f       	add	r19, r22
    4176:	e7 1e       	adc	r14, r23
    4178:	f8 1e       	adc	r15, r24
    417a:	49 1f       	adc	r20, r25
    417c:	51 1d       	adc	r21, r1
    417e:	66 0f       	add	r22, r22
    4180:	77 1f       	adc	r23, r23
    4182:	88 1f       	adc	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	06 94       	lsr	r0
    4188:	a1 f7       	brne	.-24     	; 0x4172 <__ftoa_engine+0x74>
    418a:	05 90       	lpm	r0, Z+
    418c:	07 94       	ror	r0
    418e:	28 f4       	brcc	.+10     	; 0x419a <__ftoa_engine+0x9c>
    4190:	e7 0e       	add	r14, r23
    4192:	f8 1e       	adc	r15, r24
    4194:	49 1f       	adc	r20, r25
    4196:	56 1f       	adc	r21, r22
    4198:	c1 1d       	adc	r28, r1
    419a:	77 0f       	add	r23, r23
    419c:	88 1f       	adc	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	66 1f       	adc	r22, r22
    41a2:	06 94       	lsr	r0
    41a4:	a1 f7       	brne	.-24     	; 0x418e <__ftoa_engine+0x90>
    41a6:	05 90       	lpm	r0, Z+
    41a8:	07 94       	ror	r0
    41aa:	28 f4       	brcc	.+10     	; 0x41b6 <__ftoa_engine+0xb8>
    41ac:	f8 0e       	add	r15, r24
    41ae:	49 1f       	adc	r20, r25
    41b0:	56 1f       	adc	r21, r22
    41b2:	c7 1f       	adc	r28, r23
    41b4:	d1 1d       	adc	r29, r1
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	66 1f       	adc	r22, r22
    41bc:	77 1f       	adc	r23, r23
    41be:	06 94       	lsr	r0
    41c0:	a1 f7       	brne	.-24     	; 0x41aa <__ftoa_engine+0xac>
    41c2:	05 90       	lpm	r0, Z+
    41c4:	07 94       	ror	r0
    41c6:	20 f4       	brcc	.+8      	; 0x41d0 <__ftoa_engine+0xd2>
    41c8:	49 0f       	add	r20, r25
    41ca:	56 1f       	adc	r21, r22
    41cc:	c7 1f       	adc	r28, r23
    41ce:	d8 1f       	adc	r29, r24
    41d0:	99 0f       	add	r25, r25
    41d2:	66 1f       	adc	r22, r22
    41d4:	77 1f       	adc	r23, r23
    41d6:	88 1f       	adc	r24, r24
    41d8:	06 94       	lsr	r0
    41da:	a9 f7       	brne	.-22     	; 0x41c6 <__ftoa_engine+0xc8>
    41dc:	84 91       	lpm	r24, Z
    41de:	10 95       	com	r17
    41e0:	17 70       	andi	r17, 0x07	; 7
    41e2:	41 f0       	breq	.+16     	; 0x41f4 <__ftoa_engine+0xf6>
    41e4:	d6 95       	lsr	r29
    41e6:	c7 95       	ror	r28
    41e8:	57 95       	ror	r21
    41ea:	47 95       	ror	r20
    41ec:	f7 94       	ror	r15
    41ee:	e7 94       	ror	r14
    41f0:	1a 95       	dec	r17
    41f2:	c1 f7       	brne	.-16     	; 0x41e4 <__ftoa_engine+0xe6>
    41f4:	ec ed       	ldi	r30, 0xDC	; 220
    41f6:	f2 e0       	ldi	r31, 0x02	; 2
    41f8:	68 94       	set
    41fa:	15 90       	lpm	r1, Z+
    41fc:	15 91       	lpm	r17, Z+
    41fe:	35 91       	lpm	r19, Z+
    4200:	65 91       	lpm	r22, Z+
    4202:	95 91       	lpm	r25, Z+
    4204:	05 90       	lpm	r0, Z+
    4206:	7f e2       	ldi	r23, 0x2F	; 47
    4208:	73 95       	inc	r23
    420a:	e1 18       	sub	r14, r1
    420c:	f1 0a       	sbc	r15, r17
    420e:	43 0b       	sbc	r20, r19
    4210:	56 0b       	sbc	r21, r22
    4212:	c9 0b       	sbc	r28, r25
    4214:	d0 09       	sbc	r29, r0
    4216:	c0 f7       	brcc	.-16     	; 0x4208 <__ftoa_engine+0x10a>
    4218:	e1 0c       	add	r14, r1
    421a:	f1 1e       	adc	r15, r17
    421c:	43 1f       	adc	r20, r19
    421e:	56 1f       	adc	r21, r22
    4220:	c9 1f       	adc	r28, r25
    4222:	d0 1d       	adc	r29, r0
    4224:	7e f4       	brtc	.+30     	; 0x4244 <__ftoa_engine+0x146>
    4226:	70 33       	cpi	r23, 0x30	; 48
    4228:	11 f4       	brne	.+4      	; 0x422e <__ftoa_engine+0x130>
    422a:	8a 95       	dec	r24
    422c:	e6 cf       	rjmp	.-52     	; 0x41fa <__ftoa_engine+0xfc>
    422e:	e8 94       	clt
    4230:	01 50       	subi	r16, 0x01	; 1
    4232:	30 f0       	brcs	.+12     	; 0x4240 <__ftoa_engine+0x142>
    4234:	08 0f       	add	r16, r24
    4236:	0a f4       	brpl	.+2      	; 0x423a <__ftoa_engine+0x13c>
    4238:	00 27       	eor	r16, r16
    423a:	02 17       	cp	r16, r18
    423c:	08 f4       	brcc	.+2      	; 0x4240 <__ftoa_engine+0x142>
    423e:	20 2f       	mov	r18, r16
    4240:	23 95       	inc	r18
    4242:	02 2f       	mov	r16, r18
    4244:	7a 33       	cpi	r23, 0x3A	; 58
    4246:	28 f0       	brcs	.+10     	; 0x4252 <__ftoa_engine+0x154>
    4248:	79 e3       	ldi	r23, 0x39	; 57
    424a:	7d 93       	st	X+, r23
    424c:	2a 95       	dec	r18
    424e:	e9 f7       	brne	.-6      	; 0x424a <__ftoa_engine+0x14c>
    4250:	10 c0       	rjmp	.+32     	; 0x4272 <__ftoa_engine+0x174>
    4252:	7d 93       	st	X+, r23
    4254:	2a 95       	dec	r18
    4256:	89 f6       	brne	.-94     	; 0x41fa <__ftoa_engine+0xfc>
    4258:	06 94       	lsr	r0
    425a:	97 95       	ror	r25
    425c:	67 95       	ror	r22
    425e:	37 95       	ror	r19
    4260:	17 95       	ror	r17
    4262:	17 94       	ror	r1
    4264:	e1 18       	sub	r14, r1
    4266:	f1 0a       	sbc	r15, r17
    4268:	43 0b       	sbc	r20, r19
    426a:	56 0b       	sbc	r21, r22
    426c:	c9 0b       	sbc	r28, r25
    426e:	d0 09       	sbc	r29, r0
    4270:	98 f0       	brcs	.+38     	; 0x4298 <__ftoa_engine+0x19a>
    4272:	23 95       	inc	r18
    4274:	7e 91       	ld	r23, -X
    4276:	73 95       	inc	r23
    4278:	7a 33       	cpi	r23, 0x3A	; 58
    427a:	08 f0       	brcs	.+2      	; 0x427e <__ftoa_engine+0x180>
    427c:	70 e3       	ldi	r23, 0x30	; 48
    427e:	7c 93       	st	X, r23
    4280:	20 13       	cpse	r18, r16
    4282:	b8 f7       	brcc	.-18     	; 0x4272 <__ftoa_engine+0x174>
    4284:	7e 91       	ld	r23, -X
    4286:	70 61       	ori	r23, 0x10	; 16
    4288:	7d 93       	st	X+, r23
    428a:	30 f0       	brcs	.+12     	; 0x4298 <__ftoa_engine+0x19a>
    428c:	83 95       	inc	r24
    428e:	71 e3       	ldi	r23, 0x31	; 49
    4290:	7d 93       	st	X+, r23
    4292:	70 e3       	ldi	r23, 0x30	; 48
    4294:	2a 95       	dec	r18
    4296:	e1 f7       	brne	.-8      	; 0x4290 <__ftoa_engine+0x192>
    4298:	11 24       	eor	r1, r1
    429a:	ef 90       	pop	r14
    429c:	ff 90       	pop	r15
    429e:	0f 91       	pop	r16
    42a0:	1f 91       	pop	r17
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	99 27       	eor	r25, r25
    42a8:	87 fd       	sbrc	r24, 7
    42aa:	90 95       	com	r25
    42ac:	08 95       	ret

000042ae <strnlen_P>:
    42ae:	fc 01       	movw	r30, r24
    42b0:	05 90       	lpm	r0, Z+
    42b2:	61 50       	subi	r22, 0x01	; 1
    42b4:	70 40       	sbci	r23, 0x00	; 0
    42b6:	01 10       	cpse	r0, r1
    42b8:	d8 f7       	brcc	.-10     	; 0x42b0 <strnlen_P+0x2>
    42ba:	80 95       	com	r24
    42bc:	90 95       	com	r25
    42be:	8e 0f       	add	r24, r30
    42c0:	9f 1f       	adc	r25, r31
    42c2:	08 95       	ret

000042c4 <memcmp>:
    42c4:	fb 01       	movw	r30, r22
    42c6:	dc 01       	movw	r26, r24
    42c8:	04 c0       	rjmp	.+8      	; 0x42d2 <memcmp+0xe>
    42ca:	8d 91       	ld	r24, X+
    42cc:	01 90       	ld	r0, Z+
    42ce:	80 19       	sub	r24, r0
    42d0:	21 f4       	brne	.+8      	; 0x42da <memcmp+0x16>
    42d2:	41 50       	subi	r20, 0x01	; 1
    42d4:	50 40       	sbci	r21, 0x00	; 0
    42d6:	c8 f7       	brcc	.-14     	; 0x42ca <memcmp+0x6>
    42d8:	88 1b       	sub	r24, r24
    42da:	99 0b       	sbc	r25, r25
    42dc:	08 95       	ret

000042de <strnlen>:
    42de:	fc 01       	movw	r30, r24
    42e0:	61 50       	subi	r22, 0x01	; 1
    42e2:	70 40       	sbci	r23, 0x00	; 0
    42e4:	01 90       	ld	r0, Z+
    42e6:	01 10       	cpse	r0, r1
    42e8:	d8 f7       	brcc	.-10     	; 0x42e0 <strnlen+0x2>
    42ea:	80 95       	com	r24
    42ec:	90 95       	com	r25
    42ee:	8e 0f       	add	r24, r30
    42f0:	9f 1f       	adc	r25, r31
    42f2:	08 95       	ret

000042f4 <fputc>:
    42f4:	0f 93       	push	r16
    42f6:	1f 93       	push	r17
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	fb 01       	movw	r30, r22
    42fe:	23 81       	ldd	r18, Z+3	; 0x03
    4300:	21 fd       	sbrc	r18, 1
    4302:	03 c0       	rjmp	.+6      	; 0x430a <fputc+0x16>
    4304:	8f ef       	ldi	r24, 0xFF	; 255
    4306:	9f ef       	ldi	r25, 0xFF	; 255
    4308:	2c c0       	rjmp	.+88     	; 0x4362 <fputc+0x6e>
    430a:	22 ff       	sbrs	r18, 2
    430c:	16 c0       	rjmp	.+44     	; 0x433a <fputc+0x46>
    430e:	46 81       	ldd	r20, Z+6	; 0x06
    4310:	57 81       	ldd	r21, Z+7	; 0x07
    4312:	24 81       	ldd	r18, Z+4	; 0x04
    4314:	35 81       	ldd	r19, Z+5	; 0x05
    4316:	42 17       	cp	r20, r18
    4318:	53 07       	cpc	r21, r19
    431a:	44 f4       	brge	.+16     	; 0x432c <fputc+0x38>
    431c:	a0 81       	ld	r26, Z
    431e:	b1 81       	ldd	r27, Z+1	; 0x01
    4320:	9d 01       	movw	r18, r26
    4322:	2f 5f       	subi	r18, 0xFF	; 255
    4324:	3f 4f       	sbci	r19, 0xFF	; 255
    4326:	31 83       	std	Z+1, r19	; 0x01
    4328:	20 83       	st	Z, r18
    432a:	8c 93       	st	X, r24
    432c:	26 81       	ldd	r18, Z+6	; 0x06
    432e:	37 81       	ldd	r19, Z+7	; 0x07
    4330:	2f 5f       	subi	r18, 0xFF	; 255
    4332:	3f 4f       	sbci	r19, 0xFF	; 255
    4334:	37 83       	std	Z+7, r19	; 0x07
    4336:	26 83       	std	Z+6, r18	; 0x06
    4338:	14 c0       	rjmp	.+40     	; 0x4362 <fputc+0x6e>
    433a:	8b 01       	movw	r16, r22
    433c:	ec 01       	movw	r28, r24
    433e:	fb 01       	movw	r30, r22
    4340:	00 84       	ldd	r0, Z+8	; 0x08
    4342:	f1 85       	ldd	r31, Z+9	; 0x09
    4344:	e0 2d       	mov	r30, r0
    4346:	09 95       	icall
    4348:	89 2b       	or	r24, r25
    434a:	e1 f6       	brne	.-72     	; 0x4304 <fputc+0x10>
    434c:	d8 01       	movw	r26, r16
    434e:	16 96       	adiw	r26, 0x06	; 6
    4350:	8d 91       	ld	r24, X+
    4352:	9c 91       	ld	r25, X
    4354:	17 97       	sbiw	r26, 0x07	; 7
    4356:	01 96       	adiw	r24, 0x01	; 1
    4358:	17 96       	adiw	r26, 0x07	; 7
    435a:	9c 93       	st	X, r25
    435c:	8e 93       	st	-X, r24
    435e:	16 97       	sbiw	r26, 0x06	; 6
    4360:	ce 01       	movw	r24, r28
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	08 95       	ret

0000436c <vsprintf>:
    436c:	ae e0       	ldi	r26, 0x0E	; 14
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	ec eb       	ldi	r30, 0xBC	; 188
    4372:	f1 e2       	ldi	r31, 0x21	; 33
    4374:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x1c>
    4378:	8c 01       	movw	r16, r24
    437a:	86 e0       	ldi	r24, 0x06	; 6
    437c:	8c 83       	std	Y+4, r24	; 0x04
    437e:	1a 83       	std	Y+2, r17	; 0x02
    4380:	09 83       	std	Y+1, r16	; 0x01
    4382:	8f ef       	ldi	r24, 0xFF	; 255
    4384:	9f e7       	ldi	r25, 0x7F	; 127
    4386:	9e 83       	std	Y+6, r25	; 0x06
    4388:	8d 83       	std	Y+5, r24	; 0x05
    438a:	ce 01       	movw	r24, r28
    438c:	01 96       	adiw	r24, 0x01	; 1
    438e:	0e 94 8e 1c 	call	0x391c	; 0x391c <vfprintf>
    4392:	ef 81       	ldd	r30, Y+7	; 0x07
    4394:	f8 85       	ldd	r31, Y+8	; 0x08
    4396:	e0 0f       	add	r30, r16
    4398:	f1 1f       	adc	r31, r17
    439a:	10 82       	st	Z, r1
    439c:	2e 96       	adiw	r28, 0x0e	; 14
    439e:	e4 e0       	ldi	r30, 0x04	; 4
    43a0:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x1c>

000043a4 <__ultoa_invert>:
    43a4:	fa 01       	movw	r30, r20
    43a6:	aa 27       	eor	r26, r26
    43a8:	28 30       	cpi	r18, 0x08	; 8
    43aa:	51 f1       	breq	.+84     	; 0x4400 <__ultoa_invert+0x5c>
    43ac:	20 31       	cpi	r18, 0x10	; 16
    43ae:	81 f1       	breq	.+96     	; 0x4410 <__ultoa_invert+0x6c>
    43b0:	e8 94       	clt
    43b2:	6f 93       	push	r22
    43b4:	6e 7f       	andi	r22, 0xFE	; 254
    43b6:	6e 5f       	subi	r22, 0xFE	; 254
    43b8:	7f 4f       	sbci	r23, 0xFF	; 255
    43ba:	8f 4f       	sbci	r24, 0xFF	; 255
    43bc:	9f 4f       	sbci	r25, 0xFF	; 255
    43be:	af 4f       	sbci	r26, 0xFF	; 255
    43c0:	b1 e0       	ldi	r27, 0x01	; 1
    43c2:	3e d0       	rcall	.+124    	; 0x4440 <__ultoa_invert+0x9c>
    43c4:	b4 e0       	ldi	r27, 0x04	; 4
    43c6:	3c d0       	rcall	.+120    	; 0x4440 <__ultoa_invert+0x9c>
    43c8:	67 0f       	add	r22, r23
    43ca:	78 1f       	adc	r23, r24
    43cc:	89 1f       	adc	r24, r25
    43ce:	9a 1f       	adc	r25, r26
    43d0:	a1 1d       	adc	r26, r1
    43d2:	68 0f       	add	r22, r24
    43d4:	79 1f       	adc	r23, r25
    43d6:	8a 1f       	adc	r24, r26
    43d8:	91 1d       	adc	r25, r1
    43da:	a1 1d       	adc	r26, r1
    43dc:	6a 0f       	add	r22, r26
    43de:	71 1d       	adc	r23, r1
    43e0:	81 1d       	adc	r24, r1
    43e2:	91 1d       	adc	r25, r1
    43e4:	a1 1d       	adc	r26, r1
    43e6:	20 d0       	rcall	.+64     	; 0x4428 <__ultoa_invert+0x84>
    43e8:	09 f4       	brne	.+2      	; 0x43ec <__ultoa_invert+0x48>
    43ea:	68 94       	set
    43ec:	3f 91       	pop	r19
    43ee:	2a e0       	ldi	r18, 0x0A	; 10
    43f0:	26 9f       	mul	r18, r22
    43f2:	11 24       	eor	r1, r1
    43f4:	30 19       	sub	r19, r0
    43f6:	30 5d       	subi	r19, 0xD0	; 208
    43f8:	31 93       	st	Z+, r19
    43fa:	de f6       	brtc	.-74     	; 0x43b2 <__ultoa_invert+0xe>
    43fc:	cf 01       	movw	r24, r30
    43fe:	08 95       	ret
    4400:	46 2f       	mov	r20, r22
    4402:	47 70       	andi	r20, 0x07	; 7
    4404:	40 5d       	subi	r20, 0xD0	; 208
    4406:	41 93       	st	Z+, r20
    4408:	b3 e0       	ldi	r27, 0x03	; 3
    440a:	0f d0       	rcall	.+30     	; 0x442a <__ultoa_invert+0x86>
    440c:	c9 f7       	brne	.-14     	; 0x4400 <__ultoa_invert+0x5c>
    440e:	f6 cf       	rjmp	.-20     	; 0x43fc <__ultoa_invert+0x58>
    4410:	46 2f       	mov	r20, r22
    4412:	4f 70       	andi	r20, 0x0F	; 15
    4414:	40 5d       	subi	r20, 0xD0	; 208
    4416:	4a 33       	cpi	r20, 0x3A	; 58
    4418:	18 f0       	brcs	.+6      	; 0x4420 <__ultoa_invert+0x7c>
    441a:	49 5d       	subi	r20, 0xD9	; 217
    441c:	31 fd       	sbrc	r19, 1
    441e:	40 52       	subi	r20, 0x20	; 32
    4420:	41 93       	st	Z+, r20
    4422:	02 d0       	rcall	.+4      	; 0x4428 <__ultoa_invert+0x84>
    4424:	a9 f7       	brne	.-22     	; 0x4410 <__ultoa_invert+0x6c>
    4426:	ea cf       	rjmp	.-44     	; 0x43fc <__ultoa_invert+0x58>
    4428:	b4 e0       	ldi	r27, 0x04	; 4
    442a:	a6 95       	lsr	r26
    442c:	97 95       	ror	r25
    442e:	87 95       	ror	r24
    4430:	77 95       	ror	r23
    4432:	67 95       	ror	r22
    4434:	ba 95       	dec	r27
    4436:	c9 f7       	brne	.-14     	; 0x442a <__ultoa_invert+0x86>
    4438:	00 97       	sbiw	r24, 0x00	; 0
    443a:	61 05       	cpc	r22, r1
    443c:	71 05       	cpc	r23, r1
    443e:	08 95       	ret
    4440:	9b 01       	movw	r18, r22
    4442:	ac 01       	movw	r20, r24
    4444:	0a 2e       	mov	r0, r26
    4446:	06 94       	lsr	r0
    4448:	57 95       	ror	r21
    444a:	47 95       	ror	r20
    444c:	37 95       	ror	r19
    444e:	27 95       	ror	r18
    4450:	ba 95       	dec	r27
    4452:	c9 f7       	brne	.-14     	; 0x4446 <__ultoa_invert+0xa2>
    4454:	62 0f       	add	r22, r18
    4456:	73 1f       	adc	r23, r19
    4458:	84 1f       	adc	r24, r20
    445a:	95 1f       	adc	r25, r21
    445c:	a0 1d       	adc	r26, r0
    445e:	08 95       	ret

00004460 <_exit>:
    4460:	f8 94       	cli

00004462 <__stop_program>:
    4462:	ff cf       	rjmp	.-2      	; 0x4462 <__stop_program>
