
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022e  00800060  00003380  00003414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000263  0080028e  0080028e  00003642  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003642  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000528  00000000  00000000  000036dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c8f  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cbc  00000000  00000000  00008893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033f4  00000000  00000000  0000a54f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd0  00000000  00000000  0000d944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017cc  00000000  00000000  0000e514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002174  00000000  00000000  0000fce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00011e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 01 	jmp	0x252	; 0x252 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__vector_10>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      34:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__vector_13>
      38:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_14>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      48:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      54:	a3 05       	cpc	r26, r3
      56:	aa 05       	cpc	r26, r10
      58:	ad 05       	cpc	r26, r13
      5a:	b3 05       	cpc	r27, r3
      5c:	b9 05       	cpc	r27, r9
      5e:	be 05       	cpc	r27, r14
      60:	c4 05       	cpc	r28, r4
      62:	cb 05       	cpc	r28, r11
      64:	cf 05       	cpc	r28, r15
      66:	d7 05       	cpc	r29, r7
      68:	26 06       	cpc	r2, r22
      6a:	26 06       	cpc	r2, r22
      6c:	26 06       	cpc	r2, r22
      6e:	26 06       	cpc	r2, r22
      70:	26 06       	cpc	r2, r22
      72:	26 06       	cpc	r2, r22
      74:	26 06       	cpc	r2, r22
      76:	26 06       	cpc	r2, r22
      78:	26 06       	cpc	r2, r22
      7a:	26 06       	cpc	r2, r22
      7c:	26 06       	cpc	r2, r22
      7e:	26 06       	cpc	r2, r22
      80:	26 06       	cpc	r2, r22
      82:	26 06       	cpc	r2, r22
      84:	26 06       	cpc	r2, r22
      86:	26 06       	cpc	r2, r22
      88:	26 06       	cpc	r2, r22
      8a:	26 06       	cpc	r2, r22
      8c:	26 06       	cpc	r2, r22
      8e:	26 06       	cpc	r2, r22
      90:	26 06       	cpc	r2, r22
      92:	26 06       	cpc	r2, r22
      94:	26 06       	cpc	r2, r22
      96:	26 06       	cpc	r2, r22
      98:	26 06       	cpc	r2, r22
      9a:	26 06       	cpc	r2, r22
      9c:	26 06       	cpc	r2, r22
      9e:	26 06       	cpc	r2, r22
      a0:	26 06       	cpc	r2, r22
      a2:	26 06       	cpc	r2, r22
      a4:	26 06       	cpc	r2, r22
      a6:	26 06       	cpc	r2, r22
      a8:	26 06       	cpc	r2, r22
      aa:	26 06       	cpc	r2, r22
      ac:	26 06       	cpc	r2, r22
      ae:	26 06       	cpc	r2, r22
      b0:	26 06       	cpc	r2, r22
      b2:	26 06       	cpc	r2, r22
      b4:	26 06       	cpc	r2, r22
      b6:	26 06       	cpc	r2, r22
      b8:	26 06       	cpc	r2, r22
      ba:	26 06       	cpc	r2, r22
      bc:	26 06       	cpc	r2, r22
      be:	26 06       	cpc	r2, r22
      c0:	26 06       	cpc	r2, r22
      c2:	26 06       	cpc	r2, r22
      c4:	26 06       	cpc	r2, r22
      c6:	26 06       	cpc	r2, r22
      c8:	26 06       	cpc	r2, r22
      ca:	26 06       	cpc	r2, r22
      cc:	26 06       	cpc	r2, r22
      ce:	26 06       	cpc	r2, r22
      d0:	26 06       	cpc	r2, r22
      d2:	26 06       	cpc	r2, r22
      d4:	26 06       	cpc	r2, r22
      d6:	26 06       	cpc	r2, r22
      d8:	26 06       	cpc	r2, r22
      da:	26 06       	cpc	r2, r22
      dc:	26 06       	cpc	r2, r22
      de:	26 06       	cpc	r2, r22
      e0:	26 06       	cpc	r2, r22
      e2:	26 06       	cpc	r2, r22
      e4:	26 06       	cpc	r2, r22
      e6:	26 06       	cpc	r2, r22
      e8:	26 06       	cpc	r2, r22
      ea:	26 06       	cpc	r2, r22
      ec:	26 06       	cpc	r2, r22
      ee:	26 06       	cpc	r2, r22
      f0:	26 06       	cpc	r2, r22
      f2:	26 06       	cpc	r2, r22
      f4:	26 06       	cpc	r2, r22
      f6:	26 06       	cpc	r2, r22
      f8:	26 06       	cpc	r2, r22
      fa:	26 06       	cpc	r2, r22
      fc:	26 06       	cpc	r2, r22
      fe:	26 06       	cpc	r2, r22
     100:	26 06       	cpc	r2, r22
     102:	26 06       	cpc	r2, r22
     104:	26 06       	cpc	r2, r22
     106:	26 06       	cpc	r2, r22
     108:	26 06       	cpc	r2, r22
     10a:	26 06       	cpc	r2, r22
     10c:	26 06       	cpc	r2, r22
     10e:	26 06       	cpc	r2, r22
     110:	26 06       	cpc	r2, r22
     112:	26 06       	cpc	r2, r22
     114:	26 06       	cpc	r2, r22
     116:	de 05       	cpc	r29, r14
     118:	e5 05       	cpc	r30, r5
     11a:	eb 05       	cpc	r30, r11
     11c:	f0 05       	cpc	r31, r0
     11e:	f6 05       	cpc	r31, r6
     120:	fc 05       	cpc	r31, r12
     122:	26 06       	cpc	r2, r22
     124:	26 06       	cpc	r2, r22
     126:	26 06       	cpc	r2, r22
     128:	26 06       	cpc	r2, r22
     12a:	26 06       	cpc	r2, r22
     12c:	15 06       	cpc	r1, r21
     12e:	26 06       	cpc	r2, r22
     130:	26 06       	cpc	r2, r22
     132:	04 06       	cpc	r0, r20
     134:	09 06       	cpc	r0, r25
     136:	26 06       	cpc	r2, r22
     138:	01 06       	cpc	r0, r17
     13a:	0f 06       	cpc	r0, r31
     13c:	26 06       	cpc	r2, r22
     13e:	26 06       	cpc	r2, r22
     140:	26 06       	cpc	r2, r22
     142:	26 06       	cpc	r2, r22
     144:	26 06       	cpc	r2, r22
     146:	26 06       	cpc	r2, r22
     148:	26 06       	cpc	r2, r22
     14a:	26 06       	cpc	r2, r22
     14c:	26 06       	cpc	r2, r22
     14e:	26 06       	cpc	r2, r22
     150:	26 06       	cpc	r2, r22
     152:	26 06       	cpc	r2, r22
     154:	26 06       	cpc	r2, r22
     156:	26 06       	cpc	r2, r22
     158:	26 06       	cpc	r2, r22
     15a:	26 06       	cpc	r2, r22
     15c:	26 06       	cpc	r2, r22
     15e:	26 06       	cpc	r2, r22
     160:	26 06       	cpc	r2, r22
     162:	26 06       	cpc	r2, r22
     164:	26 06       	cpc	r2, r22
     166:	26 06       	cpc	r2, r22
     168:	26 06       	cpc	r2, r22
     16a:	26 06       	cpc	r2, r22
     16c:	26 06       	cpc	r2, r22
     16e:	26 06       	cpc	r2, r22
     170:	26 06       	cpc	r2, r22
     172:	26 06       	cpc	r2, r22
     174:	26 06       	cpc	r2, r22
     176:	26 06       	cpc	r2, r22
     178:	26 06       	cpc	r2, r22
     17a:	26 06       	cpc	r2, r22
     17c:	26 06       	cpc	r2, r22
     17e:	26 06       	cpc	r2, r22
     180:	26 06       	cpc	r2, r22
     182:	26 06       	cpc	r2, r22
     184:	26 06       	cpc	r2, r22
     186:	26 06       	cpc	r2, r22
     188:	26 06       	cpc	r2, r22
     18a:	26 06       	cpc	r2, r22
     18c:	26 06       	cpc	r2, r22
     18e:	26 06       	cpc	r2, r22
     190:	26 06       	cpc	r2, r22
     192:	26 06       	cpc	r2, r22
     194:	26 06       	cpc	r2, r22
     196:	26 06       	cpc	r2, r22
     198:	26 06       	cpc	r2, r22
     19a:	26 06       	cpc	r2, r22
     19c:	26 06       	cpc	r2, r22
     19e:	26 06       	cpc	r2, r22
     1a0:	26 06       	cpc	r2, r22
     1a2:	26 06       	cpc	r2, r22
     1a4:	26 06       	cpc	r2, r22
     1a6:	26 06       	cpc	r2, r22
     1a8:	26 06       	cpc	r2, r22
     1aa:	26 06       	cpc	r2, r22
     1ac:	26 06       	cpc	r2, r22
     1ae:	26 06       	cpc	r2, r22
     1b0:	26 06       	cpc	r2, r22
     1b2:	26 06       	cpc	r2, r22
     1b4:	26 06       	cpc	r2, r22
     1b6:	26 06       	cpc	r2, r22
     1b8:	26 06       	cpc	r2, r22
     1ba:	26 06       	cpc	r2, r22
     1bc:	26 06       	cpc	r2, r22
     1be:	26 06       	cpc	r2, r22
     1c0:	26 06       	cpc	r2, r22
     1c2:	26 06       	cpc	r2, r22
     1c4:	26 06       	cpc	r2, r22
     1c6:	26 06       	cpc	r2, r22
     1c8:	26 06       	cpc	r2, r22
     1ca:	26 06       	cpc	r2, r22
     1cc:	26 06       	cpc	r2, r22
     1ce:	26 06       	cpc	r2, r22
     1d0:	26 06       	cpc	r2, r22
     1d2:	26 06       	cpc	r2, r22
     1d4:	26 06       	cpc	r2, r22
     1d6:	26 06       	cpc	r2, r22
     1d8:	26 06       	cpc	r2, r22
     1da:	26 06       	cpc	r2, r22
     1dc:	26 06       	cpc	r2, r22
     1de:	26 06       	cpc	r2, r22
     1e0:	26 06       	cpc	r2, r22
     1e2:	26 06       	cpc	r2, r22
     1e4:	26 06       	cpc	r2, r22
     1e6:	26 06       	cpc	r2, r22
     1e8:	26 06       	cpc	r2, r22
     1ea:	26 06       	cpc	r2, r22
     1ec:	26 06       	cpc	r2, r22
     1ee:	26 06       	cpc	r2, r22
     1f0:	26 06       	cpc	r2, r22
     1f2:	26 06       	cpc	r2, r22
     1f4:	26 06       	cpc	r2, r22
     1f6:	26 06       	cpc	r2, r22
     1f8:	26 06       	cpc	r2, r22
     1fa:	26 06       	cpc	r2, r22
     1fc:	26 06       	cpc	r2, r22
     1fe:	26 06       	cpc	r2, r22
     200:	26 06       	cpc	r2, r22
     202:	26 06       	cpc	r2, r22
     204:	26 06       	cpc	r2, r22
     206:	26 06       	cpc	r2, r22
     208:	26 06       	cpc	r2, r22
     20a:	26 06       	cpc	r2, r22
     20c:	26 06       	cpc	r2, r22
     20e:	26 06       	cpc	r2, r22
     210:	26 06       	cpc	r2, r22
     212:	26 06       	cpc	r2, r22
     214:	26 06       	cpc	r2, r22
     216:	26 06       	cpc	r2, r22
     218:	26 06       	cpc	r2, r22
     21a:	26 06       	cpc	r2, r22
     21c:	26 06       	cpc	r2, r22
     21e:	26 06       	cpc	r2, r22
     220:	26 06       	cpc	r2, r22
     222:	26 06       	cpc	r2, r22
     224:	26 06       	cpc	r2, r22
     226:	26 06       	cpc	r2, r22
     228:	26 06       	cpc	r2, r22
     22a:	26 06       	cpc	r2, r22
     22c:	26 06       	cpc	r2, r22
     22e:	26 06       	cpc	r2, r22
     230:	26 06       	cpc	r2, r22
     232:	26 06       	cpc	r2, r22
     234:	26 06       	cpc	r2, r22
     236:	26 06       	cpc	r2, r22
     238:	26 06       	cpc	r2, r22
     23a:	26 06       	cpc	r2, r22
     23c:	26 06       	cpc	r2, r22
     23e:	26 06       	cpc	r2, r22
     240:	26 06       	cpc	r2, r22
     242:	26 06       	cpc	r2, r22
     244:	19 06       	cpc	r1, r25
     246:	25 06       	cpc	r2, r21
     248:	23 06       	cpc	r2, r19
     24a:	21 06       	cpc	r2, r17
     24c:	1f 06       	cpc	r1, r31
     24e:	1d 06       	cpc	r1, r29
     250:	1b 06       	cpc	r1, r27

00000252 <__ctors_end>:
     252:	11 24       	eor	r1, r1
     254:	1f be       	out	0x3f, r1	; 63
     256:	cf e5       	ldi	r28, 0x5F	; 95
     258:	d8 e0       	ldi	r29, 0x08	; 8
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	cd bf       	out	0x3d, r28	; 61

0000025e <__do_copy_data>:
     25e:	12 e0       	ldi	r17, 0x02	; 2
     260:	a0 e6       	ldi	r26, 0x60	; 96
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e0 e8       	ldi	r30, 0x80	; 128
     266:	f3 e3       	ldi	r31, 0x33	; 51
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x10>
     26a:	05 90       	lpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	ae 38       	cpi	r26, 0x8E	; 142
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0xc>

00000274 <__do_clear_bss>:
     274:	24 e0       	ldi	r18, 0x04	; 4
     276:	ae e8       	ldi	r26, 0x8E	; 142
     278:	b2 e0       	ldi	r27, 0x02	; 2
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a1 3f       	cpi	r26, 0xF1	; 241
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
     288:	0c 94 be 19 	jmp	0x337c	; 0x337c <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	ae 01       	movw	r20, r28
     29a:	4b 5f       	subi	r20, 0xFB	; 251
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	fa 01       	movw	r30, r20
     2a0:	61 91       	ld	r22, Z+
     2a2:	71 91       	ld	r23, Z+
     2a4:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     2a6:	8c ed       	ldi	r24, 0xDC	; 220
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     2b4:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     2b6:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     2b8:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     2ba:	89 9a       	sbi	0x11, 1	; 17
     2bc:	08 95       	ret

000002be <init_driver>:
}

void init_driver(void)
{
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     2be:	62 e3       	ldi	r22, 0x32	; 50
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 87 13 	call	0x270e	; 0x270e <timer0_init>
	init_display_drv();
     2c6:	0e 94 5a 05 	call	0xab4	; 0xab4 <init_display_drv>
	init_buttons();
     2ca:	0e 94 02 04 	call	0x804	; 0x804 <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	init_system();
     2ce:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <init_system>
	init_measure();
     2d2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     2d6:	80 b7       	in	r24, 0x30	; 48
     2d8:	8b 7f       	andi	r24, 0xFB	; 251
     2da:	80 bf       	out	0x30, r24	; 48
     2dc:	08 95       	ret

000002de <main>:
}

int main(void)
{
	init_pin();
     2de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <init_pin>
	sei();
     2e2:	78 94       	sei
	init_driver();
     2e4:	0e 94 5f 01 	call	0x2be	; 0x2be <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     2e8:	87 e7       	ldi	r24, 0x77	; 119
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     2f8:	0e 94 41 07 	call	0xe82	; 0xe82 <disp_process>
		animation();
     2fc:	0e 94 9d 08 	call	0x113a	; 0x113a <animation>
		process_button();
     300:	0e 94 58 03 	call	0x6b0	; 0x6b0 <process_button>
		disp_fast_process();
     304:	0e 94 24 12 	call	0x2448	; 0x2448 <disp_fast_process>
		disp_very_fast_process();
     308:	0e 94 d7 12 	call	0x25ae	; 0x25ae <disp_very_fast_process>
		dcmotor_process(motor_value);
     30c:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motor_value>
     310:	0e 94 07 05 	call	0xa0e	; 0xa0e <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     314:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
     318:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <servo_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     31c:	0e 94 6f 09 	call	0x12de	; 0x12de <error_event>
		error_led_blink();
     320:	0e 94 cd 0c 	call	0x199a	; 0x199a <error_led_blink>
		measure_process();
     324:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <measure_process>
		accumulator_process();
     328:	0e 94 bd 01 	call	0x37a	; 0x37a <accumulator_process>
		accum_led_process();
     32c:	0e 94 06 02 	call	0x40c	; 0x40c <accum_led_process>
		buzzer_process();
     330:	0e 94 19 04 	call	0x832	; 0x832 <buzzer_process>
     334:	e1 cf       	rjmp	.-62     	; 0x2f8 <main+0x1a>

00000336 <accum_get_voltage>:

static float voltage = 0;

float accum_get_voltage(void)
{
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <measure_get_filtered_value>
    return voltage;
     33c:	bc 01       	movw	r22, r24
     33e:	66 0f       	add	r22, r22
     340:	77 1f       	adc	r23, r23
     342:	66 0f       	add	r22, r22
     344:	77 1f       	adc	r23, r23
     346:	86 0f       	add	r24, r22
     348:	97 1f       	adc	r25, r23
     34a:	bc 01       	movw	r22, r24
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
     354:	26 e6       	ldi	r18, 0x66	; 102
     356:	36 e6       	ldi	r19, 0x66	; 102
     358:	46 eb       	ldi	r20, 0xB6	; 182
     35a:	50 e4       	ldi	r21, 0x40	; 64
     35c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e8       	ldi	r20, 0x80	; 128
     366:	5a e3       	ldi	r21, 0x3A	; 58
     368:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
     36c:	23 e3       	ldi	r18, 0x33	; 51
     36e:	33 e3       	ldi	r19, 0x33	; 51
     370:	43 e3       	ldi	r20, 0x33	; 51
     372:	5f e3       	ldi	r21, 0x3F	; 63
     374:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
}
     378:	08 95       	ret

0000037a <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     37a:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
     37e:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
     382:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
     386:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
     38a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <accumulator_timer.1911>
     38e:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <accumulator_timer.1911+0x1>
     392:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <accumulator_timer.1911+0x2>
     396:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <accumulator_timer.1911+0x3>
     39a:	84 17       	cp	r24, r20
     39c:	95 07       	cpc	r25, r21
     39e:	a6 07       	cpc	r26, r22
     3a0:	b7 07       	cpc	r27, r23
     3a2:	98 f5       	brcc	.+102    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     3aa:	89 35       	cpi	r24, 0x59	; 89
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	92 07       	cpc	r25, r18
     3b0:	18 f0       	brcs	.+6      	; 0x3b8 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     3b8:	8b 38       	cpi	r24, 0x8B	; 139
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	92 07       	cpc	r25, r18
     3be:	18 f4       	brcc	.+6      	; 0x3c6 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     3c0:	22 e0       	ldi	r18, 0x02	; 2
     3c2:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     3c6:	8e 35       	cpi	r24, 0x5E	; 94
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	92 07       	cpc	r25, r18
     3cc:	18 f4       	brcc	.+6      	; 0x3d4 <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     3ce:	23 e0       	ldi	r18, 0x03	; 3
     3d0:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     3d4:	8c 58       	subi	r24, 0x8C	; 140
     3d6:	91 40       	sbci	r25, 0x01	; 1
     3d8:	8c 3c       	cpi	r24, 0xCC	; 204
     3da:	91 05       	cpc	r25, r1
     3dc:	10 f4       	brcc	.+4      	; 0x3e2 <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     3de:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     3e2:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
     3e6:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
     3ea:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
     3ee:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
     3f2:	8c 59       	subi	r24, 0x9C	; 156
     3f4:	9f 4f       	sbci	r25, 0xFF	; 255
     3f6:	af 4f       	sbci	r26, 0xFF	; 255
     3f8:	bf 4f       	sbci	r27, 0xFF	; 255
     3fa:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <accumulator_timer.1911>
     3fe:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <accumulator_timer.1911+0x1>
     402:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <accumulator_timer.1911+0x2>
     406:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <accumulator_timer.1911+0x3>
     40a:	08 95       	ret

0000040c <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     40c:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
     410:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
     414:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
     418:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
     41c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     420:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     424:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     428:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     42c:	84 17       	cp	r24, r20
     42e:	95 07       	cpc	r25, r21
     430:	a6 07       	cpc	r26, r22
     432:	b7 07       	cpc	r27, r23
     434:	08 f0       	brcs	.+2      	; 0x438 <accum_led_process+0x2c>
     436:	86 c0       	rjmp	.+268    	; 0x544 <accum_led_process+0x138>
	{
        switch (accumulator_state)
     438:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <accumulator_state>
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	e9 f0       	breq	.+58     	; 0x47a <accum_led_process+0x6e>
     440:	30 f0       	brcs	.+12     	; 0x44e <accum_led_process+0x42>
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	99 f1       	breq	.+102    	; 0x4ac <accum_led_process+0xa0>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	09 f4       	brne	.+2      	; 0x44c <accum_led_process+0x40>
     44a:	67 c0       	rjmp	.+206    	; 0x51a <accum_led_process+0x10e>
     44c:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     44e:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     450:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     454:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     458:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     45c:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     460:	88 53       	subi	r24, 0x38	; 56
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	af 4f       	sbci	r26, 0xFF	; 255
     466:	bf 4f       	sbci	r27, 0xFF	; 255
     468:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <process_timer.1915>
     46c:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <process_timer.1915+0x1>
     470:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <process_timer.1915+0x2>
     474:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <process_timer.1915+0x3>
            break;
     478:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     47a:	98 b3       	in	r25, 0x18	; 24
     47c:	80 e2       	ldi	r24, 0x20	; 32
     47e:	89 27       	eor	r24, r25
     480:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     482:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     486:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     48a:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     48e:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     492:	86 50       	subi	r24, 0x06	; 6
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	af 4f       	sbci	r26, 0xFF	; 255
     498:	bf 4f       	sbci	r27, 0xFF	; 255
     49a:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <process_timer.1915>
     49e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <process_timer.1915+0x1>
     4a2:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <process_timer.1915+0x2>
     4a6:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <process_timer.1915+0x3>
            break;
     4aa:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     4ac:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end>
     4b0:	81 11       	cpse	r24, r1
     4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <accum_led_process+0xda>
            {
                state_led = 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end>
                LED_ACUM_ON;
     4ba:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     4bc:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     4c0:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     4c4:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     4c8:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     4cc:	8c 50       	subi	r24, 0x0C	; 12
     4ce:	9e 4f       	sbci	r25, 0xFE	; 254
     4d0:	af 4f       	sbci	r26, 0xFF	; 255
     4d2:	bf 4f       	sbci	r27, 0xFF	; 255
     4d4:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <process_timer.1915>
     4d8:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <process_timer.1915+0x1>
     4dc:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <process_timer.1915+0x2>
     4e0:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <process_timer.1915+0x3>
     4e4:	08 95       	ret
            }
            else if (state_led == 1)
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	69 f5       	brne	.+90     	; 0x544 <accum_led_process+0x138>
            {
                state_led = 0;
     4ea:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <__data_end>
                LED_ACUM_OFF;
     4ee:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     4f0:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     4f4:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     4f8:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     4fc:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     500:	84 52       	subi	r24, 0x24	; 36
     502:	9a 4f       	sbci	r25, 0xFA	; 250
     504:	af 4f       	sbci	r26, 0xFF	; 255
     506:	bf 4f       	sbci	r27, 0xFF	; 255
     508:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <process_timer.1915>
     50c:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <process_timer.1915+0x1>
     510:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <process_timer.1915+0x2>
     514:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <process_timer.1915+0x3>
     518:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     51a:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     51c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <process_timer.1915>
     520:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <process_timer.1915+0x1>
     524:	a0 91 91 02 	lds	r26, 0x0291	; 0x800291 <process_timer.1915+0x2>
     528:	b0 91 92 02 	lds	r27, 0x0292	; 0x800292 <process_timer.1915+0x3>
     52c:	88 51       	subi	r24, 0x18	; 24
     52e:	9c 4f       	sbci	r25, 0xFC	; 252
     530:	af 4f       	sbci	r26, 0xFF	; 255
     532:	bf 4f       	sbci	r27, 0xFF	; 255
     534:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <process_timer.1915>
     538:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <process_timer.1915+0x1>
     53c:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <process_timer.1915+0x2>
     540:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <process_timer.1915+0x3>
     544:	08 95       	ret

00000546 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     546:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     548:	97 b1       	in	r25, 0x07	; 7
     54a:	98 7f       	andi	r25, 0xF8	; 248
     54c:	87 70       	andi	r24, 0x07	; 7
     54e:	89 2b       	or	r24, r25
     550:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     552:	37 9a       	sbi	0x06, 7	; 6
     554:	08 95       	ret

00000556 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     556:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     558:	36 99       	sbic	0x06, 6	; 6
     55a:	fe cf       	rjmp	.-4      	; 0x558 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     55c:	84 b1       	in	r24, 0x04	; 4
     55e:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     560:	08 95       	ret

00000562 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     562:	0e 94 a3 02 	call	0x546	; 0x546 <adc_setchannel>
	return adc_readsel();
     566:	0e 94 ab 02 	call	0x556	; 0x556 <adc_readsel>
}
     56a:	08 95       	ret

0000056c <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     56c:	dc 01       	movw	r26, r24
     56e:	16 96       	adiw	r26, 0x06	; 6
     570:	ed 91       	ld	r30, X+
     572:	fc 91       	ld	r31, X
     574:	17 97       	sbiw	r26, 0x07	; 7
     576:	20 81       	ld	r18, Z
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	18 96       	adiw	r26, 0x08	; 8
     57e:	0c 90       	ld	r0, X
     580:	02 c0       	rjmp	.+4      	; 0x586 <read_button+0x1a>
     582:	f5 95       	asr	r31
     584:	e7 95       	ror	r30
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <read_button+0x16>
     58a:	cf 01       	movw	r24, r30
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	08 95       	ret

00000590 <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     590:	e9 e8       	ldi	r30, 0x89	; 137
     592:	f4 e0       	ldi	r31, 0x04	; 4
     594:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     59a:	14 86       	std	Z+12, r1	; 0x0c
     59c:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     59e:	12 86       	std	Z+10, r1	; 0x0a
     5a0:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     5a2:	16 86       	std	Z+14, r1	; 0x0e
     5a4:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     5a6:	26 e3       	ldi	r18, 0x36	; 54
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	37 83       	std	Z+7, r19	; 0x07
     5ac:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     5b2:	ec e5       	ldi	r30, 0x5C	; 92
     5b4:	f4 e0       	ldi	r31, 0x04	; 4
     5b6:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     5b8:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     5ba:	14 86       	std	Z+12, r1	; 0x0c
     5bc:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     5be:	12 86       	std	Z+10, r1	; 0x0a
     5c0:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     5c2:	16 86       	std	Z+14, r1	; 0x0e
     5c4:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     5c6:	37 83       	std	Z+7, r19	; 0x07
     5c8:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     5ca:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     5cc:	eb e6       	ldi	r30, 0x6B	; 107
     5ce:	f4 e0       	ldi	r31, 0x04	; 4
     5d0:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     5d2:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     5d4:	14 86       	std	Z+12, r1	; 0x0c
     5d6:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     5d8:	12 86       	std	Z+10, r1	; 0x0a
     5da:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     5dc:	16 86       	std	Z+14, r1	; 0x0e
     5de:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     5e0:	37 83       	std	Z+7, r19	; 0x07
     5e2:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     5e4:	96 e0       	ldi	r25, 0x06	; 6
     5e6:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     5e8:	e9 e4       	ldi	r30, 0x49	; 73
     5ea:	f4 e0       	ldi	r31, 0x04	; 4
     5ec:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     5ee:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     5f0:	14 86       	std	Z+12, r1	; 0x0c
     5f2:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     5f4:	12 86       	std	Z+10, r1	; 0x0a
     5f6:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     5f8:	16 86       	std	Z+14, r1	; 0x0e
     5fa:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     5fc:	40 e3       	ldi	r20, 0x30	; 48
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	57 83       	std	Z+7, r21	; 0x07
     602:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     608:	ea e3       	ldi	r30, 0x3A	; 58
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     60e:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     610:	14 86       	std	Z+12, r1	; 0x0c
     612:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     614:	12 86       	std	Z+10, r1	; 0x0a
     616:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     618:	16 86       	std	Z+14, r1	; 0x0e
     61a:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     61c:	37 83       	std	Z+7, r19	; 0x07
     61e:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     620:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     622:	ea e7       	ldi	r30, 0x7A	; 122
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     628:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     62a:	14 86       	std	Z+12, r1	; 0x0c
     62c:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     62e:	12 86       	std	Z+10, r1	; 0x0a
     630:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     632:	16 86       	std	Z+14, r1	; 0x0e
     634:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     636:	69 e3       	ldi	r22, 0x39	; 57
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	77 83       	std	Z+7, r23	; 0x07
     63c:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     63e:	a4 e0       	ldi	r26, 0x04	; 4
     640:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     642:	e8 e9       	ldi	r30, 0x98	; 152
     644:	f4 e0       	ldi	r31, 0x04	; 4
     646:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     648:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     64a:	14 86       	std	Z+12, r1	; 0x0c
     64c:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     64e:	12 86       	std	Z+10, r1	; 0x0a
     650:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     652:	16 86       	std	Z+14, r1	; 0x0e
     654:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     656:	43 e3       	ldi	r20, 0x33	; 51
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	57 83       	std	Z+7, r21	; 0x07
     65c:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     65e:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     660:	e7 ea       	ldi	r30, 0xA7	; 167
     662:	f4 e0       	ldi	r31, 0x04	; 4
     664:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     666:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     668:	14 86       	std	Z+12, r1	; 0x0c
     66a:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     66c:	12 86       	std	Z+10, r1	; 0x0a
     66e:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     670:	16 86       	std	Z+14, r1	; 0x0e
     672:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     674:	37 83       	std	Z+7, r19	; 0x07
     676:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     678:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     67a:	ec e1       	ldi	r30, 0x1C	; 28
     67c:	f4 e0       	ldi	r31, 0x04	; 4
     67e:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     680:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     682:	14 86       	std	Z+12, r1	; 0x0c
     684:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     686:	12 86       	std	Z+10, r1	; 0x0a
     688:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     68a:	16 86       	std	Z+14, r1	; 0x0e
     68c:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     68e:	77 83       	std	Z+7, r23	; 0x07
     690:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     692:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     694:	eb e2       	ldi	r30, 0x2B	; 43
     696:	f4 e0       	ldi	r31, 0x04	; 4
     698:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     69a:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     69c:	14 86       	std	Z+12, r1	; 0x0c
     69e:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     6a0:	12 86       	std	Z+10, r1	; 0x0a
     6a2:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     6a4:	16 86       	std	Z+14, r1	; 0x0e
     6a6:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     6a8:	57 83       	std	Z+7, r21	; 0x07
     6aa:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     6ac:	10 86       	std	Z+8, r1	; 0x08
     6ae:	08 95       	ret

000006b0 <process_button>:
}

void process_button(void)
{
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     6be:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
     6c2:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
     6c6:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
     6ca:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
     6ce:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <timer_button>
     6d2:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <timer_button+0x1>
     6d6:	a0 91 5a 04 	lds	r26, 0x045A	; 0x80045a <timer_button+0x2>
     6da:	b0 91 5b 04 	lds	r27, 0x045B	; 0x80045b <timer_button+0x3>
     6de:	84 17       	cp	r24, r20
     6e0:	95 07       	cpc	r25, r21
     6e2:	a6 07       	cpc	r26, r22
     6e4:	b7 07       	cpc	r27, r23
     6e6:	08 f0       	brcs	.+2      	; 0x6ea <process_button+0x3a>
     6e8:	85 c0       	rjmp	.+266    	; 0x7f4 <process_button+0x144>
	{
		timer_button = mktime.ms + 20;
     6ea:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
     6ee:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
     6f2:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
     6f6:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
     6fa:	44 96       	adiw	r24, 0x14	; 20
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <timer_button>
     704:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <timer_button+0x1>
     708:	a0 93 5a 04 	sts	0x045A, r26	; 0x80045a <timer_button+0x2>
     70c:	b0 93 5b 04 	sts	0x045B, r27	; 0x80045b <timer_button+0x3>
     710:	c0 e6       	ldi	r28, 0x60	; 96
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	0f 2e       	mov	r0, r31
     716:	f4 e7       	ldi	r31, 0x74	; 116
     718:	ef 2e       	mov	r14, r31
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ff 2e       	mov	r15, r31
     71e:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     720:	dd 24       	eor	r13, r13
     722:	d3 94       	inc	r13
     724:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     726:	88 81       	ld	r24, Y
     728:	99 81       	ldd	r25, Y+1	; 0x01
     72a:	0e 94 b6 02 	call	0x56c	; 0x56c <read_button>
			if(red_val != but_tab[i]->value)
     72e:	e8 81       	ld	r30, Y
     730:	f9 81       	ldd	r31, Y+1	; 0x01
     732:	95 81       	ldd	r25, Z+5	; 0x05
     734:	89 17       	cp	r24, r25
     736:	e1 f0       	breq	.+56     	; 0x770 <process_button+0xc0>
			{
				but_tab[i]->value = red_val;
     738:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	61 f4       	brne	.+24     	; 0x756 <process_button+0xa6>
     73e:	88 81       	ld	r24, Y
     740:	99 81       	ldd	r25, Y+1	; 0x01
     742:	dc 01       	movw	r26, r24
     744:	19 96       	adiw	r26, 0x09	; 9
     746:	ed 91       	ld	r30, X+
     748:	fc 91       	ld	r31, X
     74a:	1a 97       	sbiw	r26, 0x0a	; 10
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	09 f4       	brne	.+2      	; 0x752 <process_button+0xa2>
     750:	41 c0       	rjmp	.+130    	; 0x7d4 <process_button+0x124>
				but_tab[i]->rise_callback(but_tab[i]);
     752:	09 95       	icall
     754:	3f c0       	rjmp	.+126    	; 0x7d4 <process_button+0x124>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     756:	81 11       	cpse	r24, r1
     758:	3d c0       	rjmp	.+122    	; 0x7d4 <process_button+0x124>
     75a:	88 81       	ld	r24, Y
     75c:	99 81       	ldd	r25, Y+1	; 0x01
     75e:	dc 01       	movw	r26, r24
     760:	1b 96       	adiw	r26, 0x0b	; 11
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	1c 97       	sbiw	r26, 0x0c	; 12
     768:	30 97       	sbiw	r30, 0x00	; 0
     76a:	21 f0       	breq	.+8      	; 0x774 <process_button+0xc4>
				but_tab[i]->fall_callback(but_tab[i]);
     76c:	09 95       	icall
     76e:	02 c0       	rjmp	.+4      	; 0x774 <process_button+0xc4>
			}
			//timer
			if (red_val == 0)
     770:	81 11       	cpse	r24, r1
     772:	30 c0       	rjmp	.+96     	; 0x7d4 <process_button+0x124>
			{
				but_tab[i]->tim_cnt++;
     774:	d8 01       	movw	r26, r16
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	a2 81       	ldd	r26, Z+2	; 0x02
     780:	b3 81       	ldd	r27, Z+3	; 0x03
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	a1 1d       	adc	r26, r1
     786:	b1 1d       	adc	r27, r1
     788:	80 83       	st	Z, r24
     78a:	91 83       	std	Z+1, r25	; 0x01
     78c:	a2 83       	std	Z+2, r26	; 0x02
     78e:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     790:	d8 01       	movw	r26, r16
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	a2 81       	ldd	r26, Z+2	; 0x02
     79c:	b3 81       	ldd	r27, Z+3	; 0x03
     79e:	88 97       	sbiw	r24, 0x28	; 40
     7a0:	a1 05       	cpc	r26, r1
     7a2:	b1 05       	cpc	r27, r1
     7a4:	10 f1       	brcs	.+68     	; 0x7ea <process_button+0x13a>
     7a6:	84 81       	ldd	r24, Z+4	; 0x04
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	f9 f0       	breq	.+62     	; 0x7ea <process_button+0x13a>
				{
					if (but_tab[i]->timer_callback != 0)
     7ac:	05 84       	ldd	r0, Z+13	; 0x0d
     7ae:	f6 85       	ldd	r31, Z+14	; 0x0e
     7b0:	e0 2d       	mov	r30, r0
     7b2:	30 97       	sbiw	r30, 0x00	; 0
     7b4:	19 f0       	breq	.+6      	; 0x7bc <process_button+0x10c>
					but_tab[i]->timer_callback(&button1);
     7b6:	89 e8       	ldi	r24, 0x89	; 137
     7b8:	94 e0       	ldi	r25, 0x04	; 4
     7ba:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     7bc:	d8 01       	movw	r26, r16
     7be:	ed 91       	ld	r30, X+
     7c0:	fc 91       	ld	r31, X
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	10 82       	st	Z, r1
     7c6:	11 82       	std	Z+1, r1	; 0x01
     7c8:	12 82       	std	Z+2, r1	; 0x02
     7ca:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	d4 82       	std	Z+4, r13	; 0x04
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <process_button+0x13a>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     7d4:	d8 01       	movw	r26, r16
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	10 82       	st	Z, r1
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	14 82       	std	Z+4, r1	; 0x04
     7ea:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     7ec:	ce 15       	cp	r28, r14
     7ee:	df 05       	cpc	r29, r15
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <process_button+0x144>
     7f2:	98 cf       	rjmp	.-208    	; 0x724 <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	08 95       	ret

00000804 <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     804:	0e 94 c8 02 	call	0x590	; 0x590 <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     808:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     80a:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     80c:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     80e:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     810:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     812:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     814:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     816:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     818:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     81a:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     81c:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     81e:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     820:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     822:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     824:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     826:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     828:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     82a:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     82c:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     82e:	a8 9a       	sbi	0x15, 0	; 21
     830:	08 95       	ret

00000832 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     832:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
     836:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
     83a:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
     83e:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
     842:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <buzzer_timer>
     846:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <buzzer_timer+0x1>
     84a:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <buzzer_timer+0x2>
     84e:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <buzzer_timer+0x3>
     852:	84 17       	cp	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	a6 07       	cpc	r26, r22
     858:	b7 07       	cpc	r27, r23
     85a:	08 f0       	brcs	.+2      	; 0x85e <buzzer_process+0x2c>
     85c:	59 c0       	rjmp	.+178    	; 0x910 <__stack+0xb1>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     85e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
     862:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
     866:	95 ff       	sbrs	r25, 5
     868:	37 c0       	rjmp	.+110    	; 0x8d8 <__stack+0x79>
     86a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <buzzer_state>
     86e:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <buzzer_state+0x1>
     872:	a0 91 9a 02 	lds	r26, 0x029A	; 0x80029a <buzzer_state+0x2>
     876:	b0 91 9b 02 	lds	r27, 0x029B	; 0x80029b <buzzer_state+0x3>
     87a:	89 2b       	or	r24, r25
     87c:	8a 2b       	or	r24, r26
     87e:	8b 2b       	or	r24, r27
     880:	59 f5       	brne	.+86     	; 0x8d8 <__stack+0x79>
		{
			ON_BUZZER;
     882:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     884:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
     888:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
     88c:	9f 7d       	andi	r25, 0xDF	; 223
     88e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
     892:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
			buzzer_state = 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <buzzer_state>
     8a2:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <buzzer_state+0x1>
     8a6:	a0 93 9a 02 	sts	0x029A, r26	; 0x80029a <buzzer_state+0x2>
     8aa:	b0 93 9b 02 	sts	0x029B, r27	; 0x80029b <buzzer_state+0x3>
			buzzer_timer += 100;
     8ae:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <buzzer_timer>
     8b2:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <buzzer_timer+0x1>
     8b6:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <buzzer_timer+0x2>
     8ba:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <buzzer_timer+0x3>
     8be:	8c 59       	subi	r24, 0x9C	; 156
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	af 4f       	sbci	r26, 0xFF	; 255
     8c4:	bf 4f       	sbci	r27, 0xFF	; 255
     8c6:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <buzzer_timer>
     8ca:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <buzzer_timer+0x1>
     8ce:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <buzzer_timer+0x2>
     8d2:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <buzzer_timer+0x3>
     8d6:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     8d8:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     8da:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <buzzer_state>
     8de:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <buzzer_state+0x1>
     8e2:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <buzzer_state+0x2>
     8e6:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <buzzer_state+0x3>
			buzzer_timer += 50;
     8ea:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <buzzer_timer>
     8ee:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <buzzer_timer+0x1>
     8f2:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <buzzer_timer+0x2>
     8f6:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <buzzer_timer+0x3>
     8fa:	c2 96       	adiw	r24, 0x32	; 50
     8fc:	a1 1d       	adc	r26, r1
     8fe:	b1 1d       	adc	r27, r1
     900:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <buzzer_timer>
     904:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <buzzer_timer+0x1>
     908:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <buzzer_timer+0x2>
     90c:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <buzzer_timer+0x3>
     910:	08 95       	ret

00000912 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     912:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     914:	c0 98       	cbi	0x18, 0	; 24
     916:	08 95       	ret

00000918 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     918:	8e e9       	ldi	r24, 0x9E	; 158
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
     924:	8a eb       	ldi	r24, 0xBA	; 186
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	0e 94 b3 13 	call	0x2766	; 0x2766 <evTime_init>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <motorD>
     932:	94 98       	cbi	0x12, 4	; 18
     934:	15 bc       	out	0x25, r1	; 37
     936:	8f 9a       	sbi	0x11, 7	; 17
     938:	97 9a       	sbi	0x12, 7	; 18
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	08 95       	ret

00000940 <dcmotorpwm_deinit>:
     940:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <motorD>
     944:	15 bc       	out	0x25, r1	; 37
     946:	97 9a       	sbi	0x12, 7	; 18
     948:	94 98       	cbi	0x12, 4	; 18
     94a:	08 95       	ret

0000094c <dcmotor_is_on>:
     94c:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <motorD>
     950:	92 50       	subi	r25, 0x02	; 2
     952:	21 e0       	ldi	r18, 0x01	; 1
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	93 30       	cpi	r25, 0x03	; 3
     958:	10 f0       	brcs	.+4      	; 0x95e <dcmotor_is_on+0x12>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	c9 01       	movw	r24, r18
     960:	08 95       	ret

00000962 <dcmotorpwm_stop>:
     962:	0e 94 a6 04 	call	0x94c	; 0x94c <dcmotor_is_on>
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	99 f0       	breq	.+38     	; 0x990 <dcmotorpwm_stop+0x2e>
     96a:	8c ea       	ldi	r24, 0xAC	; 172
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
     976:	15 bc       	out	0x25, r1	; 37
     978:	97 98       	cbi	0x12, 7	; 18
     97a:	94 98       	cbi	0x12, 4	; 18
     97c:	e6 eb       	ldi	r30, 0xB6	; 182
     97e:	f4 e0       	ldi	r31, 0x04	; 4
     980:	80 81       	ld	r24, Z
     982:	81 83       	std	Z+1, r24	; 0x01
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 83       	st	Z, r24
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret

00000992 <dcmotorpwm_start>:
     992:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <motorD>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	d9 f4       	brne	.+54     	; 0x9d0 <dcmotorpwm_start+0x3e>
     99a:	94 9a       	sbi	0x12, 4	; 18
     99c:	85 b5       	in	r24, 0x25	; 37
     99e:	80 63       	ori	r24, 0x30	; 48
     9a0:	85 bd       	out	0x25, r24	; 37
     9a2:	85 b5       	in	r24, 0x25	; 37
     9a4:	80 64       	ori	r24, 0x40	; 64
     9a6:	85 bd       	out	0x25, r24	; 37
     9a8:	85 b5       	in	r24, 0x25	; 37
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	85 bd       	out	0x25, r24	; 37
     9ae:	e6 eb       	ldi	r30, 0xB6	; 182
     9b0:	f4 e0       	ldi	r31, 0x04	; 4
     9b2:	80 81       	ld	r24, Z
     9b4:	81 83       	std	Z+1, r24	; 0x01
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	80 83       	st	Z, r24
     9ba:	48 ee       	ldi	r20, 0xE8	; 232
     9bc:	53 e0       	ldi	r21, 0x03	; 3
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	8a eb       	ldi	r24, 0xBA	; 186
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	08 95       	ret
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	08 95       	ret

000009d6 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     9d6:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <motorD+0x3>
}
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	08 95       	ret

000009de <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     9de:	8a eb       	ldi	r24, 0xBA	; 186
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
	dcmotorpwm_stop();
     9ea:	0e 94 b1 04 	call	0x962	; 0x962 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <motorD>
}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	08 95       	ret

000009fa <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     9fa:	0e 94 a6 04 	call	0x94c	; 0x94c <dcmotor_is_on>
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	29 f0       	breq	.+10     	; 0xa0c <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <motorD>
		return 1;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     a0c:	08 95       	ret

00000a0e <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     a0e:	cf 93       	push	r28
     a10:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     a12:	46 e9       	ldi	r20, 0x96	; 150
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 ea       	ldi	r24, 0xA0	; 160
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <evTime_process_period>
     a22:	89 2b       	or	r24, r25
     a24:	81 f1       	breq	.+96     	; 0xa86 <dcmotor_process+0x78>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     a26:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <motorD>
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	91 f0       	breq	.+36     	; 0xa52 <dcmotor_process+0x44>
     a2e:	28 f4       	brcc	.+10     	; 0xa3a <dcmotor_process+0x2c>
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	61 f0       	breq	.+24     	; 0xa4c <dcmotor_process+0x3e>
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	31 f0       	breq	.+12     	; 0xa44 <dcmotor_process+0x36>
     a38:	26 c0       	rjmp	.+76     	; 0xa86 <dcmotor_process+0x78>
     a3a:	84 30       	cpi	r24, 0x04	; 4
     a3c:	09 f1       	breq	.+66     	; 0xa80 <dcmotor_process+0x72>
     a3e:	85 30       	cpi	r24, 0x05	; 5
     a40:	e1 f0       	breq	.+56     	; 0xa7a <dcmotor_process+0x6c>
     a42:	21 c0       	rjmp	.+66     	; 0xa86 <dcmotor_process+0x78>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     a44:	c0 93 b9 04 	sts	0x04B9, r28	; 0x8004b9 <motorD+0x3>
			OCR2 = count_pwm(value);
     a48:	13 bc       	out	0x23, r1	; 35
			break;
     a4a:	1d c0       	rjmp	.+58     	; 0xa86 <dcmotor_process+0x78>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     a4c:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <motorD+0x3>
			break;
     a50:	1a c0       	rjmp	.+52     	; 0xa86 <dcmotor_process+0x78>

			case MOTOR_TRY:
				if (value <= 50)
     a52:	c3 33       	cpi	r28, 0x33	; 51
     a54:	28 f4       	brcc	.+10     	; 0xa60 <dcmotor_process+0x52>
				{
					motorD.pwm_value = value + 20;
     a56:	cc 5e       	subi	r28, 0xEC	; 236
     a58:	c0 93 b9 04 	sts	0x04B9, r28	; 0x8004b9 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
     a5c:	13 bc       	out	0x23, r1	; 35
     a5e:	13 c0       	rjmp	.+38     	; 0xa86 <dcmotor_process+0x78>
				}
				else if ((value > 50) && (value <= 70))
     a60:	8d ec       	ldi	r24, 0xCD	; 205
     a62:	8c 0f       	add	r24, r28
     a64:	84 31       	cpi	r24, 0x14	; 20
     a66:	28 f4       	brcc	.+10     	; 0xa72 <dcmotor_process+0x64>
				{
					motorD.pwm_value = value + 15;
     a68:	c1 5f       	subi	r28, 0xF1	; 241
     a6a:	c0 93 b9 04 	sts	0x04B9, r28	; 0x8004b9 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
     a6e:	13 bc       	out	0x23, r1	; 35
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <dcmotor_process+0x78>
				}
				else
				{
					motorD.pwm_value = value;
     a72:	c0 93 b9 04 	sts	0x04B9, r28	; 0x8004b9 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
     a76:	13 bc       	out	0x23, r1	; 35
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <dcmotor_process+0x78>
				}
			break;

			case MOTOR_ERROR:
			#if !TEST_APP
			TCCR2 = 0;
     a7a:	15 bc       	out	0x25, r1	; 37
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     a7c:	97 98       	cbi	0x12, 7	; 18
			#endif
			break;
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <dcmotor_process+0x78>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     a8a:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     a8c:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     a8e:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     a90:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     a92:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     a94:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     a96:	af 9a       	sbi	0x15, 7	; 21
     a98:	08 95       	ret

00000a9a <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     a9a:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     a9c:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     aa0:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     aa2:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     aa6:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     aa8:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     aac:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     aae:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <DispD4+0x1>
     ab2:	08 95       	ret

00000ab4 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     ab4:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
     ab6:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
     ab8:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
     aba:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
     abc:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
     abe:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
     ac0:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
     ac2:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
     ac4:	ee ec       	ldi	r30, 0xCE	; 206
     ac6:	f4 e0       	ldi	r31, 0x04	; 4
     ac8:	8c ec       	ldi	r24, 0xCC	; 204
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	91 83       	std	Z+1, r25	; 0x01
     ace:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
     ad0:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
     ad2:	28 ed       	ldi	r18, 0xD8	; 216
     ad4:	34 e0       	ldi	r19, 0x04	; 4
     ad6:	33 83       	std	Z+3, r19	; 0x03
     ad8:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
     ada:	a5 ec       	ldi	r26, 0xC5	; 197
     adc:	b4 e0       	ldi	r27, 0x04	; 4
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	3c 93       	st	X, r19
     ae2:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
     aec:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
     aee:	2a ec       	ldi	r18, 0xCA	; 202
     af0:	34 e0       	ldi	r19, 0x04	; 4
     af2:	35 83       	std	Z+5, r19	; 0x05
     af4:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
     af6:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
     af8:	86 ed       	ldi	r24, 0xD6	; 214
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	97 83       	std	Z+7, r25	; 0x07
     afe:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
     b00:	e0 ec       	ldi	r30, 0xC0	; 192
     b02:	f4 e0       	ldi	r31, 0x04	; 4
     b04:	31 83       	std	Z+1, r19	; 0x01
     b06:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
     b08:	93 83       	std	Z+3, r25	; 0x03
     b0a:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
     b0c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <off_all_displays>
	clear_display();
     b10:	0e 94 45 05 	call	0xa8a	; 0xa8a <clear_display>
     b14:	08 95       	ret

00000b16 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
	if (DispD->value != displaying_value)
     b1a:	fc 01       	movw	r30, r24
     b1c:	30 81       	ld	r19, Z
     b1e:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
     b22:	32 17       	cp	r19, r18
     b24:	09 f4       	brne	.+2      	; 0xb28 <display_set_value+0x12>
     b26:	95 c0       	rjmp	.+298    	; 0xc52 <display_set_value+0x13c>
     b28:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
     b2a:	0e 94 45 05 	call	0xa8a	; 0xa8a <clear_display>
		switch(DispD->value)
     b2e:	e8 81       	ld	r30, Y
     b30:	8e 2f       	mov	r24, r30
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	8f 3f       	cpi	r24, 0xFF	; 255
     b36:	91 05       	cpc	r25, r1
     b38:	08 f0       	brcs	.+2      	; 0xb3c <display_set_value+0x26>
     b3a:	88 c0       	rjmp	.+272    	; 0xc4c <display_set_value+0x136>
     b3c:	fc 01       	movw	r30, r24
     b3e:	e6 5d       	subi	r30, 0xD6	; 214
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__tablejump2__>
		{
			case 0:
			LED_ON_A;
     b46:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b48:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b4a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b4c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     b4e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     b50:	aa 98       	cbi	0x15, 2	; 21
			break;
     b52:	7c c0       	rjmp	.+248    	; 0xc4c <display_set_value+0x136>
			case 1:
			LED_ON_B;
     b54:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b56:	dd 98       	cbi	0x1b, 5	; 27
			break;
     b58:	79 c0       	rjmp	.+242    	; 0xc4c <display_set_value+0x136>
			case 2:
			LED_ON_A;
     b5a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b5c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     b5e:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
     b60:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
     b62:	df 98       	cbi	0x1b, 7	; 27
			break;
     b64:	73 c0       	rjmp	.+230    	; 0xc4c <display_set_value+0x136>
			case 3:
			LED_ON_A;
     b66:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b68:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
     b6a:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     b6c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b6e:	df 98       	cbi	0x1b, 7	; 27
			break;
     b70:	6d c0       	rjmp	.+218    	; 0xc4c <display_set_value+0x136>
			case 4:
			LED_ON_F;
     b72:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     b74:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
     b76:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b78:	dd 98       	cbi	0x1b, 5	; 27
			break;
     b7a:	68 c0       	rjmp	.+208    	; 0xc4c <display_set_value+0x136>
			case 5:
			LED_ON_A;
     b7c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     b7e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     b80:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     b82:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b84:	df 98       	cbi	0x1b, 7	; 27
			break;
     b86:	62 c0       	rjmp	.+196    	; 0xc4c <display_set_value+0x136>
			case 6:
			LED_ON_A;
     b88:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
     b8a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     b8c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
     b8e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     b90:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     b92:	de 98       	cbi	0x1b, 6	; 27
			break;
     b94:	5b c0       	rjmp	.+182    	; 0xc4c <display_set_value+0x136>
			case 7:
			LED_ON_A;
     b96:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     b98:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     b9a:	dd 98       	cbi	0x1b, 5	; 27
			break;
     b9c:	57 c0       	rjmp	.+174    	; 0xc4c <display_set_value+0x136>
			case 8:
			LED_ON_A;
     b9e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     ba0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     ba2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     ba4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     ba6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     ba8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     baa:	af 98       	cbi	0x15, 7	; 21
			break;
     bac:	4f c0       	rjmp	.+158    	; 0xc4c <display_set_value+0x136>
			case 9:
			LED_ON_A;
     bae:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     bb0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     bb2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bb4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     bb6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bb8:	af 98       	cbi	0x15, 7	; 21
			break;
     bba:	48 c0       	rjmp	.+144    	; 0xc4c <display_set_value+0x136>
			case 'a':
			LED_ON_A;
     bbc:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     bbe:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     bc0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
     bc2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bc4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bc6:	af 98       	cbi	0x15, 7	; 21
			break;
     bc8:	41 c0       	rjmp	.+130    	; 0xc4c <display_set_value+0x136>
			case 'b':
			LED_ON_C;
     bca:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     bcc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bce:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bd0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bd2:	af 98       	cbi	0x15, 7	; 21
			break;
     bd4:	3b c0       	rjmp	.+118    	; 0xc4c <display_set_value+0x136>
			case 'c':
			LED_ON_A;
     bd6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     bd8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bda:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bdc:	aa 98       	cbi	0x15, 2	; 21
			break;
     bde:	36 c0       	rjmp	.+108    	; 0xc4c <display_set_value+0x136>
			case 'd':
			LED_ON_B;
     be0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
     be2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     be4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     be6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     be8:	af 98       	cbi	0x15, 7	; 21
			break;
     bea:	30 c0       	rjmp	.+96     	; 0xc4c <display_set_value+0x136>
			case 'e':
			LED_ON_A;
     bec:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
     bee:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     bf0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bf2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bf4:	af 98       	cbi	0x15, 7	; 21
			break;
     bf6:	2a c0       	rjmp	.+84     	; 0xc4c <display_set_value+0x136>
			case 'f':
			LED_ON_A;
     bf8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
     bfa:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     bfc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     bfe:	af 98       	cbi	0x15, 7	; 21
			break;
     c00:	25 c0       	rjmp	.+74     	; 0xc4c <display_set_value+0x136>
			case 'r':
			LED_ON_E;
     c02:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     c04:	af 98       	cbi	0x15, 7	; 21
			break;
     c06:	22 c0       	rjmp	.+68     	; 0xc4c <display_set_value+0x136>
			case 'o':
			LED_ON_C;
     c08:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c0a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c0c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
     c0e:	af 98       	cbi	0x15, 7	; 21
			break;
     c10:	1d c0       	rjmp	.+58     	; 0xc4c <display_set_value+0x136>
			case 'p':
			LED_ON_A;
     c12:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
     c14:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
     c16:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c18:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c1a:	af 98       	cbi	0x15, 7	; 21
			break;
     c1c:	17 c0       	rjmp	.+46     	; 0xc4c <display_set_value+0x136>
			case 's':
			LED_ON_A;
     c1e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
     c20:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
     c22:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
     c24:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
     c26:	af 98       	cbi	0x15, 7	; 21
			break;
     c28:	11 c0       	rjmp	.+34     	; 0xc4c <display_set_value+0x136>
			case 'l':
			LED_ON_D;
     c2a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
     c2c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
     c2e:	aa 98       	cbi	0x15, 2	; 21
			break;
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
     c32:	af 98       	cbi	0x15, 7	; 21
			break;
     c34:	0b c0       	rjmp	.+22     	; 0xc4c <display_set_value+0x136>
			case 254:
			LED_ON_F;
     c36:	aa 98       	cbi	0x15, 2	; 21
			break;
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <display_set_value+0x136>
			case 253:
			LED_ON_E;
     c3a:	de 98       	cbi	0x1b, 6	; 27
			break;
     c3c:	07 c0       	rjmp	.+14     	; 0xc4c <display_set_value+0x136>
			case 252:
			LED_ON_D;
     c3e:	df 98       	cbi	0x1b, 7	; 27
			break;
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <display_set_value+0x136>
			case 251:
			LED_ON_C;
     c42:	dd 98       	cbi	0x1b, 5	; 27
			break;
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <display_set_value+0x136>
			case 250:
			LED_ON_B;
     c46:	ad 98       	cbi	0x15, 5	; 21
			break;
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <display_set_value+0x136>
			case 249:
			LED_ON_A;
     c4a:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
     c4c:	88 81       	ld	r24, Y
     c4e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <on_display>:
void on_display(disp_drv *DispD)
{
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
	off_all_displays();
     c5e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <off_all_displays>
	display_set_value(DispD);
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 8b 05 	call	0xb16	; 0xb16 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	cc 3c       	cpi	r28, 0xCC	; 204
     c6c:	d8 07       	cpc	r29, r24
     c6e:	29 f4       	brne	.+10     	; 0xc7a <on_display+0x22>
	{
		LED_ON_DISP1;
     c70:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <DispD1+0x1>
     c78:	19 c0       	rjmp	.+50     	; 0xcac <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	c8 3d       	cpi	r28, 0xD8	; 216
     c7e:	d8 07       	cpc	r29, r24
     c80:	29 f4       	brne	.+10     	; 0xc8c <on_display+0x34>
	{
		LED_ON_DISP2;
     c82:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <DispD2+0x1>
     c8a:	10 c0       	rjmp	.+32     	; 0xcac <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	ca 3c       	cpi	r28, 0xCA	; 202
     c90:	d8 07       	cpc	r29, r24
     c92:	29 f4       	brne	.+10     	; 0xc9e <on_display+0x46>
	{
		LED_ON_DISP3;
     c94:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <DispD3+0x1>
     c9c:	07 c0       	rjmp	.+14     	; 0xcac <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
     c9e:	c6 5d       	subi	r28, 0xD6	; 214
     ca0:	d4 40       	sbci	r29, 0x04	; 4
     ca2:	21 f4       	brne	.+8      	; 0xcac <on_display+0x54>
	{
		LED_ON_DISP4;
     ca4:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <DispD4+0x1>
	}
	#endif
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
     cbe:	c0 81       	ld	r28, Z
     cc0:	d1 81       	ldd	r29, Z+1	; 0x01
     cc2:	21 96       	adiw	r28, 0x01	; 1
     cc4:	d1 83       	std	Z+1, r29	; 0x01
     cc6:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
     cc8:	9e 01       	movw	r18, r28
     cca:	ad ec       	ldi	r26, 0xCD	; 205
     ccc:	bc ec       	ldi	r27, 0xCC	; 204
     cce:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__umulhisi3>
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	9c 01       	movw	r18, r24
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	82 0f       	add	r24, r18
     cf2:	93 1f       	adc	r25, r19
     cf4:	c8 17       	cp	r28, r24
     cf6:	d9 07       	cpc	r29, r25
     cf8:	01 f5       	brne	.+64     	; 0xd3a <display_process+0x88>
     cfa:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
     cfc:	10 91 a5 02 	lds	r17, 0x02A5	; 0x8002a5 <iteration>
     d00:	14 30       	cpi	r17, 0x04	; 4
     d02:	58 f4       	brcc	.+22     	; 0xd1a <display_process+0x68>
			on_display(disp_tab[iteration]);
     d04:	e1 2f       	mov	r30, r17
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	e2 53       	subi	r30, 0x32	; 50
     d0e:	fb 4f       	sbci	r31, 0xFB	; 251
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	0e 94 2c 06 	call	0xc58	; 0xc58 <on_display>
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <display_process+0x6c>
		else
			off_all_displays();
     d1a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <off_all_displays>
		iteration++;
     d1e:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     d20:	15 30       	cpi	r17, 0x05	; 5
     d22:	19 f0       	breq	.+6      	; 0xd2a <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
     d24:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <iteration>
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
     d2a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
     d2e:	c0 39       	cpi	r28, 0x90	; 144
     d30:	d1 40       	sbci	r29, 0x01	; 1
     d32:	19 f4       	brne	.+6      	; 0xd3a <display_process+0x88>
     d34:	f7 01       	movw	r30, r14
     d36:	11 82       	std	Z+1, r1	; 0x01
     d38:	10 82       	st	Z, r1
	}
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	08 95       	ret

00000d46 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
     d46:	fc 01       	movw	r30, r24
	if (number >= 100) return;
     d48:	64 36       	cpi	r22, 0x64	; 100
     d4a:	f8 f4       	brcc	.+62     	; 0xd8a <disp_set_number+0x44>
	else if (number == 0)
     d4c:	61 11       	cpse	r22, r1
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
     d50:	a0 81       	ld	r26, Z
     d52:	b1 81       	ldd	r27, Z+1	; 0x01
     d54:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
     d56:	02 80       	ldd	r0, Z+2	; 0x02
     d58:	f3 81       	ldd	r31, Z+3	; 0x03
     d5a:	e0 2d       	mov	r30, r0
     d5c:	10 82       	st	Z, r1
     d5e:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
     d60:	a0 81       	ld	r26, Z
     d62:	b1 81       	ldd	r27, Z+1	; 0x01
     d64:	9d ec       	ldi	r25, 0xCD	; 205
     d66:	69 9f       	mul	r22, r25
     d68:	91 2d       	mov	r25, r1
     d6a:	11 24       	eor	r1, r1
     d6c:	96 95       	lsr	r25
     d6e:	96 95       	lsr	r25
     d70:	96 95       	lsr	r25
     d72:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
     d74:	02 80       	ldd	r0, Z+2	; 0x02
     d76:	f3 81       	ldd	r31, Z+3	; 0x03
     d78:	e0 2d       	mov	r30, r0
     d7a:	89 2f       	mov	r24, r25
     d7c:	88 0f       	add	r24, r24
     d7e:	98 2f       	mov	r25, r24
     d80:	99 0f       	add	r25, r25
     d82:	99 0f       	add	r25, r25
     d84:	89 0f       	add	r24, r25
     d86:	68 1b       	sub	r22, r24
     d88:	60 83       	st	Z, r22
     d8a:	08 95       	ret

00000d8c <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
     d8c:	fc 01       	movw	r30, r24
     d8e:	60 83       	st	Z, r22
     d90:	08 95       	ret

00000d92 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	39 f0       	breq	.+14     	; 0xda4 <dip_set_value+0x12>
     d96:	18 f0       	brcs	.+6      	; 0xd9e <dip_set_value+0xc>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	39 f0       	breq	.+14     	; 0xdaa <dip_set_value+0x18>
     d9c:	08 95       	ret
     d9e:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <motor_disp_value>
     da2:	08 95       	ret
     da4:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <servo_disp_value>
     da8:	08 95       	ret
     daa:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <servo_disp_value>
     dae:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <motor_disp_value>
     db2:	08 95       	ret

00000db4 <disp_get_state>:
     db4:	88 23       	and	r24, r24
     db6:	19 f0       	breq	.+6      	; 0xdbe <disp_get_state+0xa>
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	29 f0       	breq	.+10     	; 0xdc6 <disp_get_state+0x12>
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <disp_get_state+0x1a>
     dbe:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	08 95       	ret
     dc6:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	08 95       	ret
     dce:	8f ef       	ldi	r24, 0xFF	; 255
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	08 95       	ret

00000dd4 <disp_disable_voltage>:
     dd4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     dd8:	86 30       	cpi	r24, 0x06	; 6
     dda:	21 f4       	brne	.+8      	; 0xde4 <disp_disable_voltage+0x10>
     ddc:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <disp1_last_state>
     de0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <segment1+0x4>
     de4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     de8:	86 30       	cpi	r24, 0x06	; 6
     dea:	21 f4       	brne	.+8      	; 0xdf4 <disp_disable_voltage+0x20>
     dec:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <disp2_last_state>
     df0:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <segment2+0x4>
     df4:	08 95       	ret

00000df6 <disp_set_state>:
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	a1 f0       	breq	.+40     	; 0xe22 <disp_set_state+0x2c>
     dfa:	18 f0       	brcs	.+6      	; 0xe02 <disp_set_state+0xc>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	09 f1       	breq	.+66     	; 0xe42 <disp_set_state+0x4c>
     e00:	08 95       	ret
     e02:	66 30       	cpi	r22, 0x06	; 6
     e04:	21 f4       	brne	.+8      	; 0xe0e <disp_set_state+0x18>
     e06:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     e0a:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <disp1_last_state>
     e0e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     e12:	86 30       	cpi	r24, 0x06	; 6
     e14:	19 f4       	brne	.+6      	; 0xe1c <disp_set_state+0x26>
     e16:	60 93 da 04 	sts	0x04DA, r22	; 0x8004da <disp1_last_state>
     e1a:	08 95       	ret
     e1c:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <segment1+0x4>
     e20:	08 95       	ret
     e22:	66 30       	cpi	r22, 0x06	; 6
     e24:	21 f4       	brne	.+8      	; 0xe2e <disp_set_state+0x38>
     e26:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     e2a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <disp2_last_state>
     e2e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     e32:	86 30       	cpi	r24, 0x06	; 6
     e34:	19 f4       	brne	.+6      	; 0xe3c <disp_set_state+0x46>
     e36:	60 93 db 04 	sts	0x04DB, r22	; 0x8004db <disp2_last_state>
     e3a:	08 95       	ret
     e3c:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <segment2+0x4>
     e40:	08 95       	ret
     e42:	66 30       	cpi	r22, 0x06	; 6
     e44:	41 f4       	brne	.+16     	; 0xe56 <disp_set_state+0x60>
     e46:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     e4a:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <disp1_last_state>
     e4e:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     e52:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <disp2_last_state>
     e56:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     e5a:	86 30       	cpi	r24, 0x06	; 6
     e5c:	29 f4       	brne	.+10     	; 0xe68 <disp_set_state+0x72>
     e5e:	60 93 db 04 	sts	0x04DB, r22	; 0x8004db <disp2_last_state>
     e62:	60 93 da 04 	sts	0x04DA, r22	; 0x8004da <disp1_last_state>
     e66:	08 95       	ret
     e68:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <segment1+0x4>
     e6c:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <segment2+0x4>
     e70:	08 95       	ret

00000e72 <display_set_error>:
     e72:	95 e0       	ldi	r25, 0x05	; 5
     e74:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <segment1+0x4>
     e78:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <segment2+0x4>
     e7c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <error_reason>
     e80:	08 95       	ret

00000e82 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
     e82:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
     e86:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
     e8a:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
     e8e:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
     e92:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <timer_disp_process.1974>
     e96:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <timer_disp_process.1974+0x1>
     e9a:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <timer_disp_process.1974+0x2>
     e9e:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <timer_disp_process.1974+0x3>
     ea2:	48 17       	cp	r20, r24
     ea4:	59 07       	cpc	r21, r25
     ea6:	6a 07       	cpc	r22, r26
     ea8:	7b 07       	cpc	r23, r27
     eaa:	08 f0       	brcs	.+2      	; 0xeae <disp_process+0x2c>
     eac:	26 c1       	rjmp	.+588    	; 0x10fa <disp_process+0x278>
	{
        
        switch(segment1.state)
     eae:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <disp_process+0x36>
     eb6:	59 c0       	rjmp	.+178    	; 0xf6a <disp_process+0xe8>
     eb8:	30 f4       	brcc	.+12     	; 0xec6 <disp_process+0x44>
     eba:	88 23       	and	r24, r24
     ebc:	09 f4       	brne	.+2      	; 0xec0 <disp_process+0x3e>
     ebe:	87 c0       	rjmp	.+270    	; 0xfce <disp_process+0x14c>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	39 f1       	breq	.+78     	; 0xf12 <disp_process+0x90>
     ec4:	8e c0       	rjmp	.+284    	; 0xfe2 <disp_process+0x160>
     ec6:	85 30       	cpi	r24, 0x05	; 5
     ec8:	09 f4       	brne	.+2      	; 0xecc <disp_process+0x4a>
     eca:	74 c0       	rjmp	.+232    	; 0xfb4 <disp_process+0x132>
     ecc:	48 f1       	brcs	.+82     	; 0xf20 <disp_process+0x9e>
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	09 f0       	breq	.+2      	; 0xed4 <disp_process+0x52>
     ed2:	87 c0       	rjmp	.+270    	; 0xfe2 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
     ed4:	0e 94 9b 01 	call	0x336	; 0x336 <accum_get_voltage>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	48 ec       	ldi	r20, 0xC8	; 200
     ede:	52 e4       	ldi	r21, 0x42	; 66
     ee0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
     ee4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fixsfsi>
     ee8:	70 93 ba 02 	sts	0x02BA, r23	; 0x8002ba <voltage+0x1>
     eec:	60 93 b9 02 	sts	0x02B9, r22	; 0x8002b9 <voltage>
            disp_set_number(&segment1, voltage/100);
     ef0:	9b 01       	movw	r18, r22
     ef2:	36 95       	lsr	r19
     ef4:	27 95       	ror	r18
     ef6:	36 95       	lsr	r19
     ef8:	27 95       	ror	r18
     efa:	ab e7       	ldi	r26, 0x7B	; 123
     efc:	b4 e1       	ldi	r27, 0x14	; 20
     efe:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__umulhisi3>
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	68 2f       	mov	r22, r24
     f08:	85 ec       	ldi	r24, 0xC5	; 197
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
            break;
     f10:	68 c0       	rjmp	.+208    	; 0xfe2 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
     f12:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <motor_disp_value>
     f16:	85 ec       	ldi	r24, 0xC5	; 197
     f18:	94 e0       	ldi	r25, 0x04	; 4
     f1a:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
            break;
     f1e:	61 c0       	rjmp	.+194    	; 0xfe2 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
     f20:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	31 f0       	breq	.+12     	; 0xf34 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <segment1+0x4>
			    segment2.state = SEG_VALUE;
     f2e:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <segment2+0x4>
                break;
     f32:	57 c0       	rjmp	.+174    	; 0xfe2 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
     f34:	48 51       	subi	r20, 0x18	; 24
     f36:	5c 4f       	sbci	r21, 0xFC	; 252
     f38:	6f 4f       	sbci	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <timer_disp_process.1974>
     f40:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <timer_disp_process.1974+0x1>
     f44:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <timer_disp_process.1974+0x2>
     f48:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <timer_disp_process.1974+0x3>
			DispD2.value = 's';
     f4c:	83 e7       	ldi	r24, 0x73	; 115
     f4e:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <DispD2>
			DispD1.value = 'a';
     f52:	81 e6       	ldi	r24, 0x61	; 97
     f54:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <DispD1>
			DispD3.value = 'p';
     f58:	80 e7       	ldi	r24, 0x70	; 112
     f5a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <DispD3>
			segment1.state = SEG_VALUE;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <segment1+0x4>
			segment2.state = SEG_VALUE;
     f64:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <segment2+0x4>
			return;
     f68:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
     f6a:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	31 f0       	breq	.+12     	; 0xf7e <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
     f78:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <segment2+0x4>
                break;
     f7c:	32 c0       	rjmp	.+100    	; 0xfe2 <disp_process+0x160>
            }
			timer_disp_process += 1000;
     f7e:	48 51       	subi	r20, 0x18	; 24
     f80:	5c 4f       	sbci	r21, 0xFC	; 252
     f82:	6f 4f       	sbci	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <timer_disp_process.1974>
     f8a:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <timer_disp_process.1974+0x1>
     f8e:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <timer_disp_process.1974+0x2>
     f92:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
     f96:	8c e6       	ldi	r24, 0x6C	; 108
     f98:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <DispD2>
			DispD1.value = 'o';
     f9c:	8f e6       	ldi	r24, 0x6F	; 111
     f9e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <DispD1>
			DispD3.value = 'p';
     fa2:	80 e7       	ldi	r24, 0x70	; 112
     fa4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <DispD3>
			segment1.state = SEG_VALUE;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <segment1+0x4>
			segment2.state = SEG_VALUE;
     fae:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <segment2+0x4>
            break;
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
     fb4:	85 e6       	ldi	r24, 0x65	; 101
     fb6:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <DispD2>
			DispD1.value = 'r';
     fba:	82 e7       	ldi	r24, 0x72	; 114
     fbc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <DispD1>
			disp_set_number(&segment2, error_reason);
     fc0:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <error_reason>
     fc4:	80 ec       	ldi	r24, 0xC0	; 192
     fc6:	94 e0       	ldi	r25, 0x04	; 4
     fc8:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
            break;
     fcc:	0a c0       	rjmp	.+20     	; 0xfe2 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
     fce:	68 ef       	ldi	r22, 0xF8	; 248
     fd0:	8c ec       	ldi	r24, 0xCC	; 204
     fd2:	94 e0       	ldi	r25, 0x04	; 4
     fd4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
     fd8:	68 ef       	ldi	r22, 0xF8	; 248
     fda:	88 ed       	ldi	r24, 0xD8	; 216
     fdc:	94 e0       	ldi	r25, 0x04	; 4
     fde:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
            break;
        }

        switch(segment2.state)
     fe2:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	19 f1       	breq	.+70     	; 0x1030 <disp_process+0x1ae>
     fea:	48 f1       	brcs	.+82     	; 0x103e <disp_process+0x1bc>
     fec:	86 30       	cpi	r24, 0x06	; 6
     fee:	19 f0       	breq	.+6      	; 0xff6 <disp_process+0x174>
     ff0:	8d 30       	cpi	r24, 0x0D	; 13
     ff2:	81 f1       	breq	.+96     	; 0x1054 <disp_process+0x1d2>
     ff4:	6f c0       	rjmp	.+222    	; 0x10d4 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
     ff6:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <voltage>
     ffa:	50 91 ba 02 	lds	r21, 0x02BA	; 0x8002ba <voltage+0x1>
     ffe:	9a 01       	movw	r18, r20
    1000:	36 95       	lsr	r19
    1002:	27 95       	ror	r18
    1004:	36 95       	lsr	r19
    1006:	27 95       	ror	r18
    1008:	ab e7       	ldi	r26, 0x7B	; 123
    100a:	b4 e1       	ldi	r27, 0x14	; 20
    100c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__umulhisi3>
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	64 e6       	ldi	r22, 0x64	; 100
    1016:	68 9f       	mul	r22, r24
    1018:	90 01       	movw	r18, r0
    101a:	69 9f       	mul	r22, r25
    101c:	30 0d       	add	r19, r0
    101e:	11 24       	eor	r1, r1
    1020:	ba 01       	movw	r22, r20
    1022:	62 1b       	sub	r22, r18
    1024:	73 0b       	sbc	r23, r19
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	94 e0       	ldi	r25, 0x04	; 4
    102a:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
            break;
    102e:	52 c0       	rjmp	.+164    	; 0x10d4 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1030:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <servo_disp_value>
    1034:	80 ec       	ldi	r24, 0xC0	; 192
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
            break;
    103c:	4b c0       	rjmp	.+150    	; 0x10d4 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    103e:	68 ef       	ldi	r22, 0xF8	; 248
    1040:	8a ec       	ldi	r24, 0xCA	; 202
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1048:	68 ef       	ldi	r22, 0xF8	; 248
    104a:	86 ed       	ldi	r24, 0xD6	; 214
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
            break;
    1052:	40 c0       	rjmp	.+128    	; 0x10d4 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1054:	44 ef       	ldi	r20, 0xF4	; 244
    1056:	51 e0       	ldi	r21, 0x01	; 1
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	84 eb       	ldi	r24, 0xB4	; 180
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 fd 13 	call	0x27fa	; 0x27fa <evTime_process_period>
    1064:	89 2b       	or	r24, r25
    1066:	b1 f1       	breq	.+108    	; 0x10d4 <disp_process+0x252>
			{
				if (blink_state == 0)
    1068:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <blink_state>
    106c:	81 11       	cpse	r24, r1
    106e:	0e c0       	rjmp	.+28     	; 0x108c <disp_process+0x20a>
				{
					blink_state = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1076:	67 ef       	ldi	r22, 0xF7	; 247
    1078:	8a ec       	ldi	r24, 0xCA	; 202
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    1080:	67 ef       	ldi	r22, 0xF7	; 247
    1082:	86 ed       	ldi	r24, 0xD6	; 214
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
    108a:	24 c0       	rjmp	.+72     	; 0x10d4 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    108c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <blink_state>
					if (blink_cnt == 0) 
    1090:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <blink_cnt>
    1094:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <blink_cnt+0x1>
    1098:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <blink_cnt+0x2>
    109c:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <blink_cnt+0x3>
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	a1 05       	cpc	r26, r1
    10a4:	b1 05       	cpc	r27, r1
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
						break;
    10b0:	11 c0       	rjmp	.+34     	; 0x10d4 <disp_process+0x252>
					}
					blink_cnt--;
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	a1 09       	sbc	r26, r1
    10b6:	b1 09       	sbc	r27, r1
    10b8:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <blink_cnt>
    10bc:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <blink_cnt+0x1>
    10c0:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <blink_cnt+0x2>
    10c4:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    10c8:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <second_disp_blink_val>
    10cc:	80 ec       	ldi	r24, 0xC0	; 192
    10ce:	94 e0       	ldi	r25, 0x04	; 4
    10d0:	0e 94 a3 06 	call	0xd46	; 0xd46 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    10d4:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <timer_disp_process.1974>
    10d8:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <timer_disp_process.1974+0x1>
    10dc:	a0 91 ac 02 	lds	r26, 0x02AC	; 0x8002ac <timer_disp_process.1974+0x2>
    10e0:	b0 91 ad 02 	lds	r27, 0x02AD	; 0x8002ad <timer_disp_process.1974+0x3>
    10e4:	c2 96       	adiw	r24, 0x32	; 50
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
    10ea:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <timer_disp_process.1974>
    10ee:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <timer_disp_process.1974+0x1>
    10f2:	a0 93 ac 02 	sts	0x02AC, r26	; 0x8002ac <timer_disp_process.1974+0x2>
    10f6:	b0 93 ad 02 	sts	0x02AD, r27	; 0x8002ad <timer_disp_process.1974+0x3>
    10fa:	08 95       	ret

000010fc <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1100:	00 91 ed 04 	lds	r16, 0x04ED	; 0x8004ed <mktime+0x2>
    1104:	10 91 ee 04 	lds	r17, 0x04EE	; 0x8004ee <mktime+0x3>
    1108:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <mktime+0x4>
    110c:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <mktime+0x5>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	80 0f       	add	r24, r16
    1116:	91 1f       	adc	r25, r17
    1118:	a2 1f       	adc	r26, r18
    111a:	b3 1f       	adc	r27, r19
    111c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <animation_time>
    1120:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <animation_time+0x1>
    1124:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <animation_time+0x2>
    1128:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    112c:	62 e0       	ldi	r22, 0x02	; 2
    112e:	84 2f       	mov	r24, r20
    1130:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    113a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	29 f0       	breq	.+10     	; 0x114c <animation+0x12>
    1142:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	09 f0       	breq	.+2      	; 0x114c <animation+0x12>
    114a:	78 c0       	rjmp	.+240    	; 0x123c <animation+0x102>
    114c:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    1150:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    1154:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    1158:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    115c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <timer_anim.1994>
    1160:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <timer_anim.1994+0x1>
    1164:	a0 91 a8 02 	lds	r26, 0x02A8	; 0x8002a8 <timer_anim.1994+0x2>
    1168:	b0 91 a9 02 	lds	r27, 0x02A9	; 0x8002a9 <timer_anim.1994+0x3>
    116c:	84 17       	cp	r24, r20
    116e:	95 07       	cpc	r25, r21
    1170:	a6 07       	cpc	r26, r22
    1172:	b7 07       	cpc	r27, r23
    1174:	08 f0       	brcs	.+2      	; 0x1178 <animation+0x3e>
    1176:	62 c0       	rjmp	.+196    	; 0x123c <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1178:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
    117c:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
    1180:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
    1184:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
    1188:	81 55       	subi	r24, 0x51	; 81
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	af 4f       	sbci	r26, 0xFF	; 255
    118e:	bf 4f       	sbci	r27, 0xFF	; 255
    1190:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <timer_anim.1994>
    1194:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <timer_anim.1994+0x1>
    1198:	a0 93 a8 02 	sts	0x02A8, r26	; 0x8002a8 <timer_anim.1994+0x2>
    119c:	b0 93 a9 02 	sts	0x02A9, r27	; 0x8002a9 <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    11a0:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <segment1+0x4>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	61 f4       	brne	.+24     	; 0x11c0 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    11a8:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    11ac:	8c ec       	ldi	r24, 0xCC	; 204
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    11b4:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    11b8:	88 ed       	ldi	r24, 0xD8	; 216
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    11c0:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <segment2+0x4>
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	61 f4       	brne	.+24     	; 0x11e0 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    11c8:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    11cc:	8a ec       	ldi	r24, 0xCA	; 202
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    11d4:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    11d8:	86 ed       	ldi	r24, 0xD6	; 214
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    11e0:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    11e4:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    11e8:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    11ec:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    11f0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <animation_time>
    11f4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <animation_time+0x1>
    11f8:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <animation_time+0x2>
    11fc:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <animation_time+0x3>
    1200:	84 17       	cp	r24, r20
    1202:	95 07       	cpc	r25, r21
    1204:	a6 07       	cpc	r26, r22
    1206:	b7 07       	cpc	r27, r23
    1208:	28 f4       	brcc	.+10     	; 0x1214 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
			LED_ACUM_OFF;
    1212:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1214:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    121e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    1222:	81 50       	subi	r24, 0x01	; 1
    1224:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    1228:	9f 3f       	cpi	r25, 0xFF	; 255
    122a:	19 f4       	brne	.+6      	; 0x1232 <animation+0xf8>
    122c:	99 ef       	ldi	r25, 0xF9	; 249
    122e:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1232:	88 3f       	cpi	r24, 0xF8	; 248
    1234:	19 f4       	brne	.+6      	; 0x123c <animation+0x102>
    1236:	8e ef       	ldi	r24, 0xFE	; 254
    1238:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    123c:	08 95       	ret

0000123e <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    123e:	e1 99       	sbic	0x1c, 1	; 28
    1240:	fe cf       	rjmp	.-4      	; 0x123e <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1242:	9f bb       	out	0x1f, r25	; 31
    1244:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1246:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1248:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    124a:	e1 9a       	sbi	0x1c, 1	; 28
    124c:	08 95       	ret

0000124e <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    124e:	e1 99       	sbic	0x1c, 1	; 28
    1250:	fe cf       	rjmp	.-4      	; 0x124e <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1252:	9f bb       	out	0x1f, r25	; 31
    1254:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1256:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1258:	8d b3       	in	r24, 0x1d	; 29
    125a:	08 95       	ret

0000125c <set_error_state>:
}

uint16_t errorGetMotorVal(void)
{
	return motor_error_value;
}
    125c:	cf 93       	push	r28
    125e:	c8 2f       	mov	r28, r24
    1260:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    1264:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    1268:	82 60       	ori	r24, 0x02	; 2
    126a:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    126e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    1272:	8c 2f       	mov	r24, r28
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 39 07 	call	0xe72	; 0xe72 <display_set_error>
    127a:	0e 94 ef 04 	call	0x9de	; 0x9de <dcmotor_set_error>
    127e:	0e 94 3f 13 	call	0x267e	; 0x267e <system_error>
    1282:	c0 93 dc 04 	sts	0x04DC, r28	; 0x8004dc <led_blink>
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <error_init>:
    128a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <error_motor_state>
    128e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <error_motor_last_state>
    1292:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <error_motor_status>
    1296:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <error_servo_status>
    129a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <error_servo_state>
    129e:	87 ed       	ldi	r24, 0xD7	; 215
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <evTime_off>
    12a6:	8b ec       	ldi	r24, 0xCB	; 203
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <evTime_off>
    12ae:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <led_blink>
    12b2:	08 95       	ret

000012b4 <error_deinit>:
    12b4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <error_motor_state>
    12b8:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <error_motor_last_state>
    12bc:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <error_motor_status>
    12c0:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <error_servo_status>
    12c4:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <error_servo_state>
    12c8:	87 ed       	ldi	r24, 0xD7	; 215
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <evTime_off>
    12d0:	8b ec       	ldi	r24, 0xCB	; 203
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <evTime_off>
    12d8:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <led_blink>
    12dc:	08 95       	ret

000012de <error_event>:

void error_event(void)
{
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    12ea:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    12ee:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    12f2:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    12f6:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    12fa:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <error_event_timer.1846>
    12fe:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <error_event_timer.1846+0x1>
    1302:	a0 91 c9 02 	lds	r26, 0x02C9	; 0x8002c9 <error_event_timer.1846+0x2>
    1306:	b0 91 ca 02 	lds	r27, 0x02CA	; 0x8002ca <error_event_timer.1846+0x3>
    130a:	84 17       	cp	r24, r20
    130c:	95 07       	cpc	r25, r21
    130e:	a6 07       	cpc	r26, r22
    1310:	b7 07       	cpc	r27, r23
    1312:	08 f0       	brcs	.+2      	; 0x1316 <error_event+0x38>
    1314:	3b c3       	rjmp	.+1654   	; 0x198c <error_event+0x6ae>
    1316:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    131a:	80 ff       	sbrs	r24, 0
    131c:	37 c3       	rjmp	.+1646   	; 0x198c <error_event+0x6ae>
	{
		error_event_timer = mktime.ms + 500;
    131e:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    1322:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    1326:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    132a:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    132e:	4c 50       	subi	r20, 0x0C	; 12
    1330:	5e 4f       	sbci	r21, 0xFE	; 254
    1332:	6f 4f       	sbci	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	40 93 c7 02 	sts	0x02C7, r20	; 0x8002c7 <error_event_timer.1846>
    133a:	50 93 c8 02 	sts	0x02C8, r21	; 0x8002c8 <error_event_timer.1846+0x1>
    133e:	60 93 c9 02 	sts	0x02C9, r22	; 0x8002c9 <error_event_timer.1846+0x2>
    1342:	70 93 ca 02 	sts	0x02CA, r23	; 0x8002ca <error_event_timer.1846+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1346:	81 fd       	sbrc	r24, 1
    1348:	21 c3       	rjmp	.+1602   	; 0x198c <error_event+0x6ae>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    134a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <dcmotor_get_pwm>
    134e:	ec 01       	movw	r28, r24


static uint16_t count_motor_error_value(uint16_t x)
{
	uint16_t error_max_voltage;
	float voltage = accum_get_voltage();
    1350:	0e 94 9b 01 	call	0x336	; 0x336 <accum_get_voltage>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
	if (voltage < 9) voltage = 9;
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e1       	ldi	r20, 0x10	; 16
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__cmpsf2>
    1364:	88 23       	and	r24, r24
    1366:	44 f4       	brge	.+16     	; 0x1378 <error_event+0x9a>
    1368:	0f 2e       	mov	r0, r31
    136a:	c1 2c       	mov	r12, r1
    136c:	d1 2c       	mov	r13, r1
    136e:	f0 e1       	ldi	r31, 0x10	; 16
    1370:	ef 2e       	mov	r14, r31
    1372:	f1 e4       	ldi	r31, 0x41	; 65
    1374:	ff 2e       	mov	r15, r31
    1376:	f0 2d       	mov	r31, r0
	if (x >=10 && x < 15)
    1378:	ce 01       	movw	r24, r28
    137a:	0a 97       	sbiw	r24, 0x0a	; 10
    137c:	05 97       	sbiw	r24, 0x05	; 5
    137e:	78 f5       	brcc	.+94     	; 0x13de <error_event+0x100>
	error_max_voltage = 2*x-15 + (voltage-9)*x/6;
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e1       	ldi	r20, 0x10	; 16
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
    1394:	be 01       	movw	r22, r28
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	c7 01       	movw	r24, r14
    13a4:	b6 01       	movw	r22, r12
    13a6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 ec       	ldi	r20, 0xC0	; 192
    13b0:	50 e4       	ldi	r21, 0x40	; 64
    13b2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	be 01       	movw	r22, r28
    13bc:	66 0f       	add	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	6f 50       	subi	r22, 0x0F	; 15
    13c2:	71 09       	sbc	r23, r1
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	c7 01       	movw	r24, r14
    13d2:	b6 01       	movw	r22, r12
    13d4:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    13d8:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    13dc:	00 c1       	rjmp	.+512    	; 0x15de <error_event+0x300>
	else if (x >=15 && x < 25)
    13de:	ce 01       	movw	r24, r28
    13e0:	0f 97       	sbiw	r24, 0x0f	; 15
    13e2:	0a 97       	sbiw	r24, 0x0a	; 10
    13e4:	78 f5       	brcc	.+94     	; 0x1444 <error_event+0x166>
	error_max_voltage = 2*x-20 + (voltage-9)*x/6;
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e1       	ldi	r20, 0x10	; 16
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	c7 01       	movw	r24, r14
    13f0:	b6 01       	movw	r22, r12
    13f2:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    13f6:	6b 01       	movw	r12, r22
    13f8:	7c 01       	movw	r14, r24
    13fa:	be 01       	movw	r22, r28
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	c7 01       	movw	r24, r14
    140a:	b6 01       	movw	r22, r12
    140c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 ec       	ldi	r20, 0xC0	; 192
    1416:	50 e4       	ldi	r21, 0x40	; 64
    1418:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    141c:	6b 01       	movw	r12, r22
    141e:	7c 01       	movw	r14, r24
    1420:	be 01       	movw	r22, r28
    1422:	6a 50       	subi	r22, 0x0A	; 10
    1424:	70 48       	sbci	r23, 0x80	; 128
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1432:	9b 01       	movw	r18, r22
    1434:	ac 01       	movw	r20, r24
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    143e:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    1442:	cd c0       	rjmp	.+410    	; 0x15de <error_event+0x300>
	else if (x >=25 && x < 40)
    1444:	ce 01       	movw	r24, r28
    1446:	49 97       	sbiw	r24, 0x19	; 25
    1448:	0f 97       	sbiw	r24, 0x0f	; 15
    144a:	78 f5       	brcc	.+94     	; 0x14aa <error_event+0x1cc>
	error_max_voltage = 2*x-25 + (voltage-9)*x/6;
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e1       	ldi	r20, 0x10	; 16
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    145c:	6b 01       	movw	r12, r22
    145e:	7c 01       	movw	r14, r24
    1460:	be 01       	movw	r22, r28
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 ec       	ldi	r20, 0xC0	; 192
    147c:	50 e4       	ldi	r21, 0x40	; 64
    147e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    1482:	6b 01       	movw	r12, r22
    1484:	7c 01       	movw	r14, r24
    1486:	be 01       	movw	r22, r28
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	69 51       	subi	r22, 0x19	; 25
    148e:	71 09       	sbc	r23, r1
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
    149c:	c7 01       	movw	r24, r14
    149e:	b6 01       	movw	r22, r12
    14a0:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    14a4:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    14a8:	9a c0       	rjmp	.+308    	; 0x15de <error_event+0x300>
	else if (x >=40 && x < 50)
    14aa:	ce 01       	movw	r24, r28
    14ac:	88 97       	sbiw	r24, 0x28	; 40
    14ae:	0a 97       	sbiw	r24, 0x0a	; 10
    14b0:	78 f5       	brcc	.+94     	; 0x1510 <error_event+0x232>
	error_max_voltage = 2*x-10 + (voltage-9)*x/6;
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e1       	ldi	r20, 0x10	; 16
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	c7 01       	movw	r24, r14
    14bc:	b6 01       	movw	r22, r12
    14be:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    14c2:	6b 01       	movw	r12, r22
    14c4:	7c 01       	movw	r14, r24
    14c6:	be 01       	movw	r22, r28
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 ec       	ldi	r20, 0xC0	; 192
    14e2:	50 e4       	ldi	r21, 0x40	; 64
    14e4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    14e8:	6b 01       	movw	r12, r22
    14ea:	7c 01       	movw	r14, r24
    14ec:	be 01       	movw	r22, r28
    14ee:	65 50       	subi	r22, 0x05	; 5
    14f0:	70 48       	sbci	r23, 0x80	; 128
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    150a:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    150e:	67 c0       	rjmp	.+206    	; 0x15de <error_event+0x300>
	else if (x >=50 && x < 70)
    1510:	ce 01       	movw	r24, r28
    1512:	c2 97       	sbiw	r24, 0x32	; 50
    1514:	44 97       	sbiw	r24, 0x14	; 20
    1516:	78 f5       	brcc	.+94     	; 0x1576 <error_event+0x298>
	error_max_voltage = 2*x+10 + (voltage-9)*x/6;
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e1       	ldi	r20, 0x10	; 16
    151e:	51 e4       	ldi	r21, 0x41	; 65
    1520:	c7 01       	movw	r24, r14
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    1528:	6b 01       	movw	r12, r22
    152a:	7c 01       	movw	r14, r24
    152c:	be 01       	movw	r22, r28
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	c7 01       	movw	r24, r14
    153c:	b6 01       	movw	r22, r12
    153e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 ec       	ldi	r20, 0xC0	; 192
    1548:	50 e4       	ldi	r21, 0x40	; 64
    154a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    154e:	6b 01       	movw	r12, r22
    1550:	7c 01       	movw	r14, r24
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    1570:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    1574:	34 c0       	rjmp	.+104    	; 0x15de <error_event+0x300>
	else if (x >= 70)
    1576:	c6 34       	cpi	r28, 0x46	; 70
    1578:	d1 05       	cpc	r29, r1
    157a:	78 f1       	brcs	.+94     	; 0x15da <error_event+0x2fc>
	error_max_voltage = 2*x+20 + (voltage-9)*x/6;
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e1       	ldi	r20, 0x10	; 16
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	c7 01       	movw	r24, r14
    1586:	b6 01       	movw	r22, r12
    1588:	0e 94 8c 14 	call	0x2918	; 0x2918 <__subsf3>
    158c:	6b 01       	movw	r12, r22
    158e:	7c 01       	movw	r14, r24
    1590:	be 01       	movw	r22, r28
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
    159e:	c7 01       	movw	r24, r14
    15a0:	b6 01       	movw	r22, r12
    15a2:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 ec       	ldi	r20, 0xC0	; 192
    15ac:	50 e4       	ldi	r21, 0x40	; 64
    15ae:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divsf3>
    15b2:	6b 01       	movw	r12, r22
    15b4:	7c 01       	movw	r14, r24
    15b6:	be 01       	movw	r22, r28
    15b8:	66 5f       	subi	r22, 0xF6	; 246
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	c7 01       	movw	r24, r14
    15ce:	b6 01       	movw	r22, r12
    15d0:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    15d4:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <error_event+0x300>
	else
	error_max_voltage = 10;
    15da:	6a e0       	ldi	r22, 0x0A	; 10
    15dc:	70 e0       	ldi	r23, 0x00	; 0
	
	error_max_voltage = error_max_voltage + get_calibration_value(0);
    15de:	6c 59       	subi	r22, 0x9C	; 156
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    15e2:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <motor_error_value+0x1>
    15e6:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <motor_error_value>
		if (servo_vibro_value*5 > motor_error_value) //measure_get_filtered_value(MEAS_MOTOR)
    15ea:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 01       	movw	r18, r24
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	68 17       	cp	r22, r24
    1600:	79 07       	cpc	r23, r25
    1602:	10 f5       	brcc	.+68     	; 0x1648 <error_event+0x36a>
		{
			debug_msg("motor_error_value: %d\n", motor_error_value);
    1604:	7f 93       	push	r23
    1606:	6f 93       	push	r22
    1608:	89 ec       	ldi	r24, 0xC9	; 201
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9f 93       	push	r25
    160e:	8f 93       	push	r24
    1610:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			error_motor_status = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <error_motor_status>
			error_motor_status = 0;
		}
		
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <error_motor_state>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	09 f4       	brne	.+2      	; 0x162c <error_event+0x34e>
    162a:	84 c0       	rjmp	.+264    	; 0x1734 <error_event+0x456>
    162c:	30 f4       	brcc	.+12     	; 0x163a <error_event+0x35c>
    162e:	88 23       	and	r24, r24
    1630:	f1 f0       	breq	.+60     	; 0x166e <error_event+0x390>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	09 f4       	brne	.+2      	; 0x1638 <error_event+0x35a>
    1636:	48 c0       	rjmp	.+144    	; 0x16c8 <error_event+0x3ea>
    1638:	ff c0       	rjmp	.+510    	; 0x1838 <error_event+0x55a>
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	09 f4       	brne	.+2      	; 0x1640 <error_event+0x362>
    163e:	8d c0       	rjmp	.+282    	; 0x175a <error_event+0x47c>
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	09 f4       	brne	.+2      	; 0x1646 <error_event+0x368>
    1644:	8e c0       	rjmp	.+284    	; 0x1762 <error_event+0x484>
    1646:	f8 c0       	rjmp	.+496    	; 0x1838 <error_event+0x55a>
			debug_msg("motor_error_value: %d\n", motor_error_value);
			error_motor_status = 1;
		}
		else
		{
			error_motor_status = 0;
    1648:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <error_motor_status>
			}
		}
		else
		{
			//toDo
			switch(error_motor_state)
    164c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <error_motor_state>
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	09 f4       	brne	.+2      	; 0x1656 <error_event+0x378>
    1654:	c0 c0       	rjmp	.+384    	; 0x17d6 <error_event+0x4f8>
    1656:	20 f4       	brcc	.+8      	; 0x1660 <error_event+0x382>
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	09 f4       	brne	.+2      	; 0x165e <error_event+0x380>
    165c:	9e c0       	rjmp	.+316    	; 0x179a <error_event+0x4bc>
    165e:	ec c0       	rjmp	.+472    	; 0x1838 <error_event+0x55a>
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	09 f4       	brne	.+2      	; 0x1666 <error_event+0x388>
    1664:	d5 c0       	rjmp	.+426    	; 0x1810 <error_event+0x532>
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <error_event+0x38e>
    166a:	d6 c0       	rjmp	.+428    	; 0x1818 <error_event+0x53a>
    166c:	e5 c0       	rjmp	.+458    	; 0x1838 <error_event+0x55a>
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1674:	80 ee       	ldi	r24, 0xE0	; 224
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9f 93       	push	r25
    167a:	8f 93       	push	r24
    167c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1680:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <dcmotor_get_pwm>
	return error_max_voltage;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1684:	2e e1       	ldi	r18, 0x1E	; 30
    1686:	ac 01       	movw	r20, r24
    1688:	24 9f       	mul	r18, r20
    168a:	c0 01       	movw	r24, r0
    168c:	25 9f       	mul	r18, r21
    168e:	90 0d       	add	r25, r0
    1690:	11 24       	eor	r1, r1
    1692:	48 e8       	ldi	r20, 0x88	; 136
    1694:	53 e1       	ldi	r21, 0x13	; 19
    1696:	ea 01       	movw	r28, r20
    1698:	c8 1b       	sub	r28, r24
    169a:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	8b ef       	ldi	r24, 0xFB	; 251
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9f 93       	push	r25
    16a6:	8f 93       	push	r24
    16a8:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    16ac:	ae 01       	movw	r20, r28
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	87 ed       	ldi	r24, 0xD7	; 215
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
				break;
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	b8 c0       	rjmp	.+368    	; 0x1838 <error_event+0x55a>
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    16c8:	87 ed       	ldi	r24, 0xD7	; 215
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    16d0:	89 2b       	or	r24, r25
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <error_event+0x3f8>
    16d4:	b1 c0       	rjmp	.+354    	; 0x1838 <error_event+0x55a>
					{
						dcmotor_set_try();
    16d6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <dcmotor_set_try>
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    16da:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    16de:	2e e1       	ldi	r18, 0x1E	; 30
    16e0:	ac 01       	movw	r20, r24
    16e2:	24 9f       	mul	r18, r20
    16e4:	c0 01       	movw	r24, r0
    16e6:	25 9f       	mul	r18, r21
    16e8:	90 0d       	add	r25, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	48 e8       	ldi	r20, 0x88	; 136
    16ee:	53 e1       	ldi	r21, 0x13	; 19
    16f0:	ea 01       	movw	r28, r20
    16f2:	c8 1b       	sub	r28, r24
    16f4:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	8a e1       	ldi	r24, 0x1A	; 26
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	9f 93       	push	r25
    1700:	8f 93       	push	r24
    1702:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
				break;
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
					{
						dcmotor_set_try();
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1706:	ae 01       	movw	r20, r28
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	87 ed       	ldi	r24, 0xD7	; 215
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
						error_motor_state = ERR_M_AXELERATE;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    171a:	8e e3       	ldi	r24, 0x3E	; 62
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	9f 93       	push	r25
    1720:	8f 93       	push	r24
    1722:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	82 c0       	rjmp	.+260    	; 0x1838 <error_event+0x55a>
					}
				break;
				case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1734:	87 ed       	ldi	r24, 0xD7	; 215
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    173c:	89 2b       	or	r24, r25
    173e:	09 f4       	brne	.+2      	; 0x1742 <error_event+0x464>
    1740:	7b c0       	rjmp	.+246    	; 0x1838 <error_event+0x55a>
					{
						error_motor_state = ERR_M_ERROR;
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1748:	8e e5       	ldi	r24, 0x5E	; 94
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	6f c0       	rjmp	.+222    	; 0x1838 <error_event+0x55a>
					}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	0e 94 2e 09 	call	0x125c	; 0x125c <set_error_state>
				break;
    1760:	6b c0       	rjmp	.+214    	; 0x1838 <error_event+0x55a>
				case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1762:	87 ed       	ldi	r24, 0xD7	; 215
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    176a:	89 2b       	or	r24, r25
    176c:	09 f4       	brne	.+2      	; 0x1770 <error_event+0x492>
    176e:	64 c0       	rjmp	.+200    	; 0x1838 <error_event+0x55a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1770:	40 ed       	ldi	r20, 0xD0	; 208
    1772:	57 e0       	ldi	r21, 0x07	; 7
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	87 ed       	ldi	r24, 0xD7	; 215
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
						error_motor_state = error_motor_last_state;
    1780:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <error_motor_last_state>
    1784:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
						debug_msg("ERROR STATUS: go to last before wait\n\r");
    1788:	8a e7       	ldi	r24, 0x7A	; 122
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	9f 93       	push	r25
    178e:	8f 93       	push	r24
    1790:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	4f c0       	rjmp	.+158    	; 0x1838 <error_event+0x55a>
			switch(error_motor_state)
			{
				case ERR_M_OK:
				break;
				case ERR_M_WAIT:
				if (evTime_check(&motor_timer))
    179a:	87 ed       	ldi	r24, 0xD7	; 215
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    17a2:	89 2b       	or	r24, r25
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <error_event+0x4ca>
    17a6:	48 c0       	rjmp	.+144    	; 0x1838 <error_event+0x55a>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    17a8:	40 ed       	ldi	r20, 0xD0	; 208
    17aa:	57 e0       	ldi	r21, 0x07	; 7
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	87 ed       	ldi	r24, 0xD7	; 215
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
					error_motor_last_state = ERR_M_WAIT;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    17c4:	81 ea       	ldi	r24, 0xA1	; 161
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	9f 93       	push	r25
    17ca:	8f 93       	push	r24
    17cc:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	31 c0       	rjmp	.+98     	; 0x1838 <error_event+0x55a>
				}
				break;
				case ERR_M_AXELERATE:
				if (evTime_check(&motor_timer))
    17d6:	87 ed       	ldi	r24, 0xD7	; 215
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    17de:	89 2b       	or	r24, r25
    17e0:	59 f1       	breq	.+86     	; 0x1838 <error_event+0x55a>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    17e2:	40 ed       	ldi	r20, 0xD0	; 208
    17e4:	57 e0       	ldi	r21, 0x07	; 7
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	87 ed       	ldi	r24, 0xD7	; 215
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
					error_motor_state = ERR_M_EXIT;
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <error_motor_state>
					error_motor_last_state = ERR_M_AXELERATE;
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    17fe:	81 ea       	ldi	r24, 0xA1	; 161
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	9f 93       	push	r25
    1804:	8f 93       	push	r24
    1806:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <error_event+0x55a>
				}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	0e 94 2e 09 	call	0x125c	; 0x125c <set_error_state>
				break;
    1816:	10 c0       	rjmp	.+32     	; 0x1838 <error_event+0x55a>
				case ERR_M_EXIT:
				if (evTime_check(&motor_timer))
    1818:	87 ed       	ldi	r24, 0xD7	; 215
    181a:	92 e0       	ldi	r25, 0x02	; 2
    181c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    1820:	89 2b       	or	r24, r25
    1822:	51 f0       	breq	.+20     	; 0x1838 <error_event+0x55a>
				{
					debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1824:	8c eb       	ldi	r24, 0xBC	; 188
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	9f 93       	push	r25
    182a:	8f 93       	push	r24
    182c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					error_motor_state = ERR_M_OK;
    1830:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <error_motor_state>
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
		
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		
		servo_error_value = count_servo_error_value();
		if (servo_vibro_value*5 > servo_error_value) //measure_get_filtered_value(MEAS_SERVO)
    1838:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9c 01       	movw	r18, r24
    1840:	22 0f       	add	r18, r18
    1842:	33 1f       	adc	r19, r19
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	82 0f       	add	r24, r18
    184a:	93 1f       	adc	r25, r19
    184c:	85 36       	cpi	r24, 0x65	; 101
    184e:	91 05       	cpc	r25, r1
    1850:	e0 f0       	brcs	.+56     	; 0x188a <error_event+0x5ac>
		{
			debug_msg("servo_error_value: %d\n", servo_error_value);
    1852:	1f 92       	push	r1
    1854:	84 e6       	ldi	r24, 0x64	; 100
    1856:	8f 93       	push	r24
    1858:	85 ed       	ldi	r24, 0xD5	; 213
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
			error_servo_status = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <error_servo_status>
			error_servo_status = 0;
		}
		
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <error_servo_state>
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	51 f1       	breq	.+84     	; 0x18ce <error_event+0x5f0>
    187a:	a8 f0       	brcs	.+42     	; 0x18a6 <error_event+0x5c8>
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	09 f4       	brne	.+2      	; 0x1882 <error_event+0x5a4>
    1880:	4b c0       	rjmp	.+150    	; 0x1918 <error_event+0x63a>
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	09 f4       	brne	.+2      	; 0x1888 <error_event+0x5aa>
    1886:	51 c0       	rjmp	.+162    	; 0x192a <error_event+0x64c>
    1888:	81 c0       	rjmp	.+258    	; 0x198c <error_event+0x6ae>
			debug_msg("servo_error_value: %d\n", servo_error_value);
			error_servo_status = 1;
		}
		else
		{
			error_servo_status = 0;
    188a:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <error_servo_status>
			} //switch
		}// if (error_servo_status == 1)
		else
		{
			//toDo
			switch(error_servo_state)
    188e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <error_servo_state>
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	09 f4       	brne	.+2      	; 0x1898 <error_event+0x5ba>
    1896:	66 c0       	rjmp	.+204    	; 0x1964 <error_event+0x686>
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	09 f4       	brne	.+2      	; 0x189e <error_event+0x5c0>
    189c:	74 c0       	rjmp	.+232    	; 0x1986 <error_event+0x6a8>
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <error_event+0x5c6>
    18a2:	74 c0       	rjmp	.+232    	; 0x198c <error_event+0x6ae>
    18a4:	46 c0       	rjmp	.+140    	; 0x1932 <error_event+0x654>
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
			{
				case ERR_S_OK:
					error_servo_state = ERR_S_WAIT;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    18ac:	8c ee       	ldi	r24, 0xEC	; 236
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	9f 93       	push	r25
    18b2:	8f 93       	push	r24
    18b4:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
					evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    18b8:	44 ef       	ldi	r20, 0xF4	; 244
    18ba:	51 e0       	ldi	r21, 0x01	; 1
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	8b ec       	ldi	r24, 0xCB	; 203
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
				break;
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	5f c0       	rjmp	.+190    	; 0x198c <error_event+0x6ae>
				case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    18ce:	8b ec       	ldi	r24, 0xCB	; 203
    18d0:	92 e0       	ldi	r25, 0x02	; 2
    18d2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    18d6:	89 2b       	or	r24, r25
    18d8:	09 f4       	brne	.+2      	; 0x18dc <error_event+0x5fe>
    18da:	58 c0       	rjmp	.+176    	; 0x198c <error_event+0x6ae>
					{
						if (servo_get_try_cnt() > SERVO_TRY_CNT)
    18dc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <servo_get_try_cnt>
    18e0:	04 97       	sbiw	r24, 0x04	; 4
    18e2:	24 f0       	brlt	.+8      	; 0x18ec <error_event+0x60e>
						{
							error_servo_state = ERR_S_ERROR;
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <error_servo_state>
							break;
    18ea:	50 c0       	rjmp	.+160    	; 0x198c <error_event+0x6ae>
						}
						evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    18ec:	4c ed       	ldi	r20, 0xDC	; 220
    18ee:	55 e0       	ldi	r21, 0x05	; 5
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	8b ec       	ldi	r24, 0xCB	; 203
    18f6:	92 e0       	ldi	r25, 0x02	; 2
    18f8:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
						error_servo_state = ERR_S_TRY;
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <error_servo_state>
						servo_enable_try();
    1902:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <servo_enable_try>
						debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1906:	87 e0       	ldi	r24, 0x07	; 7
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	9f 93       	push	r25
    190c:	8f 93       	push	r24
    190e:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	3a c0       	rjmp	.+116    	; 0x198c <error_event+0x6ae>
					}
				break;
				case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1918:	8b ec       	ldi	r24, 0xCB	; 203
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    1920:	89 2b       	or	r24, r25
    1922:	a1 f1       	breq	.+104    	; 0x198c <error_event+0x6ae>
					{
						error_servo_state = ERR_S_OK;
    1924:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <error_servo_state>
    1928:	31 c0       	rjmp	.+98     	; 0x198c <error_event+0x6ae>
					}
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	0e 94 2e 09 	call	0x125c	; 0x125c <set_error_state>
				break;
    1930:	2d c0       	rjmp	.+90     	; 0x198c <error_event+0x6ae>
			switch(error_servo_state)
			{
				case ERR_S_OK:
				break;
				case ERR_S_WAIT:
				if (evTime_check(&servo_timer))
    1932:	8b ec       	ldi	r24, 0xCB	; 203
    1934:	92 e0       	ldi	r25, 0x02	; 2
    1936:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    193a:	89 2b       	or	r24, r25
    193c:	39 f1       	breq	.+78     	; 0x198c <error_event+0x6ae>
				{
					evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    193e:	40 ed       	ldi	r20, 0xD0	; 208
    1940:	57 e0       	ldi	r21, 0x07	; 7
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	8b ec       	ldi	r24, 0xCB	; 203
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
					error_servo_state = ERR_M_OK;
    194e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1952:	81 e2       	ldi	r24, 0x21	; 33
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	9f 93       	push	r25
    1958:	8f 93       	push	r24
    195a:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	14 c0       	rjmp	.+40     	; 0x198c <error_event+0x6ae>
				}
				break;
				case ERR_S_TRY:
				if (evTime_check(&servo_timer))
    1964:	8b ec       	ldi	r24, 0xCB	; 203
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    196c:	89 2b       	or	r24, r25
    196e:	71 f0       	breq	.+28     	; 0x198c <error_event+0x6ae>
				{
					error_servo_state = ERR_S_OK;
    1970:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1974:	81 e2       	ldi	r24, 0x21	; 33
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	03 c0       	rjmp	.+6      	; 0x198c <error_event+0x6ae>
				}
				break;
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	0e 94 2e 09 	call	0x125c	; 0x125c <set_error_state>
				break;
			} //switch
		} //else (error_servo_status == 1)
	} //error_event_timer
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	08 95       	ret

0000199a <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    199a:	4e e5       	ldi	r20, 0x5E	; 94
    199c:	51 e0       	ldi	r21, 0x01	; 1
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	82 ec       	ldi	r24, 0xC2	; 194
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <evTime_process_period>
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f1       	breq	.+66     	; 0x19f0 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    19ae:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <led_blink>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	71 f4       	brne	.+28     	; 0x19d2 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    19b6:	92 b3       	in	r25, 0x12	; 18
    19b8:	80 e1       	ldi	r24, 0x10	; 16
    19ba:	89 27       	eor	r24, r25
    19bc:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    19be:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    19c2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    19c6:	90 62       	ori	r25, 0x20	; 32
    19c8:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    19cc:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    19d0:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	69 f4       	brne	.+26     	; 0x19f0 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    19d6:	92 b3       	in	r25, 0x12	; 18
    19d8:	80 e4       	ldi	r24, 0x40	; 64
    19da:	89 27       	eor	r24, r25
    19dc:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    19de:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    19e2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    19e6:	90 62       	ori	r25, 0x20	; 32
    19e8:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    19ec:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    19f0:	08 95       	ret

000019f2 <filtered_value>:
static uint8_t s_o_t_iteration_adc_table = 0;
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 81       	ld	r18, Z
    19f6:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
    19f8:	62 30       	cpi	r22, 0x02	; 2
    19fa:	58 f0       	brcs	.+22     	; 0x1a12 <filtered_value+0x20>
    19fc:	32 96       	adiw	r30, 0x02	; 2
    19fe:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
    1a00:	41 91       	ld	r20, Z+
    1a02:	51 91       	ld	r21, Z+
    1a04:	24 0f       	add	r18, r20
    1a06:	35 1f       	adc	r19, r21
    1a08:	36 95       	lsr	r19
    1a0a:	27 95       	ror	r18
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
    1a0c:	9f 5f       	subi	r25, 0xFF	; 255
    1a0e:	69 13       	cpse	r22, r25
    1a10:	f7 cf       	rjmp	.-18     	; 0x1a00 <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
    1a12:	c9 01       	movw	r24, r18
    1a14:	08 95       	ret

00001a16 <init_measure>:

void init_measure(void)
{
    1a16:	ec e0       	ldi	r30, 0x0C	; 12
    1a18:	f3 e0       	ldi	r31, 0x03	; 3
    1a1a:	24 e3       	ldi	r18, 0x34	; 52
    1a1c:	33 e0       	ldi	r19, 0x03	; 3
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
    1a1e:	81 ef       	ldi	r24, 0xF1	; 241
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	81 93       	st	Z+, r24
    1a24:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
    1a26:	2e 17       	cp	r18, r30
    1a28:	3f 07       	cpc	r19, r31
    1a2a:	d9 f7       	brne	.-10     	; 0x1a22 <init_measure+0xc>
    1a2c:	eb ef       	ldi	r30, 0xFB	; 251
    1a2e:	f2 e0       	ldi	r31, 0x02	; 2
    1a30:	89 e0       	ldi	r24, 0x09	; 9
    1a32:	93 e0       	ldi	r25, 0x03	; 3
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
    1a34:	11 92       	st	Z+, r1
    1a36:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
    1a38:	8e 17       	cp	r24, r30
    1a3a:	9f 07       	cpc	r25, r31
    1a3c:	d9 f7       	brne	.-10     	; 0x1a34 <init_measure+0x1e>
    1a3e:	e3 ee       	ldi	r30, 0xE3	; 227
    1a40:	f2 e0       	ldi	r31, 0x02	; 2
    1a42:	87 ef       	ldi	r24, 0xF7	; 247
    1a44:	92 e0       	ldi	r25, 0x02	; 2
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
    1a46:	11 92       	st	Z+, r1
    1a48:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
    1a4a:	8e 17       	cp	r24, r30
    1a4c:	9f 07       	cpc	r25, r31
    1a4e:	d9 f7       	brne	.-10     	; 0x1a46 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
    1a50:	08 95       	ret

00001a52 <measure_process>:
static timer_t measure_timer;
void measure_process(void)
{
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
	if (measure_timer < mktime.ms)
    1a5e:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    1a62:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    1a66:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    1a6a:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    1a6e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <measure_timer>
    1a72:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <measure_timer+0x1>
    1a76:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <measure_timer+0x2>
    1a7a:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <measure_timer+0x3>
    1a7e:	84 17       	cp	r24, r20
    1a80:	95 07       	cpc	r25, r21
    1a82:	a6 07       	cpc	r26, r22
    1a84:	b7 07       	cpc	r27, r23
    1a86:	08 f0       	brcs	.+2      	; 0x1a8a <measure_process+0x38>
    1a88:	98 c0       	rjmp	.+304    	; 0x1bba <measure_process+0x168>
	{
		measure_timer = mktime.ms + 50;
    1a8a:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
    1a8e:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
    1a92:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
    1a96:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
    1a9a:	c2 96       	adiw	r24, 0x32	; 50
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	b1 1d       	adc	r27, r1
    1aa0:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <measure_timer>
    1aa4:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <measure_timer+0x1>
    1aa8:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <measure_timer+0x2>
    1aac:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1ab6:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
    1ab8:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <motor_filter_value>
    1abc:	70 91 0a 03 	lds	r23, 0x030A	; 0x80030a <motor_filter_value+0x1>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1ac8:	21 e7       	ldi	r18, 0x71	; 113
    1aca:	3d e3       	ldi	r19, 0x3D	; 61
    1acc:	4a e8       	ldi	r20, 0x8A	; 138
    1ace:	5e e3       	ldi	r21, 0x3E	; 62
    1ad0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__mulsf3>
    1ad4:	6b 01       	movw	r12, r22
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	be 01       	movw	r22, r28
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__floatunsisf>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	b6 01       	movw	r22, r12
    1aea:	0e 94 8d 14 	call	0x291a	; 0x291a <__addsf3>
    1aee:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    1af2:	70 93 37 03 	sts	0x0337, r23	; 0x800337 <accum_adc+0x1>
    1af6:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
    1afa:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <iteration_adc_accum_table>
    1afe:	e2 2f       	mov	r30, r18
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	e4 5f       	subi	r30, 0xF4	; 244
    1b08:	fc 4f       	sbci	r31, 0xFC	; 252
    1b0a:	71 83       	std	Z+1, r23	; 0x01
    1b0c:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	82 0f       	add	r24, r18
    1b12:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1b1c:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <motor_adc+0x1>
    1b20:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
    1b24:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <iteration_adc_motor_table>
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	e5 50       	subi	r30, 0x05	; 5
    1b30:	fd 4f       	sbci	r31, 0xFD	; 253
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	0e 94 b1 02 	call	0x562	; 0x562 <adc_read>
    1b3c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <s_o_t_adc+0x1>
    1b40:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <s_o_t_adc>

		//if (s_o_t_adc < SERVO_CALIBRATION_VALUE) s_o_t_adc = 0;
		//else s_o_t_adc = s_o_t_adc - SERVO_CALIBRATION_VALUE;

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
    1b44:	c0 91 e2 02 	lds	r28, 0x02E2	; 0x8002e2 <s_o_t_iteration_adc_table>
    1b48:	ec 2f       	mov	r30, r28
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	ed 51       	subi	r30, 0x1D	; 29
    1b52:	fd 4f       	sbci	r31, 0xFD	; 253
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
    1b58:	d0 91 0b 03 	lds	r29, 0x030B	; 0x80030b <iteration_adc_motor_table>
    1b5c:	df 5f       	subi	r29, 0xFF	; 255
    1b5e:	d0 93 0b 03 	sts	0x030B, r29	; 0x80030b <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
    1b62:	cf 5f       	subi	r28, 0xFF	; 255
    1b64:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
    1b68:	64 e1       	ldi	r22, 0x14	; 20
    1b6a:	8c e0       	ldi	r24, 0x0C	; 12
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <filtered_value>
    1b72:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <filtered_accum_adc_val+0x1>
    1b76:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
    1b7a:	67 e0       	ldi	r22, 0x07	; 7
    1b7c:	8b ef       	ldi	r24, 0xFB	; 251
    1b7e:	92 e0       	ldi	r25, 0x02	; 2
    1b80:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <filtered_value>
    1b84:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <motor_filter_value+0x1>
    1b88:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
    1b8c:	6a e0       	ldi	r22, 0x0A	; 10
    1b8e:	83 ee       	ldi	r24, 0xE3	; 227
    1b90:	92 e0       	ldi	r25, 0x02	; 2
    1b92:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <filtered_value>
    1b96:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <s_o_t_filter_value+0x1>
    1b9a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <s_o_t_filter_value>
		//debug_msg("accum %d, servo %d, motor %d\n",accum_adc, s_o_t_adc, motor_adc);
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
    1b9e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <iteration_adc_accum_table>
    1ba2:	84 31       	cpi	r24, 0x14	; 20
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <measure_process+0x158>
    1ba6:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
    1baa:	ca 30       	cpi	r28, 0x0A	; 10
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <measure_process+0x160>
    1bae:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
    1bb2:	d7 30       	cpi	r29, 0x07	; 7
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <measure_process+0x168>
    1bb6:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <iteration_adc_motor_table>
	}
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	18 f4       	brcc	.+6      	; 0x1bd2 <measure_get_filtered_value+0xa>
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	40 f0       	brcs	.+16     	; 0x1be0 <measure_get_filtered_value+0x18>
    1bd0:	0c c0       	rjmp	.+24     	; 0x1bea <measure_get_filtered_value+0x22>
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	79 f4       	brne	.+30     	; 0x1bf4 <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
    1bd6:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <filtered_accum_adc_val>
    1bda:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <filtered_accum_adc_val+0x1>
    1bde:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
    1be0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <motor_filter_value>
    1be4:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <motor_filter_value+0x1>
    1be8:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
    1bea:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <s_o_t_filter_value>
    1bee:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <s_o_t_filter_value+0x1>
    1bf2:	08 95       	ret
        break;
    }
	return 0;
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
}
    1bf8:	08 95       	ret

00001bfa <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	59 f0       	breq	.+22     	; 0x1c20 <mem_save_data+0x26>
    1c0a:	28 f4       	brcc	.+10     	; 0x1c16 <mem_save_data+0x1c>
    1c0c:	88 23       	and	r24, r24
    1c0e:	91 f0       	breq	.+36     	; 0x1c34 <mem_save_data+0x3a>
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	19 f1       	breq	.+70     	; 0x1c5a <mem_save_data+0x60>
    1c14:	30 c0       	rjmp	.+96     	; 0x1c76 <mem_save_data+0x7c>
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	29 f1       	breq	.+74     	; 0x1c64 <mem_save_data+0x6a>
    1c1a:	84 30       	cpi	r24, 0x04	; 4
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <mem_save_data+0x30>
    1c1e:	2b c0       	rjmp	.+86     	; 0x1c76 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1c20:	22 e0       	ldi	r18, 0x02	; 2
    1c22:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	21 c0       	rjmp	.+66     	; 0x1c6c <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1c2a:	23 e0       	ldi	r18, 0x03	; 3
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1c2e:	88 e0       	ldi	r24, 0x08	; 8
    1c30:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1c32:	1c c0       	rjmp	.+56     	; 0x1c6c <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c34:	68 94       	set
    1c36:	ee 24       	eor	r14, r14
    1c38:	e1 f8       	bld	r14, 1
    1c3a:	f1 2c       	mov	r15, r1
    1c3c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    1c3e:	f8 01       	movw	r30, r16
    1c40:	61 91       	ld	r22, Z+
    1c42:	8f 01       	movw	r16, r30
    1c44:	8c 2f       	mov	r24, r28
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 1f 09 	call	0x123e	; 0x123e <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c4c:	cf 5f       	subi	r28, 0xFF	; 255
    1c4e:	8c 2f       	mov	r24, r28
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	8e 15       	cp	r24, r14
    1c54:	9f 05       	cpc	r25, r15
    1c56:	9c f3       	brlt	.-26     	; 0x1c3e <mem_save_data+0x44>
    1c58:	0e c0       	rjmp	.+28     	; 0x1c76 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1c5a:	22 e0       	ldi	r18, 0x02	; 2
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1c64:	22 e0       	ldi	r18, 0x02	; 2
    1c66:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1c68:	86 e0       	ldi	r24, 0x06	; 6
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1c6c:	c8 2f       	mov	r28, r24
    1c6e:	79 01       	movw	r14, r18
    1c70:	e8 0e       	add	r14, r24
    1c72:	f9 1e       	adc	r15, r25
    1c74:	e4 cf       	rjmp	.-56     	; 0x1c3e <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	08 95       	ret

00001c82 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	59 f0       	breq	.+22     	; 0x1ca8 <mem_read_data+0x26>
    1c92:	28 f4       	brcc	.+10     	; 0x1c9e <mem_read_data+0x1c>
    1c94:	88 23       	and	r24, r24
    1c96:	91 f0       	breq	.+36     	; 0x1cbc <mem_read_data+0x3a>
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	19 f1       	breq	.+70     	; 0x1ce2 <mem_read_data+0x60>
    1c9c:	30 c0       	rjmp	.+96     	; 0x1cfe <mem_read_data+0x7c>
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	29 f1       	breq	.+74     	; 0x1cec <mem_read_data+0x6a>
    1ca2:	84 30       	cpi	r24, 0x04	; 4
    1ca4:	31 f0       	breq	.+12     	; 0x1cb2 <mem_read_data+0x30>
    1ca6:	2b c0       	rjmp	.+86     	; 0x1cfe <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    1ca8:	22 e0       	ldi	r18, 0x02	; 2
    1caa:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	21 c0       	rjmp	.+66     	; 0x1cf4 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    1cb2:	23 e0       	ldi	r18, 0x03	; 3
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    1cba:	1c c0       	rjmp	.+56     	; 0x1cf4 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1cbc:	68 94       	set
    1cbe:	ee 24       	eor	r14, r14
    1cc0:	e1 f8       	bld	r14, 1
    1cc2:	f1 2c       	mov	r15, r1
    1cc4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    1cc6:	8c 2f       	mov	r24, r28
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 27 09 	call	0x124e	; 0x124e <EEPROM_read>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	81 93       	st	Z+, r24
    1cd2:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1cd4:	cf 5f       	subi	r28, 0xFF	; 255
    1cd6:	8c 2f       	mov	r24, r28
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	8e 15       	cp	r24, r14
    1cdc:	9f 05       	cpc	r25, r15
    1cde:	9c f3       	brlt	.-26     	; 0x1cc6 <mem_read_data+0x44>
    1ce0:	0e c0       	rjmp	.+28     	; 0x1cfe <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    1ce2:	22 e0       	ldi	r18, 0x02	; 2
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    1cf0:	86 e0       	ldi	r24, 0x06	; 6
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    1cf4:	c8 2f       	mov	r28, r24
    1cf6:	79 01       	movw	r14, r18
    1cf8:	e8 0e       	add	r14, r24
    1cfa:	f9 1e       	adc	r15, r25
    1cfc:	e4 cf       	rjmp	.-56     	; 0x1cc6 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	08 95       	ret

00001d0a <servo_init>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	2f e1       	ldi	r18, 0x1F	; 31
    1d10:	3e e4       	ldi	r19, 0x4E	; 78
    1d12:	37 bd       	out	0x27, r19	; 39
    1d14:	26 bd       	out	0x26, r18	; 38
    1d16:	81 b3       	in	r24, 0x11	; 17
    1d18:	80 63       	ori	r24, 0x30	; 48
    1d1a:	81 bb       	out	0x11, r24	; 17
    1d1c:	19 bc       	out	0x29, r1	; 41
    1d1e:	18 bc       	out	0x28, r1	; 40
    1d20:	1b bc       	out	0x2b, r1	; 43
    1d22:	1a bc       	out	0x2a, r1	; 42
    1d24:	8f b5       	in	r24, 0x2f	; 47
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	8f bd       	out	0x2f, r24	; 47
    1d2a:	8e b5       	in	r24, 0x2e	; 46
    1d2c:	88 61       	ori	r24, 0x18	; 24
    1d2e:	8e bd       	out	0x2e, r24	; 46
    1d30:	8f b5       	in	r24, 0x2f	; 47
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	8f bd       	out	0x2f, r24	; 47
    1d36:	8e b5       	in	r24, 0x2e	; 46
    1d38:	82 60       	ori	r24, 0x02	; 2
    1d3a:	8e bd       	out	0x2e, r24	; 46
    1d3c:	3b bd       	out	0x2b, r19	; 43
    1d3e:	2a bd       	out	0x2a, r18	; 42
    1d40:	96 98       	cbi	0x12, 6	; 18
    1d42:	cd ed       	ldi	r28, 0xDD	; 221
    1d44:	d4 e0       	ldi	r29, 0x04	; 4
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	88 83       	st	Y, r24
    1d4a:	1b 82       	std	Y+3, r1	; 0x03
    1d4c:	81 ee       	ldi	r24, 0xE1	; 225
    1d4e:	94 e0       	ldi	r25, 0x04	; 4
    1d50:	0e 94 b3 13 	call	0x2766	; 0x2766 <evTime_init>
    1d54:	19 86       	std	Y+9, r1	; 0x09
    1d56:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <try_count>
    1d5a:	8a e3       	ldi	r24, 0x3A	; 58
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	9f 93       	push	r25
    1d60:	8f 93       	push	r24
    1d62:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <servo_is_open>:
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <servoD>
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	11 f0       	breq	.+4      	; 0x1d80 <servo_is_open+0x10>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	08 95       	ret

00001d82 <servo_enable_try>:
    1d82:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servoD>
    1d86:	9f ef       	ldi	r25, 0xFF	; 255
    1d88:	98 0f       	add	r25, r24
    1d8a:	92 30       	cpi	r25, 0x02	; 2
    1d8c:	28 f4       	brcc	.+10     	; 0x1d98 <servo_enable_try+0x16>
    1d8e:	ed ed       	ldi	r30, 0xDD	; 221
    1d90:	f4 e0       	ldi	r31, 0x04	; 4
    1d92:	81 83       	std	Z+1, r24	; 0x01
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	80 83       	st	Z, r24
    1d98:	08 95       	ret

00001d9a <servo_get_try_cnt>:
    1d9a:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <servoD+0x9>
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	08 95       	ret

00001da2 <servo_close>:
    1da2:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servoD>
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	b9 f4       	brne	.+46     	; 0x1dd8 <servo_close+0x36>
    1daa:	1b bc       	out	0x2b, r1	; 43
    1dac:	1a bc       	out	0x2a, r1	; 42
    1dae:	ed ed       	ldi	r30, 0xDD	; 221
    1db0:	f4 e0       	ldi	r31, 0x04	; 4
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	80 83       	st	Z, r24
    1db6:	13 82       	std	Z+3, r1	; 0x03
    1db8:	1f 92       	push	r1
    1dba:	1f 92       	push	r1
    1dbc:	87 e4       	ldi	r24, 0x47	; 71
    1dbe:	92 e0       	ldi	r25, 0x02	; 2
    1dc0:	9f 93       	push	r25
    1dc2:	8f 93       	push	r24
    1dc4:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1dc8:	96 98       	cbi	0x12, 6	; 18
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	08 95       	ret
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <servo_close+0x44>
    1ddc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <servo_exit_try>
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	08 95       	ret

00001dec <servo_exit_try>:
    1dec:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <servoD+0x1>
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	29 f4       	brne	.+10     	; 0x1dfe <servo_exit_try+0x12>
    1df4:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <servoD>
    1df8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <servo_close>
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <servo_exit_try+0x24>
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	71 f4       	brne	.+28     	; 0x1e1e <servo_exit_try+0x32>
    1e02:	ed ed       	ldi	r30, 0xDD	; 221
    1e04:	f4 e0       	ldi	r31, 0x04	; 4
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	80 83       	st	Z, r24
    1e0a:	83 81       	ldd	r24, Z+3	; 0x03
    1e0c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <servo_open>
    1e10:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <try_count>
    1e14:	ed ed       	ldi	r30, 0xDD	; 221
    1e16:	f4 e0       	ldi	r31, 0x04	; 4
    1e18:	81 85       	ldd	r24, Z+9	; 0x09
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	81 87       	std	Z+9, r24	; 0x09
    1e1e:	08 95       	ret

00001e20 <servo_open>:
    1e20:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <servoD>
    1e24:	2f ef       	ldi	r18, 0xFF	; 255
    1e26:	29 0f       	add	r18, r25
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	c8 f4       	brcc	.+50     	; 0x1e5e <servo_open+0x3e>
    1e2c:	ed ed       	ldi	r30, 0xDD	; 221
    1e2e:	f4 e0       	ldi	r31, 0x04	; 4
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	90 83       	st	Z, r25
    1e34:	83 83       	std	Z+3, r24	; 0x03
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3b bd       	out	0x2b, r19	; 43
    1e3c:	2a bd       	out	0x2a, r18	; 42
    1e3e:	1f 92       	push	r1
    1e40:	8f 93       	push	r24
    1e42:	88 e5       	ldi	r24, 0x58	; 88
    1e44:	92 e0       	ldi	r25, 0x02	; 2
    1e46:	9f 93       	push	r25
    1e48:	8f 93       	push	r24
    1e4a:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1e4e:	96 9a       	sbi	0x12, 6	; 18
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	08 95       	ret
    1e5e:	93 30       	cpi	r25, 0x03	; 3
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <servo_open+0x4c>
    1e62:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <servo_exit_try>
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	08 95       	ret
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	08 95       	ret

00001e72 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    1e72:	cf 93       	push	r28
    1e74:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 500))
    1e76:	44 ef       	ldi	r20, 0xF4	; 244
    1e78:	51 e0       	ldi	r21, 0x01	; 1
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	8e e3       	ldi	r24, 0x3E	; 62
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 fd 13 	call	0x27fa	; 0x27fa <evTime_process_period>
    1e86:	89 2b       	or	r24, r25
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <servo_process+0x1a>
    1e8a:	75 c0       	rjmp	.+234    	; 0x1f76 <servo_process+0x104>
	{
		switch(servoD.state)
    1e8c:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servoD>
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	19 f0       	breq	.+6      	; 0x1e9a <servo_process+0x28>
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	41 f0       	breq	.+16     	; 0x1ea8 <servo_process+0x36>
    1e98:	5e c0       	rjmp	.+188    	; 0x1f56 <servo_process+0xe4>
		{
			case SERVO_OPEN:
			servoD.value = value;
    1e9a:	c0 93 e0 04 	sts	0x04E0, r28	; 0x8004e0 <servoD+0x3>
			set_pwm((uint16_t)value);
    1e9e:	8c 2f       	mov	r24, r28
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1ea2:	9b bd       	out	0x2b, r25	; 43
    1ea4:	8a bd       	out	0x2a, r24	; 42
    1ea6:	57 c0       	rjmp	.+174    	; 0x1f56 <servo_process+0xe4>


static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    1ea8:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <try_count>
    1eac:	81 11       	cpse	r24, r1
    1eae:	15 c0       	rjmp	.+42     	; 0x1eda <servo_process+0x68>
	{
		evTime_start(&timeout, 100);
    1eb0:	44 e6       	ldi	r20, 0x64	; 100
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	89 e3       	ldi	r24, 0x39	; 57
    1eba:	93 e0       	ldi	r25, 0x03	; 3
    1ebc:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
		try_count++;
    1ec0:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <try_count>
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <try_count>
		set_pwm(servoD.value + try_count);
    1eca:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <servoD+0x3>
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	82 0f       	add	r24, r18
    1ed2:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1ed4:	9b bd       	out	0x2b, r25	; 43
    1ed6:	8a bd       	out	0x2a, r24	; 42
    1ed8:	2b c0       	rjmp	.+86     	; 0x1f30 <servo_process+0xbe>
	{
		evTime_start(&timeout, 100);
		try_count++;
		set_pwm(servoD.value + try_count);
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    1eda:	81 50       	subi	r24, 0x01	; 1
    1edc:	89 30       	cpi	r24, 0x09	; 9
    1ede:	d8 f4       	brcc	.+54     	; 0x1f16 <servo_process+0xa4>
	{
		if (evTime_check(&timeout) == 1)
    1ee0:	89 e3       	ldi	r24, 0x39	; 57
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	11 f5       	brne	.+68     	; 0x1f30 <servo_process+0xbe>
		{
			evTime_start(&timeout, 100);
    1eec:	44 e6       	ldi	r20, 0x64	; 100
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	89 e3       	ldi	r24, 0x39	; 57
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
			try_count++;
    1efc:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <try_count>
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <try_count>
			set_pwm(servoD.value + try_count);
    1f06:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <servoD+0x3>
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	82 0f       	add	r24, r18
    1f0e:	91 1d       	adc	r25, r1
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1f10:	9b bd       	out	0x2b, r25	; 43
    1f12:	8a bd       	out	0x2a, r24	; 42
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <servo_process+0xbe>
			set_pwm(servoD.value + try_count);
		}
	}
	else
	{
		try_count = 0;
    1f16:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <try_count>
		set_pwm(servoD.value);
    1f1a:	ed ed       	ldi	r30, 0xDD	; 221
    1f1c:	f4 e0       	ldi	r31, 0x04	; 4
    1f1e:	83 81       	ldd	r24, Z+3	; 0x03
    1f20:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    1f22:	9b bd       	out	0x2b, r25	; 43
    1f24:	8a bd       	out	0x2a, r24	; 42
	}
	else
	{
		try_count = 0;
		set_pwm(servoD.value);
		servoD.state = servoD.last_state;
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	80 83       	st	Z, r24
		servoD.try_cnt++;
    1f2a:	81 85       	ldd	r24, Z+9	; 0x09
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	81 87       	std	Z+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    1f30:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <servoD+0x3>
    1f34:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <try_count>
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	82 0f       	add	r24, r18
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	8a e6       	ldi	r24, 0x6A	; 106
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
			break;
			case SERVO_TRY:
			servo_try_process();
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    1f56:	81 ee       	ldi	r24, 0xE1	; 225
    1f58:	94 e0       	ldi	r25, 0x04	; 4
    1f5a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	51 f4       	brne	.+20     	; 0x1f76 <servo_process+0x104>
		{
			servoD.try_cnt = 0;
    1f62:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    1f66:	88 e7       	ldi	r24, 0x78	; 120
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	9f 93       	push	r25
    1f6c:	8f 93       	push	r24
    1f6e:	0e 94 48 01 	call	0x290	; 0x290 <debug_msg>
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
		}
	}
}
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    1f7a:	e9 e8       	ldi	r30, 0x89	; 137
    1f7c:	f4 e0       	ldi	r31, 0x04	; 4
    1f7e:	16 86       	std	Z+14, r1	; 0x0e
    1f80:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    1f82:	12 86       	std	Z+10, r1	; 0x0a
    1f84:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    1f86:	14 86       	std	Z+12, r1	; 0x0c
    1f88:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    1f8a:	ec e5       	ldi	r30, 0x5C	; 92
    1f8c:	f4 e0       	ldi	r31, 0x04	; 4
    1f8e:	16 86       	std	Z+14, r1	; 0x0e
    1f90:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    1f92:	12 86       	std	Z+10, r1	; 0x0a
    1f94:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    1f96:	14 86       	std	Z+12, r1	; 0x0c
    1f98:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    1f9a:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <button3+0xc>
    1f9e:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <button3+0xb>
	
	button5.timer_callback = 0;
    1fa2:	ea e3       	ldi	r30, 0x3A	; 58
    1fa4:	f4 e0       	ldi	r31, 0x04	; 4
    1fa6:	16 86       	std	Z+14, r1	; 0x0e
    1fa8:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    1faa:	14 86       	std	Z+12, r1	; 0x0c
    1fac:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    1fae:	12 86       	std	Z+10, r1	; 0x0a
    1fb0:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    1fb2:	ea e7       	ldi	r30, 0x7A	; 122
    1fb4:	f4 e0       	ldi	r31, 0x04	; 4
    1fb6:	16 86       	std	Z+14, r1	; 0x0e
    1fb8:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    1fba:	14 86       	std	Z+12, r1	; 0x0c
    1fbc:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    1fbe:	12 86       	std	Z+10, r1	; 0x0a
    1fc0:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    1fc2:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <button7+0xc>
    1fc6:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <button7+0xb>
	
	button8.fall_callback = 0;
    1fca:	e7 ea       	ldi	r30, 0xA7	; 167
    1fcc:	f4 e0       	ldi	r31, 0x04	; 4
    1fce:	14 86       	std	Z+12, r1	; 0x0c
    1fd0:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    1fd2:	16 86       	std	Z+14, r1	; 0x0e
    1fd4:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    1fd6:	12 86       	std	Z+10, r1	; 0x0a
    1fd8:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    1fda:	ec e1       	ldi	r30, 0x1C	; 28
    1fdc:	f4 e0       	ldi	r31, 0x04	; 4
    1fde:	14 86       	std	Z+12, r1	; 0x0c
    1fe0:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    1fe2:	16 86       	std	Z+14, r1	; 0x0e
    1fe4:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    1fe6:	12 86       	std	Z+10, r1	; 0x0a
    1fe8:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    1fea:	eb e2       	ldi	r30, 0x2B	; 43
    1fec:	f4 e0       	ldi	r31, 0x04	; 4
    1fee:	14 86       	std	Z+12, r1	; 0x0c
    1ff0:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    1ff2:	16 86       	std	Z+14, r1	; 0x0e
    1ff4:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    1ff6:	12 86       	std	Z+10, r1	; 0x0a
    1ff8:	11 86       	std	Z+9, r1	; 0x09
    1ffa:	08 95       	ret

00001ffc <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    1ffc:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	49 f0       	breq	.+18     	; 0x2016 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2004:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2008:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    200c:	98 60       	ori	r25, 0x08	; 8
    200e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2012:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    2016:	08 95       	ret

00002018 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2018:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	49 f0       	breq	.+18     	; 0x2032 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2020:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2024:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    202e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    2032:	08 95       	ret

00002034 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2034:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2038:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    203c:	92 60       	ori	r25, 0x02	; 2
    203e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2042:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    2046:	08 95       	ret

00002048 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2048:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    204c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2050:	99 7f       	andi	r25, 0xF9	; 249
    2052:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2056:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	counter_very_fast_motor_sub = 0;
    205a:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <counter_very_fast_motor_sub>
    205e:	08 95       	ret

00002060 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2060:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2064:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2068:	80 62       	ori	r24, 0x20	; 32
    206a:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    206e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    2072:	08 95       	ret

00002074 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2074:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2078:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    207c:	8f 79       	andi	r24, 0x9F	; 159
    207e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2082:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	counter_very_fast_motor_sub = 0;
    2086:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <counter_very_fast_motor_sub>
    208a:	08 95       	ret

0000208c <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    208c:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2090:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2094:	90 62       	ori	r25, 0x20	; 32
    2096:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    209a:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    209e:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    20a2:	8b 30       	cpi	r24, 0x0B	; 11
    20a4:	18 f0       	brcs	.+6      	; 0x20ac <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    20ac:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    20be:	08 95       	ret

000020c0 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    20c0:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    20c4:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    20c8:	90 62       	ori	r25, 0x20	; 32
    20ca:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    20ce:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    20d2:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    20d6:	83 36       	cpi	r24, 0x63	; 99
    20d8:	18 f4       	brcc	.+6      	; 0x20e0 <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    20e0:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    20f2:	08 95       	ret

000020f4 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    20f4:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    20f8:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    20fc:	90 62       	ori	r25, 0x20	; 32
    20fe:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2102:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	if (motor_value > 10)
    2106:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motor_value>
    210a:	8b 30       	cpi	r24, 0x0B	; 11
    210c:	18 f0       	brcs	.+6      	; 0x2114 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    210e:	81 50       	subi	r24, 0x01	; 1
    2110:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2114:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disp_get_state>
    2124:	02 97       	sbiw	r24, 0x02	; 2
    2126:	29 f4       	brne	.+10     	; 0x2132 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    2130:	04 c0       	rjmp	.+8      	; 0x213a <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
	state_measure_volt++;
    213a:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state_measure_volt>
	if (state_measure_volt == 2)
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	19 f4       	brne	.+6      	; 0x214e <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2148:	66 e0       	ldi	r22, 0x06	; 6
    214a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    214e:	08 95       	ret

00002150 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2150:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2154:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2158:	90 62       	ori	r25, 0x20	; 32
    215a:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    215e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	if (motor_value < 99)
    2162:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motor_value>
    2166:	83 36       	cpi	r24, 0x63	; 99
    2168:	18 f4       	brcc	.+6      	; 0x2170 <button_motor_add_fall_cb+0x20>
		motor_value++;
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2170:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disp_get_state>
    2180:	02 97       	sbiw	r24, 0x02	; 2
    2182:	29 f4       	brne	.+10     	; 0x218e <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    218c:	04 c0       	rjmp	.+8      	; 0x2196 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
	state_measure_volt++;
    2196:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state_measure_volt>
	if (state_measure_volt == 2)
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	19 f4       	brne	.+6      	; 0x21aa <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    21a4:	66 e0       	ldi	r22, 0x06	; 6
    21a6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    21aa:	08 95       	ret

000021ac <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    21ac:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    21b0:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    21b4:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    21b8:	97 7e       	andi	r25, 0xE7	; 231
    21ba:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    21be:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	counter_very_fast_motor_sub = 0;
    21c2:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    21c6:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    21ca:	88 23       	and	r24, r24
    21cc:	19 f0       	breq	.+6      	; 0x21d4 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    21ce:	81 50       	subi	r24, 0x01	; 1
    21d0:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disp_get_state>
    21da:	02 97       	sbiw	r24, 0x02	; 2
    21dc:	29 f4       	brne	.+10     	; 0x21e8 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    21e6:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    21f0:	08 95       	ret

000021f2 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    21f2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    21f6:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    21fa:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    21fe:	8f 77       	andi	r24, 0x7F	; 127
    2200:	9e 7f       	andi	r25, 0xFE	; 254
    2202:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2206:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	counter_very_fast_motor_sub = 0;
    220a:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    220e:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <state_measure_volt>
    2212:	88 23       	and	r24, r24
    2214:	19 f0       	breq	.+6      	; 0x221c <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2216:	81 50       	subi	r24, 0x01	; 1
    2218:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <disp_get_state>
    2222:	02 97       	sbiw	r24, 0x02	; 2
    2224:	29 f4       	brne	.+10     	; 0x2230 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    222e:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
    2238:	08 95       	ret

0000223a <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    223a:	e9 ee       	ldi	r30, 0xE9	; 233
    223c:	f4 e0       	ldi	r31, 0x04	; 4
    223e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motor_value>
    2242:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2244:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    2248:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    224a:	bf 01       	movw	r22, r30
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <mem_save_data>
    2252:	08 95       	ret

00002254 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2254:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2258:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    225c:	90 62       	ori	r25, 0x20	; 32
    225e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2262:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	if (motor_value < 10)
    2266:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <motor_value>
    226a:	8a 30       	cpi	r24, 0x0A	; 10
    226c:	38 f4       	brcc	.+14     	; 0x227c <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2274:	6a e0       	ldi	r22, 0x0A	; 10
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	}
	sys_save_display();
    227c:	0e 94 1d 11 	call	0x223a	; 0x223a <sys_save_display>
	if(!dcmotor_is_on()) dcmotorpwm_start();
    2280:	0e 94 a6 04 	call	0x94c	; 0x94c <dcmotor_is_on>
    2284:	89 2b       	or	r24, r25
    2286:	19 f4       	brne	.+6      	; 0x228e <button_dcmotor_cb+0x3a>
    2288:	0e 94 c9 04 	call	0x992	; 0x992 <dcmotorpwm_start>
    228c:	08 95       	ret
	else dcmotorpwm_stop();
    228e:	0e 94 b1 04 	call	0x962	; 0x962 <dcmotorpwm_stop>
    2292:	08 95       	ret

00002294 <button_on_off_pwm>:
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2294:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2298:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    229c:	90 62       	ori	r25, 0x20	; 32
    229e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    22a2:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
	if (servo_vibro_value < 10)
    22a6:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    22aa:	8a 30       	cpi	r24, 0x0A	; 10
    22ac:	38 f4       	brcc	.+14     	; 0x22bc <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    22ae:	8a e0       	ldi	r24, 0x0A	; 10
    22b0:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    22b4:	6a e0       	ldi	r22, 0x0A	; 10
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    22bc:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <servo_is_open>
    22c0:	89 2b       	or	r24, r25
    22c2:	19 f0       	breq	.+6      	; 0x22ca <button_on_off_pwm+0x36>
    22c4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <servo_close>
    22c8:	08 95       	ret
	else servo_open(servo_vibro_value);
    22ca:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <servo_vibro_value>
    22ce:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <servo_open>
    22d2:	08 95       	ret

000022d4 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    22d4:	8f e0       	ldi	r24, 0x0F	; 15
    22d6:	92 e1       	ldi	r25, 0x12	; 18
    22d8:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <button4+0xa>
    22dc:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    22e8:	67 ee       	ldi	r22, 0xE7	; 231
    22ea:	74 e0       	ldi	r23, 0x04	; 4
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    22f2:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <mem_last_save+0x1>
    22f6:	96 ef       	ldi	r25, 0xF6	; 246
    22f8:	98 0f       	add	r25, r24
    22fa:	9a 35       	cpi	r25, 0x5A	; 90
    22fc:	10 f4       	brcc	.+4      	; 0x2302 <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    22fe:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2302:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <mem_last_save>
    2306:	96 ef       	ldi	r25, 0xF6	; 246
    2308:	98 0f       	add	r25, r24
    230a:	9a 35       	cpi	r25, 0x5A	; 90
    230c:	10 f4       	brcc	.+4      	; 0x2312 <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    230e:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <motor_value>
    2312:	08 95       	ret

00002314 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2314:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2318:	42 e0       	ldi	r20, 0x02	; 2
    231a:	68 ee       	ldi	r22, 0xE8	; 232
    231c:	73 e0       	ldi	r23, 0x03	; 3
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 7e 08 	call	0x10fc	; 0x10fc <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2326:	0e 94 8c 04 	call	0x918	; 0x918 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <servo_init>
	#endif
	error_init();
    2330:	0e 94 45 09 	call	0x128a	; 0x128a <error_init>
	init_measure();
    2334:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <init_measure>
	init_buzzer();
    2338:	0e 94 89 04 	call	0x912	; 0x912 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2344:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2348:	e9 e8       	ldi	r30, 0x89	; 137
    234a:	f4 e0       	ldi	r31, 0x04	; 4
    234c:	8e ef       	ldi	r24, 0xFE	; 254
    234e:	9f e0       	ldi	r25, 0x0F	; 15
    2350:	96 87       	std	Z+14, r25	; 0x0e
    2352:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2354:	8a e7       	ldi	r24, 0x7A	; 122
    2356:	90 e1       	ldi	r25, 0x10	; 16
    2358:	94 87       	std	Z+12, r25	; 0x0c
    235a:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    235c:	86 ed       	ldi	r24, 0xD6	; 214
    235e:	90 e1       	ldi	r25, 0x10	; 16
    2360:	92 87       	std	Z+10, r25	; 0x0a
    2362:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2364:	ec e5       	ldi	r30, 0x5C	; 92
    2366:	f4 e0       	ldi	r31, 0x04	; 4
    2368:	8c e0       	ldi	r24, 0x0C	; 12
    236a:	90 e1       	ldi	r25, 0x10	; 16
    236c:	96 87       	std	Z+14, r25	; 0x0e
    236e:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2370:	88 ea       	ldi	r24, 0xA8	; 168
    2372:	90 e1       	ldi	r25, 0x10	; 16
    2374:	94 87       	std	Z+12, r25	; 0x0c
    2376:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2378:	89 ef       	ldi	r24, 0xF9	; 249
    237a:	90 e1       	ldi	r25, 0x10	; 16
    237c:	92 87       	std	Z+10, r25	; 0x0a
    237e:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2380:	8a e2       	ldi	r24, 0x2A	; 42
    2382:	91 e1       	ldi	r25, 0x11	; 17
    2384:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <button3+0xc>
    2388:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    238c:	ea e3       	ldi	r30, 0x3A	; 58
    238e:	f4 e0       	ldi	r31, 0x04	; 4
    2390:	8a e1       	ldi	r24, 0x1A	; 26
    2392:	90 e1       	ldi	r25, 0x10	; 16
    2394:	96 87       	std	Z+14, r25	; 0x0e
    2396:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2398:	84 e2       	ldi	r24, 0x24	; 36
    239a:	90 e1       	ldi	r25, 0x10	; 16
    239c:	92 87       	std	Z+10, r25	; 0x0a
    239e:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    23a0:	86 e4       	ldi	r24, 0x46	; 70
    23a2:	90 e1       	ldi	r25, 0x10	; 16
    23a4:	94 87       	std	Z+12, r25	; 0x0c
    23a6:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    23a8:	ea e7       	ldi	r30, 0x7A	; 122
    23aa:	f4 e0       	ldi	r31, 0x04	; 4
    23ac:	80 e3       	ldi	r24, 0x30	; 48
    23ae:	90 e1       	ldi	r25, 0x10	; 16
    23b0:	96 87       	std	Z+14, r25	; 0x0e
    23b2:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    23b4:	8a e3       	ldi	r24, 0x3A	; 58
    23b6:	90 e1       	ldi	r25, 0x10	; 16
    23b8:	92 87       	std	Z+10, r25	; 0x0a
    23ba:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    23bc:	80 e6       	ldi	r24, 0x60	; 96
    23be:	90 e1       	ldi	r25, 0x10	; 16
    23c0:	94 87       	std	Z+12, r25	; 0x0c
    23c2:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    23c4:	8a e4       	ldi	r24, 0x4A	; 74
    23c6:	91 e1       	ldi	r25, 0x11	; 17
    23c8:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <button7+0xc>
    23cc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    23d0:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    23da:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
    23e4:	08 95       	ret

000023e6 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    23e6:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <state_measure_volt>
	dcmotorpwm_deinit();
    23ea:	0e 94 a0 04 	call	0x940	; 0x940 <dcmotorpwm_deinit>
	off_button();
    23ee:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <off_button>
	error_deinit();
    23f2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    23f6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    23fa:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <system_events+0x1>
    23fe:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    240a:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    240e:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2412:	8e 7f       	andi	r24, 0xFE	; 254
    2414:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2418:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    241c:	08 95       	ret

0000241e <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    241e:	0e 94 1d 11 	call	0x223a	; 0x223a <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2422:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2426:	80 ff       	sbrs	r24, 0
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <button4_toggle_system+0x12>
	{
		off_system();
    242a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <off_system>
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2430:	0e 94 8a 11 	call	0x2314	; 0x2314 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2434:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2438:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    243c:	90 62       	ori	r25, 0x20	; 32
    243e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2442:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
    2446:	08 95       	ret

00002448 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2448:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    244c:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    2450:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    2454:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    2458:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <disp_fast_timer.2066>
    245c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <disp_fast_timer.2066+0x1>
    2460:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <disp_fast_timer.2066+0x2>
    2464:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <disp_fast_timer.2066+0x3>
    2468:	84 17       	cp	r24, r20
    246a:	95 07       	cpc	r25, r21
    246c:	a6 07       	cpc	r26, r22
    246e:	b7 07       	cpc	r27, r23
    2470:	08 f0       	brcs	.+2      	; 0x2474 <disp_fast_process+0x2c>
    2472:	9c c0       	rjmp	.+312    	; 0x25ac <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2474:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2478:	85 ff       	sbrs	r24, 5
    247a:	1d c0       	rjmp	.+58     	; 0x24b6 <disp_fast_process+0x6e>
    247c:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    2480:	63 36       	cpi	r22, 0x63	; 99
    2482:	c8 f4       	brcc	.+50     	; 0x24b6 <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2484:	6f 5f       	subi	r22, 0xFF	; 255
    2486:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <servo_vibro_value>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2490:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <counter_very_fast_servo_add>
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    249a:	8f 30       	cpi	r24, 0x0F	; 15
    249c:	60 f0       	brcs	.+24     	; 0x24b6 <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    249e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    24a2:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    24a6:	8f 7d       	andi	r24, 0xDF	; 223
    24a8:	80 64       	ori	r24, 0x40	; 64
    24aa:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    24ae:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
				counter_very_fast_servo_add = 0;
    24b2:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    24b6:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    24ba:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    24be:	91 ff       	sbrs	r25, 1
    24c0:	1d c0       	rjmp	.+58     	; 0x24fc <disp_fast_process+0xb4>
    24c2:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    24c6:	66 23       	and	r22, r22
    24c8:	c9 f0       	breq	.+50     	; 0x24fc <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <servo_vibro_value>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    24d6:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <counter_very_fast_servo_sub>
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    24e0:	8f 30       	cpi	r24, 0x0F	; 15
    24e2:	60 f0       	brcs	.+24     	; 0x24fc <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    24e4:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    24e8:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    24ec:	9d 7f       	andi	r25, 0xFD	; 253
    24ee:	94 60       	ori	r25, 0x04	; 4
    24f0:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    24f4:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
				counter_very_fast_servo_sub = 0;
    24f8:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    24fc:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2500:	87 ff       	sbrs	r24, 7
    2502:	1d c0       	rjmp	.+58     	; 0x253e <disp_fast_process+0xf6>
    2504:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    2508:	63 36       	cpi	r22, 0x63	; 99
    250a:	c8 f4       	brcc	.+50     	; 0x253e <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    250c:	6f 5f       	subi	r22, 0xFF	; 255
    250e:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <motor_value>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			counter_very_fast_motor_add++;
    2518:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <counter_very_fast_motor_add>
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2522:	8f 30       	cpi	r24, 0x0F	; 15
    2524:	60 f0       	brcs	.+24     	; 0x253e <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2526:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    252a:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    252e:	8f 77       	andi	r24, 0x7F	; 127
    2530:	91 60       	ori	r25, 0x01	; 1
    2532:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    2536:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
				counter_very_fast_motor_add = 0;
    253a:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    253e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2542:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2546:	93 ff       	sbrs	r25, 3
    2548:	1d c0       	rjmp	.+58     	; 0x2584 <disp_fast_process+0x13c>
    254a:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    254e:	6b 30       	cpi	r22, 0x0B	; 11
    2550:	c8 f0       	brcs	.+50     	; 0x2584 <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2552:	61 50       	subi	r22, 0x01	; 1
    2554:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <motor_value>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			counter_very_fast_motor_sub++;
    255e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <counter_very_fast_motor_sub>
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2568:	8f 30       	cpi	r24, 0x0F	; 15
    256a:	60 f0       	brcs	.+24     	; 0x2584 <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    256c:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2570:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2574:	97 7f       	andi	r25, 0xF7	; 247
    2576:	90 61       	ori	r25, 0x10	; 16
    2578:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <system_events+0x1>
    257c:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <system_events>
				counter_very_fast_motor_sub = 0;
    2580:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2584:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <disp_fast_timer.2066>
    2588:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <disp_fast_timer.2066+0x1>
    258c:	a0 91 46 03 	lds	r26, 0x0346	; 0x800346 <disp_fast_timer.2066+0x2>
    2590:	b0 91 47 03 	lds	r27, 0x0347	; 0x800347 <disp_fast_timer.2066+0x3>
    2594:	80 5b       	subi	r24, 0xB0	; 176
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	af 4f       	sbci	r26, 0xFF	; 255
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <disp_fast_timer.2066>
    25a0:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <disp_fast_timer.2066+0x1>
    25a4:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <disp_fast_timer.2066+0x2>
    25a8:	b0 93 47 03 	sts	0x0347, r27	; 0x800347 <disp_fast_timer.2066+0x3>
    25ac:	08 95       	ret

000025ae <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    25ae:	40 91 ed 04 	lds	r20, 0x04ED	; 0x8004ed <mktime+0x2>
    25b2:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <mktime+0x3>
    25b6:	60 91 ef 04 	lds	r22, 0x04EF	; 0x8004ef <mktime+0x4>
    25ba:	70 91 f0 04 	lds	r23, 0x04F0	; 0x8004f0 <mktime+0x5>
    25be:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <disp_very_fast_timer>
    25c2:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <disp_very_fast_timer+0x1>
    25c6:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <disp_very_fast_timer+0x2>
    25ca:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <disp_very_fast_timer+0x3>
    25ce:	84 17       	cp	r24, r20
    25d0:	95 07       	cpc	r25, r21
    25d2:	a6 07       	cpc	r26, r22
    25d4:	b7 07       	cpc	r27, r23
    25d6:	08 f0       	brcs	.+2      	; 0x25da <disp_very_fast_process+0x2c>
    25d8:	51 c0       	rjmp	.+162    	; 0x267c <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    25da:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    25de:	63 36       	cpi	r22, 0x63	; 99
    25e0:	50 f4       	brcc	.+20     	; 0x25f6 <disp_very_fast_process+0x48>
    25e2:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    25e6:	86 ff       	sbrs	r24, 6
    25e8:	06 c0       	rjmp	.+12     	; 0x25f6 <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    25ea:	6f 5f       	subi	r22, 0xFF	; 255
    25ec:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <servo_vibro_value>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    25f6:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <servo_vibro_value>
    25fa:	66 23       	and	r22, r22
    25fc:	61 f0       	breq	.+24     	; 0x2616 <disp_very_fast_process+0x68>
    25fe:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2602:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2606:	92 ff       	sbrs	r25, 2
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    260a:	61 50       	subi	r22, 0x01	; 1
    260c:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <servo_vibro_value>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2616:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    261a:	63 36       	cpi	r22, 0x63	; 99
    261c:	60 f4       	brcc	.+24     	; 0x2636 <disp_very_fast_process+0x88>
    261e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2622:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2626:	90 ff       	sbrs	r25, 0
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    262a:	6f 5f       	subi	r22, 0xFF	; 255
    262c:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <motor_value>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2636:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <motor_value>
    263a:	6b 30       	cpi	r22, 0x0B	; 11
    263c:	60 f0       	brcs	.+24     	; 0x2656 <disp_very_fast_process+0xa8>
    263e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <system_events>
    2642:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <system_events+0x1>
    2646:	94 ff       	sbrs	r25, 4
    2648:	06 c0       	rjmp	.+12     	; 0x2656 <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    264a:	61 50       	subi	r22, 0x01	; 1
    264c:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <motor_value>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 c9 06 	call	0xd92	; 0xd92 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2656:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <disp_very_fast_timer>
    265a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <disp_very_fast_timer+0x1>
    265e:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <disp_very_fast_timer+0x2>
    2662:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <disp_very_fast_timer+0x3>
    2666:	4e 96       	adiw	r24, 0x1e	; 30
    2668:	a1 1d       	adc	r26, r1
    266a:	b1 1d       	adc	r27, r1
    266c:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <disp_very_fast_timer>
    2670:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <disp_very_fast_timer+0x1>
    2674:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <disp_very_fast_timer+0x2>
    2678:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <disp_very_fast_timer+0x3>
    267c:	08 95       	ret

0000267e <system_error>:
}


void system_error(void)
{
	off_button();
    267e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <off_button>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2682:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <servo_close>
    2686:	08 95       	ret

00002688 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2688:	1f 92       	push	r1
    268a:	0f 92       	push	r0
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	0f 92       	push	r0
    2690:	11 24       	eor	r1, r1
    2692:	2f 93       	push	r18
    2694:	3f 93       	push	r19
    2696:	4f 93       	push	r20
    2698:	5f 93       	push	r21
    269a:	6f 93       	push	r22
    269c:	7f 93       	push	r23
    269e:	8f 93       	push	r24
    26a0:	9f 93       	push	r25
    26a2:	af 93       	push	r26
    26a4:	bf 93       	push	r27
    26a6:	ef 93       	push	r30
    26a8:	ff 93       	push	r31
    26aa:	eb ee       	ldi	r30, 0xEB	; 235
    26ac:	f4 e0       	ldi	r31, 0x04	; 4
    26ae:	80 81       	ld	r24, Z
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	c2 96       	adiw	r24, 0x32	; 50
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	88 3e       	cpi	r24, 0xE8	; 232
    26be:	93 40       	sbci	r25, 0x03	; 3
    26c0:	88 f0       	brcs	.+34     	; 0x26e4 <__vector_10+0x5c>
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	a4 81       	ldd	r26, Z+4	; 0x04
    26c8:	b5 81       	ldd	r27, Z+5	; 0x05
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	a1 1d       	adc	r26, r1
    26ce:	b1 1d       	adc	r27, r1
    26d0:	82 83       	std	Z+2, r24	; 0x02
    26d2:	93 83       	std	Z+3, r25	; 0x03
    26d4:	a4 83       	std	Z+4, r26	; 0x04
    26d6:	b5 83       	std	Z+5, r27	; 0x05
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	88 5e       	subi	r24, 0xE8	; 232
    26de:	93 40       	sbci	r25, 0x03	; 3
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	81 e5       	ldi	r24, 0x51	; 81
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <display_process>
    26ec:	ff 91       	pop	r31
    26ee:	ef 91       	pop	r30
    26f0:	bf 91       	pop	r27
    26f2:	af 91       	pop	r26
    26f4:	9f 91       	pop	r25
    26f6:	8f 91       	pop	r24
    26f8:	7f 91       	pop	r23
    26fa:	6f 91       	pop	r22
    26fc:	5f 91       	pop	r21
    26fe:	4f 91       	pop	r20
    2700:	3f 91       	pop	r19
    2702:	2f 91       	pop	r18
    2704:	0f 90       	pop	r0
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	0f 90       	pop	r0
    270a:	1f 90       	pop	r1
    270c:	18 95       	reti

0000270e <timer0_init>:
    270e:	93 b7       	in	r25, 0x33	; 51
    2710:	98 60       	ori	r25, 0x08	; 8
    2712:	93 bf       	out	0x33, r25	; 51
    2714:	6c bf       	out	0x3c, r22	; 60
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	99 f0       	breq	.+38     	; 0x2740 <timer0_init+0x32>
    271a:	28 f4       	brcc	.+10     	; 0x2726 <timer0_init+0x18>
    271c:	88 23       	and	r24, r24
    271e:	41 f0       	breq	.+16     	; 0x2730 <timer0_init+0x22>
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	51 f0       	breq	.+20     	; 0x2738 <timer0_init+0x2a>
    2724:	19 c0       	rjmp	.+50     	; 0x2758 <timer0_init+0x4a>
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	79 f0       	breq	.+30     	; 0x2748 <timer0_init+0x3a>
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	89 f0       	breq	.+34     	; 0x2750 <timer0_init+0x42>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <timer0_init+0x4a>
    2730:	83 b7       	in	r24, 0x33	; 51
    2732:	81 60       	ori	r24, 0x01	; 1
    2734:	83 bf       	out	0x33, r24	; 51
    2736:	13 c0       	rjmp	.+38     	; 0x275e <timer0_init+0x50>
    2738:	83 b7       	in	r24, 0x33	; 51
    273a:	82 60       	ori	r24, 0x02	; 2
    273c:	83 bf       	out	0x33, r24	; 51
    273e:	0f c0       	rjmp	.+30     	; 0x275e <timer0_init+0x50>
    2740:	83 b7       	in	r24, 0x33	; 51
    2742:	83 60       	ori	r24, 0x03	; 3
    2744:	83 bf       	out	0x33, r24	; 51
    2746:	0b c0       	rjmp	.+22     	; 0x275e <timer0_init+0x50>
    2748:	83 b7       	in	r24, 0x33	; 51
    274a:	84 60       	ori	r24, 0x04	; 4
    274c:	83 bf       	out	0x33, r24	; 51
    274e:	07 c0       	rjmp	.+14     	; 0x275e <timer0_init+0x50>
    2750:	83 b7       	in	r24, 0x33	; 51
    2752:	85 60       	ori	r24, 0x05	; 5
    2754:	83 bf       	out	0x33, r24	; 51
    2756:	03 c0       	rjmp	.+6      	; 0x275e <timer0_init+0x50>
    2758:	83 b7       	in	r24, 0x33	; 51
    275a:	81 60       	ori	r24, 0x01	; 1
    275c:	83 bf       	out	0x33, r24	; 51
    275e:	89 b7       	in	r24, 0x39	; 57
    2760:	82 60       	ori	r24, 0x02	; 2
    2762:	89 bf       	out	0x39, r24	; 57
    2764:	08 95       	ret

00002766 <evTime_init>:
    2766:	23 e0       	ldi	r18, 0x03	; 3
    2768:	fc 01       	movw	r30, r24
    276a:	24 83       	std	Z+4, r18	; 0x04
    276c:	10 82       	st	Z, r1
    276e:	11 82       	std	Z+1, r1	; 0x01
    2770:	12 82       	std	Z+2, r1	; 0x02
    2772:	13 82       	std	Z+3, r1	; 0x03
    2774:	08 95       	ret

00002776 <evTime_start>:
    2776:	0f 93       	push	r16
    2778:	1f 93       	push	r17
    277a:	21 e0       	ldi	r18, 0x01	; 1
    277c:	fc 01       	movw	r30, r24
    277e:	24 83       	std	Z+4, r18	; 0x04
    2780:	00 91 ed 04 	lds	r16, 0x04ED	; 0x8004ed <mktime+0x2>
    2784:	10 91 ee 04 	lds	r17, 0x04EE	; 0x8004ee <mktime+0x3>
    2788:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <mktime+0x4>
    278c:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <mktime+0x5>
    2790:	40 0f       	add	r20, r16
    2792:	51 1f       	adc	r21, r17
    2794:	62 1f       	adc	r22, r18
    2796:	73 1f       	adc	r23, r19
    2798:	40 83       	st	Z, r20
    279a:	51 83       	std	Z+1, r21	; 0x01
    279c:	62 83       	std	Z+2, r22	; 0x02
    279e:	73 83       	std	Z+3, r23	; 0x03
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <evTime_check>:

int evTime_check(evTime * evt)
{
    27a6:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    27a8:	84 81       	ldd	r24, Z+4	; 0x04
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	b1 f4       	brne	.+44     	; 0x27da <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    27ae:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <mktime+0x2>
    27b2:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <mktime+0x3>
    27b6:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <mktime+0x4>
    27ba:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <mktime+0x5>
    27be:	40 81       	ld	r20, Z
    27c0:	51 81       	ldd	r21, Z+1	; 0x01
    27c2:	62 81       	ldd	r22, Z+2	; 0x02
    27c4:	73 81       	ldd	r23, Z+3	; 0x03
    27c6:	48 17       	cp	r20, r24
    27c8:	59 07       	cpc	r21, r25
    27ca:	6a 07       	cpc	r22, r26
    27cc:	7b 07       	cpc	r23, r27
    27ce:	40 f4       	brcc	.+16     	; 0x27e0 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    27da:	8f ef       	ldi	r24, 0xFF	; 255
    27dc:	9f ef       	ldi	r25, 0xFF	; 255
    27de:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    27e4:	08 95       	ret

000027e6 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    27e6:	21 e0       	ldi	r18, 0x01	; 1
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	fc 01       	movw	r30, r24
    27ec:	84 81       	ldd	r24, Z+4	; 0x04
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	11 f0       	breq	.+4      	; 0x27f6 <evTime_off+0x10>
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
}
    27f6:	c9 01       	movw	r24, r18
    27f8:	08 95       	ret

000027fa <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    27fa:	cf 92       	push	r12
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	ec 01       	movw	r28, r24
    280c:	6a 01       	movw	r12, r20
    280e:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	81 11       	cpse	r24, r1
    2814:	06 c0       	rjmp	.+12     	; 0x2822 <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2816:	83 e0       	ldi	r24, 0x03	; 3
    2818:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    281a:	18 82       	st	Y, r1
    281c:	19 82       	std	Y+1, r1	; 0x01
    281e:	1a 82       	std	Y+2, r1	; 0x02
    2820:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2822:	ce 01       	movw	r24, r28
    2824:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <evTime_check>
    2828:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	31 f4       	brne	.+12     	; 0x283a <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    282e:	b7 01       	movw	r22, r14
    2830:	a6 01       	movw	r20, r12
    2832:	ce 01       	movw	r24, r28
    2834:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
		return 1;
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	41 f4       	brne	.+16     	; 0x2850 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2840:	b7 01       	movw	r22, r14
    2842:	a6 01       	movw	r20, r12
    2844:	ce 01       	movw	r24, r28
    2846:	0e 94 bb 13 	call	0x2776	; 0x2776 <evTime_start>
	}
	return 0;
    284a:	00 e0       	ldi	r16, 0x00	; 0
    284c:	10 e0       	ldi	r17, 0x00	; 0
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <evTime_process_period+0x5a>
    2850:	00 e0       	ldi	r16, 0x00	; 0
    2852:	10 e0       	ldi	r17, 0x00	; 0
}
    2854:	c8 01       	movw	r24, r16
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	08 95       	ret

00002868 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2868:	1f 92       	push	r1
    286a:	0f 92       	push	r0
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	0f 92       	push	r0
    2870:	11 24       	eor	r1, r1
    2872:	2f 93       	push	r18
    2874:	3f 93       	push	r19
    2876:	4f 93       	push	r20
    2878:	5f 93       	push	r21
    287a:	8f 93       	push	r24
    287c:	9f 93       	push	r25
    287e:	ef 93       	push	r30
    2880:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2882:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    2884:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    2886:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    2888:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <UART_RxHead>
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    2890:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <UART_RxTail>
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	84 17       	cp	r24, r20
    2898:	95 07       	cpc	r25, r21
    289a:	39 f0       	breq	.+14     	; 0x28aa <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    289c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    28a0:	fc 01       	movw	r30, r24
    28a2:	e8 5a       	subi	r30, 0xA8	; 168
    28a4:	fc 4f       	sbci	r31, 0xFC	; 252
    28a6:	30 83       	st	Z, r19
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    28aa:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    28ac:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <UART_LastRxError>
}
    28b0:	ff 91       	pop	r31
    28b2:	ef 91       	pop	r30
    28b4:	9f 91       	pop	r25
    28b6:	8f 91       	pop	r24
    28b8:	5f 91       	pop	r21
    28ba:	4f 91       	pop	r20
    28bc:	3f 91       	pop	r19
    28be:	2f 91       	pop	r18
    28c0:	0f 90       	pop	r0
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	0f 90       	pop	r0
    28c6:	1f 90       	pop	r1
    28c8:	18 95       	reti

000028ca <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	8f 93       	push	r24
    28d6:	9f 93       	push	r25
    28d8:	ef 93       	push	r30
    28da:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    28dc:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <UART_TxHead>
    28e0:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <UART_TxTail>
    28e4:	98 17       	cp	r25, r24
    28e6:	71 f0       	breq	.+28     	; 0x2904 <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    28e8:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <UART_TxTail>
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	01 96       	adiw	r24, 0x01	; 1
    28f0:	8f 77       	andi	r24, 0x7F	; 127
    28f2:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    28f4:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    28f8:	fc 01       	movw	r30, r24
    28fa:	e8 5a       	subi	r30, 0xA8	; 168
    28fc:	fc 4f       	sbci	r31, 0xFC	; 252
    28fe:	80 81       	ld	r24, Z
    2900:	8c b9       	out	0x0c, r24	; 12
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2904:	55 98       	cbi	0x0a, 5	; 10
    }
}
    2906:	ff 91       	pop	r31
    2908:	ef 91       	pop	r30
    290a:	9f 91       	pop	r25
    290c:	8f 91       	pop	r24
    290e:	0f 90       	pop	r0
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	0f 90       	pop	r0
    2914:	1f 90       	pop	r1
    2916:	18 95       	reti

00002918 <__subsf3>:
    2918:	50 58       	subi	r21, 0x80	; 128

0000291a <__addsf3>:
    291a:	bb 27       	eor	r27, r27
    291c:	aa 27       	eor	r26, r26
    291e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__addsf3x>
    2922:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_round>
    2926:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__fp_pscA>
    292a:	38 f0       	brcs	.+14     	; 0x293a <__addsf3+0x20>
    292c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__fp_pscB>
    2930:	20 f0       	brcs	.+8      	; 0x293a <__addsf3+0x20>
    2932:	39 f4       	brne	.+14     	; 0x2942 <__addsf3+0x28>
    2934:	9f 3f       	cpi	r25, 0xFF	; 255
    2936:	19 f4       	brne	.+6      	; 0x293e <__addsf3+0x24>
    2938:	26 f4       	brtc	.+8      	; 0x2942 <__addsf3+0x28>
    293a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__fp_nan>
    293e:	0e f4       	brtc	.+2      	; 0x2942 <__addsf3+0x28>
    2940:	e0 95       	com	r30
    2942:	e7 fb       	bst	r30, 7
    2944:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_inf>

00002948 <__addsf3x>:
    2948:	e9 2f       	mov	r30, r25
    294a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__fp_split3>
    294e:	58 f3       	brcs	.-42     	; 0x2926 <__addsf3+0xc>
    2950:	ba 17       	cp	r27, r26
    2952:	62 07       	cpc	r22, r18
    2954:	73 07       	cpc	r23, r19
    2956:	84 07       	cpc	r24, r20
    2958:	95 07       	cpc	r25, r21
    295a:	20 f0       	brcs	.+8      	; 0x2964 <__addsf3x+0x1c>
    295c:	79 f4       	brne	.+30     	; 0x297c <__addsf3x+0x34>
    295e:	a6 f5       	brtc	.+104    	; 0x29c8 <__addsf3x+0x80>
    2960:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_zero>
    2964:	0e f4       	brtc	.+2      	; 0x2968 <__addsf3x+0x20>
    2966:	e0 95       	com	r30
    2968:	0b 2e       	mov	r0, r27
    296a:	ba 2f       	mov	r27, r26
    296c:	a0 2d       	mov	r26, r0
    296e:	0b 01       	movw	r0, r22
    2970:	b9 01       	movw	r22, r18
    2972:	90 01       	movw	r18, r0
    2974:	0c 01       	movw	r0, r24
    2976:	ca 01       	movw	r24, r20
    2978:	a0 01       	movw	r20, r0
    297a:	11 24       	eor	r1, r1
    297c:	ff 27       	eor	r31, r31
    297e:	59 1b       	sub	r21, r25
    2980:	99 f0       	breq	.+38     	; 0x29a8 <__addsf3x+0x60>
    2982:	59 3f       	cpi	r21, 0xF9	; 249
    2984:	50 f4       	brcc	.+20     	; 0x299a <__addsf3x+0x52>
    2986:	50 3e       	cpi	r21, 0xE0	; 224
    2988:	68 f1       	brcs	.+90     	; 0x29e4 <__addsf3x+0x9c>
    298a:	1a 16       	cp	r1, r26
    298c:	f0 40       	sbci	r31, 0x00	; 0
    298e:	a2 2f       	mov	r26, r18
    2990:	23 2f       	mov	r18, r19
    2992:	34 2f       	mov	r19, r20
    2994:	44 27       	eor	r20, r20
    2996:	58 5f       	subi	r21, 0xF8	; 248
    2998:	f3 cf       	rjmp	.-26     	; 0x2980 <__addsf3x+0x38>
    299a:	46 95       	lsr	r20
    299c:	37 95       	ror	r19
    299e:	27 95       	ror	r18
    29a0:	a7 95       	ror	r26
    29a2:	f0 40       	sbci	r31, 0x00	; 0
    29a4:	53 95       	inc	r21
    29a6:	c9 f7       	brne	.-14     	; 0x299a <__addsf3x+0x52>
    29a8:	7e f4       	brtc	.+30     	; 0x29c8 <__addsf3x+0x80>
    29aa:	1f 16       	cp	r1, r31
    29ac:	ba 0b       	sbc	r27, r26
    29ae:	62 0b       	sbc	r22, r18
    29b0:	73 0b       	sbc	r23, r19
    29b2:	84 0b       	sbc	r24, r20
    29b4:	ba f0       	brmi	.+46     	; 0x29e4 <__addsf3x+0x9c>
    29b6:	91 50       	subi	r25, 0x01	; 1
    29b8:	a1 f0       	breq	.+40     	; 0x29e2 <__addsf3x+0x9a>
    29ba:	ff 0f       	add	r31, r31
    29bc:	bb 1f       	adc	r27, r27
    29be:	66 1f       	adc	r22, r22
    29c0:	77 1f       	adc	r23, r23
    29c2:	88 1f       	adc	r24, r24
    29c4:	c2 f7       	brpl	.-16     	; 0x29b6 <__addsf3x+0x6e>
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <__addsf3x+0x9c>
    29c8:	ba 0f       	add	r27, r26
    29ca:	62 1f       	adc	r22, r18
    29cc:	73 1f       	adc	r23, r19
    29ce:	84 1f       	adc	r24, r20
    29d0:	48 f4       	brcc	.+18     	; 0x29e4 <__addsf3x+0x9c>
    29d2:	87 95       	ror	r24
    29d4:	77 95       	ror	r23
    29d6:	67 95       	ror	r22
    29d8:	b7 95       	ror	r27
    29da:	f7 95       	ror	r31
    29dc:	9e 3f       	cpi	r25, 0xFE	; 254
    29de:	08 f0       	brcs	.+2      	; 0x29e2 <__addsf3x+0x9a>
    29e0:	b0 cf       	rjmp	.-160    	; 0x2942 <__addsf3+0x28>
    29e2:	93 95       	inc	r25
    29e4:	88 0f       	add	r24, r24
    29e6:	08 f0       	brcs	.+2      	; 0x29ea <__addsf3x+0xa2>
    29e8:	99 27       	eor	r25, r25
    29ea:	ee 0f       	add	r30, r30
    29ec:	97 95       	ror	r25
    29ee:	87 95       	ror	r24
    29f0:	08 95       	ret

000029f2 <__cmpsf2>:
    29f2:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <__fp_cmp>
    29f6:	08 f4       	brcc	.+2      	; 0x29fa <__cmpsf2+0x8>
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	08 95       	ret

000029fc <__divsf3>:
    29fc:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divsf3x>
    2a00:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_round>
    2a04:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__fp_pscB>
    2a08:	58 f0       	brcs	.+22     	; 0x2a20 <__divsf3+0x24>
    2a0a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__fp_pscA>
    2a0e:	40 f0       	brcs	.+16     	; 0x2a20 <__divsf3+0x24>
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <__divsf3+0x20>
    2a12:	5f 3f       	cpi	r21, 0xFF	; 255
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <__divsf3+0x24>
    2a16:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_inf>
    2a1a:	51 11       	cpse	r21, r1
    2a1c:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__fp_szero>
    2a20:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__fp_nan>

00002a24 <__divsf3x>:
    2a24:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__fp_split3>
    2a28:	68 f3       	brcs	.-38     	; 0x2a04 <__divsf3+0x8>

00002a2a <__divsf3_pse>:
    2a2a:	99 23       	and	r25, r25
    2a2c:	b1 f3       	breq	.-20     	; 0x2a1a <__divsf3+0x1e>
    2a2e:	55 23       	and	r21, r21
    2a30:	91 f3       	breq	.-28     	; 0x2a16 <__divsf3+0x1a>
    2a32:	95 1b       	sub	r25, r21
    2a34:	55 0b       	sbc	r21, r21
    2a36:	bb 27       	eor	r27, r27
    2a38:	aa 27       	eor	r26, r26
    2a3a:	62 17       	cp	r22, r18
    2a3c:	73 07       	cpc	r23, r19
    2a3e:	84 07       	cpc	r24, r20
    2a40:	38 f0       	brcs	.+14     	; 0x2a50 <__divsf3_pse+0x26>
    2a42:	9f 5f       	subi	r25, 0xFF	; 255
    2a44:	5f 4f       	sbci	r21, 0xFF	; 255
    2a46:	22 0f       	add	r18, r18
    2a48:	33 1f       	adc	r19, r19
    2a4a:	44 1f       	adc	r20, r20
    2a4c:	aa 1f       	adc	r26, r26
    2a4e:	a9 f3       	breq	.-22     	; 0x2a3a <__divsf3_pse+0x10>
    2a50:	35 d0       	rcall	.+106    	; 0x2abc <__divsf3_pse+0x92>
    2a52:	0e 2e       	mov	r0, r30
    2a54:	3a f0       	brmi	.+14     	; 0x2a64 <__divsf3_pse+0x3a>
    2a56:	e0 e8       	ldi	r30, 0x80	; 128
    2a58:	32 d0       	rcall	.+100    	; 0x2abe <__divsf3_pse+0x94>
    2a5a:	91 50       	subi	r25, 0x01	; 1
    2a5c:	50 40       	sbci	r21, 0x00	; 0
    2a5e:	e6 95       	lsr	r30
    2a60:	00 1c       	adc	r0, r0
    2a62:	ca f7       	brpl	.-14     	; 0x2a56 <__divsf3_pse+0x2c>
    2a64:	2b d0       	rcall	.+86     	; 0x2abc <__divsf3_pse+0x92>
    2a66:	fe 2f       	mov	r31, r30
    2a68:	29 d0       	rcall	.+82     	; 0x2abc <__divsf3_pse+0x92>
    2a6a:	66 0f       	add	r22, r22
    2a6c:	77 1f       	adc	r23, r23
    2a6e:	88 1f       	adc	r24, r24
    2a70:	bb 1f       	adc	r27, r27
    2a72:	26 17       	cp	r18, r22
    2a74:	37 07       	cpc	r19, r23
    2a76:	48 07       	cpc	r20, r24
    2a78:	ab 07       	cpc	r26, r27
    2a7a:	b0 e8       	ldi	r27, 0x80	; 128
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <__divsf3_pse+0x56>
    2a7e:	bb 0b       	sbc	r27, r27
    2a80:	80 2d       	mov	r24, r0
    2a82:	bf 01       	movw	r22, r30
    2a84:	ff 27       	eor	r31, r31
    2a86:	93 58       	subi	r25, 0x83	; 131
    2a88:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8a:	3a f0       	brmi	.+14     	; 0x2a9a <__divsf3_pse+0x70>
    2a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a8e:	51 05       	cpc	r21, r1
    2a90:	78 f0       	brcs	.+30     	; 0x2ab0 <__divsf3_pse+0x86>
    2a92:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_inf>
    2a96:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__fp_szero>
    2a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9c:	e4 f3       	brlt	.-8      	; 0x2a96 <__divsf3_pse+0x6c>
    2a9e:	98 3e       	cpi	r25, 0xE8	; 232
    2aa0:	d4 f3       	brlt	.-12     	; 0x2a96 <__divsf3_pse+0x6c>
    2aa2:	86 95       	lsr	r24
    2aa4:	77 95       	ror	r23
    2aa6:	67 95       	ror	r22
    2aa8:	b7 95       	ror	r27
    2aaa:	f7 95       	ror	r31
    2aac:	9f 5f       	subi	r25, 0xFF	; 255
    2aae:	c9 f7       	brne	.-14     	; 0x2aa2 <__divsf3_pse+0x78>
    2ab0:	88 0f       	add	r24, r24
    2ab2:	91 1d       	adc	r25, r1
    2ab4:	96 95       	lsr	r25
    2ab6:	87 95       	ror	r24
    2ab8:	97 f9       	bld	r25, 7
    2aba:	08 95       	ret
    2abc:	e1 e0       	ldi	r30, 0x01	; 1
    2abe:	66 0f       	add	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	bb 1f       	adc	r27, r27
    2ac6:	62 17       	cp	r22, r18
    2ac8:	73 07       	cpc	r23, r19
    2aca:	84 07       	cpc	r24, r20
    2acc:	ba 07       	cpc	r27, r26
    2ace:	20 f0       	brcs	.+8      	; 0x2ad8 <__divsf3_pse+0xae>
    2ad0:	62 1b       	sub	r22, r18
    2ad2:	73 0b       	sbc	r23, r19
    2ad4:	84 0b       	sbc	r24, r20
    2ad6:	ba 0b       	sbc	r27, r26
    2ad8:	ee 1f       	adc	r30, r30
    2ada:	88 f7       	brcc	.-30     	; 0x2abe <__divsf3_pse+0x94>
    2adc:	e0 95       	com	r30
    2ade:	08 95       	ret

00002ae0 <__fixsfsi>:
    2ae0:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fixunssfsi>
    2ae4:	68 94       	set
    2ae6:	b1 11       	cpse	r27, r1
    2ae8:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__fp_szero>
    2aec:	08 95       	ret

00002aee <__fixunssfsi>:
    2aee:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__fp_splitA>
    2af2:	88 f0       	brcs	.+34     	; 0x2b16 <__fixunssfsi+0x28>
    2af4:	9f 57       	subi	r25, 0x7F	; 127
    2af6:	98 f0       	brcs	.+38     	; 0x2b1e <__fixunssfsi+0x30>
    2af8:	b9 2f       	mov	r27, r25
    2afa:	99 27       	eor	r25, r25
    2afc:	b7 51       	subi	r27, 0x17	; 23
    2afe:	b0 f0       	brcs	.+44     	; 0x2b2c <__fixunssfsi+0x3e>
    2b00:	e1 f0       	breq	.+56     	; 0x2b3a <__fixunssfsi+0x4c>
    2b02:	66 0f       	add	r22, r22
    2b04:	77 1f       	adc	r23, r23
    2b06:	88 1f       	adc	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	1a f0       	brmi	.+6      	; 0x2b12 <__fixunssfsi+0x24>
    2b0c:	ba 95       	dec	r27
    2b0e:	c9 f7       	brne	.-14     	; 0x2b02 <__fixunssfsi+0x14>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <__fixunssfsi+0x4c>
    2b12:	b1 30       	cpi	r27, 0x01	; 1
    2b14:	91 f0       	breq	.+36     	; 0x2b3a <__fixunssfsi+0x4c>
    2b16:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__fp_zero>
    2b1a:	b1 e0       	ldi	r27, 0x01	; 1
    2b1c:	08 95       	ret
    2b1e:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_zero>
    2b22:	67 2f       	mov	r22, r23
    2b24:	78 2f       	mov	r23, r24
    2b26:	88 27       	eor	r24, r24
    2b28:	b8 5f       	subi	r27, 0xF8	; 248
    2b2a:	39 f0       	breq	.+14     	; 0x2b3a <__fixunssfsi+0x4c>
    2b2c:	b9 3f       	cpi	r27, 0xF9	; 249
    2b2e:	cc f3       	brlt	.-14     	; 0x2b22 <__fixunssfsi+0x34>
    2b30:	86 95       	lsr	r24
    2b32:	77 95       	ror	r23
    2b34:	67 95       	ror	r22
    2b36:	b3 95       	inc	r27
    2b38:	d9 f7       	brne	.-10     	; 0x2b30 <__fixunssfsi+0x42>
    2b3a:	3e f4       	brtc	.+14     	; 0x2b4a <__fixunssfsi+0x5c>
    2b3c:	90 95       	com	r25
    2b3e:	80 95       	com	r24
    2b40:	70 95       	com	r23
    2b42:	61 95       	neg	r22
    2b44:	7f 4f       	sbci	r23, 0xFF	; 255
    2b46:	8f 4f       	sbci	r24, 0xFF	; 255
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	08 95       	ret

00002b4c <__floatunsisf>:
    2b4c:	e8 94       	clt
    2b4e:	09 c0       	rjmp	.+18     	; 0x2b62 <__floatsisf+0x12>

00002b50 <__floatsisf>:
    2b50:	97 fb       	bst	r25, 7
    2b52:	3e f4       	brtc	.+14     	; 0x2b62 <__floatsisf+0x12>
    2b54:	90 95       	com	r25
    2b56:	80 95       	com	r24
    2b58:	70 95       	com	r23
    2b5a:	61 95       	neg	r22
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b60:	9f 4f       	sbci	r25, 0xFF	; 255
    2b62:	99 23       	and	r25, r25
    2b64:	a9 f0       	breq	.+42     	; 0x2b90 <__floatsisf+0x40>
    2b66:	f9 2f       	mov	r31, r25
    2b68:	96 e9       	ldi	r25, 0x96	; 150
    2b6a:	bb 27       	eor	r27, r27
    2b6c:	93 95       	inc	r25
    2b6e:	f6 95       	lsr	r31
    2b70:	87 95       	ror	r24
    2b72:	77 95       	ror	r23
    2b74:	67 95       	ror	r22
    2b76:	b7 95       	ror	r27
    2b78:	f1 11       	cpse	r31, r1
    2b7a:	f8 cf       	rjmp	.-16     	; 0x2b6c <__floatsisf+0x1c>
    2b7c:	fa f4       	brpl	.+62     	; 0x2bbc <__floatsisf+0x6c>
    2b7e:	bb 0f       	add	r27, r27
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <__floatsisf+0x36>
    2b82:	60 ff       	sbrs	r22, 0
    2b84:	1b c0       	rjmp	.+54     	; 0x2bbc <__floatsisf+0x6c>
    2b86:	6f 5f       	subi	r22, 0xFF	; 255
    2b88:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8e:	16 c0       	rjmp	.+44     	; 0x2bbc <__floatsisf+0x6c>
    2b90:	88 23       	and	r24, r24
    2b92:	11 f0       	breq	.+4      	; 0x2b98 <__floatsisf+0x48>
    2b94:	96 e9       	ldi	r25, 0x96	; 150
    2b96:	11 c0       	rjmp	.+34     	; 0x2bba <__floatsisf+0x6a>
    2b98:	77 23       	and	r23, r23
    2b9a:	21 f0       	breq	.+8      	; 0x2ba4 <__floatsisf+0x54>
    2b9c:	9e e8       	ldi	r25, 0x8E	; 142
    2b9e:	87 2f       	mov	r24, r23
    2ba0:	76 2f       	mov	r23, r22
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <__floatsisf+0x5e>
    2ba4:	66 23       	and	r22, r22
    2ba6:	71 f0       	breq	.+28     	; 0x2bc4 <__floatsisf+0x74>
    2ba8:	96 e8       	ldi	r25, 0x86	; 134
    2baa:	86 2f       	mov	r24, r22
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	2a f0       	brmi	.+10     	; 0x2bbc <__floatsisf+0x6c>
    2bb2:	9a 95       	dec	r25
    2bb4:	66 0f       	add	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	da f7       	brpl	.-10     	; 0x2bb2 <__floatsisf+0x62>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	96 95       	lsr	r25
    2bc0:	87 95       	ror	r24
    2bc2:	97 f9       	bld	r25, 7
    2bc4:	08 95       	ret

00002bc6 <__fp_cmp>:
    2bc6:	99 0f       	add	r25, r25
    2bc8:	00 08       	sbc	r0, r0
    2bca:	55 0f       	add	r21, r21
    2bcc:	aa 0b       	sbc	r26, r26
    2bce:	e0 e8       	ldi	r30, 0x80	; 128
    2bd0:	fe ef       	ldi	r31, 0xFE	; 254
    2bd2:	16 16       	cp	r1, r22
    2bd4:	17 06       	cpc	r1, r23
    2bd6:	e8 07       	cpc	r30, r24
    2bd8:	f9 07       	cpc	r31, r25
    2bda:	c0 f0       	brcs	.+48     	; 0x2c0c <__fp_cmp+0x46>
    2bdc:	12 16       	cp	r1, r18
    2bde:	13 06       	cpc	r1, r19
    2be0:	e4 07       	cpc	r30, r20
    2be2:	f5 07       	cpc	r31, r21
    2be4:	98 f0       	brcs	.+38     	; 0x2c0c <__fp_cmp+0x46>
    2be6:	62 1b       	sub	r22, r18
    2be8:	73 0b       	sbc	r23, r19
    2bea:	84 0b       	sbc	r24, r20
    2bec:	95 0b       	sbc	r25, r21
    2bee:	39 f4       	brne	.+14     	; 0x2bfe <__fp_cmp+0x38>
    2bf0:	0a 26       	eor	r0, r26
    2bf2:	61 f0       	breq	.+24     	; 0x2c0c <__fp_cmp+0x46>
    2bf4:	23 2b       	or	r18, r19
    2bf6:	24 2b       	or	r18, r20
    2bf8:	25 2b       	or	r18, r21
    2bfa:	21 f4       	brne	.+8      	; 0x2c04 <__fp_cmp+0x3e>
    2bfc:	08 95       	ret
    2bfe:	0a 26       	eor	r0, r26
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <__fp_cmp+0x3e>
    2c02:	a1 40       	sbci	r26, 0x01	; 1
    2c04:	a6 95       	lsr	r26
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	81 1d       	adc	r24, r1
    2c0a:	81 1d       	adc	r24, r1
    2c0c:	08 95       	ret

00002c0e <__fp_inf>:
    2c0e:	97 f9       	bld	r25, 7
    2c10:	9f 67       	ori	r25, 0x7F	; 127
    2c12:	80 e8       	ldi	r24, 0x80	; 128
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	08 95       	ret

00002c1a <__fp_nan>:
    2c1a:	9f ef       	ldi	r25, 0xFF	; 255
    2c1c:	80 ec       	ldi	r24, 0xC0	; 192
    2c1e:	08 95       	ret

00002c20 <__fp_pscA>:
    2c20:	00 24       	eor	r0, r0
    2c22:	0a 94       	dec	r0
    2c24:	16 16       	cp	r1, r22
    2c26:	17 06       	cpc	r1, r23
    2c28:	18 06       	cpc	r1, r24
    2c2a:	09 06       	cpc	r0, r25
    2c2c:	08 95       	ret

00002c2e <__fp_pscB>:
    2c2e:	00 24       	eor	r0, r0
    2c30:	0a 94       	dec	r0
    2c32:	12 16       	cp	r1, r18
    2c34:	13 06       	cpc	r1, r19
    2c36:	14 06       	cpc	r1, r20
    2c38:	05 06       	cpc	r0, r21
    2c3a:	08 95       	ret

00002c3c <__fp_round>:
    2c3c:	09 2e       	mov	r0, r25
    2c3e:	03 94       	inc	r0
    2c40:	00 0c       	add	r0, r0
    2c42:	11 f4       	brne	.+4      	; 0x2c48 <__fp_round+0xc>
    2c44:	88 23       	and	r24, r24
    2c46:	52 f0       	brmi	.+20     	; 0x2c5c <__fp_round+0x20>
    2c48:	bb 0f       	add	r27, r27
    2c4a:	40 f4       	brcc	.+16     	; 0x2c5c <__fp_round+0x20>
    2c4c:	bf 2b       	or	r27, r31
    2c4e:	11 f4       	brne	.+4      	; 0x2c54 <__fp_round+0x18>
    2c50:	60 ff       	sbrs	r22, 0
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <__fp_round+0x20>
    2c54:	6f 5f       	subi	r22, 0xFF	; 255
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	08 95       	ret

00002c5e <__fp_split3>:
    2c5e:	57 fd       	sbrc	r21, 7
    2c60:	90 58       	subi	r25, 0x80	; 128
    2c62:	44 0f       	add	r20, r20
    2c64:	55 1f       	adc	r21, r21
    2c66:	59 f0       	breq	.+22     	; 0x2c7e <__fp_splitA+0x10>
    2c68:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6a:	71 f0       	breq	.+28     	; 0x2c88 <__fp_splitA+0x1a>
    2c6c:	47 95       	ror	r20

00002c6e <__fp_splitA>:
    2c6e:	88 0f       	add	r24, r24
    2c70:	97 fb       	bst	r25, 7
    2c72:	99 1f       	adc	r25, r25
    2c74:	61 f0       	breq	.+24     	; 0x2c8e <__fp_splitA+0x20>
    2c76:	9f 3f       	cpi	r25, 0xFF	; 255
    2c78:	79 f0       	breq	.+30     	; 0x2c98 <__fp_splitA+0x2a>
    2c7a:	87 95       	ror	r24
    2c7c:	08 95       	ret
    2c7e:	12 16       	cp	r1, r18
    2c80:	13 06       	cpc	r1, r19
    2c82:	14 06       	cpc	r1, r20
    2c84:	55 1f       	adc	r21, r21
    2c86:	f2 cf       	rjmp	.-28     	; 0x2c6c <__fp_split3+0xe>
    2c88:	46 95       	lsr	r20
    2c8a:	f1 df       	rcall	.-30     	; 0x2c6e <__fp_splitA>
    2c8c:	08 c0       	rjmp	.+16     	; 0x2c9e <__fp_splitA+0x30>
    2c8e:	16 16       	cp	r1, r22
    2c90:	17 06       	cpc	r1, r23
    2c92:	18 06       	cpc	r1, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	f1 cf       	rjmp	.-30     	; 0x2c7a <__fp_splitA+0xc>
    2c98:	86 95       	lsr	r24
    2c9a:	71 05       	cpc	r23, r1
    2c9c:	61 05       	cpc	r22, r1
    2c9e:	08 94       	sec
    2ca0:	08 95       	ret

00002ca2 <__fp_zero>:
    2ca2:	e8 94       	clt

00002ca4 <__fp_szero>:
    2ca4:	bb 27       	eor	r27, r27
    2ca6:	66 27       	eor	r22, r22
    2ca8:	77 27       	eor	r23, r23
    2caa:	cb 01       	movw	r24, r22
    2cac:	97 f9       	bld	r25, 7
    2cae:	08 95       	ret

00002cb0 <__mulsf3>:
    2cb0:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__mulsf3x>
    2cb4:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__fp_round>
    2cb8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__fp_pscA>
    2cbc:	38 f0       	brcs	.+14     	; 0x2ccc <__mulsf3+0x1c>
    2cbe:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__fp_pscB>
    2cc2:	20 f0       	brcs	.+8      	; 0x2ccc <__mulsf3+0x1c>
    2cc4:	95 23       	and	r25, r21
    2cc6:	11 f0       	breq	.+4      	; 0x2ccc <__mulsf3+0x1c>
    2cc8:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_inf>
    2ccc:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__fp_nan>
    2cd0:	11 24       	eor	r1, r1
    2cd2:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__fp_szero>

00002cd6 <__mulsf3x>:
    2cd6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__fp_split3>
    2cda:	70 f3       	brcs	.-36     	; 0x2cb8 <__mulsf3+0x8>

00002cdc <__mulsf3_pse>:
    2cdc:	95 9f       	mul	r25, r21
    2cde:	c1 f3       	breq	.-16     	; 0x2cd0 <__mulsf3+0x20>
    2ce0:	95 0f       	add	r25, r21
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	55 1f       	adc	r21, r21
    2ce6:	62 9f       	mul	r22, r18
    2ce8:	f0 01       	movw	r30, r0
    2cea:	72 9f       	mul	r23, r18
    2cec:	bb 27       	eor	r27, r27
    2cee:	f0 0d       	add	r31, r0
    2cf0:	b1 1d       	adc	r27, r1
    2cf2:	63 9f       	mul	r22, r19
    2cf4:	aa 27       	eor	r26, r26
    2cf6:	f0 0d       	add	r31, r0
    2cf8:	b1 1d       	adc	r27, r1
    2cfa:	aa 1f       	adc	r26, r26
    2cfc:	64 9f       	mul	r22, r20
    2cfe:	66 27       	eor	r22, r22
    2d00:	b0 0d       	add	r27, r0
    2d02:	a1 1d       	adc	r26, r1
    2d04:	66 1f       	adc	r22, r22
    2d06:	82 9f       	mul	r24, r18
    2d08:	22 27       	eor	r18, r18
    2d0a:	b0 0d       	add	r27, r0
    2d0c:	a1 1d       	adc	r26, r1
    2d0e:	62 1f       	adc	r22, r18
    2d10:	73 9f       	mul	r23, r19
    2d12:	b0 0d       	add	r27, r0
    2d14:	a1 1d       	adc	r26, r1
    2d16:	62 1f       	adc	r22, r18
    2d18:	83 9f       	mul	r24, r19
    2d1a:	a0 0d       	add	r26, r0
    2d1c:	61 1d       	adc	r22, r1
    2d1e:	22 1f       	adc	r18, r18
    2d20:	74 9f       	mul	r23, r20
    2d22:	33 27       	eor	r19, r19
    2d24:	a0 0d       	add	r26, r0
    2d26:	61 1d       	adc	r22, r1
    2d28:	23 1f       	adc	r18, r19
    2d2a:	84 9f       	mul	r24, r20
    2d2c:	60 0d       	add	r22, r0
    2d2e:	21 1d       	adc	r18, r1
    2d30:	82 2f       	mov	r24, r18
    2d32:	76 2f       	mov	r23, r22
    2d34:	6a 2f       	mov	r22, r26
    2d36:	11 24       	eor	r1, r1
    2d38:	9f 57       	subi	r25, 0x7F	; 127
    2d3a:	50 40       	sbci	r21, 0x00	; 0
    2d3c:	9a f0       	brmi	.+38     	; 0x2d64 <__mulsf3_pse+0x88>
    2d3e:	f1 f0       	breq	.+60     	; 0x2d7c <__mulsf3_pse+0xa0>
    2d40:	88 23       	and	r24, r24
    2d42:	4a f0       	brmi	.+18     	; 0x2d56 <__mulsf3_pse+0x7a>
    2d44:	ee 0f       	add	r30, r30
    2d46:	ff 1f       	adc	r31, r31
    2d48:	bb 1f       	adc	r27, r27
    2d4a:	66 1f       	adc	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	91 50       	subi	r25, 0x01	; 1
    2d52:	50 40       	sbci	r21, 0x00	; 0
    2d54:	a9 f7       	brne	.-22     	; 0x2d40 <__mulsf3_pse+0x64>
    2d56:	9e 3f       	cpi	r25, 0xFE	; 254
    2d58:	51 05       	cpc	r21, r1
    2d5a:	80 f0       	brcs	.+32     	; 0x2d7c <__mulsf3_pse+0xa0>
    2d5c:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_inf>
    2d60:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__fp_szero>
    2d64:	5f 3f       	cpi	r21, 0xFF	; 255
    2d66:	e4 f3       	brlt	.-8      	; 0x2d60 <__mulsf3_pse+0x84>
    2d68:	98 3e       	cpi	r25, 0xE8	; 232
    2d6a:	d4 f3       	brlt	.-12     	; 0x2d60 <__mulsf3_pse+0x84>
    2d6c:	86 95       	lsr	r24
    2d6e:	77 95       	ror	r23
    2d70:	67 95       	ror	r22
    2d72:	b7 95       	ror	r27
    2d74:	f7 95       	ror	r31
    2d76:	e7 95       	ror	r30
    2d78:	9f 5f       	subi	r25, 0xFF	; 255
    2d7a:	c1 f7       	brne	.-16     	; 0x2d6c <__mulsf3_pse+0x90>
    2d7c:	fe 2b       	or	r31, r30
    2d7e:	88 0f       	add	r24, r24
    2d80:	91 1d       	adc	r25, r1
    2d82:	96 95       	lsr	r25
    2d84:	87 95       	ror	r24
    2d86:	97 f9       	bld	r25, 7
    2d88:	08 95       	ret

00002d8a <__tablejump2__>:
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	05 90       	lpm	r0, Z+
    2d90:	f4 91       	lpm	r31, Z
    2d92:	e0 2d       	mov	r30, r0
    2d94:	09 94       	ijmp

00002d96 <__umulhisi3>:
    2d96:	a2 9f       	mul	r26, r18
    2d98:	b0 01       	movw	r22, r0
    2d9a:	b3 9f       	mul	r27, r19
    2d9c:	c0 01       	movw	r24, r0
    2d9e:	a3 9f       	mul	r26, r19
    2da0:	70 0d       	add	r23, r0
    2da2:	81 1d       	adc	r24, r1
    2da4:	11 24       	eor	r1, r1
    2da6:	91 1d       	adc	r25, r1
    2da8:	b2 9f       	mul	r27, r18
    2daa:	70 0d       	add	r23, r0
    2dac:	81 1d       	adc	r24, r1
    2dae:	11 24       	eor	r1, r1
    2db0:	91 1d       	adc	r25, r1
    2db2:	08 95       	ret

00002db4 <vsprintf>:
    2db4:	ae e0       	ldi	r26, 0x0E	; 14
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e0 ee       	ldi	r30, 0xE0	; 224
    2dba:	f6 e1       	ldi	r31, 0x16	; 22
    2dbc:	0c 94 95 19 	jmp	0x332a	; 0x332a <__prologue_saves__+0x1c>
    2dc0:	8c 01       	movw	r16, r24
    2dc2:	86 e0       	ldi	r24, 0x06	; 6
    2dc4:	8c 83       	std	Y+4, r24	; 0x04
    2dc6:	1a 83       	std	Y+2, r17	; 0x02
    2dc8:	09 83       	std	Y+1, r16	; 0x01
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	9f e7       	ldi	r25, 0x7F	; 127
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <vfprintf>
    2dda:	ef 81       	ldd	r30, Y+7	; 0x07
    2ddc:	f8 85       	ldd	r31, Y+8	; 0x08
    2dde:	e0 0f       	add	r30, r16
    2de0:	f1 1f       	adc	r31, r17
    2de2:	10 82       	st	Z, r1
    2de4:	2e 96       	adiw	r28, 0x0e	; 14
    2de6:	e4 e0       	ldi	r30, 0x04	; 4
    2de8:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__epilogue_restores__+0x1c>

00002dec <vfprintf>:
    2dec:	ab e0       	ldi	r26, 0x0B	; 11
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	ec ef       	ldi	r30, 0xFC	; 252
    2df2:	f6 e1       	ldi	r31, 0x16	; 22
    2df4:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__>
    2df8:	6c 01       	movw	r12, r24
    2dfa:	7b 01       	movw	r14, r22
    2dfc:	8a 01       	movw	r16, r20
    2dfe:	fc 01       	movw	r30, r24
    2e00:	17 82       	std	Z+7, r1	; 0x07
    2e02:	16 82       	std	Z+6, r1	; 0x06
    2e04:	83 81       	ldd	r24, Z+3	; 0x03
    2e06:	81 ff       	sbrs	r24, 1
    2e08:	cc c1       	rjmp	.+920    	; 0x31a2 <vfprintf+0x3b6>
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	3c 01       	movw	r6, r24
    2e10:	f6 01       	movw	r30, r12
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	f7 01       	movw	r30, r14
    2e16:	93 fd       	sbrc	r25, 3
    2e18:	85 91       	lpm	r24, Z+
    2e1a:	93 ff       	sbrs	r25, 3
    2e1c:	81 91       	ld	r24, Z+
    2e1e:	7f 01       	movw	r14, r30
    2e20:	88 23       	and	r24, r24
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <vfprintf+0x3a>
    2e24:	ba c1       	rjmp	.+884    	; 0x319a <vfprintf+0x3ae>
    2e26:	85 32       	cpi	r24, 0x25	; 37
    2e28:	39 f4       	brne	.+14     	; 0x2e38 <vfprintf+0x4c>
    2e2a:	93 fd       	sbrc	r25, 3
    2e2c:	85 91       	lpm	r24, Z+
    2e2e:	93 ff       	sbrs	r25, 3
    2e30:	81 91       	ld	r24, Z+
    2e32:	7f 01       	movw	r14, r30
    2e34:	85 32       	cpi	r24, 0x25	; 37
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <vfprintf+0x56>
    2e38:	b6 01       	movw	r22, r12
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2e40:	e7 cf       	rjmp	.-50     	; 0x2e10 <vfprintf+0x24>
    2e42:	91 2c       	mov	r9, r1
    2e44:	21 2c       	mov	r2, r1
    2e46:	31 2c       	mov	r3, r1
    2e48:	ff e1       	ldi	r31, 0x1F	; 31
    2e4a:	f3 15       	cp	r31, r3
    2e4c:	d8 f0       	brcs	.+54     	; 0x2e84 <vfprintf+0x98>
    2e4e:	8b 32       	cpi	r24, 0x2B	; 43
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <vfprintf+0x84>
    2e52:	38 f4       	brcc	.+14     	; 0x2e62 <vfprintf+0x76>
    2e54:	80 32       	cpi	r24, 0x20	; 32
    2e56:	79 f0       	breq	.+30     	; 0x2e76 <vfprintf+0x8a>
    2e58:	83 32       	cpi	r24, 0x23	; 35
    2e5a:	a1 f4       	brne	.+40     	; 0x2e84 <vfprintf+0x98>
    2e5c:	23 2d       	mov	r18, r3
    2e5e:	20 61       	ori	r18, 0x10	; 16
    2e60:	1d c0       	rjmp	.+58     	; 0x2e9c <vfprintf+0xb0>
    2e62:	8d 32       	cpi	r24, 0x2D	; 45
    2e64:	61 f0       	breq	.+24     	; 0x2e7e <vfprintf+0x92>
    2e66:	80 33       	cpi	r24, 0x30	; 48
    2e68:	69 f4       	brne	.+26     	; 0x2e84 <vfprintf+0x98>
    2e6a:	23 2d       	mov	r18, r3
    2e6c:	21 60       	ori	r18, 0x01	; 1
    2e6e:	16 c0       	rjmp	.+44     	; 0x2e9c <vfprintf+0xb0>
    2e70:	83 2d       	mov	r24, r3
    2e72:	82 60       	ori	r24, 0x02	; 2
    2e74:	38 2e       	mov	r3, r24
    2e76:	e3 2d       	mov	r30, r3
    2e78:	e4 60       	ori	r30, 0x04	; 4
    2e7a:	3e 2e       	mov	r3, r30
    2e7c:	2a c0       	rjmp	.+84     	; 0x2ed2 <vfprintf+0xe6>
    2e7e:	f3 2d       	mov	r31, r3
    2e80:	f8 60       	ori	r31, 0x08	; 8
    2e82:	1d c0       	rjmp	.+58     	; 0x2ebe <vfprintf+0xd2>
    2e84:	37 fc       	sbrc	r3, 7
    2e86:	2d c0       	rjmp	.+90     	; 0x2ee2 <vfprintf+0xf6>
    2e88:	20 ed       	ldi	r18, 0xD0	; 208
    2e8a:	28 0f       	add	r18, r24
    2e8c:	2a 30       	cpi	r18, 0x0A	; 10
    2e8e:	40 f0       	brcs	.+16     	; 0x2ea0 <vfprintf+0xb4>
    2e90:	8e 32       	cpi	r24, 0x2E	; 46
    2e92:	b9 f4       	brne	.+46     	; 0x2ec2 <vfprintf+0xd6>
    2e94:	36 fc       	sbrc	r3, 6
    2e96:	81 c1       	rjmp	.+770    	; 0x319a <vfprintf+0x3ae>
    2e98:	23 2d       	mov	r18, r3
    2e9a:	20 64       	ori	r18, 0x40	; 64
    2e9c:	32 2e       	mov	r3, r18
    2e9e:	19 c0       	rjmp	.+50     	; 0x2ed2 <vfprintf+0xe6>
    2ea0:	36 fe       	sbrs	r3, 6
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <vfprintf+0xc4>
    2ea4:	8a e0       	ldi	r24, 0x0A	; 10
    2ea6:	98 9e       	mul	r9, r24
    2ea8:	20 0d       	add	r18, r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	92 2e       	mov	r9, r18
    2eae:	11 c0       	rjmp	.+34     	; 0x2ed2 <vfprintf+0xe6>
    2eb0:	ea e0       	ldi	r30, 0x0A	; 10
    2eb2:	2e 9e       	mul	r2, r30
    2eb4:	20 0d       	add	r18, r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	22 2e       	mov	r2, r18
    2eba:	f3 2d       	mov	r31, r3
    2ebc:	f0 62       	ori	r31, 0x20	; 32
    2ebe:	3f 2e       	mov	r3, r31
    2ec0:	08 c0       	rjmp	.+16     	; 0x2ed2 <vfprintf+0xe6>
    2ec2:	8c 36       	cpi	r24, 0x6C	; 108
    2ec4:	21 f4       	brne	.+8      	; 0x2ece <vfprintf+0xe2>
    2ec6:	83 2d       	mov	r24, r3
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	38 2e       	mov	r3, r24
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <vfprintf+0xe6>
    2ece:	88 36       	cpi	r24, 0x68	; 104
    2ed0:	41 f4       	brne	.+16     	; 0x2ee2 <vfprintf+0xf6>
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	93 fd       	sbrc	r25, 3
    2ed6:	85 91       	lpm	r24, Z+
    2ed8:	93 ff       	sbrs	r25, 3
    2eda:	81 91       	ld	r24, Z+
    2edc:	7f 01       	movw	r14, r30
    2ede:	81 11       	cpse	r24, r1
    2ee0:	b3 cf       	rjmp	.-154    	; 0x2e48 <vfprintf+0x5c>
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	9f 7d       	andi	r25, 0xDF	; 223
    2ee6:	95 54       	subi	r25, 0x45	; 69
    2ee8:	93 30       	cpi	r25, 0x03	; 3
    2eea:	28 f4       	brcc	.+10     	; 0x2ef6 <vfprintf+0x10a>
    2eec:	0c 5f       	subi	r16, 0xFC	; 252
    2eee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef0:	9f e3       	ldi	r25, 0x3F	; 63
    2ef2:	99 83       	std	Y+1, r25	; 0x01
    2ef4:	0d c0       	rjmp	.+26     	; 0x2f10 <vfprintf+0x124>
    2ef6:	83 36       	cpi	r24, 0x63	; 99
    2ef8:	31 f0       	breq	.+12     	; 0x2f06 <vfprintf+0x11a>
    2efa:	83 37       	cpi	r24, 0x73	; 115
    2efc:	71 f0       	breq	.+28     	; 0x2f1a <vfprintf+0x12e>
    2efe:	83 35       	cpi	r24, 0x53	; 83
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <vfprintf+0x118>
    2f02:	59 c0       	rjmp	.+178    	; 0x2fb6 <vfprintf+0x1ca>
    2f04:	21 c0       	rjmp	.+66     	; 0x2f48 <vfprintf+0x15c>
    2f06:	f8 01       	movw	r30, r16
    2f08:	80 81       	ld	r24, Z
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	0e 5f       	subi	r16, 0xFE	; 254
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	88 24       	eor	r8, r8
    2f12:	83 94       	inc	r8
    2f14:	91 2c       	mov	r9, r1
    2f16:	53 01       	movw	r10, r6
    2f18:	13 c0       	rjmp	.+38     	; 0x2f40 <vfprintf+0x154>
    2f1a:	28 01       	movw	r4, r16
    2f1c:	f2 e0       	ldi	r31, 0x02	; 2
    2f1e:	4f 0e       	add	r4, r31
    2f20:	51 1c       	adc	r5, r1
    2f22:	f8 01       	movw	r30, r16
    2f24:	a0 80       	ld	r10, Z
    2f26:	b1 80       	ldd	r11, Z+1	; 0x01
    2f28:	36 fe       	sbrs	r3, 6
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <vfprintf+0x146>
    2f2c:	69 2d       	mov	r22, r9
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <vfprintf+0x14a>
    2f32:	6f ef       	ldi	r22, 0xFF	; 255
    2f34:	7f ef       	ldi	r23, 0xFF	; 255
    2f36:	c5 01       	movw	r24, r10
    2f38:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <strnlen>
    2f3c:	4c 01       	movw	r8, r24
    2f3e:	82 01       	movw	r16, r4
    2f40:	f3 2d       	mov	r31, r3
    2f42:	ff 77       	andi	r31, 0x7F	; 127
    2f44:	3f 2e       	mov	r3, r31
    2f46:	16 c0       	rjmp	.+44     	; 0x2f74 <vfprintf+0x188>
    2f48:	28 01       	movw	r4, r16
    2f4a:	22 e0       	ldi	r18, 0x02	; 2
    2f4c:	42 0e       	add	r4, r18
    2f4e:	51 1c       	adc	r5, r1
    2f50:	f8 01       	movw	r30, r16
    2f52:	a0 80       	ld	r10, Z
    2f54:	b1 80       	ldd	r11, Z+1	; 0x01
    2f56:	36 fe       	sbrs	r3, 6
    2f58:	03 c0       	rjmp	.+6      	; 0x2f60 <vfprintf+0x174>
    2f5a:	69 2d       	mov	r22, r9
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <vfprintf+0x178>
    2f60:	6f ef       	ldi	r22, 0xFF	; 255
    2f62:	7f ef       	ldi	r23, 0xFF	; 255
    2f64:	c5 01       	movw	r24, r10
    2f66:	0e 94 d7 18 	call	0x31ae	; 0x31ae <strnlen_P>
    2f6a:	4c 01       	movw	r8, r24
    2f6c:	f3 2d       	mov	r31, r3
    2f6e:	f0 68       	ori	r31, 0x80	; 128
    2f70:	3f 2e       	mov	r3, r31
    2f72:	82 01       	movw	r16, r4
    2f74:	33 fc       	sbrc	r3, 3
    2f76:	1b c0       	rjmp	.+54     	; 0x2fae <vfprintf+0x1c2>
    2f78:	82 2d       	mov	r24, r2
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	88 16       	cp	r8, r24
    2f7e:	99 06       	cpc	r9, r25
    2f80:	b0 f4       	brcc	.+44     	; 0x2fae <vfprintf+0x1c2>
    2f82:	b6 01       	movw	r22, r12
    2f84:	80 e2       	ldi	r24, 0x20	; 32
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2f8c:	2a 94       	dec	r2
    2f8e:	f4 cf       	rjmp	.-24     	; 0x2f78 <vfprintf+0x18c>
    2f90:	f5 01       	movw	r30, r10
    2f92:	37 fc       	sbrc	r3, 7
    2f94:	85 91       	lpm	r24, Z+
    2f96:	37 fe       	sbrs	r3, 7
    2f98:	81 91       	ld	r24, Z+
    2f9a:	5f 01       	movw	r10, r30
    2f9c:	b6 01       	movw	r22, r12
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2fa4:	21 10       	cpse	r2, r1
    2fa6:	2a 94       	dec	r2
    2fa8:	21 e0       	ldi	r18, 0x01	; 1
    2faa:	82 1a       	sub	r8, r18
    2fac:	91 08       	sbc	r9, r1
    2fae:	81 14       	cp	r8, r1
    2fb0:	91 04       	cpc	r9, r1
    2fb2:	71 f7       	brne	.-36     	; 0x2f90 <vfprintf+0x1a4>
    2fb4:	e8 c0       	rjmp	.+464    	; 0x3186 <vfprintf+0x39a>
    2fb6:	84 36       	cpi	r24, 0x64	; 100
    2fb8:	11 f0       	breq	.+4      	; 0x2fbe <vfprintf+0x1d2>
    2fba:	89 36       	cpi	r24, 0x69	; 105
    2fbc:	41 f5       	brne	.+80     	; 0x300e <vfprintf+0x222>
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	37 fe       	sbrs	r3, 7
    2fc2:	07 c0       	rjmp	.+14     	; 0x2fd2 <vfprintf+0x1e6>
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	0c 5f       	subi	r16, 0xFC	; 252
    2fce:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd0:	08 c0       	rjmp	.+16     	; 0x2fe2 <vfprintf+0x1f6>
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	07 2e       	mov	r0, r23
    2fd8:	00 0c       	add	r0, r0
    2fda:	88 0b       	sbc	r24, r24
    2fdc:	99 0b       	sbc	r25, r25
    2fde:	0e 5f       	subi	r16, 0xFE	; 254
    2fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe2:	f3 2d       	mov	r31, r3
    2fe4:	ff 76       	andi	r31, 0x6F	; 111
    2fe6:	3f 2e       	mov	r3, r31
    2fe8:	97 ff       	sbrs	r25, 7
    2fea:	09 c0       	rjmp	.+18     	; 0x2ffe <vfprintf+0x212>
    2fec:	90 95       	com	r25
    2fee:	80 95       	com	r24
    2ff0:	70 95       	com	r23
    2ff2:	61 95       	neg	r22
    2ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	f0 68       	ori	r31, 0x80	; 128
    2ffc:	3f 2e       	mov	r3, r31
    2ffe:	2a e0       	ldi	r18, 0x0A	; 10
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	a3 01       	movw	r20, r6
    3004:	0e 94 29 19 	call	0x3252	; 0x3252 <__ultoa_invert>
    3008:	88 2e       	mov	r8, r24
    300a:	86 18       	sub	r8, r6
    300c:	45 c0       	rjmp	.+138    	; 0x3098 <vfprintf+0x2ac>
    300e:	85 37       	cpi	r24, 0x75	; 117
    3010:	31 f4       	brne	.+12     	; 0x301e <vfprintf+0x232>
    3012:	23 2d       	mov	r18, r3
    3014:	2f 7e       	andi	r18, 0xEF	; 239
    3016:	b2 2e       	mov	r11, r18
    3018:	2a e0       	ldi	r18, 0x0A	; 10
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	25 c0       	rjmp	.+74     	; 0x3068 <vfprintf+0x27c>
    301e:	93 2d       	mov	r25, r3
    3020:	99 7f       	andi	r25, 0xF9	; 249
    3022:	b9 2e       	mov	r11, r25
    3024:	8f 36       	cpi	r24, 0x6F	; 111
    3026:	c1 f0       	breq	.+48     	; 0x3058 <vfprintf+0x26c>
    3028:	18 f4       	brcc	.+6      	; 0x3030 <vfprintf+0x244>
    302a:	88 35       	cpi	r24, 0x58	; 88
    302c:	79 f0       	breq	.+30     	; 0x304c <vfprintf+0x260>
    302e:	b5 c0       	rjmp	.+362    	; 0x319a <vfprintf+0x3ae>
    3030:	80 37       	cpi	r24, 0x70	; 112
    3032:	19 f0       	breq	.+6      	; 0x303a <vfprintf+0x24e>
    3034:	88 37       	cpi	r24, 0x78	; 120
    3036:	21 f0       	breq	.+8      	; 0x3040 <vfprintf+0x254>
    3038:	b0 c0       	rjmp	.+352    	; 0x319a <vfprintf+0x3ae>
    303a:	e9 2f       	mov	r30, r25
    303c:	e0 61       	ori	r30, 0x10	; 16
    303e:	be 2e       	mov	r11, r30
    3040:	b4 fe       	sbrs	r11, 4
    3042:	0d c0       	rjmp	.+26     	; 0x305e <vfprintf+0x272>
    3044:	fb 2d       	mov	r31, r11
    3046:	f4 60       	ori	r31, 0x04	; 4
    3048:	bf 2e       	mov	r11, r31
    304a:	09 c0       	rjmp	.+18     	; 0x305e <vfprintf+0x272>
    304c:	34 fe       	sbrs	r3, 4
    304e:	0a c0       	rjmp	.+20     	; 0x3064 <vfprintf+0x278>
    3050:	29 2f       	mov	r18, r25
    3052:	26 60       	ori	r18, 0x06	; 6
    3054:	b2 2e       	mov	r11, r18
    3056:	06 c0       	rjmp	.+12     	; 0x3064 <vfprintf+0x278>
    3058:	28 e0       	ldi	r18, 0x08	; 8
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <vfprintf+0x27c>
    305e:	20 e1       	ldi	r18, 0x10	; 16
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <vfprintf+0x27c>
    3064:	20 e1       	ldi	r18, 0x10	; 16
    3066:	32 e0       	ldi	r19, 0x02	; 2
    3068:	f8 01       	movw	r30, r16
    306a:	b7 fe       	sbrs	r11, 7
    306c:	07 c0       	rjmp	.+14     	; 0x307c <vfprintf+0x290>
    306e:	60 81       	ld	r22, Z
    3070:	71 81       	ldd	r23, Z+1	; 0x01
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	0c 5f       	subi	r16, 0xFC	; 252
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	06 c0       	rjmp	.+12     	; 0x3088 <vfprintf+0x29c>
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 5f       	subi	r16, 0xFE	; 254
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	a3 01       	movw	r20, r6
    308a:	0e 94 29 19 	call	0x3252	; 0x3252 <__ultoa_invert>
    308e:	88 2e       	mov	r8, r24
    3090:	86 18       	sub	r8, r6
    3092:	fb 2d       	mov	r31, r11
    3094:	ff 77       	andi	r31, 0x7F	; 127
    3096:	3f 2e       	mov	r3, r31
    3098:	36 fe       	sbrs	r3, 6
    309a:	0d c0       	rjmp	.+26     	; 0x30b6 <vfprintf+0x2ca>
    309c:	23 2d       	mov	r18, r3
    309e:	2e 7f       	andi	r18, 0xFE	; 254
    30a0:	a2 2e       	mov	r10, r18
    30a2:	89 14       	cp	r8, r9
    30a4:	58 f4       	brcc	.+22     	; 0x30bc <vfprintf+0x2d0>
    30a6:	34 fe       	sbrs	r3, 4
    30a8:	0b c0       	rjmp	.+22     	; 0x30c0 <vfprintf+0x2d4>
    30aa:	32 fc       	sbrc	r3, 2
    30ac:	09 c0       	rjmp	.+18     	; 0x30c0 <vfprintf+0x2d4>
    30ae:	83 2d       	mov	r24, r3
    30b0:	8e 7e       	andi	r24, 0xEE	; 238
    30b2:	a8 2e       	mov	r10, r24
    30b4:	05 c0       	rjmp	.+10     	; 0x30c0 <vfprintf+0x2d4>
    30b6:	b8 2c       	mov	r11, r8
    30b8:	a3 2c       	mov	r10, r3
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <vfprintf+0x2d6>
    30bc:	b8 2c       	mov	r11, r8
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <vfprintf+0x2d6>
    30c0:	b9 2c       	mov	r11, r9
    30c2:	a4 fe       	sbrs	r10, 4
    30c4:	0f c0       	rjmp	.+30     	; 0x30e4 <vfprintf+0x2f8>
    30c6:	fe 01       	movw	r30, r28
    30c8:	e8 0d       	add	r30, r8
    30ca:	f1 1d       	adc	r31, r1
    30cc:	80 81       	ld	r24, Z
    30ce:	80 33       	cpi	r24, 0x30	; 48
    30d0:	21 f4       	brne	.+8      	; 0x30da <vfprintf+0x2ee>
    30d2:	9a 2d       	mov	r25, r10
    30d4:	99 7e       	andi	r25, 0xE9	; 233
    30d6:	a9 2e       	mov	r10, r25
    30d8:	09 c0       	rjmp	.+18     	; 0x30ec <vfprintf+0x300>
    30da:	a2 fe       	sbrs	r10, 2
    30dc:	06 c0       	rjmp	.+12     	; 0x30ea <vfprintf+0x2fe>
    30de:	b3 94       	inc	r11
    30e0:	b3 94       	inc	r11
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <vfprintf+0x300>
    30e4:	8a 2d       	mov	r24, r10
    30e6:	86 78       	andi	r24, 0x86	; 134
    30e8:	09 f0       	breq	.+2      	; 0x30ec <vfprintf+0x300>
    30ea:	b3 94       	inc	r11
    30ec:	a3 fc       	sbrc	r10, 3
    30ee:	11 c0       	rjmp	.+34     	; 0x3112 <vfprintf+0x326>
    30f0:	a0 fe       	sbrs	r10, 0
    30f2:	06 c0       	rjmp	.+12     	; 0x3100 <vfprintf+0x314>
    30f4:	b2 14       	cp	r11, r2
    30f6:	88 f4       	brcc	.+34     	; 0x311a <vfprintf+0x32e>
    30f8:	28 0c       	add	r2, r8
    30fa:	92 2c       	mov	r9, r2
    30fc:	9b 18       	sub	r9, r11
    30fe:	0e c0       	rjmp	.+28     	; 0x311c <vfprintf+0x330>
    3100:	b2 14       	cp	r11, r2
    3102:	60 f4       	brcc	.+24     	; 0x311c <vfprintf+0x330>
    3104:	b6 01       	movw	r22, r12
    3106:	80 e2       	ldi	r24, 0x20	; 32
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    310e:	b3 94       	inc	r11
    3110:	f7 cf       	rjmp	.-18     	; 0x3100 <vfprintf+0x314>
    3112:	b2 14       	cp	r11, r2
    3114:	18 f4       	brcc	.+6      	; 0x311c <vfprintf+0x330>
    3116:	2b 18       	sub	r2, r11
    3118:	02 c0       	rjmp	.+4      	; 0x311e <vfprintf+0x332>
    311a:	98 2c       	mov	r9, r8
    311c:	21 2c       	mov	r2, r1
    311e:	a4 fe       	sbrs	r10, 4
    3120:	10 c0       	rjmp	.+32     	; 0x3142 <vfprintf+0x356>
    3122:	b6 01       	movw	r22, r12
    3124:	80 e3       	ldi	r24, 0x30	; 48
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    312c:	a2 fe       	sbrs	r10, 2
    312e:	17 c0       	rjmp	.+46     	; 0x315e <vfprintf+0x372>
    3130:	a1 fc       	sbrc	r10, 1
    3132:	03 c0       	rjmp	.+6      	; 0x313a <vfprintf+0x34e>
    3134:	88 e7       	ldi	r24, 0x78	; 120
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x352>
    313a:	88 e5       	ldi	r24, 0x58	; 88
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	b6 01       	movw	r22, r12
    3140:	0c c0       	rjmp	.+24     	; 0x315a <vfprintf+0x36e>
    3142:	8a 2d       	mov	r24, r10
    3144:	86 78       	andi	r24, 0x86	; 134
    3146:	59 f0       	breq	.+22     	; 0x315e <vfprintf+0x372>
    3148:	a1 fe       	sbrs	r10, 1
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x364>
    314c:	8b e2       	ldi	r24, 0x2B	; 43
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <vfprintf+0x366>
    3150:	80 e2       	ldi	r24, 0x20	; 32
    3152:	a7 fc       	sbrc	r10, 7
    3154:	8d e2       	ldi	r24, 0x2D	; 45
    3156:	b6 01       	movw	r22, r12
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    315e:	89 14       	cp	r8, r9
    3160:	38 f4       	brcc	.+14     	; 0x3170 <vfprintf+0x384>
    3162:	b6 01       	movw	r22, r12
    3164:	80 e3       	ldi	r24, 0x30	; 48
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    316c:	9a 94       	dec	r9
    316e:	f7 cf       	rjmp	.-18     	; 0x315e <vfprintf+0x372>
    3170:	8a 94       	dec	r8
    3172:	f3 01       	movw	r30, r6
    3174:	e8 0d       	add	r30, r8
    3176:	f1 1d       	adc	r31, r1
    3178:	80 81       	ld	r24, Z
    317a:	b6 01       	movw	r22, r12
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    3182:	81 10       	cpse	r8, r1
    3184:	f5 cf       	rjmp	.-22     	; 0x3170 <vfprintf+0x384>
    3186:	22 20       	and	r2, r2
    3188:	09 f4       	brne	.+2      	; 0x318c <vfprintf+0x3a0>
    318a:	42 ce       	rjmp	.-892    	; 0x2e10 <vfprintf+0x24>
    318c:	b6 01       	movw	r22, r12
    318e:	80 e2       	ldi	r24, 0x20	; 32
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    3196:	2a 94       	dec	r2
    3198:	f6 cf       	rjmp	.-20     	; 0x3186 <vfprintf+0x39a>
    319a:	f6 01       	movw	r30, r12
    319c:	86 81       	ldd	r24, Z+6	; 0x06
    319e:	97 81       	ldd	r25, Z+7	; 0x07
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <vfprintf+0x3ba>
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	9f ef       	ldi	r25, 0xFF	; 255
    31a6:	2b 96       	adiw	r28, 0x0b	; 11
    31a8:	e2 e1       	ldi	r30, 0x12	; 18
    31aa:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__>

000031ae <strnlen_P>:
    31ae:	fc 01       	movw	r30, r24
    31b0:	05 90       	lpm	r0, Z+
    31b2:	61 50       	subi	r22, 0x01	; 1
    31b4:	70 40       	sbci	r23, 0x00	; 0
    31b6:	01 10       	cpse	r0, r1
    31b8:	d8 f7       	brcc	.-10     	; 0x31b0 <strnlen_P+0x2>
    31ba:	80 95       	com	r24
    31bc:	90 95       	com	r25
    31be:	8e 0f       	add	r24, r30
    31c0:	9f 1f       	adc	r25, r31
    31c2:	08 95       	ret

000031c4 <strnlen>:
    31c4:	fc 01       	movw	r30, r24
    31c6:	61 50       	subi	r22, 0x01	; 1
    31c8:	70 40       	sbci	r23, 0x00	; 0
    31ca:	01 90       	ld	r0, Z+
    31cc:	01 10       	cpse	r0, r1
    31ce:	d8 f7       	brcc	.-10     	; 0x31c6 <strnlen+0x2>
    31d0:	80 95       	com	r24
    31d2:	90 95       	com	r25
    31d4:	8e 0f       	add	r24, r30
    31d6:	9f 1f       	adc	r25, r31
    31d8:	08 95       	ret

000031da <fputc>:
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	fb 01       	movw	r30, r22
    31e4:	23 81       	ldd	r18, Z+3	; 0x03
    31e6:	21 fd       	sbrc	r18, 1
    31e8:	03 c0       	rjmp	.+6      	; 0x31f0 <fputc+0x16>
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	2c c0       	rjmp	.+88     	; 0x3248 <fputc+0x6e>
    31f0:	22 ff       	sbrs	r18, 2
    31f2:	16 c0       	rjmp	.+44     	; 0x3220 <fputc+0x46>
    31f4:	46 81       	ldd	r20, Z+6	; 0x06
    31f6:	57 81       	ldd	r21, Z+7	; 0x07
    31f8:	24 81       	ldd	r18, Z+4	; 0x04
    31fa:	35 81       	ldd	r19, Z+5	; 0x05
    31fc:	42 17       	cp	r20, r18
    31fe:	53 07       	cpc	r21, r19
    3200:	44 f4       	brge	.+16     	; 0x3212 <fputc+0x38>
    3202:	a0 81       	ld	r26, Z
    3204:	b1 81       	ldd	r27, Z+1	; 0x01
    3206:	9d 01       	movw	r18, r26
    3208:	2f 5f       	subi	r18, 0xFF	; 255
    320a:	3f 4f       	sbci	r19, 0xFF	; 255
    320c:	31 83       	std	Z+1, r19	; 0x01
    320e:	20 83       	st	Z, r18
    3210:	8c 93       	st	X, r24
    3212:	26 81       	ldd	r18, Z+6	; 0x06
    3214:	37 81       	ldd	r19, Z+7	; 0x07
    3216:	2f 5f       	subi	r18, 0xFF	; 255
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	37 83       	std	Z+7, r19	; 0x07
    321c:	26 83       	std	Z+6, r18	; 0x06
    321e:	14 c0       	rjmp	.+40     	; 0x3248 <fputc+0x6e>
    3220:	8b 01       	movw	r16, r22
    3222:	ec 01       	movw	r28, r24
    3224:	fb 01       	movw	r30, r22
    3226:	00 84       	ldd	r0, Z+8	; 0x08
    3228:	f1 85       	ldd	r31, Z+9	; 0x09
    322a:	e0 2d       	mov	r30, r0
    322c:	09 95       	icall
    322e:	89 2b       	or	r24, r25
    3230:	e1 f6       	brne	.-72     	; 0x31ea <fputc+0x10>
    3232:	d8 01       	movw	r26, r16
    3234:	16 96       	adiw	r26, 0x06	; 6
    3236:	8d 91       	ld	r24, X+
    3238:	9c 91       	ld	r25, X
    323a:	17 97       	sbiw	r26, 0x07	; 7
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	17 96       	adiw	r26, 0x07	; 7
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
    3244:	16 97       	sbiw	r26, 0x06	; 6
    3246:	ce 01       	movw	r24, r28
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	1f 91       	pop	r17
    324e:	0f 91       	pop	r16
    3250:	08 95       	ret

00003252 <__ultoa_invert>:
    3252:	fa 01       	movw	r30, r20
    3254:	aa 27       	eor	r26, r26
    3256:	28 30       	cpi	r18, 0x08	; 8
    3258:	51 f1       	breq	.+84     	; 0x32ae <__ultoa_invert+0x5c>
    325a:	20 31       	cpi	r18, 0x10	; 16
    325c:	81 f1       	breq	.+96     	; 0x32be <__ultoa_invert+0x6c>
    325e:	e8 94       	clt
    3260:	6f 93       	push	r22
    3262:	6e 7f       	andi	r22, 0xFE	; 254
    3264:	6e 5f       	subi	r22, 0xFE	; 254
    3266:	7f 4f       	sbci	r23, 0xFF	; 255
    3268:	8f 4f       	sbci	r24, 0xFF	; 255
    326a:	9f 4f       	sbci	r25, 0xFF	; 255
    326c:	af 4f       	sbci	r26, 0xFF	; 255
    326e:	b1 e0       	ldi	r27, 0x01	; 1
    3270:	3e d0       	rcall	.+124    	; 0x32ee <__ultoa_invert+0x9c>
    3272:	b4 e0       	ldi	r27, 0x04	; 4
    3274:	3c d0       	rcall	.+120    	; 0x32ee <__ultoa_invert+0x9c>
    3276:	67 0f       	add	r22, r23
    3278:	78 1f       	adc	r23, r24
    327a:	89 1f       	adc	r24, r25
    327c:	9a 1f       	adc	r25, r26
    327e:	a1 1d       	adc	r26, r1
    3280:	68 0f       	add	r22, r24
    3282:	79 1f       	adc	r23, r25
    3284:	8a 1f       	adc	r24, r26
    3286:	91 1d       	adc	r25, r1
    3288:	a1 1d       	adc	r26, r1
    328a:	6a 0f       	add	r22, r26
    328c:	71 1d       	adc	r23, r1
    328e:	81 1d       	adc	r24, r1
    3290:	91 1d       	adc	r25, r1
    3292:	a1 1d       	adc	r26, r1
    3294:	20 d0       	rcall	.+64     	; 0x32d6 <__ultoa_invert+0x84>
    3296:	09 f4       	brne	.+2      	; 0x329a <__ultoa_invert+0x48>
    3298:	68 94       	set
    329a:	3f 91       	pop	r19
    329c:	2a e0       	ldi	r18, 0x0A	; 10
    329e:	26 9f       	mul	r18, r22
    32a0:	11 24       	eor	r1, r1
    32a2:	30 19       	sub	r19, r0
    32a4:	30 5d       	subi	r19, 0xD0	; 208
    32a6:	31 93       	st	Z+, r19
    32a8:	de f6       	brtc	.-74     	; 0x3260 <__ultoa_invert+0xe>
    32aa:	cf 01       	movw	r24, r30
    32ac:	08 95       	ret
    32ae:	46 2f       	mov	r20, r22
    32b0:	47 70       	andi	r20, 0x07	; 7
    32b2:	40 5d       	subi	r20, 0xD0	; 208
    32b4:	41 93       	st	Z+, r20
    32b6:	b3 e0       	ldi	r27, 0x03	; 3
    32b8:	0f d0       	rcall	.+30     	; 0x32d8 <__ultoa_invert+0x86>
    32ba:	c9 f7       	brne	.-14     	; 0x32ae <__ultoa_invert+0x5c>
    32bc:	f6 cf       	rjmp	.-20     	; 0x32aa <__ultoa_invert+0x58>
    32be:	46 2f       	mov	r20, r22
    32c0:	4f 70       	andi	r20, 0x0F	; 15
    32c2:	40 5d       	subi	r20, 0xD0	; 208
    32c4:	4a 33       	cpi	r20, 0x3A	; 58
    32c6:	18 f0       	brcs	.+6      	; 0x32ce <__ultoa_invert+0x7c>
    32c8:	49 5d       	subi	r20, 0xD9	; 217
    32ca:	31 fd       	sbrc	r19, 1
    32cc:	40 52       	subi	r20, 0x20	; 32
    32ce:	41 93       	st	Z+, r20
    32d0:	02 d0       	rcall	.+4      	; 0x32d6 <__ultoa_invert+0x84>
    32d2:	a9 f7       	brne	.-22     	; 0x32be <__ultoa_invert+0x6c>
    32d4:	ea cf       	rjmp	.-44     	; 0x32aa <__ultoa_invert+0x58>
    32d6:	b4 e0       	ldi	r27, 0x04	; 4
    32d8:	a6 95       	lsr	r26
    32da:	97 95       	ror	r25
    32dc:	87 95       	ror	r24
    32de:	77 95       	ror	r23
    32e0:	67 95       	ror	r22
    32e2:	ba 95       	dec	r27
    32e4:	c9 f7       	brne	.-14     	; 0x32d8 <__ultoa_invert+0x86>
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	61 05       	cpc	r22, r1
    32ea:	71 05       	cpc	r23, r1
    32ec:	08 95       	ret
    32ee:	9b 01       	movw	r18, r22
    32f0:	ac 01       	movw	r20, r24
    32f2:	0a 2e       	mov	r0, r26
    32f4:	06 94       	lsr	r0
    32f6:	57 95       	ror	r21
    32f8:	47 95       	ror	r20
    32fa:	37 95       	ror	r19
    32fc:	27 95       	ror	r18
    32fe:	ba 95       	dec	r27
    3300:	c9 f7       	brne	.-14     	; 0x32f4 <__ultoa_invert+0xa2>
    3302:	62 0f       	add	r22, r18
    3304:	73 1f       	adc	r23, r19
    3306:	84 1f       	adc	r24, r20
    3308:	95 1f       	adc	r25, r21
    330a:	a0 1d       	adc	r26, r0
    330c:	08 95       	ret

0000330e <__prologue_saves__>:
    330e:	2f 92       	push	r2
    3310:	3f 92       	push	r3
    3312:	4f 92       	push	r4
    3314:	5f 92       	push	r5
    3316:	6f 92       	push	r6
    3318:	7f 92       	push	r7
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	ca 1b       	sub	r28, r26
    3338:	db 0b       	sbc	r29, r27
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	09 94       	ijmp

00003346 <__epilogue_restores__>:
    3346:	2a 88       	ldd	r2, Y+18	; 0x12
    3348:	39 88       	ldd	r3, Y+17	; 0x11
    334a:	48 88       	ldd	r4, Y+16	; 0x10
    334c:	5f 84       	ldd	r5, Y+15	; 0x0f
    334e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3350:	7d 84       	ldd	r7, Y+13	; 0x0d
    3352:	8c 84       	ldd	r8, Y+12	; 0x0c
    3354:	9b 84       	ldd	r9, Y+11	; 0x0b
    3356:	aa 84       	ldd	r10, Y+10	; 0x0a
    3358:	b9 84       	ldd	r11, Y+9	; 0x09
    335a:	c8 84       	ldd	r12, Y+8	; 0x08
    335c:	df 80       	ldd	r13, Y+7	; 0x07
    335e:	ee 80       	ldd	r14, Y+6	; 0x06
    3360:	fd 80       	ldd	r15, Y+5	; 0x05
    3362:	0c 81       	ldd	r16, Y+4	; 0x04
    3364:	1b 81       	ldd	r17, Y+3	; 0x03
    3366:	aa 81       	ldd	r26, Y+2	; 0x02
    3368:	b9 81       	ldd	r27, Y+1	; 0x01
    336a:	ce 0f       	add	r28, r30
    336c:	d1 1d       	adc	r29, r1
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	ed 01       	movw	r28, r26
    337a:	08 95       	ret

0000337c <_exit>:
    337c:	f8 94       	cli

0000337e <__stop_program>:
    337e:	ff cf       	rjmp	.-2      	; 0x337e <__stop_program>
