
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  000045d2  00004666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a3  0080021a  0080021a  00004820  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000487c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000631f  00000000  00000000  00004ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000212f  00000000  00000000  0000b217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d8f  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef4  00000000  00000000  000110d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d9f  00000000  00000000  00011fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca1  00000000  00000000  00013d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  00016a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__vector_13>
      38:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	67 09       	sbc	r22, r7
      56:	6e 09       	sbc	r22, r14
      58:	71 09       	sbc	r23, r1
      5a:	77 09       	sbc	r23, r7
      5c:	7d 09       	sbc	r23, r13
      5e:	82 09       	sbc	r24, r2
      60:	88 09       	sbc	r24, r8
      62:	8f 09       	sbc	r24, r15
      64:	93 09       	sbc	r25, r3
      66:	9b 09       	sbc	r25, r11
      68:	ea 09       	sbc	r30, r10
      6a:	ea 09       	sbc	r30, r10
      6c:	ea 09       	sbc	r30, r10
      6e:	ea 09       	sbc	r30, r10
      70:	ea 09       	sbc	r30, r10
      72:	ea 09       	sbc	r30, r10
      74:	ea 09       	sbc	r30, r10
      76:	ea 09       	sbc	r30, r10
      78:	ea 09       	sbc	r30, r10
      7a:	ea 09       	sbc	r30, r10
      7c:	ea 09       	sbc	r30, r10
      7e:	ea 09       	sbc	r30, r10
      80:	ea 09       	sbc	r30, r10
      82:	ea 09       	sbc	r30, r10
      84:	ea 09       	sbc	r30, r10
      86:	ea 09       	sbc	r30, r10
      88:	ea 09       	sbc	r30, r10
      8a:	ea 09       	sbc	r30, r10
      8c:	ea 09       	sbc	r30, r10
      8e:	ea 09       	sbc	r30, r10
      90:	ea 09       	sbc	r30, r10
      92:	ea 09       	sbc	r30, r10
      94:	ea 09       	sbc	r30, r10
      96:	ea 09       	sbc	r30, r10
      98:	ea 09       	sbc	r30, r10
      9a:	ea 09       	sbc	r30, r10
      9c:	ea 09       	sbc	r30, r10
      9e:	ea 09       	sbc	r30, r10
      a0:	ea 09       	sbc	r30, r10
      a2:	ea 09       	sbc	r30, r10
      a4:	ea 09       	sbc	r30, r10
      a6:	ea 09       	sbc	r30, r10
      a8:	ea 09       	sbc	r30, r10
      aa:	ea 09       	sbc	r30, r10
      ac:	ea 09       	sbc	r30, r10
      ae:	ea 09       	sbc	r30, r10
      b0:	ea 09       	sbc	r30, r10
      b2:	ea 09       	sbc	r30, r10
      b4:	ea 09       	sbc	r30, r10
      b6:	ea 09       	sbc	r30, r10
      b8:	ea 09       	sbc	r30, r10
      ba:	ea 09       	sbc	r30, r10
      bc:	ea 09       	sbc	r30, r10
      be:	ea 09       	sbc	r30, r10
      c0:	ea 09       	sbc	r30, r10
      c2:	ea 09       	sbc	r30, r10
      c4:	ea 09       	sbc	r30, r10
      c6:	ea 09       	sbc	r30, r10
      c8:	ea 09       	sbc	r30, r10
      ca:	ea 09       	sbc	r30, r10
      cc:	ea 09       	sbc	r30, r10
      ce:	ea 09       	sbc	r30, r10
      d0:	ea 09       	sbc	r30, r10
      d2:	ea 09       	sbc	r30, r10
      d4:	ea 09       	sbc	r30, r10
      d6:	ea 09       	sbc	r30, r10
      d8:	ea 09       	sbc	r30, r10
      da:	ea 09       	sbc	r30, r10
      dc:	ea 09       	sbc	r30, r10
      de:	ea 09       	sbc	r30, r10
      e0:	ea 09       	sbc	r30, r10
      e2:	ea 09       	sbc	r30, r10
      e4:	ea 09       	sbc	r30, r10
      e6:	ea 09       	sbc	r30, r10
      e8:	ea 09       	sbc	r30, r10
      ea:	ea 09       	sbc	r30, r10
      ec:	ea 09       	sbc	r30, r10
      ee:	ea 09       	sbc	r30, r10
      f0:	ea 09       	sbc	r30, r10
      f2:	ea 09       	sbc	r30, r10
      f4:	ea 09       	sbc	r30, r10
      f6:	ea 09       	sbc	r30, r10
      f8:	ea 09       	sbc	r30, r10
      fa:	ea 09       	sbc	r30, r10
      fc:	ea 09       	sbc	r30, r10
      fe:	ea 09       	sbc	r30, r10
     100:	ea 09       	sbc	r30, r10
     102:	ea 09       	sbc	r30, r10
     104:	ea 09       	sbc	r30, r10
     106:	ea 09       	sbc	r30, r10
     108:	ea 09       	sbc	r30, r10
     10a:	ea 09       	sbc	r30, r10
     10c:	ea 09       	sbc	r30, r10
     10e:	ea 09       	sbc	r30, r10
     110:	ea 09       	sbc	r30, r10
     112:	ea 09       	sbc	r30, r10
     114:	ea 09       	sbc	r30, r10
     116:	a2 09       	sbc	r26, r2
     118:	a9 09       	sbc	r26, r9
     11a:	af 09       	sbc	r26, r15
     11c:	b4 09       	sbc	r27, r4
     11e:	ba 09       	sbc	r27, r10
     120:	c0 09       	sbc	r28, r0
     122:	ea 09       	sbc	r30, r10
     124:	ea 09       	sbc	r30, r10
     126:	ea 09       	sbc	r30, r10
     128:	ea 09       	sbc	r30, r10
     12a:	ea 09       	sbc	r30, r10
     12c:	d9 09       	sbc	r29, r9
     12e:	ea 09       	sbc	r30, r10
     130:	ea 09       	sbc	r30, r10
     132:	c8 09       	sbc	r28, r8
     134:	cd 09       	sbc	r28, r13
     136:	ea 09       	sbc	r30, r10
     138:	c5 09       	sbc	r28, r5
     13a:	d3 09       	sbc	r29, r3
     13c:	ea 09       	sbc	r30, r10
     13e:	ea 09       	sbc	r30, r10
     140:	ea 09       	sbc	r30, r10
     142:	ea 09       	sbc	r30, r10
     144:	ea 09       	sbc	r30, r10
     146:	ea 09       	sbc	r30, r10
     148:	ea 09       	sbc	r30, r10
     14a:	ea 09       	sbc	r30, r10
     14c:	ea 09       	sbc	r30, r10
     14e:	ea 09       	sbc	r30, r10
     150:	ea 09       	sbc	r30, r10
     152:	ea 09       	sbc	r30, r10
     154:	ea 09       	sbc	r30, r10
     156:	ea 09       	sbc	r30, r10
     158:	ea 09       	sbc	r30, r10
     15a:	ea 09       	sbc	r30, r10
     15c:	ea 09       	sbc	r30, r10
     15e:	ea 09       	sbc	r30, r10
     160:	ea 09       	sbc	r30, r10
     162:	ea 09       	sbc	r30, r10
     164:	ea 09       	sbc	r30, r10
     166:	ea 09       	sbc	r30, r10
     168:	ea 09       	sbc	r30, r10
     16a:	ea 09       	sbc	r30, r10
     16c:	ea 09       	sbc	r30, r10
     16e:	ea 09       	sbc	r30, r10
     170:	ea 09       	sbc	r30, r10
     172:	ea 09       	sbc	r30, r10
     174:	ea 09       	sbc	r30, r10
     176:	ea 09       	sbc	r30, r10
     178:	ea 09       	sbc	r30, r10
     17a:	ea 09       	sbc	r30, r10
     17c:	ea 09       	sbc	r30, r10
     17e:	ea 09       	sbc	r30, r10
     180:	ea 09       	sbc	r30, r10
     182:	ea 09       	sbc	r30, r10
     184:	ea 09       	sbc	r30, r10
     186:	ea 09       	sbc	r30, r10
     188:	ea 09       	sbc	r30, r10
     18a:	ea 09       	sbc	r30, r10
     18c:	ea 09       	sbc	r30, r10
     18e:	ea 09       	sbc	r30, r10
     190:	ea 09       	sbc	r30, r10
     192:	ea 09       	sbc	r30, r10
     194:	ea 09       	sbc	r30, r10
     196:	ea 09       	sbc	r30, r10
     198:	ea 09       	sbc	r30, r10
     19a:	ea 09       	sbc	r30, r10
     19c:	ea 09       	sbc	r30, r10
     19e:	ea 09       	sbc	r30, r10
     1a0:	ea 09       	sbc	r30, r10
     1a2:	ea 09       	sbc	r30, r10
     1a4:	ea 09       	sbc	r30, r10
     1a6:	ea 09       	sbc	r30, r10
     1a8:	ea 09       	sbc	r30, r10
     1aa:	ea 09       	sbc	r30, r10
     1ac:	ea 09       	sbc	r30, r10
     1ae:	ea 09       	sbc	r30, r10
     1b0:	ea 09       	sbc	r30, r10
     1b2:	ea 09       	sbc	r30, r10
     1b4:	ea 09       	sbc	r30, r10
     1b6:	ea 09       	sbc	r30, r10
     1b8:	ea 09       	sbc	r30, r10
     1ba:	ea 09       	sbc	r30, r10
     1bc:	ea 09       	sbc	r30, r10
     1be:	ea 09       	sbc	r30, r10
     1c0:	ea 09       	sbc	r30, r10
     1c2:	ea 09       	sbc	r30, r10
     1c4:	ea 09       	sbc	r30, r10
     1c6:	ea 09       	sbc	r30, r10
     1c8:	ea 09       	sbc	r30, r10
     1ca:	ea 09       	sbc	r30, r10
     1cc:	ea 09       	sbc	r30, r10
     1ce:	ea 09       	sbc	r30, r10
     1d0:	ea 09       	sbc	r30, r10
     1d2:	ea 09       	sbc	r30, r10
     1d4:	ea 09       	sbc	r30, r10
     1d6:	ea 09       	sbc	r30, r10
     1d8:	ea 09       	sbc	r30, r10
     1da:	ea 09       	sbc	r30, r10
     1dc:	ea 09       	sbc	r30, r10
     1de:	ea 09       	sbc	r30, r10
     1e0:	ea 09       	sbc	r30, r10
     1e2:	ea 09       	sbc	r30, r10
     1e4:	ea 09       	sbc	r30, r10
     1e6:	ea 09       	sbc	r30, r10
     1e8:	ea 09       	sbc	r30, r10
     1ea:	ea 09       	sbc	r30, r10
     1ec:	ea 09       	sbc	r30, r10
     1ee:	ea 09       	sbc	r30, r10
     1f0:	ea 09       	sbc	r30, r10
     1f2:	ea 09       	sbc	r30, r10
     1f4:	ea 09       	sbc	r30, r10
     1f6:	ea 09       	sbc	r30, r10
     1f8:	ea 09       	sbc	r30, r10
     1fa:	ea 09       	sbc	r30, r10
     1fc:	ea 09       	sbc	r30, r10
     1fe:	ea 09       	sbc	r30, r10
     200:	ea 09       	sbc	r30, r10
     202:	ea 09       	sbc	r30, r10
     204:	ea 09       	sbc	r30, r10
     206:	ea 09       	sbc	r30, r10
     208:	ea 09       	sbc	r30, r10
     20a:	ea 09       	sbc	r30, r10
     20c:	ea 09       	sbc	r30, r10
     20e:	ea 09       	sbc	r30, r10
     210:	ea 09       	sbc	r30, r10
     212:	ea 09       	sbc	r30, r10
     214:	ea 09       	sbc	r30, r10
     216:	ea 09       	sbc	r30, r10
     218:	ea 09       	sbc	r30, r10
     21a:	ea 09       	sbc	r30, r10
     21c:	ea 09       	sbc	r30, r10
     21e:	ea 09       	sbc	r30, r10
     220:	ea 09       	sbc	r30, r10
     222:	ea 09       	sbc	r30, r10
     224:	ea 09       	sbc	r30, r10
     226:	ea 09       	sbc	r30, r10
     228:	ea 09       	sbc	r30, r10
     22a:	ea 09       	sbc	r30, r10
     22c:	ea 09       	sbc	r30, r10
     22e:	ea 09       	sbc	r30, r10
     230:	ea 09       	sbc	r30, r10
     232:	ea 09       	sbc	r30, r10
     234:	ea 09       	sbc	r30, r10
     236:	ea 09       	sbc	r30, r10
     238:	ea 09       	sbc	r30, r10
     23a:	ea 09       	sbc	r30, r10
     23c:	ea 09       	sbc	r30, r10
     23e:	ea 09       	sbc	r30, r10
     240:	ea 09       	sbc	r30, r10
     242:	ea 09       	sbc	r30, r10
     244:	dd 09       	sbc	r29, r13
     246:	e9 09       	sbc	r30, r9
     248:	e7 09       	sbc	r30, r7
     24a:	e5 09       	sbc	r30, r5
     24c:	e3 09       	sbc	r30, r3
     24e:	e1 09       	sbc	r30, r1
     250:	df 09       	sbc	r29, r15
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <buzzer_process+0x32>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e2 ed       	ldi	r30, 0xD2	; 210
     3ea:	f5 e4       	ldi	r31, 0x45	; 69
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	aa 31       	cpi	r26, 0x1A	; 26
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	aa e1       	ldi	r26, 0x1A	; 26
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	ad 3b       	cpi	r26, 0xBD	; 189
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 31 02 	call	0x462	; 0x462 <main>
     40c:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	85 e9       	ldi	r24, 0x95	; 149
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 6d 22 	call	0x44da	; 0x44da <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     438:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     43a:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     43c:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     43e:	89 9a       	sbi	0x11, 1	; 17
     440:	08 95       	ret

00000442 <init_driver>:
void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     442:	62 e3       	ldi	r22, 0x32	; 50
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 73 18 	call	0x30e6	; 0x30e6 <timer0_init>
	init_display_drv();
     44a:	0e 94 1e 09 	call	0x123c	; 0x123c <init_display_drv>
	init_buttons();
     44e:	0e 94 37 05 	call	0xa6e	; 0xa6e <init_buttons>
	init_system();
     452:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <init_system>
	init_measure();
     456:	0e 94 19 10 	call	0x2032	; 0x2032 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     45a:	80 b7       	in	r24, 0x30	; 48
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	80 bf       	out	0x30, r24	; 48
     460:	08 95       	ret

00000462 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 dd 12 	call	0x25ba	; 0x25ba <servo_init>
	#endif
	init_pin();
     468:	0e 94 1c 02 	call	0x438	; 0x438 <init_pin>
	sei();
     46c:	78 94       	sei
	init_driver();
     46e:	0e 94 21 02 	call	0x442	; 0x442 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     472:	8b e8       	ldi	r24, 0x8B	; 139
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     47e:	0e 94 5f 07 	call	0xebe	; 0xebe <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     482:	0e 94 2b 11 	call	0x2256	; 0x2256 <measure_get_servo_calibration>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     48a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <disp_process>
		animation();
     48e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <animation>
		process_button();
     492:	0e 94 8d 04 	call	0x91a	; 0x91a <process_button>
		disp_fast_process();
     496:	0e 94 04 17 	call	0x2e08	; 0x2e08 <disp_fast_process>
		disp_very_fast_process();
     49a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <disp_very_fast_process>
		dcmotor_process(motor_value);
     49e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
     4a2:	0e 94 b1 08 	call	0x1162	; 0x1162 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4a6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
     4aa:	0e 94 c2 13 	call	0x2784	; 0x2784 <servo_process>
		menu_process();
     4ae:	0e 94 80 06 	call	0xd00	; 0xd00 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4b2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <error_event>
		error_led_blink();
     4b6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <error_led_blink>
		measure_process();
     4ba:	0e 94 37 10 	call	0x206e	; 0x206e <measure_process>
		accumulator_process();
     4be:	0e 94 82 02 	call	0x504	; 0x504 <accumulator_process>
		accum_led_process();
     4c2:	0e 94 3b 03 	call	0x676	; 0x676 <accum_led_process>
		buzzer_process();
     4c6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <buzzer_process>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <main+0x28>

000004cc <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 78 11 	call	0x22f0	; 0x22f0 <measure_get_filtered_value>
	#endif
    return voltage;
     4d2:	bc 01       	movw	r22, r24
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	86 0f       	add	r24, r22
     4de:	97 1f       	adc	r25, r23
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
     4ea:	26 e6       	ldi	r18, 0x66	; 102
     4ec:	36 e6       	ldi	r19, 0x66	; 102
     4ee:	46 eb       	ldi	r20, 0xB6	; 182
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	5a e3       	ldi	r21, 0x3A	; 58
     4fe:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
}
     502:	08 95       	ret

00000504 <accumulator_process>:

static float accum_voltage;

void accumulator_process(void)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     50c:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     510:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     514:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     518:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     51c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <accumulator_timer.1920>
     520:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <accumulator_timer.1920+0x1>
     524:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <accumulator_timer.1920+0x2>
     528:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <accumulator_timer.1920+0x3>
     52c:	84 17       	cp	r24, r20
     52e:	95 07       	cpc	r25, r21
     530:	a6 07       	cpc	r26, r22
     532:	b7 07       	cpc	r27, r23
     534:	08 f0       	brcs	.+2      	; 0x538 <accumulator_process+0x34>
     536:	9a c0       	rjmp	.+308    	; 0x66c <accumulator_process+0x168>
	{
		accum_voltage = accum_get_voltage();
     538:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
     53c:	6b 01       	movw	r12, r22
     53e:	7c 01       	movw	r14, r24
		if (power_supply_type == POWER_SUPPLY_24V) {
     540:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <power_supply_type>
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	09 f0       	breq	.+2      	; 0x54a <accumulator_process+0x46>
     548:	40 c0       	rjmp	.+128    	; 0x5ca <accumulator_process+0xc6>
			/* Dla akumulatora 24V */
			if (accum_voltage > ACCUMULATOR_HIGH_VOLTAGE_24V)
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 ee       	ldi	r20, 0xE0	; 224
     550:	51 e4       	ldi	r21, 0x41	; 65
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
     55a:	18 16       	cp	r1, r24
     55c:	1c f4       	brge	.+6      	; 0x564 <accumulator_process+0x60>
			{
				accumulator_state = ACCUM_HIGH_VOLTAGE;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_LOW_VOLTAGE_24V)
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 ea       	ldi	r20, 0xA0	; 160
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	c7 01       	movw	r24, r14
     56e:	b6 01       	movw	r22, r12
     570:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     574:	88 23       	and	r24, r24
     576:	1c f4       	brge	.+6      	; 0x57e <accumulator_process+0x7a>
			{
				accumulator_state =  ACCUM_LOW_VOLTAGE;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_VERY_LOW_VOLTAGE_24V)
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	48 e9       	ldi	r20, 0x98	; 152
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	c7 01       	movw	r24, r14
     588:	b6 01       	movw	r22, r12
     58a:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     58e:	88 23       	and	r24, r24
     590:	1c f4       	brge	.+6      	; 0x598 <accumulator_process+0x94>
			{
				accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_HIGH_VOLTAGE_24V && accum_voltage > ACCUMULATOR_LOW_VOLTAGE_24V)
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 ee       	ldi	r20, 0xE0	; 224
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     5a8:	88 23       	and	r24, r24
     5aa:	0c f0       	brlt	.+2      	; 0x5ae <accumulator_process+0xaa>
     5ac:	4b c0       	rjmp	.+150    	; 0x644 <accumulator_process+0x140>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 ea       	ldi	r20, 0xA0	; 160
     5b4:	51 e4       	ldi	r21, 0x41	; 65
     5b6:	c7 01       	movw	r24, r14
     5b8:	b6 01       	movw	r22, r12
     5ba:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
     5be:	18 16       	cp	r1, r24
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <accumulator_process+0xc0>
     5c2:	40 c0       	rjmp	.+128    	; 0x644 <accumulator_process+0x140>
			{
				accumulator_state = ACCUM_NORMAL_VOLTAGE;
     5c4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <accumulator_state>
     5c8:	3d c0       	rjmp	.+122    	; 0x644 <accumulator_process+0x140>
			}
		}
		else {
			/* Dla akumulatora 12V */
			if (accum_voltage > ACCUMULATOR_HIGH_VOLTAGE)
     5ca:	2d ec       	ldi	r18, 0xCD	; 205
     5cc:	3c ec       	ldi	r19, 0xCC	; 204
     5ce:	44 e8       	ldi	r20, 0x84	; 132
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
     5da:	18 16       	cp	r1, r24
     5dc:	1c f4       	brge	.+6      	; 0x5e4 <accumulator_process+0xe0>
			{
				accumulator_state = ACCUM_HIGH_VOLTAGE;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_LOW_VOLTAGE)
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e3       	ldi	r20, 0x30	; 48
     5ea:	51 e4       	ldi	r21, 0x41	; 65
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	1c f4       	brge	.+6      	; 0x5fe <accumulator_process+0xfa>
			{
				accumulator_state =  ACCUM_LOW_VOLTAGE;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_VERY_LOW_VOLTAGE)
     5fe:	23 e3       	ldi	r18, 0x33	; 51
     600:	33 e3       	ldi	r19, 0x33	; 51
     602:	4b e1       	ldi	r20, 0x1B	; 27
     604:	51 e4       	ldi	r21, 0x41	; 65
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	1c f4       	brge	.+6      	; 0x618 <accumulator_process+0x114>
			{
				accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <accumulator_state>
			}
			
			if (accum_voltage < ACCUMULATOR_HIGH_VOLTAGE && accum_voltage > ACCUMULATOR_LOW_VOLTAGE)
     618:	2d ec       	ldi	r18, 0xCD	; 205
     61a:	3c ec       	ldi	r19, 0xCC	; 204
     61c:	44 e8       	ldi	r20, 0x84	; 132
     61e:	51 e4       	ldi	r21, 0x41	; 65
     620:	c7 01       	movw	r24, r14
     622:	b6 01       	movw	r22, r12
     624:	0e 94 ef 19 	call	0x33de	; 0x33de <__cmpsf2>
     628:	88 23       	and	r24, r24
     62a:	64 f4       	brge	.+24     	; 0x644 <accumulator_process+0x140>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e3       	ldi	r20, 0x30	; 48
     632:	51 e4       	ldi	r21, 0x41	; 65
     634:	c7 01       	movw	r24, r14
     636:	b6 01       	movw	r22, r12
     638:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
     63c:	18 16       	cp	r1, r24
     63e:	14 f4       	brge	.+4      	; 0x644 <accumulator_process+0x140>
			{
				accumulator_state = ACCUM_NORMAL_VOLTAGE;
     640:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <accumulator_state>
			}
		}
		
		accumulator_timer = mktime.ms + 100;
     644:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     648:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     64c:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     650:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     654:	8c 59       	subi	r24, 0x9C	; 156
     656:	9f 4f       	sbci	r25, 0xFF	; 255
     658:	af 4f       	sbci	r26, 0xFF	; 255
     65a:	bf 4f       	sbci	r27, 0xFF	; 255
     65c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <accumulator_timer.1920>
     660:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <accumulator_timer.1920+0x1>
     664:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <accumulator_timer.1920+0x2>
     668:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <accumulator_timer.1920+0x3>
	}
}
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	08 95       	ret

00000676 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     676:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     67a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     67e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     682:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     686:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     68a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     68e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     692:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     696:	84 17       	cp	r24, r20
     698:	95 07       	cpc	r25, r21
     69a:	a6 07       	cpc	r26, r22
     69c:	b7 07       	cpc	r27, r23
     69e:	08 f0       	brcs	.+2      	; 0x6a2 <accum_led_process+0x2c>
     6a0:	86 c0       	rjmp	.+268    	; 0x7ae <accum_led_process+0x138>
	{
        switch (accumulator_state)
     6a2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <accumulator_state>
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	e9 f0       	breq	.+58     	; 0x6e4 <accum_led_process+0x6e>
     6aa:	30 f0       	brcs	.+12     	; 0x6b8 <accum_led_process+0x42>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	99 f1       	breq	.+102    	; 0x716 <accum_led_process+0xa0>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <accum_led_process+0x40>
     6b4:	67 c0       	rjmp	.+206    	; 0x784 <accum_led_process+0x10e>
     6b6:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     6b8:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     6ba:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     6be:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     6c2:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     6c6:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     6ca:	88 53       	subi	r24, 0x38	; 56
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	af 4f       	sbci	r26, 0xFF	; 255
     6d0:	bf 4f       	sbci	r27, 0xFF	; 255
     6d2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     6d6:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     6da:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     6de:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
            break;
     6e2:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     6e4:	98 b3       	in	r25, 0x18	; 24
     6e6:	80 e2       	ldi	r24, 0x20	; 32
     6e8:	89 27       	eor	r24, r25
     6ea:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     6ec:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     6f0:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     6f4:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     6f8:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     6fc:	86 50       	subi	r24, 0x06	; 6
     6fe:	9f 4f       	sbci	r25, 0xFF	; 255
     700:	af 4f       	sbci	r26, 0xFF	; 255
     702:	bf 4f       	sbci	r27, 0xFF	; 255
     704:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     708:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     70c:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     710:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
            break;
     714:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     716:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     71a:	81 11       	cpse	r24, r1
     71c:	19 c0       	rjmp	.+50     	; 0x750 <accum_led_process+0xda>
            {
                state_led = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
                LED_ACUM_ON;
     724:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     726:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     72a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     72e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     732:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     736:	8c 50       	subi	r24, 0x0C	; 12
     738:	9e 4f       	sbci	r25, 0xFE	; 254
     73a:	af 4f       	sbci	r26, 0xFF	; 255
     73c:	bf 4f       	sbci	r27, 0xFF	; 255
     73e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     742:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     746:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     74a:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     74e:	08 95       	ret
            }
            else if (state_led == 1)
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	69 f5       	brne	.+90     	; 0x7ae <accum_led_process+0x138>
            {
                state_led = 0;
     754:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
                LED_ACUM_OFF;
     758:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     75a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     75e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     762:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     766:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     76a:	84 52       	subi	r24, 0x24	; 36
     76c:	9a 4f       	sbci	r25, 0xFA	; 250
     76e:	af 4f       	sbci	r26, 0xFF	; 255
     770:	bf 4f       	sbci	r27, 0xFF	; 255
     772:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     776:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     77a:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     77e:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     782:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     784:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     786:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     78a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     78e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     792:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     796:	88 51       	subi	r24, 0x18	; 24
     798:	9c 4f       	sbci	r25, 0xFC	; 252
     79a:	af 4f       	sbci	r26, 0xFF	; 255
     79c:	bf 4f       	sbci	r27, 0xFF	; 255
     79e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     7a2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     7a6:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     7aa:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     7ae:	08 95       	ret

000007b0 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     7b0:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     7b2:	97 b1       	in	r25, 0x07	; 7
     7b4:	98 7f       	andi	r25, 0xF8	; 248
     7b6:	87 70       	andi	r24, 0x07	; 7
     7b8:	89 2b       	or	r24, r25
     7ba:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     7bc:	37 9a       	sbi	0x06, 7	; 6
     7be:	08 95       	ret

000007c0 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     7c0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     7c2:	36 99       	sbic	0x06, 6	; 6
     7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     7ca:	08 95       	ret

000007cc <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     7cc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <adc_setchannel>
	return adc_readsel();
     7d0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <adc_readsel>
}
     7d4:	08 95       	ret

000007d6 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     7d6:	dc 01       	movw	r26, r24
     7d8:	16 96       	adiw	r26, 0x06	; 6
     7da:	ed 91       	ld	r30, X+
     7dc:	fc 91       	ld	r31, X
     7de:	17 97       	sbiw	r26, 0x07	; 7
     7e0:	20 81       	ld	r18, Z
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	18 96       	adiw	r26, 0x08	; 8
     7e8:	0c 90       	ld	r0, X
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <read_button+0x1a>
     7ec:	f5 95       	asr	r31
     7ee:	e7 95       	ror	r30
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <read_button+0x16>
     7f4:	cf 01       	movw	r24, r30
     7f6:	81 70       	andi	r24, 0x01	; 1
     7f8:	08 95       	ret

000007fa <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     7fa:	e2 e4       	ldi	r30, 0x42	; 66
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     804:	14 86       	std	Z+12, r1	; 0x0c
     806:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     808:	12 86       	std	Z+10, r1	; 0x0a
     80a:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     80c:	16 86       	std	Z+14, r1	; 0x0e
     80e:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     810:	26 e3       	ldi	r18, 0x36	; 54
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	37 83       	std	Z+7, r19	; 0x07
     816:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     81c:	e5 e1       	ldi	r30, 0x15	; 21
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     822:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     824:	14 86       	std	Z+12, r1	; 0x0c
     826:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     828:	12 86       	std	Z+10, r1	; 0x0a
     82a:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     82c:	16 86       	std	Z+14, r1	; 0x0e
     82e:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     830:	37 83       	std	Z+7, r19	; 0x07
     832:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     834:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     836:	e4 e2       	ldi	r30, 0x24	; 36
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     83c:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     83e:	14 86       	std	Z+12, r1	; 0x0c
     840:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     842:	12 86       	std	Z+10, r1	; 0x0a
     844:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     846:	16 86       	std	Z+14, r1	; 0x0e
     848:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     84a:	37 83       	std	Z+7, r19	; 0x07
     84c:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     852:	e2 e0       	ldi	r30, 0x02	; 2
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     858:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     85a:	14 86       	std	Z+12, r1	; 0x0c
     85c:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     85e:	12 86       	std	Z+10, r1	; 0x0a
     860:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     862:	16 86       	std	Z+14, r1	; 0x0e
     864:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     866:	40 e3       	ldi	r20, 0x30	; 48
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	57 83       	std	Z+7, r21	; 0x07
     86c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     872:	e3 ef       	ldi	r30, 0xF3	; 243
     874:	f3 e0       	ldi	r31, 0x03	; 3
     876:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     878:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     87a:	14 86       	std	Z+12, r1	; 0x0c
     87c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     87e:	12 86       	std	Z+10, r1	; 0x0a
     880:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     882:	16 86       	std	Z+14, r1	; 0x0e
     884:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     886:	37 83       	std	Z+7, r19	; 0x07
     888:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     88a:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     88c:	e3 e3       	ldi	r30, 0x33	; 51
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     892:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     894:	14 86       	std	Z+12, r1	; 0x0c
     896:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     898:	12 86       	std	Z+10, r1	; 0x0a
     89a:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     89c:	16 86       	std	Z+14, r1	; 0x0e
     89e:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     8a0:	69 e3       	ldi	r22, 0x39	; 57
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	77 83       	std	Z+7, r23	; 0x07
     8a6:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     8a8:	a4 e0       	ldi	r26, 0x04	; 4
     8aa:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     8ac:	e1 e5       	ldi	r30, 0x51	; 81
     8ae:	f4 e0       	ldi	r31, 0x04	; 4
     8b0:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     8b2:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     8b4:	14 86       	std	Z+12, r1	; 0x0c
     8b6:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     8b8:	12 86       	std	Z+10, r1	; 0x0a
     8ba:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     8bc:	16 86       	std	Z+14, r1	; 0x0e
     8be:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     8c0:	43 e3       	ldi	r20, 0x33	; 51
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	57 83       	std	Z+7, r21	; 0x07
     8c6:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     8c8:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     8ca:	e0 e6       	ldi	r30, 0x60	; 96
     8cc:	f4 e0       	ldi	r31, 0x04	; 4
     8ce:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     8d0:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     8d2:	14 86       	std	Z+12, r1	; 0x0c
     8d4:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     8d6:	12 86       	std	Z+10, r1	; 0x0a
     8d8:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     8da:	16 86       	std	Z+14, r1	; 0x0e
     8dc:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     8de:	37 83       	std	Z+7, r19	; 0x07
     8e0:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     8e2:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     8e4:	e5 ed       	ldi	r30, 0xD5	; 213
     8e6:	f3 e0       	ldi	r31, 0x03	; 3
     8e8:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     8ea:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     8ec:	14 86       	std	Z+12, r1	; 0x0c
     8ee:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     8f0:	12 86       	std	Z+10, r1	; 0x0a
     8f2:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     8f4:	16 86       	std	Z+14, r1	; 0x0e
     8f6:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     8f8:	77 83       	std	Z+7, r23	; 0x07
     8fa:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     8fc:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     8fe:	e4 ee       	ldi	r30, 0xE4	; 228
     900:	f3 e0       	ldi	r31, 0x03	; 3
     902:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     904:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     906:	14 86       	std	Z+12, r1	; 0x0c
     908:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     90a:	12 86       	std	Z+10, r1	; 0x0a
     90c:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     90e:	16 86       	std	Z+14, r1	; 0x0e
     910:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     912:	57 83       	std	Z+7, r21	; 0x07
     914:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     916:	10 86       	std	Z+8, r1	; 0x08
     918:	08 95       	ret

0000091a <process_button>:
}

void process_button(void)
{
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     928:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     92c:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     930:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     934:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     938:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <timer_button>
     93c:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <timer_button+0x1>
     940:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <timer_button+0x2>
     944:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <timer_button+0x3>
     948:	84 17       	cp	r24, r20
     94a:	95 07       	cpc	r25, r21
     94c:	a6 07       	cpc	r26, r22
     94e:	b7 07       	cpc	r27, r23
     950:	08 f0       	brcs	.+2      	; 0x954 <process_button+0x3a>
     952:	85 c0       	rjmp	.+266    	; 0xa5e <process_button+0x144>
	{
		timer_button = mktime.ms + 20;
     954:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     958:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     95c:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     960:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     964:	44 96       	adiw	r24, 0x14	; 20
     966:	a1 1d       	adc	r26, r1
     968:	b1 1d       	adc	r27, r1
     96a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <timer_button>
     96e:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <timer_button+0x1>
     972:	a0 93 13 04 	sts	0x0413, r26	; 0x800413 <timer_button+0x2>
     976:	b0 93 14 04 	sts	0x0414, r27	; 0x800414 <timer_button+0x3>
     97a:	c0 e6       	ldi	r28, 0x60	; 96
     97c:	d0 e0       	ldi	r29, 0x00	; 0
     97e:	0f 2e       	mov	r0, r31
     980:	f4 e7       	ldi	r31, 0x74	; 116
     982:	ef 2e       	mov	r14, r31
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     98a:	dd 24       	eor	r13, r13
     98c:	d3 94       	inc	r13
     98e:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     990:	88 81       	ld	r24, Y
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <read_button>
			if(red_val != but_tab[i]->value)
     998:	e8 81       	ld	r30, Y
     99a:	f9 81       	ldd	r31, Y+1	; 0x01
     99c:	95 81       	ldd	r25, Z+5	; 0x05
     99e:	89 17       	cp	r24, r25
     9a0:	e1 f0       	breq	.+56     	; 0x9da <process_button+0xc0>
			{
				but_tab[i]->value = red_val;
     9a2:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	61 f4       	brne	.+24     	; 0x9c0 <process_button+0xa6>
     9a8:	88 81       	ld	r24, Y
     9aa:	99 81       	ldd	r25, Y+1	; 0x01
     9ac:	dc 01       	movw	r26, r24
     9ae:	19 96       	adiw	r26, 0x09	; 9
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	1a 97       	sbiw	r26, 0x0a	; 10
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f4       	brne	.+2      	; 0x9bc <process_button+0xa2>
     9ba:	41 c0       	rjmp	.+130    	; 0xa3e <process_button+0x124>
				but_tab[i]->rise_callback(but_tab[i]);
     9bc:	09 95       	icall
     9be:	3f c0       	rjmp	.+126    	; 0xa3e <process_button+0x124>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     9c0:	81 11       	cpse	r24, r1
     9c2:	3d c0       	rjmp	.+122    	; 0xa3e <process_button+0x124>
     9c4:	88 81       	ld	r24, Y
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
     9c8:	dc 01       	movw	r26, r24
     9ca:	1b 96       	adiw	r26, 0x0b	; 11
     9cc:	ed 91       	ld	r30, X+
     9ce:	fc 91       	ld	r31, X
     9d0:	1c 97       	sbiw	r26, 0x0c	; 12
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	21 f0       	breq	.+8      	; 0x9de <process_button+0xc4>
				but_tab[i]->fall_callback(but_tab[i]);
     9d6:	09 95       	icall
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <process_button+0xc4>
			}
			//timer
			if (red_val == 0)
     9da:	81 11       	cpse	r24, r1
     9dc:	30 c0       	rjmp	.+96     	; 0xa3e <process_button+0x124>
			{
				but_tab[i]->tim_cnt++;
     9de:	d8 01       	movw	r26, r16
     9e0:	ed 91       	ld	r30, X+
     9e2:	fc 91       	ld	r31, X
     9e4:	80 81       	ld	r24, Z
     9e6:	91 81       	ldd	r25, Z+1	; 0x01
     9e8:	a2 81       	ldd	r26, Z+2	; 0x02
     9ea:	b3 81       	ldd	r27, Z+3	; 0x03
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	a1 1d       	adc	r26, r1
     9f0:	b1 1d       	adc	r27, r1
     9f2:	80 83       	st	Z, r24
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	a2 83       	std	Z+2, r26	; 0x02
     9f8:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     9fa:	d8 01       	movw	r26, r16
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	a2 81       	ldd	r26, Z+2	; 0x02
     a06:	b3 81       	ldd	r27, Z+3	; 0x03
     a08:	88 97       	sbiw	r24, 0x28	; 40
     a0a:	a1 05       	cpc	r26, r1
     a0c:	b1 05       	cpc	r27, r1
     a0e:	10 f1       	brcs	.+68     	; 0xa54 <process_button+0x13a>
     a10:	84 81       	ldd	r24, Z+4	; 0x04
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	f9 f0       	breq	.+62     	; 0xa54 <process_button+0x13a>
				{
					if (but_tab[i]->timer_callback != 0)
     a16:	05 84       	ldd	r0, Z+13	; 0x0d
     a18:	f6 85       	ldd	r31, Z+14	; 0x0e
     a1a:	e0 2d       	mov	r30, r0
     a1c:	30 97       	sbiw	r30, 0x00	; 0
     a1e:	19 f0       	breq	.+6      	; 0xa26 <process_button+0x10c>
					but_tab[i]->timer_callback(&button1);
     a20:	82 e4       	ldi	r24, 0x42	; 66
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     a26:	d8 01       	movw	r26, r16
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	10 82       	st	Z, r1
     a30:	11 82       	std	Z+1, r1	; 0x01
     a32:	12 82       	std	Z+2, r1	; 0x02
     a34:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	d4 82       	std	Z+4, r13	; 0x04
     a3c:	0b c0       	rjmp	.+22     	; 0xa54 <process_button+0x13a>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     a3e:	d8 01       	movw	r26, r16
     a40:	ed 91       	ld	r30, X+
     a42:	fc 91       	ld	r31, X
     a44:	11 97       	sbiw	r26, 0x01	; 1
     a46:	10 82       	st	Z, r1
     a48:	11 82       	std	Z+1, r1	; 0x01
     a4a:	12 82       	std	Z+2, r1	; 0x02
     a4c:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     a4e:	ed 91       	ld	r30, X+
     a50:	fc 91       	ld	r31, X
     a52:	14 82       	std	Z+4, r1	; 0x04
     a54:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     a56:	ce 15       	cp	r28, r14
     a58:	df 05       	cpc	r29, r15
     a5a:	09 f0       	breq	.+2      	; 0xa5e <process_button+0x144>
     a5c:	98 cf       	rjmp	.-208    	; 0x98e <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	08 95       	ret

00000a6e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     a6e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     a72:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     a74:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     a76:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     a78:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     a7a:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     a7c:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     a7e:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     a80:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     a82:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     a84:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     a86:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     a88:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     a8a:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     a8c:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     a8e:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     a90:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     a92:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     a94:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     a96:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     a98:	a8 9a       	sbi	0x15, 0	; 21
     a9a:	08 95       	ret

00000a9c <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     a9c:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     aa0:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     aa4:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     aa8:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     aac:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     ab0:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     ab4:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     ab8:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     abc:	84 17       	cp	r24, r20
     abe:	95 07       	cpc	r25, r21
     ac0:	a6 07       	cpc	r26, r22
     ac2:	b7 07       	cpc	r27, r23
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <buzzer_process+0x2c>
     ac6:	5f c0       	rjmp	.+190    	; 0xb86 <buzzer_process+0xea>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER))
     ac8:	86 e0       	ldi	r24, 0x06	; 6
     aca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
     ace:	88 23       	and	r24, r24
     ad0:	09 f4       	brne	.+2      	; 0xad4 <buzzer_process+0x38>
     ad2:	59 c0       	rjmp	.+178    	; 0xb86 <buzzer_process+0xea>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     ad4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     ad8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     adc:	95 ff       	sbrs	r25, 5
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <buzzer_process+0xb2>
     ae0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_state>
     ae4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_state+0x1>
     ae8:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_state+0x2>
     aec:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_state+0x3>
     af0:	89 2b       	or	r24, r25
     af2:	8a 2b       	or	r24, r26
     af4:	8b 2b       	or	r24, r27
     af6:	59 f5       	brne	.+86     	; 0xb4e <buzzer_process+0xb2>
			{
				ON_BUZZER;
     af8:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     afa:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     afe:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     b02:	9f 7d       	andi	r25, 0xDF	; 223
     b04:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
     b08:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				buzzer_state = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_state>
     b18:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_state+0x1>
     b1c:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <buzzer_state+0x2>
     b20:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 100;
     b24:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     b28:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     b2c:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     b30:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     b34:	8c 59       	subi	r24, 0x9C	; 156
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	af 4f       	sbci	r26, 0xFF	; 255
     b3a:	bf 4f       	sbci	r27, 0xFF	; 255
     b3c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     b40:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     b44:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     b48:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     b4c:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     b4e:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     b50:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buzzer_state>
     b54:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <buzzer_state+0x1>
     b58:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <buzzer_state+0x2>
     b5c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 50;
     b60:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     b64:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     b68:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     b6c:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     b70:	c2 96       	adiw	r24, 0x32	; 50
     b72:	a1 1d       	adc	r26, r1
     b74:	b1 1d       	adc	r27, r1
     b76:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     b7a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     b7e:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     b82:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     b86:	08 95       	ret

00000b88 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     b88:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     b8a:	c0 98       	cbi	0x18, 0	; 24
     b8c:	08 95       	ret

00000b8e <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     b8e:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     b92:	88 23       	and	r24, r24
     b94:	19 f0       	breq	.+6      	; 0xb9c <button_1_menu+0xe>
		configured_parameter--;
     b96:	81 50       	subi	r24, 0x01	; 1
     b98:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
     b9c:	08 95       	ret

00000b9e <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     b9e:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     ba2:	89 30       	cpi	r24, 0x09	; 9
     ba4:	18 f4       	brcc	.+6      	; 0xbac <button_2_menu+0xe>
		configured_parameter++;
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
     bac:	08 95       	ret

00000bae <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     bae:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	fc 01       	movw	r30, r24
     bb6:	eb 58       	subi	r30, 0x8B	; 139
     bb8:	fb 4f       	sbci	r31, 0xFB	; 251
     bba:	20 81       	ld	r18, Z
     bbc:	22 23       	and	r18, r18
     bbe:	29 f0       	breq	.+10     	; 0xbca <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     bc0:	fc 01       	movw	r30, r24
     bc2:	eb 58       	subi	r30, 0x8B	; 139
     bc4:	fb 4f       	sbci	r31, 0xFB	; 251
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	20 83       	st	Z, r18
     bca:	08 95       	ret

00000bcc <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     bcc:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	eb 58       	subi	r30, 0x8B	; 139
     bd6:	fb 4f       	sbci	r31, 0xFB	; 251
     bd8:	20 81       	ld	r18, Z
     bda:	fc 01       	movw	r30, r24
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	ec 58       	subi	r30, 0x8C	; 140
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	30 81       	ld	r19, Z
     be6:	23 17       	cp	r18, r19
     be8:	28 f4       	brcc	.+10     	; 0xbf4 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     bea:	fc 01       	movw	r30, r24
     bec:	eb 58       	subi	r30, 0x8B	; 139
     bee:	fb 4f       	sbci	r31, 0xFB	; 251
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	20 83       	st	Z, r18
     bf4:	08 95       	ret

00000bf6 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     bf6:	a5 e7       	ldi	r26, 0x75	; 117
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e7       	ldi	r30, 0x75	; 117
     bfc:	f4 e0       	ldi	r31, 0x04	; 4
     bfe:	2f e7       	ldi	r18, 0x7F	; 127
     c00:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     c02:	8c 91       	ld	r24, X
     c04:	81 93       	st	Z+, r24
     c06:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     c08:	e2 17       	cp	r30, r18
     c0a:	f3 07       	cpc	r31, r19
     c0c:	d1 f7       	brne	.-12     	; 0xc02 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     c0e:	08 95       	ret

00000c10 <enter_to_menu>:
	return 0;
}

static void enter_to_menu(menuState_t state)
{
	dark_menu_state = state;
     c10:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     c14:	87 ec       	ldi	r24, 0xC7	; 199
     c16:	95 e0       	ldi	r25, 0x05	; 5
     c18:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <button1+0xc>
     c1c:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <button1+0xb>
	button2.fall_callback = button_2_menu;
     c20:	8f ec       	ldi	r24, 0xCF	; 207
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <button2+0xc>
     c28:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <button2+0xb>
	button3.fall_callback = button_3_menu;
     c2c:	83 e3       	ldi	r24, 0x33	; 51
     c2e:	96 e0       	ldi	r25, 0x06	; 6
     c30:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
     c34:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
	button5.fall_callback = button_5_menu;
     c38:	87 ed       	ldi	r24, 0xD7	; 215
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <button5+0xc>
     c40:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <button5+0xb>
	button6.fall_callback = button_6_menu;
     c44:	86 ee       	ldi	r24, 0xE6	; 230
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <button6+0xc>
     c4c:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <button6+0xb>
	button7.fall_callback = button_7_menu;
     c50:	8b ef       	ldi	r24, 0xFB	; 251
     c52:	95 e0       	ldi	r25, 0x05	; 5
     c54:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
     c58:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     c5c:	67 e0       	ldi	r22, 0x07	; 7
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
     c64:	08 95       	ret

00000c66 <button_3_menu>:

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     c66:	65 e7       	ldi	r22, 0x75	; 117
     c68:	74 e0       	ldi	r23, 0x04	; 4
     c6a:	84 e0       	ldi	r24, 0x04	; 4
     c6c:	0e 94 cd 11 	call	0x239a	; 0x239a <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     c76:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
	LED_MOTOR_OFF;
     c7a:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     c7c:	96 98       	cbi	0x12, 6	; 18
     c7e:	08 95       	ret

00000c80 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     c80:	cf 93       	push	r28
	pass[pass_len++] = number;
     c82:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <pass_len>
     c86:	c1 e0       	ldi	r28, 0x01	; 1
     c88:	ce 0f       	add	r28, r30
     c8a:	c0 93 80 04 	sts	0x0480, r28	; 0x800480 <pass_len>
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	e1 59       	subi	r30, 0x91	; 145
     c92:	fb 4f       	sbci	r31, 0xFB	; 251
     c94:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     c96:	4c 2f       	mov	r20, r28
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	67 ec       	ldi	r22, 0xC7	; 199
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	8f e6       	ldi	r24, 0x6F	; 111
     ca0:	94 e0       	ldi	r25, 0x04	; 4
     ca2:	0e 94 19 22 	call	0x4432	; 0x4432 <memcmp>
     ca6:	89 2b       	or	r24, r25
     ca8:	51 f0       	breq	.+20     	; 0xcbe <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     caa:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pass_len>
	memset(pass, 0, sizeof(pass));
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	ef e6       	ldi	r30, 0x6F	; 111
     cb2:	f4 e0       	ldi	r31, 0x04	; 4
     cb4:	df 01       	movw	r26, r30
     cb6:	1d 92       	st	X+, r1
     cb8:	8a 95       	dec	r24
     cba:	e9 f7       	brne	.-6      	; 0xcb6 <pass_add_number+0x36>
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <pass_add_number+0x48>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     cbe:	c6 30       	cpi	r28, 0x06	; 6
     cc0:	19 f4       	brne	.+6      	; 0xcc8 <pass_add_number+0x48>
		//debug_msg("enter_to_menu\n");
		enter_to_menu(MENU_PARAMETERS);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 08 06 	call	0xc10	; 0xc10 <enter_to_menu>
	}
}
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     cd2:	08 95       	ret

00000cd4 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     cda:	08 95       	ret

00000cdc <button_5_number>:
	pass_add_number(2);
}

static void button_5_number(void *pv)
{
	pass_add_number(3);
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     ce2:	08 95       	ret

00000ce4 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     cea:	08 95       	ret

00000cec <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     cf2:	08 95       	ret

00000cf4 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 40 06 	call	0xc80	; 0xc80 <pass_add_number>
     cfa:	08 95       	ret

00000cfc <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	08 95       	ret

00000d00 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state > MENU_PASSWORD)
     d00:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     d04:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     d08:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     d0c:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     d10:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <menu_timer.2286>
     d14:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <menu_timer.2286+0x1>
     d18:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <menu_timer.2286+0x2>
     d1c:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <menu_timer.2286+0x3>
     d20:	84 17       	cp	r24, r20
     d22:	95 07       	cpc	r25, r21
     d24:	a6 07       	cpc	r26, r22
     d26:	b7 07       	cpc	r27, r23
     d28:	08 f0       	brcs	.+2      	; 0xd2c <menu_process+0x2c>
     d2a:	90 c0       	rjmp	.+288    	; 0xe4c <menu_process+0x14c>
     d2c:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <dark_menu_state>
     d30:	88 23       	and	r24, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <menu_process+0x36>
     d34:	8b c0       	rjmp	.+278    	; 0xe4c <menu_process+0x14c>
	{
		menu_timer = mktime.ms + 250;
     d36:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     d3a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     d3e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     d42:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     d46:	46 50       	subi	r20, 0x06	; 6
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	6f 4f       	sbci	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <menu_timer.2286>
     d52:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <menu_timer.2286+0x1>
     d56:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <menu_timer.2286+0x2>
     d5a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <menu_timer.2286+0x3>
		if (dark_menu_state == MENU_SERVO)
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	39 f4       	brne	.+14     	; 0xd70 <menu_process+0x70>
		{
			if (configured_parameter < MENU_CLOSE_SERVO_REGULATION)
				configured_parameter = MENU_CLOSE_SERVO_REGULATION;
			if (configured_parameter > MENU_OPEN_SERVO_REGULATION)
     d62:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	18 f0       	brcs	.+6      	; 0xd70 <menu_process+0x70>
				configured_parameter = MENU_OPEN_SERVO_REGULATION;	
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
		}
		if (segment1.state == SEG_MENU)
     d70:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     d74:	87 30       	cpi	r24, 0x07	; 7
     d76:	31 f4       	brne	.+12     	; 0xd84 <menu_process+0x84>
			disp_set_number(&segment1, configured_parameter);
     d78:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <configured_parameter>
     d7c:	81 e9       	ldi	r24, 0x91	; 145
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
		if (segment2.state == SEG_MENU)
     d84:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     d88:	87 30       	cpi	r24, 0x07	; 7
     d8a:	51 f4       	brne	.+20     	; 0xda0 <menu_process+0xa0>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     d8c:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <configured_parameter>
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	eb 58       	subi	r30, 0x8B	; 139
     d94:	fb 4f       	sbci	r31, 0xFB	; 251
     d96:	60 81       	ld	r22, Z
     d98:	8c e8       	ldi	r24, 0x8C	; 140
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     da0:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     da4:	88 30       	cpi	r24, 0x08	; 8
     da6:	49 f5       	brne	.+82     	; 0xdfa <menu_process+0xfa>
     da8:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     dac:	88 30       	cpi	r24, 0x08	; 8
     dae:	29 f5       	brne	.+74     	; 0xdfa <menu_process+0xfa>
		{
			menu_timer = 1000 + mktime.ms;
     db0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     db4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     db8:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     dbc:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     dc0:	88 51       	subi	r24, 0x18	; 24
     dc2:	9c 4f       	sbci	r25, 0xFC	; 252
     dc4:	af 4f       	sbci	r26, 0xFF	; 255
     dc6:	bf 4f       	sbci	r27, 0xFF	; 255
     dc8:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <menu_timer.2286>
     dcc:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <menu_timer.2286+0x1>
     dd0:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <menu_timer.2286+0x2>
     dd4:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <menu_timer.2286+0x3>
			DispD2.value = 's';
     dd8:	83 e7       	ldi	r24, 0x73	; 115
     dda:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'a';
     dde:	81 e6       	ldi	r24, 0x61	; 97
     de0:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
     de4:	80 e7       	ldi	r24, 0x70	; 112
     de6:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			DispD4.value = 0;
     dea:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <DispD4>
			segment1.state = SEG_MENU_OFF;
     dee:	8a e0       	ldi	r24, 0x0A	; 10
     df0:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     df4:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
			
			return;
     df8:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     dfa:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     dfe:	8a 30       	cpi	r24, 0x0A	; 10
     e00:	51 f4       	brne	.+20     	; 0xe16 <menu_process+0x116>
     e02:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     e06:	8a 30       	cpi	r24, 0x0A	; 10
     e08:	31 f4       	brne	.+12     	; 0xe16 <menu_process+0x116>
		{
			segment1.state = SEG_OFF;
     e0a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <segment1+0x4>
			segment2.state = SEG_OFF;
     e0e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <segment2+0x4>
			dark_menu_state = MENU_PASSWORD;
     e12:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     e16:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     e1a:	81 11       	cpse	r24, r1
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <menu_process+0x122>
		{
			servo_regulation(0);
     e1e:	0e 94 cd 12 	call	0x259a	; 0x259a <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     e22:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	19 f4       	brne	.+6      	; 0xe30 <menu_process+0x130>
		{
			servo_regulation(99);
     e2a:	83 e6       	ldi	r24, 0x63	; 99
     e2c:	0e 94 cd 12 	call	0x259a	; 0x259a <servo_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MINIMUM_REGULATION) {
     e30:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	19 f4       	brne	.+6      	; 0xe3e <menu_process+0x13e>
			motor_regulation(10);
     e38:	8a e0       	ldi	r24, 0x0A	; 10
     e3a:	0e 94 ab 08 	call	0x1156	; 0x1156 <motor_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MAXIMUM_REGULATION) {
     e3e:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     e42:	89 30       	cpi	r24, 0x09	; 9
     e44:	19 f4       	brne	.+6      	; 0xe4c <menu_process+0x14c>
			motor_regulation(99);
     e46:	83 e6       	ldi	r24, 0x63	; 99
     e48:	0e 94 ab 08 	call	0x1156	; 0x1156 <motor_regulation>
     e4c:	08 95       	ret

00000e4e <check_servo_config_menu>:
	enter_to_menu(MENU_SERVO);
	debug_msg("enter_to_menu_servo\n");
}

void check_servo_config_menu(void)
{
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
	timer_t menu_timer = mktime.ms + 20;
     e5a:	c0 90 b9 04 	lds	r12, 0x04B9	; 0x8004b9 <mktime+0x2>
     e5e:	d0 90 ba 04 	lds	r13, 0x04BA	; 0x8004ba <mktime+0x3>
     e62:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <mktime+0x4>
     e66:	f0 90 bc 04 	lds	r15, 0x04BC	; 0x8004bc <mktime+0x5>
     e6a:	84 e1       	ldi	r24, 0x14	; 20
     e6c:	c8 0e       	add	r12, r24
     e6e:	d1 1c       	adc	r13, r1
     e70:	e1 1c       	adc	r14, r1
     e72:	f1 1c       	adc	r15, r1
	while (menu_timer > mktime.ms)
     e74:	c7 eb       	ldi	r28, 0xB7	; 183
     e76:	d4 e0       	ldi	r29, 0x04	; 4
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <check_servo_config_menu+0x50>
	{
		if (read_button(&button1) == 0) {
     e7a:	82 e4       	ldi	r24, 0x42	; 66
     e7c:	94 e0       	ldi	r25, 0x04	; 4
     e7e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <read_button>
     e82:	81 11       	cpse	r24, r1
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <check_servo_config_menu+0x50>
	}
}

static void enter_servo_config(void *pv)
{
	enter_to_menu(MENU_SERVO);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 08 06 	call	0xc10	; 0xc10 <enter_to_menu>
	debug_msg("enter_to_menu_servo\n");
     e8c:	82 eb       	ldi	r24, 0xB2	; 178
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <check_servo_config_menu+0x62>
}

void check_servo_config_menu(void)
{
	timer_t menu_timer = mktime.ms + 20;
	while (menu_timer > mktime.ms)
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	ac 81       	ldd	r26, Y+4	; 0x04
     ea4:	bd 81       	ldd	r27, Y+5	; 0x05
     ea6:	8c 15       	cp	r24, r12
     ea8:	9d 05       	cpc	r25, r13
     eaa:	ae 05       	cpc	r26, r14
     eac:	bf 05       	cpc	r27, r15
     eae:	28 f3       	brcs	.-54     	; 0xe7a <check_servo_config_menu+0x2c>
		if (read_button(&button1) == 0) {
			enter_servo_config(NULL);
			break;
		}
	}
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	08 95       	ret

00000ebe <init_menu>:
void init_menu(void)
{
	button1.fall_callback = button_1_number;
     ebe:	8a e7       	ldi	r24, 0x7A	; 122
     ec0:	96 e0       	ldi	r25, 0x06	; 6
     ec2:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <button1+0xc>
     ec6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <button1+0xb>
	button2.fall_callback = button_2_number;
     eca:	86 e7       	ldi	r24, 0x76	; 118
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <button2+0xc>
     ed2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <button2+0xb>
	button3.fall_callback = button_3_number;
     ed6:	82 e7       	ldi	r24, 0x72	; 114
     ed8:	96 e0       	ldi	r25, 0x06	; 6
     eda:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
     ede:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
	button5.fall_callback = button_5_number;
     ee2:	8e e6       	ldi	r24, 0x6E	; 110
     ee4:	96 e0       	ldi	r25, 0x06	; 6
     ee6:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <button5+0xc>
     eea:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <button5+0xb>
	button6.fall_callback = button_6_number;
     eee:	8a e6       	ldi	r24, 0x6A	; 106
     ef0:	96 e0       	ldi	r25, 0x06	; 6
     ef2:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <button6+0xc>
     ef6:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <button6+0xb>
	button7.fall_callback = button_7_number;
     efa:	86 e6       	ldi	r24, 0x66	; 102
     efc:	96 e0       	ldi	r25, 0x06	; 6
     efe:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
     f02:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     f06:	65 e7       	ldi	r22, 0x75	; 117
     f08:	74 e0       	ldi	r23, 0x04	; 4
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	0e 94 15 12 	call	0x242a	; 0x242a <mem_read_data>
     f10:	a5 e7       	ldi	r26, 0x75	; 117
     f12:	b4 e0       	ldi	r27, 0x04	; 4
     f14:	e4 e7       	ldi	r30, 0x74	; 116
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	48 e8       	ldi	r20, 0x88	; 136
     f1a:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     f1c:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     f1e:	9c 91       	ld	r25, X
     f20:	80 81       	ld	r24, Z
     f22:	89 17       	cp	r24, r25
     f24:	18 f4       	brcc	.+6      	; 0xf2c <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	8c 93       	st	X, r24
			check_error++;
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     f30:	e4 17       	cp	r30, r20
     f32:	f5 07       	cpc	r31, r21
     f34:	a1 f7       	brne	.-24     	; 0xf1e <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     f36:	22 23       	and	r18, r18
     f38:	29 f0       	breq	.+10     	; 0xf44 <init_menu+0x86>

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     f3a:	65 e7       	ldi	r22, 0x75	; 117
     f3c:	74 e0       	ldi	r23, 0x04	; 4
     f3e:	84 e0       	ldi	r24, 0x04	; 4
     f40:	0e 94 cd 11 	call	0x239a	; 0x239a <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     f44:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pass_len>
	memset(pass, 0, sizeof(pass));
     f48:	86 e0       	ldi	r24, 0x06	; 6
     f4a:	ef e6       	ldi	r30, 0x6F	; 111
     f4c:	f4 e0       	ldi	r31, 0x04	; 4
     f4e:	df 01       	movw	r26, r30
     f50:	1d 92       	st	X+, r1
     f52:	8a 95       	dec	r24
     f54:	e9 f7       	brne	.-6      	; 0xf50 <init_menu+0x92>
	button6.fall_callback = button_6_number;
	button7.fall_callback = button_7_number;
	read_menu_parametrs();
	check_menu_parameters();
	clear_password();
	check_servo_config_menu();
     f56:	0e 94 27 07 	call	0xe4e	; 0xe4e <check_servo_config_menu>
     f5a:	08 95       	ret

00000f5c <dark_menu_get_value>:
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     f5c:	8a 30       	cpi	r24, 0x0A	; 10
     f5e:	30 f4       	brcc	.+12     	; 0xf6c <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     f60:	e8 2f       	mov	r30, r24
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	eb 58       	subi	r30, 0x8B	; 139
     f66:	fb 4f       	sbci	r31, 0xFB	; 251
     f68:	80 81       	ld	r24, Z
     f6a:	08 95       	ret
	}
	return 0;
     f6c:	80 e0       	ldi	r24, 0x00	; 0
}
     f6e:	08 95       	ret

00000f70 <count_pwm>:
	}
	else
	{
		return 0;
	}
}
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	8c 01       	movw	r16, r24
     f82:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <power_supply_type>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	d1 f5       	brne	.+116    	; 0xffe <count_pwm+0x8e>
     f8a:	88 e0       	ldi	r24, 0x08	; 8
     f8c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
     f90:	d8 2f       	mov	r29, r24
     f92:	89 e0       	ldi	r24, 0x09	; 9
     f94:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
     f98:	c8 2f       	mov	r28, r24
     f9a:	88 e0       	ldi	r24, 0x08	; 8
     f9c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
     fa0:	2c 2f       	mov	r18, r28
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	24 56       	subi	r18, 0x64	; 100
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	28 1b       	sub	r18, r24
     faa:	31 09       	sbc	r19, r1
     fac:	20 9f       	mul	r18, r16
     fae:	c0 01       	movw	r24, r0
     fb0:	21 9f       	mul	r18, r17
     fb2:	90 0d       	add	r25, r0
     fb4:	30 9f       	mul	r19, r16
     fb6:	90 0d       	add	r25, r0
     fb8:	11 24       	eor	r1, r1
     fba:	63 e6       	ldi	r22, 0x63	; 99
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodhi4>
     fc2:	07 2e       	mov	r0, r23
     fc4:	00 0c       	add	r0, r0
     fc6:	88 0b       	sbc	r24, r24
     fc8:	99 0b       	sbc	r25, r25
     fca:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
     fce:	2a e9       	ldi	r18, 0x9A	; 154
     fd0:	39 e9       	ldi	r19, 0x99	; 153
     fd2:	49 ed       	ldi	r20, 0xD9	; 217
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
     fda:	6b 01       	movw	r12, r22
     fdc:	7c 01       	movw	r14, r24
     fde:	6d 2f       	mov	r22, r29
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
     fea:	9b 01       	movw	r18, r22
     fec:	ac 01       	movw	r20, r24
     fee:	c7 01       	movw	r24, r14
     ff0:	b6 01       	movw	r22, r12
     ff2:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
     ff6:	0e 94 6d 1a 	call	0x34da	; 0x34da <__fixunssfsi>
     ffa:	86 2f       	mov	r24, r22
     ffc:	1e c0       	rjmp	.+60     	; 0x103a <count_pwm+0xca>
     ffe:	88 e0       	ldi	r24, 0x08	; 8
    1000:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    1004:	d8 2f       	mov	r29, r24
    1006:	89 e0       	ldi	r24, 0x09	; 9
    1008:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    100c:	c8 2f       	mov	r28, r24
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    1014:	2c 2f       	mov	r18, r28
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	24 56       	subi	r18, 0x64	; 100
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	28 1b       	sub	r18, r24
    101e:	31 09       	sbc	r19, r1
    1020:	20 9f       	mul	r18, r16
    1022:	c0 01       	movw	r24, r0
    1024:	21 9f       	mul	r18, r17
    1026:	90 0d       	add	r25, r0
    1028:	30 9f       	mul	r19, r16
    102a:	90 0d       	add	r25, r0
    102c:	11 24       	eor	r1, r1
    102e:	63 e6       	ldi	r22, 0x63	; 99
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0e 94 c2 20 	call	0x4184	; 0x4184 <__divmodhi4>
    1036:	8d 2f       	mov	r24, r29
    1038:	86 0f       	add	r24, r22
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	08 95       	ret

0000104c <dcmotorpwm_init>:
    104c:	8d ec       	ldi	r24, 0xCD	; 205
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1058:	86 e8       	ldi	r24, 0x86	; 134
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	0e 94 9f 18 	call	0x313e	; 0x313e <evTime_init>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
    1066:	94 98       	cbi	0x12, 4	; 18
    1068:	15 bc       	out	0x25, r1	; 37
    106a:	8f 9a       	sbi	0x11, 7	; 17
    106c:	97 9a       	sbi	0x12, 7	; 18
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	08 95       	ret

00001074 <dcmotorpwm_deinit>:
    1074:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <motorD>
    1078:	15 bc       	out	0x25, r1	; 37
    107a:	97 9a       	sbi	0x12, 7	; 18
    107c:	94 98       	cbi	0x12, 4	; 18
    107e:	08 95       	ret

00001080 <dcmotor_is_on>:
    1080:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <motorD>
    1084:	92 50       	subi	r25, 0x02	; 2
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	93 30       	cpi	r25, 0x03	; 3
    108c:	10 f0       	brcs	.+4      	; 0x1092 <dcmotor_is_on+0x12>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	c9 01       	movw	r24, r18
    1094:	08 95       	ret

00001096 <dcmotorpwm_stop>:
    1096:	0e 94 40 08 	call	0x1080	; 0x1080 <dcmotor_is_on>
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	99 f0       	breq	.+38     	; 0x10c4 <dcmotorpwm_stop+0x2e>
    109e:	8b ed       	ldi	r24, 0xDB	; 219
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9f 93       	push	r25
    10a4:	8f 93       	push	r24
    10a6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    10aa:	15 bc       	out	0x25, r1	; 37
    10ac:	97 9a       	sbi	0x12, 7	; 18
    10ae:	94 98       	cbi	0x12, 4	; 18
    10b0:	e2 e8       	ldi	r30, 0x82	; 130
    10b2:	f4 e0       	ldi	r31, 0x04	; 4
    10b4:	80 81       	ld	r24, Z
    10b6:	81 83       	std	Z+1, r24	; 0x01
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	80 83       	st	Z, r24
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	08 95       	ret

000010c6 <dcmotorpwm_start>:
    10c6:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <motorD>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	d9 f4       	brne	.+54     	; 0x1104 <dcmotorpwm_start+0x3e>
    10ce:	94 9a       	sbi	0x12, 4	; 18
    10d0:	85 b5       	in	r24, 0x25	; 37
    10d2:	80 63       	ori	r24, 0x30	; 48
    10d4:	85 bd       	out	0x25, r24	; 37
    10d6:	85 b5       	in	r24, 0x25	; 37
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	85 bd       	out	0x25, r24	; 37
    10dc:	85 b5       	in	r24, 0x25	; 37
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	85 bd       	out	0x25, r24	; 37
    10e2:	e2 e8       	ldi	r30, 0x82	; 130
    10e4:	f4 e0       	ldi	r31, 0x04	; 4
    10e6:	80 81       	ld	r24, Z
    10e8:	81 83       	std	Z+1, r24	; 0x01
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	80 83       	st	Z, r24
    10ee:	48 ee       	ldi	r20, 0xE8	; 232
    10f0:	53 e0       	ldi	r21, 0x03	; 3
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	86 e8       	ldi	r24, 0x86	; 134
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	08 95       	ret
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	08 95       	ret

0000110a <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
    110a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motorD+0x3>
}
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	08 95       	ret

00001112 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
    1112:	89 ee       	ldi	r24, 0xE9	; 233
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9f 93       	push	r25
    1118:	8f 93       	push	r24
    111a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
    111e:	0e 94 4b 08 	call	0x1096	; 0x1096 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	08 95       	ret

0000112e <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
    112e:	0e 94 40 08 	call	0x1080	; 0x1080 <dcmotor_is_on>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	29 f0       	breq	.+10     	; 0x1140 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
		return 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1140:	08 95       	ret

00001142 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
    1142:	0e 94 40 08 	call	0x1080	; 0x1080 <dcmotor_is_on>
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	29 f0       	breq	.+10     	; 0x1154 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
		return 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1154:	08 95       	ret

00001156 <motor_regulation>:

void motor_regulation(uint8_t pwm) {
	motorD.state = MOTOR_REGULATION;
    1156:	e2 e8       	ldi	r30, 0x82	; 130
    1158:	f4 e0       	ldi	r31, 0x04	; 4
    115a:	96 e0       	ldi	r25, 0x06	; 6
    115c:	90 83       	st	Z, r25
	motorD.pwm_value = pwm;
    115e:	83 83       	std	Z+3, r24	; 0x03
    1160:	08 95       	ret

00001162 <dcmotor_process>:
}

void dcmotor_process(uint8_t value)
{
    1162:	cf 93       	push	r28
    1164:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
    1166:	46 e9       	ldi	r20, 0x96	; 150
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <evTime_process_period>
    1176:	89 2b       	or	r24, r25
    1178:	09 f4       	brne	.+2      	; 0x117c <dcmotor_process+0x1a>
    117a:	49 c0       	rjmp	.+146    	; 0x120e <dcmotor_process+0xac>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
    117c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <motorD>
    1180:	93 30       	cpi	r25, 0x03	; 3
    1182:	b9 f0       	breq	.+46     	; 0x11b2 <dcmotor_process+0x50>
    1184:	28 f4       	brcc	.+10     	; 0x1190 <dcmotor_process+0x2e>
    1186:	91 30       	cpi	r25, 0x01	; 1
    1188:	89 f0       	breq	.+34     	; 0x11ac <dcmotor_process+0x4a>
    118a:	92 30       	cpi	r25, 0x02	; 2
    118c:	39 f0       	breq	.+14     	; 0x119c <dcmotor_process+0x3a>
    118e:	3f c0       	rjmp	.+126    	; 0x120e <dcmotor_process+0xac>
    1190:	95 30       	cpi	r25, 0x05	; 5
    1192:	79 f1       	breq	.+94     	; 0x11f2 <dcmotor_process+0x90>
    1194:	88 f1       	brcs	.+98     	; 0x11f8 <dcmotor_process+0x96>
    1196:	96 30       	cpi	r25, 0x06	; 6
    1198:	99 f1       	breq	.+102    	; 0x1200 <dcmotor_process+0x9e>
    119a:	39 c0       	rjmp	.+114    	; 0x120e <dcmotor_process+0xac>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
    119c:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
			OCR2 = count_pwm(value);
    11a0:	8c 2f       	mov	r24, r28
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_pwm>
    11a8:	83 bd       	out	0x23, r24	; 35
			break;
    11aa:	31 c0       	rjmp	.+98     	; 0x120e <dcmotor_process+0xac>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    11ac:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <motorD+0x3>
			break;
    11b0:	2e c0       	rjmp	.+92     	; 0x120e <dcmotor_process+0xac>

			case MOTOR_TRY:
				if (value <= 50)
    11b2:	c3 33       	cpi	r28, 0x33	; 51
    11b4:	48 f4       	brcc	.+18     	; 0x11c8 <dcmotor_process+0x66>
				{
					motorD.pwm_value = value + 20;
    11b6:	84 e1       	ldi	r24, 0x14	; 20
    11b8:	8c 0f       	add	r24, r28
    11ba:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_pwm>
    11c4:	83 bd       	out	0x23, r24	; 35
    11c6:	23 c0       	rjmp	.+70     	; 0x120e <dcmotor_process+0xac>
				}
				else if ((value > 50) && (value <= 70))
    11c8:	8d ec       	ldi	r24, 0xCD	; 205
    11ca:	8c 0f       	add	r24, r28
    11cc:	84 31       	cpi	r24, 0x14	; 20
    11ce:	48 f4       	brcc	.+18     	; 0x11e2 <dcmotor_process+0x80>
				{
					motorD.pwm_value = value + 15;
    11d0:	8f e0       	ldi	r24, 0x0F	; 15
    11d2:	8c 0f       	add	r24, r28
    11d4:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_pwm>
    11de:	83 bd       	out	0x23, r24	; 35
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <dcmotor_process+0xac>
				}
				else
				{
					motorD.pwm_value = value;
    11e2:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    11e6:	8c 2f       	mov	r24, r28
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_pwm>
    11ee:	83 bd       	out	0x23, r24	; 35
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <dcmotor_process+0xac>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    11f2:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    11f4:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    11f6:	0b c0       	rjmp	.+22     	; 0x120e <dcmotor_process+0xac>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
			return;					 //!
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <dcmotor_process+0xac>
				motorD.state = MOTOR_ON;
			}
			break;
			
			case MOTOR_REGULATION:
				motorD.pwm_value = value;
    1200:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
				OCR2 = count_pwm(value);
    1204:	8c 2f       	mov	r24, r28
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 b8 07 	call	0xf70	; 0xf70 <count_pwm>
    120c:	83 bd       	out	0x23, r24	; 35
		
	}
	#if !TEST_APP
	
	#endif
}
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1212:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1214:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1216:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1218:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    121a:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    121c:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    121e:	af 9a       	sbi	0x15, 7	; 21
    1220:	08 95       	ret

00001222 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1222:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1224:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1228:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    122a:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    122e:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    1230:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    1234:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    1236:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <DispD4+0x1>
    123a:	08 95       	ret

0000123c <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    123c:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    123e:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    1240:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    1242:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    1244:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    1246:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    1248:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    124a:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    124c:	ea e9       	ldi	r30, 0x9A	; 154
    124e:	f4 e0       	ldi	r31, 0x04	; 4
    1250:	88 e9       	ldi	r24, 0x98	; 152
    1252:	94 e0       	ldi	r25, 0x04	; 4
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    1258:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    125a:	24 ea       	ldi	r18, 0xA4	; 164
    125c:	34 e0       	ldi	r19, 0x04	; 4
    125e:	33 83       	std	Z+3, r19	; 0x03
    1260:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    1262:	a1 e9       	ldi	r26, 0x91	; 145
    1264:	b4 e0       	ldi	r27, 0x04	; 4
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	3c 93       	st	X, r19
    126a:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    126c:	13 96       	adiw	r26, 0x03	; 3
    126e:	9c 93       	st	X, r25
    1270:	8e 93       	st	-X, r24
    1272:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    1274:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    1276:	26 e9       	ldi	r18, 0x96	; 150
    1278:	34 e0       	ldi	r19, 0x04	; 4
    127a:	35 83       	std	Z+5, r19	; 0x05
    127c:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    127e:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    1280:	82 ea       	ldi	r24, 0xA2	; 162
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	97 83       	std	Z+7, r25	; 0x07
    1286:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    1288:	ec e8       	ldi	r30, 0x8C	; 140
    128a:	f4 e0       	ldi	r31, 0x04	; 4
    128c:	31 83       	std	Z+1, r19	; 0x01
    128e:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1294:	0e 94 11 09 	call	0x1222	; 0x1222 <off_all_displays>
	clear_display();
    1298:	0e 94 09 09 	call	0x1212	; 0x1212 <clear_display>
    129c:	08 95       	ret

0000129e <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
	if (DispD->value != displaying_value)
    12a2:	fc 01       	movw	r30, r24
    12a4:	30 81       	ld	r19, Z
    12a6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <displaying_value>
    12aa:	32 17       	cp	r19, r18
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <display_set_value+0x12>
    12ae:	95 c0       	rjmp	.+298    	; 0x13da <display_set_value+0x13c>
    12b0:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    12b2:	0e 94 09 09 	call	0x1212	; 0x1212 <clear_display>
		switch(DispD->value)
    12b6:	e8 81       	ld	r30, Y
    12b8:	8e 2f       	mov	r24, r30
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	8f 3f       	cpi	r24, 0xFF	; 255
    12be:	91 05       	cpc	r25, r1
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <display_set_value+0x26>
    12c2:	88 c0       	rjmp	.+272    	; 0x13d4 <display_set_value+0x136>
    12c4:	fc 01       	movw	r30, r24
    12c6:	e6 5d       	subi	r30, 0xD6	; 214
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    12ce:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    12d0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    12d2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    12d4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    12d6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    12d8:	aa 98       	cbi	0x15, 2	; 21
			break;
    12da:	7c c0       	rjmp	.+248    	; 0x13d4 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    12dc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    12de:	dd 98       	cbi	0x1b, 5	; 27
			break;
    12e0:	79 c0       	rjmp	.+242    	; 0x13d4 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    12e2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    12e4:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    12e6:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    12e8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    12ea:	df 98       	cbi	0x1b, 7	; 27
			break;
    12ec:	73 c0       	rjmp	.+230    	; 0x13d4 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    12ee:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    12f0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    12f2:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    12f4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    12f6:	df 98       	cbi	0x1b, 7	; 27
			break;
    12f8:	6d c0       	rjmp	.+218    	; 0x13d4 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    12fa:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    12fc:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    12fe:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1300:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1302:	68 c0       	rjmp	.+208    	; 0x13d4 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1304:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1306:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1308:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    130a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    130c:	df 98       	cbi	0x1b, 7	; 27
			break;
    130e:	62 c0       	rjmp	.+196    	; 0x13d4 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1310:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1312:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1314:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1316:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1318:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    131a:	de 98       	cbi	0x1b, 6	; 27
			break;
    131c:	5b c0       	rjmp	.+182    	; 0x13d4 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    131e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1320:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1322:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1324:	57 c0       	rjmp	.+174    	; 0x13d4 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1326:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1328:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    132a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    132c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    132e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1330:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1332:	af 98       	cbi	0x15, 7	; 21
			break;
    1334:	4f c0       	rjmp	.+158    	; 0x13d4 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    1336:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1338:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    133a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    133c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    133e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1340:	af 98       	cbi	0x15, 7	; 21
			break;
    1342:	48 c0       	rjmp	.+144    	; 0x13d4 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    1344:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1346:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1348:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    134a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    134c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    134e:	af 98       	cbi	0x15, 7	; 21
			break;
    1350:	41 c0       	rjmp	.+130    	; 0x13d4 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    1352:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1354:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1356:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1358:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    135a:	af 98       	cbi	0x15, 7	; 21
			break;
    135c:	3b c0       	rjmp	.+118    	; 0x13d4 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    135e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1360:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1362:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1364:	aa 98       	cbi	0x15, 2	; 21
			break;
    1366:	36 c0       	rjmp	.+108    	; 0x13d4 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    1368:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    136a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    136c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    136e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1370:	af 98       	cbi	0x15, 7	; 21
			break;
    1372:	30 c0       	rjmp	.+96     	; 0x13d4 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    1374:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1376:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1378:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    137a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    137c:	af 98       	cbi	0x15, 7	; 21
			break;
    137e:	2a c0       	rjmp	.+84     	; 0x13d4 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    1380:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    1382:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1384:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1386:	af 98       	cbi	0x15, 7	; 21
			break;
    1388:	25 c0       	rjmp	.+74     	; 0x13d4 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    138a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    138c:	af 98       	cbi	0x15, 7	; 21
			break;
    138e:	22 c0       	rjmp	.+68     	; 0x13d4 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1390:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1392:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1394:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1396:	af 98       	cbi	0x15, 7	; 21
			break;
    1398:	1d c0       	rjmp	.+58     	; 0x13d4 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    139a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    139c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    139e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    13a0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    13a2:	af 98       	cbi	0x15, 7	; 21
			break;
    13a4:	17 c0       	rjmp	.+46     	; 0x13d4 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    13a6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    13a8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    13aa:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    13ac:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    13ae:	af 98       	cbi	0x15, 7	; 21
			break;
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    13b2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    13b4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    13b6:	aa 98       	cbi	0x15, 2	; 21
			break;
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    13ba:	af 98       	cbi	0x15, 7	; 21
			break;
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    13be:	aa 98       	cbi	0x15, 2	; 21
			break;
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    13c2:	de 98       	cbi	0x1b, 6	; 27
			break;
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    13c6:	df 98       	cbi	0x1b, 7	; 27
			break;
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    13ca:	dd 98       	cbi	0x1b, 5	; 27
			break;
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    13ce:	ad 98       	cbi	0x15, 5	; 21
			break;
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    13d2:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    13d4:	88 81       	ld	r24, Y
    13d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <displaying_value>
	}
	
}
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <on_display>:
void on_display(disp_drv *DispD)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
	off_all_displays();
    13e6:	0e 94 11 09 	call	0x1222	; 0x1222 <off_all_displays>
	display_set_value(DispD);
    13ea:	ce 01       	movw	r24, r28
    13ec:	0e 94 4f 09 	call	0x129e	; 0x129e <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	c8 39       	cpi	r28, 0x98	; 152
    13f4:	d8 07       	cpc	r29, r24
    13f6:	29 f4       	brne	.+10     	; 0x1402 <on_display+0x22>
	{
		LED_ON_DISP1;
    13f8:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <DispD1+0x1>
    1400:	19 c0       	rjmp	.+50     	; 0x1434 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1402:	84 e0       	ldi	r24, 0x04	; 4
    1404:	c4 3a       	cpi	r28, 0xA4	; 164
    1406:	d8 07       	cpc	r29, r24
    1408:	29 f4       	brne	.+10     	; 0x1414 <on_display+0x34>
	{
		LED_ON_DISP2;
    140a:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <DispD2+0x1>
    1412:	10 c0       	rjmp	.+32     	; 0x1434 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	c6 39       	cpi	r28, 0x96	; 150
    1418:	d8 07       	cpc	r29, r24
    141a:	29 f4       	brne	.+10     	; 0x1426 <on_display+0x46>
	{
		LED_ON_DISP3;
    141c:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD3+0x1>
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1426:	c2 5a       	subi	r28, 0xA2	; 162
    1428:	d4 40       	sbci	r29, 0x04	; 4
    142a:	21 f4       	brne	.+8      	; 0x1434 <on_display+0x54>
	{
		LED_ON_DISP4;
    142c:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD4+0x1>
	}
	#endif
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    1446:	c0 81       	ld	r28, Z
    1448:	d1 81       	ldd	r29, Z+1	; 0x01
    144a:	21 96       	adiw	r28, 0x01	; 1
    144c:	d1 83       	std	Z+1, r29	; 0x01
    144e:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    1450:	9e 01       	movw	r18, r28
    1452:	ad ec       	ldi	r26, 0xCD	; 205
    1454:	bc ec       	ldi	r27, 0xCC	; 204
    1456:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__umulhisi3>
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	96 95       	lsr	r25
    1460:	87 95       	ror	r24
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	9c 01       	movw	r18, r24
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	c8 17       	cp	r28, r24
    147e:	d9 07       	cpc	r29, r25
    1480:	01 f5       	brne	.+64     	; 0x14c2 <display_process+0x88>
    1482:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    1484:	10 91 35 02 	lds	r17, 0x0235	; 0x800235 <iteration>
    1488:	14 30       	cpi	r17, 0x04	; 4
    148a:	58 f4       	brcc	.+22     	; 0x14a2 <display_process+0x68>
			on_display(disp_tab[iteration]);
    148c:	e1 2f       	mov	r30, r17
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	e6 56       	subi	r30, 0x66	; 102
    1496:	fb 4f       	sbci	r31, 0xFB	; 251
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <on_display>
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <display_process+0x6c>
		else
			off_all_displays();
    14a2:	0e 94 11 09 	call	0x1222	; 0x1222 <off_all_displays>
		iteration++;
    14a6:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    14a8:	15 30       	cpi	r17, 0x05	; 5
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    14ac:	10 93 35 02 	sts	0x0235, r17	; 0x800235 <iteration>
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    14b2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    14b6:	c0 39       	cpi	r28, 0x90	; 144
    14b8:	d1 40       	sbci	r29, 0x01	; 1
    14ba:	19 f4       	brne	.+6      	; 0x14c2 <display_process+0x88>
    14bc:	f7 01       	movw	r30, r14
    14be:	11 82       	std	Z+1, r1	; 0x01
    14c0:	10 82       	st	Z, r1
	}
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	08 95       	ret

000014ce <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    14ce:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    14d0:	64 36       	cpi	r22, 0x64	; 100
    14d2:	f8 f4       	brcc	.+62     	; 0x1512 <disp_set_number+0x44>
	else if (number == 0)
    14d4:	61 11       	cpse	r22, r1
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    14d8:	a0 81       	ld	r26, Z
    14da:	b1 81       	ldd	r27, Z+1	; 0x01
    14dc:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    14de:	02 80       	ldd	r0, Z+2	; 0x02
    14e0:	f3 81       	ldd	r31, Z+3	; 0x03
    14e2:	e0 2d       	mov	r30, r0
    14e4:	10 82       	st	Z, r1
    14e6:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    14e8:	a0 81       	ld	r26, Z
    14ea:	b1 81       	ldd	r27, Z+1	; 0x01
    14ec:	9d ec       	ldi	r25, 0xCD	; 205
    14ee:	69 9f       	mul	r22, r25
    14f0:	91 2d       	mov	r25, r1
    14f2:	11 24       	eor	r1, r1
    14f4:	96 95       	lsr	r25
    14f6:	96 95       	lsr	r25
    14f8:	96 95       	lsr	r25
    14fa:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    14fc:	02 80       	ldd	r0, Z+2	; 0x02
    14fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1500:	e0 2d       	mov	r30, r0
    1502:	89 2f       	mov	r24, r25
    1504:	88 0f       	add	r24, r24
    1506:	98 2f       	mov	r25, r24
    1508:	99 0f       	add	r25, r25
    150a:	99 0f       	add	r25, r25
    150c:	89 0f       	add	r24, r25
    150e:	68 1b       	sub	r22, r24
    1510:	60 83       	st	Z, r22
    1512:	08 95       	ret

00001514 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1514:	fc 01       	movw	r30, r24
    1516:	60 83       	st	Z, r22
    1518:	08 95       	ret

0000151a <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	39 f0       	breq	.+14     	; 0x152c <dip_set_value+0x12>
    151e:	18 f0       	brcs	.+6      	; 0x1526 <dip_set_value+0xc>
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	39 f0       	breq	.+14     	; 0x1532 <dip_set_value+0x18>
    1524:	08 95       	ret
    1526:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    152a:	08 95       	ret
    152c:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    1530:	08 95       	ret
    1532:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    1536:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    153a:	08 95       	ret

0000153c <disp_get_state>:
    153c:	88 23       	and	r24, r24
    153e:	19 f0       	breq	.+6      	; 0x1546 <disp_get_state+0xa>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	29 f0       	breq	.+10     	; 0x154e <disp_get_state+0x12>
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <disp_get_state+0x1a>
    1546:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	08 95       	ret
    154e:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	08 95       	ret
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	08 95       	ret

0000155c <disp_disable_voltage>:
    155c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1560:	86 30       	cpi	r24, 0x06	; 6
    1562:	21 f4       	brne	.+8      	; 0x156c <disp_disable_voltage+0x10>
    1564:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <disp1_last_state>
    1568:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
    156c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1570:	86 30       	cpi	r24, 0x06	; 6
    1572:	21 f4       	brne	.+8      	; 0x157c <disp_disable_voltage+0x20>
    1574:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <disp2_last_state>
    1578:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
    157c:	08 95       	ret

0000157e <disp_set_state>:
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	a1 f0       	breq	.+40     	; 0x15aa <disp_set_state+0x2c>
    1582:	18 f0       	brcs	.+6      	; 0x158a <disp_set_state+0xc>
    1584:	82 30       	cpi	r24, 0x02	; 2
    1586:	09 f1       	breq	.+66     	; 0x15ca <disp_set_state+0x4c>
    1588:	08 95       	ret
    158a:	66 30       	cpi	r22, 0x06	; 6
    158c:	21 f4       	brne	.+8      	; 0x1596 <disp_set_state+0x18>
    158e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1592:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp1_last_state>
    1596:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    159a:	86 30       	cpi	r24, 0x06	; 6
    159c:	19 f4       	brne	.+6      	; 0x15a4 <disp_set_state+0x26>
    159e:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp1_last_state>
    15a2:	08 95       	ret
    15a4:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <segment1+0x4>
    15a8:	08 95       	ret
    15aa:	66 30       	cpi	r22, 0x06	; 6
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <disp_set_state+0x38>
    15ae:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    15b2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <disp2_last_state>
    15b6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    15ba:	86 30       	cpi	r24, 0x06	; 6
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <disp_set_state+0x46>
    15be:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <disp2_last_state>
    15c2:	08 95       	ret
    15c4:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <segment2+0x4>
    15c8:	08 95       	ret
    15ca:	66 30       	cpi	r22, 0x06	; 6
    15cc:	41 f4       	brne	.+16     	; 0x15de <disp_set_state+0x60>
    15ce:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    15d2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp1_last_state>
    15d6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    15da:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <disp2_last_state>
    15de:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    15e2:	86 30       	cpi	r24, 0x06	; 6
    15e4:	29 f4       	brne	.+10     	; 0x15f0 <disp_set_state+0x72>
    15e6:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <disp2_last_state>
    15ea:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp1_last_state>
    15ee:	08 95       	ret
    15f0:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <segment1+0x4>
    15f4:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <segment2+0x4>
    15f8:	08 95       	ret

000015fa <display_set_error>:
    15fa:	95 e0       	ldi	r25, 0x05	; 5
    15fc:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <segment1+0x4>
    1600:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <segment2+0x4>
    1604:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <error_reason>
    1608:	08 95       	ret

0000160a <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    160a:	68 ef       	ldi	r22, 0xF8	; 248
    160c:	88 e9       	ldi	r24, 0x98	; 152
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1614:	68 ef       	ldi	r22, 0xF8	; 248
    1616:	84 ea       	ldi	r24, 0xA4	; 164
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    161e:	68 ef       	ldi	r22, 0xF8	; 248
    1620:	86 e9       	ldi	r24, 0x96	; 150
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1628:	68 ef       	ldi	r22, 0xF8	; 248
    162a:	82 ea       	ldi	r24, 0xA2	; 162
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
    1632:	08 95       	ret

00001634 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    1634:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    1638:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    163c:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1640:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    1644:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <timer_disp_process.1985>
    1648:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <timer_disp_process.1985+0x1>
    164c:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <timer_disp_process.1985+0x2>
    1650:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <timer_disp_process.1985+0x3>
    1654:	48 17       	cp	r20, r24
    1656:	59 07       	cpc	r21, r25
    1658:	6a 07       	cpc	r22, r26
    165a:	7b 07       	cpc	r23, r27
    165c:	08 f0       	brcs	.+2      	; 0x1660 <disp_process+0x2c>
    165e:	26 c1       	rjmp	.+588    	; 0x18ac <disp_process+0x278>
	{
        
        switch(segment1.state)
    1660:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	09 f4       	brne	.+2      	; 0x166a <disp_process+0x36>
    1668:	59 c0       	rjmp	.+178    	; 0x171c <disp_process+0xe8>
    166a:	30 f4       	brcc	.+12     	; 0x1678 <disp_process+0x44>
    166c:	88 23       	and	r24, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <disp_process+0x3e>
    1670:	87 c0       	rjmp	.+270    	; 0x1780 <disp_process+0x14c>
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	39 f1       	breq	.+78     	; 0x16c4 <disp_process+0x90>
    1676:	8e c0       	rjmp	.+284    	; 0x1794 <disp_process+0x160>
    1678:	85 30       	cpi	r24, 0x05	; 5
    167a:	09 f4       	brne	.+2      	; 0x167e <disp_process+0x4a>
    167c:	74 c0       	rjmp	.+232    	; 0x1766 <disp_process+0x132>
    167e:	48 f1       	brcs	.+82     	; 0x16d2 <disp_process+0x9e>
    1680:	86 30       	cpi	r24, 0x06	; 6
    1682:	09 f0       	breq	.+2      	; 0x1686 <disp_process+0x52>
    1684:	87 c0       	rjmp	.+270    	; 0x1794 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    1686:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	48 ec       	ldi	r20, 0xC8	; 200
    1690:	52 e4       	ldi	r21, 0x42	; 66
    1692:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    1696:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__fixsfsi>
    169a:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <voltage+0x1>
    169e:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <voltage>
            disp_set_number(&segment1, voltage/100);
    16a2:	9b 01       	movw	r18, r22
    16a4:	36 95       	lsr	r19
    16a6:	27 95       	ror	r18
    16a8:	36 95       	lsr	r19
    16aa:	27 95       	ror	r18
    16ac:	ab e7       	ldi	r26, 0x7B	; 123
    16ae:	b4 e1       	ldi	r27, 0x14	; 20
    16b0:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__umulhisi3>
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	68 2f       	mov	r22, r24
    16ba:	81 e9       	ldi	r24, 0x91	; 145
    16bc:	94 e0       	ldi	r25, 0x04	; 4
    16be:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
            break;
    16c2:	68 c0       	rjmp	.+208    	; 0x1794 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    16c4:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <motor_disp_value>
    16c8:	81 e9       	ldi	r24, 0x91	; 145
    16ca:	94 e0       	ldi	r25, 0x04	; 4
    16cc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
            break;
    16d0:	61 c0       	rjmp	.+194    	; 0x1794 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    16d2:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	31 f0       	breq	.+12     	; 0x16e6 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    16e0:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
                break;
    16e4:	57 c0       	rjmp	.+174    	; 0x1794 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    16e6:	48 51       	subi	r20, 0x18	; 24
    16e8:	5c 4f       	sbci	r21, 0xFC	; 252
    16ea:	6f 4f       	sbci	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1985>
    16f2:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1985+0x1>
    16f6:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1985+0x2>
    16fa:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1985+0x3>
			DispD2.value = 's';
    16fe:	83 e7       	ldi	r24, 0x73	; 115
    1700:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'a';
    1704:	81 e6       	ldi	r24, 0x61	; 97
    1706:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
    170a:	80 e7       	ldi	r24, 0x70	; 112
    170c:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			segment1.state = SEG_VALUE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1716:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
			return;
    171a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    171c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	31 f0       	breq	.+12     	; 0x1730 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    172a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
                break;
    172e:	32 c0       	rjmp	.+100    	; 0x1794 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    1730:	48 51       	subi	r20, 0x18	; 24
    1732:	5c 4f       	sbci	r21, 0xFC	; 252
    1734:	6f 4f       	sbci	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1985>
    173c:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1985+0x1>
    1740:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1985+0x2>
    1744:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1985+0x3>
			DispD2.value = 'l';
    1748:	8c e6       	ldi	r24, 0x6C	; 108
    174a:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'o';
    174e:	8f e6       	ldi	r24, 0x6F	; 111
    1750:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
    1754:	80 e7       	ldi	r24, 0x70	; 112
    1756:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			segment1.state = SEG_VALUE;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1760:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
            break;
    1764:	17 c0       	rjmp	.+46     	; 0x1794 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    1766:	85 e6       	ldi	r24, 0x65	; 101
    1768:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'r';
    176c:	82 e7       	ldi	r24, 0x72	; 114
    176e:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			disp_set_number(&segment2, error_reason);
    1772:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <error_reason>
    1776:	8c e8       	ldi	r24, 0x8C	; 140
    1778:	94 e0       	ldi	r25, 0x04	; 4
    177a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
            break;
    177e:	0a c0       	rjmp	.+20     	; 0x1794 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1780:	68 ef       	ldi	r22, 0xF8	; 248
    1782:	88 e9       	ldi	r24, 0x98	; 152
    1784:	94 e0       	ldi	r25, 0x04	; 4
    1786:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    178a:	68 ef       	ldi	r22, 0xF8	; 248
    178c:	84 ea       	ldi	r24, 0xA4	; 164
    178e:	94 e0       	ldi	r25, 0x04	; 4
    1790:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1794:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	19 f1       	breq	.+70     	; 0x17e2 <disp_process+0x1ae>
    179c:	48 f1       	brcs	.+82     	; 0x17f0 <disp_process+0x1bc>
    179e:	86 30       	cpi	r24, 0x06	; 6
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <disp_process+0x174>
    17a2:	8d 30       	cpi	r24, 0x0D	; 13
    17a4:	81 f1       	breq	.+96     	; 0x1806 <disp_process+0x1d2>
    17a6:	6f c0       	rjmp	.+222    	; 0x1886 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    17a8:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <voltage>
    17ac:	50 91 4a 02 	lds	r21, 0x024A	; 0x80024a <voltage+0x1>
    17b0:	9a 01       	movw	r18, r20
    17b2:	36 95       	lsr	r19
    17b4:	27 95       	ror	r18
    17b6:	36 95       	lsr	r19
    17b8:	27 95       	ror	r18
    17ba:	ab e7       	ldi	r26, 0x7B	; 123
    17bc:	b4 e1       	ldi	r27, 0x14	; 20
    17be:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__umulhisi3>
    17c2:	96 95       	lsr	r25
    17c4:	87 95       	ror	r24
    17c6:	64 e6       	ldi	r22, 0x64	; 100
    17c8:	68 9f       	mul	r22, r24
    17ca:	90 01       	movw	r18, r0
    17cc:	69 9f       	mul	r22, r25
    17ce:	30 0d       	add	r19, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	ba 01       	movw	r22, r20
    17d4:	62 1b       	sub	r22, r18
    17d6:	73 0b       	sbc	r23, r19
    17d8:	8c e8       	ldi	r24, 0x8C	; 140
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
            break;
    17e0:	52 c0       	rjmp	.+164    	; 0x1886 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    17e2:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <servo_disp_value>
    17e6:	8c e8       	ldi	r24, 0x8C	; 140
    17e8:	94 e0       	ldi	r25, 0x04	; 4
    17ea:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
            break;
    17ee:	4b c0       	rjmp	.+150    	; 0x1886 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    17f0:	68 ef       	ldi	r22, 0xF8	; 248
    17f2:	86 e9       	ldi	r24, 0x96	; 150
    17f4:	94 e0       	ldi	r25, 0x04	; 4
    17f6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    17fa:	68 ef       	ldi	r22, 0xF8	; 248
    17fc:	82 ea       	ldi	r24, 0xA2	; 162
    17fe:	94 e0       	ldi	r25, 0x04	; 4
    1800:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
            break;
    1804:	40 c0       	rjmp	.+128    	; 0x1886 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1806:	44 ef       	ldi	r20, 0xF4	; 244
    1808:	51 e0       	ldi	r21, 0x01	; 1
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	84 e4       	ldi	r24, 0x44	; 68
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <evTime_process_period>
    1816:	89 2b       	or	r24, r25
    1818:	b1 f1       	breq	.+108    	; 0x1886 <disp_process+0x252>
			{
				if (blink_state == 0)
    181a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <blink_state>
    181e:	81 11       	cpse	r24, r1
    1820:	0e c0       	rjmp	.+28     	; 0x183e <disp_process+0x20a>
				{
					blink_state = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1828:	67 ef       	ldi	r22, 0xF7	; 247
    182a:	86 e9       	ldi	r24, 0x96	; 150
    182c:	94 e0       	ldi	r25, 0x04	; 4
    182e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    1832:	67 ef       	ldi	r22, 0xF7	; 247
    1834:	82 ea       	ldi	r24, 0xA2	; 162
    1836:	94 e0       	ldi	r25, 0x04	; 4
    1838:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
    183c:	24 c0       	rjmp	.+72     	; 0x1886 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    183e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <blink_state>
					if (blink_cnt == 0) 
    1842:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <blink_cnt>
    1846:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <blink_cnt+0x1>
    184a:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <blink_cnt+0x2>
    184e:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <blink_cnt+0x3>
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	a1 05       	cpc	r26, r1
    1856:	b1 05       	cpc	r27, r1
    1858:	29 f4       	brne	.+10     	; 0x1864 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
						break;
    1862:	11 c0       	rjmp	.+34     	; 0x1886 <disp_process+0x252>
					}
					blink_cnt--;
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	a1 09       	sbc	r26, r1
    1868:	b1 09       	sbc	r27, r1
    186a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <blink_cnt>
    186e:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <blink_cnt+0x1>
    1872:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <blink_cnt+0x2>
    1876:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    187a:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <second_disp_blink_val>
    187e:	8c e8       	ldi	r24, 0x8C	; 140
    1880:	94 e0       	ldi	r25, 0x04	; 4
    1882:	0e 94 67 0a 	call	0x14ce	; 0x14ce <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    1886:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer_disp_process.1985>
    188a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer_disp_process.1985+0x1>
    188e:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <timer_disp_process.1985+0x2>
    1892:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <timer_disp_process.1985+0x3>
    1896:	c2 96       	adiw	r24, 0x32	; 50
    1898:	a1 1d       	adc	r26, r1
    189a:	b1 1d       	adc	r27, r1
    189c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <timer_disp_process.1985>
    18a0:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <timer_disp_process.1985+0x1>
    18a4:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <timer_disp_process.1985+0x2>
    18a8:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <timer_disp_process.1985+0x3>
    18ac:	08 95       	ret

000018ae <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    18b2:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <mktime+0x2>
    18b6:	10 91 ba 04 	lds	r17, 0x04BA	; 0x8004ba <mktime+0x3>
    18ba:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <mktime+0x4>
    18be:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <mktime+0x5>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	80 0f       	add	r24, r16
    18c8:	91 1f       	adc	r25, r17
    18ca:	a2 1f       	adc	r26, r18
    18cc:	b3 1f       	adc	r27, r19
    18ce:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <animation_time>
    18d2:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <animation_time+0x1>
    18d6:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <animation_time+0x2>
    18da:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    18de:	62 e0       	ldi	r22, 0x02	; 2
    18e0:	84 2f       	mov	r24, r20
    18e2:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
}
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    18ec:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	29 f0       	breq	.+10     	; 0x18fe <animation+0x12>
    18f4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    18f8:	82 30       	cpi	r24, 0x02	; 2
    18fa:	09 f0       	breq	.+2      	; 0x18fe <animation+0x12>
    18fc:	78 c0       	rjmp	.+240    	; 0x19ee <animation+0x102>
    18fe:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1902:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1906:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    190a:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    190e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer_anim.2005>
    1912:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer_anim.2005+0x1>
    1916:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer_anim.2005+0x2>
    191a:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer_anim.2005+0x3>
    191e:	84 17       	cp	r24, r20
    1920:	95 07       	cpc	r25, r21
    1922:	a6 07       	cpc	r26, r22
    1924:	b7 07       	cpc	r27, r23
    1926:	08 f0       	brcs	.+2      	; 0x192a <animation+0x3e>
    1928:	62 c0       	rjmp	.+196    	; 0x19ee <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    192a:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    192e:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    1932:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1936:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    193a:	81 55       	subi	r24, 0x51	; 81
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	af 4f       	sbci	r26, 0xFF	; 255
    1940:	bf 4f       	sbci	r27, 0xFF	; 255
    1942:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer_anim.2005>
    1946:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer_anim.2005+0x1>
    194a:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer_anim.2005+0x2>
    194e:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer_anim.2005+0x3>
		if (segment1.state == SEG_ANIMATION)
    1952:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	61 f4       	brne	.+24     	; 0x1972 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    195a:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2006>
    195e:	88 e9       	ldi	r24, 0x98	; 152
    1960:	94 e0       	ldi	r25, 0x04	; 4
    1962:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    1966:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2006>
    196a:	84 ea       	ldi	r24, 0xA4	; 164
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    1972:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	61 f4       	brne	.+24     	; 0x1992 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    197a:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2007>
    197e:	86 e9       	ldi	r24, 0x96	; 150
    1980:	94 e0       	ldi	r25, 0x04	; 4
    1982:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    1986:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2007>
    198a:	82 ea       	ldi	r24, 0xA2	; 162
    198c:	94 e0       	ldi	r25, 0x04	; 4
    198e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1992:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1996:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    199a:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    199e:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    19a2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <animation_time>
    19a6:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <animation_time+0x1>
    19aa:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <animation_time+0x2>
    19ae:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <animation_time+0x3>
    19b2:	84 17       	cp	r24, r20
    19b4:	95 07       	cpc	r25, r21
    19b6:	a6 07       	cpc	r26, r22
    19b8:	b7 07       	cpc	r27, r23
    19ba:	28 f4       	brcc	.+10     	; 0x19c6 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
			LED_ACUM_OFF;
    19c4:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    19c6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <anim_iteration.2006>
    19ca:	9f 5f       	subi	r25, 0xFF	; 255
    19cc:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2006>
		anim_iteration2--;
    19d0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <anim_iteration2.2007>
    19d4:	81 50       	subi	r24, 0x01	; 1
    19d6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2007>
		if (anim_iteration == 255) anim_iteration = 249;
    19da:	9f 3f       	cpi	r25, 0xFF	; 255
    19dc:	19 f4       	brne	.+6      	; 0x19e4 <animation+0xf8>
    19de:	99 ef       	ldi	r25, 0xF9	; 249
    19e0:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2006>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    19e4:	88 3f       	cpi	r24, 0xF8	; 248
    19e6:	19 f4       	brne	.+6      	; 0x19ee <animation+0x102>
    19e8:	8e ef       	ldi	r24, 0xFE	; 254
    19ea:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2007>
    19ee:	08 95       	ret

000019f0 <EEPROM_write>:
    19f0:	e1 99       	sbic	0x1c, 1	; 28
    19f2:	fe cf       	rjmp	.-4      	; 0x19f0 <EEPROM_write>
    19f4:	9f bb       	out	0x1f, r25	; 31
    19f6:	8e bb       	out	0x1e, r24	; 30
    19f8:	6d bb       	out	0x1d, r22	; 29
    19fa:	e2 9a       	sbi	0x1c, 2	; 28
    19fc:	e1 9a       	sbi	0x1c, 1	; 28
    19fe:	08 95       	ret

00001a00 <EEPROM_read>:
    1a00:	e1 99       	sbic	0x1c, 1	; 28
    1a02:	fe cf       	rjmp	.-4      	; 0x1a00 <EEPROM_read>
    1a04:	9f bb       	out	0x1f, r25	; 31
    1a06:	8e bb       	out	0x1e, r24	; 30
    1a08:	e0 9a       	sbi	0x1c, 0	; 28
    1a0a:	8d b3       	in	r24, 0x1d	; 29
    1a0c:	08 95       	ret

00001a0e <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    1a0e:	cf 93       	push	r28
    1a10:	c8 2f       	mov	r28, r24
    1a12:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1a16:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1a20:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1a24:	8c 2f       	mov	r24, r28
    1a26:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <display_set_error>
    1a2a:	0e 94 89 08 	call	0x1112	; 0x1112 <dcmotor_set_error>
    1a2e:	c1 30       	cpi	r28, 0x01	; 1
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <set_error_state+0x2c>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <servo_error>
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <set_error_state+0x32>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <servo_error>
    1a40:	0e 94 2d 18 	call	0x305a	; 0x305a <system_error>
    1a44:	c0 93 a8 04 	sts	0x04A8, r28	; 0x8004a8 <led_blink>
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <error_init>:
    1a4c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    1a50:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    1a54:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    1a58:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    1a5c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1a60:	8f e6       	ldi	r24, 0x6F	; 111
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <evTime_off>
    1a68:	8f e5       	ldi	r24, 0x5F	; 95
    1a6a:	92 e0       	ldi	r25, 0x02	; 2
    1a6c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <evTime_off>
    1a70:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <led_blink>
    1a74:	08 95       	ret

00001a76 <error_deinit>:
    1a76:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    1a7a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    1a7e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    1a82:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    1a86:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1a8a:	8f e6       	ldi	r24, 0x6F	; 111
    1a8c:	92 e0       	ldi	r25, 0x02	; 2
    1a8e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <evTime_off>
    1a92:	8f e5       	ldi	r24, 0x5F	; 95
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <evTime_off>
    1a9a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <led_blink>
    1a9e:	08 95       	ret

00001aa0 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    1aa0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    1aa4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    1aa8:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1aac:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    1ab0:	80 53       	subi	r24, 0x30	; 48
    1ab2:	98 4f       	sbci	r25, 0xF8	; 248
    1ab4:	af 4f       	sbci	r26, 0xFF	; 255
    1ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab8:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <error_servo_tim>
    1abc:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <error_servo_tim+0x1>
    1ac0:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <error_servo_tim+0x2>
    1ac4:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <error_servo_tim+0x3>
    1ac8:	08 95       	ret

00001aca <error_event>:
}

void error_event(void)
{
    1aca:	4f 92       	push	r4
    1acc:	5f 92       	push	r5
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1ae2:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1ae6:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1aea:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1aee:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1af2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <error_event_timer.2088>
    1af6:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <error_event_timer.2088+0x1>
    1afa:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <error_event_timer.2088+0x2>
    1afe:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <error_event_timer.2088+0x3>
    1b02:	84 17       	cp	r24, r20
    1b04:	95 07       	cpc	r25, r21
    1b06:	a6 07       	cpc	r26, r22
    1b08:	b7 07       	cpc	r27, r23
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <error_event+0x44>
    1b0c:	47 c2       	rjmp	.+1166   	; 0x1f9c <error_event+0x4d2>
    1b0e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1b12:	80 ff       	sbrs	r24, 0
    1b14:	43 c2       	rjmp	.+1158   	; 0x1f9c <error_event+0x4d2>
	{
		error_event_timer = mktime.ms + 250;
    1b16:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1b1a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1b1e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1b22:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1b26:	46 50       	subi	r20, 0x06	; 6
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <error_event_timer.2088>
    1b32:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <error_event_timer.2088+0x1>
    1b36:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <error_event_timer.2088+0x2>
    1b3a:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <error_event_timer.2088+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1b3e:	81 fd       	sbrc	r24, 1
    1b40:	2d c2       	rjmp	.+1114   	; 0x1f9c <error_event+0x4d2>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    1b42:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    1b46:	4b 01       	movw	r8, r22
    1b48:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1b4a:	0e 94 85 08 	call	0x110a	; 0x110a <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    1b4e:	bc 01       	movw	r22, r24
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
    1b58:	6b 01       	movw	r12, r22
    1b5a:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    1b5c:	25 e9       	ldi	r18, 0x95	; 149
    1b5e:	35 e6       	ldi	r19, 0x65	; 101
    1b60:	40 ed       	ldi	r20, 0xD0	; 208
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 c0 1b 	call	0x3780	; 0x3780 <pow>
    1b68:	2b 01       	movw	r4, r22
    1b6a:	3c 01       	movw	r6, r24
    1b6c:	a7 01       	movw	r20, r14
    1b6e:	96 01       	movw	r18, r12
    1b70:	c5 01       	movw	r24, r10
    1b72:	b4 01       	movw	r22, r8
    1b74:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	48 ec       	ldi	r20, 0xC8	; 200
    1b7e:	52 e4       	ldi	r21, 0x42	; 66
    1b80:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    1b84:	4b 01       	movw	r8, r22
    1b86:	5c 01       	movw	r10, r24
    1b88:	23 e3       	ldi	r18, 0x33	; 51
    1b8a:	33 e3       	ldi	r19, 0x33	; 51
    1b8c:	43 e6       	ldi	r20, 0x63	; 99
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	c7 01       	movw	r24, r14
    1b92:	b6 01       	movw	r22, r12
    1b94:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	48 ec       	ldi	r20, 0xC8	; 200
    1b9e:	52 e4       	ldi	r21, 0x42	; 66
    1ba0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	c5 01       	movw	r24, r10
    1baa:	b4 01       	movw	r22, r8
    1bac:	0e 94 82 19 	call	0x3304	; 0x3304 <__subsf3>
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e4       	ldi	r20, 0x40	; 64
    1bb6:	50 e4       	ldi	r21, 0x40	; 64
    1bb8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    1bbc:	4b 01       	movw	r8, r22
    1bbe:	5c 01       	movw	r10, r24
    1bc0:	28 e5       	ldi	r18, 0x58	; 88
    1bc2:	39 e3       	ldi	r19, 0x39	; 57
    1bc4:	44 e3       	ldi	r20, 0x34	; 52
    1bc6:	5c e3       	ldi	r21, 0x3C	; 60
    1bc8:	c3 01       	movw	r24, r6
    1bca:	b2 01       	movw	r22, r4
    1bcc:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	c5 01       	movw	r24, r10
    1bd6:	b4 01       	movw	r22, r8
    1bd8:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    1bdc:	4b 01       	movw	r8, r22
    1bde:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1be0:	85 e0       	ldi	r24, 0x05	; 5
    1be2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1be6:	68 2f       	mov	r22, r24
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	62 53       	subi	r22, 0x32	; 50
    1bec:	71 09       	sbc	r23, r1
    1bee:	07 2e       	mov	r0, r23
    1bf0:	00 0c       	add	r0, r0
    1bf2:	88 0b       	sbc	r24, r24
    1bf4:	99 0b       	sbc	r25, r25
    1bf6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
    1bfa:	a7 01       	movw	r20, r14
    1bfc:	96 01       	movw	r18, r12
    1bfe:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	48 ec       	ldi	r20, 0xC8	; 200
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    1c0e:	a5 01       	movw	r20, r10
    1c10:	94 01       	movw	r18, r8
    1c12:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    1c16:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <motor_error_value>
    1c1a:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <motor_error_value+0x1>
    1c1e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <motor_error_value+0x2>
    1c22:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	0e 94 78 11 	call	0x22f0	; 0x22f0 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1c2c:	42 e0       	ldi	r20, 0x02	; 2
    1c2e:	5b e2       	ldi	r21, 0x2B	; 43
    1c30:	67 e0       	ldi	r22, 0x07	; 7
    1c32:	7d e3       	ldi	r23, 0x3D	; 61
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	0e 94 91 11 	call	0x2322	; 0x2322 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1c3a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <motor_error_value>
    1c3e:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <motor_error_value+0x1>
    1c42:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <motor_error_value+0x2>
    1c46:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <motor_error_value+0x3>
    1c4a:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	44 f4       	brge	.+16     	; 0x1c62 <error_event+0x198>
    1c52:	0e 94 40 08 	call	0x1080	; 0x1080 <dcmotor_is_on>
    1c56:	89 2b       	or	r24, r25
    1c58:	21 f0       	breq	.+8      	; 0x1c62 <error_event+0x198>
		{
			error_motor_status = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <error_motor_status>
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1c62:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR))
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    1c6c:	88 23       	and	r24, r24
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <error_event+0x1a8>
    1c70:	d2 c0       	rjmp	.+420    	; 0x1e16 <error_event+0x34c>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1c72:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <error_motor_status>
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <error_event+0x1b2>
    1c7a:	88 c0       	rjmp	.+272    	; 0x1d8c <error_event+0x2c2>
			{
				switch(error_motor_state)
    1c7c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <error_event+0x1bc>
    1c84:	60 c0       	rjmp	.+192    	; 0x1d46 <error_event+0x27c>
    1c86:	28 f4       	brcc	.+10     	; 0x1c92 <error_event+0x1c8>
    1c88:	88 23       	and	r24, r24
    1c8a:	51 f0       	breq	.+20     	; 0x1ca0 <error_event+0x1d6>
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	69 f1       	breq	.+90     	; 0x1cea <error_event+0x220>
    1c90:	c2 c0       	rjmp	.+388    	; 0x1e16 <error_event+0x34c>
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <error_event+0x1ce>
    1c96:	62 c0       	rjmp	.+196    	; 0x1d5c <error_event+0x292>
    1c98:	84 30       	cpi	r24, 0x04	; 4
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <error_event+0x1d4>
    1c9c:	63 c0       	rjmp	.+198    	; 0x1d64 <error_event+0x29a>
    1c9e:	bb c0       	rjmp	.+374    	; 0x1e16 <error_event+0x34c>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1ca6:	0e 94 85 08 	call	0x110a	; 0x110a <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1caa:	2e e1       	ldi	r18, 0x1E	; 30
    1cac:	ac 01       	movw	r20, r24
    1cae:	24 9f       	mul	r18, r20
    1cb0:	c0 01       	movw	r24, r0
    1cb2:	25 9f       	mul	r18, r21
    1cb4:	90 0d       	add	r25, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	48 e8       	ldi	r20, 0x88	; 136
    1cba:	53 e1       	ldi	r21, 0x13	; 19
    1cbc:	7a 01       	movw	r14, r20
    1cbe:	e8 1a       	sub	r14, r24
    1cc0:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1cc2:	ff 92       	push	r15
    1cc4:	ef 92       	push	r14
    1cc6:	88 ef       	ldi	r24, 0xF8	; 248
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9f 93       	push	r25
    1ccc:	8f 93       	push	r24
    1cce:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1cd2:	a7 01       	movw	r20, r14
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	8f e6       	ldi	r24, 0x6F	; 111
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
					break;
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	96 c0       	rjmp	.+300    	; 0x1e16 <error_event+0x34c>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1cea:	8f e6       	ldi	r24, 0x6F	; 111
    1cec:	92 e0       	ldi	r25, 0x02	; 2
    1cee:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1cf2:	89 2b       	or	r24, r25
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <error_event+0x22e>
    1cf6:	8f c0       	rjmp	.+286    	; 0x1e16 <error_event+0x34c>
						{
							dcmotor_set_try();
    1cf8:	0e 94 97 08 	call	0x112e	; 0x112e <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1cfc:	0e 94 85 08 	call	0x110a	; 0x110a <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1d00:	2e e1       	ldi	r18, 0x1E	; 30
    1d02:	ac 01       	movw	r20, r24
    1d04:	24 9f       	mul	r18, r20
    1d06:	c0 01       	movw	r24, r0
    1d08:	25 9f       	mul	r18, r21
    1d0a:	90 0d       	add	r25, r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	48 e8       	ldi	r20, 0x88	; 136
    1d10:	53 e1       	ldi	r21, 0x13	; 19
    1d12:	7a 01       	movw	r14, r20
    1d14:	e8 1a       	sub	r14, r24
    1d16:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1d18:	ff 92       	push	r15
    1d1a:	ef 92       	push	r14
    1d1c:	87 e1       	ldi	r24, 0x17	; 23
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1d28:	a7 01       	movw	r20, r14
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	8f e6       	ldi	r24, 0x6F	; 111
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	68 c0       	rjmp	.+208    	; 0x1e16 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1d46:	8f e6       	ldi	r24, 0x6F	; 111
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1d4e:	89 2b       	or	r24, r25
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <error_event+0x28a>
    1d52:	61 c0       	rjmp	.+194    	; 0x1e16 <error_event+0x34c>
						{
							error_motor_state = ERR_M_ERROR;
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1d5a:	5d c0       	rjmp	.+186    	; 0x1e16 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <set_error_state>
					break;
    1d62:	59 c0       	rjmp	.+178    	; 0x1e16 <error_event+0x34c>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1d64:	8f e6       	ldi	r24, 0x6F	; 111
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1d6c:	89 2b       	or	r24, r25
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <error_event+0x2a8>
    1d70:	52 c0       	rjmp	.+164    	; 0x1e16 <error_event+0x34c>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1d72:	40 ed       	ldi	r20, 0xD0	; 208
    1d74:	57 e0       	ldi	r21, 0x07	; 7
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	8f e6       	ldi	r24, 0x6F	; 111
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
							error_motor_state = error_motor_last_state;
    1d82:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <error_motor_last_state>
    1d86:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1d8a:	45 c0       	rjmp	.+138    	; 0x1e16 <error_event+0x34c>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1d8c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	f1 f0       	breq	.+60     	; 0x1dd0 <error_event+0x306>
    1d94:	18 f4       	brcc	.+6      	; 0x1d9c <error_event+0x2d2>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	31 f0       	breq	.+12     	; 0x1da6 <error_event+0x2dc>
    1d9a:	3d c0       	rjmp	.+122    	; 0x1e16 <error_event+0x34c>
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	79 f1       	breq	.+94     	; 0x1dfe <error_event+0x334>
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	89 f1       	breq	.+98     	; 0x1e06 <error_event+0x33c>
    1da4:	38 c0       	rjmp	.+112    	; 0x1e16 <error_event+0x34c>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1da6:	8f e6       	ldi	r24, 0x6F	; 111
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1dae:	89 2b       	or	r24, r25
    1db0:	91 f1       	breq	.+100    	; 0x1e16 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1db2:	40 ed       	ldi	r20, 0xD0	; 208
    1db4:	57 e0       	ldi	r21, 0x07	; 7
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	8f e6       	ldi	r24, 0x6F	; 111
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1dc2:	84 e0       	ldi	r24, 0x04	; 4
    1dc4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1dce:	23 c0       	rjmp	.+70     	; 0x1e16 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1dd0:	8f e6       	ldi	r24, 0x6F	; 111
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1dd8:	89 2b       	or	r24, r25
    1dda:	e9 f0       	breq	.+58     	; 0x1e16 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1ddc:	40 ed       	ldi	r20, 0xD0	; 208
    1dde:	57 e0       	ldi	r21, 0x07	; 7
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	8f e6       	ldi	r24, 0x6F	; 111
    1de6:	92 e0       	ldi	r25, 0x02	; 2
    1de8:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
						dcmotor_set_normal_state();
    1dec:	0e 94 a1 08 	call	0x1142	; 0x1142 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1dfc:	0c c0       	rjmp	.+24     	; 0x1e16 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <set_error_state>
					break;
    1e04:	08 c0       	rjmp	.+16     	; 0x1e16 <error_event+0x34c>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1e06:	8f e6       	ldi	r24, 0x6F	; 111
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1e0e:	89 2b       	or	r24, r25
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <error_event+0x34c>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1e12:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    1e1c:	88 23       	and	r24, r24
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <error_event+0x358>
    1e20:	bd c0       	rjmp	.+378    	; 0x1f9c <error_event+0x4d2>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1e22:	84 e0       	ldi	r24, 0x04	; 4
    1e24:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <servo_error_value+0x1>
    1e2e:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	0e 94 78 11 	call	0x22f0	; 0x22f0 <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1e38:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <servo_error_value>
    1e3c:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <servo_error_value+0x1>
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	20 f5       	brcc	.+72     	; 0x1e8e <error_event+0x3c4>
    1e46:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1e4a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1e4e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1e52:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1e56:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <error_servo_tim>
    1e5a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <error_servo_tim+0x1>
    1e5e:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <error_servo_tim+0x2>
    1e62:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <error_servo_tim+0x3>
    1e66:	84 17       	cp	r24, r20
    1e68:	95 07       	cpc	r25, r21
    1e6a:	a6 07       	cpc	r26, r22
    1e6c:	b7 07       	cpc	r27, r23
    1e6e:	78 f4       	brcc	.+30     	; 0x1e8e <error_event+0x3c4>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1e76:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <error_event+0x408>
    1e7e:	a8 f0       	brcs	.+42     	; 0x1eaa <error_event+0x3e0>
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <error_event+0x3bc>
    1e84:	4b c0       	rjmp	.+150    	; 0x1f1c <error_event+0x452>
    1e86:	83 30       	cpi	r24, 0x03	; 3
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <error_event+0x3c2>
    1e8a:	51 c0       	rjmp	.+162    	; 0x1f2e <error_event+0x464>
    1e8c:	87 c0       	rjmp	.+270    	; 0x1f9c <error_event+0x4d2>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1e8e:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1e92:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1e96:	82 30       	cpi	r24, 0x02	; 2
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <error_event+0x3d2>
    1e9a:	66 c0       	rjmp	.+204    	; 0x1f68 <error_event+0x49e>
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <error_event+0x3d8>
    1ea0:	7a c0       	rjmp	.+244    	; 0x1f96 <error_event+0x4cc>
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <error_event+0x3de>
    1ea6:	7a c0       	rjmp	.+244    	; 0x1f9c <error_event+0x4d2>
    1ea8:	46 c0       	rjmp	.+140    	; 0x1f36 <error_event+0x46c>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1eb0:	8b e3       	ldi	r24, 0x3B	; 59
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1ebc:	4c ed       	ldi	r20, 0xDC	; 220
    1ebe:	55 e0       	ldi	r21, 0x05	; 5
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	8f e5       	ldi	r24, 0x5F	; 95
    1ec6:	92 e0       	ldi	r25, 0x02	; 2
    1ec8:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
					break;
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	65 c0       	rjmp	.+202    	; 0x1f9c <error_event+0x4d2>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1ed2:	8f e5       	ldi	r24, 0x5F	; 95
    1ed4:	92 e0       	ldi	r25, 0x02	; 2
    1ed6:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1eda:	89 2b       	or	r24, r25
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <error_event+0x416>
    1ede:	5e c0       	rjmp	.+188    	; 0x1f9c <error_event+0x4d2>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1ee0:	0e 94 45 13 	call	0x268a	; 0x268a <servo_get_try_cnt>
    1ee4:	04 97       	sbiw	r24, 0x04	; 4
    1ee6:	24 f0       	brlt	.+8      	; 0x1ef0 <error_event+0x426>
							{
								error_servo_state = ERR_S_ERROR;
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
								break;
    1eee:	56 c0       	rjmp	.+172    	; 0x1f9c <error_event+0x4d2>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1ef0:	40 ed       	ldi	r20, 0xD0	; 208
    1ef2:	57 e0       	ldi	r21, 0x07	; 7
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	8f e5       	ldi	r24, 0x5F	; 95
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
							error_servo_state = ERR_S_TRY;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
							servo_enable_try();
    1f06:	0e 94 39 13 	call	0x2672	; 0x2672 <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1f0a:	86 e5       	ldi	r24, 0x56	; 86
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	9f 93       	push	r25
    1f10:	8f 93       	push	r24
    1f12:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	40 c0       	rjmp	.+128    	; 0x1f9c <error_event+0x4d2>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1f1c:	8f e5       	ldi	r24, 0x5F	; 95
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1f24:	89 2b       	or	r24, r25
    1f26:	d1 f1       	breq	.+116    	; 0x1f9c <error_event+0x4d2>
						{
							error_servo_state = ERR_S_OK;
    1f28:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1f2c:	37 c0       	rjmp	.+110    	; 0x1f9c <error_event+0x4d2>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <set_error_state>
					break;
    1f34:	33 c0       	rjmp	.+102    	; 0x1f9c <error_event+0x4d2>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1f36:	8f e5       	ldi	r24, 0x5F	; 95
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1f3e:	89 2b       	or	r24, r25
    1f40:	69 f1       	breq	.+90     	; 0x1f9c <error_event+0x4d2>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1f42:	40 ed       	ldi	r20, 0xD0	; 208
    1f44:	57 e0       	ldi	r21, 0x07	; 7
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	8f e5       	ldi	r24, 0x5F	; 95
    1f4c:	92 e0       	ldi	r25, 0x02	; 2
    1f4e:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
						error_servo_state = ERR_M_OK;
    1f52:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1f56:	80 e7       	ldi	r24, 0x70	; 112
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	9f 93       	push	r25
    1f5c:	8f 93       	push	r24
    1f5e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	1a c0       	rjmp	.+52     	; 0x1f9c <error_event+0x4d2>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1f68:	8f e5       	ldi	r24, 0x5F	; 95
    1f6a:	92 e0       	ldi	r25, 0x02	; 2
    1f6c:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    1f70:	89 2b       	or	r24, r25
    1f72:	a1 f0       	breq	.+40     	; 0x1f9c <error_event+0x4d2>
					{
						error_servo_state = ERR_S_OK;
    1f74:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1f78:	80 e7       	ldi	r24, 0x70	; 112
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9f 93       	push	r25
    1f7e:	8f 93       	push	r24
    1f80:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1f84:	6c ea       	ldi	r22, 0xAC	; 172
    1f86:	7d e0       	ldi	r23, 0x0D	; 13
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 bb 13 	call	0x2776	; 0x2776 <servo_try_reset_timeout>
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <error_event+0x4d2>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1f9c:	ff 90       	pop	r15
    1f9e:	ef 90       	pop	r14
    1fa0:	df 90       	pop	r13
    1fa2:	cf 90       	pop	r12
    1fa4:	bf 90       	pop	r11
    1fa6:	af 90       	pop	r10
    1fa8:	9f 90       	pop	r9
    1faa:	8f 90       	pop	r8
    1fac:	7f 90       	pop	r7
    1fae:	6f 90       	pop	r6
    1fb0:	5f 90       	pop	r5
    1fb2:	4f 90       	pop	r4
    1fb4:	08 95       	ret

00001fb6 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1fb6:	4e e5       	ldi	r20, 0x5E	; 94
    1fb8:	51 e0       	ldi	r21, 0x01	; 1
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	82 e5       	ldi	r24, 0x52	; 82
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <evTime_process_period>
    1fc6:	89 2b       	or	r24, r25
    1fc8:	09 f1       	breq	.+66     	; 0x200c <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1fca:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <led_blink>
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	71 f4       	brne	.+28     	; 0x1fee <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1fd2:	92 b3       	in	r25, 0x12	; 18
    1fd4:	80 e1       	ldi	r24, 0x10	; 16
    1fd6:	89 27       	eor	r24, r25
    1fd8:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1fda:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1fde:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1fe2:	90 62       	ori	r25, 0x20	; 32
    1fe4:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1fe8:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1fec:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	69 f4       	brne	.+26     	; 0x200c <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1ff2:	92 b3       	in	r25, 0x12	; 18
    1ff4:	80 e4       	ldi	r24, 0x40	; 64
    1ff6:	89 27       	eor	r24, r25
    1ff8:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1ffa:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1ffe:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2002:	90 62       	ori	r25, 0x20	; 32
    2004:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2008:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    200c:	08 95       	ret

0000200e <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    200e:	fc 01       	movw	r30, r24
    2010:	20 81       	ld	r18, Z
    2012:	31 81       	ldd	r19, Z+1	; 0x01
    2014:	62 30       	cpi	r22, 0x02	; 2
    2016:	58 f0       	brcs	.+22     	; 0x202e <filtered_value+0x20>
    2018:	32 96       	adiw	r30, 0x02	; 2
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	41 91       	ld	r20, Z+
    201e:	51 91       	ld	r21, Z+
    2020:	24 0f       	add	r18, r20
    2022:	35 1f       	adc	r19, r21
    2024:	36 95       	lsr	r19
    2026:	27 95       	ror	r18
    2028:	9f 5f       	subi	r25, 0xFF	; 255
    202a:	69 13       	cpse	r22, r25
    202c:	f7 cf       	rjmp	.-18     	; 0x201c <filtered_value+0xe>
    202e:	c9 01       	movw	r24, r18
    2030:	08 95       	ret

00002032 <init_measure>:
    2032:	ea eb       	ldi	r30, 0xBA	; 186
    2034:	f2 e0       	ldi	r31, 0x02	; 2
    2036:	22 ee       	ldi	r18, 0xE2	; 226
    2038:	32 e0       	ldi	r19, 0x02	; 2
    203a:	81 ef       	ldi	r24, 0xF1	; 241
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	81 93       	st	Z+, r24
    2040:	91 93       	st	Z+, r25
    2042:	2e 17       	cp	r18, r30
    2044:	3f 07       	cpc	r19, r31
    2046:	d9 f7       	brne	.-10     	; 0x203e <init_measure+0xc>
    2048:	e9 e9       	ldi	r30, 0x99	; 153
    204a:	f2 e0       	ldi	r31, 0x02	; 2
    204c:	87 eb       	ldi	r24, 0xB7	; 183
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	11 92       	st	Z+, r1
    2052:	11 92       	st	Z+, r1
    2054:	8e 17       	cp	r24, r30
    2056:	9f 07       	cpc	r25, r31
    2058:	d9 f7       	brne	.-10     	; 0x2050 <init_measure+0x1e>
    205a:	e1 e8       	ldi	r30, 0x81	; 129
    205c:	f2 e0       	ldi	r31, 0x02	; 2
    205e:	85 e9       	ldi	r24, 0x95	; 149
    2060:	92 e0       	ldi	r25, 0x02	; 2
    2062:	11 92       	st	Z+, r1
    2064:	11 92       	st	Z+, r1
    2066:	8e 17       	cp	r24, r30
    2068:	9f 07       	cpc	r25, r31
    206a:	d9 f7       	brne	.-10     	; 0x2062 <init_measure+0x30>
    206c:	08 95       	ret

0000206e <measure_process>:
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    207e:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    2082:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    2086:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    208a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <measure_timer>
    208e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <measure_timer+0x1>
    2092:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <measure_timer+0x2>
    2096:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <measure_timer+0x3>
    209a:	84 17       	cp	r24, r20
    209c:	95 07       	cpc	r25, r21
    209e:	a6 07       	cpc	r26, r22
    20a0:	b7 07       	cpc	r27, r23
    20a2:	08 f0       	brcs	.+2      	; 0x20a6 <measure_process+0x38>
    20a4:	d1 c0       	rjmp	.+418    	; 0x2248 <measure_process+0x1da>
    20a6:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    20aa:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    20ae:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    20b2:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    20b6:	44 96       	adiw	r24, 0x14	; 20
    20b8:	a1 1d       	adc	r26, r1
    20ba:	b1 1d       	adc	r27, r1
    20bc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <measure_timer>
    20c0:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <measure_timer+0x1>
    20c4:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <measure_timer+0x2>
    20c8:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <measure_timer+0x3>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	0e 94 e6 03 	call	0x7cc	; 0x7cc <adc_read>
    20d2:	ec 01       	movw	r28, r24
    20d4:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    20d8:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
    20e4:	21 e7       	ldi	r18, 0x71	; 113
    20e6:	3d e3       	ldi	r19, 0x3D	; 61
    20e8:	4a e8       	ldi	r20, 0x8A	; 138
    20ea:	5e e3       	ldi	r21, 0x3E	; 62
    20ec:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    20f0:	6b 01       	movw	r12, r22
    20f2:	7c 01       	movw	r14, r24
    20f4:	be 01       	movw	r22, r28
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
    20fe:	9b 01       	movw	r18, r22
    2100:	ac 01       	movw	r20, r24
    2102:	c7 01       	movw	r24, r14
    2104:	b6 01       	movw	r22, r12
    2106:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    210a:	0e 94 6d 1a 	call	0x34da	; 0x34da <__fixunssfsi>
    210e:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <accum_adc+0x1>
    2112:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <accum_adc>
    2116:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    211a:	e2 2f       	mov	r30, r18
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	e6 54       	subi	r30, 0x46	; 70
    2124:	fd 4f       	sbci	r31, 0xFD	; 253
    2126:	71 83       	std	Z+1, r23	; 0x01
    2128:	60 83       	st	Z, r22
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	82 0f       	add	r24, r18
    212e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <iteration_adc_accum_table>
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	0e 94 e6 03 	call	0x7cc	; 0x7cc <adc_read>
    2138:	80 32       	cpi	r24, 0x20	; 32
    213a:	91 05       	cpc	r25, r1
    213c:	30 f0       	brcs	.+12     	; 0x214a <measure_process+0xdc>
    213e:	4f 97       	sbiw	r24, 0x1f	; 31
    2140:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <motor_adc+0x1>
    2144:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <motor_adc>
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <measure_process+0xe4>
    214a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <motor_adc+0x1>
    214e:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <motor_adc>
    2152:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	ee 0f       	add	r30, r30
    215a:	ff 1f       	adc	r31, r31
    215c:	e7 56       	subi	r30, 0x67	; 103
    215e:	fd 4f       	sbci	r31, 0xFD	; 253
    2160:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <motor_adc>
    2164:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <motor_adc+0x1>
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <adc_read>
    2172:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <s_o_t_adc+0x1>
    2176:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <s_o_t_adc>
    217a:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <calibration_value>
    217e:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <calibration_value+0x1>
    2182:	21 15       	cp	r18, r1
    2184:	31 05       	cpc	r19, r1
    2186:	71 f0       	breq	.+28     	; 0x21a4 <measure_process+0x136>
    2188:	28 17       	cp	r18, r24
    218a:	39 07       	cpc	r19, r25
    218c:	28 f4       	brcc	.+10     	; 0x2198 <measure_process+0x12a>
    218e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <s_o_t_adc+0x1>
    2192:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <s_o_t_adc>
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <measure_process+0x136>
    2198:	28 1b       	sub	r18, r24
    219a:	39 0b       	sbc	r19, r25
    219c:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <s_o_t_adc+0x1>
    21a0:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <s_o_t_adc>
    21a4:	c0 91 80 02 	lds	r28, 0x0280	; 0x800280 <s_o_t_iteration_adc_table>
    21a8:	ec 2f       	mov	r30, r28
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	ef 57       	subi	r30, 0x7F	; 127
    21b2:	fd 4f       	sbci	r31, 0xFD	; 253
    21b4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <s_o_t_adc>
    21b8:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <s_o_t_adc+0x1>
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	d0 91 b9 02 	lds	r29, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    21c4:	df 5f       	subi	r29, 0xFF	; 255
    21c6:	d0 93 b9 02 	sts	0x02B9, r29	; 0x8002b9 <iteration_adc_motor_table>
    21ca:	cf 5f       	subi	r28, 0xFF	; 255
    21cc:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <s_o_t_iteration_adc_table>
    21d0:	64 e1       	ldi	r22, 0x14	; 20
    21d2:	8a eb       	ldi	r24, 0xBA	; 186
    21d4:	92 e0       	ldi	r25, 0x02	; 2
    21d6:	0e 94 07 10 	call	0x200e	; 0x200e <filtered_value>
    21da:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <filtered_accum_adc_val+0x1>
    21de:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <filtered_accum_adc_val>
    21e2:	6f e0       	ldi	r22, 0x0F	; 15
    21e4:	89 e9       	ldi	r24, 0x99	; 153
    21e6:	92 e0       	ldi	r25, 0x02	; 2
    21e8:	0e 94 07 10 	call	0x200e	; 0x200e <filtered_value>
    21ec:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <motor_filter_value+0x1>
    21f0:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <motor_filter_value>
    21f4:	6a e0       	ldi	r22, 0x0A	; 10
    21f6:	81 e8       	ldi	r24, 0x81	; 129
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	0e 94 07 10 	call	0x200e	; 0x200e <filtered_value>
    21fe:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <s_o_t_filter_value+0x1>
    2202:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <s_o_t_filter_value>
    2206:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <debug_msg_counter>
    220a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <debug_msg_counter+0x1>
    220e:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <debug_msg_counter+0x2>
    2212:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <debug_msg_counter+0x3>
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	a1 1d       	adc	r26, r1
    221a:	b1 1d       	adc	r27, r1
    221c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <debug_msg_counter>
    2220:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <debug_msg_counter+0x1>
    2224:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <debug_msg_counter+0x2>
    2228:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <debug_msg_counter+0x3>
    222c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    2230:	84 31       	cpi	r24, 0x14	; 20
    2232:	11 f4       	brne	.+4      	; 0x2238 <measure_process+0x1ca>
    2234:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <iteration_adc_accum_table>
    2238:	ca 30       	cpi	r28, 0x0A	; 10
    223a:	11 f4       	brne	.+4      	; 0x2240 <measure_process+0x1d2>
    223c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <s_o_t_iteration_adc_table>
    2240:	df 30       	cpi	r29, 0x0F	; 15
    2242:	11 f4       	brne	.+4      	; 0x2248 <measure_process+0x1da>
    2244:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <iteration_adc_motor_table>
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	08 95       	ret

00002256 <measure_get_servo_calibration>:
    2256:	cf 92       	push	r12
    2258:	df 92       	push	r13
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	c0 90 b9 04 	lds	r12, 0x04B9	; 0x8004b9 <mktime+0x2>
    2266:	d0 90 ba 04 	lds	r13, 0x04BA	; 0x8004ba <mktime+0x3>
    226a:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <mktime+0x4>
    226e:	f0 90 bc 04 	lds	r15, 0x04BC	; 0x8004bc <mktime+0x5>
    2272:	8c eb       	ldi	r24, 0xBC	; 188
    2274:	c8 0e       	add	r12, r24
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	d8 1e       	adc	r13, r24
    227a:	e1 1c       	adc	r14, r1
    227c:	f1 1c       	adc	r15, r1
    227e:	c7 eb       	ldi	r28, 0xB7	; 183
    2280:	d4 e0       	ldi	r29, 0x04	; 4
    2282:	0e 94 37 10 	call	0x206e	; 0x206e <measure_process>
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	9b 81       	ldd	r25, Y+3	; 0x03
    228a:	ac 81       	ldd	r26, Y+4	; 0x04
    228c:	bd 81       	ldd	r27, Y+5	; 0x05
    228e:	c8 16       	cp	r12, r24
    2290:	d9 06       	cpc	r13, r25
    2292:	ea 06       	cpc	r14, r26
    2294:	fb 06       	cpc	r15, r27
    2296:	a8 f7       	brcc	.-22     	; 0x2282 <measure_get_servo_calibration+0x2c>
    2298:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	48 e8       	ldi	r20, 0x88	; 136
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 4e 1b 	call	0x369c	; 0x369c <__gesf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	24 f4       	brge	.+8      	; 0x22b4 <measure_get_servo_calibration+0x5e>
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <power_supply_type>
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <measure_get_servo_calibration+0x64>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <power_supply_type>
    22ba:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    22be:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    22c2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <calibration_value>
    22c6:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <calibration_value+0x1>
    22ca:	9f 93       	push	r25
    22cc:	8f 93       	push	r24
    22ce:	89 e8       	ldi	r24, 0x89	; 137
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	08 95       	ret

000022f0 <measure_get_filtered_value>:
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <measure_get_filtered_value+0xa>
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	40 f0       	brcs	.+16     	; 0x2308 <measure_get_filtered_value+0x18>
    22f8:	0c c0       	rjmp	.+24     	; 0x2312 <measure_get_filtered_value+0x22>
    22fa:	83 30       	cpi	r24, 0x03	; 3
    22fc:	79 f4       	brne	.+30     	; 0x231c <measure_get_filtered_value+0x2c>
    22fe:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    2302:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2306:	08 95       	ret
    2308:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <motor_filter_value>
    230c:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    2310:	08 95       	ret
    2312:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    2316:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    231a:	08 95       	ret
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	08 95       	ret

00002322 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2322:	cf 92       	push	r12
    2324:	df 92       	push	r13
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	6a 01       	movw	r12, r20
    232c:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    232e:	83 30       	cpi	r24, 0x03	; 3
    2330:	18 f4       	brcc	.+6      	; 0x2338 <measure_get_current+0x16>
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	50 f0       	brcs	.+20     	; 0x234a <measure_get_current+0x28>
    2336:	10 c0       	rjmp	.+32     	; 0x2358 <measure_get_current+0x36>
    2338:	83 30       	cpi	r24, 0x03	; 3
    233a:	a9 f4       	brne	.+42     	; 0x2366 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    233c:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    2340:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2348:	11 c0       	rjmp	.+34     	; 0x236c <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    234a:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    234e:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2356:	0a c0       	rjmp	.+20     	; 0x236c <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    2358:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <s_o_t_filter_value>
    235c:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2364:	03 c0       	rjmp	.+6      	; 0x236c <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    236c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5a e3       	ldi	r21, 0x3A	; 58
    2378:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 ea       	ldi	r20, 0xA0	; 160
    2382:	50 e4       	ldi	r21, 0x40	; 64
    2384:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    2388:	a7 01       	movw	r20, r14
    238a:	96 01       	movw	r18, r12
    238c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	08 95       	ret

0000239a <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	59 f0       	breq	.+22     	; 0x23c0 <mem_save_data+0x26>
    23aa:	28 f4       	brcc	.+10     	; 0x23b6 <mem_save_data+0x1c>
    23ac:	88 23       	and	r24, r24
    23ae:	91 f0       	breq	.+36     	; 0x23d4 <mem_save_data+0x3a>
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	51 f1       	breq	.+84     	; 0x2408 <mem_save_data+0x6e>
    23b4:	34 c0       	rjmp	.+104    	; 0x241e <mem_save_data+0x84>
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	51 f1       	breq	.+84     	; 0x240e <mem_save_data+0x74>
    23ba:	84 30       	cpi	r24, 0x04	; 4
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <mem_save_data+0x2c>
    23be:	2f c0       	rjmp	.+94     	; 0x241e <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	26 c0       	rjmp	.+76     	; 0x2412 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    23c6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <dark_menu_parameters_len>
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    23ce:	88 e0       	ldi	r24, 0x08	; 8
    23d0:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    23d4:	22 e0       	ldi	r18, 0x02	; 2
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23dc:	c8 2f       	mov	r28, r24
    23de:	7c 01       	movw	r14, r24
    23e0:	e2 0e       	add	r14, r18
    23e2:	f3 1e       	adc	r15, r19
    23e4:	99 27       	eor	r25, r25
    23e6:	8e 15       	cp	r24, r14
    23e8:	9f 05       	cpc	r25, r15
    23ea:	cc f4       	brge	.+50     	; 0x241e <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    23ec:	f8 01       	movw	r30, r16
    23ee:	61 91       	ld	r22, Z+
    23f0:	8f 01       	movw	r16, r30
    23f2:	8c 2f       	mov	r24, r28
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23fa:	cf 5f       	subi	r28, 0xFF	; 255
    23fc:	8c 2f       	mov	r24, r28
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	8e 15       	cp	r24, r14
    2402:	9f 05       	cpc	r25, r15
    2404:	9c f3       	brlt	.-26     	; 0x23ec <mem_save_data+0x52>
    2406:	0b c0       	rjmp	.+22     	; 0x241e <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    240e:	86 e0       	ldi	r24, 0x06	; 6
    2410:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2412:	c8 2f       	mov	r28, r24
    2414:	7c 01       	movw	r14, r24
    2416:	f2 e0       	ldi	r31, 0x02	; 2
    2418:	ef 0e       	add	r14, r31
    241a:	f1 1c       	adc	r15, r1
    241c:	e7 cf       	rjmp	.-50     	; 0x23ec <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	08 95       	ret

0000242a <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	59 f0       	breq	.+22     	; 0x2450 <mem_read_data+0x26>
    243a:	28 f4       	brcc	.+10     	; 0x2446 <mem_read_data+0x1c>
    243c:	88 23       	and	r24, r24
    243e:	91 f0       	breq	.+36     	; 0x2464 <mem_read_data+0x3a>
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	51 f1       	breq	.+84     	; 0x2498 <mem_read_data+0x6e>
    2444:	34 c0       	rjmp	.+104    	; 0x24ae <mem_read_data+0x84>
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	51 f1       	breq	.+84     	; 0x249e <mem_read_data+0x74>
    244a:	84 30       	cpi	r24, 0x04	; 4
    244c:	21 f0       	breq	.+8      	; 0x2456 <mem_read_data+0x2c>
    244e:	2f c0       	rjmp	.+94     	; 0x24ae <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	26 c0       	rjmp	.+76     	; 0x24a2 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    2456:	0e 94 7e 06 	call	0xcfc	; 0xcfc <dark_menu_parameters_len>
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    245e:	88 e0       	ldi	r24, 0x08	; 8
    2460:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    2462:	04 c0       	rjmp	.+8      	; 0x246c <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2464:	22 e0       	ldi	r18, 0x02	; 2
    2466:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    246c:	c8 2f       	mov	r28, r24
    246e:	7c 01       	movw	r14, r24
    2470:	e2 0e       	add	r14, r18
    2472:	f3 1e       	adc	r15, r19
    2474:	99 27       	eor	r25, r25
    2476:	8e 15       	cp	r24, r14
    2478:	9f 05       	cpc	r25, r15
    247a:	cc f4       	brge	.+50     	; 0x24ae <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    247c:	8c 2f       	mov	r24, r28
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <EEPROM_read>
    2484:	f8 01       	movw	r30, r16
    2486:	81 93       	st	Z+, r24
    2488:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    248a:	cf 5f       	subi	r28, 0xFF	; 255
    248c:	8c 2f       	mov	r24, r28
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	8e 15       	cp	r24, r14
    2492:	9f 05       	cpc	r25, r15
    2494:	9c f3       	brlt	.-26     	; 0x247c <mem_read_data+0x52>
    2496:	0b c0       	rjmp	.+22     	; 0x24ae <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    249e:	86 e0       	ldi	r24, 0x06	; 6
    24a0:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    24a2:	c8 2f       	mov	r28, r24
    24a4:	7c 01       	movw	r14, r24
    24a6:	f2 e0       	ldi	r31, 0x02	; 2
    24a8:	ef 0e       	add	r14, r31
    24aa:	f1 1c       	adc	r15, r1
    24ac:	e7 cf       	rjmp	.-50     	; 0x247c <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	08 95       	ret

000024ba <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    24ba:	8f 92       	push	r8
    24bc:	9f 92       	push	r9
    24be:	af 92       	push	r10
    24c0:	bf 92       	push	r11
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    24da:	c2 e3       	ldi	r28, 0x32	; 50
    24dc:	d0 e0       	ldi	r29, 0x00	; 0
    24de:	9e 01       	movw	r18, r28
    24e0:	28 1b       	sub	r18, r24
    24e2:	31 09       	sbc	r19, r1
    24e4:	c9 01       	movw	r24, r18
    24e6:	89 01       	movw	r16, r18
    24e8:	00 0f       	add	r16, r16
    24ea:	11 1f       	adc	r17, r17
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	08 0f       	add	r16, r24
    24fa:	19 1f       	adc	r17, r25
    24fc:	00 53       	subi	r16, 0x30	; 48
    24fe:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    2506:	c8 1b       	sub	r28, r24
    2508:	d1 09       	sbc	r29, r1
    250a:	be 01       	movw	r22, r28
    250c:	66 0f       	add	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	cc 0f       	add	r28, r28
    2512:	dd 1f       	adc	r29, r29
    2514:	cc 0f       	add	r28, r28
    2516:	dd 1f       	adc	r29, r29
    2518:	cc 0f       	add	r28, r28
    251a:	dd 1f       	adc	r29, r29
    251c:	6c 0f       	add	r22, r28
    251e:	7d 1f       	adc	r23, r29
    2520:	65 50       	subi	r22, 0x05	; 5
    2522:	7b 4f       	sbci	r23, 0xFB	; 251
    2524:	60 1b       	sub	r22, r16
    2526:	71 0b       	sbc	r23, r17
    2528:	07 2e       	mov	r0, r23
    252a:	00 0c       	add	r0, r0
    252c:	88 0b       	sbc	r24, r24
    252e:	99 0b       	sbc	r25, r25
    2530:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
    2534:	4b 01       	movw	r8, r22
    2536:	5c 01       	movw	r10, r24
    2538:	6f 2d       	mov	r22, r15
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__floatunsisf>
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	c5 01       	movw	r24, r10
    254a:	b4 01       	movw	r22, r8
    254c:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	46 ec       	ldi	r20, 0xC6	; 198
    2556:	52 e4       	ldi	r21, 0x42	; 66
    2558:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__divsf3>
    255c:	6b 01       	movw	r12, r22
    255e:	7c 01       	movw	r14, r24
    2560:	b8 01       	movw	r22, r16
    2562:	11 0f       	add	r17, r17
    2564:	88 0b       	sbc	r24, r24
    2566:	99 0b       	sbc	r25, r25
    2568:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	c7 01       	movw	r24, r14
    2572:	b6 01       	movw	r22, r12
    2574:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    2578:	0e 94 6d 1a 	call	0x34da	; 0x34da <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    257c:	7b bd       	out	0x2b, r23	; 43
    257e:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	08 95       	ret

0000259a <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    259a:	94 e0       	ldi	r25, 0x04	; 4
    259c:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <servoD>
	servo_set_pwm_val(value);
    25a0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
    25a4:	08 95       	ret

000025a6 <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    25a6:	88 23       	and	r24, r24
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <servo_error+0xa>
		servo_set_pwm_val(0);
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
	LED_SERVO_OFF;
    25b0:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    25b2:	86 e0       	ldi	r24, 0x06	; 6
    25b4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
    25b8:	08 95       	ret

000025ba <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    25be:	2f e1       	ldi	r18, 0x1F	; 31
    25c0:	3e e4       	ldi	r19, 0x4E	; 78
    25c2:	37 bd       	out	0x27, r19	; 39
    25c4:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    25c6:	81 b3       	in	r24, 0x11	; 17
    25c8:	80 63       	ori	r24, 0x30	; 48
    25ca:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    25cc:	19 bc       	out	0x29, r1	; 41
    25ce:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    25d0:	1b bc       	out	0x2b, r1	; 43
    25d2:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    25d4:	8f b5       	in	r24, 0x2f	; 47
    25d6:	82 60       	ori	r24, 0x02	; 2
    25d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    25da:	8e b5       	in	r24, 0x2e	; 46
    25dc:	88 61       	ori	r24, 0x18	; 24
    25de:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    25e0:	8f b5       	in	r24, 0x2f	; 47
    25e2:	80 68       	ori	r24, 0x80	; 128
    25e4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    25e6:	8e b5       	in	r24, 0x2e	; 46
    25e8:	82 60       	ori	r24, 0x02	; 2
    25ea:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    25ec:	3b bd       	out	0x2b, r19	; 43
    25ee:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    25f0:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    25f8:	c9 ea       	ldi	r28, 0xA9	; 169
    25fa:	d4 e0       	ldi	r29, 0x04	; 4
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	88 83       	st	Y, r24
	servoD.value = 0;
    2600:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    2602:	8d ea       	ldi	r24, 0xAD	; 173
    2604:	94 e0       	ldi	r25, 0x04	; 4
    2606:	0e 94 9f 18 	call	0x313e	; 0x313e <evTime_init>
	servoD.try_cnt = 0;
    260a:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    260c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	debug_msg("SERVO: init\n");
    2610:	8f ea       	ldi	r24, 0xAF	; 175
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    2626:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <servoD>
    262a:	92 50       	subi	r25, 0x02	; 2
    262c:	21 e0       	ldi	r18, 0x01	; 1
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	92 30       	cpi	r25, 0x02	; 2
    2632:	10 f0       	brcs	.+4      	; 0x2638 <servo_is_open+0x12>
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
}
    2638:	c9 01       	movw	r24, r18
    263a:	08 95       	ret

0000263c <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    263c:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <servoD>
    2640:	91 30       	cpi	r25, 0x01	; 1
    2642:	a1 f4       	brne	.+40     	; 0x266c <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    2644:	e9 ea       	ldi	r30, 0xA9	; 169
    2646:	f4 e0       	ldi	r31, 0x04	; 4
    2648:	93 e0       	ldi	r25, 0x03	; 3
    264a:	90 83       	st	Z, r25
		servoD.value = value;
    264c:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    264e:	1f 92       	push	r1
    2650:	8f 93       	push	r24
    2652:	8c eb       	ldi	r24, 0xBC	; 188
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	9f 93       	push	r25
    2658:	8f 93       	push	r24
    265a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
}
    2670:	08 95       	ret

00002672 <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    2672:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    2676:	9f ef       	ldi	r25, 0xFF	; 255
    2678:	98 0f       	add	r25, r24
    267a:	92 30       	cpi	r25, 0x02	; 2
    267c:	28 f4       	brcc	.+10     	; 0x2688 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    267e:	e9 ea       	ldi	r30, 0xA9	; 169
    2680:	f4 e0       	ldi	r31, 0x04	; 4
    2682:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    2684:	85 e0       	ldi	r24, 0x05	; 5
    2686:	80 83       	st	Z, r24
    2688:	08 95       	ret

0000268a <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    268a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <servoD+0x9>
}
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	08 95       	ret

00002692 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    2692:	0e 94 13 13 	call	0x2626	; 0x2626 <servo_is_open>
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	d1 f0       	breq	.+52     	; 0x26ce <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    26a0:	e9 ea       	ldi	r30, 0xA9	; 169
    26a2:	f4 e0       	ldi	r31, 0x04	; 4
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 83       	st	Z, r24
		servoD.value = 0;
    26a8:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    26aa:	1f 92       	push	r1
    26ac:	1f 92       	push	r1
    26ae:	83 ed       	ldi	r24, 0xD3	; 211
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    26ba:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    26bc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
		return 1;
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    26ce:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <servoD>
    26d2:	25 30       	cpi	r18, 0x05	; 5
    26d4:	31 f4       	brne	.+12     	; 0x26e2 <servo_close+0x50>
	{
		servo_exit_try();
    26d6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <servo_exit_try>
		error_servo_timer();
    26da:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
		return 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    26e2:	08 95       	ret

000026e4 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    26e4:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <servoD+0x1>
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	29 f4       	brne	.+10     	; 0x26f6 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    26ec:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
		servo_close();
    26f0:	0e 94 49 13 	call	0x2692	; 0x2692 <servo_close>
    26f4:	09 c0       	rjmp	.+18     	; 0x2708 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	71 f4       	brne	.+28     	; 0x2716 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    26fa:	e9 ea       	ldi	r30, 0xA9	; 169
    26fc:	f4 e0       	ldi	r31, 0x04	; 4
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	80 83       	st	Z, r24
		servo_open(servoD.value);
    2702:	83 81       	ldd	r24, Z+3	; 0x03
    2704:	0e 94 8c 13 	call	0x2718	; 0x2718 <servo_open>
	}
	else return;
	try_count = 0;
    2708:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	servoD.try_cnt++;
    270c:	e9 ea       	ldi	r30, 0xA9	; 169
    270e:	f4 e0       	ldi	r31, 0x04	; 4
    2710:	81 85       	ldd	r24, Z+9	; 0x09
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	81 87       	std	Z+9, r24	; 0x09
    2716:	08 95       	ret

00002718 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    2718:	cf 93       	push	r28
    271a:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    271c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    2720:	9f ef       	ldi	r25, 0xFF	; 255
    2722:	98 0f       	add	r25, r24
    2724:	93 30       	cpi	r25, 0x03	; 3
    2726:	d0 f4       	brcc	.+52     	; 0x275c <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    2728:	e9 ea       	ldi	r30, 0xA9	; 169
    272a:	f4 e0       	ldi	r31, 0x04	; 4
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	80 83       	st	Z, r24
		servoD.value = value;
    2730:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    2732:	8c 2f       	mov	r24, r28
    2734:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    2738:	1f 92       	push	r1
    273a:	cf 93       	push	r28
    273c:	84 ee       	ldi	r24, 0xE4	; 228
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9f 93       	push	r25
    2742:	8f 93       	push	r24
    2744:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    2748:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    274a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
		return 1;
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0b c0       	rjmp	.+22     	; 0x2772 <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    275c:	85 30       	cpi	r24, 0x05	; 5
    275e:	39 f4       	brne	.+14     	; 0x276e <servo_open+0x56>
	{
		servo_exit_try();
    2760:	0e 94 72 13 	call	0x26e4	; 0x26e4 <servo_exit_try>
		error_servo_timer();
    2764:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
		return 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <servo_open+0x5a>
	}
	else return 0;
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
}
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2776:	ab 01       	movw	r20, r22
    2778:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    277a:	8d ea       	ldi	r24, 0xAD	; 173
    277c:	94 e0       	ldi	r25, 0x04	; 4
    277e:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
    2782:	08 95       	ret

00002784 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    278a:	4b e4       	ldi	r20, 0x4B	; 75
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	86 ef       	ldi	r24, 0xF6	; 246
    2794:	92 e0       	ldi	r25, 0x02	; 2
    2796:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <evTime_process_period>
    279a:	89 2b       	or	r24, r25
    279c:	09 f4       	brne	.+2      	; 0x27a0 <servo_process+0x1c>
    279e:	be c0       	rjmp	.+380    	; 0x291c <servo_process+0x198>
	{
		switch(servoD.state)
    27a0:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    27a4:	85 30       	cpi	r24, 0x05	; 5
    27a6:	a1 f0       	breq	.+40     	; 0x27d0 <servo_process+0x4c>
    27a8:	30 f4       	brcc	.+12     	; 0x27b6 <servo_process+0x32>
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	59 f0       	breq	.+22     	; 0x27c4 <servo_process+0x40>
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <servo_process+0x30>
    27b2:	69 c0       	rjmp	.+210    	; 0x2886 <servo_process+0x102>
    27b4:	a3 c0       	rjmp	.+326    	; 0x28fc <servo_process+0x178>
    27b6:	86 30       	cpi	r24, 0x06	; 6
    27b8:	09 f4       	brne	.+2      	; 0x27bc <servo_process+0x38>
    27ba:	7f c0       	rjmp	.+254    	; 0x28ba <servo_process+0x136>
    27bc:	87 30       	cpi	r24, 0x07	; 7
    27be:	09 f4       	brne	.+2      	; 0x27c2 <servo_process+0x3e>
    27c0:	99 c0       	rjmp	.+306    	; 0x28f4 <servo_process+0x170>
    27c2:	9c c0       	rjmp	.+312    	; 0x28fc <servo_process+0x178>
		{
			case SERVO_OPEN:
			servoD.value = value;
    27c4:	c0 93 ac 04 	sts	0x04AC, r28	; 0x8004ac <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    27c8:	8c 2f       	mov	r24, r28
    27ca:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
			break;
    27ce:	96 c0       	rjmp	.+300    	; 0x28fc <servo_process+0x178>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    27d0:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    27d4:	81 11       	cpse	r24, r1
    27d6:	13 c0       	rjmp	.+38     	; 0x27fe <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	81 ef       	ldi	r24, 0xF1	; 241
    27e2:	92 e0       	ldi	r25, 0x02	; 2
    27e4:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
		try_count++;
    27e8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    27f2:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <servoD+0x3>
    27f6:	89 0f       	add	r24, r25
    27f8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
    27fc:	30 c0       	rjmp	.+96     	; 0x285e <servo_process+0xda>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	89 30       	cpi	r24, 0x09	; 9
    2802:	08 f5       	brcc	.+66     	; 0x2846 <servo_process+0xc2>
	{
		if (evTime_check(&timeout) == 1)
    2804:	81 ef       	ldi	r24, 0xF1	; 241
    2806:	92 e0       	ldi	r25, 0x02	; 2
    2808:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	39 f5       	brne	.+78     	; 0x285e <servo_process+0xda>
		{
			evTime_start(&timeout, 250);
    2810:	4a ef       	ldi	r20, 0xFA	; 250
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	81 ef       	ldi	r24, 0xF1	; 241
    281a:	92 e0       	ldi	r25, 0x02	; 2
    281c:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
			try_count++;
    2820:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
			servo_set_pwm_val(servoD.value + try_count*dark_menu_get_value(MENU_TRY_OPEN_CALIBRATION));
    282a:	c0 91 ac 04 	lds	r28, 0x04AC	; 0x8004ac <servoD+0x3>
    282e:	87 e0       	ldi	r24, 0x07	; 7
    2830:	0e 94 ae 07 	call	0xf5c	; 0xf5c <dark_menu_get_value>
    2834:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <try_count>
    2838:	89 9f       	mul	r24, r25
    283a:	c0 0d       	add	r28, r0
    283c:	11 24       	eor	r1, r1
    283e:	8c 2f       	mov	r24, r28
    2840:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
    2844:	0c c0       	rjmp	.+24     	; 0x285e <servo_process+0xda>
		}
	}
	else
	{
		try_count = 0;
    2846:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value);
    284a:	c9 ea       	ldi	r28, 0xA9	; 169
    284c:	d4 e0       	ldi	r29, 0x04	; 4
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    285e:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <servoD+0x3>
    2862:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	82 0f       	add	r24, r18
    286a:	91 1d       	adc	r25, r1
    286c:	9f 93       	push	r25
    286e:	8f 93       	push	r24
    2870:	86 ef       	ldi	r24, 0xF6	; 246
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	9f 93       	push	r25
    2876:	8f 93       	push	r24
    2878:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	3b c0       	rjmp	.+118    	; 0x28fc <servo_process+0x178>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2886:	8c ee       	ldi	r24, 0xEC	; 236
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	0e 94 bf 18 	call	0x317e	; 0x317e <evTime_is_stated>
    288e:	89 2b       	or	r24, r25
    2890:	59 f0       	breq	.+22     	; 0x28a8 <servo_process+0x124>
	{
		if (evTime_check(&timeout) == 1)
    2892:	8c ee       	ldi	r24, 0xEC	; 236
    2894:	92 e0       	ldi	r25, 0x02	; 2
    2896:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	79 f5       	brne	.+94     	; 0x28fc <servo_process+0x178>
		{
			servoD.state = SERVO_OPEN;
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
			LED_SERVO_ON;
    28a4:	96 9a       	sbi	0x12, 6	; 18
    28a6:	2a c0       	rjmp	.+84     	; 0x28fc <servo_process+0x178>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    28a8:	48 eb       	ldi	r20, 0xB8	; 184
    28aa:	5b e0       	ldi	r21, 0x0B	; 11
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	8c ee       	ldi	r24, 0xEC	; 236
    28b2:	92 e0       	ldi	r25, 0x02	; 2
    28b4:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
    28b8:	21 c0       	rjmp	.+66     	; 0x28fc <servo_process+0x178>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    28ba:	87 ee       	ldi	r24, 0xE7	; 231
    28bc:	92 e0       	ldi	r25, 0x02	; 2
    28be:	0e 94 bf 18 	call	0x317e	; 0x317e <evTime_is_stated>
    28c2:	89 2b       	or	r24, r25
    28c4:	71 f0       	breq	.+28     	; 0x28e2 <servo_process+0x15e>
	{
		if (evTime_check(&timeout) == 1)
    28c6:	87 ee       	ldi	r24, 0xE7	; 231
    28c8:	92 e0       	ldi	r25, 0x02	; 2
    28ca:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	a9 f4       	brne	.+42     	; 0x28fc <servo_process+0x178>
		{
			servoD.state = SERVO_ERROR;
    28d2:	87 e0       	ldi	r24, 0x07	; 7
    28d4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    28d8:	8f e1       	ldi	r24, 0x1F	; 31
    28da:	9e e4       	ldi	r25, 0x4E	; 78
    28dc:	9b bd       	out	0x2b, r25	; 43
    28de:	8a bd       	out	0x2a, r24	; 42
    28e0:	0d c0       	rjmp	.+26     	; 0x28fc <servo_process+0x178>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    28e2:	4c ea       	ldi	r20, 0xAC	; 172
    28e4:	5d e0       	ldi	r21, 0x0D	; 13
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	87 ee       	ldi	r24, 0xE7	; 231
    28ec:	92 e0       	ldi	r25, 0x02	; 2
    28ee:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
    28f2:	04 c0       	rjmp	.+8      	; 0x28fc <servo_process+0x178>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    28f4:	8f e1       	ldi	r24, 0x1F	; 31
    28f6:	9e e4       	ldi	r25, 0x4E	; 78
    28f8:	9b bd       	out	0x2b, r25	; 43
    28fa:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    28fc:	8d ea       	ldi	r24, 0xAD	; 173
    28fe:	94 e0       	ldi	r25, 0x04	; 4
    2900:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	51 f4       	brne	.+20     	; 0x291c <servo_process+0x198>
		{
			servoD.try_cnt = 0;
    2908:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    290c:	84 e0       	ldi	r24, 0x04	; 4
    290e:	92 e0       	ldi	r25, 0x02	; 2
    2910:	9f 93       	push	r25
    2912:	8f 93       	push	r24
    2914:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
		}
	}
}
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2922:	e2 e4       	ldi	r30, 0x42	; 66
    2924:	f4 e0       	ldi	r31, 0x04	; 4
    2926:	16 86       	std	Z+14, r1	; 0x0e
    2928:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    292a:	12 86       	std	Z+10, r1	; 0x0a
    292c:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    292e:	14 86       	std	Z+12, r1	; 0x0c
    2930:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2932:	e5 e1       	ldi	r30, 0x15	; 21
    2934:	f4 e0       	ldi	r31, 0x04	; 4
    2936:	16 86       	std	Z+14, r1	; 0x0e
    2938:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    293a:	12 86       	std	Z+10, r1	; 0x0a
    293c:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    293e:	14 86       	std	Z+12, r1	; 0x0c
    2940:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2942:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <button3+0xc>
    2946:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <button3+0xb>
	
	button5.timer_callback = 0;
    294a:	e3 ef       	ldi	r30, 0xF3	; 243
    294c:	f3 e0       	ldi	r31, 0x03	; 3
    294e:	16 86       	std	Z+14, r1	; 0x0e
    2950:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2952:	14 86       	std	Z+12, r1	; 0x0c
    2954:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2956:	12 86       	std	Z+10, r1	; 0x0a
    2958:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    295a:	e3 e3       	ldi	r30, 0x33	; 51
    295c:	f4 e0       	ldi	r31, 0x04	; 4
    295e:	16 86       	std	Z+14, r1	; 0x0e
    2960:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2962:	14 86       	std	Z+12, r1	; 0x0c
    2964:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2966:	12 86       	std	Z+10, r1	; 0x0a
    2968:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    296a:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <button7+0xc>
    296e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <button7+0xb>
	
	button8.fall_callback = 0;
    2972:	e0 e6       	ldi	r30, 0x60	; 96
    2974:	f4 e0       	ldi	r31, 0x04	; 4
    2976:	14 86       	std	Z+12, r1	; 0x0c
    2978:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    297a:	16 86       	std	Z+14, r1	; 0x0e
    297c:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    297e:	12 86       	std	Z+10, r1	; 0x0a
    2980:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2982:	e5 ed       	ldi	r30, 0xD5	; 213
    2984:	f3 e0       	ldi	r31, 0x03	; 3
    2986:	14 86       	std	Z+12, r1	; 0x0c
    2988:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    298a:	16 86       	std	Z+14, r1	; 0x0e
    298c:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    298e:	12 86       	std	Z+10, r1	; 0x0a
    2990:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2992:	e4 ee       	ldi	r30, 0xE4	; 228
    2994:	f3 e0       	ldi	r31, 0x03	; 3
    2996:	14 86       	std	Z+12, r1	; 0x0c
    2998:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    299a:	16 86       	std	Z+14, r1	; 0x0e
    299c:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    299e:	12 86       	std	Z+10, r1	; 0x0a
    29a0:	11 86       	std	Z+9, r1	; 0x09
    29a2:	08 95       	ret

000029a4 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    29a4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	49 f0       	breq	.+18     	; 0x29be <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    29ac:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29b0:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29b4:	98 60       	ori	r25, 0x08	; 8
    29b6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29ba:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    29be:	08 95       	ret

000029c0 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    29c0:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	49 f0       	breq	.+18     	; 0x29da <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    29c8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29cc:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29d0:	80 68       	ori	r24, 0x80	; 128
    29d2:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29d6:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    29da:	08 95       	ret

000029dc <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    29dc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29e0:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29e4:	92 60       	ori	r25, 0x02	; 2
    29e6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29ea:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    29ee:	08 95       	ret

000029f0 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    29f0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29f4:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29f8:	99 7f       	andi	r25, 0xF9	; 249
    29fa:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29fe:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2a02:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    2a06:	08 95       	ret

00002a08 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2a08:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a0c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a10:	80 62       	ori	r24, 0x20	; 32
    2a12:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a16:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2a1a:	08 95       	ret

00002a1c <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2a1c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a20:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a24:	8f 79       	andi	r24, 0x9F	; 159
    2a26:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a2a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2a2e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    2a32:	08 95       	ret

00002a34 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a34:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a38:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a3c:	90 62       	ori	r25, 0x20	; 32
    2a3e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a42:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2a46:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2a4a:	8b 30       	cpi	r24, 0x0B	; 11
    2a4c:	18 f0       	brcs	.+6      	; 0x2a54 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    2a4e:	81 50       	subi	r24, 0x01	; 1
    2a50:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2a54:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a5e:	61 e0       	ldi	r22, 0x01	; 1
    2a60:	82 e0       	ldi	r24, 0x02	; 2
    2a62:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2a66:	08 95       	ret

00002a68 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a68:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a6c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a70:	90 62       	ori	r25, 0x20	; 32
    2a72:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a76:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value > 10)
    2a7a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2a7e:	8b 30       	cpi	r24, 0x0B	; 11
    2a80:	18 f0       	brcs	.+6      	; 0x2a88 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2a82:	81 50       	subi	r24, 0x01	; 1
    2a84:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2a88:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	0e 94 9e 0a 	call	0x153c	; 0x153c <disp_get_state>
    2a98:	02 97       	sbiw	r24, 0x02	; 2
    2a9a:	29 f4       	brne	.+10     	; 0x2aa6 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
	state_measure_volt++;
    2aae:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2ab2:	8f 5f       	subi	r24, 0xFF	; 255
    2ab4:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    2ab8:	82 30       	cpi	r24, 0x02	; 2
    2aba:	19 f4       	brne	.+6      	; 0x2ac2 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2abc:	66 e0       	ldi	r22, 0x06	; 6
    2abe:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2ac2:	08 95       	ret

00002ac4 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2ac4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ac8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2acc:	90 62       	ori	r25, 0x20	; 32
    2ace:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2ad2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 99)
    2ad6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2ada:	83 36       	cpi	r24, 0x63	; 99
    2adc:	18 f4       	brcc	.+6      	; 0x2ae4 <button_motor_add_fall_cb+0x20>
		motor_value++;
    2ade:	8f 5f       	subi	r24, 0xFF	; 255
    2ae0:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2ae4:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	0e 94 9e 0a 	call	0x153c	; 0x153c <disp_get_state>
    2af4:	02 97       	sbiw	r24, 0x02	; 2
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2b00:	04 c0       	rjmp	.+8      	; 0x2b0a <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
	state_measure_volt++;
    2b0a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	19 f4       	brne	.+6      	; 0x2b1e <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2b18:	66 e0       	ldi	r22, 0x06	; 6
    2b1a:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2b1e:	08 95       	ret

00002b20 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2b20:	0e 94 ae 0a 	call	0x155c	; 0x155c <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2b24:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2b28:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2b2c:	97 7e       	andi	r25, 0xE7	; 231
    2b2e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2b32:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2b36:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2b3a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2b3e:	88 23       	and	r24, r24
    2b40:	19 f0       	breq	.+6      	; 0x2b48 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2b42:	81 50       	subi	r24, 0x01	; 1
    2b44:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	0e 94 9e 0a 	call	0x153c	; 0x153c <disp_get_state>
    2b4e:	02 97       	sbiw	r24, 0x02	; 2
    2b50:	29 f4       	brne	.+10     	; 0x2b5c <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2b5a:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2b64:	08 95       	ret

00002b66 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2b66:	0e 94 ae 0a 	call	0x155c	; 0x155c <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2b6a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2b6e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2b72:	8f 77       	andi	r24, 0x7F	; 127
    2b74:	9e 7f       	andi	r25, 0xFE	; 254
    2b76:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2b7a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2b7e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2b82:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2b86:	88 23       	and	r24, r24
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2b8a:	81 50       	subi	r24, 0x01	; 1
    2b8c:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	0e 94 9e 0a 	call	0x153c	; 0x153c <disp_get_state>
    2b96:	02 97       	sbiw	r24, 0x02	; 2
    2b98:	29 f4       	brne	.+10     	; 0x2ba4 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2b9a:	61 e0       	ldi	r22, 0x01	; 1
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2ba2:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2bac:	08 95       	ret

00002bae <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2bae:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2bb2:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2bb6:	90 62       	ori	r25, 0x20	; 32
    2bb8:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2bbc:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2bc0:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2bc4:	83 36       	cpi	r24, 0x63	; 99
    2bc6:	28 f4       	brcc	.+10     	; 0x2bd2 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    2bc8:	8f 5f       	subi	r24, 0xFF	; 255
    2bca:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		error_servo_timer();
    2bce:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2bd2:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	82 e0       	ldi	r24, 0x02	; 2
    2be0:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
    2be4:	08 95       	ret

00002be6 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2be6:	e5 eb       	ldi	r30, 0xB5	; 181
    2be8:	f4 e0       	ldi	r31, 0x04	; 4
    2bea:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2bee:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2bf0:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2bf4:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2bf6:	bf 01       	movw	r22, r30
    2bf8:	83 e0       	ldi	r24, 0x03	; 3
    2bfa:	0e 94 cd 11 	call	0x239a	; 0x239a <mem_save_data>
    2bfe:	08 95       	ret

00002c00 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2c00:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2c04:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2c08:	90 62       	ori	r25, 0x20	; 32
    2c0a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2c0e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 10)
    2c12:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2c16:	8a 30       	cpi	r24, 0x0A	; 10
    2c18:	38 f4       	brcc	.+14     	; 0x2c28 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2c1a:	8a e0       	ldi	r24, 0x0A	; 10
    2c1c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2c20:	6a e0       	ldi	r22, 0x0A	; 10
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	}
	sys_save_display();
    2c28:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <sys_save_display>
	if(!dcmotor_is_on())
    2c2c:	0e 94 40 08 	call	0x1080	; 0x1080 <dcmotor_is_on>
    2c30:	89 2b       	or	r24, r25
    2c32:	39 f4       	brne	.+14     	; 0x2c42 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2c34:	0e 94 63 08 	call	0x10c6	; 0x10c6 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2c38:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2c3c:	0e 94 1e 13 	call	0x263c	; 0x263c <servo_delayed_open>
    2c40:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2c42:	0e 94 4b 08 	call	0x1096	; 0x1096 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2c46:	0e 94 49 13 	call	0x2692	; 0x2692 <servo_close>
    2c4a:	08 95       	ret

00002c4c <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2c4c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2c50:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2c54:	90 62       	ori	r25, 0x20	; 32
    2c56:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2c5a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (servo_vibro_value < 10)
    2c5e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2c62:	8a 30       	cpi	r24, 0x0A	; 10
    2c64:	38 f4       	brcc	.+14     	; 0x2c74 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2c66:	8a e0       	ldi	r24, 0x0A	; 10
    2c68:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2c6c:	6a e0       	ldi	r22, 0x0A	; 10
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2c74:	0e 94 13 13 	call	0x2626	; 0x2626 <servo_is_open>
    2c78:	89 2b       	or	r24, r25
    2c7a:	19 f0       	breq	.+6      	; 0x2c82 <button_on_off_pwm+0x36>
    2c7c:	0e 94 49 13 	call	0x2692	; 0x2692 <servo_close>
    2c80:	08 95       	ret
	else servo_open(servo_vibro_value);
    2c82:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2c86:	0e 94 8c 13 	call	0x2718	; 0x2718 <servo_open>
    2c8a:	08 95       	ret

00002c8c <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.fall_callback = button4_toggle_system;
    2c8c:	8f ee       	ldi	r24, 0xEF	; 239
    2c8e:	96 e1       	ldi	r25, 0x16	; 22
    2c90:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <button4+0xc>
    2c94:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <button4+0xb>
	disp_set_state(DISP_ALL,SEG_OFF);
    2c98:	60 e0       	ldi	r22, 0x00	; 0
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
	disp_off_segments();
    2ca0:	0e 94 05 0b 	call	0x160a	; 0x160a <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2ca4:	63 eb       	ldi	r22, 0xB3	; 179
    2ca6:	74 e0       	ldi	r23, 0x04	; 4
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	0e 94 15 12 	call	0x242a	; 0x242a <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2cae:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <mem_last_save+0x1>
    2cb2:	96 ef       	ldi	r25, 0xF6	; 246
    2cb4:	98 0f       	add	r25, r24
    2cb6:	9a 35       	cpi	r25, 0x5A	; 90
    2cb8:	10 f4       	brcc	.+4      	; 0x2cbe <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2cba:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2cbe:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <mem_last_save>
    2cc2:	96 ef       	ldi	r25, 0xF6	; 246
    2cc4:	98 0f       	add	r25, r24
    2cc6:	9a 35       	cpi	r25, 0x5A	; 90
    2cc8:	10 f4       	brcc	.+4      	; 0x2cce <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2cca:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
    2cce:	08 95       	ret

00002cd0 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2cd0:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2cd4:	42 e0       	ldi	r20, 0x02	; 2
    2cd6:	68 ee       	ldi	r22, 0xE8	; 232
    2cd8:	73 e0       	ldi	r23, 0x03	; 3
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 57 0c 	call	0x18ae	; 0x18ae <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2ce2:	0e 94 26 08 	call	0x104c	; 0x104c <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <servo_init>
	#endif
	error_init();
    2cec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <error_init>
	init_measure();
    2cf0:	0e 94 19 10 	call	0x2032	; 0x2032 <init_measure>
	init_buzzer();
    2cf4:	0e 94 c4 05 	call	0xb88	; 0xb88 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2d00:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2d04:	e2 e4       	ldi	r30, 0x42	; 66
    2d06:	f4 e0       	ldi	r31, 0x04	; 4
    2d08:	82 ed       	ldi	r24, 0xD2	; 210
    2d0a:	94 e1       	ldi	r25, 0x14	; 20
    2d0c:	96 87       	std	Z+14, r25	; 0x0e
    2d0e:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2d10:	84 e3       	ldi	r24, 0x34	; 52
    2d12:	95 e1       	ldi	r25, 0x15	; 21
    2d14:	94 87       	std	Z+12, r25	; 0x0c
    2d16:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2d18:	80 e9       	ldi	r24, 0x90	; 144
    2d1a:	95 e1       	ldi	r25, 0x15	; 21
    2d1c:	92 87       	std	Z+10, r25	; 0x0a
    2d1e:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2d20:	e5 e1       	ldi	r30, 0x15	; 21
    2d22:	f4 e0       	ldi	r31, 0x04	; 4
    2d24:	80 ee       	ldi	r24, 0xE0	; 224
    2d26:	94 e1       	ldi	r25, 0x14	; 20
    2d28:	96 87       	std	Z+14, r25	; 0x0e
    2d2a:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2d2c:	82 e6       	ldi	r24, 0x62	; 98
    2d2e:	95 e1       	ldi	r25, 0x15	; 21
    2d30:	94 87       	std	Z+12, r25	; 0x0c
    2d32:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2d34:	83 eb       	ldi	r24, 0xB3	; 179
    2d36:	95 e1       	ldi	r25, 0x15	; 21
    2d38:	92 87       	std	Z+10, r25	; 0x0a
    2d3a:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	96 e1       	ldi	r25, 0x16	; 22
    2d40:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
    2d44:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2d48:	e3 ef       	ldi	r30, 0xF3	; 243
    2d4a:	f3 e0       	ldi	r31, 0x03	; 3
    2d4c:	8e ee       	ldi	r24, 0xEE	; 238
    2d4e:	94 e1       	ldi	r25, 0x14	; 20
    2d50:	96 87       	std	Z+14, r25	; 0x0e
    2d52:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2d54:	88 ef       	ldi	r24, 0xF8	; 248
    2d56:	94 e1       	ldi	r25, 0x14	; 20
    2d58:	92 87       	std	Z+10, r25	; 0x0a
    2d5a:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2d5c:	8a e1       	ldi	r24, 0x1A	; 26
    2d5e:	95 e1       	ldi	r25, 0x15	; 21
    2d60:	94 87       	std	Z+12, r25	; 0x0c
    2d62:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2d64:	e3 e3       	ldi	r30, 0x33	; 51
    2d66:	f4 e0       	ldi	r31, 0x04	; 4
    2d68:	84 e0       	ldi	r24, 0x04	; 4
    2d6a:	95 e1       	ldi	r25, 0x15	; 21
    2d6c:	96 87       	std	Z+14, r25	; 0x0e
    2d6e:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2d70:	8e e0       	ldi	r24, 0x0E	; 14
    2d72:	95 e1       	ldi	r25, 0x15	; 21
    2d74:	92 87       	std	Z+10, r25	; 0x0a
    2d76:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2d78:	87 ed       	ldi	r24, 0xD7	; 215
    2d7a:	95 e1       	ldi	r25, 0x15	; 21
    2d7c:	94 87       	std	Z+12, r25	; 0x0c
    2d7e:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2d80:	86 e2       	ldi	r24, 0x26	; 38
    2d82:	96 e1       	ldi	r25, 0x16	; 22
    2d84:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
    2d88:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2d8c:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2d96:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
    2da0:	08 95       	ret

00002da2 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2da2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	dcmotorpwm_deinit();
    2da6:	0e 94 3a 08 	call	0x1074	; 0x1074 <dcmotorpwm_deinit>
	off_button();
    2daa:	0e 94 91 14 	call	0x2922	; 0x2922 <off_button>
	error_deinit();
    2dae:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2db2:	0e 94 49 13 	call	0x2692	; 0x2692 <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2db6:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <system_events+0x1>
    2dba:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2dbe:	60 e0       	ldi	r22, 0x00	; 0
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	0e 94 bf 0a 	call	0x157e	; 0x157e <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2dc6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2dca:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2dce:	8e 7f       	andi	r24, 0xFE	; 254
    2dd0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2dd4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
	init_menu();
    2dd8:	0e 94 5f 07 	call	0xebe	; 0xebe <init_menu>
    2ddc:	08 95       	ret

00002dde <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2dde:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2de2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2de6:	80 ff       	sbrs	r24, 0
    2de8:	03 c0       	rjmp	.+6      	; 0x2df0 <button4_toggle_system+0x12>
	{
		off_system();
    2dea:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <off_system>
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2df0:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2df4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2df8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2dfc:	90 62       	ori	r25, 0x20	; 32
    2dfe:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2e02:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2e06:	08 95       	ret

00002e08 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2e08:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    2e0c:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    2e10:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    2e14:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    2e18:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2131>
    2e1c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2131+0x1>
    2e20:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2131+0x2>
    2e24:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2131+0x3>
    2e28:	84 17       	cp	r24, r20
    2e2a:	95 07       	cpc	r25, r21
    2e2c:	a6 07       	cpc	r26, r22
    2e2e:	b7 07       	cpc	r27, r23
    2e30:	08 f0       	brcs	.+2      	; 0x2e34 <disp_fast_process+0x2c>
    2e32:	a4 c0       	rjmp	.+328    	; 0x2f7c <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2e34:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e38:	85 ff       	sbrs	r24, 5
    2e3a:	21 c0       	rjmp	.+66     	; 0x2e7e <disp_fast_process+0x76>
    2e3c:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2e40:	63 36       	cpi	r22, 0x63	; 99
    2e42:	e8 f4       	brcc	.+58     	; 0x2e7e <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2e44:	6b 30       	cpi	r22, 0x0B	; 11
    2e46:	40 f0       	brcs	.+16     	; 0x2e58 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2e48:	6f 5f       	subi	r22, 0xFF	; 255
    2e4a:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
				error_servo_timer();
    2e54:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2e58:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <counter_very_fast_servo_add>
    2e5c:	8f 5f       	subi	r24, 0xFF	; 255
    2e5e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2e62:	8f 30       	cpi	r24, 0x0F	; 15
    2e64:	60 f0       	brcs	.+24     	; 0x2e7e <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2e66:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e6a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e6e:	8f 7d       	andi	r24, 0xDF	; 223
    2e70:	80 64       	ori	r24, 0x40	; 64
    2e72:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2e76:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_add = 0;
    2e7a:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2e7e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e82:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e86:	91 ff       	sbrs	r25, 1
    2e88:	21 c0       	rjmp	.+66     	; 0x2ecc <disp_fast_process+0xc4>
    2e8a:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2e8e:	66 23       	and	r22, r22
    2e90:	e9 f0       	breq	.+58     	; 0x2ecc <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2e92:	6b 30       	cpi	r22, 0x0B	; 11
    2e94:	40 f0       	brcs	.+16     	; 0x2ea6 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2e96:	61 50       	subi	r22, 0x01	; 1
    2e98:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
				error_servo_timer();
    2ea2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2ea6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <counter_very_fast_servo_sub>
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2eb0:	8f 30       	cpi	r24, 0x0F	; 15
    2eb2:	60 f0       	brcs	.+24     	; 0x2ecc <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2eb4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2eb8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2ebc:	9d 7f       	andi	r25, 0xFD	; 253
    2ebe:	94 60       	ori	r25, 0x04	; 4
    2ec0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2ec4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_sub = 0;
    2ec8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2ecc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ed0:	87 ff       	sbrs	r24, 7
    2ed2:	1d c0       	rjmp	.+58     	; 0x2f0e <disp_fast_process+0x106>
    2ed4:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2ed8:	63 36       	cpi	r22, 0x63	; 99
    2eda:	c8 f4       	brcc	.+50     	; 0x2f0e <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2edc:	6f 5f       	subi	r22, 0xFF	; 255
    2ede:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
			counter_very_fast_motor_add++;
    2ee8:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <counter_very_fast_motor_add>
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2ef2:	8f 30       	cpi	r24, 0x0F	; 15
    2ef4:	60 f0       	brcs	.+24     	; 0x2f0e <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2ef6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2efa:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2efe:	8f 77       	andi	r24, 0x7F	; 127
    2f00:	91 60       	ori	r25, 0x01	; 1
    2f02:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2f06:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_add = 0;
    2f0a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2f0e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2f12:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2f16:	93 ff       	sbrs	r25, 3
    2f18:	1d c0       	rjmp	.+58     	; 0x2f54 <disp_fast_process+0x14c>
    2f1a:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2f1e:	6b 30       	cpi	r22, 0x0B	; 11
    2f20:	c8 f0       	brcs	.+50     	; 0x2f54 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2f22:	61 50       	subi	r22, 0x01	; 1
    2f24:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
			counter_very_fast_motor_sub++;
    2f2e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <counter_very_fast_motor_sub>
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2f38:	8f 30       	cpi	r24, 0x0F	; 15
    2f3a:	60 f0       	brcs	.+24     	; 0x2f54 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2f3c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2f40:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2f44:	97 7f       	andi	r25, 0xF7	; 247
    2f46:	90 61       	ori	r25, 0x10	; 16
    2f48:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2f4c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_sub = 0;
    2f50:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2f54:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2131>
    2f58:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2131+0x1>
    2f5c:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2131+0x2>
    2f60:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2131+0x3>
    2f64:	80 5b       	subi	r24, 0xB0	; 176
    2f66:	9f 4f       	sbci	r25, 0xFF	; 255
    2f68:	af 4f       	sbci	r26, 0xFF	; 255
    2f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <disp_fast_timer.2131>
    2f70:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <disp_fast_timer.2131+0x1>
    2f74:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <disp_fast_timer.2131+0x2>
    2f78:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <disp_fast_timer.2131+0x3>
    2f7c:	08 95       	ret

00002f7e <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2f7e:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    2f82:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    2f86:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    2f8a:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    2f8e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    2f92:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    2f96:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    2f9a:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    2f9e:	84 17       	cp	r24, r20
    2fa0:	95 07       	cpc	r25, r21
    2fa2:	a6 07       	cpc	r26, r22
    2fa4:	b7 07       	cpc	r27, r23
    2fa6:	08 f0       	brcs	.+2      	; 0x2faa <disp_very_fast_process+0x2c>
    2fa8:	57 c0       	rjmp	.+174    	; 0x3058 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2faa:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2fae:	83 36       	cpi	r24, 0x63	; 99
    2fb0:	70 f4       	brcc	.+28     	; 0x2fce <disp_very_fast_process+0x50>
    2fb2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2fb6:	86 ff       	sbrs	r24, 6
    2fb8:	0a c0       	rjmp	.+20     	; 0x2fce <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2fba:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2fbe:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2fc2:	6f 5f       	subi	r22, 0xFF	; 255
    2fc4:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2fce:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2fd2:	6b 30       	cpi	r22, 0x0B	; 11
    2fd4:	70 f0       	brcs	.+28     	; 0x2ff2 <disp_very_fast_process+0x74>
    2fd6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2fda:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2fde:	92 ff       	sbrs	r25, 2
    2fe0:	08 c0       	rjmp	.+16     	; 0x2ff2 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2fe2:	61 50       	subi	r22, 0x01	; 1
    2fe4:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
				error_servo_timer();
    2fee:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2ff2:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2ff6:	63 36       	cpi	r22, 0x63	; 99
    2ff8:	60 f4       	brcc	.+24     	; 0x3012 <disp_very_fast_process+0x94>
    2ffa:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ffe:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    3002:	90 ff       	sbrs	r25, 0
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    3006:	6f 5f       	subi	r22, 0xFF	; 255
    3008:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    3012:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    3016:	6b 30       	cpi	r22, 0x0B	; 11
    3018:	60 f0       	brcs	.+24     	; 0x3032 <disp_very_fast_process+0xb4>
    301a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    301e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    3022:	94 ff       	sbrs	r25, 4
    3024:	06 c0       	rjmp	.+12     	; 0x3032 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    3026:	61 50       	subi	r22, 0x01	; 1
    3028:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	0e 94 8d 0a 	call	0x151a	; 0x151a <dip_set_value>
		}
		disp_very_fast_timer += 30;
    3032:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    3036:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    303a:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    303e:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    3042:	4e 96       	adiw	r24, 0x1e	; 30
    3044:	a1 1d       	adc	r26, r1
    3046:	b1 1d       	adc	r27, r1
    3048:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <disp_very_fast_timer>
    304c:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <disp_very_fast_timer+0x1>
    3050:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <disp_very_fast_timer+0x2>
    3054:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <disp_very_fast_timer+0x3>
    3058:	08 95       	ret

0000305a <system_error>:
}


void system_error(void)
{
	off_button();
    305a:	0e 94 91 14 	call	0x2922	; 0x2922 <off_button>
    305e:	08 95       	ret

00003060 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    3060:	1f 92       	push	r1
    3062:	0f 92       	push	r0
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	0f 92       	push	r0
    3068:	11 24       	eor	r1, r1
    306a:	2f 93       	push	r18
    306c:	3f 93       	push	r19
    306e:	4f 93       	push	r20
    3070:	5f 93       	push	r21
    3072:	6f 93       	push	r22
    3074:	7f 93       	push	r23
    3076:	8f 93       	push	r24
    3078:	9f 93       	push	r25
    307a:	af 93       	push	r26
    307c:	bf 93       	push	r27
    307e:	ef 93       	push	r30
    3080:	ff 93       	push	r31
    3082:	e7 eb       	ldi	r30, 0xB7	; 183
    3084:	f4 e0       	ldi	r31, 0x04	; 4
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	c2 96       	adiw	r24, 0x32	; 50
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
    3090:	80 81       	ld	r24, Z
    3092:	91 81       	ldd	r25, Z+1	; 0x01
    3094:	88 3e       	cpi	r24, 0xE8	; 232
    3096:	93 40       	sbci	r25, 0x03	; 3
    3098:	88 f0       	brcs	.+34     	; 0x30bc <__vector_10+0x5c>
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	a4 81       	ldd	r26, Z+4	; 0x04
    30a0:	b5 81       	ldd	r27, Z+5	; 0x05
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	a1 1d       	adc	r26, r1
    30a6:	b1 1d       	adc	r27, r1
    30a8:	82 83       	std	Z+2, r24	; 0x02
    30aa:	93 83       	std	Z+3, r25	; 0x03
    30ac:	a4 83       	std	Z+4, r26	; 0x04
    30ae:	b5 83       	std	Z+5, r27	; 0x05
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	88 5e       	subi	r24, 0xE8	; 232
    30b6:	93 40       	sbci	r25, 0x03	; 3
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	80 83       	st	Z, r24
    30bc:	89 e0       	ldi	r24, 0x09	; 9
    30be:	93 e0       	ldi	r25, 0x03	; 3
    30c0:	0e 94 1d 0a 	call	0x143a	; 0x143a <display_process>
    30c4:	ff 91       	pop	r31
    30c6:	ef 91       	pop	r30
    30c8:	bf 91       	pop	r27
    30ca:	af 91       	pop	r26
    30cc:	9f 91       	pop	r25
    30ce:	8f 91       	pop	r24
    30d0:	7f 91       	pop	r23
    30d2:	6f 91       	pop	r22
    30d4:	5f 91       	pop	r21
    30d6:	4f 91       	pop	r20
    30d8:	3f 91       	pop	r19
    30da:	2f 91       	pop	r18
    30dc:	0f 90       	pop	r0
    30de:	0f be       	out	0x3f, r0	; 63
    30e0:	0f 90       	pop	r0
    30e2:	1f 90       	pop	r1
    30e4:	18 95       	reti

000030e6 <timer0_init>:
    30e6:	93 b7       	in	r25, 0x33	; 51
    30e8:	98 60       	ori	r25, 0x08	; 8
    30ea:	93 bf       	out	0x33, r25	; 51
    30ec:	6c bf       	out	0x3c, r22	; 60
    30ee:	82 30       	cpi	r24, 0x02	; 2
    30f0:	99 f0       	breq	.+38     	; 0x3118 <timer0_init+0x32>
    30f2:	28 f4       	brcc	.+10     	; 0x30fe <timer0_init+0x18>
    30f4:	88 23       	and	r24, r24
    30f6:	41 f0       	breq	.+16     	; 0x3108 <timer0_init+0x22>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	51 f0       	breq	.+20     	; 0x3110 <timer0_init+0x2a>
    30fc:	19 c0       	rjmp	.+50     	; 0x3130 <timer0_init+0x4a>
    30fe:	83 30       	cpi	r24, 0x03	; 3
    3100:	79 f0       	breq	.+30     	; 0x3120 <timer0_init+0x3a>
    3102:	84 30       	cpi	r24, 0x04	; 4
    3104:	89 f0       	breq	.+34     	; 0x3128 <timer0_init+0x42>
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <timer0_init+0x4a>
    3108:	83 b7       	in	r24, 0x33	; 51
    310a:	81 60       	ori	r24, 0x01	; 1
    310c:	83 bf       	out	0x33, r24	; 51
    310e:	13 c0       	rjmp	.+38     	; 0x3136 <timer0_init+0x50>
    3110:	83 b7       	in	r24, 0x33	; 51
    3112:	82 60       	ori	r24, 0x02	; 2
    3114:	83 bf       	out	0x33, r24	; 51
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <timer0_init+0x50>
    3118:	83 b7       	in	r24, 0x33	; 51
    311a:	83 60       	ori	r24, 0x03	; 3
    311c:	83 bf       	out	0x33, r24	; 51
    311e:	0b c0       	rjmp	.+22     	; 0x3136 <timer0_init+0x50>
    3120:	83 b7       	in	r24, 0x33	; 51
    3122:	84 60       	ori	r24, 0x04	; 4
    3124:	83 bf       	out	0x33, r24	; 51
    3126:	07 c0       	rjmp	.+14     	; 0x3136 <timer0_init+0x50>
    3128:	83 b7       	in	r24, 0x33	; 51
    312a:	85 60       	ori	r24, 0x05	; 5
    312c:	83 bf       	out	0x33, r24	; 51
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <timer0_init+0x50>
    3130:	83 b7       	in	r24, 0x33	; 51
    3132:	81 60       	ori	r24, 0x01	; 1
    3134:	83 bf       	out	0x33, r24	; 51
    3136:	89 b7       	in	r24, 0x39	; 57
    3138:	82 60       	ori	r24, 0x02	; 2
    313a:	89 bf       	out	0x39, r24	; 57
    313c:	08 95       	ret

0000313e <evTime_init>:
    313e:	23 e0       	ldi	r18, 0x03	; 3
    3140:	fc 01       	movw	r30, r24
    3142:	24 83       	std	Z+4, r18	; 0x04
    3144:	10 82       	st	Z, r1
    3146:	11 82       	std	Z+1, r1	; 0x01
    3148:	12 82       	std	Z+2, r1	; 0x02
    314a:	13 82       	std	Z+3, r1	; 0x03
    314c:	08 95       	ret

0000314e <evTime_start>:
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	21 e0       	ldi	r18, 0x01	; 1
    3154:	fc 01       	movw	r30, r24
    3156:	24 83       	std	Z+4, r18	; 0x04
    3158:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <mktime+0x2>
    315c:	10 91 ba 04 	lds	r17, 0x04BA	; 0x8004ba <mktime+0x3>
    3160:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <mktime+0x4>
    3164:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <mktime+0x5>
    3168:	40 0f       	add	r20, r16
    316a:	51 1f       	adc	r21, r17
    316c:	62 1f       	adc	r22, r18
    316e:	73 1f       	adc	r23, r19
    3170:	40 83       	st	Z, r20
    3172:	51 83       	std	Z+1, r21	; 0x01
    3174:	62 83       	std	Z+2, r22	; 0x02
    3176:	73 83       	std	Z+3, r23	; 0x03
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	08 95       	ret

0000317e <evTime_is_stated>:
    317e:	21 e0       	ldi	r18, 0x01	; 1
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	fc 01       	movw	r30, r24
    3184:	84 81       	ldd	r24, Z+4	; 0x04
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	11 f0       	breq	.+4      	; 0x318e <evTime_is_stated+0x10>
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	c9 01       	movw	r24, r18
    3190:	08 95       	ret

00003192 <evTime_check>:

int evTime_check(evTime * evt)
{
    3192:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    3194:	84 81       	ldd	r24, Z+4	; 0x04
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	b1 f4       	brne	.+44     	; 0x31c6 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    319a:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    319e:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    31a2:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    31a6:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    31aa:	40 81       	ld	r20, Z
    31ac:	51 81       	ldd	r21, Z+1	; 0x01
    31ae:	62 81       	ldd	r22, Z+2	; 0x02
    31b0:	73 81       	ldd	r23, Z+3	; 0x03
    31b2:	48 17       	cp	r20, r24
    31b4:	59 07       	cpc	r21, r25
    31b6:	6a 07       	cpc	r22, r26
    31b8:	7b 07       	cpc	r23, r27
    31ba:	40 f4       	brcc	.+16     	; 0x31cc <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f ef       	ldi	r25, 0xFF	; 255
    31ca:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    31d0:	08 95       	ret

000031d2 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	fc 01       	movw	r30, r24
    31d8:	84 81       	ldd	r24, Z+4	; 0x04
    31da:	83 30       	cpi	r24, 0x03	; 3
    31dc:	11 f0       	breq	.+4      	; 0x31e2 <evTime_off+0x10>
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
}
    31e2:	c9 01       	movw	r24, r18
    31e4:	08 95       	ret

000031e6 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    31e6:	cf 92       	push	r12
    31e8:	df 92       	push	r13
    31ea:	ef 92       	push	r14
    31ec:	ff 92       	push	r15
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	ec 01       	movw	r28, r24
    31f8:	6a 01       	movw	r12, r20
    31fa:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	81 11       	cpse	r24, r1
    3200:	06 c0       	rjmp	.+12     	; 0x320e <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    3206:	18 82       	st	Y, r1
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	1a 82       	std	Y+2, r1	; 0x02
    320c:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    320e:	ce 01       	movw	r24, r28
    3210:	0e 94 c9 18 	call	0x3192	; 0x3192 <evTime_check>
    3214:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	31 f4       	brne	.+12     	; 0x3226 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    321a:	b7 01       	movw	r22, r14
    321c:	a6 01       	movw	r20, r12
    321e:	ce 01       	movw	r24, r28
    3220:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
		return 1;
    3224:	0d c0       	rjmp	.+26     	; 0x3240 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	83 30       	cpi	r24, 0x03	; 3
    322a:	41 f4       	brne	.+16     	; 0x323c <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    322c:	b7 01       	movw	r22, r14
    322e:	a6 01       	movw	r20, r12
    3230:	ce 01       	movw	r24, r28
    3232:	0e 94 a7 18 	call	0x314e	; 0x314e <evTime_start>
	}
	return 0;
    3236:	00 e0       	ldi	r16, 0x00	; 0
    3238:	10 e0       	ldi	r17, 0x00	; 0
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <evTime_process_period+0x5a>
    323c:	00 e0       	ldi	r16, 0x00	; 0
    323e:	10 e0       	ldi	r17, 0x00	; 0
}
    3240:	c8 01       	movw	r24, r16
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	ff 90       	pop	r15
    324c:	ef 90       	pop	r14
    324e:	df 90       	pop	r13
    3250:	cf 90       	pop	r12
    3252:	08 95       	ret

00003254 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    3254:	1f 92       	push	r1
    3256:	0f 92       	push	r0
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	0f 92       	push	r0
    325c:	11 24       	eor	r1, r1
    325e:	2f 93       	push	r18
    3260:	3f 93       	push	r19
    3262:	4f 93       	push	r20
    3264:	5f 93       	push	r21
    3266:	8f 93       	push	r24
    3268:	9f 93       	push	r25
    326a:	ef 93       	push	r30
    326c:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    326e:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    3270:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    3272:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    3274:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <UART_RxHead>
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    327c:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <UART_RxTail>
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	84 17       	cp	r24, r20
    3284:	95 07       	cpc	r25, r21
    3286:	39 f0       	breq	.+14     	; 0x3296 <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    3288:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    328c:	fc 01       	movw	r30, r24
    328e:	e0 5f       	subi	r30, 0xF0	; 240
    3290:	fc 4f       	sbci	r31, 0xFC	; 252
    3292:	30 83       	st	Z, r19
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3296:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    3298:	20 93 0b 03 	sts	0x030B, r18	; 0x80030b <UART_LastRxError>
}
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	9f 91       	pop	r25
    32a2:	8f 91       	pop	r24
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    32b6:	1f 92       	push	r1
    32b8:	0f 92       	push	r0
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	0f 92       	push	r0
    32be:	11 24       	eor	r1, r1
    32c0:	8f 93       	push	r24
    32c2:	9f 93       	push	r25
    32c4:	ef 93       	push	r30
    32c6:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    32c8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <UART_TxHead>
    32cc:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    32d0:	98 17       	cp	r25, r24
    32d2:	71 f0       	breq	.+28     	; 0x32f0 <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    32d4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	01 96       	adiw	r24, 0x01	; 1
    32dc:	8f 77       	andi	r24, 0x7F	; 127
    32de:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    32e0:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    32e4:	fc 01       	movw	r30, r24
    32e6:	e0 5f       	subi	r30, 0xF0	; 240
    32e8:	fc 4f       	sbci	r31, 0xFC	; 252
    32ea:	80 81       	ld	r24, Z
    32ec:	8c b9       	out	0x0c, r24	; 12
    32ee:	01 c0       	rjmp	.+2      	; 0x32f2 <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    32f0:	55 98       	cbi	0x0a, 5	; 10
    }
}
    32f2:	ff 91       	pop	r31
    32f4:	ef 91       	pop	r30
    32f6:	9f 91       	pop	r25
    32f8:	8f 91       	pop	r24
    32fa:	0f 90       	pop	r0
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	0f 90       	pop	r0
    3300:	1f 90       	pop	r1
    3302:	18 95       	reti

00003304 <__subsf3>:
    3304:	50 58       	subi	r21, 0x80	; 128

00003306 <__addsf3>:
    3306:	bb 27       	eor	r27, r27
    3308:	aa 27       	eor	r26, r26
    330a:	0e 94 9a 19 	call	0x3334	; 0x3334 <__addsf3x>
    330e:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__fp_round>
    3312:	0e 94 06 1b 	call	0x360c	; 0x360c <__fp_pscA>
    3316:	38 f0       	brcs	.+14     	; 0x3326 <__addsf3+0x20>
    3318:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fp_pscB>
    331c:	20 f0       	brcs	.+8      	; 0x3326 <__addsf3+0x20>
    331e:	39 f4       	brne	.+14     	; 0x332e <__addsf3+0x28>
    3320:	9f 3f       	cpi	r25, 0xFF	; 255
    3322:	19 f4       	brne	.+6      	; 0x332a <__addsf3+0x24>
    3324:	26 f4       	brtc	.+8      	; 0x332e <__addsf3+0x28>
    3326:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>
    332a:	0e f4       	brtc	.+2      	; 0x332e <__addsf3+0x28>
    332c:	e0 95       	com	r30
    332e:	e7 fb       	bst	r30, 7
    3330:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>

00003334 <__addsf3x>:
    3334:	e9 2f       	mov	r30, r25
    3336:	0e 94 25 1b 	call	0x364a	; 0x364a <__fp_split3>
    333a:	58 f3       	brcs	.-42     	; 0x3312 <__addsf3+0xc>
    333c:	ba 17       	cp	r27, r26
    333e:	62 07       	cpc	r22, r18
    3340:	73 07       	cpc	r23, r19
    3342:	84 07       	cpc	r24, r20
    3344:	95 07       	cpc	r25, r21
    3346:	20 f0       	brcs	.+8      	; 0x3350 <__addsf3x+0x1c>
    3348:	79 f4       	brne	.+30     	; 0x3368 <__addsf3x+0x34>
    334a:	a6 f5       	brtc	.+104    	; 0x33b4 <__addsf3x+0x80>
    334c:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__fp_zero>
    3350:	0e f4       	brtc	.+2      	; 0x3354 <__addsf3x+0x20>
    3352:	e0 95       	com	r30
    3354:	0b 2e       	mov	r0, r27
    3356:	ba 2f       	mov	r27, r26
    3358:	a0 2d       	mov	r26, r0
    335a:	0b 01       	movw	r0, r22
    335c:	b9 01       	movw	r22, r18
    335e:	90 01       	movw	r18, r0
    3360:	0c 01       	movw	r0, r24
    3362:	ca 01       	movw	r24, r20
    3364:	a0 01       	movw	r20, r0
    3366:	11 24       	eor	r1, r1
    3368:	ff 27       	eor	r31, r31
    336a:	59 1b       	sub	r21, r25
    336c:	99 f0       	breq	.+38     	; 0x3394 <__addsf3x+0x60>
    336e:	59 3f       	cpi	r21, 0xF9	; 249
    3370:	50 f4       	brcc	.+20     	; 0x3386 <__addsf3x+0x52>
    3372:	50 3e       	cpi	r21, 0xE0	; 224
    3374:	68 f1       	brcs	.+90     	; 0x33d0 <__addsf3x+0x9c>
    3376:	1a 16       	cp	r1, r26
    3378:	f0 40       	sbci	r31, 0x00	; 0
    337a:	a2 2f       	mov	r26, r18
    337c:	23 2f       	mov	r18, r19
    337e:	34 2f       	mov	r19, r20
    3380:	44 27       	eor	r20, r20
    3382:	58 5f       	subi	r21, 0xF8	; 248
    3384:	f3 cf       	rjmp	.-26     	; 0x336c <__addsf3x+0x38>
    3386:	46 95       	lsr	r20
    3388:	37 95       	ror	r19
    338a:	27 95       	ror	r18
    338c:	a7 95       	ror	r26
    338e:	f0 40       	sbci	r31, 0x00	; 0
    3390:	53 95       	inc	r21
    3392:	c9 f7       	brne	.-14     	; 0x3386 <__addsf3x+0x52>
    3394:	7e f4       	brtc	.+30     	; 0x33b4 <__addsf3x+0x80>
    3396:	1f 16       	cp	r1, r31
    3398:	ba 0b       	sbc	r27, r26
    339a:	62 0b       	sbc	r22, r18
    339c:	73 0b       	sbc	r23, r19
    339e:	84 0b       	sbc	r24, r20
    33a0:	ba f0       	brmi	.+46     	; 0x33d0 <__addsf3x+0x9c>
    33a2:	91 50       	subi	r25, 0x01	; 1
    33a4:	a1 f0       	breq	.+40     	; 0x33ce <__addsf3x+0x9a>
    33a6:	ff 0f       	add	r31, r31
    33a8:	bb 1f       	adc	r27, r27
    33aa:	66 1f       	adc	r22, r22
    33ac:	77 1f       	adc	r23, r23
    33ae:	88 1f       	adc	r24, r24
    33b0:	c2 f7       	brpl	.-16     	; 0x33a2 <__addsf3x+0x6e>
    33b2:	0e c0       	rjmp	.+28     	; 0x33d0 <__addsf3x+0x9c>
    33b4:	ba 0f       	add	r27, r26
    33b6:	62 1f       	adc	r22, r18
    33b8:	73 1f       	adc	r23, r19
    33ba:	84 1f       	adc	r24, r20
    33bc:	48 f4       	brcc	.+18     	; 0x33d0 <__addsf3x+0x9c>
    33be:	87 95       	ror	r24
    33c0:	77 95       	ror	r23
    33c2:	67 95       	ror	r22
    33c4:	b7 95       	ror	r27
    33c6:	f7 95       	ror	r31
    33c8:	9e 3f       	cpi	r25, 0xFE	; 254
    33ca:	08 f0       	brcs	.+2      	; 0x33ce <__addsf3x+0x9a>
    33cc:	b0 cf       	rjmp	.-160    	; 0x332e <__addsf3+0x28>
    33ce:	93 95       	inc	r25
    33d0:	88 0f       	add	r24, r24
    33d2:	08 f0       	brcs	.+2      	; 0x33d6 <__addsf3x+0xa2>
    33d4:	99 27       	eor	r25, r25
    33d6:	ee 0f       	add	r30, r30
    33d8:	97 95       	ror	r25
    33da:	87 95       	ror	r24
    33dc:	08 95       	ret

000033de <__cmpsf2>:
    33de:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_cmp>
    33e2:	08 f4       	brcc	.+2      	; 0x33e6 <__cmpsf2+0x8>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	08 95       	ret

000033e8 <__divsf3>:
    33e8:	0e 94 08 1a 	call	0x3410	; 0x3410 <__divsf3x>
    33ec:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__fp_round>
    33f0:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fp_pscB>
    33f4:	58 f0       	brcs	.+22     	; 0x340c <__divsf3+0x24>
    33f6:	0e 94 06 1b 	call	0x360c	; 0x360c <__fp_pscA>
    33fa:	40 f0       	brcs	.+16     	; 0x340c <__divsf3+0x24>
    33fc:	29 f4       	brne	.+10     	; 0x3408 <__divsf3+0x20>
    33fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3400:	29 f0       	breq	.+10     	; 0x340c <__divsf3+0x24>
    3402:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    3406:	51 11       	cpse	r21, r1
    3408:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>
    340c:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>

00003410 <__divsf3x>:
    3410:	0e 94 25 1b 	call	0x364a	; 0x364a <__fp_split3>
    3414:	68 f3       	brcs	.-38     	; 0x33f0 <__divsf3+0x8>

00003416 <__divsf3_pse>:
    3416:	99 23       	and	r25, r25
    3418:	b1 f3       	breq	.-20     	; 0x3406 <__divsf3+0x1e>
    341a:	55 23       	and	r21, r21
    341c:	91 f3       	breq	.-28     	; 0x3402 <__divsf3+0x1a>
    341e:	95 1b       	sub	r25, r21
    3420:	55 0b       	sbc	r21, r21
    3422:	bb 27       	eor	r27, r27
    3424:	aa 27       	eor	r26, r26
    3426:	62 17       	cp	r22, r18
    3428:	73 07       	cpc	r23, r19
    342a:	84 07       	cpc	r24, r20
    342c:	38 f0       	brcs	.+14     	; 0x343c <__divsf3_pse+0x26>
    342e:	9f 5f       	subi	r25, 0xFF	; 255
    3430:	5f 4f       	sbci	r21, 0xFF	; 255
    3432:	22 0f       	add	r18, r18
    3434:	33 1f       	adc	r19, r19
    3436:	44 1f       	adc	r20, r20
    3438:	aa 1f       	adc	r26, r26
    343a:	a9 f3       	breq	.-22     	; 0x3426 <__divsf3_pse+0x10>
    343c:	35 d0       	rcall	.+106    	; 0x34a8 <__divsf3_pse+0x92>
    343e:	0e 2e       	mov	r0, r30
    3440:	3a f0       	brmi	.+14     	; 0x3450 <__divsf3_pse+0x3a>
    3442:	e0 e8       	ldi	r30, 0x80	; 128
    3444:	32 d0       	rcall	.+100    	; 0x34aa <__divsf3_pse+0x94>
    3446:	91 50       	subi	r25, 0x01	; 1
    3448:	50 40       	sbci	r21, 0x00	; 0
    344a:	e6 95       	lsr	r30
    344c:	00 1c       	adc	r0, r0
    344e:	ca f7       	brpl	.-14     	; 0x3442 <__divsf3_pse+0x2c>
    3450:	2b d0       	rcall	.+86     	; 0x34a8 <__divsf3_pse+0x92>
    3452:	fe 2f       	mov	r31, r30
    3454:	29 d0       	rcall	.+82     	; 0x34a8 <__divsf3_pse+0x92>
    3456:	66 0f       	add	r22, r22
    3458:	77 1f       	adc	r23, r23
    345a:	88 1f       	adc	r24, r24
    345c:	bb 1f       	adc	r27, r27
    345e:	26 17       	cp	r18, r22
    3460:	37 07       	cpc	r19, r23
    3462:	48 07       	cpc	r20, r24
    3464:	ab 07       	cpc	r26, r27
    3466:	b0 e8       	ldi	r27, 0x80	; 128
    3468:	09 f0       	breq	.+2      	; 0x346c <__divsf3_pse+0x56>
    346a:	bb 0b       	sbc	r27, r27
    346c:	80 2d       	mov	r24, r0
    346e:	bf 01       	movw	r22, r30
    3470:	ff 27       	eor	r31, r31
    3472:	93 58       	subi	r25, 0x83	; 131
    3474:	5f 4f       	sbci	r21, 0xFF	; 255
    3476:	3a f0       	brmi	.+14     	; 0x3486 <__divsf3_pse+0x70>
    3478:	9e 3f       	cpi	r25, 0xFE	; 254
    347a:	51 05       	cpc	r21, r1
    347c:	78 f0       	brcs	.+30     	; 0x349c <__divsf3_pse+0x86>
    347e:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    3482:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>
    3486:	5f 3f       	cpi	r21, 0xFF	; 255
    3488:	e4 f3       	brlt	.-8      	; 0x3482 <__divsf3_pse+0x6c>
    348a:	98 3e       	cpi	r25, 0xE8	; 232
    348c:	d4 f3       	brlt	.-12     	; 0x3482 <__divsf3_pse+0x6c>
    348e:	86 95       	lsr	r24
    3490:	77 95       	ror	r23
    3492:	67 95       	ror	r22
    3494:	b7 95       	ror	r27
    3496:	f7 95       	ror	r31
    3498:	9f 5f       	subi	r25, 0xFF	; 255
    349a:	c9 f7       	brne	.-14     	; 0x348e <__divsf3_pse+0x78>
    349c:	88 0f       	add	r24, r24
    349e:	91 1d       	adc	r25, r1
    34a0:	96 95       	lsr	r25
    34a2:	87 95       	ror	r24
    34a4:	97 f9       	bld	r25, 7
    34a6:	08 95       	ret
    34a8:	e1 e0       	ldi	r30, 0x01	; 1
    34aa:	66 0f       	add	r22, r22
    34ac:	77 1f       	adc	r23, r23
    34ae:	88 1f       	adc	r24, r24
    34b0:	bb 1f       	adc	r27, r27
    34b2:	62 17       	cp	r22, r18
    34b4:	73 07       	cpc	r23, r19
    34b6:	84 07       	cpc	r24, r20
    34b8:	ba 07       	cpc	r27, r26
    34ba:	20 f0       	brcs	.+8      	; 0x34c4 <__divsf3_pse+0xae>
    34bc:	62 1b       	sub	r22, r18
    34be:	73 0b       	sbc	r23, r19
    34c0:	84 0b       	sbc	r24, r20
    34c2:	ba 0b       	sbc	r27, r26
    34c4:	ee 1f       	adc	r30, r30
    34c6:	88 f7       	brcc	.-30     	; 0x34aa <__divsf3_pse+0x94>
    34c8:	e0 95       	com	r30
    34ca:	08 95       	ret

000034cc <__fixsfsi>:
    34cc:	0e 94 6d 1a 	call	0x34da	; 0x34da <__fixunssfsi>
    34d0:	68 94       	set
    34d2:	b1 11       	cpse	r27, r1
    34d4:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>
    34d8:	08 95       	ret

000034da <__fixunssfsi>:
    34da:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_splitA>
    34de:	88 f0       	brcs	.+34     	; 0x3502 <__fixunssfsi+0x28>
    34e0:	9f 57       	subi	r25, 0x7F	; 127
    34e2:	98 f0       	brcs	.+38     	; 0x350a <__fixunssfsi+0x30>
    34e4:	b9 2f       	mov	r27, r25
    34e6:	99 27       	eor	r25, r25
    34e8:	b7 51       	subi	r27, 0x17	; 23
    34ea:	b0 f0       	brcs	.+44     	; 0x3518 <__fixunssfsi+0x3e>
    34ec:	e1 f0       	breq	.+56     	; 0x3526 <__fixunssfsi+0x4c>
    34ee:	66 0f       	add	r22, r22
    34f0:	77 1f       	adc	r23, r23
    34f2:	88 1f       	adc	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	1a f0       	brmi	.+6      	; 0x34fe <__fixunssfsi+0x24>
    34f8:	ba 95       	dec	r27
    34fa:	c9 f7       	brne	.-14     	; 0x34ee <__fixunssfsi+0x14>
    34fc:	14 c0       	rjmp	.+40     	; 0x3526 <__fixunssfsi+0x4c>
    34fe:	b1 30       	cpi	r27, 0x01	; 1
    3500:	91 f0       	breq	.+36     	; 0x3526 <__fixunssfsi+0x4c>
    3502:	0e 94 47 1b 	call	0x368e	; 0x368e <__fp_zero>
    3506:	b1 e0       	ldi	r27, 0x01	; 1
    3508:	08 95       	ret
    350a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__fp_zero>
    350e:	67 2f       	mov	r22, r23
    3510:	78 2f       	mov	r23, r24
    3512:	88 27       	eor	r24, r24
    3514:	b8 5f       	subi	r27, 0xF8	; 248
    3516:	39 f0       	breq	.+14     	; 0x3526 <__fixunssfsi+0x4c>
    3518:	b9 3f       	cpi	r27, 0xF9	; 249
    351a:	cc f3       	brlt	.-14     	; 0x350e <__fixunssfsi+0x34>
    351c:	86 95       	lsr	r24
    351e:	77 95       	ror	r23
    3520:	67 95       	ror	r22
    3522:	b3 95       	inc	r27
    3524:	d9 f7       	brne	.-10     	; 0x351c <__fixunssfsi+0x42>
    3526:	3e f4       	brtc	.+14     	; 0x3536 <__fixunssfsi+0x5c>
    3528:	90 95       	com	r25
    352a:	80 95       	com	r24
    352c:	70 95       	com	r23
    352e:	61 95       	neg	r22
    3530:	7f 4f       	sbci	r23, 0xFF	; 255
    3532:	8f 4f       	sbci	r24, 0xFF	; 255
    3534:	9f 4f       	sbci	r25, 0xFF	; 255
    3536:	08 95       	ret

00003538 <__floatunsisf>:
    3538:	e8 94       	clt
    353a:	09 c0       	rjmp	.+18     	; 0x354e <__floatsisf+0x12>

0000353c <__floatsisf>:
    353c:	97 fb       	bst	r25, 7
    353e:	3e f4       	brtc	.+14     	; 0x354e <__floatsisf+0x12>
    3540:	90 95       	com	r25
    3542:	80 95       	com	r24
    3544:	70 95       	com	r23
    3546:	61 95       	neg	r22
    3548:	7f 4f       	sbci	r23, 0xFF	; 255
    354a:	8f 4f       	sbci	r24, 0xFF	; 255
    354c:	9f 4f       	sbci	r25, 0xFF	; 255
    354e:	99 23       	and	r25, r25
    3550:	a9 f0       	breq	.+42     	; 0x357c <__floatsisf+0x40>
    3552:	f9 2f       	mov	r31, r25
    3554:	96 e9       	ldi	r25, 0x96	; 150
    3556:	bb 27       	eor	r27, r27
    3558:	93 95       	inc	r25
    355a:	f6 95       	lsr	r31
    355c:	87 95       	ror	r24
    355e:	77 95       	ror	r23
    3560:	67 95       	ror	r22
    3562:	b7 95       	ror	r27
    3564:	f1 11       	cpse	r31, r1
    3566:	f8 cf       	rjmp	.-16     	; 0x3558 <__floatsisf+0x1c>
    3568:	fa f4       	brpl	.+62     	; 0x35a8 <__floatsisf+0x6c>
    356a:	bb 0f       	add	r27, r27
    356c:	11 f4       	brne	.+4      	; 0x3572 <__floatsisf+0x36>
    356e:	60 ff       	sbrs	r22, 0
    3570:	1b c0       	rjmp	.+54     	; 0x35a8 <__floatsisf+0x6c>
    3572:	6f 5f       	subi	r22, 0xFF	; 255
    3574:	7f 4f       	sbci	r23, 0xFF	; 255
    3576:	8f 4f       	sbci	r24, 0xFF	; 255
    3578:	9f 4f       	sbci	r25, 0xFF	; 255
    357a:	16 c0       	rjmp	.+44     	; 0x35a8 <__floatsisf+0x6c>
    357c:	88 23       	and	r24, r24
    357e:	11 f0       	breq	.+4      	; 0x3584 <__floatsisf+0x48>
    3580:	96 e9       	ldi	r25, 0x96	; 150
    3582:	11 c0       	rjmp	.+34     	; 0x35a6 <__floatsisf+0x6a>
    3584:	77 23       	and	r23, r23
    3586:	21 f0       	breq	.+8      	; 0x3590 <__floatsisf+0x54>
    3588:	9e e8       	ldi	r25, 0x8E	; 142
    358a:	87 2f       	mov	r24, r23
    358c:	76 2f       	mov	r23, r22
    358e:	05 c0       	rjmp	.+10     	; 0x359a <__floatsisf+0x5e>
    3590:	66 23       	and	r22, r22
    3592:	71 f0       	breq	.+28     	; 0x35b0 <__floatsisf+0x74>
    3594:	96 e8       	ldi	r25, 0x86	; 134
    3596:	86 2f       	mov	r24, r22
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	2a f0       	brmi	.+10     	; 0x35a8 <__floatsisf+0x6c>
    359e:	9a 95       	dec	r25
    35a0:	66 0f       	add	r22, r22
    35a2:	77 1f       	adc	r23, r23
    35a4:	88 1f       	adc	r24, r24
    35a6:	da f7       	brpl	.-10     	; 0x359e <__floatsisf+0x62>
    35a8:	88 0f       	add	r24, r24
    35aa:	96 95       	lsr	r25
    35ac:	87 95       	ror	r24
    35ae:	97 f9       	bld	r25, 7
    35b0:	08 95       	ret

000035b2 <__fp_cmp>:
    35b2:	99 0f       	add	r25, r25
    35b4:	00 08       	sbc	r0, r0
    35b6:	55 0f       	add	r21, r21
    35b8:	aa 0b       	sbc	r26, r26
    35ba:	e0 e8       	ldi	r30, 0x80	; 128
    35bc:	fe ef       	ldi	r31, 0xFE	; 254
    35be:	16 16       	cp	r1, r22
    35c0:	17 06       	cpc	r1, r23
    35c2:	e8 07       	cpc	r30, r24
    35c4:	f9 07       	cpc	r31, r25
    35c6:	c0 f0       	brcs	.+48     	; 0x35f8 <__fp_cmp+0x46>
    35c8:	12 16       	cp	r1, r18
    35ca:	13 06       	cpc	r1, r19
    35cc:	e4 07       	cpc	r30, r20
    35ce:	f5 07       	cpc	r31, r21
    35d0:	98 f0       	brcs	.+38     	; 0x35f8 <__fp_cmp+0x46>
    35d2:	62 1b       	sub	r22, r18
    35d4:	73 0b       	sbc	r23, r19
    35d6:	84 0b       	sbc	r24, r20
    35d8:	95 0b       	sbc	r25, r21
    35da:	39 f4       	brne	.+14     	; 0x35ea <__fp_cmp+0x38>
    35dc:	0a 26       	eor	r0, r26
    35de:	61 f0       	breq	.+24     	; 0x35f8 <__fp_cmp+0x46>
    35e0:	23 2b       	or	r18, r19
    35e2:	24 2b       	or	r18, r20
    35e4:	25 2b       	or	r18, r21
    35e6:	21 f4       	brne	.+8      	; 0x35f0 <__fp_cmp+0x3e>
    35e8:	08 95       	ret
    35ea:	0a 26       	eor	r0, r26
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <__fp_cmp+0x3e>
    35ee:	a1 40       	sbci	r26, 0x01	; 1
    35f0:	a6 95       	lsr	r26
    35f2:	8f ef       	ldi	r24, 0xFF	; 255
    35f4:	81 1d       	adc	r24, r1
    35f6:	81 1d       	adc	r24, r1
    35f8:	08 95       	ret

000035fa <__fp_inf>:
    35fa:	97 f9       	bld	r25, 7
    35fc:	9f 67       	ori	r25, 0x7F	; 127
    35fe:	80 e8       	ldi	r24, 0x80	; 128
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	08 95       	ret

00003606 <__fp_nan>:
    3606:	9f ef       	ldi	r25, 0xFF	; 255
    3608:	80 ec       	ldi	r24, 0xC0	; 192
    360a:	08 95       	ret

0000360c <__fp_pscA>:
    360c:	00 24       	eor	r0, r0
    360e:	0a 94       	dec	r0
    3610:	16 16       	cp	r1, r22
    3612:	17 06       	cpc	r1, r23
    3614:	18 06       	cpc	r1, r24
    3616:	09 06       	cpc	r0, r25
    3618:	08 95       	ret

0000361a <__fp_pscB>:
    361a:	00 24       	eor	r0, r0
    361c:	0a 94       	dec	r0
    361e:	12 16       	cp	r1, r18
    3620:	13 06       	cpc	r1, r19
    3622:	14 06       	cpc	r1, r20
    3624:	05 06       	cpc	r0, r21
    3626:	08 95       	ret

00003628 <__fp_round>:
    3628:	09 2e       	mov	r0, r25
    362a:	03 94       	inc	r0
    362c:	00 0c       	add	r0, r0
    362e:	11 f4       	brne	.+4      	; 0x3634 <__fp_round+0xc>
    3630:	88 23       	and	r24, r24
    3632:	52 f0       	brmi	.+20     	; 0x3648 <__fp_round+0x20>
    3634:	bb 0f       	add	r27, r27
    3636:	40 f4       	brcc	.+16     	; 0x3648 <__fp_round+0x20>
    3638:	bf 2b       	or	r27, r31
    363a:	11 f4       	brne	.+4      	; 0x3640 <__fp_round+0x18>
    363c:	60 ff       	sbrs	r22, 0
    363e:	04 c0       	rjmp	.+8      	; 0x3648 <__fp_round+0x20>
    3640:	6f 5f       	subi	r22, 0xFF	; 255
    3642:	7f 4f       	sbci	r23, 0xFF	; 255
    3644:	8f 4f       	sbci	r24, 0xFF	; 255
    3646:	9f 4f       	sbci	r25, 0xFF	; 255
    3648:	08 95       	ret

0000364a <__fp_split3>:
    364a:	57 fd       	sbrc	r21, 7
    364c:	90 58       	subi	r25, 0x80	; 128
    364e:	44 0f       	add	r20, r20
    3650:	55 1f       	adc	r21, r21
    3652:	59 f0       	breq	.+22     	; 0x366a <__fp_splitA+0x10>
    3654:	5f 3f       	cpi	r21, 0xFF	; 255
    3656:	71 f0       	breq	.+28     	; 0x3674 <__fp_splitA+0x1a>
    3658:	47 95       	ror	r20

0000365a <__fp_splitA>:
    365a:	88 0f       	add	r24, r24
    365c:	97 fb       	bst	r25, 7
    365e:	99 1f       	adc	r25, r25
    3660:	61 f0       	breq	.+24     	; 0x367a <__fp_splitA+0x20>
    3662:	9f 3f       	cpi	r25, 0xFF	; 255
    3664:	79 f0       	breq	.+30     	; 0x3684 <__fp_splitA+0x2a>
    3666:	87 95       	ror	r24
    3668:	08 95       	ret
    366a:	12 16       	cp	r1, r18
    366c:	13 06       	cpc	r1, r19
    366e:	14 06       	cpc	r1, r20
    3670:	55 1f       	adc	r21, r21
    3672:	f2 cf       	rjmp	.-28     	; 0x3658 <__fp_split3+0xe>
    3674:	46 95       	lsr	r20
    3676:	f1 df       	rcall	.-30     	; 0x365a <__fp_splitA>
    3678:	08 c0       	rjmp	.+16     	; 0x368a <__fp_splitA+0x30>
    367a:	16 16       	cp	r1, r22
    367c:	17 06       	cpc	r1, r23
    367e:	18 06       	cpc	r1, r24
    3680:	99 1f       	adc	r25, r25
    3682:	f1 cf       	rjmp	.-30     	; 0x3666 <__fp_splitA+0xc>
    3684:	86 95       	lsr	r24
    3686:	71 05       	cpc	r23, r1
    3688:	61 05       	cpc	r22, r1
    368a:	08 94       	sec
    368c:	08 95       	ret

0000368e <__fp_zero>:
    368e:	e8 94       	clt

00003690 <__fp_szero>:
    3690:	bb 27       	eor	r27, r27
    3692:	66 27       	eor	r22, r22
    3694:	77 27       	eor	r23, r23
    3696:	cb 01       	movw	r24, r22
    3698:	97 f9       	bld	r25, 7
    369a:	08 95       	ret

0000369c <__gesf2>:
    369c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_cmp>
    36a0:	08 f4       	brcc	.+2      	; 0x36a4 <__gesf2+0x8>
    36a2:	8f ef       	ldi	r24, 0xFF	; 255
    36a4:	08 95       	ret

000036a6 <__mulsf3>:
    36a6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__mulsf3x>
    36aa:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__fp_round>
    36ae:	0e 94 06 1b 	call	0x360c	; 0x360c <__fp_pscA>
    36b2:	38 f0       	brcs	.+14     	; 0x36c2 <__mulsf3+0x1c>
    36b4:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fp_pscB>
    36b8:	20 f0       	brcs	.+8      	; 0x36c2 <__mulsf3+0x1c>
    36ba:	95 23       	and	r25, r21
    36bc:	11 f0       	breq	.+4      	; 0x36c2 <__mulsf3+0x1c>
    36be:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    36c2:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>
    36c6:	11 24       	eor	r1, r1
    36c8:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>

000036cc <__mulsf3x>:
    36cc:	0e 94 25 1b 	call	0x364a	; 0x364a <__fp_split3>
    36d0:	70 f3       	brcs	.-36     	; 0x36ae <__mulsf3+0x8>

000036d2 <__mulsf3_pse>:
    36d2:	95 9f       	mul	r25, r21
    36d4:	c1 f3       	breq	.-16     	; 0x36c6 <__mulsf3+0x20>
    36d6:	95 0f       	add	r25, r21
    36d8:	50 e0       	ldi	r21, 0x00	; 0
    36da:	55 1f       	adc	r21, r21
    36dc:	62 9f       	mul	r22, r18
    36de:	f0 01       	movw	r30, r0
    36e0:	72 9f       	mul	r23, r18
    36e2:	bb 27       	eor	r27, r27
    36e4:	f0 0d       	add	r31, r0
    36e6:	b1 1d       	adc	r27, r1
    36e8:	63 9f       	mul	r22, r19
    36ea:	aa 27       	eor	r26, r26
    36ec:	f0 0d       	add	r31, r0
    36ee:	b1 1d       	adc	r27, r1
    36f0:	aa 1f       	adc	r26, r26
    36f2:	64 9f       	mul	r22, r20
    36f4:	66 27       	eor	r22, r22
    36f6:	b0 0d       	add	r27, r0
    36f8:	a1 1d       	adc	r26, r1
    36fa:	66 1f       	adc	r22, r22
    36fc:	82 9f       	mul	r24, r18
    36fe:	22 27       	eor	r18, r18
    3700:	b0 0d       	add	r27, r0
    3702:	a1 1d       	adc	r26, r1
    3704:	62 1f       	adc	r22, r18
    3706:	73 9f       	mul	r23, r19
    3708:	b0 0d       	add	r27, r0
    370a:	a1 1d       	adc	r26, r1
    370c:	62 1f       	adc	r22, r18
    370e:	83 9f       	mul	r24, r19
    3710:	a0 0d       	add	r26, r0
    3712:	61 1d       	adc	r22, r1
    3714:	22 1f       	adc	r18, r18
    3716:	74 9f       	mul	r23, r20
    3718:	33 27       	eor	r19, r19
    371a:	a0 0d       	add	r26, r0
    371c:	61 1d       	adc	r22, r1
    371e:	23 1f       	adc	r18, r19
    3720:	84 9f       	mul	r24, r20
    3722:	60 0d       	add	r22, r0
    3724:	21 1d       	adc	r18, r1
    3726:	82 2f       	mov	r24, r18
    3728:	76 2f       	mov	r23, r22
    372a:	6a 2f       	mov	r22, r26
    372c:	11 24       	eor	r1, r1
    372e:	9f 57       	subi	r25, 0x7F	; 127
    3730:	50 40       	sbci	r21, 0x00	; 0
    3732:	9a f0       	brmi	.+38     	; 0x375a <__mulsf3_pse+0x88>
    3734:	f1 f0       	breq	.+60     	; 0x3772 <__mulsf3_pse+0xa0>
    3736:	88 23       	and	r24, r24
    3738:	4a f0       	brmi	.+18     	; 0x374c <__mulsf3_pse+0x7a>
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	bb 1f       	adc	r27, r27
    3740:	66 1f       	adc	r22, r22
    3742:	77 1f       	adc	r23, r23
    3744:	88 1f       	adc	r24, r24
    3746:	91 50       	subi	r25, 0x01	; 1
    3748:	50 40       	sbci	r21, 0x00	; 0
    374a:	a9 f7       	brne	.-22     	; 0x3736 <__mulsf3_pse+0x64>
    374c:	9e 3f       	cpi	r25, 0xFE	; 254
    374e:	51 05       	cpc	r21, r1
    3750:	80 f0       	brcs	.+32     	; 0x3772 <__mulsf3_pse+0xa0>
    3752:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    3756:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>
    375a:	5f 3f       	cpi	r21, 0xFF	; 255
    375c:	e4 f3       	brlt	.-8      	; 0x3756 <__mulsf3_pse+0x84>
    375e:	98 3e       	cpi	r25, 0xE8	; 232
    3760:	d4 f3       	brlt	.-12     	; 0x3756 <__mulsf3_pse+0x84>
    3762:	86 95       	lsr	r24
    3764:	77 95       	ror	r23
    3766:	67 95       	ror	r22
    3768:	b7 95       	ror	r27
    376a:	f7 95       	ror	r31
    376c:	e7 95       	ror	r30
    376e:	9f 5f       	subi	r25, 0xFF	; 255
    3770:	c1 f7       	brne	.-16     	; 0x3762 <__mulsf3_pse+0x90>
    3772:	fe 2b       	or	r31, r30
    3774:	88 0f       	add	r24, r24
    3776:	91 1d       	adc	r25, r1
    3778:	96 95       	lsr	r25
    377a:	87 95       	ror	r24
    377c:	97 f9       	bld	r25, 7
    377e:	08 95       	ret

00003780 <pow>:
    3780:	fa 01       	movw	r30, r20
    3782:	ee 0f       	add	r30, r30
    3784:	ff 1f       	adc	r31, r31
    3786:	30 96       	adiw	r30, 0x00	; 0
    3788:	21 05       	cpc	r18, r1
    378a:	31 05       	cpc	r19, r1
    378c:	a1 f1       	breq	.+104    	; 0x37f6 <pow+0x76>
    378e:	61 15       	cp	r22, r1
    3790:	71 05       	cpc	r23, r1
    3792:	61 f4       	brne	.+24     	; 0x37ac <pow+0x2c>
    3794:	80 38       	cpi	r24, 0x80	; 128
    3796:	bf e3       	ldi	r27, 0x3F	; 63
    3798:	9b 07       	cpc	r25, r27
    379a:	49 f1       	breq	.+82     	; 0x37ee <pow+0x6e>
    379c:	68 94       	set
    379e:	90 38       	cpi	r25, 0x80	; 128
    37a0:	81 05       	cpc	r24, r1
    37a2:	61 f0       	breq	.+24     	; 0x37bc <pow+0x3c>
    37a4:	80 38       	cpi	r24, 0x80	; 128
    37a6:	bf ef       	ldi	r27, 0xFF	; 255
    37a8:	9b 07       	cpc	r25, r27
    37aa:	41 f0       	breq	.+16     	; 0x37bc <pow+0x3c>
    37ac:	99 23       	and	r25, r25
    37ae:	4a f5       	brpl	.+82     	; 0x3802 <pow+0x82>
    37b0:	ff 3f       	cpi	r31, 0xFF	; 255
    37b2:	e1 05       	cpc	r30, r1
    37b4:	31 05       	cpc	r19, r1
    37b6:	21 05       	cpc	r18, r1
    37b8:	19 f1       	breq	.+70     	; 0x3800 <pow+0x80>
    37ba:	e8 94       	clt
    37bc:	08 94       	sec
    37be:	e7 95       	ror	r30
    37c0:	d9 01       	movw	r26, r18
    37c2:	aa 23       	and	r26, r26
    37c4:	29 f4       	brne	.+10     	; 0x37d0 <pow+0x50>
    37c6:	ab 2f       	mov	r26, r27
    37c8:	be 2f       	mov	r27, r30
    37ca:	f8 5f       	subi	r31, 0xF8	; 248
    37cc:	d0 f3       	brcs	.-12     	; 0x37c2 <pow+0x42>
    37ce:	10 c0       	rjmp	.+32     	; 0x37f0 <pow+0x70>
    37d0:	ff 5f       	subi	r31, 0xFF	; 255
    37d2:	70 f4       	brcc	.+28     	; 0x37f0 <pow+0x70>
    37d4:	a6 95       	lsr	r26
    37d6:	e0 f7       	brcc	.-8      	; 0x37d0 <pow+0x50>
    37d8:	f7 39       	cpi	r31, 0x97	; 151
    37da:	50 f0       	brcs	.+20     	; 0x37f0 <pow+0x70>
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <pow+0x64>
    37de:	ff 3a       	cpi	r31, 0xAF	; 175
    37e0:	38 f4       	brcc	.+14     	; 0x37f0 <pow+0x70>
    37e2:	9f 77       	andi	r25, 0x7F	; 127
    37e4:	9f 93       	push	r25
    37e6:	0d d0       	rcall	.+26     	; 0x3802 <pow+0x82>
    37e8:	0f 90       	pop	r0
    37ea:	07 fc       	sbrc	r0, 7
    37ec:	90 58       	subi	r25, 0x80	; 128
    37ee:	08 95       	ret
    37f0:	46 f0       	brts	.+16     	; 0x3802 <pow+0x82>
    37f2:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	80 e8       	ldi	r24, 0x80	; 128
    37fc:	9f e3       	ldi	r25, 0x3F	; 63
    37fe:	08 95       	ret
    3800:	4f e7       	ldi	r20, 0x7F	; 127
    3802:	9f 77       	andi	r25, 0x7F	; 127
    3804:	5f 93       	push	r21
    3806:	4f 93       	push	r20
    3808:	3f 93       	push	r19
    380a:	2f 93       	push	r18
    380c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <log>
    3810:	2f 91       	pop	r18
    3812:	3f 91       	pop	r19
    3814:	4f 91       	pop	r20
    3816:	5f 91       	pop	r21
    3818:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__mulsf3>
    381c:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <exp>
    3820:	29 f4       	brne	.+10     	; 0x382c <pow+0xac>
    3822:	16 f0       	brts	.+4      	; 0x3828 <pow+0xa8>
    3824:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    3828:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__fp_zero>
    382c:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>

00003830 <exp>:
    3830:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_splitA>
    3834:	a8 f3       	brcs	.-22     	; 0x3820 <pow+0xa0>
    3836:	96 38       	cpi	r25, 0x86	; 134
    3838:	a0 f7       	brcc	.-24     	; 0x3822 <pow+0xa2>
    383a:	07 f8       	bld	r0, 7
    383c:	0f 92       	push	r0
    383e:	e8 94       	clt
    3840:	2b e3       	ldi	r18, 0x3B	; 59
    3842:	3a ea       	ldi	r19, 0xAA	; 170
    3844:	48 eb       	ldi	r20, 0xB8	; 184
    3846:	5f e7       	ldi	r21, 0x7F	; 127
    3848:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__mulsf3_pse>
    384c:	0f 92       	push	r0
    384e:	0f 92       	push	r0
    3850:	0f 92       	push	r0
    3852:	4d b7       	in	r20, 0x3d	; 61
    3854:	5e b7       	in	r21, 0x3e	; 62
    3856:	0f 92       	push	r0
    3858:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <modf>
    385c:	e2 e5       	ldi	r30, 0x52	; 82
    385e:	f2 e0       	ldi	r31, 0x02	; 2
    3860:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__fp_powser>
    3864:	4f 91       	pop	r20
    3866:	5f 91       	pop	r21
    3868:	ef 91       	pop	r30
    386a:	ff 91       	pop	r31
    386c:	e5 95       	asr	r30
    386e:	ee 1f       	adc	r30, r30
    3870:	ff 1f       	adc	r31, r31
    3872:	49 f0       	breq	.+18     	; 0x3886 <exp+0x56>
    3874:	fe 57       	subi	r31, 0x7E	; 126
    3876:	e0 68       	ori	r30, 0x80	; 128
    3878:	44 27       	eor	r20, r20
    387a:	ee 0f       	add	r30, r30
    387c:	44 1f       	adc	r20, r20
    387e:	fa 95       	dec	r31
    3880:	e1 f7       	brne	.-8      	; 0x387a <exp+0x4a>
    3882:	41 95       	neg	r20
    3884:	55 0b       	sbc	r21, r21
    3886:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <ldexp>
    388a:	0f 90       	pop	r0
    388c:	07 fe       	sbrs	r0, 7
    388e:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <inverse>
    3892:	08 95       	ret

00003894 <__fp_powser>:
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	1f 93       	push	r17
    389a:	0f 93       	push	r16
    389c:	ff 92       	push	r15
    389e:	ef 92       	push	r14
    38a0:	df 92       	push	r13
    38a2:	7b 01       	movw	r14, r22
    38a4:	8c 01       	movw	r16, r24
    38a6:	68 94       	set
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <__fp_powser+0x22>
    38aa:	da 2e       	mov	r13, r26
    38ac:	ef 01       	movw	r28, r30
    38ae:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__mulsf3x>
    38b2:	fe 01       	movw	r30, r28
    38b4:	e8 94       	clt
    38b6:	a5 91       	lpm	r26, Z+
    38b8:	25 91       	lpm	r18, Z+
    38ba:	35 91       	lpm	r19, Z+
    38bc:	45 91       	lpm	r20, Z+
    38be:	55 91       	lpm	r21, Z+
    38c0:	a6 f3       	brts	.-24     	; 0x38aa <__fp_powser+0x16>
    38c2:	ef 01       	movw	r28, r30
    38c4:	0e 94 9a 19 	call	0x3334	; 0x3334 <__addsf3x>
    38c8:	fe 01       	movw	r30, r28
    38ca:	97 01       	movw	r18, r14
    38cc:	a8 01       	movw	r20, r16
    38ce:	da 94       	dec	r13
    38d0:	69 f7       	brne	.-38     	; 0x38ac <__fp_powser+0x18>
    38d2:	df 90       	pop	r13
    38d4:	ef 90       	pop	r14
    38d6:	ff 90       	pop	r15
    38d8:	0f 91       	pop	r16
    38da:	1f 91       	pop	r17
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <inverse>:
    38e2:	9b 01       	movw	r18, r22
    38e4:	ac 01       	movw	r20, r24
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	80 e8       	ldi	r24, 0x80	; 128
    38ec:	9f e3       	ldi	r25, 0x3F	; 63
    38ee:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__divsf3>
    38f2:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>
    38f6:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__fp_mpack>

000038fa <ldexp>:
    38fa:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_splitA>
    38fe:	d8 f3       	brcs	.-10     	; 0x38f6 <inverse+0x14>
    3900:	99 23       	and	r25, r25
    3902:	c9 f3       	breq	.-14     	; 0x38f6 <inverse+0x14>
    3904:	94 0f       	add	r25, r20
    3906:	51 1d       	adc	r21, r1
    3908:	a3 f3       	brvs	.-24     	; 0x38f2 <inverse+0x10>
    390a:	91 50       	subi	r25, 0x01	; 1
    390c:	50 40       	sbci	r21, 0x00	; 0
    390e:	94 f0       	brlt	.+36     	; 0x3934 <ldexp+0x3a>
    3910:	59 f0       	breq	.+22     	; 0x3928 <ldexp+0x2e>
    3912:	88 23       	and	r24, r24
    3914:	32 f0       	brmi	.+12     	; 0x3922 <ldexp+0x28>
    3916:	66 0f       	add	r22, r22
    3918:	77 1f       	adc	r23, r23
    391a:	88 1f       	adc	r24, r24
    391c:	91 50       	subi	r25, 0x01	; 1
    391e:	50 40       	sbci	r21, 0x00	; 0
    3920:	c1 f7       	brne	.-16     	; 0x3912 <ldexp+0x18>
    3922:	9e 3f       	cpi	r25, 0xFE	; 254
    3924:	51 05       	cpc	r21, r1
    3926:	2c f7       	brge	.-54     	; 0x38f2 <inverse+0x10>
    3928:	88 0f       	add	r24, r24
    392a:	91 1d       	adc	r25, r1
    392c:	96 95       	lsr	r25
    392e:	87 95       	ror	r24
    3930:	97 f9       	bld	r25, 7
    3932:	08 95       	ret
    3934:	5f 3f       	cpi	r21, 0xFF	; 255
    3936:	ac f0       	brlt	.+42     	; 0x3962 <ldexp+0x68>
    3938:	98 3e       	cpi	r25, 0xE8	; 232
    393a:	9c f0       	brlt	.+38     	; 0x3962 <ldexp+0x68>
    393c:	bb 27       	eor	r27, r27
    393e:	86 95       	lsr	r24
    3940:	77 95       	ror	r23
    3942:	67 95       	ror	r22
    3944:	b7 95       	ror	r27
    3946:	08 f4       	brcc	.+2      	; 0x394a <ldexp+0x50>
    3948:	b1 60       	ori	r27, 0x01	; 1
    394a:	93 95       	inc	r25
    394c:	c1 f7       	brne	.-16     	; 0x393e <ldexp+0x44>
    394e:	bb 0f       	add	r27, r27
    3950:	58 f7       	brcc	.-42     	; 0x3928 <ldexp+0x2e>
    3952:	11 f4       	brne	.+4      	; 0x3958 <ldexp+0x5e>
    3954:	60 ff       	sbrs	r22, 0
    3956:	e8 cf       	rjmp	.-48     	; 0x3928 <ldexp+0x2e>
    3958:	6f 5f       	subi	r22, 0xFF	; 255
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	8f 4f       	sbci	r24, 0xFF	; 255
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	e3 cf       	rjmp	.-58     	; 0x3928 <ldexp+0x2e>
    3962:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__fp_szero>
    3966:	16 f0       	brts	.+4      	; 0x396c <ldexp+0x72>
    3968:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__fp_mpack>
    396c:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_nan>
    3970:	68 94       	set
    3972:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__fp_inf>

00003976 <log>:
    3976:	0e 94 2d 1b 	call	0x365a	; 0x365a <__fp_splitA>
    397a:	a8 f3       	brcs	.-22     	; 0x3966 <ldexp+0x6c>
    397c:	99 23       	and	r25, r25
    397e:	c1 f3       	breq	.-16     	; 0x3970 <ldexp+0x76>
    3980:	ae f3       	brts	.-22     	; 0x396c <ldexp+0x72>
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	1f 93       	push	r17
    3988:	0f 93       	push	r16
    398a:	ff 92       	push	r15
    398c:	c9 2f       	mov	r28, r25
    398e:	dd 27       	eor	r29, r29
    3990:	88 23       	and	r24, r24
    3992:	2a f0       	brmi	.+10     	; 0x399e <log+0x28>
    3994:	21 97       	sbiw	r28, 0x01	; 1
    3996:	66 0f       	add	r22, r22
    3998:	77 1f       	adc	r23, r23
    399a:	88 1f       	adc	r24, r24
    399c:	da f7       	brpl	.-10     	; 0x3994 <log+0x1e>
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e8       	ldi	r20, 0x80	; 128
    39a4:	5f eb       	ldi	r21, 0xBF	; 191
    39a6:	9f e3       	ldi	r25, 0x3F	; 63
    39a8:	88 39       	cpi	r24, 0x98	; 152
    39aa:	20 f0       	brcs	.+8      	; 0x39b4 <log+0x3e>
    39ac:	80 3e       	cpi	r24, 0xE0	; 224
    39ae:	38 f0       	brcs	.+14     	; 0x39be <log+0x48>
    39b0:	21 96       	adiw	r28, 0x01	; 1
    39b2:	8f 77       	andi	r24, 0x7F	; 127
    39b4:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    39b8:	ea e7       	ldi	r30, 0x7A	; 122
    39ba:	f2 e0       	ldi	r31, 0x02	; 2
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <log+0x50>
    39be:	0e 94 83 19 	call	0x3306	; 0x3306 <__addsf3>
    39c2:	e7 ea       	ldi	r30, 0xA7	; 167
    39c4:	f2 e0       	ldi	r31, 0x02	; 2
    39c6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__fp_powser>
    39ca:	8b 01       	movw	r16, r22
    39cc:	be 01       	movw	r22, r28
    39ce:	ec 01       	movw	r28, r24
    39d0:	fb 2e       	mov	r15, r27
    39d2:	6f 57       	subi	r22, 0x7F	; 127
    39d4:	71 09       	sbc	r23, r1
    39d6:	75 95       	asr	r23
    39d8:	77 1f       	adc	r23, r23
    39da:	88 0b       	sbc	r24, r24
    39dc:	99 0b       	sbc	r25, r25
    39de:	0e 94 9e 1a 	call	0x353c	; 0x353c <__floatsisf>
    39e2:	28 e1       	ldi	r18, 0x18	; 24
    39e4:	32 e7       	ldi	r19, 0x72	; 114
    39e6:	41 e3       	ldi	r20, 0x31	; 49
    39e8:	5f e3       	ldi	r21, 0x3F	; 63
    39ea:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__mulsf3x>
    39ee:	af 2d       	mov	r26, r15
    39f0:	98 01       	movw	r18, r16
    39f2:	ae 01       	movw	r20, r28
    39f4:	ff 90       	pop	r15
    39f6:	0f 91       	pop	r16
    39f8:	1f 91       	pop	r17
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	0e 94 9a 19 	call	0x3334	; 0x3334 <__addsf3x>
    3a02:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__fp_round>

00003a06 <modf>:
    3a06:	fa 01       	movw	r30, r20
    3a08:	dc 01       	movw	r26, r24
    3a0a:	aa 0f       	add	r26, r26
    3a0c:	bb 1f       	adc	r27, r27
    3a0e:	9b 01       	movw	r18, r22
    3a10:	ac 01       	movw	r20, r24
    3a12:	bf 57       	subi	r27, 0x7F	; 127
    3a14:	28 f4       	brcc	.+10     	; 0x3a20 <modf+0x1a>
    3a16:	22 27       	eor	r18, r18
    3a18:	33 27       	eor	r19, r19
    3a1a:	44 27       	eor	r20, r20
    3a1c:	50 78       	andi	r21, 0x80	; 128
    3a1e:	20 c0       	rjmp	.+64     	; 0x3a60 <modf+0x5a>
    3a20:	b7 51       	subi	r27, 0x17	; 23
    3a22:	90 f4       	brcc	.+36     	; 0x3a48 <modf+0x42>
    3a24:	ab 2f       	mov	r26, r27
    3a26:	00 24       	eor	r0, r0
    3a28:	46 95       	lsr	r20
    3a2a:	37 95       	ror	r19
    3a2c:	27 95       	ror	r18
    3a2e:	01 1c       	adc	r0, r1
    3a30:	a3 95       	inc	r26
    3a32:	d2 f3       	brmi	.-12     	; 0x3a28 <modf+0x22>
    3a34:	00 20       	and	r0, r0
    3a36:	71 f0       	breq	.+28     	; 0x3a54 <modf+0x4e>
    3a38:	22 0f       	add	r18, r18
    3a3a:	33 1f       	adc	r19, r19
    3a3c:	44 1f       	adc	r20, r20
    3a3e:	b3 95       	inc	r27
    3a40:	da f3       	brmi	.-10     	; 0x3a38 <modf+0x32>
    3a42:	0e d0       	rcall	.+28     	; 0x3a60 <modf+0x5a>
    3a44:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__subsf3>
    3a48:	61 30       	cpi	r22, 0x01	; 1
    3a4a:	71 05       	cpc	r23, r1
    3a4c:	a0 e8       	ldi	r26, 0x80	; 128
    3a4e:	8a 07       	cpc	r24, r26
    3a50:	b9 46       	sbci	r27, 0x69	; 105
    3a52:	30 f4       	brcc	.+12     	; 0x3a60 <modf+0x5a>
    3a54:	9b 01       	movw	r18, r22
    3a56:	ac 01       	movw	r20, r24
    3a58:	66 27       	eor	r22, r22
    3a5a:	77 27       	eor	r23, r23
    3a5c:	88 27       	eor	r24, r24
    3a5e:	90 78       	andi	r25, 0x80	; 128
    3a60:	30 96       	adiw	r30, 0x00	; 0
    3a62:	21 f0       	breq	.+8      	; 0x3a6c <modf+0x66>
    3a64:	20 83       	st	Z, r18
    3a66:	31 83       	std	Z+1, r19	; 0x01
    3a68:	42 83       	std	Z+2, r20	; 0x02
    3a6a:	53 83       	std	Z+3, r21	; 0x03
    3a6c:	08 95       	ret

00003a6e <__fp_mpack>:
    3a6e:	9f 3f       	cpi	r25, 0xFF	; 255
    3a70:	31 f0       	breq	.+12     	; 0x3a7e <__fp_mpack_finite+0xc>

00003a72 <__fp_mpack_finite>:
    3a72:	91 50       	subi	r25, 0x01	; 1
    3a74:	20 f4       	brcc	.+8      	; 0x3a7e <__fp_mpack_finite+0xc>
    3a76:	87 95       	ror	r24
    3a78:	77 95       	ror	r23
    3a7a:	67 95       	ror	r22
    3a7c:	b7 95       	ror	r27
    3a7e:	88 0f       	add	r24, r24
    3a80:	91 1d       	adc	r25, r1
    3a82:	96 95       	lsr	r25
    3a84:	87 95       	ror	r24
    3a86:	97 f9       	bld	r25, 7
    3a88:	08 95       	ret

00003a8a <vfprintf>:
    3a8a:	a0 e1       	ldi	r26, 0x10	; 16
    3a8c:	b0 e0       	ldi	r27, 0x00	; 0
    3a8e:	eb e4       	ldi	r30, 0x4B	; 75
    3a90:	fd e1       	ldi	r31, 0x1D	; 29
    3a92:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__>
    3a96:	7c 01       	movw	r14, r24
    3a98:	1b 01       	movw	r2, r22
    3a9a:	6a 01       	movw	r12, r20
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	17 82       	std	Z+7, r1	; 0x07
    3aa0:	16 82       	std	Z+6, r1	; 0x06
    3aa2:	83 81       	ldd	r24, Z+3	; 0x03
    3aa4:	81 ff       	sbrs	r24, 1
    3aa6:	44 c3       	rjmp	.+1672   	; 0x4130 <vfprintf+0x6a6>
    3aa8:	9e 01       	movw	r18, r28
    3aaa:	2f 5f       	subi	r18, 0xFF	; 255
    3aac:	3f 4f       	sbci	r19, 0xFF	; 255
    3aae:	39 01       	movw	r6, r18
    3ab0:	f7 01       	movw	r30, r14
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	f1 01       	movw	r30, r2
    3ab6:	93 fd       	sbrc	r25, 3
    3ab8:	85 91       	lpm	r24, Z+
    3aba:	93 ff       	sbrs	r25, 3
    3abc:	81 91       	ld	r24, Z+
    3abe:	1f 01       	movw	r2, r30
    3ac0:	88 23       	and	r24, r24
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <vfprintf+0x3c>
    3ac4:	31 c3       	rjmp	.+1634   	; 0x4128 <vfprintf+0x69e>
    3ac6:	85 32       	cpi	r24, 0x25	; 37
    3ac8:	39 f4       	brne	.+14     	; 0x3ad8 <vfprintf+0x4e>
    3aca:	93 fd       	sbrc	r25, 3
    3acc:	85 91       	lpm	r24, Z+
    3ace:	93 ff       	sbrs	r25, 3
    3ad0:	81 91       	ld	r24, Z+
    3ad2:	1f 01       	movw	r2, r30
    3ad4:	85 32       	cpi	r24, 0x25	; 37
    3ad6:	39 f4       	brne	.+14     	; 0x3ae6 <vfprintf+0x5c>
    3ad8:	b7 01       	movw	r22, r14
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3ae0:	56 01       	movw	r10, r12
    3ae2:	65 01       	movw	r12, r10
    3ae4:	e5 cf       	rjmp	.-54     	; 0x3ab0 <vfprintf+0x26>
    3ae6:	10 e0       	ldi	r17, 0x00	; 0
    3ae8:	51 2c       	mov	r5, r1
    3aea:	91 2c       	mov	r9, r1
    3aec:	ff e1       	ldi	r31, 0x1F	; 31
    3aee:	f9 15       	cp	r31, r9
    3af0:	d8 f0       	brcs	.+54     	; 0x3b28 <vfprintf+0x9e>
    3af2:	8b 32       	cpi	r24, 0x2B	; 43
    3af4:	79 f0       	breq	.+30     	; 0x3b14 <vfprintf+0x8a>
    3af6:	38 f4       	brcc	.+14     	; 0x3b06 <vfprintf+0x7c>
    3af8:	80 32       	cpi	r24, 0x20	; 32
    3afa:	79 f0       	breq	.+30     	; 0x3b1a <vfprintf+0x90>
    3afc:	83 32       	cpi	r24, 0x23	; 35
    3afe:	a1 f4       	brne	.+40     	; 0x3b28 <vfprintf+0x9e>
    3b00:	f9 2d       	mov	r31, r9
    3b02:	f0 61       	ori	r31, 0x10	; 16
    3b04:	2e c0       	rjmp	.+92     	; 0x3b62 <vfprintf+0xd8>
    3b06:	8d 32       	cpi	r24, 0x2D	; 45
    3b08:	61 f0       	breq	.+24     	; 0x3b22 <vfprintf+0x98>
    3b0a:	80 33       	cpi	r24, 0x30	; 48
    3b0c:	69 f4       	brne	.+26     	; 0x3b28 <vfprintf+0x9e>
    3b0e:	29 2d       	mov	r18, r9
    3b10:	21 60       	ori	r18, 0x01	; 1
    3b12:	2d c0       	rjmp	.+90     	; 0x3b6e <vfprintf+0xe4>
    3b14:	39 2d       	mov	r19, r9
    3b16:	32 60       	ori	r19, 0x02	; 2
    3b18:	93 2e       	mov	r9, r19
    3b1a:	89 2d       	mov	r24, r9
    3b1c:	84 60       	ori	r24, 0x04	; 4
    3b1e:	98 2e       	mov	r9, r24
    3b20:	2a c0       	rjmp	.+84     	; 0x3b76 <vfprintf+0xec>
    3b22:	e9 2d       	mov	r30, r9
    3b24:	e8 60       	ori	r30, 0x08	; 8
    3b26:	15 c0       	rjmp	.+42     	; 0x3b52 <vfprintf+0xc8>
    3b28:	97 fc       	sbrc	r9, 7
    3b2a:	2d c0       	rjmp	.+90     	; 0x3b86 <vfprintf+0xfc>
    3b2c:	20 ed       	ldi	r18, 0xD0	; 208
    3b2e:	28 0f       	add	r18, r24
    3b30:	2a 30       	cpi	r18, 0x0A	; 10
    3b32:	88 f4       	brcc	.+34     	; 0x3b56 <vfprintf+0xcc>
    3b34:	96 fe       	sbrs	r9, 6
    3b36:	06 c0       	rjmp	.+12     	; 0x3b44 <vfprintf+0xba>
    3b38:	3a e0       	ldi	r19, 0x0A	; 10
    3b3a:	13 9f       	mul	r17, r19
    3b3c:	20 0d       	add	r18, r0
    3b3e:	11 24       	eor	r1, r1
    3b40:	12 2f       	mov	r17, r18
    3b42:	19 c0       	rjmp	.+50     	; 0x3b76 <vfprintf+0xec>
    3b44:	8a e0       	ldi	r24, 0x0A	; 10
    3b46:	58 9e       	mul	r5, r24
    3b48:	20 0d       	add	r18, r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	52 2e       	mov	r5, r18
    3b4e:	e9 2d       	mov	r30, r9
    3b50:	e0 62       	ori	r30, 0x20	; 32
    3b52:	9e 2e       	mov	r9, r30
    3b54:	10 c0       	rjmp	.+32     	; 0x3b76 <vfprintf+0xec>
    3b56:	8e 32       	cpi	r24, 0x2E	; 46
    3b58:	31 f4       	brne	.+12     	; 0x3b66 <vfprintf+0xdc>
    3b5a:	96 fc       	sbrc	r9, 6
    3b5c:	e5 c2       	rjmp	.+1482   	; 0x4128 <vfprintf+0x69e>
    3b5e:	f9 2d       	mov	r31, r9
    3b60:	f0 64       	ori	r31, 0x40	; 64
    3b62:	9f 2e       	mov	r9, r31
    3b64:	08 c0       	rjmp	.+16     	; 0x3b76 <vfprintf+0xec>
    3b66:	8c 36       	cpi	r24, 0x6C	; 108
    3b68:	21 f4       	brne	.+8      	; 0x3b72 <vfprintf+0xe8>
    3b6a:	29 2d       	mov	r18, r9
    3b6c:	20 68       	ori	r18, 0x80	; 128
    3b6e:	92 2e       	mov	r9, r18
    3b70:	02 c0       	rjmp	.+4      	; 0x3b76 <vfprintf+0xec>
    3b72:	88 36       	cpi	r24, 0x68	; 104
    3b74:	41 f4       	brne	.+16     	; 0x3b86 <vfprintf+0xfc>
    3b76:	f1 01       	movw	r30, r2
    3b78:	93 fd       	sbrc	r25, 3
    3b7a:	85 91       	lpm	r24, Z+
    3b7c:	93 ff       	sbrs	r25, 3
    3b7e:	81 91       	ld	r24, Z+
    3b80:	1f 01       	movw	r2, r30
    3b82:	81 11       	cpse	r24, r1
    3b84:	b3 cf       	rjmp	.-154    	; 0x3aec <vfprintf+0x62>
    3b86:	9b eb       	ldi	r25, 0xBB	; 187
    3b88:	98 0f       	add	r25, r24
    3b8a:	93 30       	cpi	r25, 0x03	; 3
    3b8c:	20 f4       	brcc	.+8      	; 0x3b96 <vfprintf+0x10c>
    3b8e:	99 2d       	mov	r25, r9
    3b90:	90 61       	ori	r25, 0x10	; 16
    3b92:	80 5e       	subi	r24, 0xE0	; 224
    3b94:	07 c0       	rjmp	.+14     	; 0x3ba4 <vfprintf+0x11a>
    3b96:	9b e9       	ldi	r25, 0x9B	; 155
    3b98:	98 0f       	add	r25, r24
    3b9a:	93 30       	cpi	r25, 0x03	; 3
    3b9c:	08 f0       	brcs	.+2      	; 0x3ba0 <vfprintf+0x116>
    3b9e:	66 c1       	rjmp	.+716    	; 0x3e6c <vfprintf+0x3e2>
    3ba0:	99 2d       	mov	r25, r9
    3ba2:	9f 7e       	andi	r25, 0xEF	; 239
    3ba4:	96 ff       	sbrs	r25, 6
    3ba6:	16 e0       	ldi	r17, 0x06	; 6
    3ba8:	9f 73       	andi	r25, 0x3F	; 63
    3baa:	99 2e       	mov	r9, r25
    3bac:	85 36       	cpi	r24, 0x65	; 101
    3bae:	19 f4       	brne	.+6      	; 0x3bb6 <vfprintf+0x12c>
    3bb0:	90 64       	ori	r25, 0x40	; 64
    3bb2:	99 2e       	mov	r9, r25
    3bb4:	08 c0       	rjmp	.+16     	; 0x3bc6 <vfprintf+0x13c>
    3bb6:	86 36       	cpi	r24, 0x66	; 102
    3bb8:	21 f4       	brne	.+8      	; 0x3bc2 <vfprintf+0x138>
    3bba:	39 2f       	mov	r19, r25
    3bbc:	30 68       	ori	r19, 0x80	; 128
    3bbe:	93 2e       	mov	r9, r19
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <vfprintf+0x13c>
    3bc2:	11 11       	cpse	r17, r1
    3bc4:	11 50       	subi	r17, 0x01	; 1
    3bc6:	97 fe       	sbrs	r9, 7
    3bc8:	07 c0       	rjmp	.+14     	; 0x3bd8 <vfprintf+0x14e>
    3bca:	1c 33       	cpi	r17, 0x3C	; 60
    3bcc:	50 f4       	brcc	.+20     	; 0x3be2 <vfprintf+0x158>
    3bce:	44 24       	eor	r4, r4
    3bd0:	43 94       	inc	r4
    3bd2:	41 0e       	add	r4, r17
    3bd4:	27 e0       	ldi	r18, 0x07	; 7
    3bd6:	0b c0       	rjmp	.+22     	; 0x3bee <vfprintf+0x164>
    3bd8:	18 30       	cpi	r17, 0x08	; 8
    3bda:	38 f0       	brcs	.+14     	; 0x3bea <vfprintf+0x160>
    3bdc:	27 e0       	ldi	r18, 0x07	; 7
    3bde:	17 e0       	ldi	r17, 0x07	; 7
    3be0:	05 c0       	rjmp	.+10     	; 0x3bec <vfprintf+0x162>
    3be2:	27 e0       	ldi	r18, 0x07	; 7
    3be4:	9c e3       	ldi	r25, 0x3C	; 60
    3be6:	49 2e       	mov	r4, r25
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <vfprintf+0x164>
    3bea:	21 2f       	mov	r18, r17
    3bec:	41 2c       	mov	r4, r1
    3bee:	56 01       	movw	r10, r12
    3bf0:	84 e0       	ldi	r24, 0x04	; 4
    3bf2:	a8 0e       	add	r10, r24
    3bf4:	b1 1c       	adc	r11, r1
    3bf6:	f6 01       	movw	r30, r12
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	04 2d       	mov	r16, r4
    3c02:	a3 01       	movw	r20, r6
    3c04:	0e 94 36 21 	call	0x426c	; 0x426c <__ftoa_engine>
    3c08:	6c 01       	movw	r12, r24
    3c0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c0c:	fc 87       	std	Y+12, r31	; 0x0c
    3c0e:	f0 ff       	sbrs	r31, 0
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <vfprintf+0x18c>
    3c12:	f3 ff       	sbrs	r31, 3
    3c14:	06 c0       	rjmp	.+12     	; 0x3c22 <vfprintf+0x198>
    3c16:	91 fc       	sbrc	r9, 1
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <vfprintf+0x19c>
    3c1a:	92 fe       	sbrs	r9, 2
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <vfprintf+0x1a0>
    3c1e:	00 e2       	ldi	r16, 0x20	; 32
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <vfprintf+0x1a2>
    3c22:	0d e2       	ldi	r16, 0x2D	; 45
    3c24:	03 c0       	rjmp	.+6      	; 0x3c2c <vfprintf+0x1a2>
    3c26:	0b e2       	ldi	r16, 0x2B	; 43
    3c28:	01 c0       	rjmp	.+2      	; 0x3c2c <vfprintf+0x1a2>
    3c2a:	00 e0       	ldi	r16, 0x00	; 0
    3c2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c2e:	8c 70       	andi	r24, 0x0C	; 12
    3c30:	19 f0       	breq	.+6      	; 0x3c38 <vfprintf+0x1ae>
    3c32:	01 11       	cpse	r16, r1
    3c34:	5a c2       	rjmp	.+1204   	; 0x40ea <vfprintf+0x660>
    3c36:	9b c2       	rjmp	.+1334   	; 0x416e <vfprintf+0x6e4>
    3c38:	97 fe       	sbrs	r9, 7
    3c3a:	10 c0       	rjmp	.+32     	; 0x3c5c <vfprintf+0x1d2>
    3c3c:	4c 0c       	add	r4, r12
    3c3e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c40:	f4 ff       	sbrs	r31, 4
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <vfprintf+0x1c2>
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	81 33       	cpi	r24, 0x31	; 49
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <vfprintf+0x1c2>
    3c4a:	4a 94       	dec	r4
    3c4c:	14 14       	cp	r1, r4
    3c4e:	74 f5       	brge	.+92     	; 0x3cac <vfprintf+0x222>
    3c50:	28 e0       	ldi	r18, 0x08	; 8
    3c52:	24 15       	cp	r18, r4
    3c54:	78 f5       	brcc	.+94     	; 0x3cb4 <vfprintf+0x22a>
    3c56:	88 e0       	ldi	r24, 0x08	; 8
    3c58:	48 2e       	mov	r4, r24
    3c5a:	2c c0       	rjmp	.+88     	; 0x3cb4 <vfprintf+0x22a>
    3c5c:	96 fc       	sbrc	r9, 6
    3c5e:	2a c0       	rjmp	.+84     	; 0x3cb4 <vfprintf+0x22a>
    3c60:	81 2f       	mov	r24, r17
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	8c 15       	cp	r24, r12
    3c66:	9d 05       	cpc	r25, r13
    3c68:	9c f0       	brlt	.+38     	; 0x3c90 <vfprintf+0x206>
    3c6a:	3c ef       	ldi	r19, 0xFC	; 252
    3c6c:	c3 16       	cp	r12, r19
    3c6e:	3f ef       	ldi	r19, 0xFF	; 255
    3c70:	d3 06       	cpc	r13, r19
    3c72:	74 f0       	brlt	.+28     	; 0x3c90 <vfprintf+0x206>
    3c74:	89 2d       	mov	r24, r9
    3c76:	80 68       	ori	r24, 0x80	; 128
    3c78:	98 2e       	mov	r9, r24
    3c7a:	0a c0       	rjmp	.+20     	; 0x3c90 <vfprintf+0x206>
    3c7c:	e2 e0       	ldi	r30, 0x02	; 2
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	ec 0f       	add	r30, r28
    3c82:	fd 1f       	adc	r31, r29
    3c84:	e1 0f       	add	r30, r17
    3c86:	f1 1d       	adc	r31, r1
    3c88:	80 81       	ld	r24, Z
    3c8a:	80 33       	cpi	r24, 0x30	; 48
    3c8c:	19 f4       	brne	.+6      	; 0x3c94 <vfprintf+0x20a>
    3c8e:	11 50       	subi	r17, 0x01	; 1
    3c90:	11 11       	cpse	r17, r1
    3c92:	f4 cf       	rjmp	.-24     	; 0x3c7c <vfprintf+0x1f2>
    3c94:	97 fe       	sbrs	r9, 7
    3c96:	0e c0       	rjmp	.+28     	; 0x3cb4 <vfprintf+0x22a>
    3c98:	44 24       	eor	r4, r4
    3c9a:	43 94       	inc	r4
    3c9c:	41 0e       	add	r4, r17
    3c9e:	81 2f       	mov	r24, r17
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	c8 16       	cp	r12, r24
    3ca4:	d9 06       	cpc	r13, r25
    3ca6:	2c f4       	brge	.+10     	; 0x3cb2 <vfprintf+0x228>
    3ca8:	1c 19       	sub	r17, r12
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <vfprintf+0x22a>
    3cac:	44 24       	eor	r4, r4
    3cae:	43 94       	inc	r4
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <vfprintf+0x22a>
    3cb2:	10 e0       	ldi	r17, 0x00	; 0
    3cb4:	97 fe       	sbrs	r9, 7
    3cb6:	06 c0       	rjmp	.+12     	; 0x3cc4 <vfprintf+0x23a>
    3cb8:	1c 14       	cp	r1, r12
    3cba:	1d 04       	cpc	r1, r13
    3cbc:	34 f4       	brge	.+12     	; 0x3cca <vfprintf+0x240>
    3cbe:	c6 01       	movw	r24, r12
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	05 c0       	rjmp	.+10     	; 0x3cce <vfprintf+0x244>
    3cc4:	85 e0       	ldi	r24, 0x05	; 5
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	02 c0       	rjmp	.+4      	; 0x3cce <vfprintf+0x244>
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	01 11       	cpse	r16, r1
    3cd0:	01 96       	adiw	r24, 0x01	; 1
    3cd2:	11 23       	and	r17, r17
    3cd4:	31 f0       	breq	.+12     	; 0x3ce2 <vfprintf+0x258>
    3cd6:	21 2f       	mov	r18, r17
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	2f 5f       	subi	r18, 0xFF	; 255
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	82 0f       	add	r24, r18
    3ce0:	93 1f       	adc	r25, r19
    3ce2:	25 2d       	mov	r18, r5
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	82 17       	cp	r24, r18
    3ce8:	93 07       	cpc	r25, r19
    3cea:	14 f4       	brge	.+4      	; 0x3cf0 <vfprintf+0x266>
    3cec:	58 1a       	sub	r5, r24
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <vfprintf+0x268>
    3cf0:	51 2c       	mov	r5, r1
    3cf2:	89 2d       	mov	r24, r9
    3cf4:	89 70       	andi	r24, 0x09	; 9
    3cf6:	49 f4       	brne	.+18     	; 0x3d0a <vfprintf+0x280>
    3cf8:	55 20       	and	r5, r5
    3cfa:	39 f0       	breq	.+14     	; 0x3d0a <vfprintf+0x280>
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	80 e2       	ldi	r24, 0x20	; 32
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3d06:	5a 94       	dec	r5
    3d08:	f7 cf       	rjmp	.-18     	; 0x3cf8 <vfprintf+0x26e>
    3d0a:	00 23       	and	r16, r16
    3d0c:	29 f0       	breq	.+10     	; 0x3d18 <vfprintf+0x28e>
    3d0e:	b7 01       	movw	r22, r14
    3d10:	80 2f       	mov	r24, r16
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3d18:	93 fc       	sbrc	r9, 3
    3d1a:	09 c0       	rjmp	.+18     	; 0x3d2e <vfprintf+0x2a4>
    3d1c:	55 20       	and	r5, r5
    3d1e:	39 f0       	breq	.+14     	; 0x3d2e <vfprintf+0x2a4>
    3d20:	b7 01       	movw	r22, r14
    3d22:	80 e3       	ldi	r24, 0x30	; 48
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3d2a:	5a 94       	dec	r5
    3d2c:	f7 cf       	rjmp	.-18     	; 0x3d1c <vfprintf+0x292>
    3d2e:	97 fe       	sbrs	r9, 7
    3d30:	4c c0       	rjmp	.+152    	; 0x3dca <vfprintf+0x340>
    3d32:	46 01       	movw	r8, r12
    3d34:	d7 fe       	sbrs	r13, 7
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <vfprintf+0x2b2>
    3d38:	81 2c       	mov	r8, r1
    3d3a:	91 2c       	mov	r9, r1
    3d3c:	c6 01       	movw	r24, r12
    3d3e:	88 19       	sub	r24, r8
    3d40:	99 09       	sbc	r25, r9
    3d42:	f3 01       	movw	r30, r6
    3d44:	e8 0f       	add	r30, r24
    3d46:	f9 1f       	adc	r31, r25
    3d48:	fe 87       	std	Y+14, r31	; 0x0e
    3d4a:	ed 87       	std	Y+13, r30	; 0x0d
    3d4c:	96 01       	movw	r18, r12
    3d4e:	24 19       	sub	r18, r4
    3d50:	31 09       	sbc	r19, r1
    3d52:	38 8b       	std	Y+16, r19	; 0x10
    3d54:	2f 87       	std	Y+15, r18	; 0x0f
    3d56:	01 2f       	mov	r16, r17
    3d58:	10 e0       	ldi	r17, 0x00	; 0
    3d5a:	11 95       	neg	r17
    3d5c:	01 95       	neg	r16
    3d5e:	11 09       	sbc	r17, r1
    3d60:	3f ef       	ldi	r19, 0xFF	; 255
    3d62:	83 16       	cp	r8, r19
    3d64:	93 06       	cpc	r9, r19
    3d66:	29 f4       	brne	.+10     	; 0x3d72 <vfprintf+0x2e8>
    3d68:	b7 01       	movw	r22, r14
    3d6a:	8e e2       	ldi	r24, 0x2E	; 46
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3d72:	c8 14       	cp	r12, r8
    3d74:	d9 04       	cpc	r13, r9
    3d76:	4c f0       	brlt	.+18     	; 0x3d8a <vfprintf+0x300>
    3d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d7a:	98 89       	ldd	r25, Y+16	; 0x10
    3d7c:	88 15       	cp	r24, r8
    3d7e:	99 05       	cpc	r25, r9
    3d80:	24 f4       	brge	.+8      	; 0x3d8a <vfprintf+0x300>
    3d82:	ed 85       	ldd	r30, Y+13	; 0x0d
    3d84:	fe 85       	ldd	r31, Y+14	; 0x0e
    3d86:	81 81       	ldd	r24, Z+1	; 0x01
    3d88:	01 c0       	rjmp	.+2      	; 0x3d8c <vfprintf+0x302>
    3d8a:	80 e3       	ldi	r24, 0x30	; 48
    3d8c:	f1 e0       	ldi	r31, 0x01	; 1
    3d8e:	8f 1a       	sub	r8, r31
    3d90:	91 08       	sbc	r9, r1
    3d92:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d94:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d96:	2f 5f       	subi	r18, 0xFF	; 255
    3d98:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9a:	3e 87       	std	Y+14, r19	; 0x0e
    3d9c:	2d 87       	std	Y+13, r18	; 0x0d
    3d9e:	80 16       	cp	r8, r16
    3da0:	91 06       	cpc	r9, r17
    3da2:	2c f0       	brlt	.+10     	; 0x3dae <vfprintf+0x324>
    3da4:	b7 01       	movw	r22, r14
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3dac:	d9 cf       	rjmp	.-78     	; 0x3d60 <vfprintf+0x2d6>
    3dae:	c8 14       	cp	r12, r8
    3db0:	d9 04       	cpc	r13, r9
    3db2:	41 f4       	brne	.+16     	; 0x3dc4 <vfprintf+0x33a>
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	96 33       	cpi	r25, 0x36	; 54
    3db8:	20 f4       	brcc	.+8      	; 0x3dc2 <vfprintf+0x338>
    3dba:	95 33       	cpi	r25, 0x35	; 53
    3dbc:	19 f4       	brne	.+6      	; 0x3dc4 <vfprintf+0x33a>
    3dbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3dc0:	34 ff       	sbrs	r19, 4
    3dc2:	81 e3       	ldi	r24, 0x31	; 49
    3dc4:	b7 01       	movw	r22, r14
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	4e c0       	rjmp	.+156    	; 0x3e66 <vfprintf+0x3dc>
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	81 33       	cpi	r24, 0x31	; 49
    3dce:	19 f0       	breq	.+6      	; 0x3dd6 <vfprintf+0x34c>
    3dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3dd2:	9f 7e       	andi	r25, 0xEF	; 239
    3dd4:	9c 87       	std	Y+12, r25	; 0x0c
    3dd6:	b7 01       	movw	r22, r14
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3dde:	11 11       	cpse	r17, r1
    3de0:	05 c0       	rjmp	.+10     	; 0x3dec <vfprintf+0x362>
    3de2:	94 fc       	sbrc	r9, 4
    3de4:	18 c0       	rjmp	.+48     	; 0x3e16 <vfprintf+0x38c>
    3de6:	85 e6       	ldi	r24, 0x65	; 101
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	17 c0       	rjmp	.+46     	; 0x3e1a <vfprintf+0x390>
    3dec:	b7 01       	movw	r22, r14
    3dee:	8e e2       	ldi	r24, 0x2E	; 46
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3df6:	1e 5f       	subi	r17, 0xFE	; 254
    3df8:	82 e0       	ldi	r24, 0x02	; 2
    3dfa:	01 e0       	ldi	r16, 0x01	; 1
    3dfc:	08 0f       	add	r16, r24
    3dfe:	f3 01       	movw	r30, r6
    3e00:	e8 0f       	add	r30, r24
    3e02:	f1 1d       	adc	r31, r1
    3e04:	80 81       	ld	r24, Z
    3e06:	b7 01       	movw	r22, r14
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3e0e:	80 2f       	mov	r24, r16
    3e10:	01 13       	cpse	r16, r17
    3e12:	f3 cf       	rjmp	.-26     	; 0x3dfa <vfprintf+0x370>
    3e14:	e6 cf       	rjmp	.-52     	; 0x3de2 <vfprintf+0x358>
    3e16:	85 e4       	ldi	r24, 0x45	; 69
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	b7 01       	movw	r22, r14
    3e1c:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3e20:	d7 fc       	sbrc	r13, 7
    3e22:	06 c0       	rjmp	.+12     	; 0x3e30 <vfprintf+0x3a6>
    3e24:	c1 14       	cp	r12, r1
    3e26:	d1 04       	cpc	r13, r1
    3e28:	41 f4       	brne	.+16     	; 0x3e3a <vfprintf+0x3b0>
    3e2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e2c:	e4 ff       	sbrs	r30, 4
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <vfprintf+0x3b0>
    3e30:	d1 94       	neg	r13
    3e32:	c1 94       	neg	r12
    3e34:	d1 08       	sbc	r13, r1
    3e36:	8d e2       	ldi	r24, 0x2D	; 45
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <vfprintf+0x3b2>
    3e3a:	8b e2       	ldi	r24, 0x2B	; 43
    3e3c:	b7 01       	movw	r22, r14
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3e44:	80 e3       	ldi	r24, 0x30	; 48
    3e46:	2a e0       	ldi	r18, 0x0A	; 10
    3e48:	c2 16       	cp	r12, r18
    3e4a:	d1 04       	cpc	r13, r1
    3e4c:	2c f0       	brlt	.+10     	; 0x3e58 <vfprintf+0x3ce>
    3e4e:	8f 5f       	subi	r24, 0xFF	; 255
    3e50:	fa e0       	ldi	r31, 0x0A	; 10
    3e52:	cf 1a       	sub	r12, r31
    3e54:	d1 08       	sbc	r13, r1
    3e56:	f7 cf       	rjmp	.-18     	; 0x3e46 <vfprintf+0x3bc>
    3e58:	b7 01       	movw	r22, r14
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3e60:	b7 01       	movw	r22, r14
    3e62:	c6 01       	movw	r24, r12
    3e64:	c0 96       	adiw	r24, 0x30	; 48
    3e66:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3e6a:	54 c1       	rjmp	.+680    	; 0x4114 <vfprintf+0x68a>
    3e6c:	83 36       	cpi	r24, 0x63	; 99
    3e6e:	31 f0       	breq	.+12     	; 0x3e7c <vfprintf+0x3f2>
    3e70:	83 37       	cpi	r24, 0x73	; 115
    3e72:	79 f0       	breq	.+30     	; 0x3e92 <vfprintf+0x408>
    3e74:	83 35       	cpi	r24, 0x53	; 83
    3e76:	09 f0       	breq	.+2      	; 0x3e7a <vfprintf+0x3f0>
    3e78:	56 c0       	rjmp	.+172    	; 0x3f26 <vfprintf+0x49c>
    3e7a:	20 c0       	rjmp	.+64     	; 0x3ebc <vfprintf+0x432>
    3e7c:	56 01       	movw	r10, r12
    3e7e:	32 e0       	ldi	r19, 0x02	; 2
    3e80:	a3 0e       	add	r10, r19
    3e82:	b1 1c       	adc	r11, r1
    3e84:	f6 01       	movw	r30, r12
    3e86:	80 81       	ld	r24, Z
    3e88:	89 83       	std	Y+1, r24	; 0x01
    3e8a:	01 e0       	ldi	r16, 0x01	; 1
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    3e8e:	63 01       	movw	r12, r6
    3e90:	12 c0       	rjmp	.+36     	; 0x3eb6 <vfprintf+0x42c>
    3e92:	56 01       	movw	r10, r12
    3e94:	f2 e0       	ldi	r31, 0x02	; 2
    3e96:	af 0e       	add	r10, r31
    3e98:	b1 1c       	adc	r11, r1
    3e9a:	f6 01       	movw	r30, r12
    3e9c:	c0 80       	ld	r12, Z
    3e9e:	d1 80       	ldd	r13, Z+1	; 0x01
    3ea0:	96 fe       	sbrs	r9, 6
    3ea2:	03 c0       	rjmp	.+6      	; 0x3eaa <vfprintf+0x420>
    3ea4:	61 2f       	mov	r22, r17
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <vfprintf+0x424>
    3eaa:	6f ef       	ldi	r22, 0xFF	; 255
    3eac:	7f ef       	ldi	r23, 0xFF	; 255
    3eae:	c6 01       	movw	r24, r12
    3eb0:	0e 94 26 22 	call	0x444c	; 0x444c <strnlen>
    3eb4:	8c 01       	movw	r16, r24
    3eb6:	f9 2d       	mov	r31, r9
    3eb8:	ff 77       	andi	r31, 0x7F	; 127
    3eba:	14 c0       	rjmp	.+40     	; 0x3ee4 <vfprintf+0x45a>
    3ebc:	56 01       	movw	r10, r12
    3ebe:	22 e0       	ldi	r18, 0x02	; 2
    3ec0:	a2 0e       	add	r10, r18
    3ec2:	b1 1c       	adc	r11, r1
    3ec4:	f6 01       	movw	r30, r12
    3ec6:	c0 80       	ld	r12, Z
    3ec8:	d1 80       	ldd	r13, Z+1	; 0x01
    3eca:	96 fe       	sbrs	r9, 6
    3ecc:	03 c0       	rjmp	.+6      	; 0x3ed4 <vfprintf+0x44a>
    3ece:	61 2f       	mov	r22, r17
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	02 c0       	rjmp	.+4      	; 0x3ed8 <vfprintf+0x44e>
    3ed4:	6f ef       	ldi	r22, 0xFF	; 255
    3ed6:	7f ef       	ldi	r23, 0xFF	; 255
    3ed8:	c6 01       	movw	r24, r12
    3eda:	0e 94 0e 22 	call	0x441c	; 0x441c <strnlen_P>
    3ede:	8c 01       	movw	r16, r24
    3ee0:	f9 2d       	mov	r31, r9
    3ee2:	f0 68       	ori	r31, 0x80	; 128
    3ee4:	9f 2e       	mov	r9, r31
    3ee6:	f3 fd       	sbrc	r31, 3
    3ee8:	1a c0       	rjmp	.+52     	; 0x3f1e <vfprintf+0x494>
    3eea:	85 2d       	mov	r24, r5
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	08 17       	cp	r16, r24
    3ef0:	19 07       	cpc	r17, r25
    3ef2:	a8 f4       	brcc	.+42     	; 0x3f1e <vfprintf+0x494>
    3ef4:	b7 01       	movw	r22, r14
    3ef6:	80 e2       	ldi	r24, 0x20	; 32
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3efe:	5a 94       	dec	r5
    3f00:	f4 cf       	rjmp	.-24     	; 0x3eea <vfprintf+0x460>
    3f02:	f6 01       	movw	r30, r12
    3f04:	97 fc       	sbrc	r9, 7
    3f06:	85 91       	lpm	r24, Z+
    3f08:	97 fe       	sbrs	r9, 7
    3f0a:	81 91       	ld	r24, Z+
    3f0c:	6f 01       	movw	r12, r30
    3f0e:	b7 01       	movw	r22, r14
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    3f16:	51 10       	cpse	r5, r1
    3f18:	5a 94       	dec	r5
    3f1a:	01 50       	subi	r16, 0x01	; 1
    3f1c:	11 09       	sbc	r17, r1
    3f1e:	01 15       	cp	r16, r1
    3f20:	11 05       	cpc	r17, r1
    3f22:	79 f7       	brne	.-34     	; 0x3f02 <vfprintf+0x478>
    3f24:	f7 c0       	rjmp	.+494    	; 0x4114 <vfprintf+0x68a>
    3f26:	84 36       	cpi	r24, 0x64	; 100
    3f28:	11 f0       	breq	.+4      	; 0x3f2e <vfprintf+0x4a4>
    3f2a:	89 36       	cpi	r24, 0x69	; 105
    3f2c:	61 f5       	brne	.+88     	; 0x3f86 <vfprintf+0x4fc>
    3f2e:	56 01       	movw	r10, r12
    3f30:	97 fe       	sbrs	r9, 7
    3f32:	09 c0       	rjmp	.+18     	; 0x3f46 <vfprintf+0x4bc>
    3f34:	24 e0       	ldi	r18, 0x04	; 4
    3f36:	a2 0e       	add	r10, r18
    3f38:	b1 1c       	adc	r11, r1
    3f3a:	f6 01       	movw	r30, r12
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	0a c0       	rjmp	.+20     	; 0x3f5a <vfprintf+0x4d0>
    3f46:	f2 e0       	ldi	r31, 0x02	; 2
    3f48:	af 0e       	add	r10, r31
    3f4a:	b1 1c       	adc	r11, r1
    3f4c:	f6 01       	movw	r30, r12
    3f4e:	60 81       	ld	r22, Z
    3f50:	71 81       	ldd	r23, Z+1	; 0x01
    3f52:	07 2e       	mov	r0, r23
    3f54:	00 0c       	add	r0, r0
    3f56:	88 0b       	sbc	r24, r24
    3f58:	99 0b       	sbc	r25, r25
    3f5a:	f9 2d       	mov	r31, r9
    3f5c:	ff 76       	andi	r31, 0x6F	; 111
    3f5e:	9f 2e       	mov	r9, r31
    3f60:	97 ff       	sbrs	r25, 7
    3f62:	09 c0       	rjmp	.+18     	; 0x3f76 <vfprintf+0x4ec>
    3f64:	90 95       	com	r25
    3f66:	80 95       	com	r24
    3f68:	70 95       	com	r23
    3f6a:	61 95       	neg	r22
    3f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f70:	9f 4f       	sbci	r25, 0xFF	; 255
    3f72:	f0 68       	ori	r31, 0x80	; 128
    3f74:	9f 2e       	mov	r9, r31
    3f76:	2a e0       	ldi	r18, 0x0A	; 10
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	a3 01       	movw	r20, r6
    3f7c:	0e 94 89 22 	call	0x4512	; 0x4512 <__ultoa_invert>
    3f80:	c8 2e       	mov	r12, r24
    3f82:	c6 18       	sub	r12, r6
    3f84:	3f c0       	rjmp	.+126    	; 0x4004 <vfprintf+0x57a>
    3f86:	09 2d       	mov	r16, r9
    3f88:	85 37       	cpi	r24, 0x75	; 117
    3f8a:	21 f4       	brne	.+8      	; 0x3f94 <vfprintf+0x50a>
    3f8c:	0f 7e       	andi	r16, 0xEF	; 239
    3f8e:	2a e0       	ldi	r18, 0x0A	; 10
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	1d c0       	rjmp	.+58     	; 0x3fce <vfprintf+0x544>
    3f94:	09 7f       	andi	r16, 0xF9	; 249
    3f96:	8f 36       	cpi	r24, 0x6F	; 111
    3f98:	91 f0       	breq	.+36     	; 0x3fbe <vfprintf+0x534>
    3f9a:	18 f4       	brcc	.+6      	; 0x3fa2 <vfprintf+0x518>
    3f9c:	88 35       	cpi	r24, 0x58	; 88
    3f9e:	59 f0       	breq	.+22     	; 0x3fb6 <vfprintf+0x52c>
    3fa0:	c3 c0       	rjmp	.+390    	; 0x4128 <vfprintf+0x69e>
    3fa2:	80 37       	cpi	r24, 0x70	; 112
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <vfprintf+0x522>
    3fa6:	88 37       	cpi	r24, 0x78	; 120
    3fa8:	11 f0       	breq	.+4      	; 0x3fae <vfprintf+0x524>
    3faa:	be c0       	rjmp	.+380    	; 0x4128 <vfprintf+0x69e>
    3fac:	00 61       	ori	r16, 0x10	; 16
    3fae:	04 ff       	sbrs	r16, 4
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <vfprintf+0x53a>
    3fb2:	04 60       	ori	r16, 0x04	; 4
    3fb4:	07 c0       	rjmp	.+14     	; 0x3fc4 <vfprintf+0x53a>
    3fb6:	94 fe       	sbrs	r9, 4
    3fb8:	08 c0       	rjmp	.+16     	; 0x3fca <vfprintf+0x540>
    3fba:	06 60       	ori	r16, 0x06	; 6
    3fbc:	06 c0       	rjmp	.+12     	; 0x3fca <vfprintf+0x540>
    3fbe:	28 e0       	ldi	r18, 0x08	; 8
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	05 c0       	rjmp	.+10     	; 0x3fce <vfprintf+0x544>
    3fc4:	20 e1       	ldi	r18, 0x10	; 16
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	02 c0       	rjmp	.+4      	; 0x3fce <vfprintf+0x544>
    3fca:	20 e1       	ldi	r18, 0x10	; 16
    3fcc:	32 e0       	ldi	r19, 0x02	; 2
    3fce:	56 01       	movw	r10, r12
    3fd0:	07 ff       	sbrs	r16, 7
    3fd2:	09 c0       	rjmp	.+18     	; 0x3fe6 <vfprintf+0x55c>
    3fd4:	84 e0       	ldi	r24, 0x04	; 4
    3fd6:	a8 0e       	add	r10, r24
    3fd8:	b1 1c       	adc	r11, r1
    3fda:	f6 01       	movw	r30, r12
    3fdc:	60 81       	ld	r22, Z
    3fde:	71 81       	ldd	r23, Z+1	; 0x01
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	93 81       	ldd	r25, Z+3	; 0x03
    3fe4:	08 c0       	rjmp	.+16     	; 0x3ff6 <vfprintf+0x56c>
    3fe6:	f2 e0       	ldi	r31, 0x02	; 2
    3fe8:	af 0e       	add	r10, r31
    3fea:	b1 1c       	adc	r11, r1
    3fec:	f6 01       	movw	r30, r12
    3fee:	60 81       	ld	r22, Z
    3ff0:	71 81       	ldd	r23, Z+1	; 0x01
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	a3 01       	movw	r20, r6
    3ff8:	0e 94 89 22 	call	0x4512	; 0x4512 <__ultoa_invert>
    3ffc:	c8 2e       	mov	r12, r24
    3ffe:	c6 18       	sub	r12, r6
    4000:	0f 77       	andi	r16, 0x7F	; 127
    4002:	90 2e       	mov	r9, r16
    4004:	96 fe       	sbrs	r9, 6
    4006:	0b c0       	rjmp	.+22     	; 0x401e <vfprintf+0x594>
    4008:	09 2d       	mov	r16, r9
    400a:	0e 7f       	andi	r16, 0xFE	; 254
    400c:	c1 16       	cp	r12, r17
    400e:	50 f4       	brcc	.+20     	; 0x4024 <vfprintf+0x59a>
    4010:	94 fe       	sbrs	r9, 4
    4012:	0a c0       	rjmp	.+20     	; 0x4028 <vfprintf+0x59e>
    4014:	92 fc       	sbrc	r9, 2
    4016:	08 c0       	rjmp	.+16     	; 0x4028 <vfprintf+0x59e>
    4018:	09 2d       	mov	r16, r9
    401a:	0e 7e       	andi	r16, 0xEE	; 238
    401c:	05 c0       	rjmp	.+10     	; 0x4028 <vfprintf+0x59e>
    401e:	dc 2c       	mov	r13, r12
    4020:	09 2d       	mov	r16, r9
    4022:	03 c0       	rjmp	.+6      	; 0x402a <vfprintf+0x5a0>
    4024:	dc 2c       	mov	r13, r12
    4026:	01 c0       	rjmp	.+2      	; 0x402a <vfprintf+0x5a0>
    4028:	d1 2e       	mov	r13, r17
    402a:	04 ff       	sbrs	r16, 4
    402c:	0d c0       	rjmp	.+26     	; 0x4048 <vfprintf+0x5be>
    402e:	fe 01       	movw	r30, r28
    4030:	ec 0d       	add	r30, r12
    4032:	f1 1d       	adc	r31, r1
    4034:	80 81       	ld	r24, Z
    4036:	80 33       	cpi	r24, 0x30	; 48
    4038:	11 f4       	brne	.+4      	; 0x403e <vfprintf+0x5b4>
    403a:	09 7e       	andi	r16, 0xE9	; 233
    403c:	09 c0       	rjmp	.+18     	; 0x4050 <vfprintf+0x5c6>
    403e:	02 ff       	sbrs	r16, 2
    4040:	06 c0       	rjmp	.+12     	; 0x404e <vfprintf+0x5c4>
    4042:	d3 94       	inc	r13
    4044:	d3 94       	inc	r13
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <vfprintf+0x5c6>
    4048:	80 2f       	mov	r24, r16
    404a:	86 78       	andi	r24, 0x86	; 134
    404c:	09 f0       	breq	.+2      	; 0x4050 <vfprintf+0x5c6>
    404e:	d3 94       	inc	r13
    4050:	03 fd       	sbrc	r16, 3
    4052:	11 c0       	rjmp	.+34     	; 0x4076 <vfprintf+0x5ec>
    4054:	00 ff       	sbrs	r16, 0
    4056:	06 c0       	rjmp	.+12     	; 0x4064 <vfprintf+0x5da>
    4058:	1c 2d       	mov	r17, r12
    405a:	d5 14       	cp	r13, r5
    405c:	80 f4       	brcc	.+32     	; 0x407e <vfprintf+0x5f4>
    405e:	15 0d       	add	r17, r5
    4060:	1d 19       	sub	r17, r13
    4062:	0d c0       	rjmp	.+26     	; 0x407e <vfprintf+0x5f4>
    4064:	d5 14       	cp	r13, r5
    4066:	58 f4       	brcc	.+22     	; 0x407e <vfprintf+0x5f4>
    4068:	b7 01       	movw	r22, r14
    406a:	80 e2       	ldi	r24, 0x20	; 32
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    4072:	d3 94       	inc	r13
    4074:	f7 cf       	rjmp	.-18     	; 0x4064 <vfprintf+0x5da>
    4076:	d5 14       	cp	r13, r5
    4078:	10 f4       	brcc	.+4      	; 0x407e <vfprintf+0x5f4>
    407a:	5d 18       	sub	r5, r13
    407c:	01 c0       	rjmp	.+2      	; 0x4080 <vfprintf+0x5f6>
    407e:	51 2c       	mov	r5, r1
    4080:	04 ff       	sbrs	r16, 4
    4082:	10 c0       	rjmp	.+32     	; 0x40a4 <vfprintf+0x61a>
    4084:	b7 01       	movw	r22, r14
    4086:	80 e3       	ldi	r24, 0x30	; 48
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    408e:	02 ff       	sbrs	r16, 2
    4090:	17 c0       	rjmp	.+46     	; 0x40c0 <vfprintf+0x636>
    4092:	01 fd       	sbrc	r16, 1
    4094:	03 c0       	rjmp	.+6      	; 0x409c <vfprintf+0x612>
    4096:	88 e7       	ldi	r24, 0x78	; 120
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <vfprintf+0x616>
    409c:	88 e5       	ldi	r24, 0x58	; 88
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	b7 01       	movw	r22, r14
    40a2:	0c c0       	rjmp	.+24     	; 0x40bc <vfprintf+0x632>
    40a4:	80 2f       	mov	r24, r16
    40a6:	86 78       	andi	r24, 0x86	; 134
    40a8:	59 f0       	breq	.+22     	; 0x40c0 <vfprintf+0x636>
    40aa:	01 ff       	sbrs	r16, 1
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <vfprintf+0x628>
    40ae:	8b e2       	ldi	r24, 0x2B	; 43
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <vfprintf+0x62a>
    40b2:	80 e2       	ldi	r24, 0x20	; 32
    40b4:	07 fd       	sbrc	r16, 7
    40b6:	8d e2       	ldi	r24, 0x2D	; 45
    40b8:	b7 01       	movw	r22, r14
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    40c0:	c1 16       	cp	r12, r17
    40c2:	38 f4       	brcc	.+14     	; 0x40d2 <vfprintf+0x648>
    40c4:	b7 01       	movw	r22, r14
    40c6:	80 e3       	ldi	r24, 0x30	; 48
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    40ce:	11 50       	subi	r17, 0x01	; 1
    40d0:	f7 cf       	rjmp	.-18     	; 0x40c0 <vfprintf+0x636>
    40d2:	ca 94       	dec	r12
    40d4:	f3 01       	movw	r30, r6
    40d6:	ec 0d       	add	r30, r12
    40d8:	f1 1d       	adc	r31, r1
    40da:	80 81       	ld	r24, Z
    40dc:	b7 01       	movw	r22, r14
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    40e4:	c1 10       	cpse	r12, r1
    40e6:	f5 cf       	rjmp	.-22     	; 0x40d2 <vfprintf+0x648>
    40e8:	15 c0       	rjmp	.+42     	; 0x4114 <vfprintf+0x68a>
    40ea:	f4 e0       	ldi	r31, 0x04	; 4
    40ec:	f5 15       	cp	r31, r5
    40ee:	60 f5       	brcc	.+88     	; 0x4148 <vfprintf+0x6be>
    40f0:	84 e0       	ldi	r24, 0x04	; 4
    40f2:	58 1a       	sub	r5, r24
    40f4:	93 fe       	sbrs	r9, 3
    40f6:	1f c0       	rjmp	.+62     	; 0x4136 <vfprintf+0x6ac>
    40f8:	01 11       	cpse	r16, r1
    40fa:	27 c0       	rjmp	.+78     	; 0x414a <vfprintf+0x6c0>
    40fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    40fe:	23 ff       	sbrs	r18, 3
    4100:	2a c0       	rjmp	.+84     	; 0x4156 <vfprintf+0x6cc>
    4102:	04 ed       	ldi	r16, 0xD4	; 212
    4104:	12 e0       	ldi	r17, 0x02	; 2
    4106:	39 2d       	mov	r19, r9
    4108:	30 71       	andi	r19, 0x10	; 16
    410a:	93 2e       	mov	r9, r19
    410c:	f8 01       	movw	r30, r16
    410e:	84 91       	lpm	r24, Z
    4110:	81 11       	cpse	r24, r1
    4112:	24 c0       	rjmp	.+72     	; 0x415c <vfprintf+0x6d2>
    4114:	55 20       	and	r5, r5
    4116:	09 f4       	brne	.+2      	; 0x411a <vfprintf+0x690>
    4118:	e4 cc       	rjmp	.-1592   	; 0x3ae2 <vfprintf+0x58>
    411a:	b7 01       	movw	r22, r14
    411c:	80 e2       	ldi	r24, 0x20	; 32
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    4124:	5a 94       	dec	r5
    4126:	f6 cf       	rjmp	.-20     	; 0x4114 <vfprintf+0x68a>
    4128:	f7 01       	movw	r30, r14
    412a:	86 81       	ldd	r24, Z+6	; 0x06
    412c:	97 81       	ldd	r25, Z+7	; 0x07
    412e:	26 c0       	rjmp	.+76     	; 0x417c <vfprintf+0x6f2>
    4130:	8f ef       	ldi	r24, 0xFF	; 255
    4132:	9f ef       	ldi	r25, 0xFF	; 255
    4134:	23 c0       	rjmp	.+70     	; 0x417c <vfprintf+0x6f2>
    4136:	b7 01       	movw	r22, r14
    4138:	80 e2       	ldi	r24, 0x20	; 32
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    4140:	5a 94       	dec	r5
    4142:	51 10       	cpse	r5, r1
    4144:	f8 cf       	rjmp	.-16     	; 0x4136 <vfprintf+0x6ac>
    4146:	d8 cf       	rjmp	.-80     	; 0x40f8 <vfprintf+0x66e>
    4148:	51 2c       	mov	r5, r1
    414a:	b7 01       	movw	r22, r14
    414c:	80 2f       	mov	r24, r16
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    4154:	d3 cf       	rjmp	.-90     	; 0x40fc <vfprintf+0x672>
    4156:	08 ed       	ldi	r16, 0xD8	; 216
    4158:	12 e0       	ldi	r17, 0x02	; 2
    415a:	d5 cf       	rjmp	.-86     	; 0x4106 <vfprintf+0x67c>
    415c:	91 10       	cpse	r9, r1
    415e:	80 52       	subi	r24, 0x20	; 32
    4160:	b7 01       	movw	r22, r14
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 31 22 	call	0x4462	; 0x4462 <fputc>
    4168:	0f 5f       	subi	r16, 0xFF	; 255
    416a:	1f 4f       	sbci	r17, 0xFF	; 255
    416c:	cf cf       	rjmp	.-98     	; 0x410c <vfprintf+0x682>
    416e:	23 e0       	ldi	r18, 0x03	; 3
    4170:	25 15       	cp	r18, r5
    4172:	10 f4       	brcc	.+4      	; 0x4178 <vfprintf+0x6ee>
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	bd cf       	rjmp	.-134    	; 0x40f2 <vfprintf+0x668>
    4178:	51 2c       	mov	r5, r1
    417a:	c0 cf       	rjmp	.-128    	; 0x40fc <vfprintf+0x672>
    417c:	60 96       	adiw	r28, 0x10	; 16
    417e:	e2 e1       	ldi	r30, 0x12	; 18
    4180:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__>

00004184 <__divmodhi4>:
    4184:	97 fb       	bst	r25, 7
    4186:	07 2e       	mov	r0, r23
    4188:	16 f4       	brtc	.+4      	; 0x418e <__divmodhi4+0xa>
    418a:	00 94       	com	r0
    418c:	07 d0       	rcall	.+14     	; 0x419c <__divmodhi4_neg1>
    418e:	77 fd       	sbrc	r23, 7
    4190:	09 d0       	rcall	.+18     	; 0x41a4 <__divmodhi4_neg2>
    4192:	0e 94 22 21 	call	0x4244	; 0x4244 <__udivmodhi4>
    4196:	07 fc       	sbrc	r0, 7
    4198:	05 d0       	rcall	.+10     	; 0x41a4 <__divmodhi4_neg2>
    419a:	3e f4       	brtc	.+14     	; 0x41aa <__divmodhi4_exit>

0000419c <__divmodhi4_neg1>:
    419c:	90 95       	com	r25
    419e:	81 95       	neg	r24
    41a0:	9f 4f       	sbci	r25, 0xFF	; 255
    41a2:	08 95       	ret

000041a4 <__divmodhi4_neg2>:
    41a4:	70 95       	com	r23
    41a6:	61 95       	neg	r22
    41a8:	7f 4f       	sbci	r23, 0xFF	; 255

000041aa <__divmodhi4_exit>:
    41aa:	08 95       	ret

000041ac <__tablejump2__>:
    41ac:	ee 0f       	add	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	05 90       	lpm	r0, Z+
    41b2:	f4 91       	lpm	r31, Z
    41b4:	e0 2d       	mov	r30, r0
    41b6:	09 94       	ijmp

000041b8 <__umulhisi3>:
    41b8:	a2 9f       	mul	r26, r18
    41ba:	b0 01       	movw	r22, r0
    41bc:	b3 9f       	mul	r27, r19
    41be:	c0 01       	movw	r24, r0
    41c0:	a3 9f       	mul	r26, r19
    41c2:	70 0d       	add	r23, r0
    41c4:	81 1d       	adc	r24, r1
    41c6:	11 24       	eor	r1, r1
    41c8:	91 1d       	adc	r25, r1
    41ca:	b2 9f       	mul	r27, r18
    41cc:	70 0d       	add	r23, r0
    41ce:	81 1d       	adc	r24, r1
    41d0:	11 24       	eor	r1, r1
    41d2:	91 1d       	adc	r25, r1
    41d4:	08 95       	ret

000041d6 <__prologue_saves__>:
    41d6:	2f 92       	push	r2
    41d8:	3f 92       	push	r3
    41da:	4f 92       	push	r4
    41dc:	5f 92       	push	r5
    41de:	6f 92       	push	r6
    41e0:	7f 92       	push	r7
    41e2:	8f 92       	push	r8
    41e4:	9f 92       	push	r9
    41e6:	af 92       	push	r10
    41e8:	bf 92       	push	r11
    41ea:	cf 92       	push	r12
    41ec:	df 92       	push	r13
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	1f 93       	push	r17
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	ca 1b       	sub	r28, r26
    4200:	db 0b       	sbc	r29, r27
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	09 94       	ijmp

0000420e <__epilogue_restores__>:
    420e:	2a 88       	ldd	r2, Y+18	; 0x12
    4210:	39 88       	ldd	r3, Y+17	; 0x11
    4212:	48 88       	ldd	r4, Y+16	; 0x10
    4214:	5f 84       	ldd	r5, Y+15	; 0x0f
    4216:	6e 84       	ldd	r6, Y+14	; 0x0e
    4218:	7d 84       	ldd	r7, Y+13	; 0x0d
    421a:	8c 84       	ldd	r8, Y+12	; 0x0c
    421c:	9b 84       	ldd	r9, Y+11	; 0x0b
    421e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4220:	b9 84       	ldd	r11, Y+9	; 0x09
    4222:	c8 84       	ldd	r12, Y+8	; 0x08
    4224:	df 80       	ldd	r13, Y+7	; 0x07
    4226:	ee 80       	ldd	r14, Y+6	; 0x06
    4228:	fd 80       	ldd	r15, Y+5	; 0x05
    422a:	0c 81       	ldd	r16, Y+4	; 0x04
    422c:	1b 81       	ldd	r17, Y+3	; 0x03
    422e:	aa 81       	ldd	r26, Y+2	; 0x02
    4230:	b9 81       	ldd	r27, Y+1	; 0x01
    4232:	ce 0f       	add	r28, r30
    4234:	d1 1d       	adc	r29, r1
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	ed 01       	movw	r28, r26
    4242:	08 95       	ret

00004244 <__udivmodhi4>:
    4244:	aa 1b       	sub	r26, r26
    4246:	bb 1b       	sub	r27, r27
    4248:	51 e1       	ldi	r21, 0x11	; 17
    424a:	07 c0       	rjmp	.+14     	; 0x425a <__udivmodhi4_ep>

0000424c <__udivmodhi4_loop>:
    424c:	aa 1f       	adc	r26, r26
    424e:	bb 1f       	adc	r27, r27
    4250:	a6 17       	cp	r26, r22
    4252:	b7 07       	cpc	r27, r23
    4254:	10 f0       	brcs	.+4      	; 0x425a <__udivmodhi4_ep>
    4256:	a6 1b       	sub	r26, r22
    4258:	b7 0b       	sbc	r27, r23

0000425a <__udivmodhi4_ep>:
    425a:	88 1f       	adc	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	5a 95       	dec	r21
    4260:	a9 f7       	brne	.-22     	; 0x424c <__udivmodhi4_loop>
    4262:	80 95       	com	r24
    4264:	90 95       	com	r25
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	08 95       	ret

0000426c <__ftoa_engine>:
    426c:	28 30       	cpi	r18, 0x08	; 8
    426e:	08 f0       	brcs	.+2      	; 0x4272 <__ftoa_engine+0x6>
    4270:	27 e0       	ldi	r18, 0x07	; 7
    4272:	33 27       	eor	r19, r19
    4274:	da 01       	movw	r26, r20
    4276:	99 0f       	add	r25, r25
    4278:	31 1d       	adc	r19, r1
    427a:	87 fd       	sbrc	r24, 7
    427c:	91 60       	ori	r25, 0x01	; 1
    427e:	00 96       	adiw	r24, 0x00	; 0
    4280:	61 05       	cpc	r22, r1
    4282:	71 05       	cpc	r23, r1
    4284:	39 f4       	brne	.+14     	; 0x4294 <__ftoa_engine+0x28>
    4286:	32 60       	ori	r19, 0x02	; 2
    4288:	2e 5f       	subi	r18, 0xFE	; 254
    428a:	3d 93       	st	X+, r19
    428c:	30 e3       	ldi	r19, 0x30	; 48
    428e:	2a 95       	dec	r18
    4290:	e1 f7       	brne	.-8      	; 0x428a <__ftoa_engine+0x1e>
    4292:	08 95       	ret
    4294:	9f 3f       	cpi	r25, 0xFF	; 255
    4296:	30 f0       	brcs	.+12     	; 0x42a4 <__ftoa_engine+0x38>
    4298:	80 38       	cpi	r24, 0x80	; 128
    429a:	71 05       	cpc	r23, r1
    429c:	61 05       	cpc	r22, r1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <__ftoa_engine+0x36>
    42a0:	3c 5f       	subi	r19, 0xFC	; 252
    42a2:	3c 5f       	subi	r19, 0xFC	; 252
    42a4:	3d 93       	st	X+, r19
    42a6:	91 30       	cpi	r25, 0x01	; 1
    42a8:	08 f0       	brcs	.+2      	; 0x42ac <__ftoa_engine+0x40>
    42aa:	80 68       	ori	r24, 0x80	; 128
    42ac:	91 1d       	adc	r25, r1
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	1f 93       	push	r17
    42b4:	0f 93       	push	r16
    42b6:	ff 92       	push	r15
    42b8:	ef 92       	push	r14
    42ba:	19 2f       	mov	r17, r25
    42bc:	98 7f       	andi	r25, 0xF8	; 248
    42be:	96 95       	lsr	r25
    42c0:	e9 2f       	mov	r30, r25
    42c2:	96 95       	lsr	r25
    42c4:	96 95       	lsr	r25
    42c6:	e9 0f       	add	r30, r25
    42c8:	ff 27       	eor	r31, r31
    42ca:	ea 5c       	subi	r30, 0xCA	; 202
    42cc:	fc 4f       	sbci	r31, 0xFC	; 252
    42ce:	99 27       	eor	r25, r25
    42d0:	33 27       	eor	r19, r19
    42d2:	ee 24       	eor	r14, r14
    42d4:	ff 24       	eor	r15, r15
    42d6:	a7 01       	movw	r20, r14
    42d8:	e7 01       	movw	r28, r14
    42da:	05 90       	lpm	r0, Z+
    42dc:	08 94       	sec
    42de:	07 94       	ror	r0
    42e0:	28 f4       	brcc	.+10     	; 0x42ec <__ftoa_engine+0x80>
    42e2:	36 0f       	add	r19, r22
    42e4:	e7 1e       	adc	r14, r23
    42e6:	f8 1e       	adc	r15, r24
    42e8:	49 1f       	adc	r20, r25
    42ea:	51 1d       	adc	r21, r1
    42ec:	66 0f       	add	r22, r22
    42ee:	77 1f       	adc	r23, r23
    42f0:	88 1f       	adc	r24, r24
    42f2:	99 1f       	adc	r25, r25
    42f4:	06 94       	lsr	r0
    42f6:	a1 f7       	brne	.-24     	; 0x42e0 <__ftoa_engine+0x74>
    42f8:	05 90       	lpm	r0, Z+
    42fa:	07 94       	ror	r0
    42fc:	28 f4       	brcc	.+10     	; 0x4308 <__ftoa_engine+0x9c>
    42fe:	e7 0e       	add	r14, r23
    4300:	f8 1e       	adc	r15, r24
    4302:	49 1f       	adc	r20, r25
    4304:	56 1f       	adc	r21, r22
    4306:	c1 1d       	adc	r28, r1
    4308:	77 0f       	add	r23, r23
    430a:	88 1f       	adc	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	66 1f       	adc	r22, r22
    4310:	06 94       	lsr	r0
    4312:	a1 f7       	brne	.-24     	; 0x42fc <__ftoa_engine+0x90>
    4314:	05 90       	lpm	r0, Z+
    4316:	07 94       	ror	r0
    4318:	28 f4       	brcc	.+10     	; 0x4324 <__ftoa_engine+0xb8>
    431a:	f8 0e       	add	r15, r24
    431c:	49 1f       	adc	r20, r25
    431e:	56 1f       	adc	r21, r22
    4320:	c7 1f       	adc	r28, r23
    4322:	d1 1d       	adc	r29, r1
    4324:	88 0f       	add	r24, r24
    4326:	99 1f       	adc	r25, r25
    4328:	66 1f       	adc	r22, r22
    432a:	77 1f       	adc	r23, r23
    432c:	06 94       	lsr	r0
    432e:	a1 f7       	brne	.-24     	; 0x4318 <__ftoa_engine+0xac>
    4330:	05 90       	lpm	r0, Z+
    4332:	07 94       	ror	r0
    4334:	20 f4       	brcc	.+8      	; 0x433e <__ftoa_engine+0xd2>
    4336:	49 0f       	add	r20, r25
    4338:	56 1f       	adc	r21, r22
    433a:	c7 1f       	adc	r28, r23
    433c:	d8 1f       	adc	r29, r24
    433e:	99 0f       	add	r25, r25
    4340:	66 1f       	adc	r22, r22
    4342:	77 1f       	adc	r23, r23
    4344:	88 1f       	adc	r24, r24
    4346:	06 94       	lsr	r0
    4348:	a9 f7       	brne	.-22     	; 0x4334 <__ftoa_engine+0xc8>
    434a:	84 91       	lpm	r24, Z
    434c:	10 95       	com	r17
    434e:	17 70       	andi	r17, 0x07	; 7
    4350:	41 f0       	breq	.+16     	; 0x4362 <__ftoa_engine+0xf6>
    4352:	d6 95       	lsr	r29
    4354:	c7 95       	ror	r28
    4356:	57 95       	ror	r21
    4358:	47 95       	ror	r20
    435a:	f7 94       	ror	r15
    435c:	e7 94       	ror	r14
    435e:	1a 95       	dec	r17
    4360:	c1 f7       	brne	.-16     	; 0x4352 <__ftoa_engine+0xe6>
    4362:	ec ed       	ldi	r30, 0xDC	; 220
    4364:	f2 e0       	ldi	r31, 0x02	; 2
    4366:	68 94       	set
    4368:	15 90       	lpm	r1, Z+
    436a:	15 91       	lpm	r17, Z+
    436c:	35 91       	lpm	r19, Z+
    436e:	65 91       	lpm	r22, Z+
    4370:	95 91       	lpm	r25, Z+
    4372:	05 90       	lpm	r0, Z+
    4374:	7f e2       	ldi	r23, 0x2F	; 47
    4376:	73 95       	inc	r23
    4378:	e1 18       	sub	r14, r1
    437a:	f1 0a       	sbc	r15, r17
    437c:	43 0b       	sbc	r20, r19
    437e:	56 0b       	sbc	r21, r22
    4380:	c9 0b       	sbc	r28, r25
    4382:	d0 09       	sbc	r29, r0
    4384:	c0 f7       	brcc	.-16     	; 0x4376 <__ftoa_engine+0x10a>
    4386:	e1 0c       	add	r14, r1
    4388:	f1 1e       	adc	r15, r17
    438a:	43 1f       	adc	r20, r19
    438c:	56 1f       	adc	r21, r22
    438e:	c9 1f       	adc	r28, r25
    4390:	d0 1d       	adc	r29, r0
    4392:	7e f4       	brtc	.+30     	; 0x43b2 <__ftoa_engine+0x146>
    4394:	70 33       	cpi	r23, 0x30	; 48
    4396:	11 f4       	brne	.+4      	; 0x439c <__ftoa_engine+0x130>
    4398:	8a 95       	dec	r24
    439a:	e6 cf       	rjmp	.-52     	; 0x4368 <__ftoa_engine+0xfc>
    439c:	e8 94       	clt
    439e:	01 50       	subi	r16, 0x01	; 1
    43a0:	30 f0       	brcs	.+12     	; 0x43ae <__ftoa_engine+0x142>
    43a2:	08 0f       	add	r16, r24
    43a4:	0a f4       	brpl	.+2      	; 0x43a8 <__ftoa_engine+0x13c>
    43a6:	00 27       	eor	r16, r16
    43a8:	02 17       	cp	r16, r18
    43aa:	08 f4       	brcc	.+2      	; 0x43ae <__ftoa_engine+0x142>
    43ac:	20 2f       	mov	r18, r16
    43ae:	23 95       	inc	r18
    43b0:	02 2f       	mov	r16, r18
    43b2:	7a 33       	cpi	r23, 0x3A	; 58
    43b4:	28 f0       	brcs	.+10     	; 0x43c0 <__ftoa_engine+0x154>
    43b6:	79 e3       	ldi	r23, 0x39	; 57
    43b8:	7d 93       	st	X+, r23
    43ba:	2a 95       	dec	r18
    43bc:	e9 f7       	brne	.-6      	; 0x43b8 <__ftoa_engine+0x14c>
    43be:	10 c0       	rjmp	.+32     	; 0x43e0 <__ftoa_engine+0x174>
    43c0:	7d 93       	st	X+, r23
    43c2:	2a 95       	dec	r18
    43c4:	89 f6       	brne	.-94     	; 0x4368 <__ftoa_engine+0xfc>
    43c6:	06 94       	lsr	r0
    43c8:	97 95       	ror	r25
    43ca:	67 95       	ror	r22
    43cc:	37 95       	ror	r19
    43ce:	17 95       	ror	r17
    43d0:	17 94       	ror	r1
    43d2:	e1 18       	sub	r14, r1
    43d4:	f1 0a       	sbc	r15, r17
    43d6:	43 0b       	sbc	r20, r19
    43d8:	56 0b       	sbc	r21, r22
    43da:	c9 0b       	sbc	r28, r25
    43dc:	d0 09       	sbc	r29, r0
    43de:	98 f0       	brcs	.+38     	; 0x4406 <__ftoa_engine+0x19a>
    43e0:	23 95       	inc	r18
    43e2:	7e 91       	ld	r23, -X
    43e4:	73 95       	inc	r23
    43e6:	7a 33       	cpi	r23, 0x3A	; 58
    43e8:	08 f0       	brcs	.+2      	; 0x43ec <__ftoa_engine+0x180>
    43ea:	70 e3       	ldi	r23, 0x30	; 48
    43ec:	7c 93       	st	X, r23
    43ee:	20 13       	cpse	r18, r16
    43f0:	b8 f7       	brcc	.-18     	; 0x43e0 <__ftoa_engine+0x174>
    43f2:	7e 91       	ld	r23, -X
    43f4:	70 61       	ori	r23, 0x10	; 16
    43f6:	7d 93       	st	X+, r23
    43f8:	30 f0       	brcs	.+12     	; 0x4406 <__ftoa_engine+0x19a>
    43fa:	83 95       	inc	r24
    43fc:	71 e3       	ldi	r23, 0x31	; 49
    43fe:	7d 93       	st	X+, r23
    4400:	70 e3       	ldi	r23, 0x30	; 48
    4402:	2a 95       	dec	r18
    4404:	e1 f7       	brne	.-8      	; 0x43fe <__ftoa_engine+0x192>
    4406:	11 24       	eor	r1, r1
    4408:	ef 90       	pop	r14
    440a:	ff 90       	pop	r15
    440c:	0f 91       	pop	r16
    440e:	1f 91       	pop	r17
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	99 27       	eor	r25, r25
    4416:	87 fd       	sbrc	r24, 7
    4418:	90 95       	com	r25
    441a:	08 95       	ret

0000441c <strnlen_P>:
    441c:	fc 01       	movw	r30, r24
    441e:	05 90       	lpm	r0, Z+
    4420:	61 50       	subi	r22, 0x01	; 1
    4422:	70 40       	sbci	r23, 0x00	; 0
    4424:	01 10       	cpse	r0, r1
    4426:	d8 f7       	brcc	.-10     	; 0x441e <strnlen_P+0x2>
    4428:	80 95       	com	r24
    442a:	90 95       	com	r25
    442c:	8e 0f       	add	r24, r30
    442e:	9f 1f       	adc	r25, r31
    4430:	08 95       	ret

00004432 <memcmp>:
    4432:	fb 01       	movw	r30, r22
    4434:	dc 01       	movw	r26, r24
    4436:	04 c0       	rjmp	.+8      	; 0x4440 <memcmp+0xe>
    4438:	8d 91       	ld	r24, X+
    443a:	01 90       	ld	r0, Z+
    443c:	80 19       	sub	r24, r0
    443e:	21 f4       	brne	.+8      	; 0x4448 <memcmp+0x16>
    4440:	41 50       	subi	r20, 0x01	; 1
    4442:	50 40       	sbci	r21, 0x00	; 0
    4444:	c8 f7       	brcc	.-14     	; 0x4438 <memcmp+0x6>
    4446:	88 1b       	sub	r24, r24
    4448:	99 0b       	sbc	r25, r25
    444a:	08 95       	ret

0000444c <strnlen>:
    444c:	fc 01       	movw	r30, r24
    444e:	61 50       	subi	r22, 0x01	; 1
    4450:	70 40       	sbci	r23, 0x00	; 0
    4452:	01 90       	ld	r0, Z+
    4454:	01 10       	cpse	r0, r1
    4456:	d8 f7       	brcc	.-10     	; 0x444e <strnlen+0x2>
    4458:	80 95       	com	r24
    445a:	90 95       	com	r25
    445c:	8e 0f       	add	r24, r30
    445e:	9f 1f       	adc	r25, r31
    4460:	08 95       	ret

00004462 <fputc>:
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	fb 01       	movw	r30, r22
    446c:	23 81       	ldd	r18, Z+3	; 0x03
    446e:	21 fd       	sbrc	r18, 1
    4470:	03 c0       	rjmp	.+6      	; 0x4478 <fputc+0x16>
    4472:	8f ef       	ldi	r24, 0xFF	; 255
    4474:	9f ef       	ldi	r25, 0xFF	; 255
    4476:	2c c0       	rjmp	.+88     	; 0x44d0 <fputc+0x6e>
    4478:	22 ff       	sbrs	r18, 2
    447a:	16 c0       	rjmp	.+44     	; 0x44a8 <fputc+0x46>
    447c:	46 81       	ldd	r20, Z+6	; 0x06
    447e:	57 81       	ldd	r21, Z+7	; 0x07
    4480:	24 81       	ldd	r18, Z+4	; 0x04
    4482:	35 81       	ldd	r19, Z+5	; 0x05
    4484:	42 17       	cp	r20, r18
    4486:	53 07       	cpc	r21, r19
    4488:	44 f4       	brge	.+16     	; 0x449a <fputc+0x38>
    448a:	a0 81       	ld	r26, Z
    448c:	b1 81       	ldd	r27, Z+1	; 0x01
    448e:	9d 01       	movw	r18, r26
    4490:	2f 5f       	subi	r18, 0xFF	; 255
    4492:	3f 4f       	sbci	r19, 0xFF	; 255
    4494:	31 83       	std	Z+1, r19	; 0x01
    4496:	20 83       	st	Z, r18
    4498:	8c 93       	st	X, r24
    449a:	26 81       	ldd	r18, Z+6	; 0x06
    449c:	37 81       	ldd	r19, Z+7	; 0x07
    449e:	2f 5f       	subi	r18, 0xFF	; 255
    44a0:	3f 4f       	sbci	r19, 0xFF	; 255
    44a2:	37 83       	std	Z+7, r19	; 0x07
    44a4:	26 83       	std	Z+6, r18	; 0x06
    44a6:	14 c0       	rjmp	.+40     	; 0x44d0 <fputc+0x6e>
    44a8:	8b 01       	movw	r16, r22
    44aa:	ec 01       	movw	r28, r24
    44ac:	fb 01       	movw	r30, r22
    44ae:	00 84       	ldd	r0, Z+8	; 0x08
    44b0:	f1 85       	ldd	r31, Z+9	; 0x09
    44b2:	e0 2d       	mov	r30, r0
    44b4:	09 95       	icall
    44b6:	89 2b       	or	r24, r25
    44b8:	e1 f6       	brne	.-72     	; 0x4472 <fputc+0x10>
    44ba:	d8 01       	movw	r26, r16
    44bc:	16 96       	adiw	r26, 0x06	; 6
    44be:	8d 91       	ld	r24, X+
    44c0:	9c 91       	ld	r25, X
    44c2:	17 97       	sbiw	r26, 0x07	; 7
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	17 96       	adiw	r26, 0x07	; 7
    44c8:	9c 93       	st	X, r25
    44ca:	8e 93       	st	-X, r24
    44cc:	16 97       	sbiw	r26, 0x06	; 6
    44ce:	ce 01       	movw	r24, r28
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	08 95       	ret

000044da <vsprintf>:
    44da:	ae e0       	ldi	r26, 0x0E	; 14
    44dc:	b0 e0       	ldi	r27, 0x00	; 0
    44de:	e3 e7       	ldi	r30, 0x73	; 115
    44e0:	f2 e2       	ldi	r31, 0x22	; 34
    44e2:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <__prologue_saves__+0x1c>
    44e6:	8c 01       	movw	r16, r24
    44e8:	86 e0       	ldi	r24, 0x06	; 6
    44ea:	8c 83       	std	Y+4, r24	; 0x04
    44ec:	1a 83       	std	Y+2, r17	; 0x02
    44ee:	09 83       	std	Y+1, r16	; 0x01
    44f0:	8f ef       	ldi	r24, 0xFF	; 255
    44f2:	9f e7       	ldi	r25, 0x7F	; 127
    44f4:	9e 83       	std	Y+6, r25	; 0x06
    44f6:	8d 83       	std	Y+5, r24	; 0x05
    44f8:	ce 01       	movw	r24, r28
    44fa:	01 96       	adiw	r24, 0x01	; 1
    44fc:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <vfprintf>
    4500:	ef 81       	ldd	r30, Y+7	; 0x07
    4502:	f8 85       	ldd	r31, Y+8	; 0x08
    4504:	e0 0f       	add	r30, r16
    4506:	f1 1f       	adc	r31, r17
    4508:	10 82       	st	Z, r1
    450a:	2e 96       	adiw	r28, 0x0e	; 14
    450c:	e4 e0       	ldi	r30, 0x04	; 4
    450e:	0c 94 15 21 	jmp	0x422a	; 0x422a <__epilogue_restores__+0x1c>

00004512 <__ultoa_invert>:
    4512:	fa 01       	movw	r30, r20
    4514:	aa 27       	eor	r26, r26
    4516:	28 30       	cpi	r18, 0x08	; 8
    4518:	51 f1       	breq	.+84     	; 0x456e <__ultoa_invert+0x5c>
    451a:	20 31       	cpi	r18, 0x10	; 16
    451c:	81 f1       	breq	.+96     	; 0x457e <__ultoa_invert+0x6c>
    451e:	e8 94       	clt
    4520:	6f 93       	push	r22
    4522:	6e 7f       	andi	r22, 0xFE	; 254
    4524:	6e 5f       	subi	r22, 0xFE	; 254
    4526:	7f 4f       	sbci	r23, 0xFF	; 255
    4528:	8f 4f       	sbci	r24, 0xFF	; 255
    452a:	9f 4f       	sbci	r25, 0xFF	; 255
    452c:	af 4f       	sbci	r26, 0xFF	; 255
    452e:	b1 e0       	ldi	r27, 0x01	; 1
    4530:	3e d0       	rcall	.+124    	; 0x45ae <__ultoa_invert+0x9c>
    4532:	b4 e0       	ldi	r27, 0x04	; 4
    4534:	3c d0       	rcall	.+120    	; 0x45ae <__ultoa_invert+0x9c>
    4536:	67 0f       	add	r22, r23
    4538:	78 1f       	adc	r23, r24
    453a:	89 1f       	adc	r24, r25
    453c:	9a 1f       	adc	r25, r26
    453e:	a1 1d       	adc	r26, r1
    4540:	68 0f       	add	r22, r24
    4542:	79 1f       	adc	r23, r25
    4544:	8a 1f       	adc	r24, r26
    4546:	91 1d       	adc	r25, r1
    4548:	a1 1d       	adc	r26, r1
    454a:	6a 0f       	add	r22, r26
    454c:	71 1d       	adc	r23, r1
    454e:	81 1d       	adc	r24, r1
    4550:	91 1d       	adc	r25, r1
    4552:	a1 1d       	adc	r26, r1
    4554:	20 d0       	rcall	.+64     	; 0x4596 <__ultoa_invert+0x84>
    4556:	09 f4       	brne	.+2      	; 0x455a <__ultoa_invert+0x48>
    4558:	68 94       	set
    455a:	3f 91       	pop	r19
    455c:	2a e0       	ldi	r18, 0x0A	; 10
    455e:	26 9f       	mul	r18, r22
    4560:	11 24       	eor	r1, r1
    4562:	30 19       	sub	r19, r0
    4564:	30 5d       	subi	r19, 0xD0	; 208
    4566:	31 93       	st	Z+, r19
    4568:	de f6       	brtc	.-74     	; 0x4520 <__ultoa_invert+0xe>
    456a:	cf 01       	movw	r24, r30
    456c:	08 95       	ret
    456e:	46 2f       	mov	r20, r22
    4570:	47 70       	andi	r20, 0x07	; 7
    4572:	40 5d       	subi	r20, 0xD0	; 208
    4574:	41 93       	st	Z+, r20
    4576:	b3 e0       	ldi	r27, 0x03	; 3
    4578:	0f d0       	rcall	.+30     	; 0x4598 <__ultoa_invert+0x86>
    457a:	c9 f7       	brne	.-14     	; 0x456e <__ultoa_invert+0x5c>
    457c:	f6 cf       	rjmp	.-20     	; 0x456a <__ultoa_invert+0x58>
    457e:	46 2f       	mov	r20, r22
    4580:	4f 70       	andi	r20, 0x0F	; 15
    4582:	40 5d       	subi	r20, 0xD0	; 208
    4584:	4a 33       	cpi	r20, 0x3A	; 58
    4586:	18 f0       	brcs	.+6      	; 0x458e <__ultoa_invert+0x7c>
    4588:	49 5d       	subi	r20, 0xD9	; 217
    458a:	31 fd       	sbrc	r19, 1
    458c:	40 52       	subi	r20, 0x20	; 32
    458e:	41 93       	st	Z+, r20
    4590:	02 d0       	rcall	.+4      	; 0x4596 <__ultoa_invert+0x84>
    4592:	a9 f7       	brne	.-22     	; 0x457e <__ultoa_invert+0x6c>
    4594:	ea cf       	rjmp	.-44     	; 0x456a <__ultoa_invert+0x58>
    4596:	b4 e0       	ldi	r27, 0x04	; 4
    4598:	a6 95       	lsr	r26
    459a:	97 95       	ror	r25
    459c:	87 95       	ror	r24
    459e:	77 95       	ror	r23
    45a0:	67 95       	ror	r22
    45a2:	ba 95       	dec	r27
    45a4:	c9 f7       	brne	.-14     	; 0x4598 <__ultoa_invert+0x86>
    45a6:	00 97       	sbiw	r24, 0x00	; 0
    45a8:	61 05       	cpc	r22, r1
    45aa:	71 05       	cpc	r23, r1
    45ac:	08 95       	ret
    45ae:	9b 01       	movw	r18, r22
    45b0:	ac 01       	movw	r20, r24
    45b2:	0a 2e       	mov	r0, r26
    45b4:	06 94       	lsr	r0
    45b6:	57 95       	ror	r21
    45b8:	47 95       	ror	r20
    45ba:	37 95       	ror	r19
    45bc:	27 95       	ror	r18
    45be:	ba 95       	dec	r27
    45c0:	c9 f7       	brne	.-14     	; 0x45b4 <__ultoa_invert+0xa2>
    45c2:	62 0f       	add	r22, r18
    45c4:	73 1f       	adc	r23, r19
    45c6:	84 1f       	adc	r24, r20
    45c8:	95 1f       	adc	r25, r21
    45ca:	a0 1d       	adc	r26, r0
    45cc:	08 95       	ret

000045ce <_exit>:
    45ce:	f8 94       	cli

000045d0 <__stop_program>:
    45d0:	ff cf       	rjmp	.-2      	; 0x45d0 <__stop_program>
