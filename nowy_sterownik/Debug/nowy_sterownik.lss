
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  000044e8  0000457c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a3  0080021a  0080021a  00004736  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062ee  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000210a  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d2f  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ee0  00000000  00000000  00010f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d9f  00000000  00000000  00011e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c58  00000000  00000000  00013bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001680f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__vector_13>
      38:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	f7 08       	sbc	r15, r7
      56:	fe 08       	sbc	r15, r14
      58:	01 09       	sbc	r16, r1
      5a:	07 09       	sbc	r16, r7
      5c:	0d 09       	sbc	r16, r13
      5e:	12 09       	sbc	r17, r2
      60:	18 09       	sbc	r17, r8
      62:	1f 09       	sbc	r17, r15
      64:	23 09       	sbc	r18, r3
      66:	2b 09       	sbc	r18, r11
      68:	7a 09       	sbc	r23, r10
      6a:	7a 09       	sbc	r23, r10
      6c:	7a 09       	sbc	r23, r10
      6e:	7a 09       	sbc	r23, r10
      70:	7a 09       	sbc	r23, r10
      72:	7a 09       	sbc	r23, r10
      74:	7a 09       	sbc	r23, r10
      76:	7a 09       	sbc	r23, r10
      78:	7a 09       	sbc	r23, r10
      7a:	7a 09       	sbc	r23, r10
      7c:	7a 09       	sbc	r23, r10
      7e:	7a 09       	sbc	r23, r10
      80:	7a 09       	sbc	r23, r10
      82:	7a 09       	sbc	r23, r10
      84:	7a 09       	sbc	r23, r10
      86:	7a 09       	sbc	r23, r10
      88:	7a 09       	sbc	r23, r10
      8a:	7a 09       	sbc	r23, r10
      8c:	7a 09       	sbc	r23, r10
      8e:	7a 09       	sbc	r23, r10
      90:	7a 09       	sbc	r23, r10
      92:	7a 09       	sbc	r23, r10
      94:	7a 09       	sbc	r23, r10
      96:	7a 09       	sbc	r23, r10
      98:	7a 09       	sbc	r23, r10
      9a:	7a 09       	sbc	r23, r10
      9c:	7a 09       	sbc	r23, r10
      9e:	7a 09       	sbc	r23, r10
      a0:	7a 09       	sbc	r23, r10
      a2:	7a 09       	sbc	r23, r10
      a4:	7a 09       	sbc	r23, r10
      a6:	7a 09       	sbc	r23, r10
      a8:	7a 09       	sbc	r23, r10
      aa:	7a 09       	sbc	r23, r10
      ac:	7a 09       	sbc	r23, r10
      ae:	7a 09       	sbc	r23, r10
      b0:	7a 09       	sbc	r23, r10
      b2:	7a 09       	sbc	r23, r10
      b4:	7a 09       	sbc	r23, r10
      b6:	7a 09       	sbc	r23, r10
      b8:	7a 09       	sbc	r23, r10
      ba:	7a 09       	sbc	r23, r10
      bc:	7a 09       	sbc	r23, r10
      be:	7a 09       	sbc	r23, r10
      c0:	7a 09       	sbc	r23, r10
      c2:	7a 09       	sbc	r23, r10
      c4:	7a 09       	sbc	r23, r10
      c6:	7a 09       	sbc	r23, r10
      c8:	7a 09       	sbc	r23, r10
      ca:	7a 09       	sbc	r23, r10
      cc:	7a 09       	sbc	r23, r10
      ce:	7a 09       	sbc	r23, r10
      d0:	7a 09       	sbc	r23, r10
      d2:	7a 09       	sbc	r23, r10
      d4:	7a 09       	sbc	r23, r10
      d6:	7a 09       	sbc	r23, r10
      d8:	7a 09       	sbc	r23, r10
      da:	7a 09       	sbc	r23, r10
      dc:	7a 09       	sbc	r23, r10
      de:	7a 09       	sbc	r23, r10
      e0:	7a 09       	sbc	r23, r10
      e2:	7a 09       	sbc	r23, r10
      e4:	7a 09       	sbc	r23, r10
      e6:	7a 09       	sbc	r23, r10
      e8:	7a 09       	sbc	r23, r10
      ea:	7a 09       	sbc	r23, r10
      ec:	7a 09       	sbc	r23, r10
      ee:	7a 09       	sbc	r23, r10
      f0:	7a 09       	sbc	r23, r10
      f2:	7a 09       	sbc	r23, r10
      f4:	7a 09       	sbc	r23, r10
      f6:	7a 09       	sbc	r23, r10
      f8:	7a 09       	sbc	r23, r10
      fa:	7a 09       	sbc	r23, r10
      fc:	7a 09       	sbc	r23, r10
      fe:	7a 09       	sbc	r23, r10
     100:	7a 09       	sbc	r23, r10
     102:	7a 09       	sbc	r23, r10
     104:	7a 09       	sbc	r23, r10
     106:	7a 09       	sbc	r23, r10
     108:	7a 09       	sbc	r23, r10
     10a:	7a 09       	sbc	r23, r10
     10c:	7a 09       	sbc	r23, r10
     10e:	7a 09       	sbc	r23, r10
     110:	7a 09       	sbc	r23, r10
     112:	7a 09       	sbc	r23, r10
     114:	7a 09       	sbc	r23, r10
     116:	32 09       	sbc	r19, r2
     118:	39 09       	sbc	r19, r9
     11a:	3f 09       	sbc	r19, r15
     11c:	44 09       	sbc	r20, r4
     11e:	4a 09       	sbc	r20, r10
     120:	50 09       	sbc	r21, r0
     122:	7a 09       	sbc	r23, r10
     124:	7a 09       	sbc	r23, r10
     126:	7a 09       	sbc	r23, r10
     128:	7a 09       	sbc	r23, r10
     12a:	7a 09       	sbc	r23, r10
     12c:	69 09       	sbc	r22, r9
     12e:	7a 09       	sbc	r23, r10
     130:	7a 09       	sbc	r23, r10
     132:	58 09       	sbc	r21, r8
     134:	5d 09       	sbc	r21, r13
     136:	7a 09       	sbc	r23, r10
     138:	55 09       	sbc	r21, r5
     13a:	63 09       	sbc	r22, r3
     13c:	7a 09       	sbc	r23, r10
     13e:	7a 09       	sbc	r23, r10
     140:	7a 09       	sbc	r23, r10
     142:	7a 09       	sbc	r23, r10
     144:	7a 09       	sbc	r23, r10
     146:	7a 09       	sbc	r23, r10
     148:	7a 09       	sbc	r23, r10
     14a:	7a 09       	sbc	r23, r10
     14c:	7a 09       	sbc	r23, r10
     14e:	7a 09       	sbc	r23, r10
     150:	7a 09       	sbc	r23, r10
     152:	7a 09       	sbc	r23, r10
     154:	7a 09       	sbc	r23, r10
     156:	7a 09       	sbc	r23, r10
     158:	7a 09       	sbc	r23, r10
     15a:	7a 09       	sbc	r23, r10
     15c:	7a 09       	sbc	r23, r10
     15e:	7a 09       	sbc	r23, r10
     160:	7a 09       	sbc	r23, r10
     162:	7a 09       	sbc	r23, r10
     164:	7a 09       	sbc	r23, r10
     166:	7a 09       	sbc	r23, r10
     168:	7a 09       	sbc	r23, r10
     16a:	7a 09       	sbc	r23, r10
     16c:	7a 09       	sbc	r23, r10
     16e:	7a 09       	sbc	r23, r10
     170:	7a 09       	sbc	r23, r10
     172:	7a 09       	sbc	r23, r10
     174:	7a 09       	sbc	r23, r10
     176:	7a 09       	sbc	r23, r10
     178:	7a 09       	sbc	r23, r10
     17a:	7a 09       	sbc	r23, r10
     17c:	7a 09       	sbc	r23, r10
     17e:	7a 09       	sbc	r23, r10
     180:	7a 09       	sbc	r23, r10
     182:	7a 09       	sbc	r23, r10
     184:	7a 09       	sbc	r23, r10
     186:	7a 09       	sbc	r23, r10
     188:	7a 09       	sbc	r23, r10
     18a:	7a 09       	sbc	r23, r10
     18c:	7a 09       	sbc	r23, r10
     18e:	7a 09       	sbc	r23, r10
     190:	7a 09       	sbc	r23, r10
     192:	7a 09       	sbc	r23, r10
     194:	7a 09       	sbc	r23, r10
     196:	7a 09       	sbc	r23, r10
     198:	7a 09       	sbc	r23, r10
     19a:	7a 09       	sbc	r23, r10
     19c:	7a 09       	sbc	r23, r10
     19e:	7a 09       	sbc	r23, r10
     1a0:	7a 09       	sbc	r23, r10
     1a2:	7a 09       	sbc	r23, r10
     1a4:	7a 09       	sbc	r23, r10
     1a6:	7a 09       	sbc	r23, r10
     1a8:	7a 09       	sbc	r23, r10
     1aa:	7a 09       	sbc	r23, r10
     1ac:	7a 09       	sbc	r23, r10
     1ae:	7a 09       	sbc	r23, r10
     1b0:	7a 09       	sbc	r23, r10
     1b2:	7a 09       	sbc	r23, r10
     1b4:	7a 09       	sbc	r23, r10
     1b6:	7a 09       	sbc	r23, r10
     1b8:	7a 09       	sbc	r23, r10
     1ba:	7a 09       	sbc	r23, r10
     1bc:	7a 09       	sbc	r23, r10
     1be:	7a 09       	sbc	r23, r10
     1c0:	7a 09       	sbc	r23, r10
     1c2:	7a 09       	sbc	r23, r10
     1c4:	7a 09       	sbc	r23, r10
     1c6:	7a 09       	sbc	r23, r10
     1c8:	7a 09       	sbc	r23, r10
     1ca:	7a 09       	sbc	r23, r10
     1cc:	7a 09       	sbc	r23, r10
     1ce:	7a 09       	sbc	r23, r10
     1d0:	7a 09       	sbc	r23, r10
     1d2:	7a 09       	sbc	r23, r10
     1d4:	7a 09       	sbc	r23, r10
     1d6:	7a 09       	sbc	r23, r10
     1d8:	7a 09       	sbc	r23, r10
     1da:	7a 09       	sbc	r23, r10
     1dc:	7a 09       	sbc	r23, r10
     1de:	7a 09       	sbc	r23, r10
     1e0:	7a 09       	sbc	r23, r10
     1e2:	7a 09       	sbc	r23, r10
     1e4:	7a 09       	sbc	r23, r10
     1e6:	7a 09       	sbc	r23, r10
     1e8:	7a 09       	sbc	r23, r10
     1ea:	7a 09       	sbc	r23, r10
     1ec:	7a 09       	sbc	r23, r10
     1ee:	7a 09       	sbc	r23, r10
     1f0:	7a 09       	sbc	r23, r10
     1f2:	7a 09       	sbc	r23, r10
     1f4:	7a 09       	sbc	r23, r10
     1f6:	7a 09       	sbc	r23, r10
     1f8:	7a 09       	sbc	r23, r10
     1fa:	7a 09       	sbc	r23, r10
     1fc:	7a 09       	sbc	r23, r10
     1fe:	7a 09       	sbc	r23, r10
     200:	7a 09       	sbc	r23, r10
     202:	7a 09       	sbc	r23, r10
     204:	7a 09       	sbc	r23, r10
     206:	7a 09       	sbc	r23, r10
     208:	7a 09       	sbc	r23, r10
     20a:	7a 09       	sbc	r23, r10
     20c:	7a 09       	sbc	r23, r10
     20e:	7a 09       	sbc	r23, r10
     210:	7a 09       	sbc	r23, r10
     212:	7a 09       	sbc	r23, r10
     214:	7a 09       	sbc	r23, r10
     216:	7a 09       	sbc	r23, r10
     218:	7a 09       	sbc	r23, r10
     21a:	7a 09       	sbc	r23, r10
     21c:	7a 09       	sbc	r23, r10
     21e:	7a 09       	sbc	r23, r10
     220:	7a 09       	sbc	r23, r10
     222:	7a 09       	sbc	r23, r10
     224:	7a 09       	sbc	r23, r10
     226:	7a 09       	sbc	r23, r10
     228:	7a 09       	sbc	r23, r10
     22a:	7a 09       	sbc	r23, r10
     22c:	7a 09       	sbc	r23, r10
     22e:	7a 09       	sbc	r23, r10
     230:	7a 09       	sbc	r23, r10
     232:	7a 09       	sbc	r23, r10
     234:	7a 09       	sbc	r23, r10
     236:	7a 09       	sbc	r23, r10
     238:	7a 09       	sbc	r23, r10
     23a:	7a 09       	sbc	r23, r10
     23c:	7a 09       	sbc	r23, r10
     23e:	7a 09       	sbc	r23, r10
     240:	7a 09       	sbc	r23, r10
     242:	7a 09       	sbc	r23, r10
     244:	6d 09       	sbc	r22, r13
     246:	79 09       	sbc	r23, r9
     248:	77 09       	sbc	r23, r7
     24a:	75 09       	sbc	r23, r5
     24c:	73 09       	sbc	r23, r3
     24e:	71 09       	sbc	r23, r1
     250:	6f 09       	sbc	r22, r15
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_5_menu>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	12 e0       	ldi	r17, 0x02	; 2
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ee       	ldi	r30, 0xE8	; 232
     3ea:	f4 e4       	ldi	r31, 0x44	; 68
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	aa 31       	cpi	r26, 0x1A	; 26
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	aa e1       	ldi	r26, 0x1A	; 26
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	ad 3b       	cpi	r26, 0xBD	; 189
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 31 02 	call	0x462	; 0x462 <main>
     40c:	0c 94 72 22 	jmp	0x44e4	; 0x44e4 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	85 e9       	ldi	r24, 0x95	; 149
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
	#endif
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     438:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     43a:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     43c:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     43e:	89 9a       	sbi	0x11, 1	; 17
     440:	08 95       	ret

00000442 <init_driver>:
void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     442:	62 e3       	ldi	r22, 0x32	; 50
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 03 18 	call	0x3006	; 0x3006 <timer0_init>
	init_display_drv();
     44a:	0e 94 ae 08 	call	0x115c	; 0x115c <init_display_drv>
	init_buttons();
     44e:	0e 94 c7 04 	call	0x98e	; 0x98e <init_buttons>
	init_system();
     452:	0e 94 d6 15 	call	0x2bac	; 0x2bac <init_system>
	init_measure();
     456:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     45a:	80 b7       	in	r24, 0x30	; 48
     45c:	8b 7f       	andi	r24, 0xFB	; 251
     45e:	80 bf       	out	0x30, r24	; 48
     460:	08 95       	ret

00000462 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 6d 12 	call	0x24da	; 0x24da <servo_init>
	#endif
	init_pin();
     468:	0e 94 1c 02 	call	0x438	; 0x438 <init_pin>
	sei();
     46c:	78 94       	sei
	init_driver();
     46e:	0e 94 21 02 	call	0x442	; 0x442 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     472:	8b e8       	ldi	r24, 0x8B	; 139
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     47e:	0e 94 ef 06 	call	0xdde	; 0xdde <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     482:	0e 94 bb 10 	call	0x2176	; 0x2176 <measure_get_servo_calibration>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     48a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <disp_process>
		animation();
     48e:	0e 94 06 0c 	call	0x180c	; 0x180c <animation>
		process_button();
     492:	0e 94 1d 04 	call	0x83a	; 0x83a <process_button>
		disp_fast_process();
     496:	0e 94 94 16 	call	0x2d28	; 0x2d28 <disp_fast_process>
		disp_very_fast_process();
     49a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <disp_very_fast_process>
		dcmotor_process(motor_value);
     49e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
     4a2:	0e 94 41 08 	call	0x1082	; 0x1082 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4a6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
     4aa:	0e 94 52 13 	call	0x26a4	; 0x26a4 <servo_process>
		menu_process();
     4ae:	0e 94 10 06 	call	0xc20	; 0xc20 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4b2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <error_event>
		error_led_blink();
     4b6:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <error_led_blink>
		measure_process();
     4ba:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <measure_process>
		accumulator_process();
     4be:	0e 94 82 02 	call	0x504	; 0x504 <accumulator_process>
		accum_led_process();
     4c2:	0e 94 cb 02 	call	0x596	; 0x596 <accum_led_process>
		buzzer_process();
     4c6:	0e 94 de 04 	call	0x9bc	; 0x9bc <buzzer_process>
     4ca:	df cf       	rjmp	.-66     	; 0x48a <main+0x28>

000004cc <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	0e 94 08 11 	call	0x2210	; 0x2210 <measure_get_filtered_value>
	#endif
    return voltage;
     4d2:	bc 01       	movw	r22, r24
     4d4:	66 0f       	add	r22, r22
     4d6:	77 1f       	adc	r23, r23
     4d8:	66 0f       	add	r22, r22
     4da:	77 1f       	adc	r23, r23
     4dc:	86 0f       	add	r24, r22
     4de:	97 1f       	adc	r25, r23
     4e0:	bc 01       	movw	r22, r24
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
     4ea:	26 e6       	ldi	r18, 0x66	; 102
     4ec:	36 e6       	ldi	r19, 0x66	; 102
     4ee:	46 eb       	ldi	r20, 0xB6	; 182
     4f0:	50 e4       	ldi	r21, 0x40	; 64
     4f2:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	5a e3       	ldi	r21, 0x3A	; 58
     4fe:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
}
     502:	08 95       	ret

00000504 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     504:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     508:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     50c:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     510:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     514:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <accumulator_timer.1920>
     518:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <accumulator_timer.1920+0x1>
     51c:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <accumulator_timer.1920+0x2>
     520:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <accumulator_timer.1920+0x3>
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	a6 07       	cpc	r26, r22
     52a:	b7 07       	cpc	r27, r23
     52c:	98 f5       	brcc	.+102    	; 0x594 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	0e 94 08 11 	call	0x2210	; 0x2210 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     534:	89 35       	cpi	r24, 0x59	; 89
     536:	22 e0       	ldi	r18, 0x02	; 2
     538:	92 07       	cpc	r25, r18
     53a:	18 f0       	brcs	.+6      	; 0x542 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     542:	8b 38       	cpi	r24, 0x8B	; 139
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	92 07       	cpc	r25, r18
     548:	18 f4       	brcc	.+6      	; 0x550 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     54a:	22 e0       	ldi	r18, 0x02	; 2
     54c:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     550:	8e 35       	cpi	r24, 0x5E	; 94
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	92 07       	cpc	r25, r18
     556:	18 f4       	brcc	.+6      	; 0x55e <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     558:	23 e0       	ldi	r18, 0x03	; 3
     55a:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     55e:	8c 58       	subi	r24, 0x8C	; 140
     560:	91 40       	sbci	r25, 0x01	; 1
     562:	8c 3c       	cpi	r24, 0xCC	; 204
     564:	91 05       	cpc	r25, r1
     566:	10 f4       	brcc	.+4      	; 0x56c <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     568:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     56c:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     570:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     574:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     578:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     57c:	8c 59       	subi	r24, 0x9C	; 156
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	af 4f       	sbci	r26, 0xFF	; 255
     582:	bf 4f       	sbci	r27, 0xFF	; 255
     584:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <accumulator_timer.1920>
     588:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <accumulator_timer.1920+0x1>
     58c:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <accumulator_timer.1920+0x2>
     590:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <accumulator_timer.1920+0x3>
     594:	08 95       	ret

00000596 <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     596:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     59a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     59e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     5a2:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     5a6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     5aa:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     5ae:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     5b2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     5b6:	84 17       	cp	r24, r20
     5b8:	95 07       	cpc	r25, r21
     5ba:	a6 07       	cpc	r26, r22
     5bc:	b7 07       	cpc	r27, r23
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <accum_led_process+0x2c>
     5c0:	86 c0       	rjmp	.+268    	; 0x6ce <accum_led_process+0x138>
	{
        switch (accumulator_state)
     5c2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <accumulator_state>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	e9 f0       	breq	.+58     	; 0x604 <accum_led_process+0x6e>
     5ca:	30 f0       	brcs	.+12     	; 0x5d8 <accum_led_process+0x42>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	99 f1       	breq	.+102    	; 0x636 <accum_led_process+0xa0>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <accum_led_process+0x40>
     5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <accum_led_process+0x10e>
     5d6:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     5d8:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     5da:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     5de:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     5e2:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     5e6:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     5ea:	88 53       	subi	r24, 0x38	; 56
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	af 4f       	sbci	r26, 0xFF	; 255
     5f0:	bf 4f       	sbci	r27, 0xFF	; 255
     5f2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     5f6:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     5fa:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     5fe:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
            break;
     602:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     604:	98 b3       	in	r25, 0x18	; 24
     606:	80 e2       	ldi	r24, 0x20	; 32
     608:	89 27       	eor	r24, r25
     60a:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     60c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     610:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     614:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     618:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     61c:	86 50       	subi	r24, 0x06	; 6
     61e:	9f 4f       	sbci	r25, 0xFF	; 255
     620:	af 4f       	sbci	r26, 0xFF	; 255
     622:	bf 4f       	sbci	r27, 0xFF	; 255
     624:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     628:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     62c:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     630:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
            break;
     634:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     636:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     63a:	81 11       	cpse	r24, r1
     63c:	19 c0       	rjmp	.+50     	; 0x670 <accum_led_process+0xda>
            {
                state_led = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
                LED_ACUM_ON;
     644:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     646:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     64a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     64e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     652:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     656:	8c 50       	subi	r24, 0x0C	; 12
     658:	9e 4f       	sbci	r25, 0xFE	; 254
     65a:	af 4f       	sbci	r26, 0xFF	; 255
     65c:	bf 4f       	sbci	r27, 0xFF	; 255
     65e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     662:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     666:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     66a:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     66e:	08 95       	ret
            }
            else if (state_led == 1)
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	69 f5       	brne	.+90     	; 0x6ce <accum_led_process+0x138>
            {
                state_led = 0;
     674:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
                LED_ACUM_OFF;
     678:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     67a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     67e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     682:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     686:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     68a:	84 52       	subi	r24, 0x24	; 36
     68c:	9a 4f       	sbci	r25, 0xFA	; 250
     68e:	af 4f       	sbci	r26, 0xFF	; 255
     690:	bf 4f       	sbci	r27, 0xFF	; 255
     692:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     696:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     69a:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     69e:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     6a2:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     6a4:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     6a6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <process_timer.1924>
     6aa:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <process_timer.1924+0x1>
     6ae:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <process_timer.1924+0x2>
     6b2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <process_timer.1924+0x3>
     6b6:	88 51       	subi	r24, 0x18	; 24
     6b8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ba:	af 4f       	sbci	r26, 0xFF	; 255
     6bc:	bf 4f       	sbci	r27, 0xFF	; 255
     6be:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <process_timer.1924>
     6c2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <process_timer.1924+0x1>
     6c6:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <process_timer.1924+0x2>
     6ca:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <process_timer.1924+0x3>
     6ce:	08 95       	ret

000006d0 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     6d0:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     6d2:	97 b1       	in	r25, 0x07	; 7
     6d4:	98 7f       	andi	r25, 0xF8	; 248
     6d6:	87 70       	andi	r24, 0x07	; 7
     6d8:	89 2b       	or	r24, r25
     6da:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     6dc:	37 9a       	sbi	0x06, 7	; 6
     6de:	08 95       	ret

000006e0 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     6e0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     6e2:	36 99       	sbic	0x06, 6	; 6
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     6e6:	84 b1       	in	r24, 0x04	; 4
     6e8:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     6ea:	08 95       	ret

000006ec <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     6ec:	0e 94 68 03 	call	0x6d0	; 0x6d0 <adc_setchannel>
	return adc_readsel();
     6f0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_readsel>
}
     6f4:	08 95       	ret

000006f6 <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     6f6:	dc 01       	movw	r26, r24
     6f8:	16 96       	adiw	r26, 0x06	; 6
     6fa:	ed 91       	ld	r30, X+
     6fc:	fc 91       	ld	r31, X
     6fe:	17 97       	sbiw	r26, 0x07	; 7
     700:	20 81       	ld	r18, Z
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	18 96       	adiw	r26, 0x08	; 8
     708:	0c 90       	ld	r0, X
     70a:	02 c0       	rjmp	.+4      	; 0x710 <read_button+0x1a>
     70c:	f5 95       	asr	r31
     70e:	e7 95       	ror	r30
     710:	0a 94       	dec	r0
     712:	e2 f7       	brpl	.-8      	; 0x70c <read_button+0x16>
     714:	cf 01       	movw	r24, r30
     716:	81 70       	andi	r24, 0x01	; 1
     718:	08 95       	ret

0000071a <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     71a:	e2 e4       	ldi	r30, 0x42	; 66
     71c:	f4 e0       	ldi	r31, 0x04	; 4
     71e:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     724:	14 86       	std	Z+12, r1	; 0x0c
     726:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     728:	12 86       	std	Z+10, r1	; 0x0a
     72a:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     72c:	16 86       	std	Z+14, r1	; 0x0e
     72e:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     730:	26 e3       	ldi	r18, 0x36	; 54
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	37 83       	std	Z+7, r19	; 0x07
     736:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     73c:	e5 e1       	ldi	r30, 0x15	; 21
     73e:	f4 e0       	ldi	r31, 0x04	; 4
     740:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     742:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     744:	14 86       	std	Z+12, r1	; 0x0c
     746:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     748:	12 86       	std	Z+10, r1	; 0x0a
     74a:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     74c:	16 86       	std	Z+14, r1	; 0x0e
     74e:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     750:	37 83       	std	Z+7, r19	; 0x07
     752:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     754:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     756:	e4 e2       	ldi	r30, 0x24	; 36
     758:	f4 e0       	ldi	r31, 0x04	; 4
     75a:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     75c:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     75e:	14 86       	std	Z+12, r1	; 0x0c
     760:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     762:	12 86       	std	Z+10, r1	; 0x0a
     764:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     766:	16 86       	std	Z+14, r1	; 0x0e
     768:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     76a:	37 83       	std	Z+7, r19	; 0x07
     76c:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     772:	e2 e0       	ldi	r30, 0x02	; 2
     774:	f4 e0       	ldi	r31, 0x04	; 4
     776:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     778:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     77a:	14 86       	std	Z+12, r1	; 0x0c
     77c:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     77e:	12 86       	std	Z+10, r1	; 0x0a
     780:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     782:	16 86       	std	Z+14, r1	; 0x0e
     784:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     786:	40 e3       	ldi	r20, 0x30	; 48
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	57 83       	std	Z+7, r21	; 0x07
     78c:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     792:	e3 ef       	ldi	r30, 0xF3	; 243
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     798:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     79a:	14 86       	std	Z+12, r1	; 0x0c
     79c:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     79e:	12 86       	std	Z+10, r1	; 0x0a
     7a0:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     7a2:	16 86       	std	Z+14, r1	; 0x0e
     7a4:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     7a6:	37 83       	std	Z+7, r19	; 0x07
     7a8:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     7aa:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     7ac:	e3 e3       	ldi	r30, 0x33	; 51
     7ae:	f4 e0       	ldi	r31, 0x04	; 4
     7b0:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     7b2:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     7b4:	14 86       	std	Z+12, r1	; 0x0c
     7b6:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     7b8:	12 86       	std	Z+10, r1	; 0x0a
     7ba:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     7bc:	16 86       	std	Z+14, r1	; 0x0e
     7be:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     7c0:	69 e3       	ldi	r22, 0x39	; 57
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	77 83       	std	Z+7, r23	; 0x07
     7c6:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     7c8:	a4 e0       	ldi	r26, 0x04	; 4
     7ca:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     7cc:	e1 e5       	ldi	r30, 0x51	; 81
     7ce:	f4 e0       	ldi	r31, 0x04	; 4
     7d0:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     7d2:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     7d4:	14 86       	std	Z+12, r1	; 0x0c
     7d6:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     7d8:	12 86       	std	Z+10, r1	; 0x0a
     7da:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     7dc:	16 86       	std	Z+14, r1	; 0x0e
     7de:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     7e0:	43 e3       	ldi	r20, 0x33	; 51
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	57 83       	std	Z+7, r21	; 0x07
     7e6:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     7e8:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     7ea:	e0 e6       	ldi	r30, 0x60	; 96
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     7f0:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     7f2:	14 86       	std	Z+12, r1	; 0x0c
     7f4:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     7f6:	12 86       	std	Z+10, r1	; 0x0a
     7f8:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     7fa:	16 86       	std	Z+14, r1	; 0x0e
     7fc:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     7fe:	37 83       	std	Z+7, r19	; 0x07
     800:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     802:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     804:	e5 ed       	ldi	r30, 0xD5	; 213
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     80a:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     80c:	14 86       	std	Z+12, r1	; 0x0c
     80e:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     810:	12 86       	std	Z+10, r1	; 0x0a
     812:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     814:	16 86       	std	Z+14, r1	; 0x0e
     816:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     818:	77 83       	std	Z+7, r23	; 0x07
     81a:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     81c:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     81e:	e4 ee       	ldi	r30, 0xE4	; 228
     820:	f3 e0       	ldi	r31, 0x03	; 3
     822:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     824:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     826:	14 86       	std	Z+12, r1	; 0x0c
     828:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     82a:	12 86       	std	Z+10, r1	; 0x0a
     82c:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     82e:	16 86       	std	Z+14, r1	; 0x0e
     830:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     832:	57 83       	std	Z+7, r21	; 0x07
     834:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	08 95       	ret

0000083a <process_button>:
}

void process_button(void)
{
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     848:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     84c:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     850:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     854:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     858:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <timer_button>
     85c:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <timer_button+0x1>
     860:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <timer_button+0x2>
     864:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <timer_button+0x3>
     868:	84 17       	cp	r24, r20
     86a:	95 07       	cpc	r25, r21
     86c:	a6 07       	cpc	r26, r22
     86e:	b7 07       	cpc	r27, r23
     870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
     872:	85 c0       	rjmp	.+266    	; 0x97e <__stack+0x11f>
	{
		timer_button = mktime.ms + 20;
     874:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     878:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     87c:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     880:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     884:	44 96       	adiw	r24, 0x14	; 20
     886:	a1 1d       	adc	r26, r1
     888:	b1 1d       	adc	r27, r1
     88a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <timer_button>
     88e:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <timer_button+0x1>
     892:	a0 93 13 04 	sts	0x0413, r26	; 0x800413 <timer_button+0x2>
     896:	b0 93 14 04 	sts	0x0414, r27	; 0x800414 <timer_button+0x3>
     89a:	c0 e6       	ldi	r28, 0x60	; 96
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	0f 2e       	mov	r0, r31
     8a0:	f4 e7       	ldi	r31, 0x74	; 116
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
     8ae:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     8b0:	88 81       	ld	r24, Y
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
			if(red_val != but_tab[i]->value)
     8b8:	e8 81       	ld	r30, Y
     8ba:	f9 81       	ldd	r31, Y+1	; 0x01
     8bc:	95 81       	ldd	r25, Z+5	; 0x05
     8be:	89 17       	cp	r24, r25
     8c0:	e1 f0       	breq	.+56     	; 0x8fa <__stack+0x9b>
			{
				but_tab[i]->value = red_val;
     8c2:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <__stack+0x81>
     8c8:	88 81       	ld	r24, Y
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	dc 01       	movw	r26, r24
     8ce:	19 96       	adiw	r26, 0x09	; 9
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	1a 97       	sbiw	r26, 0x0a	; 10
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__stack+0x7d>
     8da:	41 c0       	rjmp	.+130    	; 0x95e <__stack+0xff>
				but_tab[i]->rise_callback(but_tab[i]);
     8dc:	09 95       	icall
     8de:	3f c0       	rjmp	.+126    	; 0x95e <__stack+0xff>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     8e0:	81 11       	cpse	r24, r1
     8e2:	3d c0       	rjmp	.+122    	; 0x95e <__stack+0xff>
     8e4:	88 81       	ld	r24, Y
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	dc 01       	movw	r26, r24
     8ea:	1b 96       	adiw	r26, 0x0b	; 11
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	1c 97       	sbiw	r26, 0x0c	; 12
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	21 f0       	breq	.+8      	; 0x8fe <__stack+0x9f>
				but_tab[i]->fall_callback(but_tab[i]);
     8f6:	09 95       	icall
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
			}
			//timer
			if (red_val == 0)
     8fa:	81 11       	cpse	r24, r1
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__stack+0xff>
			{
				but_tab[i]->tim_cnt++;
     8fe:	d8 01       	movw	r26, r16
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	a2 81       	ldd	r26, Z+2	; 0x02
     90a:	b3 81       	ldd	r27, Z+3	; 0x03
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	a1 1d       	adc	r26, r1
     910:	b1 1d       	adc	r27, r1
     912:	80 83       	st	Z, r24
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	a2 83       	std	Z+2, r26	; 0x02
     918:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     91a:	d8 01       	movw	r26, r16
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	a2 81       	ldd	r26, Z+2	; 0x02
     926:	b3 81       	ldd	r27, Z+3	; 0x03
     928:	88 97       	sbiw	r24, 0x28	; 40
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	10 f1       	brcs	.+68     	; 0x974 <__stack+0x115>
     930:	84 81       	ldd	r24, Z+4	; 0x04
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	f9 f0       	breq	.+62     	; 0x974 <__stack+0x115>
				{
					if (but_tab[i]->timer_callback != 0)
     936:	05 84       	ldd	r0, Z+13	; 0x0d
     938:	f6 85       	ldd	r31, Z+14	; 0x0e
     93a:	e0 2d       	mov	r30, r0
     93c:	30 97       	sbiw	r30, 0x00	; 0
     93e:	19 f0       	breq	.+6      	; 0x946 <__stack+0xe7>
					but_tab[i]->timer_callback(&button1);
     940:	82 e4       	ldi	r24, 0x42	; 66
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     946:	d8 01       	movw	r26, r16
     948:	ed 91       	ld	r30, X+
     94a:	fc 91       	ld	r31, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	10 82       	st	Z, r1
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	12 82       	std	Z+2, r1	; 0x02
     954:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	d4 82       	std	Z+4, r13	; 0x04
     95c:	0b c0       	rjmp	.+22     	; 0x974 <__stack+0x115>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     95e:	d8 01       	movw	r26, r16
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	10 82       	st	Z, r1
     968:	11 82       	std	Z+1, r1	; 0x01
     96a:	12 82       	std	Z+2, r1	; 0x02
     96c:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	14 82       	std	Z+4, r1	; 0x04
     974:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     976:	ce 15       	cp	r28, r14
     978:	df 05       	cpc	r29, r15
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x11f>
     97c:	98 cf       	rjmp	.-208    	; 0x8ae <__stack+0x4f>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	08 95       	ret

0000098e <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     98e:	0e 94 8d 03 	call	0x71a	; 0x71a <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     992:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     994:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     996:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     998:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     99a:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     99c:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     99e:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     9a0:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     9a2:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     9a4:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     9a6:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     9a8:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     9aa:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     9ac:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     9ae:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     9b0:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     9b2:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     9b4:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     9b6:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     9b8:	a8 9a       	sbi	0x15, 0	; 21
     9ba:	08 95       	ret

000009bc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9bc:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     9c0:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     9c4:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     9c8:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     9cc:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     9d0:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     9d4:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     9d8:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     9dc:	84 17       	cp	r24, r20
     9de:	95 07       	cpc	r25, r21
     9e0:	a6 07       	cpc	r26, r22
     9e2:	b7 07       	cpc	r27, r23
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <buzzer_process+0x2c>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <buzzer_process+0xea>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER))
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <buzzer_process+0x38>
     9f2:	59 c0       	rjmp	.+178    	; 0xaa6 <buzzer_process+0xea>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9f4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     9f8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     9fc:	95 ff       	sbrs	r25, 5
     9fe:	37 c0       	rjmp	.+110    	; 0xa6e <buzzer_process+0xb2>
     a00:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <buzzer_state>
     a04:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <buzzer_state+0x1>
     a08:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <buzzer_state+0x2>
     a0c:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <buzzer_state+0x3>
     a10:	89 2b       	or	r24, r25
     a12:	8a 2b       	or	r24, r26
     a14:	8b 2b       	or	r24, r27
     a16:	59 f5       	brne	.+86     	; 0xa6e <buzzer_process+0xb2>
			{
				ON_BUZZER;
     a18:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a1a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
     a1e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
     a22:	9f 7d       	andi	r25, 0xDF	; 223
     a24:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
     a28:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				buzzer_state = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_state>
     a38:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_state+0x1>
     a3c:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <buzzer_state+0x2>
     a40:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 100;
     a44:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     a48:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     a4c:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     a50:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     a54:	8c 59       	subi	r24, 0x9C	; 156
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	af 4f       	sbci	r26, 0xFF	; 255
     a5a:	bf 4f       	sbci	r27, 0xFF	; 255
     a5c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     a60:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     a64:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     a68:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     a6c:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a6e:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a70:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <buzzer_state>
     a74:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <buzzer_state+0x1>
     a78:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <buzzer_state+0x2>
     a7c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <buzzer_state+0x3>
				buzzer_timer += 50;
     a80:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <buzzer_timer>
     a84:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <buzzer_timer+0x1>
     a88:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <buzzer_timer+0x2>
     a8c:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <buzzer_timer+0x3>
     a90:	c2 96       	adiw	r24, 0x32	; 50
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <buzzer_timer>
     a9a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <buzzer_timer+0x1>
     a9e:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <buzzer_timer+0x2>
     aa2:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <buzzer_timer+0x3>
     aa6:	08 95       	ret

00000aa8 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     aa8:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     aaa:	c0 98       	cbi	0x18, 0	; 24
     aac:	08 95       	ret

00000aae <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     aae:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     ab2:	88 23       	and	r24, r24
     ab4:	19 f0       	breq	.+6      	; 0xabc <button_1_menu+0xe>
		configured_parameter--;
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
     abc:	08 95       	ret

00000abe <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     abe:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     ac2:	89 30       	cpi	r24, 0x09	; 9
     ac4:	18 f4       	brcc	.+6      	; 0xacc <button_2_menu+0xe>
		configured_parameter++;
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
     acc:	08 95       	ret

00000ace <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     ace:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	eb 58       	subi	r30, 0x8B	; 139
     ad8:	fb 4f       	sbci	r31, 0xFB	; 251
     ada:	20 81       	ld	r18, Z
     adc:	22 23       	and	r18, r18
     ade:	29 f0       	breq	.+10     	; 0xaea <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     ae0:	fc 01       	movw	r30, r24
     ae2:	eb 58       	subi	r30, 0x8B	; 139
     ae4:	fb 4f       	sbci	r31, 0xFB	; 251
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	20 83       	st	Z, r18
     aea:	08 95       	ret

00000aec <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     aec:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	eb 58       	subi	r30, 0x8B	; 139
     af6:	fb 4f       	sbci	r31, 0xFB	; 251
     af8:	20 81       	ld	r18, Z
     afa:	fc 01       	movw	r30, r24
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ec 58       	subi	r30, 0x8C	; 140
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	30 81       	ld	r19, Z
     b06:	23 17       	cp	r18, r19
     b08:	28 f4       	brcc	.+10     	; 0xb14 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b0a:	fc 01       	movw	r30, r24
     b0c:	eb 58       	subi	r30, 0x8B	; 139
     b0e:	fb 4f       	sbci	r31, 0xFB	; 251
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	20 83       	st	Z, r18
     b14:	08 95       	ret

00000b16 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     b16:	a5 e7       	ldi	r26, 0x75	; 117
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e5 e7       	ldi	r30, 0x75	; 117
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	2f e7       	ldi	r18, 0x7F	; 127
     b20:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     b22:	8c 91       	ld	r24, X
     b24:	81 93       	st	Z+, r24
     b26:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     b28:	e2 17       	cp	r30, r18
     b2a:	f3 07       	cpc	r31, r19
     b2c:	d1 f7       	brne	.-12     	; 0xb22 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     b2e:	08 95       	ret

00000b30 <enter_to_menu>:
	return 0;
}

static void enter_to_menu(menuState_t state)
{
	dark_menu_state = state;
     b30:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     b34:	87 e5       	ldi	r24, 0x57	; 87
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <button1+0xc>
     b3c:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <button1+0xb>
	button2.fall_callback = button_2_menu;
     b40:	8f e5       	ldi	r24, 0x5F	; 95
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <button2+0xc>
     b48:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <button2+0xb>
	button3.fall_callback = button_3_menu;
     b4c:	83 ec       	ldi	r24, 0xC3	; 195
     b4e:	95 e0       	ldi	r25, 0x05	; 5
     b50:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
     b54:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
	button5.fall_callback = button_5_menu;
     b58:	87 e6       	ldi	r24, 0x67	; 103
     b5a:	95 e0       	ldi	r25, 0x05	; 5
     b5c:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <button5+0xc>
     b60:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <button5+0xb>
	button6.fall_callback = button_6_menu;
     b64:	86 e7       	ldi	r24, 0x76	; 118
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <button6+0xc>
     b6c:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <button6+0xb>
	button7.fall_callback = button_7_menu;
     b70:	8b e8       	ldi	r24, 0x8B	; 139
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
     b78:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
     b84:	08 95       	ret

00000b86 <button_3_menu>:

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b86:	65 e7       	ldi	r22, 0x75	; 117
     b88:	74 e0       	ldi	r23, 0x04	; 4
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     b96:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
	LED_MOTOR_OFF;
     b9a:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     b9c:	96 98       	cbi	0x12, 6	; 18
     b9e:	08 95       	ret

00000ba0 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     ba0:	cf 93       	push	r28
	pass[pass_len++] = number;
     ba2:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <pass_len>
     ba6:	c1 e0       	ldi	r28, 0x01	; 1
     ba8:	ce 0f       	add	r28, r30
     baa:	c0 93 80 04 	sts	0x0480, r28	; 0x800480 <pass_len>
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e1 59       	subi	r30, 0x91	; 145
     bb2:	fb 4f       	sbci	r31, 0xFB	; 251
     bb4:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     bb6:	4c 2f       	mov	r20, r28
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	67 ec       	ldi	r22, 0xC7	; 199
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	8f e6       	ldi	r24, 0x6F	; 111
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	0e 94 a4 21 	call	0x4348	; 0x4348 <memcmp>
     bc6:	89 2b       	or	r24, r25
     bc8:	51 f0       	breq	.+20     	; 0xbde <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     bca:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pass_len>
	memset(pass, 0, sizeof(pass));
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	ef e6       	ldi	r30, 0x6F	; 111
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	df 01       	movw	r26, r30
     bd6:	1d 92       	st	X+, r1
     bd8:	8a 95       	dec	r24
     bda:	e9 f7       	brne	.-6      	; 0xbd6 <pass_add_number+0x36>
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <pass_add_number+0x48>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     bde:	c6 30       	cpi	r28, 0x06	; 6
     be0:	19 f4       	brne	.+6      	; 0xbe8 <pass_add_number+0x48>
		//debug_msg("enter_to_menu\n");
		enter_to_menu(MENU_PARAMETERS);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	0e 94 98 05 	call	0xb30	; 0xb30 <enter_to_menu>
	}
}
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     bf2:	08 95       	ret

00000bf4 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     bfa:	08 95       	ret

00000bfc <button_5_number>:
	pass_add_number(2);
}

static void button_5_number(void *pv)
{
	pass_add_number(3);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c02:	08 95       	ret

00000c04 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c0a:	08 95       	ret

00000c0c <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c12:	08 95       	ret

00000c14 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 d0 05 	call	0xba0	; 0xba0 <pass_add_number>
     c1a:	08 95       	ret

00000c1c <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	08 95       	ret

00000c20 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state > MENU_PASSWORD)
     c20:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     c24:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     c28:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     c2c:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     c30:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <menu_timer.2286>
     c34:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <menu_timer.2286+0x1>
     c38:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <menu_timer.2286+0x2>
     c3c:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <menu_timer.2286+0x3>
     c40:	84 17       	cp	r24, r20
     c42:	95 07       	cpc	r25, r21
     c44:	a6 07       	cpc	r26, r22
     c46:	b7 07       	cpc	r27, r23
     c48:	08 f0       	brcs	.+2      	; 0xc4c <menu_process+0x2c>
     c4a:	90 c0       	rjmp	.+288    	; 0xd6c <menu_process+0x14c>
     c4c:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <dark_menu_state>
     c50:	88 23       	and	r24, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <menu_process+0x36>
     c54:	8b c0       	rjmp	.+278    	; 0xd6c <menu_process+0x14c>
	{
		menu_timer = mktime.ms + 250;
     c56:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
     c5a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
     c5e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
     c62:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
     c66:	46 50       	subi	r20, 0x06	; 6
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	6f 4f       	sbci	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <menu_timer.2286>
     c72:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <menu_timer.2286+0x1>
     c76:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <menu_timer.2286+0x2>
     c7a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <menu_timer.2286+0x3>
		if (dark_menu_state == MENU_SERVO)
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	39 f4       	brne	.+14     	; 0xc90 <menu_process+0x70>
		{
			if (configured_parameter < MENU_CLOSE_SERVO_REGULATION)
				configured_parameter = MENU_CLOSE_SERVO_REGULATION;
			if (configured_parameter > MENU_OPEN_SERVO_REGULATION)
     c82:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	18 f0       	brcs	.+6      	; 0xc90 <menu_process+0x70>
				configured_parameter = MENU_OPEN_SERVO_REGULATION;	
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <configured_parameter>
		}
		if (segment1.state == SEG_MENU)
     c90:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     c94:	87 30       	cpi	r24, 0x07	; 7
     c96:	31 f4       	brne	.+12     	; 0xca4 <menu_process+0x84>
			disp_set_number(&segment1, configured_parameter);
     c98:	60 91 7f 04 	lds	r22, 0x047F	; 0x80047f <configured_parameter>
     c9c:	81 e9       	ldi	r24, 0x91	; 145
     c9e:	94 e0       	ldi	r25, 0x04	; 4
     ca0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
		if (segment2.state == SEG_MENU)
     ca4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     ca8:	87 30       	cpi	r24, 0x07	; 7
     caa:	51 f4       	brne	.+20     	; 0xcc0 <menu_process+0xa0>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     cac:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <configured_parameter>
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	eb 58       	subi	r30, 0x8B	; 139
     cb4:	fb 4f       	sbci	r31, 0xFB	; 251
     cb6:	60 81       	ld	r22, Z
     cb8:	8c e8       	ldi	r24, 0x8C	; 140
     cba:	94 e0       	ldi	r25, 0x04	; 4
     cbc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     cc0:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	49 f5       	brne	.+82     	; 0xd1a <menu_process+0xfa>
     cc8:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     ccc:	88 30       	cpi	r24, 0x08	; 8
     cce:	29 f5       	brne	.+74     	; 0xd1a <menu_process+0xfa>
		{
			menu_timer = 1000 + mktime.ms;
     cd0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
     cd4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
     cd8:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
     cdc:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
     ce0:	88 51       	subi	r24, 0x18	; 24
     ce2:	9c 4f       	sbci	r25, 0xFC	; 252
     ce4:	af 4f       	sbci	r26, 0xFF	; 255
     ce6:	bf 4f       	sbci	r27, 0xFF	; 255
     ce8:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <menu_timer.2286>
     cec:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <menu_timer.2286+0x1>
     cf0:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <menu_timer.2286+0x2>
     cf4:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <menu_timer.2286+0x3>
			DispD2.value = 's';
     cf8:	83 e7       	ldi	r24, 0x73	; 115
     cfa:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'a';
     cfe:	81 e6       	ldi	r24, 0x61	; 97
     d00:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
     d04:	80 e7       	ldi	r24, 0x70	; 112
     d06:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			DispD4.value = 0;
     d0a:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d0e:	8a e0       	ldi	r24, 0x0A	; 10
     d10:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d14:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
			
			return;
     d18:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d1a:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
     d1e:	8a 30       	cpi	r24, 0x0A	; 10
     d20:	51 f4       	brne	.+20     	; 0xd36 <menu_process+0x116>
     d22:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
     d26:	8a 30       	cpi	r24, 0x0A	; 10
     d28:	31 f4       	brne	.+12     	; 0xd36 <menu_process+0x116>
		{
			segment1.state = SEG_OFF;
     d2a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <segment1+0x4>
			segment2.state = SEG_OFF;
     d2e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <segment2+0x4>
			dark_menu_state = MENU_PASSWORD;
     d32:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     d36:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     d3a:	81 11       	cpse	r24, r1
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <menu_process+0x122>
		{
			servo_regulation(0);
     d3e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     d42:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	19 f4       	brne	.+6      	; 0xd50 <menu_process+0x130>
		{
			servo_regulation(99);
     d4a:	83 e6       	ldi	r24, 0x63	; 99
     d4c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MINIMUM_REGULATION) {
     d50:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     d54:	88 30       	cpi	r24, 0x08	; 8
     d56:	19 f4       	brne	.+6      	; 0xd5e <menu_process+0x13e>
			motor_regulation(10);
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	0e 94 3b 08 	call	0x1076	; 0x1076 <motor_regulation>
		}
		if (configured_parameter == MENU_MOTOR_MAXIMUM_REGULATION) {
     d5e:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <configured_parameter>
     d62:	89 30       	cpi	r24, 0x09	; 9
     d64:	19 f4       	brne	.+6      	; 0xd6c <menu_process+0x14c>
			motor_regulation(99);
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	0e 94 3b 08 	call	0x1076	; 0x1076 <motor_regulation>
     d6c:	08 95       	ret

00000d6e <check_servo_config_menu>:
	enter_to_menu(MENU_SERVO);
	debug_msg("enter_to_menu_servo\n");
}

void check_servo_config_menu(void)
{
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
	timer_t menu_timer = mktime.ms + 20;
     d7a:	c0 90 b9 04 	lds	r12, 0x04B9	; 0x8004b9 <mktime+0x2>
     d7e:	d0 90 ba 04 	lds	r13, 0x04BA	; 0x8004ba <mktime+0x3>
     d82:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <mktime+0x4>
     d86:	f0 90 bc 04 	lds	r15, 0x04BC	; 0x8004bc <mktime+0x5>
     d8a:	84 e1       	ldi	r24, 0x14	; 20
     d8c:	c8 0e       	add	r12, r24
     d8e:	d1 1c       	adc	r13, r1
     d90:	e1 1c       	adc	r14, r1
     d92:	f1 1c       	adc	r15, r1
	while (menu_timer > mktime.ms)
     d94:	c7 eb       	ldi	r28, 0xB7	; 183
     d96:	d4 e0       	ldi	r29, 0x04	; 4
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <check_servo_config_menu+0x50>
	{
		if (read_button(&button1) == 0) {
     d9a:	82 e4       	ldi	r24, 0x42	; 66
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <read_button>
     da2:	81 11       	cpse	r24, r1
     da4:	0c c0       	rjmp	.+24     	; 0xdbe <check_servo_config_menu+0x50>
	}
}

static void enter_servo_config(void *pv)
{
	enter_to_menu(MENU_SERVO);
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 98 05 	call	0xb30	; 0xb30 <enter_to_menu>
	debug_msg("enter_to_menu_servo\n");
     dac:	82 eb       	ldi	r24, 0xB2	; 178
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <check_servo_config_menu+0x62>
}

void check_servo_config_menu(void)
{
	timer_t menu_timer = mktime.ms + 20;
	while (menu_timer > mktime.ms)
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	ac 81       	ldd	r26, Y+4	; 0x04
     dc4:	bd 81       	ldd	r27, Y+5	; 0x05
     dc6:	8c 15       	cp	r24, r12
     dc8:	9d 05       	cpc	r25, r13
     dca:	ae 05       	cpc	r26, r14
     dcc:	bf 05       	cpc	r27, r15
     dce:	28 f3       	brcs	.-54     	; 0xd9a <check_servo_config_menu+0x2c>
		if (read_button(&button1) == 0) {
			enter_servo_config(NULL);
			break;
		}
	}
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <init_menu>:
void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <button1+0xc>
     de6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <button1+0xb>
	button2.fall_callback = button_2_number;
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <button2+0xc>
     df2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <button2+0xb>
	button3.fall_callback = button_3_number;
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
     dfe:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
	button5.fall_callback = button_5_number;
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	95 e0       	ldi	r25, 0x05	; 5
     e06:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <button5+0xc>
     e0a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <button5+0xb>
	button6.fall_callback = button_6_number;
     e0e:	8a ef       	ldi	r24, 0xFA	; 250
     e10:	95 e0       	ldi	r25, 0x05	; 5
     e12:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <button6+0xc>
     e16:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <button6+0xb>
	button7.fall_callback = button_7_number;
     e1a:	86 ef       	ldi	r24, 0xF6	; 246
     e1c:	95 e0       	ldi	r25, 0x05	; 5
     e1e:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
     e22:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e26:	65 e7       	ldi	r22, 0x75	; 117
     e28:	74 e0       	ldi	r23, 0x04	; 4
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	0e 94 a5 11 	call	0x234a	; 0x234a <mem_read_data>
     e30:	a5 e7       	ldi	r26, 0x75	; 117
     e32:	b4 e0       	ldi	r27, 0x04	; 4
     e34:	e4 e7       	ldi	r30, 0x74	; 116
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	48 e8       	ldi	r20, 0x88	; 136
     e3a:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e3c:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e3e:	9c 91       	ld	r25, X
     e40:	80 81       	ld	r24, Z
     e42:	89 17       	cp	r24, r25
     e44:	18 f4       	brcc	.+6      	; 0xe4c <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	8c 93       	st	X, r24
			check_error++;
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e50:	e4 17       	cp	r30, r20
     e52:	f5 07       	cpc	r31, r21
     e54:	a1 f7       	brne	.-24     	; 0xe3e <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e56:	22 23       	and	r18, r18
     e58:	29 f0       	breq	.+10     	; 0xe64 <init_menu+0x86>

static void enter_to_menu(menuState_t state);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e5a:	65 e7       	ldi	r22, 0x75	; 117
     e5c:	74 e0       	ldi	r23, 0x04	; 4
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	0e 94 5d 11 	call	0x22ba	; 0x22ba <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e64:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <pass_len>
	memset(pass, 0, sizeof(pass));
     e68:	86 e0       	ldi	r24, 0x06	; 6
     e6a:	ef e6       	ldi	r30, 0x6F	; 111
     e6c:	f4 e0       	ldi	r31, 0x04	; 4
     e6e:	df 01       	movw	r26, r30
     e70:	1d 92       	st	X+, r1
     e72:	8a 95       	dec	r24
     e74:	e9 f7       	brne	.-6      	; 0xe70 <init_menu+0x92>
	button6.fall_callback = button_6_number;
	button7.fall_callback = button_7_number;
	read_menu_parametrs();
	check_menu_parameters();
	clear_password();
	check_servo_config_menu();
     e76:	0e 94 b7 06 	call	0xd6e	; 0xd6e <check_servo_config_menu>
     e7a:	08 95       	ret

00000e7c <dark_menu_get_value>:
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e7c:	8a 30       	cpi	r24, 0x0A	; 10
     e7e:	30 f4       	brcc	.+12     	; 0xe8c <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e80:	e8 2f       	mov	r30, r24
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	eb 58       	subi	r30, 0x8B	; 139
     e86:	fb 4f       	sbci	r31, 0xFB	; 251
     e88:	80 81       	ld	r24, Z
     e8a:	08 95       	ret
	}
	return 0;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
}
     e8e:	08 95       	ret

00000e90 <count_pwm>:
	}
	else
	{
		return 0;
	}
}
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	8c 01       	movw	r16, r24
     ea2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <power_supply_type>
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	d1 f5       	brne	.+116    	; 0xf1e <count_pwm+0x8e>
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     eb0:	d8 2f       	mov	r29, r24
     eb2:	89 e0       	ldi	r24, 0x09	; 9
     eb4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     eb8:	c8 2f       	mov	r28, r24
     eba:	88 e0       	ldi	r24, 0x08	; 8
     ebc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     ec0:	2c 2f       	mov	r18, r28
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	24 56       	subi	r18, 0x64	; 100
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	28 1b       	sub	r18, r24
     eca:	31 09       	sbc	r19, r1
     ecc:	20 9f       	mul	r18, r16
     ece:	c0 01       	movw	r24, r0
     ed0:	21 9f       	mul	r18, r17
     ed2:	90 0d       	add	r25, r0
     ed4:	30 9f       	mul	r19, r16
     ed6:	90 0d       	add	r25, r0
     ed8:	11 24       	eor	r1, r1
     eda:	63 e6       	ldi	r22, 0x63	; 99
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0e 94 4d 20 	call	0x409a	; 0x409a <__divmodhi4>
     ee2:	07 2e       	mov	r0, r23
     ee4:	00 0c       	add	r0, r0
     ee6:	88 0b       	sbc	r24, r24
     ee8:	99 0b       	sbc	r25, r25
     eea:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
     eee:	2a e9       	ldi	r18, 0x9A	; 154
     ef0:	39 e9       	ldi	r19, 0x99	; 153
     ef2:	49 ed       	ldi	r20, 0xD9	; 217
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
     efe:	6d 2f       	mov	r22, r29
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	c7 01       	movw	r24, r14
     f10:	b6 01       	movw	r22, r12
     f12:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
     f16:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__fixunssfsi>
     f1a:	86 2f       	mov	r24, r22
     f1c:	1e c0       	rjmp	.+60     	; 0xf5a <count_pwm+0xca>
     f1e:	88 e0       	ldi	r24, 0x08	; 8
     f20:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     f24:	d8 2f       	mov	r29, r24
     f26:	89 e0       	ldi	r24, 0x09	; 9
     f28:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     f2c:	c8 2f       	mov	r28, r24
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
     f34:	2c 2f       	mov	r18, r28
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	24 56       	subi	r18, 0x64	; 100
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	28 1b       	sub	r18, r24
     f3e:	31 09       	sbc	r19, r1
     f40:	20 9f       	mul	r18, r16
     f42:	c0 01       	movw	r24, r0
     f44:	21 9f       	mul	r18, r17
     f46:	90 0d       	add	r25, r0
     f48:	30 9f       	mul	r19, r16
     f4a:	90 0d       	add	r25, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	63 e6       	ldi	r22, 0x63	; 99
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 4d 20 	call	0x409a	; 0x409a <__divmodhi4>
     f56:	8d 2f       	mov	r24, r29
     f58:	86 0f       	add	r24, r22
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	08 95       	ret

00000f6c <dcmotorpwm_init>:
     f6c:	8d ec       	ldi	r24, 0xCD	; 205
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f78:	86 e8       	ldi	r24, 0x86	; 134
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	0e 94 2f 18 	call	0x305e	; 0x305e <evTime_init>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
     f86:	94 98       	cbi	0x12, 4	; 18
     f88:	15 bc       	out	0x25, r1	; 37
     f8a:	8f 9a       	sbi	0x11, 7	; 17
     f8c:	97 9a       	sbi	0x12, 7	; 18
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	08 95       	ret

00000f94 <dcmotorpwm_deinit>:
     f94:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <motorD>
     f98:	15 bc       	out	0x25, r1	; 37
     f9a:	97 9a       	sbi	0x12, 7	; 18
     f9c:	94 98       	cbi	0x12, 4	; 18
     f9e:	08 95       	ret

00000fa0 <dcmotor_is_on>:
     fa0:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <motorD>
     fa4:	92 50       	subi	r25, 0x02	; 2
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	93 30       	cpi	r25, 0x03	; 3
     fac:	10 f0       	brcs	.+4      	; 0xfb2 <dcmotor_is_on+0x12>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	c9 01       	movw	r24, r18
     fb4:	08 95       	ret

00000fb6 <dcmotorpwm_stop>:
     fb6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_is_on>
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	99 f0       	breq	.+38     	; 0xfe4 <dcmotorpwm_stop+0x2e>
     fbe:	8b ed       	ldi	r24, 0xDB	; 219
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9f 93       	push	r25
     fc4:	8f 93       	push	r24
     fc6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     fca:	15 bc       	out	0x25, r1	; 37
     fcc:	97 9a       	sbi	0x12, 7	; 18
     fce:	94 98       	cbi	0x12, 4	; 18
     fd0:	e2 e8       	ldi	r30, 0x82	; 130
     fd2:	f4 e0       	ldi	r31, 0x04	; 4
     fd4:	80 81       	ld	r24, Z
     fd6:	81 83       	std	Z+1, r24	; 0x01
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 83       	st	Z, r24
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	08 95       	ret

00000fe6 <dcmotorpwm_start>:
     fe6:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <motorD>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	d9 f4       	brne	.+54     	; 0x1024 <dcmotorpwm_start+0x3e>
     fee:	94 9a       	sbi	0x12, 4	; 18
     ff0:	85 b5       	in	r24, 0x25	; 37
     ff2:	80 63       	ori	r24, 0x30	; 48
     ff4:	85 bd       	out	0x25, r24	; 37
     ff6:	85 b5       	in	r24, 0x25	; 37
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	85 bd       	out	0x25, r24	; 37
     ffc:	85 b5       	in	r24, 0x25	; 37
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	85 bd       	out	0x25, r24	; 37
    1002:	e2 e8       	ldi	r30, 0x82	; 130
    1004:	f4 e0       	ldi	r31, 0x04	; 4
    1006:	80 81       	ld	r24, Z
    1008:	81 83       	std	Z+1, r24	; 0x01
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	80 83       	st	Z, r24
    100e:	48 ee       	ldi	r20, 0xE8	; 232
    1010:	53 e0       	ldi	r21, 0x03	; 3
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	86 e8       	ldi	r24, 0x86	; 134
    1018:	94 e0       	ldi	r25, 0x04	; 4
    101a:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	08 95       	ret
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	08 95       	ret

0000102a <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
    102a:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <motorD+0x3>
}
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	08 95       	ret

00001032 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
    1032:	89 ee       	ldi	r24, 0xE9	; 233
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9f 93       	push	r25
    1038:	8f 93       	push	r24
    103a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
    103e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	08 95       	ret

0000104e <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
    104e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_is_on>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	29 f0       	breq	.+10     	; 0x1060 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
		return 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1060:	08 95       	ret

00001062 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
    1062:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_is_on>
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	29 f0       	breq	.+10     	; 0x1074 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
		return 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1074:	08 95       	ret

00001076 <motor_regulation>:

void motor_regulation(uint8_t pwm) {
	motorD.state = MOTOR_REGULATION;
    1076:	e2 e8       	ldi	r30, 0x82	; 130
    1078:	f4 e0       	ldi	r31, 0x04	; 4
    107a:	96 e0       	ldi	r25, 0x06	; 6
    107c:	90 83       	st	Z, r25
	motorD.pwm_value = pwm;
    107e:	83 83       	std	Z+3, r24	; 0x03
    1080:	08 95       	ret

00001082 <dcmotor_process>:
}

void dcmotor_process(uint8_t value)
{
    1082:	cf 93       	push	r28
    1084:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
    1086:	46 e9       	ldi	r20, 0x96	; 150
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e3       	ldi	r24, 0x30	; 48
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	0e 94 83 18 	call	0x3106	; 0x3106 <evTime_process_period>
    1096:	89 2b       	or	r24, r25
    1098:	09 f4       	brne	.+2      	; 0x109c <dcmotor_process+0x1a>
    109a:	49 c0       	rjmp	.+146    	; 0x112e <dcmotor_process+0xac>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
    109c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <motorD>
    10a0:	93 30       	cpi	r25, 0x03	; 3
    10a2:	b9 f0       	breq	.+46     	; 0x10d2 <dcmotor_process+0x50>
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <dcmotor_process+0x2e>
    10a6:	91 30       	cpi	r25, 0x01	; 1
    10a8:	89 f0       	breq	.+34     	; 0x10cc <dcmotor_process+0x4a>
    10aa:	92 30       	cpi	r25, 0x02	; 2
    10ac:	39 f0       	breq	.+14     	; 0x10bc <dcmotor_process+0x3a>
    10ae:	3f c0       	rjmp	.+126    	; 0x112e <dcmotor_process+0xac>
    10b0:	95 30       	cpi	r25, 0x05	; 5
    10b2:	79 f1       	breq	.+94     	; 0x1112 <dcmotor_process+0x90>
    10b4:	88 f1       	brcs	.+98     	; 0x1118 <dcmotor_process+0x96>
    10b6:	96 30       	cpi	r25, 0x06	; 6
    10b8:	99 f1       	breq	.+102    	; 0x1120 <dcmotor_process+0x9e>
    10ba:	39 c0       	rjmp	.+114    	; 0x112e <dcmotor_process+0xac>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
    10bc:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
			OCR2 = count_pwm(value);
    10c0:	8c 2f       	mov	r24, r28
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    10c8:	83 bd       	out	0x23, r24	; 35
			break;
    10ca:	31 c0       	rjmp	.+98     	; 0x112e <dcmotor_process+0xac>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    10cc:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <motorD+0x3>
			break;
    10d0:	2e c0       	rjmp	.+92     	; 0x112e <dcmotor_process+0xac>

			case MOTOR_TRY:
				if (value <= 50)
    10d2:	c3 33       	cpi	r28, 0x33	; 51
    10d4:	48 f4       	brcc	.+18     	; 0x10e8 <dcmotor_process+0x66>
				{
					motorD.pwm_value = value + 20;
    10d6:	84 e1       	ldi	r24, 0x14	; 20
    10d8:	8c 0f       	add	r24, r28
    10da:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    10e4:	83 bd       	out	0x23, r24	; 35
    10e6:	23 c0       	rjmp	.+70     	; 0x112e <dcmotor_process+0xac>
				}
				else if ((value > 50) && (value <= 70))
    10e8:	8d ec       	ldi	r24, 0xCD	; 205
    10ea:	8c 0f       	add	r24, r28
    10ec:	84 31       	cpi	r24, 0x14	; 20
    10ee:	48 f4       	brcc	.+18     	; 0x1102 <dcmotor_process+0x80>
				{
					motorD.pwm_value = value + 15;
    10f0:	8f e0       	ldi	r24, 0x0F	; 15
    10f2:	8c 0f       	add	r24, r28
    10f4:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    10fe:	83 bd       	out	0x23, r24	; 35
    1100:	16 c0       	rjmp	.+44     	; 0x112e <dcmotor_process+0xac>
				}
				else
				{
					motorD.pwm_value = value;
    1102:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
					OCR2 = count_pwm(motorD.pwm_value);
    1106:	8c 2f       	mov	r24, r28
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    110e:	83 bd       	out	0x23, r24	; 35
    1110:	0e c0       	rjmp	.+28     	; 0x112e <dcmotor_process+0xac>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1112:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1114:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1116:	0b c0       	rjmp	.+22     	; 0x112e <dcmotor_process+0xac>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <motorD>
			return;					 //!
    111e:	07 c0       	rjmp	.+14     	; 0x112e <dcmotor_process+0xac>
				motorD.state = MOTOR_ON;
			}
			break;
			
			case MOTOR_REGULATION:
				motorD.pwm_value = value;
    1120:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <motorD+0x3>
				OCR2 = count_pwm(value);
    1124:	8c 2f       	mov	r24, r28
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 48 07 	call	0xe90	; 0xe90 <count_pwm>
    112c:	83 bd       	out	0x23, r24	; 35
		
	}
	#if !TEST_APP
	
	#endif
}
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1132:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1134:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1136:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1138:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    113a:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    113c:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    113e:	af 9a       	sbi	0x15, 7	; 21
    1140:	08 95       	ret

00001142 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1142:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1144:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1148:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    114a:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    114e:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    1150:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    1154:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    1156:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <DispD4+0x1>
    115a:	08 95       	ret

0000115c <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    115c:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    115e:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    1160:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    1162:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    1164:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    1166:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    1168:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    116a:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    116c:	ea e9       	ldi	r30, 0x9A	; 154
    116e:	f4 e0       	ldi	r31, 0x04	; 4
    1170:	88 e9       	ldi	r24, 0x98	; 152
    1172:	94 e0       	ldi	r25, 0x04	; 4
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    1178:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    117a:	24 ea       	ldi	r18, 0xA4	; 164
    117c:	34 e0       	ldi	r19, 0x04	; 4
    117e:	33 83       	std	Z+3, r19	; 0x03
    1180:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    1182:	a1 e9       	ldi	r26, 0x91	; 145
    1184:	b4 e0       	ldi	r27, 0x04	; 4
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	3c 93       	st	X, r19
    118a:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    118c:	13 96       	adiw	r26, 0x03	; 3
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
    1192:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    1194:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    1196:	26 e9       	ldi	r18, 0x96	; 150
    1198:	34 e0       	ldi	r19, 0x04	; 4
    119a:	35 83       	std	Z+5, r19	; 0x05
    119c:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    119e:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    11a0:	82 ea       	ldi	r24, 0xA2	; 162
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	97 83       	std	Z+7, r25	; 0x07
    11a6:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    11a8:	ec e8       	ldi	r30, 0x8C	; 140
    11aa:	f4 e0       	ldi	r31, 0x04	; 4
    11ac:	31 83       	std	Z+1, r19	; 0x01
    11ae:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    11b0:	93 83       	std	Z+3, r25	; 0x03
    11b2:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    11b4:	0e 94 a1 08 	call	0x1142	; 0x1142 <off_all_displays>
	clear_display();
    11b8:	0e 94 99 08 	call	0x1132	; 0x1132 <clear_display>
    11bc:	08 95       	ret

000011be <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
	if (DispD->value != displaying_value)
    11c2:	fc 01       	movw	r30, r24
    11c4:	30 81       	ld	r19, Z
    11c6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <displaying_value>
    11ca:	32 17       	cp	r19, r18
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <display_set_value+0x12>
    11ce:	95 c0       	rjmp	.+298    	; 0x12fa <display_set_value+0x13c>
    11d0:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    11d2:	0e 94 99 08 	call	0x1132	; 0x1132 <clear_display>
		switch(DispD->value)
    11d6:	e8 81       	ld	r30, Y
    11d8:	8e 2f       	mov	r24, r30
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	8f 3f       	cpi	r24, 0xFF	; 255
    11de:	91 05       	cpc	r25, r1
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <display_set_value+0x26>
    11e2:	88 c0       	rjmp	.+272    	; 0x12f4 <display_set_value+0x136>
    11e4:	fc 01       	movw	r30, r24
    11e6:	e6 5d       	subi	r30, 0xD6	; 214
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    11ee:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11f0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11f2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11f4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11f6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f8:	aa 98       	cbi	0x15, 2	; 21
			break;
    11fa:	7c c0       	rjmp	.+248    	; 0x12f4 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    11fc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11fe:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1200:	79 c0       	rjmp	.+242    	; 0x12f4 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1202:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1204:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1206:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1208:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    120a:	df 98       	cbi	0x1b, 7	; 27
			break;
    120c:	73 c0       	rjmp	.+230    	; 0x12f4 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    120e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1210:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1212:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1214:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1216:	df 98       	cbi	0x1b, 7	; 27
			break;
    1218:	6d c0       	rjmp	.+218    	; 0x12f4 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    121a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    121c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    121e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1220:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1222:	68 c0       	rjmp	.+208    	; 0x12f4 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1224:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1226:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1228:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    122a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    122c:	df 98       	cbi	0x1b, 7	; 27
			break;
    122e:	62 c0       	rjmp	.+196    	; 0x12f4 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1230:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1232:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1234:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1236:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1238:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    123a:	de 98       	cbi	0x1b, 6	; 27
			break;
    123c:	5b c0       	rjmp	.+182    	; 0x12f4 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    123e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1240:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1242:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1244:	57 c0       	rjmp	.+174    	; 0x12f4 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1246:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1248:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    124a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    124c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    124e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1250:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1252:	af 98       	cbi	0x15, 7	; 21
			break;
    1254:	4f c0       	rjmp	.+158    	; 0x12f4 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    1256:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1258:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    125a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    125c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    125e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1260:	af 98       	cbi	0x15, 7	; 21
			break;
    1262:	48 c0       	rjmp	.+144    	; 0x12f4 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    1264:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1266:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1268:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    126a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    126c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    126e:	af 98       	cbi	0x15, 7	; 21
			break;
    1270:	41 c0       	rjmp	.+130    	; 0x12f4 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    1272:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1274:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1276:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1278:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    127a:	af 98       	cbi	0x15, 7	; 21
			break;
    127c:	3b c0       	rjmp	.+118    	; 0x12f4 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    127e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1280:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1282:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1284:	aa 98       	cbi	0x15, 2	; 21
			break;
    1286:	36 c0       	rjmp	.+108    	; 0x12f4 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    1288:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    128a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    128c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    128e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1290:	af 98       	cbi	0x15, 7	; 21
			break;
    1292:	30 c0       	rjmp	.+96     	; 0x12f4 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    1294:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1296:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1298:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    129a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    129c:	af 98       	cbi	0x15, 7	; 21
			break;
    129e:	2a c0       	rjmp	.+84     	; 0x12f4 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    12a0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    12a2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    12a4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    12a6:	af 98       	cbi	0x15, 7	; 21
			break;
    12a8:	25 c0       	rjmp	.+74     	; 0x12f4 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    12aa:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    12ac:	af 98       	cbi	0x15, 7	; 21
			break;
    12ae:	22 c0       	rjmp	.+68     	; 0x12f4 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    12b0:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    12b2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    12b4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    12b6:	af 98       	cbi	0x15, 7	; 21
			break;
    12b8:	1d c0       	rjmp	.+58     	; 0x12f4 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    12ba:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    12bc:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    12be:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    12c0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    12c2:	af 98       	cbi	0x15, 7	; 21
			break;
    12c4:	17 c0       	rjmp	.+46     	; 0x12f4 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    12c6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    12c8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    12ca:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    12cc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    12ce:	af 98       	cbi	0x15, 7	; 21
			break;
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    12d2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    12d4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    12d6:	aa 98       	cbi	0x15, 2	; 21
			break;
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    12da:	af 98       	cbi	0x15, 7	; 21
			break;
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    12de:	aa 98       	cbi	0x15, 2	; 21
			break;
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    12e2:	de 98       	cbi	0x1b, 6	; 27
			break;
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    12e6:	df 98       	cbi	0x1b, 7	; 27
			break;
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    12ea:	dd 98       	cbi	0x1b, 5	; 27
			break;
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    12ee:	ad 98       	cbi	0x15, 5	; 21
			break;
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    12f2:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    12f4:	88 81       	ld	r24, Y
    12f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <displaying_value>
	}
	
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <on_display>:
void on_display(disp_drv *DispD)
{
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	ec 01       	movw	r28, r24
	off_all_displays();
    1306:	0e 94 a1 08 	call	0x1142	; 0x1142 <off_all_displays>
	display_set_value(DispD);
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 df 08 	call	0x11be	; 0x11be <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	c8 39       	cpi	r28, 0x98	; 152
    1314:	d8 07       	cpc	r29, r24
    1316:	29 f4       	brne	.+10     	; 0x1322 <on_display+0x22>
	{
		LED_ON_DISP1;
    1318:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <DispD1+0x1>
    1320:	19 c0       	rjmp	.+50     	; 0x1354 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	c4 3a       	cpi	r28, 0xA4	; 164
    1326:	d8 07       	cpc	r29, r24
    1328:	29 f4       	brne	.+10     	; 0x1334 <on_display+0x34>
	{
		LED_ON_DISP2;
    132a:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <DispD2+0x1>
    1332:	10 c0       	rjmp	.+32     	; 0x1354 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	c6 39       	cpi	r28, 0x96	; 150
    1338:	d8 07       	cpc	r29, r24
    133a:	29 f4       	brne	.+10     	; 0x1346 <on_display+0x46>
	{
		LED_ON_DISP3;
    133c:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <DispD3+0x1>
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1346:	c2 5a       	subi	r28, 0xA2	; 162
    1348:	d4 40       	sbci	r29, 0x04	; 4
    134a:	21 f4       	brne	.+8      	; 0x1354 <on_display+0x54>
	{
		LED_ON_DISP4;
    134c:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <DispD4+0x1>
	}
	#endif
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    1366:	c0 81       	ld	r28, Z
    1368:	d1 81       	ldd	r29, Z+1	; 0x01
    136a:	21 96       	adiw	r28, 0x01	; 1
    136c:	d1 83       	std	Z+1, r29	; 0x01
    136e:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    1370:	9e 01       	movw	r18, r28
    1372:	ad ec       	ldi	r26, 0xCD	; 205
    1374:	bc ec       	ldi	r27, 0xCC	; 204
    1376:	0e 94 67 20 	call	0x40ce	; 0x40ce <__umulhisi3>
    137a:	96 95       	lsr	r25
    137c:	87 95       	ror	r24
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	9c 01       	movw	r18, r24
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	c8 17       	cp	r28, r24
    139e:	d9 07       	cpc	r29, r25
    13a0:	01 f5       	brne	.+64     	; 0x13e2 <display_process+0x88>
    13a2:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    13a4:	10 91 35 02 	lds	r17, 0x0235	; 0x800235 <iteration>
    13a8:	14 30       	cpi	r17, 0x04	; 4
    13aa:	58 f4       	brcc	.+22     	; 0x13c2 <display_process+0x68>
			on_display(disp_tab[iteration]);
    13ac:	e1 2f       	mov	r30, r17
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	e6 56       	subi	r30, 0x66	; 102
    13b6:	fb 4f       	sbci	r31, 0xFB	; 251
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	0e 94 80 09 	call	0x1300	; 0x1300 <on_display>
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <display_process+0x6c>
		else
			off_all_displays();
    13c2:	0e 94 a1 08 	call	0x1142	; 0x1142 <off_all_displays>
		iteration++;
    13c6:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    13c8:	15 30       	cpi	r17, 0x05	; 5
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    13cc:	10 93 35 02 	sts	0x0235, r17	; 0x800235 <iteration>
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    13d2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    13d6:	c0 39       	cpi	r28, 0x90	; 144
    13d8:	d1 40       	sbci	r29, 0x01	; 1
    13da:	19 f4       	brne	.+6      	; 0x13e2 <display_process+0x88>
    13dc:	f7 01       	movw	r30, r14
    13de:	11 82       	std	Z+1, r1	; 0x01
    13e0:	10 82       	st	Z, r1
	}
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    13ee:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    13f0:	64 36       	cpi	r22, 0x64	; 100
    13f2:	f8 f4       	brcc	.+62     	; 0x1432 <disp_set_number+0x44>
	else if (number == 0)
    13f4:	61 11       	cpse	r22, r1
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    13f8:	a0 81       	ld	r26, Z
    13fa:	b1 81       	ldd	r27, Z+1	; 0x01
    13fc:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    13fe:	02 80       	ldd	r0, Z+2	; 0x02
    1400:	f3 81       	ldd	r31, Z+3	; 0x03
    1402:	e0 2d       	mov	r30, r0
    1404:	10 82       	st	Z, r1
    1406:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1408:	a0 81       	ld	r26, Z
    140a:	b1 81       	ldd	r27, Z+1	; 0x01
    140c:	9d ec       	ldi	r25, 0xCD	; 205
    140e:	69 9f       	mul	r22, r25
    1410:	91 2d       	mov	r25, r1
    1412:	11 24       	eor	r1, r1
    1414:	96 95       	lsr	r25
    1416:	96 95       	lsr	r25
    1418:	96 95       	lsr	r25
    141a:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    141c:	02 80       	ldd	r0, Z+2	; 0x02
    141e:	f3 81       	ldd	r31, Z+3	; 0x03
    1420:	e0 2d       	mov	r30, r0
    1422:	89 2f       	mov	r24, r25
    1424:	88 0f       	add	r24, r24
    1426:	98 2f       	mov	r25, r24
    1428:	99 0f       	add	r25, r25
    142a:	99 0f       	add	r25, r25
    142c:	89 0f       	add	r24, r25
    142e:	68 1b       	sub	r22, r24
    1430:	60 83       	st	Z, r22
    1432:	08 95       	ret

00001434 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1434:	fc 01       	movw	r30, r24
    1436:	60 83       	st	Z, r22
    1438:	08 95       	ret

0000143a <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	39 f0       	breq	.+14     	; 0x144c <dip_set_value+0x12>
    143e:	18 f0       	brcs	.+6      	; 0x1446 <dip_set_value+0xc>
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	39 f0       	breq	.+14     	; 0x1452 <dip_set_value+0x18>
    1444:	08 95       	ret
    1446:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    144a:	08 95       	ret
    144c:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    1450:	08 95       	ret
    1452:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <servo_disp_value>
    1456:	60 93 51 02 	sts	0x0251, r22	; 0x800251 <motor_disp_value>
    145a:	08 95       	ret

0000145c <disp_get_state>:
    145c:	88 23       	and	r24, r24
    145e:	19 f0       	breq	.+6      	; 0x1466 <disp_get_state+0xa>
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	29 f0       	breq	.+10     	; 0x146e <disp_get_state+0x12>
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <disp_get_state+0x1a>
    1466:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	08 95       	ret
    146e:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 95       	ret
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <disp_disable_voltage>:
    147c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1480:	86 30       	cpi	r24, 0x06	; 6
    1482:	21 f4       	brne	.+8      	; 0x148c <disp_disable_voltage+0x10>
    1484:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <disp1_last_state>
    1488:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
    148c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1490:	86 30       	cpi	r24, 0x06	; 6
    1492:	21 f4       	brne	.+8      	; 0x149c <disp_disable_voltage+0x20>
    1494:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <disp2_last_state>
    1498:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
    149c:	08 95       	ret

0000149e <disp_set_state>:
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	a1 f0       	breq	.+40     	; 0x14ca <disp_set_state+0x2c>
    14a2:	18 f0       	brcs	.+6      	; 0x14aa <disp_set_state+0xc>
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	09 f1       	breq	.+66     	; 0x14ea <disp_set_state+0x4c>
    14a8:	08 95       	ret
    14aa:	66 30       	cpi	r22, 0x06	; 6
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <disp_set_state+0x18>
    14ae:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    14b2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp1_last_state>
    14b6:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    14ba:	86 30       	cpi	r24, 0x06	; 6
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <disp_set_state+0x26>
    14be:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp1_last_state>
    14c2:	08 95       	ret
    14c4:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <segment1+0x4>
    14c8:	08 95       	ret
    14ca:	66 30       	cpi	r22, 0x06	; 6
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <disp_set_state+0x38>
    14ce:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    14d2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <disp2_last_state>
    14d6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    14da:	86 30       	cpi	r24, 0x06	; 6
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <disp_set_state+0x46>
    14de:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <disp2_last_state>
    14e2:	08 95       	ret
    14e4:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <segment2+0x4>
    14e8:	08 95       	ret
    14ea:	66 30       	cpi	r22, 0x06	; 6
    14ec:	41 f4       	brne	.+16     	; 0x14fe <disp_set_state+0x60>
    14ee:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    14f2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <disp1_last_state>
    14f6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    14fa:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <disp2_last_state>
    14fe:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1502:	86 30       	cpi	r24, 0x06	; 6
    1504:	29 f4       	brne	.+10     	; 0x1510 <disp_set_state+0x72>
    1506:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <disp2_last_state>
    150a:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <disp1_last_state>
    150e:	08 95       	ret
    1510:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <segment1+0x4>
    1514:	60 93 90 04 	sts	0x0490, r22	; 0x800490 <segment2+0x4>
    1518:	08 95       	ret

0000151a <display_set_error>:
    151a:	95 e0       	ldi	r25, 0x05	; 5
    151c:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <segment1+0x4>
    1520:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <segment2+0x4>
    1524:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <error_reason>
    1528:	08 95       	ret

0000152a <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    152a:	68 ef       	ldi	r22, 0xF8	; 248
    152c:	88 e9       	ldi	r24, 0x98	; 152
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1534:	68 ef       	ldi	r22, 0xF8	; 248
    1536:	84 ea       	ldi	r24, 0xA4	; 164
    1538:	94 e0       	ldi	r25, 0x04	; 4
    153a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    153e:	68 ef       	ldi	r22, 0xF8	; 248
    1540:	86 e9       	ldi	r24, 0x96	; 150
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1548:	68 ef       	ldi	r22, 0xF8	; 248
    154a:	82 ea       	ldi	r24, 0xA2	; 162
    154c:	94 e0       	ldi	r25, 0x04	; 4
    154e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
    1552:	08 95       	ret

00001554 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    1554:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    1558:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    155c:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1560:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    1564:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <timer_disp_process.1985>
    1568:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <timer_disp_process.1985+0x1>
    156c:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <timer_disp_process.1985+0x2>
    1570:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <timer_disp_process.1985+0x3>
    1574:	48 17       	cp	r20, r24
    1576:	59 07       	cpc	r21, r25
    1578:	6a 07       	cpc	r22, r26
    157a:	7b 07       	cpc	r23, r27
    157c:	08 f0       	brcs	.+2      	; 0x1580 <disp_process+0x2c>
    157e:	26 c1       	rjmp	.+588    	; 0x17cc <disp_process+0x278>
	{
        
        switch(segment1.state)
    1580:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	09 f4       	brne	.+2      	; 0x158a <disp_process+0x36>
    1588:	59 c0       	rjmp	.+178    	; 0x163c <disp_process+0xe8>
    158a:	30 f4       	brcc	.+12     	; 0x1598 <disp_process+0x44>
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <disp_process+0x3e>
    1590:	87 c0       	rjmp	.+270    	; 0x16a0 <disp_process+0x14c>
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	39 f1       	breq	.+78     	; 0x15e4 <disp_process+0x90>
    1596:	8e c0       	rjmp	.+284    	; 0x16b4 <disp_process+0x160>
    1598:	85 30       	cpi	r24, 0x05	; 5
    159a:	09 f4       	brne	.+2      	; 0x159e <disp_process+0x4a>
    159c:	74 c0       	rjmp	.+232    	; 0x1686 <disp_process+0x132>
    159e:	48 f1       	brcs	.+82     	; 0x15f2 <disp_process+0x9e>
    15a0:	86 30       	cpi	r24, 0x06	; 6
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <disp_process+0x52>
    15a4:	87 c0       	rjmp	.+270    	; 0x16b4 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    15a6:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	48 ec       	ldi	r20, 0xC8	; 200
    15b0:	52 e4       	ldi	r21, 0x42	; 66
    15b2:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    15b6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <__fixsfsi>
    15ba:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <voltage+0x1>
    15be:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <voltage>
            disp_set_number(&segment1, voltage/100);
    15c2:	9b 01       	movw	r18, r22
    15c4:	36 95       	lsr	r19
    15c6:	27 95       	ror	r18
    15c8:	36 95       	lsr	r19
    15ca:	27 95       	ror	r18
    15cc:	ab e7       	ldi	r26, 0x7B	; 123
    15ce:	b4 e1       	ldi	r27, 0x14	; 20
    15d0:	0e 94 67 20 	call	0x40ce	; 0x40ce <__umulhisi3>
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	68 2f       	mov	r22, r24
    15da:	81 e9       	ldi	r24, 0x91	; 145
    15dc:	94 e0       	ldi	r25, 0x04	; 4
    15de:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
            break;
    15e2:	68 c0       	rjmp	.+208    	; 0x16b4 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    15e4:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <motor_disp_value>
    15e8:	81 e9       	ldi	r24, 0x91	; 145
    15ea:	94 e0       	ldi	r25, 0x04	; 4
    15ec:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
            break;
    15f0:	61 c0       	rjmp	.+194    	; 0x16b4 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    15f2:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	31 f0       	breq	.+12     	; 0x1606 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1600:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
                break;
    1604:	57 c0       	rjmp	.+174    	; 0x16b4 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1606:	48 51       	subi	r20, 0x18	; 24
    1608:	5c 4f       	sbci	r21, 0xFC	; 252
    160a:	6f 4f       	sbci	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1985>
    1612:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1985+0x1>
    1616:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1985+0x2>
    161a:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1985+0x3>
			DispD2.value = 's';
    161e:	83 e7       	ldi	r24, 0x73	; 115
    1620:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'a';
    1624:	81 e6       	ldi	r24, 0x61	; 97
    1626:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
    162a:	80 e7       	ldi	r24, 0x70	; 112
    162c:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			segment1.state = SEG_VALUE;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1636:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
			return;
    163a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    163c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1640:	83 30       	cpi	r24, 0x03	; 3
    1642:	31 f0       	breq	.+12     	; 0x1650 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    164a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
                break;
    164e:	32 c0       	rjmp	.+100    	; 0x16b4 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    1650:	48 51       	subi	r20, 0x18	; 24
    1652:	5c 4f       	sbci	r21, 0xFC	; 252
    1654:	6f 4f       	sbci	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <timer_disp_process.1985>
    165c:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <timer_disp_process.1985+0x1>
    1660:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <timer_disp_process.1985+0x2>
    1664:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <timer_disp_process.1985+0x3>
			DispD2.value = 'l';
    1668:	8c e6       	ldi	r24, 0x6C	; 108
    166a:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'o';
    166e:	8f e6       	ldi	r24, 0x6F	; 111
    1670:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			DispD3.value = 'p';
    1674:	80 e7       	ldi	r24, 0x70	; 112
    1676:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <DispD3>
			segment1.state = SEG_VALUE;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1680:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <segment2+0x4>
            break;
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    1686:	85 e6       	ldi	r24, 0x65	; 101
    1688:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <DispD2>
			DispD1.value = 'r';
    168c:	82 e7       	ldi	r24, 0x72	; 114
    168e:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <DispD1>
			disp_set_number(&segment2, error_reason);
    1692:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <error_reason>
    1696:	8c e8       	ldi	r24, 0x8C	; 140
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
            break;
    169e:	0a c0       	rjmp	.+20     	; 0x16b4 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    16a0:	68 ef       	ldi	r22, 0xF8	; 248
    16a2:	88 e9       	ldi	r24, 0x98	; 152
    16a4:	94 e0       	ldi	r25, 0x04	; 4
    16a6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    16aa:	68 ef       	ldi	r22, 0xF8	; 248
    16ac:	84 ea       	ldi	r24, 0xA4	; 164
    16ae:	94 e0       	ldi	r25, 0x04	; 4
    16b0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    16b4:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	19 f1       	breq	.+70     	; 0x1702 <disp_process+0x1ae>
    16bc:	48 f1       	brcs	.+82     	; 0x1710 <disp_process+0x1bc>
    16be:	86 30       	cpi	r24, 0x06	; 6
    16c0:	19 f0       	breq	.+6      	; 0x16c8 <disp_process+0x174>
    16c2:	8d 30       	cpi	r24, 0x0D	; 13
    16c4:	81 f1       	breq	.+96     	; 0x1726 <disp_process+0x1d2>
    16c6:	6f c0       	rjmp	.+222    	; 0x17a6 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    16c8:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <voltage>
    16cc:	50 91 4a 02 	lds	r21, 0x024A	; 0x80024a <voltage+0x1>
    16d0:	9a 01       	movw	r18, r20
    16d2:	36 95       	lsr	r19
    16d4:	27 95       	ror	r18
    16d6:	36 95       	lsr	r19
    16d8:	27 95       	ror	r18
    16da:	ab e7       	ldi	r26, 0x7B	; 123
    16dc:	b4 e1       	ldi	r27, 0x14	; 20
    16de:	0e 94 67 20 	call	0x40ce	; 0x40ce <__umulhisi3>
    16e2:	96 95       	lsr	r25
    16e4:	87 95       	ror	r24
    16e6:	64 e6       	ldi	r22, 0x64	; 100
    16e8:	68 9f       	mul	r22, r24
    16ea:	90 01       	movw	r18, r0
    16ec:	69 9f       	mul	r22, r25
    16ee:	30 0d       	add	r19, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	ba 01       	movw	r22, r20
    16f4:	62 1b       	sub	r22, r18
    16f6:	73 0b       	sbc	r23, r19
    16f8:	8c e8       	ldi	r24, 0x8C	; 140
    16fa:	94 e0       	ldi	r25, 0x04	; 4
    16fc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
            break;
    1700:	52 c0       	rjmp	.+164    	; 0x17a6 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1702:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <servo_disp_value>
    1706:	8c e8       	ldi	r24, 0x8C	; 140
    1708:	94 e0       	ldi	r25, 0x04	; 4
    170a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
            break;
    170e:	4b c0       	rjmp	.+150    	; 0x17a6 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1710:	68 ef       	ldi	r22, 0xF8	; 248
    1712:	86 e9       	ldi	r24, 0x96	; 150
    1714:	94 e0       	ldi	r25, 0x04	; 4
    1716:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    171a:	68 ef       	ldi	r22, 0xF8	; 248
    171c:	82 ea       	ldi	r24, 0xA2	; 162
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
            break;
    1724:	40 c0       	rjmp	.+128    	; 0x17a6 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1726:	44 ef       	ldi	r20, 0xF4	; 244
    1728:	51 e0       	ldi	r21, 0x01	; 1
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	84 e4       	ldi	r24, 0x44	; 68
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	0e 94 83 18 	call	0x3106	; 0x3106 <evTime_process_period>
    1736:	89 2b       	or	r24, r25
    1738:	b1 f1       	breq	.+108    	; 0x17a6 <disp_process+0x252>
			{
				if (blink_state == 0)
    173a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <blink_state>
    173e:	81 11       	cpse	r24, r1
    1740:	0e c0       	rjmp	.+28     	; 0x175e <disp_process+0x20a>
				{
					blink_state = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1748:	67 ef       	ldi	r22, 0xF7	; 247
    174a:	86 e9       	ldi	r24, 0x96	; 150
    174c:	94 e0       	ldi	r25, 0x04	; 4
    174e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    1752:	67 ef       	ldi	r22, 0xF7	; 247
    1754:	82 ea       	ldi	r24, 0xA2	; 162
    1756:	94 e0       	ldi	r25, 0x04	; 4
    1758:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
    175c:	24 c0       	rjmp	.+72     	; 0x17a6 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    175e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <blink_state>
					if (blink_cnt == 0) 
    1762:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <blink_cnt>
    1766:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <blink_cnt+0x1>
    176a:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <blink_cnt+0x2>
    176e:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <blink_cnt+0x3>
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	a1 05       	cpc	r26, r1
    1776:	b1 05       	cpc	r27, r1
    1778:	29 f4       	brne	.+10     	; 0x1784 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
						break;
    1782:	11 c0       	rjmp	.+34     	; 0x17a6 <disp_process+0x252>
					}
					blink_cnt--;
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	a1 09       	sbc	r26, r1
    1788:	b1 09       	sbc	r27, r1
    178a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <blink_cnt>
    178e:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <blink_cnt+0x1>
    1792:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <blink_cnt+0x2>
    1796:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    179a:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <second_disp_blink_val>
    179e:	8c e8       	ldi	r24, 0x8C	; 140
    17a0:	94 e0       	ldi	r25, 0x04	; 4
    17a2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    17a6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer_disp_process.1985>
    17aa:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer_disp_process.1985+0x1>
    17ae:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <timer_disp_process.1985+0x2>
    17b2:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <timer_disp_process.1985+0x3>
    17b6:	c2 96       	adiw	r24, 0x32	; 50
    17b8:	a1 1d       	adc	r26, r1
    17ba:	b1 1d       	adc	r27, r1
    17bc:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <timer_disp_process.1985>
    17c0:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <timer_disp_process.1985+0x1>
    17c4:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <timer_disp_process.1985+0x2>
    17c8:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <timer_disp_process.1985+0x3>
    17cc:	08 95       	ret

000017ce <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    17d2:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <mktime+0x2>
    17d6:	10 91 ba 04 	lds	r17, 0x04BA	; 0x8004ba <mktime+0x3>
    17da:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <mktime+0x4>
    17de:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <mktime+0x5>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	80 0f       	add	r24, r16
    17e8:	91 1f       	adc	r25, r17
    17ea:	a2 1f       	adc	r26, r18
    17ec:	b3 1f       	adc	r27, r19
    17ee:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <animation_time>
    17f2:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <animation_time+0x1>
    17f6:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <animation_time+0x2>
    17fa:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	84 2f       	mov	r24, r20
    1802:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
}
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    180c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	29 f0       	breq	.+10     	; 0x181e <animation+0x12>
    1814:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	09 f0       	breq	.+2      	; 0x181e <animation+0x12>
    181c:	78 c0       	rjmp	.+240    	; 0x190e <animation+0x102>
    181e:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1822:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1826:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    182a:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    182e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer_anim.2005>
    1832:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer_anim.2005+0x1>
    1836:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer_anim.2005+0x2>
    183a:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer_anim.2005+0x3>
    183e:	84 17       	cp	r24, r20
    1840:	95 07       	cpc	r25, r21
    1842:	a6 07       	cpc	r26, r22
    1844:	b7 07       	cpc	r27, r23
    1846:	08 f0       	brcs	.+2      	; 0x184a <animation+0x3e>
    1848:	62 c0       	rjmp	.+196    	; 0x190e <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    184a:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    184e:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    1852:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1856:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    185a:	81 55       	subi	r24, 0x51	; 81
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	af 4f       	sbci	r26, 0xFF	; 255
    1860:	bf 4f       	sbci	r27, 0xFF	; 255
    1862:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer_anim.2005>
    1866:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer_anim.2005+0x1>
    186a:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer_anim.2005+0x2>
    186e:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer_anim.2005+0x3>
		if (segment1.state == SEG_ANIMATION)
    1872:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <segment1+0x4>
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	61 f4       	brne	.+24     	; 0x1892 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    187a:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2006>
    187e:	88 e9       	ldi	r24, 0x98	; 152
    1880:	94 e0       	ldi	r25, 0x04	; 4
    1882:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    1886:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <anim_iteration.2006>
    188a:	84 ea       	ldi	r24, 0xA4	; 164
    188c:	94 e0       	ldi	r25, 0x04	; 4
    188e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    1892:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <segment2+0x4>
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	61 f4       	brne	.+24     	; 0x18b2 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    189a:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2007>
    189e:	86 e9       	ldi	r24, 0x96	; 150
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    18a6:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <anim_iteration2.2007>
    18aa:	82 ea       	ldi	r24, 0xA2	; 162
    18ac:	94 e0       	ldi	r25, 0x04	; 4
    18ae:	0e 94 1a 0a 	call	0x1434	; 0x1434 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    18b2:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    18b6:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    18ba:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    18be:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    18c2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <animation_time>
    18c6:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <animation_time+0x1>
    18ca:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <animation_time+0x2>
    18ce:	b0 91 4f 02 	lds	r27, 0x024F	; 0x80024f <animation_time+0x3>
    18d2:	84 17       	cp	r24, r20
    18d4:	95 07       	cpc	r25, r21
    18d6:	a6 07       	cpc	r26, r22
    18d8:	b7 07       	cpc	r27, r23
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
			LED_ACUM_OFF;
    18e4:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    18e6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <anim_iteration.2006>
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2006>
		anim_iteration2--;
    18f0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <anim_iteration2.2007>
    18f4:	81 50       	subi	r24, 0x01	; 1
    18f6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2007>
		if (anim_iteration == 255) anim_iteration = 249;
    18fa:	9f 3f       	cpi	r25, 0xFF	; 255
    18fc:	19 f4       	brne	.+6      	; 0x1904 <animation+0xf8>
    18fe:	99 ef       	ldi	r25, 0xF9	; 249
    1900:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <anim_iteration.2006>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1904:	88 3f       	cpi	r24, 0xF8	; 248
    1906:	19 f4       	brne	.+6      	; 0x190e <animation+0x102>
    1908:	8e ef       	ldi	r24, 0xFE	; 254
    190a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <anim_iteration2.2007>
    190e:	08 95       	ret

00001910 <EEPROM_write>:
    1910:	e1 99       	sbic	0x1c, 1	; 28
    1912:	fe cf       	rjmp	.-4      	; 0x1910 <EEPROM_write>
    1914:	9f bb       	out	0x1f, r25	; 31
    1916:	8e bb       	out	0x1e, r24	; 30
    1918:	6d bb       	out	0x1d, r22	; 29
    191a:	e2 9a       	sbi	0x1c, 2	; 28
    191c:	e1 9a       	sbi	0x1c, 1	; 28
    191e:	08 95       	ret

00001920 <EEPROM_read>:
    1920:	e1 99       	sbic	0x1c, 1	; 28
    1922:	fe cf       	rjmp	.-4      	; 0x1920 <EEPROM_read>
    1924:	9f bb       	out	0x1f, r25	; 31
    1926:	8e bb       	out	0x1e, r24	; 30
    1928:	e0 9a       	sbi	0x1c, 0	; 28
    192a:	8d b3       	in	r24, 0x1d	; 29
    192c:	08 95       	ret

0000192e <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    192e:	cf 93       	push	r28
    1930:	c8 2f       	mov	r28, r24
    1932:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1936:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1940:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1944:	8c 2f       	mov	r24, r28
    1946:	0e 94 8d 0a 	call	0x151a	; 0x151a <display_set_error>
    194a:	0e 94 19 08 	call	0x1032	; 0x1032 <dcmotor_set_error>
    194e:	c1 30       	cpi	r28, 0x01	; 1
    1950:	21 f4       	brne	.+8      	; 0x195a <set_error_state+0x2c>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_error>
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <set_error_state+0x32>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <servo_error>
    1960:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <system_error>
    1964:	c0 93 a8 04 	sts	0x04A8, r28	; 0x8004a8 <led_blink>
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <error_init>:
    196c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    1970:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    1974:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    1978:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    197c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1980:	8f e6       	ldi	r24, 0x6F	; 111
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	0e 94 79 18 	call	0x30f2	; 0x30f2 <evTime_off>
    1988:	8f e5       	ldi	r24, 0x5F	; 95
    198a:	92 e0       	ldi	r25, 0x02	; 2
    198c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <evTime_off>
    1990:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <led_blink>
    1994:	08 95       	ret

00001996 <error_deinit>:
    1996:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
    199a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <error_motor_last_state>
    199e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
    19a2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
    19a6:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    19aa:	8f e6       	ldi	r24, 0x6F	; 111
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 79 18 	call	0x30f2	; 0x30f2 <evTime_off>
    19b2:	8f e5       	ldi	r24, 0x5F	; 95
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	0e 94 79 18 	call	0x30f2	; 0x30f2 <evTime_off>
    19ba:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <led_blink>
    19be:	08 95       	ret

000019c0 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    19c0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    19c4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    19c8:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    19cc:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    19d0:	80 53       	subi	r24, 0x30	; 48
    19d2:	98 4f       	sbci	r25, 0xF8	; 248
    19d4:	af 4f       	sbci	r26, 0xFF	; 255
    19d6:	bf 4f       	sbci	r27, 0xFF	; 255
    19d8:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <error_servo_tim>
    19dc:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <error_servo_tim+0x1>
    19e0:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <error_servo_tim+0x2>
    19e4:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <error_servo_tim+0x3>
    19e8:	08 95       	ret

000019ea <error_event>:
}

void error_event(void)
{
    19ea:	4f 92       	push	r4
    19ec:	5f 92       	push	r5
    19ee:	6f 92       	push	r6
    19f0:	7f 92       	push	r7
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1a02:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1a06:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1a0a:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1a0e:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1a12:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <error_event_timer.2088>
    1a16:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <error_event_timer.2088+0x1>
    1a1a:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <error_event_timer.2088+0x2>
    1a1e:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <error_event_timer.2088+0x3>
    1a22:	84 17       	cp	r24, r20
    1a24:	95 07       	cpc	r25, r21
    1a26:	a6 07       	cpc	r26, r22
    1a28:	b7 07       	cpc	r27, r23
    1a2a:	08 f0       	brcs	.+2      	; 0x1a2e <error_event+0x44>
    1a2c:	47 c2       	rjmp	.+1166   	; 0x1ebc <error_event+0x4d2>
    1a2e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1a32:	80 ff       	sbrs	r24, 0
    1a34:	43 c2       	rjmp	.+1158   	; 0x1ebc <error_event+0x4d2>
	{
		error_event_timer = mktime.ms + 250;
    1a36:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1a3a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1a3e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1a42:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1a46:	46 50       	subi	r20, 0x06	; 6
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	6f 4f       	sbci	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	40 93 57 02 	sts	0x0257, r20	; 0x800257 <error_event_timer.2088>
    1a52:	50 93 58 02 	sts	0x0258, r21	; 0x800258 <error_event_timer.2088+0x1>
    1a56:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <error_event_timer.2088+0x2>
    1a5a:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <error_event_timer.2088+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1a5e:	81 fd       	sbrc	r24, 1
    1a60:	2d c2       	rjmp	.+1114   	; 0x1ebc <error_event+0x4d2>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    1a62:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    1a66:	4b 01       	movw	r8, r22
    1a68:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a6a:	0e 94 15 08 	call	0x102a	; 0x102a <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    1a6e:	bc 01       	movw	r22, r24
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
    1a78:	6b 01       	movw	r12, r22
    1a7a:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    1a7c:	25 e9       	ldi	r18, 0x95	; 149
    1a7e:	35 e6       	ldi	r19, 0x65	; 101
    1a80:	40 ed       	ldi	r20, 0xD0	; 208
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 4b 1b 	call	0x3696	; 0x3696 <pow>
    1a88:	2b 01       	movw	r4, r22
    1a8a:	3c 01       	movw	r6, r24
    1a8c:	a7 01       	movw	r20, r14
    1a8e:	96 01       	movw	r18, r12
    1a90:	c5 01       	movw	r24, r10
    1a92:	b4 01       	movw	r22, r8
    1a94:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	48 ec       	ldi	r20, 0xC8	; 200
    1a9e:	52 e4       	ldi	r21, 0x42	; 66
    1aa0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    1aa4:	4b 01       	movw	r8, r22
    1aa6:	5c 01       	movw	r10, r24
    1aa8:	23 e3       	ldi	r18, 0x33	; 51
    1aaa:	33 e3       	ldi	r19, 0x33	; 51
    1aac:	43 e6       	ldi	r20, 0x63	; 99
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	c7 01       	movw	r24, r14
    1ab2:	b6 01       	movw	r22, r12
    1ab4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	48 ec       	ldi	r20, 0xC8	; 200
    1abe:	52 e4       	ldi	r21, 0x42	; 66
    1ac0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	c5 01       	movw	r24, r10
    1aca:	b4 01       	movw	r22, r8
    1acc:	0e 94 12 19 	call	0x3224	; 0x3224 <__subsf3>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e4       	ldi	r20, 0x40	; 64
    1ad6:	50 e4       	ldi	r21, 0x40	; 64
    1ad8:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    1adc:	4b 01       	movw	r8, r22
    1ade:	5c 01       	movw	r10, r24
    1ae0:	28 e5       	ldi	r18, 0x58	; 88
    1ae2:	39 e3       	ldi	r19, 0x39	; 57
    1ae4:	44 e3       	ldi	r20, 0x34	; 52
    1ae6:	5c e3       	ldi	r21, 0x3C	; 60
    1ae8:	c3 01       	movw	r24, r6
    1aea:	b2 01       	movw	r22, r4
    1aec:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	c5 01       	movw	r24, r10
    1af6:	b4 01       	movw	r22, r8
    1af8:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    1afc:	4b 01       	movw	r8, r22
    1afe:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    1b00:	85 e0       	ldi	r24, 0x05	; 5
    1b02:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1b06:	68 2f       	mov	r22, r24
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	62 53       	subi	r22, 0x32	; 50
    1b0c:	71 09       	sbc	r23, r1
    1b0e:	07 2e       	mov	r0, r23
    1b10:	00 0c       	add	r0, r0
    1b12:	88 0b       	sbc	r24, r24
    1b14:	99 0b       	sbc	r25, r25
    1b16:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
    1b1a:	a7 01       	movw	r20, r14
    1b1c:	96 01       	movw	r18, r12
    1b1e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	48 ec       	ldi	r20, 0xC8	; 200
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    1b2e:	a5 01       	movw	r20, r10
    1b30:	94 01       	movw	r18, r8
    1b32:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    1b36:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <motor_error_value>
    1b3a:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <motor_error_value+0x1>
    1b3e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <motor_error_value+0x2>
    1b42:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 08 11 	call	0x2210	; 0x2210 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1b4c:	42 e0       	ldi	r20, 0x02	; 2
    1b4e:	5b e2       	ldi	r21, 0x2B	; 43
    1b50:	67 e0       	ldi	r22, 0x07	; 7
    1b52:	7d e3       	ldi	r23, 0x3D	; 61
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0e 94 21 11 	call	0x2242	; 0x2242 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1b5a:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <motor_error_value>
    1b5e:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <motor_error_value+0x1>
    1b62:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <motor_error_value+0x2>
    1b66:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <motor_error_value+0x3>
    1b6a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__gesf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	44 f4       	brge	.+16     	; 0x1b82 <error_event+0x198>
    1b72:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_is_on>
    1b76:	89 2b       	or	r24, r25
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <error_event+0x198>
		{
			error_motor_status = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <error_motor_status>
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1b82:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR))
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    1b8c:	88 23       	and	r24, r24
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <error_event+0x1a8>
    1b90:	d2 c0       	rjmp	.+420    	; 0x1d36 <error_event+0x34c>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1b92:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <error_motor_status>
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <error_event+0x1b2>
    1b9a:	88 c0       	rjmp	.+272    	; 0x1cac <error_event+0x2c2>
			{
				switch(error_motor_state)
    1b9c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <error_event+0x1bc>
    1ba4:	60 c0       	rjmp	.+192    	; 0x1c66 <error_event+0x27c>
    1ba6:	28 f4       	brcc	.+10     	; 0x1bb2 <error_event+0x1c8>
    1ba8:	88 23       	and	r24, r24
    1baa:	51 f0       	breq	.+20     	; 0x1bc0 <error_event+0x1d6>
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	69 f1       	breq	.+90     	; 0x1c0a <error_event+0x220>
    1bb0:	c2 c0       	rjmp	.+388    	; 0x1d36 <error_event+0x34c>
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <error_event+0x1ce>
    1bb6:	62 c0       	rjmp	.+196    	; 0x1c7c <error_event+0x292>
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <error_event+0x1d4>
    1bbc:	63 c0       	rjmp	.+198    	; 0x1c84 <error_event+0x29a>
    1bbe:	bb c0       	rjmp	.+374    	; 0x1d36 <error_event+0x34c>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1bc6:	0e 94 15 08 	call	0x102a	; 0x102a <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1bca:	2e e1       	ldi	r18, 0x1E	; 30
    1bcc:	ac 01       	movw	r20, r24
    1bce:	24 9f       	mul	r18, r20
    1bd0:	c0 01       	movw	r24, r0
    1bd2:	25 9f       	mul	r18, r21
    1bd4:	90 0d       	add	r25, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	48 e8       	ldi	r20, 0x88	; 136
    1bda:	53 e1       	ldi	r21, 0x13	; 19
    1bdc:	7a 01       	movw	r14, r20
    1bde:	e8 1a       	sub	r14, r24
    1be0:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1be2:	ff 92       	push	r15
    1be4:	ef 92       	push	r14
    1be6:	88 ef       	ldi	r24, 0xF8	; 248
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9f 93       	push	r25
    1bec:	8f 93       	push	r24
    1bee:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1bf2:	a7 01       	movw	r20, r14
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	8f e6       	ldi	r24, 0x6F	; 111
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
					break;
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	96 c0       	rjmp	.+300    	; 0x1d36 <error_event+0x34c>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1c0a:	8f e6       	ldi	r24, 0x6F	; 111
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1c12:	89 2b       	or	r24, r25
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <error_event+0x22e>
    1c16:	8f c0       	rjmp	.+286    	; 0x1d36 <error_event+0x34c>
						{
							dcmotor_set_try();
    1c18:	0e 94 27 08 	call	0x104e	; 0x104e <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1c1c:	0e 94 15 08 	call	0x102a	; 0x102a <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1c20:	2e e1       	ldi	r18, 0x1E	; 30
    1c22:	ac 01       	movw	r20, r24
    1c24:	24 9f       	mul	r18, r20
    1c26:	c0 01       	movw	r24, r0
    1c28:	25 9f       	mul	r18, r21
    1c2a:	90 0d       	add	r25, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	48 e8       	ldi	r20, 0x88	; 136
    1c30:	53 e1       	ldi	r21, 0x13	; 19
    1c32:	7a 01       	movw	r14, r20
    1c34:	e8 1a       	sub	r14, r24
    1c36:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1c38:	ff 92       	push	r15
    1c3a:	ef 92       	push	r14
    1c3c:	87 e1       	ldi	r24, 0x17	; 23
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1c48:	a7 01       	movw	r20, r14
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	8f e6       	ldi	r24, 0x6F	; 111
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	68 c0       	rjmp	.+208    	; 0x1d36 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1c66:	8f e6       	ldi	r24, 0x6F	; 111
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1c6e:	89 2b       	or	r24, r25
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <error_event+0x28a>
    1c72:	61 c0       	rjmp	.+194    	; 0x1d36 <error_event+0x34c>
						{
							error_motor_state = ERR_M_ERROR;
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1c7a:	5d c0       	rjmp	.+186    	; 0x1d36 <error_event+0x34c>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 97 0c 	call	0x192e	; 0x192e <set_error_state>
					break;
    1c82:	59 c0       	rjmp	.+178    	; 0x1d36 <error_event+0x34c>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1c84:	8f e6       	ldi	r24, 0x6F	; 111
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <error_event+0x2a8>
    1c90:	52 c0       	rjmp	.+164    	; 0x1d36 <error_event+0x34c>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c92:	40 ed       	ldi	r20, 0xD0	; 208
    1c94:	57 e0       	ldi	r21, 0x07	; 7
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	8f e6       	ldi	r24, 0x6F	; 111
    1c9c:	92 e0       	ldi	r25, 0x02	; 2
    1c9e:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
							error_motor_state = error_motor_last_state;
    1ca2:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <error_motor_last_state>
    1ca6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
    1caa:	45 c0       	rjmp	.+138    	; 0x1d36 <error_event+0x34c>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1cac:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <error_motor_state>
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	f1 f0       	breq	.+60     	; 0x1cf0 <error_event+0x306>
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <error_event+0x2d2>
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	31 f0       	breq	.+12     	; 0x1cc6 <error_event+0x2dc>
    1cba:	3d c0       	rjmp	.+122    	; 0x1d36 <error_event+0x34c>
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	79 f1       	breq	.+94     	; 0x1d1e <error_event+0x334>
    1cc0:	84 30       	cpi	r24, 0x04	; 4
    1cc2:	89 f1       	breq	.+98     	; 0x1d26 <error_event+0x33c>
    1cc4:	38 c0       	rjmp	.+112    	; 0x1d36 <error_event+0x34c>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1cc6:	8f e6       	ldi	r24, 0x6F	; 111
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1cce:	89 2b       	or	r24, r25
    1cd0:	91 f1       	breq	.+100    	; 0x1d36 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1cd2:	40 ed       	ldi	r20, 0xD0	; 208
    1cd4:	57 e0       	ldi	r21, 0x07	; 7
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	8f e6       	ldi	r24, 0x6F	; 111
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1ce2:	84 e0       	ldi	r24, 0x04	; 4
    1ce4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1cee:	23 c0       	rjmp	.+70     	; 0x1d36 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1cf0:	8f e6       	ldi	r24, 0x6F	; 111
    1cf2:	92 e0       	ldi	r25, 0x02	; 2
    1cf4:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1cf8:	89 2b       	or	r24, r25
    1cfa:	e9 f0       	breq	.+58     	; 0x1d36 <error_event+0x34c>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1cfc:	40 ed       	ldi	r20, 0xD0	; 208
    1cfe:	57 e0       	ldi	r21, 0x07	; 7
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	8f e6       	ldi	r24, 0x6F	; 111
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
						dcmotor_set_normal_state();
    1d0c:	0e 94 31 08 	call	0x1062	; 0x1062 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1d10:	84 e0       	ldi	r24, 0x04	; 4
    1d12:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <error_motor_last_state>
    1d1c:	0c c0       	rjmp	.+24     	; 0x1d36 <error_event+0x34c>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	0e 94 97 0c 	call	0x192e	; 0x192e <set_error_state>
					break;
    1d24:	08 c0       	rjmp	.+16     	; 0x1d36 <error_event+0x34c>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1d26:	8f e6       	ldi	r24, 0x6F	; 111
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1d2e:	89 2b       	or	r24, r25
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <error_event+0x34c>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1d32:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <error_event+0x358>
    1d40:	bd c0       	rjmp	.+378    	; 0x1ebc <error_event+0x4d2>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO))
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <servo_error_value+0x1>
    1d4e:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 08 11 	call	0x2210	; 0x2210 <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1d58:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <servo_error_value>
    1d5c:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <servo_error_value+0x1>
    1d60:	28 17       	cp	r18, r24
    1d62:	39 07       	cpc	r19, r25
    1d64:	20 f5       	brcc	.+72     	; 0x1dae <error_event+0x3c4>
    1d66:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1d6a:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1d6e:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1d72:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1d76:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <error_servo_tim>
    1d7a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <error_servo_tim+0x1>
    1d7e:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <error_servo_tim+0x2>
    1d82:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <error_servo_tim+0x3>
    1d86:	84 17       	cp	r24, r20
    1d88:	95 07       	cpc	r25, r21
    1d8a:	a6 07       	cpc	r26, r22
    1d8c:	b7 07       	cpc	r27, r23
    1d8e:	78 f4       	brcc	.+30     	; 0x1dae <error_event+0x3c4>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1d96:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	51 f1       	breq	.+84     	; 0x1df2 <error_event+0x408>
    1d9e:	a8 f0       	brcs	.+42     	; 0x1dca <error_event+0x3e0>
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <error_event+0x3bc>
    1da4:	4b c0       	rjmp	.+150    	; 0x1e3c <error_event+0x452>
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	09 f4       	brne	.+2      	; 0x1dac <error_event+0x3c2>
    1daa:	51 c0       	rjmp	.+162    	; 0x1e4e <error_event+0x464>
    1dac:	87 c0       	rjmp	.+270    	; 0x1ebc <error_event+0x4d2>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1dae:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1db2:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <error_servo_state>
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <error_event+0x3d2>
    1dba:	66 c0       	rjmp	.+204    	; 0x1e88 <error_event+0x49e>
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <error_event+0x3d8>
    1dc0:	7a c0       	rjmp	.+244    	; 0x1eb6 <error_event+0x4cc>
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <error_event+0x3de>
    1dc6:	7a c0       	rjmp	.+244    	; 0x1ebc <error_event+0x4d2>
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <error_event+0x46c>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1dd0:	8b e3       	ldi	r24, 0x3B	; 59
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	9f 93       	push	r25
    1dd6:	8f 93       	push	r24
    1dd8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1ddc:	4c ed       	ldi	r20, 0xDC	; 220
    1dde:	55 e0       	ldi	r21, 0x05	; 5
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	8f e5       	ldi	r24, 0x5F	; 95
    1de6:	92 e0       	ldi	r25, 0x02	; 2
    1de8:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
					break;
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	65 c0       	rjmp	.+202    	; 0x1ebc <error_event+0x4d2>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1df2:	8f e5       	ldi	r24, 0x5F	; 95
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1dfa:	89 2b       	or	r24, r25
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <error_event+0x416>
    1dfe:	5e c0       	rjmp	.+188    	; 0x1ebc <error_event+0x4d2>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1e00:	0e 94 d5 12 	call	0x25aa	; 0x25aa <servo_get_try_cnt>
    1e04:	04 97       	sbiw	r24, 0x04	; 4
    1e06:	24 f0       	brlt	.+8      	; 0x1e10 <error_event+0x426>
							{
								error_servo_state = ERR_S_ERROR;
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
								break;
    1e0e:	56 c0       	rjmp	.+172    	; 0x1ebc <error_event+0x4d2>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1e10:	40 ed       	ldi	r20, 0xD0	; 208
    1e12:	57 e0       	ldi	r21, 0x07	; 7
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	8f e5       	ldi	r24, 0x5F	; 95
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
							error_servo_state = ERR_S_TRY;
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <error_servo_state>
							servo_enable_try();
    1e26:	0e 94 c9 12 	call	0x2592	; 0x2592 <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1e2a:	86 e5       	ldi	r24, 0x56	; 86
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	40 c0       	rjmp	.+128    	; 0x1ebc <error_event+0x4d2>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1e3c:	8f e5       	ldi	r24, 0x5F	; 95
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1e44:	89 2b       	or	r24, r25
    1e46:	d1 f1       	breq	.+116    	; 0x1ebc <error_event+0x4d2>
						{
							error_servo_state = ERR_S_OK;
    1e48:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
    1e4c:	37 c0       	rjmp	.+110    	; 0x1ebc <error_event+0x4d2>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	0e 94 97 0c 	call	0x192e	; 0x192e <set_error_state>
					break;
    1e54:	33 c0       	rjmp	.+102    	; 0x1ebc <error_event+0x4d2>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1e56:	8f e5       	ldi	r24, 0x5F	; 95
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1e5e:	89 2b       	or	r24, r25
    1e60:	69 f1       	breq	.+90     	; 0x1ebc <error_event+0x4d2>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1e62:	40 ed       	ldi	r20, 0xD0	; 208
    1e64:	57 e0       	ldi	r21, 0x07	; 7
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	8f e5       	ldi	r24, 0x5F	; 95
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
						error_servo_state = ERR_M_OK;
    1e72:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e76:	80 e7       	ldi	r24, 0x70	; 112
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	9f 93       	push	r25
    1e7c:	8f 93       	push	r24
    1e7e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	1a c0       	rjmp	.+52     	; 0x1ebc <error_event+0x4d2>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1e88:	8f e5       	ldi	r24, 0x5F	; 95
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    1e90:	89 2b       	or	r24, r25
    1e92:	a1 f0       	breq	.+40     	; 0x1ebc <error_event+0x4d2>
					{
						error_servo_state = ERR_S_OK;
    1e94:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e98:	80 e7       	ldi	r24, 0x70	; 112
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	9f 93       	push	r25
    1e9e:	8f 93       	push	r24
    1ea0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1ea4:	6c ea       	ldi	r22, 0xAC	; 172
    1ea6:	7d e0       	ldi	r23, 0x0D	; 13
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 4b 13 	call	0x2696	; 0x2696 <servo_try_reset_timeout>
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	03 c0       	rjmp	.+6      	; 0x1ebc <error_event+0x4d2>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	0e 94 97 0c 	call	0x192e	; 0x192e <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	08 95       	ret

00001ed6 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1ed6:	4e e5       	ldi	r20, 0x5E	; 94
    1ed8:	51 e0       	ldi	r21, 0x01	; 1
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	82 e5       	ldi	r24, 0x52	; 82
    1ee0:	92 e0       	ldi	r25, 0x02	; 2
    1ee2:	0e 94 83 18 	call	0x3106	; 0x3106 <evTime_process_period>
    1ee6:	89 2b       	or	r24, r25
    1ee8:	09 f1       	breq	.+66     	; 0x1f2c <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1eea:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <led_blink>
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	71 f4       	brne	.+28     	; 0x1f0e <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1ef2:	92 b3       	in	r25, 0x12	; 18
    1ef4:	80 e1       	ldi	r24, 0x10	; 16
    1ef6:	89 27       	eor	r24, r25
    1ef8:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1efa:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1efe:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1f02:	90 62       	ori	r25, 0x20	; 32
    1f04:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1f08:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1f0c:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	69 f4       	brne	.+26     	; 0x1f2c <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1f12:	92 b3       	in	r25, 0x12	; 18
    1f14:	80 e4       	ldi	r24, 0x40	; 64
    1f16:	89 27       	eor	r24, r25
    1f18:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1f1a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    1f1e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    1f22:	90 62       	ori	r25, 0x20	; 32
    1f24:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    1f28:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    1f2c:	08 95       	ret

00001f2e <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1f2e:	fc 01       	movw	r30, r24
    1f30:	20 81       	ld	r18, Z
    1f32:	31 81       	ldd	r19, Z+1	; 0x01
    1f34:	62 30       	cpi	r22, 0x02	; 2
    1f36:	58 f0       	brcs	.+22     	; 0x1f4e <filtered_value+0x20>
    1f38:	32 96       	adiw	r30, 0x02	; 2
    1f3a:	91 e0       	ldi	r25, 0x01	; 1
    1f3c:	41 91       	ld	r20, Z+
    1f3e:	51 91       	ld	r21, Z+
    1f40:	24 0f       	add	r18, r20
    1f42:	35 1f       	adc	r19, r21
    1f44:	36 95       	lsr	r19
    1f46:	27 95       	ror	r18
    1f48:	9f 5f       	subi	r25, 0xFF	; 255
    1f4a:	69 13       	cpse	r22, r25
    1f4c:	f7 cf       	rjmp	.-18     	; 0x1f3c <filtered_value+0xe>
    1f4e:	c9 01       	movw	r24, r18
    1f50:	08 95       	ret

00001f52 <init_measure>:
    1f52:	ea eb       	ldi	r30, 0xBA	; 186
    1f54:	f2 e0       	ldi	r31, 0x02	; 2
    1f56:	22 ee       	ldi	r18, 0xE2	; 226
    1f58:	32 e0       	ldi	r19, 0x02	; 2
    1f5a:	81 ef       	ldi	r24, 0xF1	; 241
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	81 93       	st	Z+, r24
    1f60:	91 93       	st	Z+, r25
    1f62:	2e 17       	cp	r18, r30
    1f64:	3f 07       	cpc	r19, r31
    1f66:	d9 f7       	brne	.-10     	; 0x1f5e <init_measure+0xc>
    1f68:	e9 e9       	ldi	r30, 0x99	; 153
    1f6a:	f2 e0       	ldi	r31, 0x02	; 2
    1f6c:	87 eb       	ldi	r24, 0xB7	; 183
    1f6e:	92 e0       	ldi	r25, 0x02	; 2
    1f70:	11 92       	st	Z+, r1
    1f72:	11 92       	st	Z+, r1
    1f74:	8e 17       	cp	r24, r30
    1f76:	9f 07       	cpc	r25, r31
    1f78:	d9 f7       	brne	.-10     	; 0x1f70 <init_measure+0x1e>
    1f7a:	e1 e8       	ldi	r30, 0x81	; 129
    1f7c:	f2 e0       	ldi	r31, 0x02	; 2
    1f7e:	85 e9       	ldi	r24, 0x95	; 149
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	11 92       	st	Z+, r1
    1f84:	11 92       	st	Z+, r1
    1f86:	8e 17       	cp	r24, r30
    1f88:	9f 07       	cpc	r25, r31
    1f8a:	d9 f7       	brne	.-10     	; 0x1f82 <init_measure+0x30>
    1f8c:	08 95       	ret

00001f8e <measure_process>:
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    1f9e:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    1fa2:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    1fa6:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    1faa:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <measure_timer>
    1fae:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <measure_timer+0x1>
    1fb2:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <measure_timer+0x2>
    1fb6:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <measure_timer+0x3>
    1fba:	84 17       	cp	r24, r20
    1fbc:	95 07       	cpc	r25, r21
    1fbe:	a6 07       	cpc	r26, r22
    1fc0:	b7 07       	cpc	r27, r23
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <measure_process+0x38>
    1fc4:	d1 c0       	rjmp	.+418    	; 0x2168 <measure_process+0x1da>
    1fc6:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    1fca:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    1fce:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    1fd2:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    1fd6:	44 96       	adiw	r24, 0x14	; 20
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	b1 1d       	adc	r27, r1
    1fdc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <measure_timer>
    1fe0:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <measure_timer+0x1>
    1fe4:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <measure_timer+0x2>
    1fe8:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <measure_timer+0x3>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    1ff2:	ec 01       	movw	r28, r24
    1ff4:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    1ff8:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
    2004:	21 e7       	ldi	r18, 0x71	; 113
    2006:	3d e3       	ldi	r19, 0x3D	; 61
    2008:	4a e8       	ldi	r20, 0x8A	; 138
    200a:	5e e3       	ldi	r21, 0x3E	; 62
    200c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    2010:	6b 01       	movw	r12, r22
    2012:	7c 01       	movw	r14, r24
    2014:	be 01       	movw	r22, r28
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
    201e:	9b 01       	movw	r18, r22
    2020:	ac 01       	movw	r20, r24
    2022:	c7 01       	movw	r24, r14
    2024:	b6 01       	movw	r22, r12
    2026:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    202a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__fixunssfsi>
    202e:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <accum_adc+0x1>
    2032:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <accum_adc>
    2036:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    203a:	e2 2f       	mov	r30, r18
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	e6 54       	subi	r30, 0x46	; 70
    2044:	fd 4f       	sbci	r31, 0xFD	; 253
    2046:	71 83       	std	Z+1, r23	; 0x01
    2048:	60 83       	st	Z, r22
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	82 0f       	add	r24, r18
    204e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <iteration_adc_accum_table>
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    2058:	80 32       	cpi	r24, 0x20	; 32
    205a:	91 05       	cpc	r25, r1
    205c:	30 f0       	brcs	.+12     	; 0x206a <measure_process+0xdc>
    205e:	4f 97       	sbiw	r24, 0x1f	; 31
    2060:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <motor_adc+0x1>
    2064:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <motor_adc>
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <measure_process+0xe4>
    206a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <motor_adc+0x1>
    206e:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <motor_adc>
    2072:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	ee 0f       	add	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	e7 56       	subi	r30, 0x67	; 103
    207e:	fd 4f       	sbci	r31, 0xFD	; 253
    2080:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <motor_adc>
    2084:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <motor_adc+0x1>
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	80 83       	st	Z, r24
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 76 03 	call	0x6ec	; 0x6ec <adc_read>
    2092:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <s_o_t_adc+0x1>
    2096:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <s_o_t_adc>
    209a:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <calibration_value>
    209e:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <calibration_value+0x1>
    20a2:	21 15       	cp	r18, r1
    20a4:	31 05       	cpc	r19, r1
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <measure_process+0x136>
    20a8:	28 17       	cp	r18, r24
    20aa:	39 07       	cpc	r19, r25
    20ac:	28 f4       	brcc	.+10     	; 0x20b8 <measure_process+0x12a>
    20ae:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <s_o_t_adc+0x1>
    20b2:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <s_o_t_adc>
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <measure_process+0x136>
    20b8:	28 1b       	sub	r18, r24
    20ba:	39 0b       	sbc	r19, r25
    20bc:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <s_o_t_adc+0x1>
    20c0:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <s_o_t_adc>
    20c4:	c0 91 80 02 	lds	r28, 0x0280	; 0x800280 <s_o_t_iteration_adc_table>
    20c8:	ec 2f       	mov	r30, r28
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	ef 57       	subi	r30, 0x7F	; 127
    20d2:	fd 4f       	sbci	r31, 0xFD	; 253
    20d4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <s_o_t_adc>
    20d8:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <s_o_t_adc+0x1>
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	d0 91 b9 02 	lds	r29, 0x02B9	; 0x8002b9 <iteration_adc_motor_table>
    20e4:	df 5f       	subi	r29, 0xFF	; 255
    20e6:	d0 93 b9 02 	sts	0x02B9, r29	; 0x8002b9 <iteration_adc_motor_table>
    20ea:	cf 5f       	subi	r28, 0xFF	; 255
    20ec:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <s_o_t_iteration_adc_table>
    20f0:	64 e1       	ldi	r22, 0x14	; 20
    20f2:	8a eb       	ldi	r24, 0xBA	; 186
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <filtered_value>
    20fa:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <filtered_accum_adc_val+0x1>
    20fe:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <filtered_accum_adc_val>
    2102:	6f e0       	ldi	r22, 0x0F	; 15
    2104:	89 e9       	ldi	r24, 0x99	; 153
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <filtered_value>
    210c:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <motor_filter_value+0x1>
    2110:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <motor_filter_value>
    2114:	6a e0       	ldi	r22, 0x0A	; 10
    2116:	81 e8       	ldi	r24, 0x81	; 129
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <filtered_value>
    211e:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <s_o_t_filter_value+0x1>
    2122:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <s_o_t_filter_value>
    2126:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <debug_msg_counter>
    212a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <debug_msg_counter+0x1>
    212e:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <debug_msg_counter+0x2>
    2132:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <debug_msg_counter+0x3>
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	a1 1d       	adc	r26, r1
    213a:	b1 1d       	adc	r27, r1
    213c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <debug_msg_counter>
    2140:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <debug_msg_counter+0x1>
    2144:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <debug_msg_counter+0x2>
    2148:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <debug_msg_counter+0x3>
    214c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <iteration_adc_accum_table>
    2150:	84 31       	cpi	r24, 0x14	; 20
    2152:	11 f4       	brne	.+4      	; 0x2158 <measure_process+0x1ca>
    2154:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <iteration_adc_accum_table>
    2158:	ca 30       	cpi	r28, 0x0A	; 10
    215a:	11 f4       	brne	.+4      	; 0x2160 <measure_process+0x1d2>
    215c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <s_o_t_iteration_adc_table>
    2160:	df 30       	cpi	r29, 0x0F	; 15
    2162:	11 f4       	brne	.+4      	; 0x2168 <measure_process+0x1da>
    2164:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <iteration_adc_motor_table>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	ff 90       	pop	r15
    216e:	ef 90       	pop	r14
    2170:	df 90       	pop	r13
    2172:	cf 90       	pop	r12
    2174:	08 95       	ret

00002176 <measure_get_servo_calibration>:
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	c0 90 b9 04 	lds	r12, 0x04B9	; 0x8004b9 <mktime+0x2>
    2186:	d0 90 ba 04 	lds	r13, 0x04BA	; 0x8004ba <mktime+0x3>
    218a:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <mktime+0x4>
    218e:	f0 90 bc 04 	lds	r15, 0x04BC	; 0x8004bc <mktime+0x5>
    2192:	8c eb       	ldi	r24, 0xBC	; 188
    2194:	c8 0e       	add	r12, r24
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	d8 1e       	adc	r13, r24
    219a:	e1 1c       	adc	r14, r1
    219c:	f1 1c       	adc	r15, r1
    219e:	c7 eb       	ldi	r28, 0xB7	; 183
    21a0:	d4 e0       	ldi	r29, 0x04	; 4
    21a2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <measure_process>
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	ac 81       	ldd	r26, Y+4	; 0x04
    21ac:	bd 81       	ldd	r27, Y+5	; 0x05
    21ae:	c8 16       	cp	r12, r24
    21b0:	d9 06       	cpc	r13, r25
    21b2:	ea 06       	cpc	r14, r26
    21b4:	fb 06       	cpc	r15, r27
    21b6:	a8 f7       	brcc	.-22     	; 0x21a2 <measure_get_servo_calibration+0x2c>
    21b8:	0e 94 66 02 	call	0x4cc	; 0x4cc <accum_get_voltage>
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	48 e8       	ldi	r20, 0x88	; 136
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__gesf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	24 f4       	brge	.+8      	; 0x21d4 <measure_get_servo_calibration+0x5e>
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <power_supply_type>
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <measure_get_servo_calibration+0x64>
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <power_supply_type>
    21da:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    21de:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    21e2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <calibration_value>
    21e6:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <calibration_value+0x1>
    21ea:	9f 93       	push	r25
    21ec:	8f 93       	push	r24
    21ee:	89 e8       	ldi	r24, 0x89	; 137
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	9f 93       	push	r25
    21f4:	8f 93       	push	r24
    21f6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	df 90       	pop	r13
    220c:	cf 90       	pop	r12
    220e:	08 95       	ret

00002210 <measure_get_filtered_value>:
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	18 f4       	brcc	.+6      	; 0x221a <measure_get_filtered_value+0xa>
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	40 f0       	brcs	.+16     	; 0x2228 <measure_get_filtered_value+0x18>
    2218:	0c c0       	rjmp	.+24     	; 0x2232 <measure_get_filtered_value+0x22>
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	79 f4       	brne	.+30     	; 0x223c <measure_get_filtered_value+0x2c>
    221e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    2222:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2226:	08 95       	ret
    2228:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <motor_filter_value>
    222c:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    2230:	08 95       	ret
    2232:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <s_o_t_filter_value>
    2236:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    223a:	08 95       	ret
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	08 95       	ret

00002242 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2242:	cf 92       	push	r12
    2244:	df 92       	push	r13
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	6a 01       	movw	r12, r20
    224c:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    224e:	83 30       	cpi	r24, 0x03	; 3
    2250:	18 f4       	brcc	.+6      	; 0x2258 <measure_get_current+0x16>
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	50 f0       	brcs	.+20     	; 0x226a <measure_get_current+0x28>
    2256:	10 c0       	rjmp	.+32     	; 0x2278 <measure_get_current+0x36>
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	a9 f4       	brne	.+42     	; 0x2286 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    225c:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <filtered_accum_adc_val>
    2260:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <filtered_accum_adc_val+0x1>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2268:	11 c0       	rjmp	.+34     	; 0x228c <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    226a:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <motor_filter_value>
    226e:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <motor_filter_value+0x1>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2276:	0a c0       	rjmp	.+20     	; 0x228c <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    2278:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <s_o_t_filter_value>
    227c:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <s_o_t_filter_value+0x1>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2284:	03 c0       	rjmp	.+6      	; 0x228c <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    228c:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5a e3       	ldi	r21, 0x3A	; 58
    2298:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 ea       	ldi	r20, 0xA0	; 160
    22a2:	50 e4       	ldi	r21, 0x40	; 64
    22a4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    22a8:	a7 01       	movw	r20, r14
    22aa:	96 01       	movw	r18, r12
    22ac:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	08 95       	ret

000022ba <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    22c6:	82 30       	cpi	r24, 0x02	; 2
    22c8:	59 f0       	breq	.+22     	; 0x22e0 <mem_save_data+0x26>
    22ca:	28 f4       	brcc	.+10     	; 0x22d6 <mem_save_data+0x1c>
    22cc:	88 23       	and	r24, r24
    22ce:	91 f0       	breq	.+36     	; 0x22f4 <mem_save_data+0x3a>
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	51 f1       	breq	.+84     	; 0x2328 <mem_save_data+0x6e>
    22d4:	34 c0       	rjmp	.+104    	; 0x233e <mem_save_data+0x84>
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	51 f1       	breq	.+84     	; 0x232e <mem_save_data+0x74>
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	21 f0       	breq	.+8      	; 0x22e6 <mem_save_data+0x2c>
    22de:	2f c0       	rjmp	.+94     	; 0x233e <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    22e0:	84 e0       	ldi	r24, 0x04	; 4
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	26 c0       	rjmp	.+76     	; 0x2332 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    22e6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dark_menu_parameters_len>
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    22ee:	88 e0       	ldi	r24, 0x08	; 8
    22f0:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    22f4:	22 e0       	ldi	r18, 0x02	; 2
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22fc:	c8 2f       	mov	r28, r24
    22fe:	7c 01       	movw	r14, r24
    2300:	e2 0e       	add	r14, r18
    2302:	f3 1e       	adc	r15, r19
    2304:	99 27       	eor	r25, r25
    2306:	8e 15       	cp	r24, r14
    2308:	9f 05       	cpc	r25, r15
    230a:	cc f4       	brge	.+50     	; 0x233e <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    230c:	f8 01       	movw	r30, r16
    230e:	61 91       	ld	r22, Z+
    2310:	8f 01       	movw	r16, r30
    2312:	8c 2f       	mov	r24, r28
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 88 0c 	call	0x1910	; 0x1910 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    231a:	cf 5f       	subi	r28, 0xFF	; 255
    231c:	8c 2f       	mov	r24, r28
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	8e 15       	cp	r24, r14
    2322:	9f 05       	cpc	r25, r15
    2324:	9c f3       	brlt	.-26     	; 0x230c <mem_save_data+0x52>
    2326:	0b c0       	rjmp	.+22     	; 0x233e <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    232e:	86 e0       	ldi	r24, 0x06	; 6
    2330:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2332:	c8 2f       	mov	r28, r24
    2334:	7c 01       	movw	r14, r24
    2336:	f2 e0       	ldi	r31, 0x02	; 2
    2338:	ef 0e       	add	r14, r31
    233a:	f1 1c       	adc	r15, r1
    233c:	e7 cf       	rjmp	.-50     	; 0x230c <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	08 95       	ret

0000234a <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	59 f0       	breq	.+22     	; 0x2370 <mem_read_data+0x26>
    235a:	28 f4       	brcc	.+10     	; 0x2366 <mem_read_data+0x1c>
    235c:	88 23       	and	r24, r24
    235e:	91 f0       	breq	.+36     	; 0x2384 <mem_read_data+0x3a>
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	51 f1       	breq	.+84     	; 0x23b8 <mem_read_data+0x6e>
    2364:	34 c0       	rjmp	.+104    	; 0x23ce <mem_read_data+0x84>
    2366:	83 30       	cpi	r24, 0x03	; 3
    2368:	51 f1       	breq	.+84     	; 0x23be <mem_read_data+0x74>
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	21 f0       	breq	.+8      	; 0x2376 <mem_read_data+0x2c>
    236e:	2f c0       	rjmp	.+94     	; 0x23ce <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	26 c0       	rjmp	.+76     	; 0x23c2 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    2376:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dark_menu_parameters_len>
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    237e:	88 e0       	ldi	r24, 0x08	; 8
    2380:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    2382:	04 c0       	rjmp	.+8      	; 0x238c <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2384:	22 e0       	ldi	r18, 0x02	; 2
    2386:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    238c:	c8 2f       	mov	r28, r24
    238e:	7c 01       	movw	r14, r24
    2390:	e2 0e       	add	r14, r18
    2392:	f3 1e       	adc	r15, r19
    2394:	99 27       	eor	r25, r25
    2396:	8e 15       	cp	r24, r14
    2398:	9f 05       	cpc	r25, r15
    239a:	cc f4       	brge	.+50     	; 0x23ce <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    239c:	8c 2f       	mov	r24, r28
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 90 0c 	call	0x1920	; 0x1920 <EEPROM_read>
    23a4:	f8 01       	movw	r30, r16
    23a6:	81 93       	st	Z+, r24
    23a8:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23aa:	cf 5f       	subi	r28, 0xFF	; 255
    23ac:	8c 2f       	mov	r24, r28
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	8e 15       	cp	r24, r14
    23b2:	9f 05       	cpc	r25, r15
    23b4:	9c f3       	brlt	.-26     	; 0x239c <mem_read_data+0x52>
    23b6:	0b c0       	rjmp	.+22     	; 0x23ce <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    23be:	86 e0       	ldi	r24, 0x06	; 6
    23c0:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23c2:	c8 2f       	mov	r28, r24
    23c4:	7c 01       	movw	r14, r24
    23c6:	f2 e0       	ldi	r31, 0x02	; 2
    23c8:	ef 0e       	add	r14, r31
    23ca:	f1 1c       	adc	r15, r1
    23cc:	e7 cf       	rjmp	.-50     	; 0x239c <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	08 95       	ret

000023da <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    23fa:	c2 e3       	ldi	r28, 0x32	; 50
    23fc:	d0 e0       	ldi	r29, 0x00	; 0
    23fe:	9e 01       	movw	r18, r28
    2400:	28 1b       	sub	r18, r24
    2402:	31 09       	sbc	r19, r1
    2404:	c9 01       	movw	r24, r18
    2406:	89 01       	movw	r16, r18
    2408:	00 0f       	add	r16, r16
    240a:	11 1f       	adc	r17, r17
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	08 0f       	add	r16, r24
    241a:	19 1f       	adc	r17, r25
    241c:	00 53       	subi	r16, 0x30	; 48
    241e:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    2426:	c8 1b       	sub	r28, r24
    2428:	d1 09       	sbc	r29, r1
    242a:	be 01       	movw	r22, r28
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	cc 0f       	add	r28, r28
    2432:	dd 1f       	adc	r29, r29
    2434:	cc 0f       	add	r28, r28
    2436:	dd 1f       	adc	r29, r29
    2438:	cc 0f       	add	r28, r28
    243a:	dd 1f       	adc	r29, r29
    243c:	6c 0f       	add	r22, r28
    243e:	7d 1f       	adc	r23, r29
    2440:	65 50       	subi	r22, 0x05	; 5
    2442:	7b 4f       	sbci	r23, 0xFB	; 251
    2444:	60 1b       	sub	r22, r16
    2446:	71 0b       	sbc	r23, r17
    2448:	07 2e       	mov	r0, r23
    244a:	00 0c       	add	r0, r0
    244c:	88 0b       	sbc	r24, r24
    244e:	99 0b       	sbc	r25, r25
    2450:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
    2454:	4b 01       	movw	r8, r22
    2456:	5c 01       	movw	r10, r24
    2458:	6f 2d       	mov	r22, r15
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 27 1a 	call	0x344e	; 0x344e <__floatunsisf>
    2464:	9b 01       	movw	r18, r22
    2466:	ac 01       	movw	r20, r24
    2468:	c5 01       	movw	r24, r10
    246a:	b4 01       	movw	r22, r8
    246c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	46 ec       	ldi	r20, 0xC6	; 198
    2476:	52 e4       	ldi	r21, 0x42	; 66
    2478:	0e 94 7f 19 	call	0x32fe	; 0x32fe <__divsf3>
    247c:	6b 01       	movw	r12, r22
    247e:	7c 01       	movw	r14, r24
    2480:	b8 01       	movw	r22, r16
    2482:	11 0f       	add	r17, r17
    2484:	88 0b       	sbc	r24, r24
    2486:	99 0b       	sbc	r25, r25
    2488:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	c7 01       	movw	r24, r14
    2492:	b6 01       	movw	r22, r12
    2494:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    2498:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    249c:	7b bd       	out	0x2b, r23	; 43
    249e:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	bf 90       	pop	r11
    24b2:	af 90       	pop	r10
    24b4:	9f 90       	pop	r9
    24b6:	8f 90       	pop	r8
    24b8:	08 95       	ret

000024ba <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    24ba:	94 e0       	ldi	r25, 0x04	; 4
    24bc:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <servoD>
	servo_set_pwm_val(value);
    24c0:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
    24c4:	08 95       	ret

000024c6 <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    24c6:	88 23       	and	r24, r24
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <servo_error+0xa>
		servo_set_pwm_val(0);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
	LED_SERVO_OFF;
    24d0:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    24d2:	86 e0       	ldi	r24, 0x06	; 6
    24d4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
    24d8:	08 95       	ret

000024da <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    24de:	2f e1       	ldi	r18, 0x1F	; 31
    24e0:	3e e4       	ldi	r19, 0x4E	; 78
    24e2:	37 bd       	out	0x27, r19	; 39
    24e4:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    24e6:	81 b3       	in	r24, 0x11	; 17
    24e8:	80 63       	ori	r24, 0x30	; 48
    24ea:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    24ec:	19 bc       	out	0x29, r1	; 41
    24ee:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    24f0:	1b bc       	out	0x2b, r1	; 43
    24f2:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    24f4:	8f b5       	in	r24, 0x2f	; 47
    24f6:	82 60       	ori	r24, 0x02	; 2
    24f8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    24fa:	8e b5       	in	r24, 0x2e	; 46
    24fc:	88 61       	ori	r24, 0x18	; 24
    24fe:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    2500:	8f b5       	in	r24, 0x2f	; 47
    2502:	80 68       	ori	r24, 0x80	; 128
    2504:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    2506:	8e b5       	in	r24, 0x2e	; 46
    2508:	82 60       	ori	r24, 0x02	; 2
    250a:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    250c:	3b bd       	out	0x2b, r19	; 43
    250e:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    2510:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    2518:	c9 ea       	ldi	r28, 0xA9	; 169
    251a:	d4 e0       	ldi	r29, 0x04	; 4
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	88 83       	st	Y, r24
	servoD.value = 0;
    2520:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    2522:	8d ea       	ldi	r24, 0xAD	; 173
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	0e 94 2f 18 	call	0x305e	; 0x305e <evTime_init>
	servoD.try_cnt = 0;
    252a:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    252c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	debug_msg("SERVO: init\n");
    2530:	8f ea       	ldi	r24, 0xAF	; 175
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	9f 93       	push	r25
    2536:	8f 93       	push	r24
    2538:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    2546:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <servoD>
    254a:	92 50       	subi	r25, 0x02	; 2
    254c:	21 e0       	ldi	r18, 0x01	; 1
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	92 30       	cpi	r25, 0x02	; 2
    2552:	10 f0       	brcs	.+4      	; 0x2558 <servo_is_open+0x12>
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
}
    2558:	c9 01       	movw	r24, r18
    255a:	08 95       	ret

0000255c <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    255c:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <servoD>
    2560:	91 30       	cpi	r25, 0x01	; 1
    2562:	a1 f4       	brne	.+40     	; 0x258c <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    2564:	e9 ea       	ldi	r30, 0xA9	; 169
    2566:	f4 e0       	ldi	r31, 0x04	; 4
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	90 83       	st	Z, r25
		servoD.value = value;
    256c:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    256e:	1f 92       	push	r1
    2570:	8f 93       	push	r24
    2572:	8c eb       	ldi	r24, 0xBC	; 188
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	9f 93       	push	r25
    2578:	8f 93       	push	r24
    257a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
}
    2590:	08 95       	ret

00002592 <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    2592:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    2596:	9f ef       	ldi	r25, 0xFF	; 255
    2598:	98 0f       	add	r25, r24
    259a:	92 30       	cpi	r25, 0x02	; 2
    259c:	28 f4       	brcc	.+10     	; 0x25a8 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    259e:	e9 ea       	ldi	r30, 0xA9	; 169
    25a0:	f4 e0       	ldi	r31, 0x04	; 4
    25a2:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    25a4:	85 e0       	ldi	r24, 0x05	; 5
    25a6:	80 83       	st	Z, r24
    25a8:	08 95       	ret

000025aa <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    25aa:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <servoD+0x9>
}
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	08 95       	ret

000025b2 <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    25b2:	0e 94 a3 12 	call	0x2546	; 0x2546 <servo_is_open>
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	d1 f0       	breq	.+52     	; 0x25ee <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    25c0:	e9 ea       	ldi	r30, 0xA9	; 169
    25c2:	f4 e0       	ldi	r31, 0x04	; 4
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	80 83       	st	Z, r24
		servoD.value = 0;
    25c8:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    25ca:	1f 92       	push	r1
    25cc:	1f 92       	push	r1
    25ce:	83 ed       	ldi	r24, 0xD3	; 211
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	9f 93       	push	r25
    25d4:	8f 93       	push	r24
    25d6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    25da:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    25dc:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
		return 1;
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    25ee:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <servoD>
    25f2:	25 30       	cpi	r18, 0x05	; 5
    25f4:	31 f4       	brne	.+12     	; 0x2602 <servo_close+0x50>
	{
		servo_exit_try();
    25f6:	0e 94 02 13 	call	0x2604	; 0x2604 <servo_exit_try>
		error_servo_timer();
    25fa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
		return 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    2602:	08 95       	ret

00002604 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    2604:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <servoD+0x1>
    2608:	82 30       	cpi	r24, 0x02	; 2
    260a:	29 f4       	brne	.+10     	; 0x2616 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    260c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
		servo_close();
    2610:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <servo_close>
    2614:	09 c0       	rjmp	.+18     	; 0x2628 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	71 f4       	brne	.+28     	; 0x2636 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    261a:	e9 ea       	ldi	r30, 0xA9	; 169
    261c:	f4 e0       	ldi	r31, 0x04	; 4
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	80 83       	st	Z, r24
		servo_open(servoD.value);
    2622:	83 81       	ldd	r24, Z+3	; 0x03
    2624:	0e 94 1c 13 	call	0x2638	; 0x2638 <servo_open>
	}
	else return;
	try_count = 0;
    2628:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
	servoD.try_cnt++;
    262c:	e9 ea       	ldi	r30, 0xA9	; 169
    262e:	f4 e0       	ldi	r31, 0x04	; 4
    2630:	81 85       	ldd	r24, Z+9	; 0x09
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	81 87       	std	Z+9, r24	; 0x09
    2636:	08 95       	ret

00002638 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    2638:	cf 93       	push	r28
    263a:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    263c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    2640:	9f ef       	ldi	r25, 0xFF	; 255
    2642:	98 0f       	add	r25, r24
    2644:	93 30       	cpi	r25, 0x03	; 3
    2646:	d0 f4       	brcc	.+52     	; 0x267c <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    2648:	e9 ea       	ldi	r30, 0xA9	; 169
    264a:	f4 e0       	ldi	r31, 0x04	; 4
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	80 83       	st	Z, r24
		servoD.value = value;
    2650:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    2652:	8c 2f       	mov	r24, r28
    2654:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    2658:	1f 92       	push	r1
    265a:	cf 93       	push	r28
    265c:	84 ee       	ldi	r24, 0xE4	; 228
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	9f 93       	push	r25
    2662:	8f 93       	push	r24
    2664:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    2668:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    266a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
		return 1;
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    267c:	85 30       	cpi	r24, 0x05	; 5
    267e:	39 f4       	brne	.+14     	; 0x268e <servo_open+0x56>
	{
		servo_exit_try();
    2680:	0e 94 02 13 	call	0x2604	; 0x2604 <servo_exit_try>
		error_servo_timer();
    2684:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
		return 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <servo_open+0x5a>
	}
	else return 0;
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
}
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2696:	ab 01       	movw	r20, r22
    2698:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    269a:	8d ea       	ldi	r24, 0xAD	; 173
    269c:	94 e0       	ldi	r25, 0x04	; 4
    269e:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
    26a2:	08 95       	ret

000026a4 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    26aa:	4b e4       	ldi	r20, 0x4B	; 75
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	86 ef       	ldi	r24, 0xF6	; 246
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	0e 94 83 18 	call	0x3106	; 0x3106 <evTime_process_period>
    26ba:	89 2b       	or	r24, r25
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <servo_process+0x1c>
    26be:	be c0       	rjmp	.+380    	; 0x283c <servo_process+0x198>
	{
		switch(servoD.state)
    26c0:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <servoD>
    26c4:	85 30       	cpi	r24, 0x05	; 5
    26c6:	a1 f0       	breq	.+40     	; 0x26f0 <servo_process+0x4c>
    26c8:	30 f4       	brcc	.+12     	; 0x26d6 <servo_process+0x32>
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	59 f0       	breq	.+22     	; 0x26e4 <servo_process+0x40>
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <servo_process+0x30>
    26d2:	69 c0       	rjmp	.+210    	; 0x27a6 <servo_process+0x102>
    26d4:	a3 c0       	rjmp	.+326    	; 0x281c <servo_process+0x178>
    26d6:	86 30       	cpi	r24, 0x06	; 6
    26d8:	09 f4       	brne	.+2      	; 0x26dc <servo_process+0x38>
    26da:	7f c0       	rjmp	.+254    	; 0x27da <servo_process+0x136>
    26dc:	87 30       	cpi	r24, 0x07	; 7
    26de:	09 f4       	brne	.+2      	; 0x26e2 <servo_process+0x3e>
    26e0:	99 c0       	rjmp	.+306    	; 0x2814 <servo_process+0x170>
    26e2:	9c c0       	rjmp	.+312    	; 0x281c <servo_process+0x178>
		{
			case SERVO_OPEN:
			servoD.value = value;
    26e4:	c0 93 ac 04 	sts	0x04AC, r28	; 0x8004ac <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    26e8:	8c 2f       	mov	r24, r28
    26ea:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
			break;
    26ee:	96 c0       	rjmp	.+300    	; 0x281c <servo_process+0x178>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    26f0:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    26f4:	81 11       	cpse	r24, r1
    26f6:	13 c0       	rjmp	.+38     	; 0x271e <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	70 e0       	ldi	r23, 0x00	; 0
    2700:	81 ef       	ldi	r24, 0xF1	; 241
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
		try_count++;
    2708:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    2712:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <servoD+0x3>
    2716:	89 0f       	add	r24, r25
    2718:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
    271c:	30 c0       	rjmp	.+96     	; 0x277e <servo_process+0xda>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	89 30       	cpi	r24, 0x09	; 9
    2722:	08 f5       	brcc	.+66     	; 0x2766 <servo_process+0xc2>
	{
		if (evTime_check(&timeout) == 1)
    2724:	81 ef       	ldi	r24, 0xF1	; 241
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	39 f5       	brne	.+78     	; 0x277e <servo_process+0xda>
		{
			evTime_start(&timeout, 250);
    2730:	4a ef       	ldi	r20, 0xFA	; 250
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	81 ef       	ldi	r24, 0xF1	; 241
    273a:	92 e0       	ldi	r25, 0x02	; 2
    273c:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
			try_count++;
    2740:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <try_count>
			servo_set_pwm_val(servoD.value + try_count*dark_menu_get_value(MENU_TRY_OPEN_CALIBRATION));
    274a:	c0 91 ac 04 	lds	r28, 0x04AC	; 0x8004ac <servoD+0x3>
    274e:	87 e0       	ldi	r24, 0x07	; 7
    2750:	0e 94 3e 07 	call	0xe7c	; 0xe7c <dark_menu_get_value>
    2754:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <try_count>
    2758:	89 9f       	mul	r24, r25
    275a:	c0 0d       	add	r28, r0
    275c:	11 24       	eor	r1, r1
    275e:	8c 2f       	mov	r24, r28
    2760:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
    2764:	0c c0       	rjmp	.+24     	; 0x277e <servo_process+0xda>
		}
	}
	else
	{
		try_count = 0;
    2766:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <try_count>
		servo_set_pwm_val(servoD.value);
    276a:	c9 ea       	ldi	r28, 0xA9	; 169
    276c:	d4 e0       	ldi	r29, 0x04	; 4
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	0e 94 ed 11 	call	0x23da	; 0x23da <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    277e:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <servoD+0x3>
    2782:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <try_count>
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	82 0f       	add	r24, r18
    278a:	91 1d       	adc	r25, r1
    278c:	9f 93       	push	r25
    278e:	8f 93       	push	r24
    2790:	86 ef       	ldi	r24, 0xF6	; 246
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	9f 93       	push	r25
    2796:	8f 93       	push	r24
    2798:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	3b c0       	rjmp	.+118    	; 0x281c <servo_process+0x178>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    27a6:	8c ee       	ldi	r24, 0xEC	; 236
    27a8:	92 e0       	ldi	r25, 0x02	; 2
    27aa:	0e 94 4f 18 	call	0x309e	; 0x309e <evTime_is_stated>
    27ae:	89 2b       	or	r24, r25
    27b0:	59 f0       	breq	.+22     	; 0x27c8 <servo_process+0x124>
	{
		if (evTime_check(&timeout) == 1)
    27b2:	8c ee       	ldi	r24, 0xEC	; 236
    27b4:	92 e0       	ldi	r25, 0x02	; 2
    27b6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	79 f5       	brne	.+94     	; 0x281c <servo_process+0x178>
		{
			servoD.state = SERVO_OPEN;
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
			LED_SERVO_ON;
    27c4:	96 9a       	sbi	0x12, 6	; 18
    27c6:	2a c0       	rjmp	.+84     	; 0x281c <servo_process+0x178>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    27c8:	48 eb       	ldi	r20, 0xB8	; 184
    27ca:	5b e0       	ldi	r21, 0x0B	; 11
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	8c ee       	ldi	r24, 0xEC	; 236
    27d2:	92 e0       	ldi	r25, 0x02	; 2
    27d4:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
    27d8:	21 c0       	rjmp	.+66     	; 0x281c <servo_process+0x178>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    27da:	87 ee       	ldi	r24, 0xE7	; 231
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	0e 94 4f 18 	call	0x309e	; 0x309e <evTime_is_stated>
    27e2:	89 2b       	or	r24, r25
    27e4:	71 f0       	breq	.+28     	; 0x2802 <servo_process+0x15e>
	{
		if (evTime_check(&timeout) == 1)
    27e6:	87 ee       	ldi	r24, 0xE7	; 231
    27e8:	92 e0       	ldi	r25, 0x02	; 2
    27ea:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	a9 f4       	brne	.+42     	; 0x281c <servo_process+0x178>
		{
			servoD.state = SERVO_ERROR;
    27f2:	87 e0       	ldi	r24, 0x07	; 7
    27f4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    27f8:	8f e1       	ldi	r24, 0x1F	; 31
    27fa:	9e e4       	ldi	r25, 0x4E	; 78
    27fc:	9b bd       	out	0x2b, r25	; 43
    27fe:	8a bd       	out	0x2a, r24	; 42
    2800:	0d c0       	rjmp	.+26     	; 0x281c <servo_process+0x178>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    2802:	4c ea       	ldi	r20, 0xAC	; 172
    2804:	5d e0       	ldi	r21, 0x0D	; 13
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	87 ee       	ldi	r24, 0xE7	; 231
    280c:	92 e0       	ldi	r25, 0x02	; 2
    280e:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
    2812:	04 c0       	rjmp	.+8      	; 0x281c <servo_process+0x178>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2814:	8f e1       	ldi	r24, 0x1F	; 31
    2816:	9e e4       	ldi	r25, 0x4E	; 78
    2818:	9b bd       	out	0x2b, r25	; 43
    281a:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    281c:	8d ea       	ldi	r24, 0xAD	; 173
    281e:	94 e0       	ldi	r25, 0x04	; 4
    2820:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	51 f4       	brne	.+20     	; 0x283c <servo_process+0x198>
		{
			servoD.try_cnt = 0;
    2828:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	92 e0       	ldi	r25, 0x02	; 2
    2830:	9f 93       	push	r25
    2832:	8f 93       	push	r24
    2834:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
		}
	}
}
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	08 95       	ret

00002842 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2842:	e2 e4       	ldi	r30, 0x42	; 66
    2844:	f4 e0       	ldi	r31, 0x04	; 4
    2846:	16 86       	std	Z+14, r1	; 0x0e
    2848:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    284a:	12 86       	std	Z+10, r1	; 0x0a
    284c:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    284e:	14 86       	std	Z+12, r1	; 0x0c
    2850:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2852:	e5 e1       	ldi	r30, 0x15	; 21
    2854:	f4 e0       	ldi	r31, 0x04	; 4
    2856:	16 86       	std	Z+14, r1	; 0x0e
    2858:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    285a:	12 86       	std	Z+10, r1	; 0x0a
    285c:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    285e:	14 86       	std	Z+12, r1	; 0x0c
    2860:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2862:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <button3+0xc>
    2866:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <button3+0xb>
	
	button5.timer_callback = 0;
    286a:	e3 ef       	ldi	r30, 0xF3	; 243
    286c:	f3 e0       	ldi	r31, 0x03	; 3
    286e:	16 86       	std	Z+14, r1	; 0x0e
    2870:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2872:	14 86       	std	Z+12, r1	; 0x0c
    2874:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2876:	12 86       	std	Z+10, r1	; 0x0a
    2878:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    287a:	e3 e3       	ldi	r30, 0x33	; 51
    287c:	f4 e0       	ldi	r31, 0x04	; 4
    287e:	16 86       	std	Z+14, r1	; 0x0e
    2880:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2882:	14 86       	std	Z+12, r1	; 0x0c
    2884:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2886:	12 86       	std	Z+10, r1	; 0x0a
    2888:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    288a:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <button7+0xc>
    288e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <button7+0xb>
	
	button8.fall_callback = 0;
    2892:	e0 e6       	ldi	r30, 0x60	; 96
    2894:	f4 e0       	ldi	r31, 0x04	; 4
    2896:	14 86       	std	Z+12, r1	; 0x0c
    2898:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    289a:	16 86       	std	Z+14, r1	; 0x0e
    289c:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    289e:	12 86       	std	Z+10, r1	; 0x0a
    28a0:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    28a2:	e5 ed       	ldi	r30, 0xD5	; 213
    28a4:	f3 e0       	ldi	r31, 0x03	; 3
    28a6:	14 86       	std	Z+12, r1	; 0x0c
    28a8:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    28aa:	16 86       	std	Z+14, r1	; 0x0e
    28ac:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    28ae:	12 86       	std	Z+10, r1	; 0x0a
    28b0:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    28b2:	e4 ee       	ldi	r30, 0xE4	; 228
    28b4:	f3 e0       	ldi	r31, 0x03	; 3
    28b6:	14 86       	std	Z+12, r1	; 0x0c
    28b8:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    28ba:	16 86       	std	Z+14, r1	; 0x0e
    28bc:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    28be:	12 86       	std	Z+10, r1	; 0x0a
    28c0:	11 86       	std	Z+9, r1	; 0x09
    28c2:	08 95       	ret

000028c4 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    28c4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	49 f0       	breq	.+18     	; 0x28de <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    28cc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    28d0:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    28d4:	98 60       	ori	r25, 0x08	; 8
    28d6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    28da:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    28de:	08 95       	ret

000028e0 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    28e0:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    28e4:	82 30       	cpi	r24, 0x02	; 2
    28e6:	49 f0       	breq	.+18     	; 0x28fa <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    28e8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    28ec:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    28f0:	80 68       	ori	r24, 0x80	; 128
    28f2:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    28f6:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    28fa:	08 95       	ret

000028fc <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    28fc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2900:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2904:	92 60       	ori	r25, 0x02	; 2
    2906:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    290a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    290e:	08 95       	ret

00002910 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2910:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2914:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2918:	99 7f       	andi	r25, 0xF9	; 249
    291a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    291e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2922:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    2926:	08 95       	ret

00002928 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2928:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    292c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2930:	80 62       	ori	r24, 0x20	; 32
    2932:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2936:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    293a:	08 95       	ret

0000293c <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    293c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2940:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2944:	8f 79       	andi	r24, 0x9F	; 159
    2946:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    294a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    294e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
    2952:	08 95       	ret

00002954 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2954:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2958:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    295c:	90 62       	ori	r25, 0x20	; 32
    295e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2962:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2966:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    296a:	8b 30       	cpi	r24, 0x0B	; 11
    296c:	18 f0       	brcs	.+6      	; 0x2974 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    296e:	81 50       	subi	r24, 0x01	; 1
    2970:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2974:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2986:	08 95       	ret

00002988 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2988:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    298c:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2990:	90 62       	ori	r25, 0x20	; 32
    2992:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2996:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value > 10)
    299a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    299e:	8b 30       	cpi	r24, 0x0B	; 11
    29a0:	18 f0       	brcs	.+6      	; 0x29a8 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    29a2:	81 50       	subi	r24, 0x01	; 1
    29a4:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    29a8:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	0e 94 2e 0a 	call	0x145c	; 0x145c <disp_get_state>
    29b8:	02 97       	sbiw	r24, 0x02	; 2
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
	state_measure_volt++;
    29ce:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	19 f4       	brne	.+6      	; 0x29e2 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    29dc:	66 e0       	ldi	r22, 0x06	; 6
    29de:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    29e2:	08 95       	ret

000029e4 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    29e4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    29e8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    29ec:	90 62       	ori	r25, 0x20	; 32
    29ee:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    29f2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 99)
    29f6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    29fa:	83 36       	cpi	r24, 0x63	; 99
    29fc:	18 f4       	brcc	.+6      	; 0x2a04 <button_motor_add_fall_cb+0x20>
		motor_value++;
    29fe:	8f 5f       	subi	r24, 0xFF	; 255
    2a00:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2a04:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 2e 0a 	call	0x145c	; 0x145c <disp_get_state>
    2a14:	02 97       	sbiw	r24, 0x02	; 2
    2a16:	29 f4       	brne	.+10     	; 0x2a22 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2a20:	04 c0       	rjmp	.+8      	; 0x2a2a <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a22:	61 e0       	ldi	r22, 0x01	; 1
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
	state_measure_volt++;
    2a2a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (state_measure_volt == 2)
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	19 f4       	brne	.+6      	; 0x2a3e <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2a38:	66 e0       	ldi	r22, 0x06	; 6
    2a3a:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2a3e:	08 95       	ret

00002a40 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2a40:	0e 94 3e 0a 	call	0x147c	; 0x147c <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2a44:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a48:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a4c:	97 7e       	andi	r25, 0xE7	; 231
    2a4e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a52:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2a56:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2a5a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2a5e:	88 23       	and	r24, r24
    2a60:	19 f0       	breq	.+6      	; 0x2a68 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2a62:	81 50       	subi	r24, 0x01	; 1
    2a64:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0e 94 2e 0a 	call	0x145c	; 0x145c <disp_get_state>
    2a6e:	02 97       	sbiw	r24, 0x02	; 2
    2a70:	29 f4       	brne	.+10     	; 0x2a7c <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2a7a:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2a84:	08 95       	ret

00002a86 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2a86:	0e 94 3e 0a 	call	0x147c	; 0x147c <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2a8a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2a8e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2a92:	8f 77       	andi	r24, 0x7F	; 127
    2a94:	9e 7f       	andi	r25, 0xFE	; 254
    2a96:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2a9a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	counter_very_fast_motor_sub = 0;
    2a9e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2aa2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <state_measure_volt>
    2aa6:	88 23       	and	r24, r24
    2aa8:	19 f0       	breq	.+6      	; 0x2ab0 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2aaa:	81 50       	subi	r24, 0x01	; 1
    2aac:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	0e 94 2e 0a 	call	0x145c	; 0x145c <disp_get_state>
    2ab6:	02 97       	sbiw	r24, 0x02	; 2
    2ab8:	29 f4       	brne	.+10     	; 0x2ac4 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2aba:	61 e0       	ldi	r22, 0x01	; 1
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2ac2:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2ac4:	61 e0       	ldi	r22, 0x01	; 1
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2acc:	08 95       	ret

00002ace <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2ace:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ad2:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2ad6:	90 62       	ori	r25, 0x20	; 32
    2ad8:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2adc:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2ae0:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2ae4:	83 36       	cpi	r24, 0x63	; 99
    2ae6:	28 f4       	brcc	.+10     	; 0x2af2 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		error_servo_timer();
    2aee:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2af2:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
    2b04:	08 95       	ret

00002b06 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2b06:	e5 eb       	ldi	r30, 0xB5	; 181
    2b08:	f4 e0       	ldi	r31, 0x04	; 4
    2b0a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2b0e:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2b10:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2b14:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2b16:	bf 01       	movw	r22, r30
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <mem_save_data>
    2b1e:	08 95       	ret

00002b20 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2b20:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2b24:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2b28:	90 62       	ori	r25, 0x20	; 32
    2b2a:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2b2e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (motor_value < 10)
    2b32:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <motor_value>
    2b36:	8a 30       	cpi	r24, 0x0A	; 10
    2b38:	38 f4       	brcc	.+14     	; 0x2b48 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2b3a:	8a e0       	ldi	r24, 0x0A	; 10
    2b3c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2b40:	6a e0       	ldi	r22, 0x0A	; 10
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	}
	sys_save_display();
    2b48:	0e 94 83 15 	call	0x2b06	; 0x2b06 <sys_save_display>
	if(!dcmotor_is_on())
    2b4c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_is_on>
    2b50:	89 2b       	or	r24, r25
    2b52:	39 f4       	brne	.+14     	; 0x2b62 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2b54:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2b58:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2b5c:	0e 94 ae 12 	call	0x255c	; 0x255c <servo_delayed_open>
    2b60:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2b62:	0e 94 db 07 	call	0xfb6	; 0xfb6 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2b66:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <servo_close>
    2b6a:	08 95       	ret

00002b6c <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2b6c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2b70:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2b74:	90 62       	ori	r25, 0x20	; 32
    2b76:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2b7a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	if (servo_vibro_value < 10)
    2b7e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2b82:	8a 30       	cpi	r24, 0x0A	; 10
    2b84:	38 f4       	brcc	.+14     	; 0x2b94 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2b86:	8a e0       	ldi	r24, 0x0A	; 10
    2b88:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2b8c:	6a e0       	ldi	r22, 0x0A	; 10
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2b94:	0e 94 a3 12 	call	0x2546	; 0x2546 <servo_is_open>
    2b98:	89 2b       	or	r24, r25
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <button_on_off_pwm+0x36>
    2b9c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <servo_close>
    2ba0:	08 95       	ret
	else servo_open(servo_vibro_value);
    2ba2:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2ba6:	0e 94 1c 13 	call	0x2638	; 0x2638 <servo_open>
    2baa:	08 95       	ret

00002bac <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.fall_callback = button4_toggle_system;
    2bac:	8f e7       	ldi	r24, 0x7F	; 127
    2bae:	96 e1       	ldi	r25, 0x16	; 22
    2bb0:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <button4+0xc>
    2bb4:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <button4+0xb>
	disp_set_state(DISP_ALL,SEG_OFF);
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
	disp_off_segments();
    2bc0:	0e 94 95 0a 	call	0x152a	; 0x152a <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2bc4:	63 eb       	ldi	r22, 0xB3	; 179
    2bc6:	74 e0       	ldi	r23, 0x04	; 4
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	0e 94 a5 11 	call	0x234a	; 0x234a <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2bce:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <mem_last_save+0x1>
    2bd2:	96 ef       	ldi	r25, 0xF6	; 246
    2bd4:	98 0f       	add	r25, r24
    2bd6:	9a 35       	cpi	r25, 0x5A	; 90
    2bd8:	10 f4       	brcc	.+4      	; 0x2bde <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2bda:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2bde:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <mem_last_save>
    2be2:	96 ef       	ldi	r25, 0xF6	; 246
    2be4:	98 0f       	add	r25, r24
    2be6:	9a 35       	cpi	r25, 0x5A	; 90
    2be8:	10 f4       	brcc	.+4      	; 0x2bee <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2bea:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <motor_value>
    2bee:	08 95       	ret

00002bf0 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2bf0:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2bf4:	42 e0       	ldi	r20, 0x02	; 2
    2bf6:	68 ee       	ldi	r22, 0xE8	; 232
    2bf8:	73 e0       	ldi	r23, 0x03	; 3
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2c02:	0e 94 b6 07 	call	0xf6c	; 0xf6c <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	0e 94 6d 12 	call	0x24da	; 0x24da <servo_init>
	#endif
	error_init();
    2c0c:	0e 94 b6 0c 	call	0x196c	; 0x196c <error_init>
	init_measure();
    2c10:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <init_measure>
	init_buzzer();
    2c14:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2c20:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2c24:	e2 e4       	ldi	r30, 0x42	; 66
    2c26:	f4 e0       	ldi	r31, 0x04	; 4
    2c28:	82 e6       	ldi	r24, 0x62	; 98
    2c2a:	94 e1       	ldi	r25, 0x14	; 20
    2c2c:	96 87       	std	Z+14, r25	; 0x0e
    2c2e:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2c30:	84 ec       	ldi	r24, 0xC4	; 196
    2c32:	94 e1       	ldi	r25, 0x14	; 20
    2c34:	94 87       	std	Z+12, r25	; 0x0c
    2c36:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2c38:	80 e2       	ldi	r24, 0x20	; 32
    2c3a:	95 e1       	ldi	r25, 0x15	; 21
    2c3c:	92 87       	std	Z+10, r25	; 0x0a
    2c3e:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2c40:	e5 e1       	ldi	r30, 0x15	; 21
    2c42:	f4 e0       	ldi	r31, 0x04	; 4
    2c44:	80 e7       	ldi	r24, 0x70	; 112
    2c46:	94 e1       	ldi	r25, 0x14	; 20
    2c48:	96 87       	std	Z+14, r25	; 0x0e
    2c4a:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2c4c:	82 ef       	ldi	r24, 0xF2	; 242
    2c4e:	94 e1       	ldi	r25, 0x14	; 20
    2c50:	94 87       	std	Z+12, r25	; 0x0c
    2c52:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2c54:	83 e4       	ldi	r24, 0x43	; 67
    2c56:	95 e1       	ldi	r25, 0x15	; 21
    2c58:	92 87       	std	Z+10, r25	; 0x0a
    2c5a:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2c5c:	80 e9       	ldi	r24, 0x90	; 144
    2c5e:	95 e1       	ldi	r25, 0x15	; 21
    2c60:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <button3+0xc>
    2c64:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2c68:	e3 ef       	ldi	r30, 0xF3	; 243
    2c6a:	f3 e0       	ldi	r31, 0x03	; 3
    2c6c:	8e e7       	ldi	r24, 0x7E	; 126
    2c6e:	94 e1       	ldi	r25, 0x14	; 20
    2c70:	96 87       	std	Z+14, r25	; 0x0e
    2c72:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2c74:	88 e8       	ldi	r24, 0x88	; 136
    2c76:	94 e1       	ldi	r25, 0x14	; 20
    2c78:	92 87       	std	Z+10, r25	; 0x0a
    2c7a:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2c7c:	8a ea       	ldi	r24, 0xAA	; 170
    2c7e:	94 e1       	ldi	r25, 0x14	; 20
    2c80:	94 87       	std	Z+12, r25	; 0x0c
    2c82:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2c84:	e3 e3       	ldi	r30, 0x33	; 51
    2c86:	f4 e0       	ldi	r31, 0x04	; 4
    2c88:	84 e9       	ldi	r24, 0x94	; 148
    2c8a:	94 e1       	ldi	r25, 0x14	; 20
    2c8c:	96 87       	std	Z+14, r25	; 0x0e
    2c8e:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2c90:	8e e9       	ldi	r24, 0x9E	; 158
    2c92:	94 e1       	ldi	r25, 0x14	; 20
    2c94:	92 87       	std	Z+10, r25	; 0x0a
    2c96:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2c98:	87 e6       	ldi	r24, 0x67	; 103
    2c9a:	95 e1       	ldi	r25, 0x15	; 21
    2c9c:	94 87       	std	Z+12, r25	; 0x0c
    2c9e:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2ca0:	86 eb       	ldi	r24, 0xB6	; 182
    2ca2:	95 e1       	ldi	r25, 0x15	; 21
    2ca4:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <button7+0xc>
    2ca8:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2cac:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2cb6:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
    2cc0:	08 95       	ret

00002cc2 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2cc2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <state_measure_volt>
	dcmotorpwm_deinit();
    2cc6:	0e 94 ca 07 	call	0xf94	; 0xf94 <dcmotorpwm_deinit>
	off_button();
    2cca:	0e 94 21 14 	call	0x2842	; 0x2842 <off_button>
	error_deinit();
    2cce:	0e 94 cb 0c 	call	0x1996	; 0x1996 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2cd2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2cd6:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <system_events+0x1>
    2cda:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	0e 94 4f 0a 	call	0x149e	; 0x149e <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2ce6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2cea:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2cee:	8e 7f       	andi	r24, 0xFE	; 254
    2cf0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2cf4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
	#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
	init_menu();
    2cf8:	0e 94 ef 06 	call	0xdde	; 0xdde <init_menu>
    2cfc:	08 95       	ret

00002cfe <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2cfe:	0e 94 83 15 	call	0x2b06	; 0x2b06 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2d02:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d06:	80 ff       	sbrs	r24, 0
    2d08:	03 c0       	rjmp	.+6      	; 0x2d10 <button4_toggle_system+0x12>
	{
		off_system();
    2d0a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <off_system>
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2d10:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2d14:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d18:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2d1c:	90 62       	ori	r25, 0x20	; 32
    2d1e:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2d22:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
    2d26:	08 95       	ret

00002d28 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2d28:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    2d2c:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    2d30:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    2d34:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    2d38:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2131>
    2d3c:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2131+0x1>
    2d40:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2131+0x2>
    2d44:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2131+0x3>
    2d48:	84 17       	cp	r24, r20
    2d4a:	95 07       	cpc	r25, r21
    2d4c:	a6 07       	cpc	r26, r22
    2d4e:	b7 07       	cpc	r27, r23
    2d50:	08 f0       	brcs	.+2      	; 0x2d54 <disp_fast_process+0x2c>
    2d52:	a4 c0       	rjmp	.+328    	; 0x2e9c <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2d54:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d58:	85 ff       	sbrs	r24, 5
    2d5a:	21 c0       	rjmp	.+66     	; 0x2d9e <disp_fast_process+0x76>
    2d5c:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2d60:	63 36       	cpi	r22, 0x63	; 99
    2d62:	e8 f4       	brcc	.+58     	; 0x2d9e <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2d64:	6b 30       	cpi	r22, 0x0B	; 11
    2d66:	40 f0       	brcs	.+16     	; 0x2d78 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d68:	6f 5f       	subi	r22, 0xFF	; 255
    2d6a:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
				error_servo_timer();
    2d74:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2d78:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <counter_very_fast_servo_add>
    2d7c:	8f 5f       	subi	r24, 0xFF	; 255
    2d7e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2d82:	8f 30       	cpi	r24, 0x0F	; 15
    2d84:	60 f0       	brcs	.+24     	; 0x2d9e <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2d86:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2d8a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2d8e:	8f 7d       	andi	r24, 0xDF	; 223
    2d90:	80 64       	ori	r24, 0x40	; 64
    2d92:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2d96:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_add = 0;
    2d9a:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2d9e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2da2:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2da6:	91 ff       	sbrs	r25, 1
    2da8:	21 c0       	rjmp	.+66     	; 0x2dec <disp_fast_process+0xc4>
    2daa:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2dae:	66 23       	and	r22, r22
    2db0:	e9 f0       	breq	.+58     	; 0x2dec <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2db2:	6b 30       	cpi	r22, 0x0B	; 11
    2db4:	40 f0       	brcs	.+16     	; 0x2dc6 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2db6:	61 50       	subi	r22, 0x01	; 1
    2db8:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
				error_servo_timer();
    2dc2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2dc6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <counter_very_fast_servo_sub>
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2dd0:	8f 30       	cpi	r24, 0x0F	; 15
    2dd2:	60 f0       	brcs	.+24     	; 0x2dec <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2dd4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2dd8:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2ddc:	9d 7f       	andi	r25, 0xFD	; 253
    2dde:	94 60       	ori	r25, 0x04	; 4
    2de0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2de4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_servo_sub = 0;
    2de8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2dec:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2df0:	87 ff       	sbrs	r24, 7
    2df2:	1d c0       	rjmp	.+58     	; 0x2e2e <disp_fast_process+0x106>
    2df4:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2df8:	63 36       	cpi	r22, 0x63	; 99
    2dfa:	c8 f4       	brcc	.+50     	; 0x2e2e <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2dfc:	6f 5f       	subi	r22, 0xFF	; 255
    2dfe:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
			counter_very_fast_motor_add++;
    2e08:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <counter_very_fast_motor_add>
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2e12:	8f 30       	cpi	r24, 0x0F	; 15
    2e14:	60 f0       	brcs	.+24     	; 0x2e2e <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2e16:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e1a:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e1e:	8f 77       	andi	r24, 0x7F	; 127
    2e20:	91 60       	ori	r25, 0x01	; 1
    2e22:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2e26:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_add = 0;
    2e2a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2e2e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e32:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e36:	93 ff       	sbrs	r25, 3
    2e38:	1d c0       	rjmp	.+58     	; 0x2e74 <disp_fast_process+0x14c>
    2e3a:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2e3e:	6b 30       	cpi	r22, 0x0B	; 11
    2e40:	c8 f0       	brcs	.+50     	; 0x2e74 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2e42:	61 50       	subi	r22, 0x01	; 1
    2e44:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
			counter_very_fast_motor_sub++;
    2e4e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <counter_very_fast_motor_sub>
    2e52:	8f 5f       	subi	r24, 0xFF	; 255
    2e54:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2e58:	8f 30       	cpi	r24, 0x0F	; 15
    2e5a:	60 f0       	brcs	.+24     	; 0x2e74 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2e5c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2e60:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2e64:	97 7f       	andi	r25, 0xF7	; 247
    2e66:	90 61       	ori	r25, 0x10	; 16
    2e68:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <system_events+0x1>
    2e6c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <system_events>
				counter_very_fast_motor_sub = 0;
    2e70:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2e74:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <disp_fast_timer.2131>
    2e78:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <disp_fast_timer.2131+0x1>
    2e7c:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <disp_fast_timer.2131+0x2>
    2e80:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <disp_fast_timer.2131+0x3>
    2e84:	80 5b       	subi	r24, 0xB0	; 176
    2e86:	9f 4f       	sbci	r25, 0xFF	; 255
    2e88:	af 4f       	sbci	r26, 0xFF	; 255
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <disp_fast_timer.2131>
    2e90:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <disp_fast_timer.2131+0x1>
    2e94:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <disp_fast_timer.2131+0x2>
    2e98:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <disp_fast_timer.2131+0x3>
    2e9c:	08 95       	ret

00002e9e <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2e9e:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <mktime+0x2>
    2ea2:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <mktime+0x3>
    2ea6:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <mktime+0x4>
    2eaa:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <mktime+0x5>
    2eae:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    2eb2:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    2eb6:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    2eba:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    2ebe:	84 17       	cp	r24, r20
    2ec0:	95 07       	cpc	r25, r21
    2ec2:	a6 07       	cpc	r26, r22
    2ec4:	b7 07       	cpc	r27, r23
    2ec6:	08 f0       	brcs	.+2      	; 0x2eca <disp_very_fast_process+0x2c>
    2ec8:	57 c0       	rjmp	.+174    	; 0x2f78 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2eca:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <servo_vibro_value>
    2ece:	83 36       	cpi	r24, 0x63	; 99
    2ed0:	70 f4       	brcc	.+28     	; 0x2eee <disp_very_fast_process+0x50>
    2ed2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2ed6:	86 ff       	sbrs	r24, 6
    2ed8:	0a c0       	rjmp	.+20     	; 0x2eee <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2eda:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2ede:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2ee2:	6f 5f       	subi	r22, 0xFF	; 255
    2ee4:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2eee:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <servo_vibro_value>
    2ef2:	6b 30       	cpi	r22, 0x0B	; 11
    2ef4:	70 f0       	brcs	.+28     	; 0x2f12 <disp_very_fast_process+0x74>
    2ef6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2efa:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2efe:	92 ff       	sbrs	r25, 2
    2f00:	08 c0       	rjmp	.+16     	; 0x2f12 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2f02:	61 50       	subi	r22, 0x01	; 1
    2f04:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <servo_vibro_value>
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
				error_servo_timer();
    2f0e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2f12:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2f16:	63 36       	cpi	r22, 0x63	; 99
    2f18:	60 f4       	brcc	.+24     	; 0x2f32 <disp_very_fast_process+0x94>
    2f1a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2f1e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2f22:	90 ff       	sbrs	r25, 0
    2f24:	06 c0       	rjmp	.+12     	; 0x2f32 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2f26:	6f 5f       	subi	r22, 0xFF	; 255
    2f28:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2f32:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <motor_value>
    2f36:	6b 30       	cpi	r22, 0x0B	; 11
    2f38:	60 f0       	brcs	.+24     	; 0x2f52 <disp_very_fast_process+0xb4>
    2f3a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <system_events>
    2f3e:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <system_events+0x1>
    2f42:	94 ff       	sbrs	r25, 4
    2f44:	06 c0       	rjmp	.+12     	; 0x2f52 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2f46:	61 50       	subi	r22, 0x01	; 1
    2f48:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <motor_value>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	0e 94 1d 0a 	call	0x143a	; 0x143a <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2f52:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <disp_very_fast_timer>
    2f56:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <disp_very_fast_timer+0x1>
    2f5a:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <disp_very_fast_timer+0x2>
    2f5e:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <disp_very_fast_timer+0x3>
    2f62:	4e 96       	adiw	r24, 0x1e	; 30
    2f64:	a1 1d       	adc	r26, r1
    2f66:	b1 1d       	adc	r27, r1
    2f68:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <disp_very_fast_timer>
    2f6c:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <disp_very_fast_timer+0x1>
    2f70:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <disp_very_fast_timer+0x2>
    2f74:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <disp_very_fast_timer+0x3>
    2f78:	08 95       	ret

00002f7a <system_error>:
}


void system_error(void)
{
	off_button();
    2f7a:	0e 94 21 14 	call	0x2842	; 0x2842 <off_button>
    2f7e:	08 95       	ret

00002f80 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 93       	push	r18
    2f8c:	3f 93       	push	r19
    2f8e:	4f 93       	push	r20
    2f90:	5f 93       	push	r21
    2f92:	6f 93       	push	r22
    2f94:	7f 93       	push	r23
    2f96:	8f 93       	push	r24
    2f98:	9f 93       	push	r25
    2f9a:	af 93       	push	r26
    2f9c:	bf 93       	push	r27
    2f9e:	ef 93       	push	r30
    2fa0:	ff 93       	push	r31
    2fa2:	e7 eb       	ldi	r30, 0xB7	; 183
    2fa4:	f4 e0       	ldi	r31, 0x04	; 4
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	c2 96       	adiw	r24, 0x32	; 50
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	88 3e       	cpi	r24, 0xE8	; 232
    2fb6:	93 40       	sbci	r25, 0x03	; 3
    2fb8:	88 f0       	brcs	.+34     	; 0x2fdc <__vector_10+0x5c>
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	a4 81       	ldd	r26, Z+4	; 0x04
    2fc0:	b5 81       	ldd	r27, Z+5	; 0x05
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	a1 1d       	adc	r26, r1
    2fc6:	b1 1d       	adc	r27, r1
    2fc8:	82 83       	std	Z+2, r24	; 0x02
    2fca:	93 83       	std	Z+3, r25	; 0x03
    2fcc:	a4 83       	std	Z+4, r26	; 0x04
    2fce:	b5 83       	std	Z+5, r27	; 0x05
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	88 5e       	subi	r24, 0xE8	; 232
    2fd6:	93 40       	sbci	r25, 0x03	; 3
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	89 e0       	ldi	r24, 0x09	; 9
    2fde:	93 e0       	ldi	r25, 0x03	; 3
    2fe0:	0e 94 ad 09 	call	0x135a	; 0x135a <display_process>
    2fe4:	ff 91       	pop	r31
    2fe6:	ef 91       	pop	r30
    2fe8:	bf 91       	pop	r27
    2fea:	af 91       	pop	r26
    2fec:	9f 91       	pop	r25
    2fee:	8f 91       	pop	r24
    2ff0:	7f 91       	pop	r23
    2ff2:	6f 91       	pop	r22
    2ff4:	5f 91       	pop	r21
    2ff6:	4f 91       	pop	r20
    2ff8:	3f 91       	pop	r19
    2ffa:	2f 91       	pop	r18
    2ffc:	0f 90       	pop	r0
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	0f 90       	pop	r0
    3002:	1f 90       	pop	r1
    3004:	18 95       	reti

00003006 <timer0_init>:
    3006:	93 b7       	in	r25, 0x33	; 51
    3008:	98 60       	ori	r25, 0x08	; 8
    300a:	93 bf       	out	0x33, r25	; 51
    300c:	6c bf       	out	0x3c, r22	; 60
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	99 f0       	breq	.+38     	; 0x3038 <timer0_init+0x32>
    3012:	28 f4       	brcc	.+10     	; 0x301e <timer0_init+0x18>
    3014:	88 23       	and	r24, r24
    3016:	41 f0       	breq	.+16     	; 0x3028 <timer0_init+0x22>
    3018:	81 30       	cpi	r24, 0x01	; 1
    301a:	51 f0       	breq	.+20     	; 0x3030 <timer0_init+0x2a>
    301c:	19 c0       	rjmp	.+50     	; 0x3050 <timer0_init+0x4a>
    301e:	83 30       	cpi	r24, 0x03	; 3
    3020:	79 f0       	breq	.+30     	; 0x3040 <timer0_init+0x3a>
    3022:	84 30       	cpi	r24, 0x04	; 4
    3024:	89 f0       	breq	.+34     	; 0x3048 <timer0_init+0x42>
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <timer0_init+0x4a>
    3028:	83 b7       	in	r24, 0x33	; 51
    302a:	81 60       	ori	r24, 0x01	; 1
    302c:	83 bf       	out	0x33, r24	; 51
    302e:	13 c0       	rjmp	.+38     	; 0x3056 <timer0_init+0x50>
    3030:	83 b7       	in	r24, 0x33	; 51
    3032:	82 60       	ori	r24, 0x02	; 2
    3034:	83 bf       	out	0x33, r24	; 51
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <timer0_init+0x50>
    3038:	83 b7       	in	r24, 0x33	; 51
    303a:	83 60       	ori	r24, 0x03	; 3
    303c:	83 bf       	out	0x33, r24	; 51
    303e:	0b c0       	rjmp	.+22     	; 0x3056 <timer0_init+0x50>
    3040:	83 b7       	in	r24, 0x33	; 51
    3042:	84 60       	ori	r24, 0x04	; 4
    3044:	83 bf       	out	0x33, r24	; 51
    3046:	07 c0       	rjmp	.+14     	; 0x3056 <timer0_init+0x50>
    3048:	83 b7       	in	r24, 0x33	; 51
    304a:	85 60       	ori	r24, 0x05	; 5
    304c:	83 bf       	out	0x33, r24	; 51
    304e:	03 c0       	rjmp	.+6      	; 0x3056 <timer0_init+0x50>
    3050:	83 b7       	in	r24, 0x33	; 51
    3052:	81 60       	ori	r24, 0x01	; 1
    3054:	83 bf       	out	0x33, r24	; 51
    3056:	89 b7       	in	r24, 0x39	; 57
    3058:	82 60       	ori	r24, 0x02	; 2
    305a:	89 bf       	out	0x39, r24	; 57
    305c:	08 95       	ret

0000305e <evTime_init>:
    305e:	23 e0       	ldi	r18, 0x03	; 3
    3060:	fc 01       	movw	r30, r24
    3062:	24 83       	std	Z+4, r18	; 0x04
    3064:	10 82       	st	Z, r1
    3066:	11 82       	std	Z+1, r1	; 0x01
    3068:	12 82       	std	Z+2, r1	; 0x02
    306a:	13 82       	std	Z+3, r1	; 0x03
    306c:	08 95       	ret

0000306e <evTime_start>:
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	21 e0       	ldi	r18, 0x01	; 1
    3074:	fc 01       	movw	r30, r24
    3076:	24 83       	std	Z+4, r18	; 0x04
    3078:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <mktime+0x2>
    307c:	10 91 ba 04 	lds	r17, 0x04BA	; 0x8004ba <mktime+0x3>
    3080:	20 91 bb 04 	lds	r18, 0x04BB	; 0x8004bb <mktime+0x4>
    3084:	30 91 bc 04 	lds	r19, 0x04BC	; 0x8004bc <mktime+0x5>
    3088:	40 0f       	add	r20, r16
    308a:	51 1f       	adc	r21, r17
    308c:	62 1f       	adc	r22, r18
    308e:	73 1f       	adc	r23, r19
    3090:	40 83       	st	Z, r20
    3092:	51 83       	std	Z+1, r21	; 0x01
    3094:	62 83       	std	Z+2, r22	; 0x02
    3096:	73 83       	std	Z+3, r23	; 0x03
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	08 95       	ret

0000309e <evTime_is_stated>:
    309e:	21 e0       	ldi	r18, 0x01	; 1
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	fc 01       	movw	r30, r24
    30a4:	84 81       	ldd	r24, Z+4	; 0x04
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	11 f0       	breq	.+4      	; 0x30ae <evTime_is_stated+0x10>
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	c9 01       	movw	r24, r18
    30b0:	08 95       	ret

000030b2 <evTime_check>:

int evTime_check(evTime * evt)
{
    30b2:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    30b4:	84 81       	ldd	r24, Z+4	; 0x04
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	b1 f4       	brne	.+44     	; 0x30e6 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    30ba:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <mktime+0x2>
    30be:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <mktime+0x3>
    30c2:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <mktime+0x4>
    30c6:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <mktime+0x5>
    30ca:	40 81       	ld	r20, Z
    30cc:	51 81       	ldd	r21, Z+1	; 0x01
    30ce:	62 81       	ldd	r22, Z+2	; 0x02
    30d0:	73 81       	ldd	r23, Z+3	; 0x03
    30d2:	48 17       	cp	r20, r24
    30d4:	59 07       	cpc	r21, r25
    30d6:	6a 07       	cpc	r22, r26
    30d8:	7b 07       	cpc	r23, r27
    30da:	40 f4       	brcc	.+16     	; 0x30ec <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    30e6:	8f ef       	ldi	r24, 0xFF	; 255
    30e8:	9f ef       	ldi	r25, 0xFF	; 255
    30ea:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    30f0:	08 95       	ret

000030f2 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    30f2:	21 e0       	ldi	r18, 0x01	; 1
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	fc 01       	movw	r30, r24
    30f8:	84 81       	ldd	r24, Z+4	; 0x04
    30fa:	83 30       	cpi	r24, 0x03	; 3
    30fc:	11 f0       	breq	.+4      	; 0x3102 <evTime_off+0x10>
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
}
    3102:	c9 01       	movw	r24, r18
    3104:	08 95       	ret

00003106 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	ec 01       	movw	r28, r24
    3118:	6a 01       	movw	r12, r20
    311a:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	81 11       	cpse	r24, r1
    3120:	06 c0       	rjmp	.+12     	; 0x312e <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    3122:	83 e0       	ldi	r24, 0x03	; 3
    3124:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    3126:	18 82       	st	Y, r1
    3128:	19 82       	std	Y+1, r1	; 0x01
    312a:	1a 82       	std	Y+2, r1	; 0x02
    312c:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    312e:	ce 01       	movw	r24, r28
    3130:	0e 94 59 18 	call	0x30b2	; 0x30b2 <evTime_check>
    3134:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	31 f4       	brne	.+12     	; 0x3146 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    313a:	b7 01       	movw	r22, r14
    313c:	a6 01       	movw	r20, r12
    313e:	ce 01       	movw	r24, r28
    3140:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
		return 1;
    3144:	0d c0       	rjmp	.+26     	; 0x3160 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    3146:	8c 81       	ldd	r24, Y+4	; 0x04
    3148:	83 30       	cpi	r24, 0x03	; 3
    314a:	41 f4       	brne	.+16     	; 0x315c <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    314c:	b7 01       	movw	r22, r14
    314e:	a6 01       	movw	r20, r12
    3150:	ce 01       	movw	r24, r28
    3152:	0e 94 37 18 	call	0x306e	; 0x306e <evTime_start>
	}
	return 0;
    3156:	00 e0       	ldi	r16, 0x00	; 0
    3158:	10 e0       	ldi	r17, 0x00	; 0
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <evTime_process_period+0x5a>
    315c:	00 e0       	ldi	r16, 0x00	; 0
    315e:	10 e0       	ldi	r17, 0x00	; 0
}
    3160:	c8 01       	movw	r24, r16
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	df 90       	pop	r13
    3170:	cf 90       	pop	r12
    3172:	08 95       	ret

00003174 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    3174:	1f 92       	push	r1
    3176:	0f 92       	push	r0
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	0f 92       	push	r0
    317c:	11 24       	eor	r1, r1
    317e:	2f 93       	push	r18
    3180:	3f 93       	push	r19
    3182:	4f 93       	push	r20
    3184:	5f 93       	push	r21
    3186:	8f 93       	push	r24
    3188:	9f 93       	push	r25
    318a:	ef 93       	push	r30
    318c:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    318e:	2b b1       	in	r18, 0x0b	; 11
    data = UART0_DATA;
    3190:	3c b1       	in	r19, 0x0c	; 12
    
    /* */
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    3192:	28 71       	andi	r18, 0x18	; 24
#elif defined (ATMEGA_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#endif
        
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    3194:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <UART_RxHead>
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	01 96       	adiw	r24, 0x01	; 1
    
    if (tmphead == UART_RxTail) {
    319c:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <UART_RxTail>
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	84 17       	cp	r24, r20
    31a4:	95 07       	cpc	r25, r21
    31a6:	39 f0       	breq	.+14     	; 0x31b6 <__vector_13+0x42>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    31a8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    31ac:	fc 01       	movw	r30, r24
    31ae:	e0 5f       	subi	r30, 0xF0	; 240
    31b0:	fc 4f       	sbci	r31, 0xFC	; 252
    31b2:	30 83       	st	Z, r19
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <__vector_13+0x44>
    /* calculate buffer index */ 
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    31b6:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    31b8:	20 93 0b 03 	sts	0x030B, r18	; 0x80030b <UART_LastRxError>
}
    31bc:	ff 91       	pop	r31
    31be:	ef 91       	pop	r30
    31c0:	9f 91       	pop	r25
    31c2:	8f 91       	pop	r24
    31c4:	5f 91       	pop	r21
    31c6:	4f 91       	pop	r20
    31c8:	3f 91       	pop	r19
    31ca:	2f 91       	pop	r18
    31cc:	0f 90       	pop	r0
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	0f 90       	pop	r0
    31d2:	1f 90       	pop	r1
    31d4:	18 95       	reti

000031d6 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    31d6:	1f 92       	push	r1
    31d8:	0f 92       	push	r0
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	0f 92       	push	r0
    31de:	11 24       	eor	r1, r1
    31e0:	8f 93       	push	r24
    31e2:	9f 93       	push	r25
    31e4:	ef 93       	push	r30
    31e6:	ff 93       	push	r31
    uint16_t tmptail;

    if (UART_TxHead != UART_TxTail) {
    31e8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <UART_TxHead>
    31ec:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    31f0:	98 17       	cp	r25, r24
    31f2:	71 f0       	breq	.+28     	; 0x3210 <__vector_14+0x3a>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    31f4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <UART_TxTail>
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	8f 77       	andi	r24, 0x7F	; 127
    31fe:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    3200:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    3204:	fc 01       	movw	r30, r24
    3206:	e0 5f       	subi	r30, 0xF0	; 240
    3208:	fc 4f       	sbci	r31, 0xFC	; 252
    320a:	80 81       	ld	r24, Z
    320c:	8c b9       	out	0x0c, r24	; 12
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <__vector_14+0x3c>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    3210:	55 98       	cbi	0x0a, 5	; 10
    }
}
    3212:	ff 91       	pop	r31
    3214:	ef 91       	pop	r30
    3216:	9f 91       	pop	r25
    3218:	8f 91       	pop	r24
    321a:	0f 90       	pop	r0
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	0f 90       	pop	r0
    3220:	1f 90       	pop	r1
    3222:	18 95       	reti

00003224 <__subsf3>:
    3224:	50 58       	subi	r21, 0x80	; 128

00003226 <__addsf3>:
    3226:	bb 27       	eor	r27, r27
    3228:	aa 27       	eor	r26, r26
    322a:	0e 94 2a 19 	call	0x3254	; 0x3254 <__addsf3x>
    322e:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_round>
    3232:	0e 94 91 1a 	call	0x3522	; 0x3522 <__fp_pscA>
    3236:	38 f0       	brcs	.+14     	; 0x3246 <__addsf3+0x20>
    3238:	0e 94 98 1a 	call	0x3530	; 0x3530 <__fp_pscB>
    323c:	20 f0       	brcs	.+8      	; 0x3246 <__addsf3+0x20>
    323e:	39 f4       	brne	.+14     	; 0x324e <__addsf3+0x28>
    3240:	9f 3f       	cpi	r25, 0xFF	; 255
    3242:	19 f4       	brne	.+6      	; 0x324a <__addsf3+0x24>
    3244:	26 f4       	brtc	.+8      	; 0x324e <__addsf3+0x28>
    3246:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>
    324a:	0e f4       	brtc	.+2      	; 0x324e <__addsf3+0x28>
    324c:	e0 95       	com	r30
    324e:	e7 fb       	bst	r30, 7
    3250:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>

00003254 <__addsf3x>:
    3254:	e9 2f       	mov	r30, r25
    3256:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__fp_split3>
    325a:	58 f3       	brcs	.-42     	; 0x3232 <__addsf3+0xc>
    325c:	ba 17       	cp	r27, r26
    325e:	62 07       	cpc	r22, r18
    3260:	73 07       	cpc	r23, r19
    3262:	84 07       	cpc	r24, r20
    3264:	95 07       	cpc	r25, r21
    3266:	20 f0       	brcs	.+8      	; 0x3270 <__addsf3x+0x1c>
    3268:	79 f4       	brne	.+30     	; 0x3288 <__addsf3x+0x34>
    326a:	a6 f5       	brtc	.+104    	; 0x32d4 <__addsf3x+0x80>
    326c:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_zero>
    3270:	0e f4       	brtc	.+2      	; 0x3274 <__addsf3x+0x20>
    3272:	e0 95       	com	r30
    3274:	0b 2e       	mov	r0, r27
    3276:	ba 2f       	mov	r27, r26
    3278:	a0 2d       	mov	r26, r0
    327a:	0b 01       	movw	r0, r22
    327c:	b9 01       	movw	r22, r18
    327e:	90 01       	movw	r18, r0
    3280:	0c 01       	movw	r0, r24
    3282:	ca 01       	movw	r24, r20
    3284:	a0 01       	movw	r20, r0
    3286:	11 24       	eor	r1, r1
    3288:	ff 27       	eor	r31, r31
    328a:	59 1b       	sub	r21, r25
    328c:	99 f0       	breq	.+38     	; 0x32b4 <__addsf3x+0x60>
    328e:	59 3f       	cpi	r21, 0xF9	; 249
    3290:	50 f4       	brcc	.+20     	; 0x32a6 <__addsf3x+0x52>
    3292:	50 3e       	cpi	r21, 0xE0	; 224
    3294:	68 f1       	brcs	.+90     	; 0x32f0 <__addsf3x+0x9c>
    3296:	1a 16       	cp	r1, r26
    3298:	f0 40       	sbci	r31, 0x00	; 0
    329a:	a2 2f       	mov	r26, r18
    329c:	23 2f       	mov	r18, r19
    329e:	34 2f       	mov	r19, r20
    32a0:	44 27       	eor	r20, r20
    32a2:	58 5f       	subi	r21, 0xF8	; 248
    32a4:	f3 cf       	rjmp	.-26     	; 0x328c <__addsf3x+0x38>
    32a6:	46 95       	lsr	r20
    32a8:	37 95       	ror	r19
    32aa:	27 95       	ror	r18
    32ac:	a7 95       	ror	r26
    32ae:	f0 40       	sbci	r31, 0x00	; 0
    32b0:	53 95       	inc	r21
    32b2:	c9 f7       	brne	.-14     	; 0x32a6 <__addsf3x+0x52>
    32b4:	7e f4       	brtc	.+30     	; 0x32d4 <__addsf3x+0x80>
    32b6:	1f 16       	cp	r1, r31
    32b8:	ba 0b       	sbc	r27, r26
    32ba:	62 0b       	sbc	r22, r18
    32bc:	73 0b       	sbc	r23, r19
    32be:	84 0b       	sbc	r24, r20
    32c0:	ba f0       	brmi	.+46     	; 0x32f0 <__addsf3x+0x9c>
    32c2:	91 50       	subi	r25, 0x01	; 1
    32c4:	a1 f0       	breq	.+40     	; 0x32ee <__addsf3x+0x9a>
    32c6:	ff 0f       	add	r31, r31
    32c8:	bb 1f       	adc	r27, r27
    32ca:	66 1f       	adc	r22, r22
    32cc:	77 1f       	adc	r23, r23
    32ce:	88 1f       	adc	r24, r24
    32d0:	c2 f7       	brpl	.-16     	; 0x32c2 <__addsf3x+0x6e>
    32d2:	0e c0       	rjmp	.+28     	; 0x32f0 <__addsf3x+0x9c>
    32d4:	ba 0f       	add	r27, r26
    32d6:	62 1f       	adc	r22, r18
    32d8:	73 1f       	adc	r23, r19
    32da:	84 1f       	adc	r24, r20
    32dc:	48 f4       	brcc	.+18     	; 0x32f0 <__addsf3x+0x9c>
    32de:	87 95       	ror	r24
    32e0:	77 95       	ror	r23
    32e2:	67 95       	ror	r22
    32e4:	b7 95       	ror	r27
    32e6:	f7 95       	ror	r31
    32e8:	9e 3f       	cpi	r25, 0xFE	; 254
    32ea:	08 f0       	brcs	.+2      	; 0x32ee <__addsf3x+0x9a>
    32ec:	b0 cf       	rjmp	.-160    	; 0x324e <__addsf3+0x28>
    32ee:	93 95       	inc	r25
    32f0:	88 0f       	add	r24, r24
    32f2:	08 f0       	brcs	.+2      	; 0x32f6 <__addsf3x+0xa2>
    32f4:	99 27       	eor	r25, r25
    32f6:	ee 0f       	add	r30, r30
    32f8:	97 95       	ror	r25
    32fa:	87 95       	ror	r24
    32fc:	08 95       	ret

000032fe <__divsf3>:
    32fe:	0e 94 93 19 	call	0x3326	; 0x3326 <__divsf3x>
    3302:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_round>
    3306:	0e 94 98 1a 	call	0x3530	; 0x3530 <__fp_pscB>
    330a:	58 f0       	brcs	.+22     	; 0x3322 <__divsf3+0x24>
    330c:	0e 94 91 1a 	call	0x3522	; 0x3522 <__fp_pscA>
    3310:	40 f0       	brcs	.+16     	; 0x3322 <__divsf3+0x24>
    3312:	29 f4       	brne	.+10     	; 0x331e <__divsf3+0x20>
    3314:	5f 3f       	cpi	r21, 0xFF	; 255
    3316:	29 f0       	breq	.+10     	; 0x3322 <__divsf3+0x24>
    3318:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    331c:	51 11       	cpse	r21, r1
    331e:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>
    3322:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>

00003326 <__divsf3x>:
    3326:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__fp_split3>
    332a:	68 f3       	brcs	.-38     	; 0x3306 <__divsf3+0x8>

0000332c <__divsf3_pse>:
    332c:	99 23       	and	r25, r25
    332e:	b1 f3       	breq	.-20     	; 0x331c <__divsf3+0x1e>
    3330:	55 23       	and	r21, r21
    3332:	91 f3       	breq	.-28     	; 0x3318 <__divsf3+0x1a>
    3334:	95 1b       	sub	r25, r21
    3336:	55 0b       	sbc	r21, r21
    3338:	bb 27       	eor	r27, r27
    333a:	aa 27       	eor	r26, r26
    333c:	62 17       	cp	r22, r18
    333e:	73 07       	cpc	r23, r19
    3340:	84 07       	cpc	r24, r20
    3342:	38 f0       	brcs	.+14     	; 0x3352 <__divsf3_pse+0x26>
    3344:	9f 5f       	subi	r25, 0xFF	; 255
    3346:	5f 4f       	sbci	r21, 0xFF	; 255
    3348:	22 0f       	add	r18, r18
    334a:	33 1f       	adc	r19, r19
    334c:	44 1f       	adc	r20, r20
    334e:	aa 1f       	adc	r26, r26
    3350:	a9 f3       	breq	.-22     	; 0x333c <__divsf3_pse+0x10>
    3352:	35 d0       	rcall	.+106    	; 0x33be <__divsf3_pse+0x92>
    3354:	0e 2e       	mov	r0, r30
    3356:	3a f0       	brmi	.+14     	; 0x3366 <__divsf3_pse+0x3a>
    3358:	e0 e8       	ldi	r30, 0x80	; 128
    335a:	32 d0       	rcall	.+100    	; 0x33c0 <__divsf3_pse+0x94>
    335c:	91 50       	subi	r25, 0x01	; 1
    335e:	50 40       	sbci	r21, 0x00	; 0
    3360:	e6 95       	lsr	r30
    3362:	00 1c       	adc	r0, r0
    3364:	ca f7       	brpl	.-14     	; 0x3358 <__divsf3_pse+0x2c>
    3366:	2b d0       	rcall	.+86     	; 0x33be <__divsf3_pse+0x92>
    3368:	fe 2f       	mov	r31, r30
    336a:	29 d0       	rcall	.+82     	; 0x33be <__divsf3_pse+0x92>
    336c:	66 0f       	add	r22, r22
    336e:	77 1f       	adc	r23, r23
    3370:	88 1f       	adc	r24, r24
    3372:	bb 1f       	adc	r27, r27
    3374:	26 17       	cp	r18, r22
    3376:	37 07       	cpc	r19, r23
    3378:	48 07       	cpc	r20, r24
    337a:	ab 07       	cpc	r26, r27
    337c:	b0 e8       	ldi	r27, 0x80	; 128
    337e:	09 f0       	breq	.+2      	; 0x3382 <__divsf3_pse+0x56>
    3380:	bb 0b       	sbc	r27, r27
    3382:	80 2d       	mov	r24, r0
    3384:	bf 01       	movw	r22, r30
    3386:	ff 27       	eor	r31, r31
    3388:	93 58       	subi	r25, 0x83	; 131
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	3a f0       	brmi	.+14     	; 0x339c <__divsf3_pse+0x70>
    338e:	9e 3f       	cpi	r25, 0xFE	; 254
    3390:	51 05       	cpc	r21, r1
    3392:	78 f0       	brcs	.+30     	; 0x33b2 <__divsf3_pse+0x86>
    3394:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    3398:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>
    339c:	5f 3f       	cpi	r21, 0xFF	; 255
    339e:	e4 f3       	brlt	.-8      	; 0x3398 <__divsf3_pse+0x6c>
    33a0:	98 3e       	cpi	r25, 0xE8	; 232
    33a2:	d4 f3       	brlt	.-12     	; 0x3398 <__divsf3_pse+0x6c>
    33a4:	86 95       	lsr	r24
    33a6:	77 95       	ror	r23
    33a8:	67 95       	ror	r22
    33aa:	b7 95       	ror	r27
    33ac:	f7 95       	ror	r31
    33ae:	9f 5f       	subi	r25, 0xFF	; 255
    33b0:	c9 f7       	brne	.-14     	; 0x33a4 <__divsf3_pse+0x78>
    33b2:	88 0f       	add	r24, r24
    33b4:	91 1d       	adc	r25, r1
    33b6:	96 95       	lsr	r25
    33b8:	87 95       	ror	r24
    33ba:	97 f9       	bld	r25, 7
    33bc:	08 95       	ret
    33be:	e1 e0       	ldi	r30, 0x01	; 1
    33c0:	66 0f       	add	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	88 1f       	adc	r24, r24
    33c6:	bb 1f       	adc	r27, r27
    33c8:	62 17       	cp	r22, r18
    33ca:	73 07       	cpc	r23, r19
    33cc:	84 07       	cpc	r24, r20
    33ce:	ba 07       	cpc	r27, r26
    33d0:	20 f0       	brcs	.+8      	; 0x33da <__divsf3_pse+0xae>
    33d2:	62 1b       	sub	r22, r18
    33d4:	73 0b       	sbc	r23, r19
    33d6:	84 0b       	sbc	r24, r20
    33d8:	ba 0b       	sbc	r27, r26
    33da:	ee 1f       	adc	r30, r30
    33dc:	88 f7       	brcc	.-30     	; 0x33c0 <__divsf3_pse+0x94>
    33de:	e0 95       	com	r30
    33e0:	08 95       	ret

000033e2 <__fixsfsi>:
    33e2:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__fixunssfsi>
    33e6:	68 94       	set
    33e8:	b1 11       	cpse	r27, r1
    33ea:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>
    33ee:	08 95       	ret

000033f0 <__fixunssfsi>:
    33f0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__fp_splitA>
    33f4:	88 f0       	brcs	.+34     	; 0x3418 <__fixunssfsi+0x28>
    33f6:	9f 57       	subi	r25, 0x7F	; 127
    33f8:	98 f0       	brcs	.+38     	; 0x3420 <__fixunssfsi+0x30>
    33fa:	b9 2f       	mov	r27, r25
    33fc:	99 27       	eor	r25, r25
    33fe:	b7 51       	subi	r27, 0x17	; 23
    3400:	b0 f0       	brcs	.+44     	; 0x342e <__fixunssfsi+0x3e>
    3402:	e1 f0       	breq	.+56     	; 0x343c <__fixunssfsi+0x4c>
    3404:	66 0f       	add	r22, r22
    3406:	77 1f       	adc	r23, r23
    3408:	88 1f       	adc	r24, r24
    340a:	99 1f       	adc	r25, r25
    340c:	1a f0       	brmi	.+6      	; 0x3414 <__fixunssfsi+0x24>
    340e:	ba 95       	dec	r27
    3410:	c9 f7       	brne	.-14     	; 0x3404 <__fixunssfsi+0x14>
    3412:	14 c0       	rjmp	.+40     	; 0x343c <__fixunssfsi+0x4c>
    3414:	b1 30       	cpi	r27, 0x01	; 1
    3416:	91 f0       	breq	.+36     	; 0x343c <__fixunssfsi+0x4c>
    3418:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__fp_zero>
    341c:	b1 e0       	ldi	r27, 0x01	; 1
    341e:	08 95       	ret
    3420:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_zero>
    3424:	67 2f       	mov	r22, r23
    3426:	78 2f       	mov	r23, r24
    3428:	88 27       	eor	r24, r24
    342a:	b8 5f       	subi	r27, 0xF8	; 248
    342c:	39 f0       	breq	.+14     	; 0x343c <__fixunssfsi+0x4c>
    342e:	b9 3f       	cpi	r27, 0xF9	; 249
    3430:	cc f3       	brlt	.-14     	; 0x3424 <__fixunssfsi+0x34>
    3432:	86 95       	lsr	r24
    3434:	77 95       	ror	r23
    3436:	67 95       	ror	r22
    3438:	b3 95       	inc	r27
    343a:	d9 f7       	brne	.-10     	; 0x3432 <__fixunssfsi+0x42>
    343c:	3e f4       	brtc	.+14     	; 0x344c <__fixunssfsi+0x5c>
    343e:	90 95       	com	r25
    3440:	80 95       	com	r24
    3442:	70 95       	com	r23
    3444:	61 95       	neg	r22
    3446:	7f 4f       	sbci	r23, 0xFF	; 255
    3448:	8f 4f       	sbci	r24, 0xFF	; 255
    344a:	9f 4f       	sbci	r25, 0xFF	; 255
    344c:	08 95       	ret

0000344e <__floatunsisf>:
    344e:	e8 94       	clt
    3450:	09 c0       	rjmp	.+18     	; 0x3464 <__floatsisf+0x12>

00003452 <__floatsisf>:
    3452:	97 fb       	bst	r25, 7
    3454:	3e f4       	brtc	.+14     	; 0x3464 <__floatsisf+0x12>
    3456:	90 95       	com	r25
    3458:	80 95       	com	r24
    345a:	70 95       	com	r23
    345c:	61 95       	neg	r22
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	8f 4f       	sbci	r24, 0xFF	; 255
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	99 23       	and	r25, r25
    3466:	a9 f0       	breq	.+42     	; 0x3492 <__floatsisf+0x40>
    3468:	f9 2f       	mov	r31, r25
    346a:	96 e9       	ldi	r25, 0x96	; 150
    346c:	bb 27       	eor	r27, r27
    346e:	93 95       	inc	r25
    3470:	f6 95       	lsr	r31
    3472:	87 95       	ror	r24
    3474:	77 95       	ror	r23
    3476:	67 95       	ror	r22
    3478:	b7 95       	ror	r27
    347a:	f1 11       	cpse	r31, r1
    347c:	f8 cf       	rjmp	.-16     	; 0x346e <__floatsisf+0x1c>
    347e:	fa f4       	brpl	.+62     	; 0x34be <__floatsisf+0x6c>
    3480:	bb 0f       	add	r27, r27
    3482:	11 f4       	brne	.+4      	; 0x3488 <__floatsisf+0x36>
    3484:	60 ff       	sbrs	r22, 0
    3486:	1b c0       	rjmp	.+54     	; 0x34be <__floatsisf+0x6c>
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	8f 4f       	sbci	r24, 0xFF	; 255
    348e:	9f 4f       	sbci	r25, 0xFF	; 255
    3490:	16 c0       	rjmp	.+44     	; 0x34be <__floatsisf+0x6c>
    3492:	88 23       	and	r24, r24
    3494:	11 f0       	breq	.+4      	; 0x349a <__floatsisf+0x48>
    3496:	96 e9       	ldi	r25, 0x96	; 150
    3498:	11 c0       	rjmp	.+34     	; 0x34bc <__floatsisf+0x6a>
    349a:	77 23       	and	r23, r23
    349c:	21 f0       	breq	.+8      	; 0x34a6 <__floatsisf+0x54>
    349e:	9e e8       	ldi	r25, 0x8E	; 142
    34a0:	87 2f       	mov	r24, r23
    34a2:	76 2f       	mov	r23, r22
    34a4:	05 c0       	rjmp	.+10     	; 0x34b0 <__floatsisf+0x5e>
    34a6:	66 23       	and	r22, r22
    34a8:	71 f0       	breq	.+28     	; 0x34c6 <__floatsisf+0x74>
    34aa:	96 e8       	ldi	r25, 0x86	; 134
    34ac:	86 2f       	mov	r24, r22
    34ae:	70 e0       	ldi	r23, 0x00	; 0
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	2a f0       	brmi	.+10     	; 0x34be <__floatsisf+0x6c>
    34b4:	9a 95       	dec	r25
    34b6:	66 0f       	add	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	88 1f       	adc	r24, r24
    34bc:	da f7       	brpl	.-10     	; 0x34b4 <__floatsisf+0x62>
    34be:	88 0f       	add	r24, r24
    34c0:	96 95       	lsr	r25
    34c2:	87 95       	ror	r24
    34c4:	97 f9       	bld	r25, 7
    34c6:	08 95       	ret

000034c8 <__fp_cmp>:
    34c8:	99 0f       	add	r25, r25
    34ca:	00 08       	sbc	r0, r0
    34cc:	55 0f       	add	r21, r21
    34ce:	aa 0b       	sbc	r26, r26
    34d0:	e0 e8       	ldi	r30, 0x80	; 128
    34d2:	fe ef       	ldi	r31, 0xFE	; 254
    34d4:	16 16       	cp	r1, r22
    34d6:	17 06       	cpc	r1, r23
    34d8:	e8 07       	cpc	r30, r24
    34da:	f9 07       	cpc	r31, r25
    34dc:	c0 f0       	brcs	.+48     	; 0x350e <__fp_cmp+0x46>
    34de:	12 16       	cp	r1, r18
    34e0:	13 06       	cpc	r1, r19
    34e2:	e4 07       	cpc	r30, r20
    34e4:	f5 07       	cpc	r31, r21
    34e6:	98 f0       	brcs	.+38     	; 0x350e <__fp_cmp+0x46>
    34e8:	62 1b       	sub	r22, r18
    34ea:	73 0b       	sbc	r23, r19
    34ec:	84 0b       	sbc	r24, r20
    34ee:	95 0b       	sbc	r25, r21
    34f0:	39 f4       	brne	.+14     	; 0x3500 <__fp_cmp+0x38>
    34f2:	0a 26       	eor	r0, r26
    34f4:	61 f0       	breq	.+24     	; 0x350e <__fp_cmp+0x46>
    34f6:	23 2b       	or	r18, r19
    34f8:	24 2b       	or	r18, r20
    34fa:	25 2b       	or	r18, r21
    34fc:	21 f4       	brne	.+8      	; 0x3506 <__fp_cmp+0x3e>
    34fe:	08 95       	ret
    3500:	0a 26       	eor	r0, r26
    3502:	09 f4       	brne	.+2      	; 0x3506 <__fp_cmp+0x3e>
    3504:	a1 40       	sbci	r26, 0x01	; 1
    3506:	a6 95       	lsr	r26
    3508:	8f ef       	ldi	r24, 0xFF	; 255
    350a:	81 1d       	adc	r24, r1
    350c:	81 1d       	adc	r24, r1
    350e:	08 95       	ret

00003510 <__fp_inf>:
    3510:	97 f9       	bld	r25, 7
    3512:	9f 67       	ori	r25, 0x7F	; 127
    3514:	80 e8       	ldi	r24, 0x80	; 128
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	08 95       	ret

0000351c <__fp_nan>:
    351c:	9f ef       	ldi	r25, 0xFF	; 255
    351e:	80 ec       	ldi	r24, 0xC0	; 192
    3520:	08 95       	ret

00003522 <__fp_pscA>:
    3522:	00 24       	eor	r0, r0
    3524:	0a 94       	dec	r0
    3526:	16 16       	cp	r1, r22
    3528:	17 06       	cpc	r1, r23
    352a:	18 06       	cpc	r1, r24
    352c:	09 06       	cpc	r0, r25
    352e:	08 95       	ret

00003530 <__fp_pscB>:
    3530:	00 24       	eor	r0, r0
    3532:	0a 94       	dec	r0
    3534:	12 16       	cp	r1, r18
    3536:	13 06       	cpc	r1, r19
    3538:	14 06       	cpc	r1, r20
    353a:	05 06       	cpc	r0, r21
    353c:	08 95       	ret

0000353e <__fp_round>:
    353e:	09 2e       	mov	r0, r25
    3540:	03 94       	inc	r0
    3542:	00 0c       	add	r0, r0
    3544:	11 f4       	brne	.+4      	; 0x354a <__fp_round+0xc>
    3546:	88 23       	and	r24, r24
    3548:	52 f0       	brmi	.+20     	; 0x355e <__fp_round+0x20>
    354a:	bb 0f       	add	r27, r27
    354c:	40 f4       	brcc	.+16     	; 0x355e <__fp_round+0x20>
    354e:	bf 2b       	or	r27, r31
    3550:	11 f4       	brne	.+4      	; 0x3556 <__fp_round+0x18>
    3552:	60 ff       	sbrs	r22, 0
    3554:	04 c0       	rjmp	.+8      	; 0x355e <__fp_round+0x20>
    3556:	6f 5f       	subi	r22, 0xFF	; 255
    3558:	7f 4f       	sbci	r23, 0xFF	; 255
    355a:	8f 4f       	sbci	r24, 0xFF	; 255
    355c:	9f 4f       	sbci	r25, 0xFF	; 255
    355e:	08 95       	ret

00003560 <__fp_split3>:
    3560:	57 fd       	sbrc	r21, 7
    3562:	90 58       	subi	r25, 0x80	; 128
    3564:	44 0f       	add	r20, r20
    3566:	55 1f       	adc	r21, r21
    3568:	59 f0       	breq	.+22     	; 0x3580 <__fp_splitA+0x10>
    356a:	5f 3f       	cpi	r21, 0xFF	; 255
    356c:	71 f0       	breq	.+28     	; 0x358a <__fp_splitA+0x1a>
    356e:	47 95       	ror	r20

00003570 <__fp_splitA>:
    3570:	88 0f       	add	r24, r24
    3572:	97 fb       	bst	r25, 7
    3574:	99 1f       	adc	r25, r25
    3576:	61 f0       	breq	.+24     	; 0x3590 <__fp_splitA+0x20>
    3578:	9f 3f       	cpi	r25, 0xFF	; 255
    357a:	79 f0       	breq	.+30     	; 0x359a <__fp_splitA+0x2a>
    357c:	87 95       	ror	r24
    357e:	08 95       	ret
    3580:	12 16       	cp	r1, r18
    3582:	13 06       	cpc	r1, r19
    3584:	14 06       	cpc	r1, r20
    3586:	55 1f       	adc	r21, r21
    3588:	f2 cf       	rjmp	.-28     	; 0x356e <__fp_split3+0xe>
    358a:	46 95       	lsr	r20
    358c:	f1 df       	rcall	.-30     	; 0x3570 <__fp_splitA>
    358e:	08 c0       	rjmp	.+16     	; 0x35a0 <__fp_splitA+0x30>
    3590:	16 16       	cp	r1, r22
    3592:	17 06       	cpc	r1, r23
    3594:	18 06       	cpc	r1, r24
    3596:	99 1f       	adc	r25, r25
    3598:	f1 cf       	rjmp	.-30     	; 0x357c <__fp_splitA+0xc>
    359a:	86 95       	lsr	r24
    359c:	71 05       	cpc	r23, r1
    359e:	61 05       	cpc	r22, r1
    35a0:	08 94       	sec
    35a2:	08 95       	ret

000035a4 <__fp_zero>:
    35a4:	e8 94       	clt

000035a6 <__fp_szero>:
    35a6:	bb 27       	eor	r27, r27
    35a8:	66 27       	eor	r22, r22
    35aa:	77 27       	eor	r23, r23
    35ac:	cb 01       	movw	r24, r22
    35ae:	97 f9       	bld	r25, 7
    35b0:	08 95       	ret

000035b2 <__gesf2>:
    35b2:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__fp_cmp>
    35b6:	08 f4       	brcc	.+2      	; 0x35ba <__gesf2+0x8>
    35b8:	8f ef       	ldi	r24, 0xFF	; 255
    35ba:	08 95       	ret

000035bc <__mulsf3>:
    35bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__mulsf3x>
    35c0:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_round>
    35c4:	0e 94 91 1a 	call	0x3522	; 0x3522 <__fp_pscA>
    35c8:	38 f0       	brcs	.+14     	; 0x35d8 <__mulsf3+0x1c>
    35ca:	0e 94 98 1a 	call	0x3530	; 0x3530 <__fp_pscB>
    35ce:	20 f0       	brcs	.+8      	; 0x35d8 <__mulsf3+0x1c>
    35d0:	95 23       	and	r25, r21
    35d2:	11 f0       	breq	.+4      	; 0x35d8 <__mulsf3+0x1c>
    35d4:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    35d8:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>
    35dc:	11 24       	eor	r1, r1
    35de:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>

000035e2 <__mulsf3x>:
    35e2:	0e 94 b0 1a 	call	0x3560	; 0x3560 <__fp_split3>
    35e6:	70 f3       	brcs	.-36     	; 0x35c4 <__mulsf3+0x8>

000035e8 <__mulsf3_pse>:
    35e8:	95 9f       	mul	r25, r21
    35ea:	c1 f3       	breq	.-16     	; 0x35dc <__mulsf3+0x20>
    35ec:	95 0f       	add	r25, r21
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	55 1f       	adc	r21, r21
    35f2:	62 9f       	mul	r22, r18
    35f4:	f0 01       	movw	r30, r0
    35f6:	72 9f       	mul	r23, r18
    35f8:	bb 27       	eor	r27, r27
    35fa:	f0 0d       	add	r31, r0
    35fc:	b1 1d       	adc	r27, r1
    35fe:	63 9f       	mul	r22, r19
    3600:	aa 27       	eor	r26, r26
    3602:	f0 0d       	add	r31, r0
    3604:	b1 1d       	adc	r27, r1
    3606:	aa 1f       	adc	r26, r26
    3608:	64 9f       	mul	r22, r20
    360a:	66 27       	eor	r22, r22
    360c:	b0 0d       	add	r27, r0
    360e:	a1 1d       	adc	r26, r1
    3610:	66 1f       	adc	r22, r22
    3612:	82 9f       	mul	r24, r18
    3614:	22 27       	eor	r18, r18
    3616:	b0 0d       	add	r27, r0
    3618:	a1 1d       	adc	r26, r1
    361a:	62 1f       	adc	r22, r18
    361c:	73 9f       	mul	r23, r19
    361e:	b0 0d       	add	r27, r0
    3620:	a1 1d       	adc	r26, r1
    3622:	62 1f       	adc	r22, r18
    3624:	83 9f       	mul	r24, r19
    3626:	a0 0d       	add	r26, r0
    3628:	61 1d       	adc	r22, r1
    362a:	22 1f       	adc	r18, r18
    362c:	74 9f       	mul	r23, r20
    362e:	33 27       	eor	r19, r19
    3630:	a0 0d       	add	r26, r0
    3632:	61 1d       	adc	r22, r1
    3634:	23 1f       	adc	r18, r19
    3636:	84 9f       	mul	r24, r20
    3638:	60 0d       	add	r22, r0
    363a:	21 1d       	adc	r18, r1
    363c:	82 2f       	mov	r24, r18
    363e:	76 2f       	mov	r23, r22
    3640:	6a 2f       	mov	r22, r26
    3642:	11 24       	eor	r1, r1
    3644:	9f 57       	subi	r25, 0x7F	; 127
    3646:	50 40       	sbci	r21, 0x00	; 0
    3648:	9a f0       	brmi	.+38     	; 0x3670 <__mulsf3_pse+0x88>
    364a:	f1 f0       	breq	.+60     	; 0x3688 <__mulsf3_pse+0xa0>
    364c:	88 23       	and	r24, r24
    364e:	4a f0       	brmi	.+18     	; 0x3662 <__mulsf3_pse+0x7a>
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	bb 1f       	adc	r27, r27
    3656:	66 1f       	adc	r22, r22
    3658:	77 1f       	adc	r23, r23
    365a:	88 1f       	adc	r24, r24
    365c:	91 50       	subi	r25, 0x01	; 1
    365e:	50 40       	sbci	r21, 0x00	; 0
    3660:	a9 f7       	brne	.-22     	; 0x364c <__mulsf3_pse+0x64>
    3662:	9e 3f       	cpi	r25, 0xFE	; 254
    3664:	51 05       	cpc	r21, r1
    3666:	80 f0       	brcs	.+32     	; 0x3688 <__mulsf3_pse+0xa0>
    3668:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    366c:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>
    3670:	5f 3f       	cpi	r21, 0xFF	; 255
    3672:	e4 f3       	brlt	.-8      	; 0x366c <__mulsf3_pse+0x84>
    3674:	98 3e       	cpi	r25, 0xE8	; 232
    3676:	d4 f3       	brlt	.-12     	; 0x366c <__mulsf3_pse+0x84>
    3678:	86 95       	lsr	r24
    367a:	77 95       	ror	r23
    367c:	67 95       	ror	r22
    367e:	b7 95       	ror	r27
    3680:	f7 95       	ror	r31
    3682:	e7 95       	ror	r30
    3684:	9f 5f       	subi	r25, 0xFF	; 255
    3686:	c1 f7       	brne	.-16     	; 0x3678 <__mulsf3_pse+0x90>
    3688:	fe 2b       	or	r31, r30
    368a:	88 0f       	add	r24, r24
    368c:	91 1d       	adc	r25, r1
    368e:	96 95       	lsr	r25
    3690:	87 95       	ror	r24
    3692:	97 f9       	bld	r25, 7
    3694:	08 95       	ret

00003696 <pow>:
    3696:	fa 01       	movw	r30, r20
    3698:	ee 0f       	add	r30, r30
    369a:	ff 1f       	adc	r31, r31
    369c:	30 96       	adiw	r30, 0x00	; 0
    369e:	21 05       	cpc	r18, r1
    36a0:	31 05       	cpc	r19, r1
    36a2:	a1 f1       	breq	.+104    	; 0x370c <pow+0x76>
    36a4:	61 15       	cp	r22, r1
    36a6:	71 05       	cpc	r23, r1
    36a8:	61 f4       	brne	.+24     	; 0x36c2 <pow+0x2c>
    36aa:	80 38       	cpi	r24, 0x80	; 128
    36ac:	bf e3       	ldi	r27, 0x3F	; 63
    36ae:	9b 07       	cpc	r25, r27
    36b0:	49 f1       	breq	.+82     	; 0x3704 <pow+0x6e>
    36b2:	68 94       	set
    36b4:	90 38       	cpi	r25, 0x80	; 128
    36b6:	81 05       	cpc	r24, r1
    36b8:	61 f0       	breq	.+24     	; 0x36d2 <pow+0x3c>
    36ba:	80 38       	cpi	r24, 0x80	; 128
    36bc:	bf ef       	ldi	r27, 0xFF	; 255
    36be:	9b 07       	cpc	r25, r27
    36c0:	41 f0       	breq	.+16     	; 0x36d2 <pow+0x3c>
    36c2:	99 23       	and	r25, r25
    36c4:	4a f5       	brpl	.+82     	; 0x3718 <pow+0x82>
    36c6:	ff 3f       	cpi	r31, 0xFF	; 255
    36c8:	e1 05       	cpc	r30, r1
    36ca:	31 05       	cpc	r19, r1
    36cc:	21 05       	cpc	r18, r1
    36ce:	19 f1       	breq	.+70     	; 0x3716 <pow+0x80>
    36d0:	e8 94       	clt
    36d2:	08 94       	sec
    36d4:	e7 95       	ror	r30
    36d6:	d9 01       	movw	r26, r18
    36d8:	aa 23       	and	r26, r26
    36da:	29 f4       	brne	.+10     	; 0x36e6 <pow+0x50>
    36dc:	ab 2f       	mov	r26, r27
    36de:	be 2f       	mov	r27, r30
    36e0:	f8 5f       	subi	r31, 0xF8	; 248
    36e2:	d0 f3       	brcs	.-12     	; 0x36d8 <pow+0x42>
    36e4:	10 c0       	rjmp	.+32     	; 0x3706 <pow+0x70>
    36e6:	ff 5f       	subi	r31, 0xFF	; 255
    36e8:	70 f4       	brcc	.+28     	; 0x3706 <pow+0x70>
    36ea:	a6 95       	lsr	r26
    36ec:	e0 f7       	brcc	.-8      	; 0x36e6 <pow+0x50>
    36ee:	f7 39       	cpi	r31, 0x97	; 151
    36f0:	50 f0       	brcs	.+20     	; 0x3706 <pow+0x70>
    36f2:	19 f0       	breq	.+6      	; 0x36fa <pow+0x64>
    36f4:	ff 3a       	cpi	r31, 0xAF	; 175
    36f6:	38 f4       	brcc	.+14     	; 0x3706 <pow+0x70>
    36f8:	9f 77       	andi	r25, 0x7F	; 127
    36fa:	9f 93       	push	r25
    36fc:	0d d0       	rcall	.+26     	; 0x3718 <pow+0x82>
    36fe:	0f 90       	pop	r0
    3700:	07 fc       	sbrc	r0, 7
    3702:	90 58       	subi	r25, 0x80	; 128
    3704:	08 95       	ret
    3706:	46 f0       	brts	.+16     	; 0x3718 <pow+0x82>
    3708:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	80 e8       	ldi	r24, 0x80	; 128
    3712:	9f e3       	ldi	r25, 0x3F	; 63
    3714:	08 95       	ret
    3716:	4f e7       	ldi	r20, 0x7F	; 127
    3718:	9f 77       	andi	r25, 0x7F	; 127
    371a:	5f 93       	push	r21
    371c:	4f 93       	push	r20
    371e:	3f 93       	push	r19
    3720:	2f 93       	push	r18
    3722:	0e 94 46 1c 	call	0x388c	; 0x388c <log>
    3726:	2f 91       	pop	r18
    3728:	3f 91       	pop	r19
    372a:	4f 91       	pop	r20
    372c:	5f 91       	pop	r21
    372e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    3732:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <exp>
    3736:	29 f4       	brne	.+10     	; 0x3742 <pow+0xac>
    3738:	16 f0       	brts	.+4      	; 0x373e <pow+0xa8>
    373a:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    373e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__fp_zero>
    3742:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>

00003746 <exp>:
    3746:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__fp_splitA>
    374a:	a8 f3       	brcs	.-22     	; 0x3736 <pow+0xa0>
    374c:	96 38       	cpi	r25, 0x86	; 134
    374e:	a0 f7       	brcc	.-24     	; 0x3738 <pow+0xa2>
    3750:	07 f8       	bld	r0, 7
    3752:	0f 92       	push	r0
    3754:	e8 94       	clt
    3756:	2b e3       	ldi	r18, 0x3B	; 59
    3758:	3a ea       	ldi	r19, 0xAA	; 170
    375a:	48 eb       	ldi	r20, 0xB8	; 184
    375c:	5f e7       	ldi	r21, 0x7F	; 127
    375e:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__mulsf3_pse>
    3762:	0f 92       	push	r0
    3764:	0f 92       	push	r0
    3766:	0f 92       	push	r0
    3768:	4d b7       	in	r20, 0x3d	; 61
    376a:	5e b7       	in	r21, 0x3e	; 62
    376c:	0f 92       	push	r0
    376e:	0e 94 8e 1c 	call	0x391c	; 0x391c <modf>
    3772:	e2 e5       	ldi	r30, 0x52	; 82
    3774:	f2 e0       	ldi	r31, 0x02	; 2
    3776:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_powser>
    377a:	4f 91       	pop	r20
    377c:	5f 91       	pop	r21
    377e:	ef 91       	pop	r30
    3780:	ff 91       	pop	r31
    3782:	e5 95       	asr	r30
    3784:	ee 1f       	adc	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	49 f0       	breq	.+18     	; 0x379c <exp+0x56>
    378a:	fe 57       	subi	r31, 0x7E	; 126
    378c:	e0 68       	ori	r30, 0x80	; 128
    378e:	44 27       	eor	r20, r20
    3790:	ee 0f       	add	r30, r30
    3792:	44 1f       	adc	r20, r20
    3794:	fa 95       	dec	r31
    3796:	e1 f7       	brne	.-8      	; 0x3790 <exp+0x4a>
    3798:	41 95       	neg	r20
    379a:	55 0b       	sbc	r21, r21
    379c:	0e 94 08 1c 	call	0x3810	; 0x3810 <ldexp>
    37a0:	0f 90       	pop	r0
    37a2:	07 fe       	sbrs	r0, 7
    37a4:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <inverse>
    37a8:	08 95       	ret

000037aa <__fp_powser>:
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	1f 93       	push	r17
    37b0:	0f 93       	push	r16
    37b2:	ff 92       	push	r15
    37b4:	ef 92       	push	r14
    37b6:	df 92       	push	r13
    37b8:	7b 01       	movw	r14, r22
    37ba:	8c 01       	movw	r16, r24
    37bc:	68 94       	set
    37be:	06 c0       	rjmp	.+12     	; 0x37cc <__fp_powser+0x22>
    37c0:	da 2e       	mov	r13, r26
    37c2:	ef 01       	movw	r28, r30
    37c4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__mulsf3x>
    37c8:	fe 01       	movw	r30, r28
    37ca:	e8 94       	clt
    37cc:	a5 91       	lpm	r26, Z+
    37ce:	25 91       	lpm	r18, Z+
    37d0:	35 91       	lpm	r19, Z+
    37d2:	45 91       	lpm	r20, Z+
    37d4:	55 91       	lpm	r21, Z+
    37d6:	a6 f3       	brts	.-24     	; 0x37c0 <__fp_powser+0x16>
    37d8:	ef 01       	movw	r28, r30
    37da:	0e 94 2a 19 	call	0x3254	; 0x3254 <__addsf3x>
    37de:	fe 01       	movw	r30, r28
    37e0:	97 01       	movw	r18, r14
    37e2:	a8 01       	movw	r20, r16
    37e4:	da 94       	dec	r13
    37e6:	69 f7       	brne	.-38     	; 0x37c2 <__fp_powser+0x18>
    37e8:	df 90       	pop	r13
    37ea:	ef 90       	pop	r14
    37ec:	ff 90       	pop	r15
    37ee:	0f 91       	pop	r16
    37f0:	1f 91       	pop	r17
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <inverse>:
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	70 e0       	ldi	r23, 0x00	; 0
    3800:	80 e8       	ldi	r24, 0x80	; 128
    3802:	9f e3       	ldi	r25, 0x3F	; 63
    3804:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__divsf3>
    3808:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>
    380c:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__fp_mpack>

00003810 <ldexp>:
    3810:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__fp_splitA>
    3814:	d8 f3       	brcs	.-10     	; 0x380c <inverse+0x14>
    3816:	99 23       	and	r25, r25
    3818:	c9 f3       	breq	.-14     	; 0x380c <inverse+0x14>
    381a:	94 0f       	add	r25, r20
    381c:	51 1d       	adc	r21, r1
    381e:	a3 f3       	brvs	.-24     	; 0x3808 <inverse+0x10>
    3820:	91 50       	subi	r25, 0x01	; 1
    3822:	50 40       	sbci	r21, 0x00	; 0
    3824:	94 f0       	brlt	.+36     	; 0x384a <ldexp+0x3a>
    3826:	59 f0       	breq	.+22     	; 0x383e <ldexp+0x2e>
    3828:	88 23       	and	r24, r24
    382a:	32 f0       	brmi	.+12     	; 0x3838 <ldexp+0x28>
    382c:	66 0f       	add	r22, r22
    382e:	77 1f       	adc	r23, r23
    3830:	88 1f       	adc	r24, r24
    3832:	91 50       	subi	r25, 0x01	; 1
    3834:	50 40       	sbci	r21, 0x00	; 0
    3836:	c1 f7       	brne	.-16     	; 0x3828 <ldexp+0x18>
    3838:	9e 3f       	cpi	r25, 0xFE	; 254
    383a:	51 05       	cpc	r21, r1
    383c:	2c f7       	brge	.-54     	; 0x3808 <inverse+0x10>
    383e:	88 0f       	add	r24, r24
    3840:	91 1d       	adc	r25, r1
    3842:	96 95       	lsr	r25
    3844:	87 95       	ror	r24
    3846:	97 f9       	bld	r25, 7
    3848:	08 95       	ret
    384a:	5f 3f       	cpi	r21, 0xFF	; 255
    384c:	ac f0       	brlt	.+42     	; 0x3878 <ldexp+0x68>
    384e:	98 3e       	cpi	r25, 0xE8	; 232
    3850:	9c f0       	brlt	.+38     	; 0x3878 <ldexp+0x68>
    3852:	bb 27       	eor	r27, r27
    3854:	86 95       	lsr	r24
    3856:	77 95       	ror	r23
    3858:	67 95       	ror	r22
    385a:	b7 95       	ror	r27
    385c:	08 f4       	brcc	.+2      	; 0x3860 <ldexp+0x50>
    385e:	b1 60       	ori	r27, 0x01	; 1
    3860:	93 95       	inc	r25
    3862:	c1 f7       	brne	.-16     	; 0x3854 <ldexp+0x44>
    3864:	bb 0f       	add	r27, r27
    3866:	58 f7       	brcc	.-42     	; 0x383e <ldexp+0x2e>
    3868:	11 f4       	brne	.+4      	; 0x386e <ldexp+0x5e>
    386a:	60 ff       	sbrs	r22, 0
    386c:	e8 cf       	rjmp	.-48     	; 0x383e <ldexp+0x2e>
    386e:	6f 5f       	subi	r22, 0xFF	; 255
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	8f 4f       	sbci	r24, 0xFF	; 255
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	e3 cf       	rjmp	.-58     	; 0x383e <ldexp+0x2e>
    3878:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__fp_szero>
    387c:	16 f0       	brts	.+4      	; 0x3882 <ldexp+0x72>
    387e:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__fp_mpack>
    3882:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_nan>
    3886:	68 94       	set
    3888:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_inf>

0000388c <log>:
    388c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__fp_splitA>
    3890:	a8 f3       	brcs	.-22     	; 0x387c <ldexp+0x6c>
    3892:	99 23       	and	r25, r25
    3894:	c1 f3       	breq	.-16     	; 0x3886 <ldexp+0x76>
    3896:	ae f3       	brts	.-22     	; 0x3882 <ldexp+0x72>
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	1f 93       	push	r17
    389e:	0f 93       	push	r16
    38a0:	ff 92       	push	r15
    38a2:	c9 2f       	mov	r28, r25
    38a4:	dd 27       	eor	r29, r29
    38a6:	88 23       	and	r24, r24
    38a8:	2a f0       	brmi	.+10     	; 0x38b4 <log+0x28>
    38aa:	21 97       	sbiw	r28, 0x01	; 1
    38ac:	66 0f       	add	r22, r22
    38ae:	77 1f       	adc	r23, r23
    38b0:	88 1f       	adc	r24, r24
    38b2:	da f7       	brpl	.-10     	; 0x38aa <log+0x1e>
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e8       	ldi	r20, 0x80	; 128
    38ba:	5f eb       	ldi	r21, 0xBF	; 191
    38bc:	9f e3       	ldi	r25, 0x3F	; 63
    38be:	88 39       	cpi	r24, 0x98	; 152
    38c0:	20 f0       	brcs	.+8      	; 0x38ca <log+0x3e>
    38c2:	80 3e       	cpi	r24, 0xE0	; 224
    38c4:	38 f0       	brcs	.+14     	; 0x38d4 <log+0x48>
    38c6:	21 96       	adiw	r28, 0x01	; 1
    38c8:	8f 77       	andi	r24, 0x7F	; 127
    38ca:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    38ce:	ea e7       	ldi	r30, 0x7A	; 122
    38d0:	f2 e0       	ldi	r31, 0x02	; 2
    38d2:	04 c0       	rjmp	.+8      	; 0x38dc <log+0x50>
    38d4:	0e 94 13 19 	call	0x3226	; 0x3226 <__addsf3>
    38d8:	e7 ea       	ldi	r30, 0xA7	; 167
    38da:	f2 e0       	ldi	r31, 0x02	; 2
    38dc:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_powser>
    38e0:	8b 01       	movw	r16, r22
    38e2:	be 01       	movw	r22, r28
    38e4:	ec 01       	movw	r28, r24
    38e6:	fb 2e       	mov	r15, r27
    38e8:	6f 57       	subi	r22, 0x7F	; 127
    38ea:	71 09       	sbc	r23, r1
    38ec:	75 95       	asr	r23
    38ee:	77 1f       	adc	r23, r23
    38f0:	88 0b       	sbc	r24, r24
    38f2:	99 0b       	sbc	r25, r25
    38f4:	0e 94 29 1a 	call	0x3452	; 0x3452 <__floatsisf>
    38f8:	28 e1       	ldi	r18, 0x18	; 24
    38fa:	32 e7       	ldi	r19, 0x72	; 114
    38fc:	41 e3       	ldi	r20, 0x31	; 49
    38fe:	5f e3       	ldi	r21, 0x3F	; 63
    3900:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__mulsf3x>
    3904:	af 2d       	mov	r26, r15
    3906:	98 01       	movw	r18, r16
    3908:	ae 01       	movw	r20, r28
    390a:	ff 90       	pop	r15
    390c:	0f 91       	pop	r16
    390e:	1f 91       	pop	r17
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	0e 94 2a 19 	call	0x3254	; 0x3254 <__addsf3x>
    3918:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__fp_round>

0000391c <modf>:
    391c:	fa 01       	movw	r30, r20
    391e:	dc 01       	movw	r26, r24
    3920:	aa 0f       	add	r26, r26
    3922:	bb 1f       	adc	r27, r27
    3924:	9b 01       	movw	r18, r22
    3926:	ac 01       	movw	r20, r24
    3928:	bf 57       	subi	r27, 0x7F	; 127
    392a:	28 f4       	brcc	.+10     	; 0x3936 <modf+0x1a>
    392c:	22 27       	eor	r18, r18
    392e:	33 27       	eor	r19, r19
    3930:	44 27       	eor	r20, r20
    3932:	50 78       	andi	r21, 0x80	; 128
    3934:	20 c0       	rjmp	.+64     	; 0x3976 <modf+0x5a>
    3936:	b7 51       	subi	r27, 0x17	; 23
    3938:	90 f4       	brcc	.+36     	; 0x395e <modf+0x42>
    393a:	ab 2f       	mov	r26, r27
    393c:	00 24       	eor	r0, r0
    393e:	46 95       	lsr	r20
    3940:	37 95       	ror	r19
    3942:	27 95       	ror	r18
    3944:	01 1c       	adc	r0, r1
    3946:	a3 95       	inc	r26
    3948:	d2 f3       	brmi	.-12     	; 0x393e <modf+0x22>
    394a:	00 20       	and	r0, r0
    394c:	71 f0       	breq	.+28     	; 0x396a <modf+0x4e>
    394e:	22 0f       	add	r18, r18
    3950:	33 1f       	adc	r19, r19
    3952:	44 1f       	adc	r20, r20
    3954:	b3 95       	inc	r27
    3956:	da f3       	brmi	.-10     	; 0x394e <modf+0x32>
    3958:	0e d0       	rcall	.+28     	; 0x3976 <modf+0x5a>
    395a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__subsf3>
    395e:	61 30       	cpi	r22, 0x01	; 1
    3960:	71 05       	cpc	r23, r1
    3962:	a0 e8       	ldi	r26, 0x80	; 128
    3964:	8a 07       	cpc	r24, r26
    3966:	b9 46       	sbci	r27, 0x69	; 105
    3968:	30 f4       	brcc	.+12     	; 0x3976 <modf+0x5a>
    396a:	9b 01       	movw	r18, r22
    396c:	ac 01       	movw	r20, r24
    396e:	66 27       	eor	r22, r22
    3970:	77 27       	eor	r23, r23
    3972:	88 27       	eor	r24, r24
    3974:	90 78       	andi	r25, 0x80	; 128
    3976:	30 96       	adiw	r30, 0x00	; 0
    3978:	21 f0       	breq	.+8      	; 0x3982 <modf+0x66>
    397a:	20 83       	st	Z, r18
    397c:	31 83       	std	Z+1, r19	; 0x01
    397e:	42 83       	std	Z+2, r20	; 0x02
    3980:	53 83       	std	Z+3, r21	; 0x03
    3982:	08 95       	ret

00003984 <__fp_mpack>:
    3984:	9f 3f       	cpi	r25, 0xFF	; 255
    3986:	31 f0       	breq	.+12     	; 0x3994 <__fp_mpack_finite+0xc>

00003988 <__fp_mpack_finite>:
    3988:	91 50       	subi	r25, 0x01	; 1
    398a:	20 f4       	brcc	.+8      	; 0x3994 <__fp_mpack_finite+0xc>
    398c:	87 95       	ror	r24
    398e:	77 95       	ror	r23
    3990:	67 95       	ror	r22
    3992:	b7 95       	ror	r27
    3994:	88 0f       	add	r24, r24
    3996:	91 1d       	adc	r25, r1
    3998:	96 95       	lsr	r25
    399a:	87 95       	ror	r24
    399c:	97 f9       	bld	r25, 7
    399e:	08 95       	ret

000039a0 <vfprintf>:
    39a0:	a0 e1       	ldi	r26, 0x10	; 16
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	e6 ed       	ldi	r30, 0xD6	; 214
    39a6:	fc e1       	ldi	r31, 0x1C	; 28
    39a8:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__prologue_saves__>
    39ac:	7c 01       	movw	r14, r24
    39ae:	1b 01       	movw	r2, r22
    39b0:	6a 01       	movw	r12, r20
    39b2:	fc 01       	movw	r30, r24
    39b4:	17 82       	std	Z+7, r1	; 0x07
    39b6:	16 82       	std	Z+6, r1	; 0x06
    39b8:	83 81       	ldd	r24, Z+3	; 0x03
    39ba:	81 ff       	sbrs	r24, 1
    39bc:	44 c3       	rjmp	.+1672   	; 0x4046 <vfprintf+0x6a6>
    39be:	9e 01       	movw	r18, r28
    39c0:	2f 5f       	subi	r18, 0xFF	; 255
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	39 01       	movw	r6, r18
    39c6:	f7 01       	movw	r30, r14
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	f1 01       	movw	r30, r2
    39cc:	93 fd       	sbrc	r25, 3
    39ce:	85 91       	lpm	r24, Z+
    39d0:	93 ff       	sbrs	r25, 3
    39d2:	81 91       	ld	r24, Z+
    39d4:	1f 01       	movw	r2, r30
    39d6:	88 23       	and	r24, r24
    39d8:	09 f4       	brne	.+2      	; 0x39dc <vfprintf+0x3c>
    39da:	31 c3       	rjmp	.+1634   	; 0x403e <vfprintf+0x69e>
    39dc:	85 32       	cpi	r24, 0x25	; 37
    39de:	39 f4       	brne	.+14     	; 0x39ee <vfprintf+0x4e>
    39e0:	93 fd       	sbrc	r25, 3
    39e2:	85 91       	lpm	r24, Z+
    39e4:	93 ff       	sbrs	r25, 3
    39e6:	81 91       	ld	r24, Z+
    39e8:	1f 01       	movw	r2, r30
    39ea:	85 32       	cpi	r24, 0x25	; 37
    39ec:	39 f4       	brne	.+14     	; 0x39fc <vfprintf+0x5c>
    39ee:	b7 01       	movw	r22, r14
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    39f6:	56 01       	movw	r10, r12
    39f8:	65 01       	movw	r12, r10
    39fa:	e5 cf       	rjmp	.-54     	; 0x39c6 <vfprintf+0x26>
    39fc:	10 e0       	ldi	r17, 0x00	; 0
    39fe:	51 2c       	mov	r5, r1
    3a00:	91 2c       	mov	r9, r1
    3a02:	ff e1       	ldi	r31, 0x1F	; 31
    3a04:	f9 15       	cp	r31, r9
    3a06:	d8 f0       	brcs	.+54     	; 0x3a3e <vfprintf+0x9e>
    3a08:	8b 32       	cpi	r24, 0x2B	; 43
    3a0a:	79 f0       	breq	.+30     	; 0x3a2a <vfprintf+0x8a>
    3a0c:	38 f4       	brcc	.+14     	; 0x3a1c <vfprintf+0x7c>
    3a0e:	80 32       	cpi	r24, 0x20	; 32
    3a10:	79 f0       	breq	.+30     	; 0x3a30 <vfprintf+0x90>
    3a12:	83 32       	cpi	r24, 0x23	; 35
    3a14:	a1 f4       	brne	.+40     	; 0x3a3e <vfprintf+0x9e>
    3a16:	f9 2d       	mov	r31, r9
    3a18:	f0 61       	ori	r31, 0x10	; 16
    3a1a:	2e c0       	rjmp	.+92     	; 0x3a78 <vfprintf+0xd8>
    3a1c:	8d 32       	cpi	r24, 0x2D	; 45
    3a1e:	61 f0       	breq	.+24     	; 0x3a38 <vfprintf+0x98>
    3a20:	80 33       	cpi	r24, 0x30	; 48
    3a22:	69 f4       	brne	.+26     	; 0x3a3e <vfprintf+0x9e>
    3a24:	29 2d       	mov	r18, r9
    3a26:	21 60       	ori	r18, 0x01	; 1
    3a28:	2d c0       	rjmp	.+90     	; 0x3a84 <vfprintf+0xe4>
    3a2a:	39 2d       	mov	r19, r9
    3a2c:	32 60       	ori	r19, 0x02	; 2
    3a2e:	93 2e       	mov	r9, r19
    3a30:	89 2d       	mov	r24, r9
    3a32:	84 60       	ori	r24, 0x04	; 4
    3a34:	98 2e       	mov	r9, r24
    3a36:	2a c0       	rjmp	.+84     	; 0x3a8c <vfprintf+0xec>
    3a38:	e9 2d       	mov	r30, r9
    3a3a:	e8 60       	ori	r30, 0x08	; 8
    3a3c:	15 c0       	rjmp	.+42     	; 0x3a68 <vfprintf+0xc8>
    3a3e:	97 fc       	sbrc	r9, 7
    3a40:	2d c0       	rjmp	.+90     	; 0x3a9c <vfprintf+0xfc>
    3a42:	20 ed       	ldi	r18, 0xD0	; 208
    3a44:	28 0f       	add	r18, r24
    3a46:	2a 30       	cpi	r18, 0x0A	; 10
    3a48:	88 f4       	brcc	.+34     	; 0x3a6c <vfprintf+0xcc>
    3a4a:	96 fe       	sbrs	r9, 6
    3a4c:	06 c0       	rjmp	.+12     	; 0x3a5a <vfprintf+0xba>
    3a4e:	3a e0       	ldi	r19, 0x0A	; 10
    3a50:	13 9f       	mul	r17, r19
    3a52:	20 0d       	add	r18, r0
    3a54:	11 24       	eor	r1, r1
    3a56:	12 2f       	mov	r17, r18
    3a58:	19 c0       	rjmp	.+50     	; 0x3a8c <vfprintf+0xec>
    3a5a:	8a e0       	ldi	r24, 0x0A	; 10
    3a5c:	58 9e       	mul	r5, r24
    3a5e:	20 0d       	add	r18, r0
    3a60:	11 24       	eor	r1, r1
    3a62:	52 2e       	mov	r5, r18
    3a64:	e9 2d       	mov	r30, r9
    3a66:	e0 62       	ori	r30, 0x20	; 32
    3a68:	9e 2e       	mov	r9, r30
    3a6a:	10 c0       	rjmp	.+32     	; 0x3a8c <vfprintf+0xec>
    3a6c:	8e 32       	cpi	r24, 0x2E	; 46
    3a6e:	31 f4       	brne	.+12     	; 0x3a7c <vfprintf+0xdc>
    3a70:	96 fc       	sbrc	r9, 6
    3a72:	e5 c2       	rjmp	.+1482   	; 0x403e <vfprintf+0x69e>
    3a74:	f9 2d       	mov	r31, r9
    3a76:	f0 64       	ori	r31, 0x40	; 64
    3a78:	9f 2e       	mov	r9, r31
    3a7a:	08 c0       	rjmp	.+16     	; 0x3a8c <vfprintf+0xec>
    3a7c:	8c 36       	cpi	r24, 0x6C	; 108
    3a7e:	21 f4       	brne	.+8      	; 0x3a88 <vfprintf+0xe8>
    3a80:	29 2d       	mov	r18, r9
    3a82:	20 68       	ori	r18, 0x80	; 128
    3a84:	92 2e       	mov	r9, r18
    3a86:	02 c0       	rjmp	.+4      	; 0x3a8c <vfprintf+0xec>
    3a88:	88 36       	cpi	r24, 0x68	; 104
    3a8a:	41 f4       	brne	.+16     	; 0x3a9c <vfprintf+0xfc>
    3a8c:	f1 01       	movw	r30, r2
    3a8e:	93 fd       	sbrc	r25, 3
    3a90:	85 91       	lpm	r24, Z+
    3a92:	93 ff       	sbrs	r25, 3
    3a94:	81 91       	ld	r24, Z+
    3a96:	1f 01       	movw	r2, r30
    3a98:	81 11       	cpse	r24, r1
    3a9a:	b3 cf       	rjmp	.-154    	; 0x3a02 <vfprintf+0x62>
    3a9c:	9b eb       	ldi	r25, 0xBB	; 187
    3a9e:	98 0f       	add	r25, r24
    3aa0:	93 30       	cpi	r25, 0x03	; 3
    3aa2:	20 f4       	brcc	.+8      	; 0x3aac <vfprintf+0x10c>
    3aa4:	99 2d       	mov	r25, r9
    3aa6:	90 61       	ori	r25, 0x10	; 16
    3aa8:	80 5e       	subi	r24, 0xE0	; 224
    3aaa:	07 c0       	rjmp	.+14     	; 0x3aba <vfprintf+0x11a>
    3aac:	9b e9       	ldi	r25, 0x9B	; 155
    3aae:	98 0f       	add	r25, r24
    3ab0:	93 30       	cpi	r25, 0x03	; 3
    3ab2:	08 f0       	brcs	.+2      	; 0x3ab6 <vfprintf+0x116>
    3ab4:	66 c1       	rjmp	.+716    	; 0x3d82 <vfprintf+0x3e2>
    3ab6:	99 2d       	mov	r25, r9
    3ab8:	9f 7e       	andi	r25, 0xEF	; 239
    3aba:	96 ff       	sbrs	r25, 6
    3abc:	16 e0       	ldi	r17, 0x06	; 6
    3abe:	9f 73       	andi	r25, 0x3F	; 63
    3ac0:	99 2e       	mov	r9, r25
    3ac2:	85 36       	cpi	r24, 0x65	; 101
    3ac4:	19 f4       	brne	.+6      	; 0x3acc <vfprintf+0x12c>
    3ac6:	90 64       	ori	r25, 0x40	; 64
    3ac8:	99 2e       	mov	r9, r25
    3aca:	08 c0       	rjmp	.+16     	; 0x3adc <vfprintf+0x13c>
    3acc:	86 36       	cpi	r24, 0x66	; 102
    3ace:	21 f4       	brne	.+8      	; 0x3ad8 <vfprintf+0x138>
    3ad0:	39 2f       	mov	r19, r25
    3ad2:	30 68       	ori	r19, 0x80	; 128
    3ad4:	93 2e       	mov	r9, r19
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <vfprintf+0x13c>
    3ad8:	11 11       	cpse	r17, r1
    3ada:	11 50       	subi	r17, 0x01	; 1
    3adc:	97 fe       	sbrs	r9, 7
    3ade:	07 c0       	rjmp	.+14     	; 0x3aee <vfprintf+0x14e>
    3ae0:	1c 33       	cpi	r17, 0x3C	; 60
    3ae2:	50 f4       	brcc	.+20     	; 0x3af8 <vfprintf+0x158>
    3ae4:	44 24       	eor	r4, r4
    3ae6:	43 94       	inc	r4
    3ae8:	41 0e       	add	r4, r17
    3aea:	27 e0       	ldi	r18, 0x07	; 7
    3aec:	0b c0       	rjmp	.+22     	; 0x3b04 <vfprintf+0x164>
    3aee:	18 30       	cpi	r17, 0x08	; 8
    3af0:	38 f0       	brcs	.+14     	; 0x3b00 <vfprintf+0x160>
    3af2:	27 e0       	ldi	r18, 0x07	; 7
    3af4:	17 e0       	ldi	r17, 0x07	; 7
    3af6:	05 c0       	rjmp	.+10     	; 0x3b02 <vfprintf+0x162>
    3af8:	27 e0       	ldi	r18, 0x07	; 7
    3afa:	9c e3       	ldi	r25, 0x3C	; 60
    3afc:	49 2e       	mov	r4, r25
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <vfprintf+0x164>
    3b00:	21 2f       	mov	r18, r17
    3b02:	41 2c       	mov	r4, r1
    3b04:	56 01       	movw	r10, r12
    3b06:	84 e0       	ldi	r24, 0x04	; 4
    3b08:	a8 0e       	add	r10, r24
    3b0a:	b1 1c       	adc	r11, r1
    3b0c:	f6 01       	movw	r30, r12
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	82 81       	ldd	r24, Z+2	; 0x02
    3b14:	93 81       	ldd	r25, Z+3	; 0x03
    3b16:	04 2d       	mov	r16, r4
    3b18:	a3 01       	movw	r20, r6
    3b1a:	0e 94 c1 20 	call	0x4182	; 0x4182 <__ftoa_engine>
    3b1e:	6c 01       	movw	r12, r24
    3b20:	f9 81       	ldd	r31, Y+1	; 0x01
    3b22:	fc 87       	std	Y+12, r31	; 0x0c
    3b24:	f0 ff       	sbrs	r31, 0
    3b26:	02 c0       	rjmp	.+4      	; 0x3b2c <vfprintf+0x18c>
    3b28:	f3 ff       	sbrs	r31, 3
    3b2a:	06 c0       	rjmp	.+12     	; 0x3b38 <vfprintf+0x198>
    3b2c:	91 fc       	sbrc	r9, 1
    3b2e:	06 c0       	rjmp	.+12     	; 0x3b3c <vfprintf+0x19c>
    3b30:	92 fe       	sbrs	r9, 2
    3b32:	06 c0       	rjmp	.+12     	; 0x3b40 <vfprintf+0x1a0>
    3b34:	00 e2       	ldi	r16, 0x20	; 32
    3b36:	05 c0       	rjmp	.+10     	; 0x3b42 <vfprintf+0x1a2>
    3b38:	0d e2       	ldi	r16, 0x2D	; 45
    3b3a:	03 c0       	rjmp	.+6      	; 0x3b42 <vfprintf+0x1a2>
    3b3c:	0b e2       	ldi	r16, 0x2B	; 43
    3b3e:	01 c0       	rjmp	.+2      	; 0x3b42 <vfprintf+0x1a2>
    3b40:	00 e0       	ldi	r16, 0x00	; 0
    3b42:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b44:	8c 70       	andi	r24, 0x0C	; 12
    3b46:	19 f0       	breq	.+6      	; 0x3b4e <vfprintf+0x1ae>
    3b48:	01 11       	cpse	r16, r1
    3b4a:	5a c2       	rjmp	.+1204   	; 0x4000 <vfprintf+0x660>
    3b4c:	9b c2       	rjmp	.+1334   	; 0x4084 <vfprintf+0x6e4>
    3b4e:	97 fe       	sbrs	r9, 7
    3b50:	10 c0       	rjmp	.+32     	; 0x3b72 <vfprintf+0x1d2>
    3b52:	4c 0c       	add	r4, r12
    3b54:	fc 85       	ldd	r31, Y+12	; 0x0c
    3b56:	f4 ff       	sbrs	r31, 4
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <vfprintf+0x1c2>
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	81 33       	cpi	r24, 0x31	; 49
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <vfprintf+0x1c2>
    3b60:	4a 94       	dec	r4
    3b62:	14 14       	cp	r1, r4
    3b64:	74 f5       	brge	.+92     	; 0x3bc2 <vfprintf+0x222>
    3b66:	28 e0       	ldi	r18, 0x08	; 8
    3b68:	24 15       	cp	r18, r4
    3b6a:	78 f5       	brcc	.+94     	; 0x3bca <vfprintf+0x22a>
    3b6c:	88 e0       	ldi	r24, 0x08	; 8
    3b6e:	48 2e       	mov	r4, r24
    3b70:	2c c0       	rjmp	.+88     	; 0x3bca <vfprintf+0x22a>
    3b72:	96 fc       	sbrc	r9, 6
    3b74:	2a c0       	rjmp	.+84     	; 0x3bca <vfprintf+0x22a>
    3b76:	81 2f       	mov	r24, r17
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	8c 15       	cp	r24, r12
    3b7c:	9d 05       	cpc	r25, r13
    3b7e:	9c f0       	brlt	.+38     	; 0x3ba6 <vfprintf+0x206>
    3b80:	3c ef       	ldi	r19, 0xFC	; 252
    3b82:	c3 16       	cp	r12, r19
    3b84:	3f ef       	ldi	r19, 0xFF	; 255
    3b86:	d3 06       	cpc	r13, r19
    3b88:	74 f0       	brlt	.+28     	; 0x3ba6 <vfprintf+0x206>
    3b8a:	89 2d       	mov	r24, r9
    3b8c:	80 68       	ori	r24, 0x80	; 128
    3b8e:	98 2e       	mov	r9, r24
    3b90:	0a c0       	rjmp	.+20     	; 0x3ba6 <vfprintf+0x206>
    3b92:	e2 e0       	ldi	r30, 0x02	; 2
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	ec 0f       	add	r30, r28
    3b98:	fd 1f       	adc	r31, r29
    3b9a:	e1 0f       	add	r30, r17
    3b9c:	f1 1d       	adc	r31, r1
    3b9e:	80 81       	ld	r24, Z
    3ba0:	80 33       	cpi	r24, 0x30	; 48
    3ba2:	19 f4       	brne	.+6      	; 0x3baa <vfprintf+0x20a>
    3ba4:	11 50       	subi	r17, 0x01	; 1
    3ba6:	11 11       	cpse	r17, r1
    3ba8:	f4 cf       	rjmp	.-24     	; 0x3b92 <vfprintf+0x1f2>
    3baa:	97 fe       	sbrs	r9, 7
    3bac:	0e c0       	rjmp	.+28     	; 0x3bca <vfprintf+0x22a>
    3bae:	44 24       	eor	r4, r4
    3bb0:	43 94       	inc	r4
    3bb2:	41 0e       	add	r4, r17
    3bb4:	81 2f       	mov	r24, r17
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	c8 16       	cp	r12, r24
    3bba:	d9 06       	cpc	r13, r25
    3bbc:	2c f4       	brge	.+10     	; 0x3bc8 <vfprintf+0x228>
    3bbe:	1c 19       	sub	r17, r12
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <vfprintf+0x22a>
    3bc2:	44 24       	eor	r4, r4
    3bc4:	43 94       	inc	r4
    3bc6:	01 c0       	rjmp	.+2      	; 0x3bca <vfprintf+0x22a>
    3bc8:	10 e0       	ldi	r17, 0x00	; 0
    3bca:	97 fe       	sbrs	r9, 7
    3bcc:	06 c0       	rjmp	.+12     	; 0x3bda <vfprintf+0x23a>
    3bce:	1c 14       	cp	r1, r12
    3bd0:	1d 04       	cpc	r1, r13
    3bd2:	34 f4       	brge	.+12     	; 0x3be0 <vfprintf+0x240>
    3bd4:	c6 01       	movw	r24, r12
    3bd6:	01 96       	adiw	r24, 0x01	; 1
    3bd8:	05 c0       	rjmp	.+10     	; 0x3be4 <vfprintf+0x244>
    3bda:	85 e0       	ldi	r24, 0x05	; 5
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <vfprintf+0x244>
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	01 11       	cpse	r16, r1
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	11 23       	and	r17, r17
    3bea:	31 f0       	breq	.+12     	; 0x3bf8 <vfprintf+0x258>
    3bec:	21 2f       	mov	r18, r17
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	2f 5f       	subi	r18, 0xFF	; 255
    3bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf4:	82 0f       	add	r24, r18
    3bf6:	93 1f       	adc	r25, r19
    3bf8:	25 2d       	mov	r18, r5
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	82 17       	cp	r24, r18
    3bfe:	93 07       	cpc	r25, r19
    3c00:	14 f4       	brge	.+4      	; 0x3c06 <vfprintf+0x266>
    3c02:	58 1a       	sub	r5, r24
    3c04:	01 c0       	rjmp	.+2      	; 0x3c08 <vfprintf+0x268>
    3c06:	51 2c       	mov	r5, r1
    3c08:	89 2d       	mov	r24, r9
    3c0a:	89 70       	andi	r24, 0x09	; 9
    3c0c:	49 f4       	brne	.+18     	; 0x3c20 <vfprintf+0x280>
    3c0e:	55 20       	and	r5, r5
    3c10:	39 f0       	breq	.+14     	; 0x3c20 <vfprintf+0x280>
    3c12:	b7 01       	movw	r22, r14
    3c14:	80 e2       	ldi	r24, 0x20	; 32
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3c1c:	5a 94       	dec	r5
    3c1e:	f7 cf       	rjmp	.-18     	; 0x3c0e <vfprintf+0x26e>
    3c20:	00 23       	and	r16, r16
    3c22:	29 f0       	breq	.+10     	; 0x3c2e <vfprintf+0x28e>
    3c24:	b7 01       	movw	r22, r14
    3c26:	80 2f       	mov	r24, r16
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3c2e:	93 fc       	sbrc	r9, 3
    3c30:	09 c0       	rjmp	.+18     	; 0x3c44 <vfprintf+0x2a4>
    3c32:	55 20       	and	r5, r5
    3c34:	39 f0       	breq	.+14     	; 0x3c44 <vfprintf+0x2a4>
    3c36:	b7 01       	movw	r22, r14
    3c38:	80 e3       	ldi	r24, 0x30	; 48
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3c40:	5a 94       	dec	r5
    3c42:	f7 cf       	rjmp	.-18     	; 0x3c32 <vfprintf+0x292>
    3c44:	97 fe       	sbrs	r9, 7
    3c46:	4c c0       	rjmp	.+152    	; 0x3ce0 <vfprintf+0x340>
    3c48:	46 01       	movw	r8, r12
    3c4a:	d7 fe       	sbrs	r13, 7
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <vfprintf+0x2b2>
    3c4e:	81 2c       	mov	r8, r1
    3c50:	91 2c       	mov	r9, r1
    3c52:	c6 01       	movw	r24, r12
    3c54:	88 19       	sub	r24, r8
    3c56:	99 09       	sbc	r25, r9
    3c58:	f3 01       	movw	r30, r6
    3c5a:	e8 0f       	add	r30, r24
    3c5c:	f9 1f       	adc	r31, r25
    3c5e:	fe 87       	std	Y+14, r31	; 0x0e
    3c60:	ed 87       	std	Y+13, r30	; 0x0d
    3c62:	96 01       	movw	r18, r12
    3c64:	24 19       	sub	r18, r4
    3c66:	31 09       	sbc	r19, r1
    3c68:	38 8b       	std	Y+16, r19	; 0x10
    3c6a:	2f 87       	std	Y+15, r18	; 0x0f
    3c6c:	01 2f       	mov	r16, r17
    3c6e:	10 e0       	ldi	r17, 0x00	; 0
    3c70:	11 95       	neg	r17
    3c72:	01 95       	neg	r16
    3c74:	11 09       	sbc	r17, r1
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	83 16       	cp	r8, r19
    3c7a:	93 06       	cpc	r9, r19
    3c7c:	29 f4       	brne	.+10     	; 0x3c88 <vfprintf+0x2e8>
    3c7e:	b7 01       	movw	r22, r14
    3c80:	8e e2       	ldi	r24, 0x2E	; 46
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3c88:	c8 14       	cp	r12, r8
    3c8a:	d9 04       	cpc	r13, r9
    3c8c:	4c f0       	brlt	.+18     	; 0x3ca0 <vfprintf+0x300>
    3c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c90:	98 89       	ldd	r25, Y+16	; 0x10
    3c92:	88 15       	cp	r24, r8
    3c94:	99 05       	cpc	r25, r9
    3c96:	24 f4       	brge	.+8      	; 0x3ca0 <vfprintf+0x300>
    3c98:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c9a:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c9c:	81 81       	ldd	r24, Z+1	; 0x01
    3c9e:	01 c0       	rjmp	.+2      	; 0x3ca2 <vfprintf+0x302>
    3ca0:	80 e3       	ldi	r24, 0x30	; 48
    3ca2:	f1 e0       	ldi	r31, 0x01	; 1
    3ca4:	8f 1a       	sub	r8, r31
    3ca6:	91 08       	sbc	r9, r1
    3ca8:	2d 85       	ldd	r18, Y+13	; 0x0d
    3caa:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cac:	2f 5f       	subi	r18, 0xFF	; 255
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb0:	3e 87       	std	Y+14, r19	; 0x0e
    3cb2:	2d 87       	std	Y+13, r18	; 0x0d
    3cb4:	80 16       	cp	r8, r16
    3cb6:	91 06       	cpc	r9, r17
    3cb8:	2c f0       	brlt	.+10     	; 0x3cc4 <vfprintf+0x324>
    3cba:	b7 01       	movw	r22, r14
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3cc2:	d9 cf       	rjmp	.-78     	; 0x3c76 <vfprintf+0x2d6>
    3cc4:	c8 14       	cp	r12, r8
    3cc6:	d9 04       	cpc	r13, r9
    3cc8:	41 f4       	brne	.+16     	; 0x3cda <vfprintf+0x33a>
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	96 33       	cpi	r25, 0x36	; 54
    3cce:	20 f4       	brcc	.+8      	; 0x3cd8 <vfprintf+0x338>
    3cd0:	95 33       	cpi	r25, 0x35	; 53
    3cd2:	19 f4       	brne	.+6      	; 0x3cda <vfprintf+0x33a>
    3cd4:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cd6:	34 ff       	sbrs	r19, 4
    3cd8:	81 e3       	ldi	r24, 0x31	; 49
    3cda:	b7 01       	movw	r22, r14
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	4e c0       	rjmp	.+156    	; 0x3d7c <vfprintf+0x3dc>
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	81 33       	cpi	r24, 0x31	; 49
    3ce4:	19 f0       	breq	.+6      	; 0x3cec <vfprintf+0x34c>
    3ce6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ce8:	9f 7e       	andi	r25, 0xEF	; 239
    3cea:	9c 87       	std	Y+12, r25	; 0x0c
    3cec:	b7 01       	movw	r22, r14
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3cf4:	11 11       	cpse	r17, r1
    3cf6:	05 c0       	rjmp	.+10     	; 0x3d02 <vfprintf+0x362>
    3cf8:	94 fc       	sbrc	r9, 4
    3cfa:	18 c0       	rjmp	.+48     	; 0x3d2c <vfprintf+0x38c>
    3cfc:	85 e6       	ldi	r24, 0x65	; 101
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	17 c0       	rjmp	.+46     	; 0x3d30 <vfprintf+0x390>
    3d02:	b7 01       	movw	r22, r14
    3d04:	8e e2       	ldi	r24, 0x2E	; 46
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d0c:	1e 5f       	subi	r17, 0xFE	; 254
    3d0e:	82 e0       	ldi	r24, 0x02	; 2
    3d10:	01 e0       	ldi	r16, 0x01	; 1
    3d12:	08 0f       	add	r16, r24
    3d14:	f3 01       	movw	r30, r6
    3d16:	e8 0f       	add	r30, r24
    3d18:	f1 1d       	adc	r31, r1
    3d1a:	80 81       	ld	r24, Z
    3d1c:	b7 01       	movw	r22, r14
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d24:	80 2f       	mov	r24, r16
    3d26:	01 13       	cpse	r16, r17
    3d28:	f3 cf       	rjmp	.-26     	; 0x3d10 <vfprintf+0x370>
    3d2a:	e6 cf       	rjmp	.-52     	; 0x3cf8 <vfprintf+0x358>
    3d2c:	85 e4       	ldi	r24, 0x45	; 69
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	b7 01       	movw	r22, r14
    3d32:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d36:	d7 fc       	sbrc	r13, 7
    3d38:	06 c0       	rjmp	.+12     	; 0x3d46 <vfprintf+0x3a6>
    3d3a:	c1 14       	cp	r12, r1
    3d3c:	d1 04       	cpc	r13, r1
    3d3e:	41 f4       	brne	.+16     	; 0x3d50 <vfprintf+0x3b0>
    3d40:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d42:	e4 ff       	sbrs	r30, 4
    3d44:	05 c0       	rjmp	.+10     	; 0x3d50 <vfprintf+0x3b0>
    3d46:	d1 94       	neg	r13
    3d48:	c1 94       	neg	r12
    3d4a:	d1 08       	sbc	r13, r1
    3d4c:	8d e2       	ldi	r24, 0x2D	; 45
    3d4e:	01 c0       	rjmp	.+2      	; 0x3d52 <vfprintf+0x3b2>
    3d50:	8b e2       	ldi	r24, 0x2B	; 43
    3d52:	b7 01       	movw	r22, r14
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d5a:	80 e3       	ldi	r24, 0x30	; 48
    3d5c:	2a e0       	ldi	r18, 0x0A	; 10
    3d5e:	c2 16       	cp	r12, r18
    3d60:	d1 04       	cpc	r13, r1
    3d62:	2c f0       	brlt	.+10     	; 0x3d6e <vfprintf+0x3ce>
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	fa e0       	ldi	r31, 0x0A	; 10
    3d68:	cf 1a       	sub	r12, r31
    3d6a:	d1 08       	sbc	r13, r1
    3d6c:	f7 cf       	rjmp	.-18     	; 0x3d5c <vfprintf+0x3bc>
    3d6e:	b7 01       	movw	r22, r14
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d76:	b7 01       	movw	r22, r14
    3d78:	c6 01       	movw	r24, r12
    3d7a:	c0 96       	adiw	r24, 0x30	; 48
    3d7c:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3d80:	54 c1       	rjmp	.+680    	; 0x402a <vfprintf+0x68a>
    3d82:	83 36       	cpi	r24, 0x63	; 99
    3d84:	31 f0       	breq	.+12     	; 0x3d92 <vfprintf+0x3f2>
    3d86:	83 37       	cpi	r24, 0x73	; 115
    3d88:	79 f0       	breq	.+30     	; 0x3da8 <vfprintf+0x408>
    3d8a:	83 35       	cpi	r24, 0x53	; 83
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <vfprintf+0x3f0>
    3d8e:	56 c0       	rjmp	.+172    	; 0x3e3c <vfprintf+0x49c>
    3d90:	20 c0       	rjmp	.+64     	; 0x3dd2 <vfprintf+0x432>
    3d92:	56 01       	movw	r10, r12
    3d94:	32 e0       	ldi	r19, 0x02	; 2
    3d96:	a3 0e       	add	r10, r19
    3d98:	b1 1c       	adc	r11, r1
    3d9a:	f6 01       	movw	r30, r12
    3d9c:	80 81       	ld	r24, Z
    3d9e:	89 83       	std	Y+1, r24	; 0x01
    3da0:	01 e0       	ldi	r16, 0x01	; 1
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	63 01       	movw	r12, r6
    3da6:	12 c0       	rjmp	.+36     	; 0x3dcc <vfprintf+0x42c>
    3da8:	56 01       	movw	r10, r12
    3daa:	f2 e0       	ldi	r31, 0x02	; 2
    3dac:	af 0e       	add	r10, r31
    3dae:	b1 1c       	adc	r11, r1
    3db0:	f6 01       	movw	r30, r12
    3db2:	c0 80       	ld	r12, Z
    3db4:	d1 80       	ldd	r13, Z+1	; 0x01
    3db6:	96 fe       	sbrs	r9, 6
    3db8:	03 c0       	rjmp	.+6      	; 0x3dc0 <vfprintf+0x420>
    3dba:	61 2f       	mov	r22, r17
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	02 c0       	rjmp	.+4      	; 0x3dc4 <vfprintf+0x424>
    3dc0:	6f ef       	ldi	r22, 0xFF	; 255
    3dc2:	7f ef       	ldi	r23, 0xFF	; 255
    3dc4:	c6 01       	movw	r24, r12
    3dc6:	0e 94 b1 21 	call	0x4362	; 0x4362 <strnlen>
    3dca:	8c 01       	movw	r16, r24
    3dcc:	f9 2d       	mov	r31, r9
    3dce:	ff 77       	andi	r31, 0x7F	; 127
    3dd0:	14 c0       	rjmp	.+40     	; 0x3dfa <vfprintf+0x45a>
    3dd2:	56 01       	movw	r10, r12
    3dd4:	22 e0       	ldi	r18, 0x02	; 2
    3dd6:	a2 0e       	add	r10, r18
    3dd8:	b1 1c       	adc	r11, r1
    3dda:	f6 01       	movw	r30, r12
    3ddc:	c0 80       	ld	r12, Z
    3dde:	d1 80       	ldd	r13, Z+1	; 0x01
    3de0:	96 fe       	sbrs	r9, 6
    3de2:	03 c0       	rjmp	.+6      	; 0x3dea <vfprintf+0x44a>
    3de4:	61 2f       	mov	r22, r17
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <vfprintf+0x44e>
    3dea:	6f ef       	ldi	r22, 0xFF	; 255
    3dec:	7f ef       	ldi	r23, 0xFF	; 255
    3dee:	c6 01       	movw	r24, r12
    3df0:	0e 94 99 21 	call	0x4332	; 0x4332 <strnlen_P>
    3df4:	8c 01       	movw	r16, r24
    3df6:	f9 2d       	mov	r31, r9
    3df8:	f0 68       	ori	r31, 0x80	; 128
    3dfa:	9f 2e       	mov	r9, r31
    3dfc:	f3 fd       	sbrc	r31, 3
    3dfe:	1a c0       	rjmp	.+52     	; 0x3e34 <vfprintf+0x494>
    3e00:	85 2d       	mov	r24, r5
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	08 17       	cp	r16, r24
    3e06:	19 07       	cpc	r17, r25
    3e08:	a8 f4       	brcc	.+42     	; 0x3e34 <vfprintf+0x494>
    3e0a:	b7 01       	movw	r22, r14
    3e0c:	80 e2       	ldi	r24, 0x20	; 32
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3e14:	5a 94       	dec	r5
    3e16:	f4 cf       	rjmp	.-24     	; 0x3e00 <vfprintf+0x460>
    3e18:	f6 01       	movw	r30, r12
    3e1a:	97 fc       	sbrc	r9, 7
    3e1c:	85 91       	lpm	r24, Z+
    3e1e:	97 fe       	sbrs	r9, 7
    3e20:	81 91       	ld	r24, Z+
    3e22:	6f 01       	movw	r12, r30
    3e24:	b7 01       	movw	r22, r14
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3e2c:	51 10       	cpse	r5, r1
    3e2e:	5a 94       	dec	r5
    3e30:	01 50       	subi	r16, 0x01	; 1
    3e32:	11 09       	sbc	r17, r1
    3e34:	01 15       	cp	r16, r1
    3e36:	11 05       	cpc	r17, r1
    3e38:	79 f7       	brne	.-34     	; 0x3e18 <vfprintf+0x478>
    3e3a:	f7 c0       	rjmp	.+494    	; 0x402a <vfprintf+0x68a>
    3e3c:	84 36       	cpi	r24, 0x64	; 100
    3e3e:	11 f0       	breq	.+4      	; 0x3e44 <vfprintf+0x4a4>
    3e40:	89 36       	cpi	r24, 0x69	; 105
    3e42:	61 f5       	brne	.+88     	; 0x3e9c <vfprintf+0x4fc>
    3e44:	56 01       	movw	r10, r12
    3e46:	97 fe       	sbrs	r9, 7
    3e48:	09 c0       	rjmp	.+18     	; 0x3e5c <vfprintf+0x4bc>
    3e4a:	24 e0       	ldi	r18, 0x04	; 4
    3e4c:	a2 0e       	add	r10, r18
    3e4e:	b1 1c       	adc	r11, r1
    3e50:	f6 01       	movw	r30, r12
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	0a c0       	rjmp	.+20     	; 0x3e70 <vfprintf+0x4d0>
    3e5c:	f2 e0       	ldi	r31, 0x02	; 2
    3e5e:	af 0e       	add	r10, r31
    3e60:	b1 1c       	adc	r11, r1
    3e62:	f6 01       	movw	r30, r12
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	07 2e       	mov	r0, r23
    3e6a:	00 0c       	add	r0, r0
    3e6c:	88 0b       	sbc	r24, r24
    3e6e:	99 0b       	sbc	r25, r25
    3e70:	f9 2d       	mov	r31, r9
    3e72:	ff 76       	andi	r31, 0x6F	; 111
    3e74:	9f 2e       	mov	r9, r31
    3e76:	97 ff       	sbrs	r25, 7
    3e78:	09 c0       	rjmp	.+18     	; 0x3e8c <vfprintf+0x4ec>
    3e7a:	90 95       	com	r25
    3e7c:	80 95       	com	r24
    3e7e:	70 95       	com	r23
    3e80:	61 95       	neg	r22
    3e82:	7f 4f       	sbci	r23, 0xFF	; 255
    3e84:	8f 4f       	sbci	r24, 0xFF	; 255
    3e86:	9f 4f       	sbci	r25, 0xFF	; 255
    3e88:	f0 68       	ori	r31, 0x80	; 128
    3e8a:	9f 2e       	mov	r9, r31
    3e8c:	2a e0       	ldi	r18, 0x0A	; 10
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	a3 01       	movw	r20, r6
    3e92:	0e 94 14 22 	call	0x4428	; 0x4428 <__ultoa_invert>
    3e96:	c8 2e       	mov	r12, r24
    3e98:	c6 18       	sub	r12, r6
    3e9a:	3f c0       	rjmp	.+126    	; 0x3f1a <vfprintf+0x57a>
    3e9c:	09 2d       	mov	r16, r9
    3e9e:	85 37       	cpi	r24, 0x75	; 117
    3ea0:	21 f4       	brne	.+8      	; 0x3eaa <vfprintf+0x50a>
    3ea2:	0f 7e       	andi	r16, 0xEF	; 239
    3ea4:	2a e0       	ldi	r18, 0x0A	; 10
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	1d c0       	rjmp	.+58     	; 0x3ee4 <vfprintf+0x544>
    3eaa:	09 7f       	andi	r16, 0xF9	; 249
    3eac:	8f 36       	cpi	r24, 0x6F	; 111
    3eae:	91 f0       	breq	.+36     	; 0x3ed4 <vfprintf+0x534>
    3eb0:	18 f4       	brcc	.+6      	; 0x3eb8 <vfprintf+0x518>
    3eb2:	88 35       	cpi	r24, 0x58	; 88
    3eb4:	59 f0       	breq	.+22     	; 0x3ecc <vfprintf+0x52c>
    3eb6:	c3 c0       	rjmp	.+390    	; 0x403e <vfprintf+0x69e>
    3eb8:	80 37       	cpi	r24, 0x70	; 112
    3eba:	19 f0       	breq	.+6      	; 0x3ec2 <vfprintf+0x522>
    3ebc:	88 37       	cpi	r24, 0x78	; 120
    3ebe:	11 f0       	breq	.+4      	; 0x3ec4 <vfprintf+0x524>
    3ec0:	be c0       	rjmp	.+380    	; 0x403e <vfprintf+0x69e>
    3ec2:	00 61       	ori	r16, 0x10	; 16
    3ec4:	04 ff       	sbrs	r16, 4
    3ec6:	09 c0       	rjmp	.+18     	; 0x3eda <vfprintf+0x53a>
    3ec8:	04 60       	ori	r16, 0x04	; 4
    3eca:	07 c0       	rjmp	.+14     	; 0x3eda <vfprintf+0x53a>
    3ecc:	94 fe       	sbrs	r9, 4
    3ece:	08 c0       	rjmp	.+16     	; 0x3ee0 <vfprintf+0x540>
    3ed0:	06 60       	ori	r16, 0x06	; 6
    3ed2:	06 c0       	rjmp	.+12     	; 0x3ee0 <vfprintf+0x540>
    3ed4:	28 e0       	ldi	r18, 0x08	; 8
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	05 c0       	rjmp	.+10     	; 0x3ee4 <vfprintf+0x544>
    3eda:	20 e1       	ldi	r18, 0x10	; 16
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <vfprintf+0x544>
    3ee0:	20 e1       	ldi	r18, 0x10	; 16
    3ee2:	32 e0       	ldi	r19, 0x02	; 2
    3ee4:	56 01       	movw	r10, r12
    3ee6:	07 ff       	sbrs	r16, 7
    3ee8:	09 c0       	rjmp	.+18     	; 0x3efc <vfprintf+0x55c>
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	a8 0e       	add	r10, r24
    3eee:	b1 1c       	adc	r11, r1
    3ef0:	f6 01       	movw	r30, r12
    3ef2:	60 81       	ld	r22, Z
    3ef4:	71 81       	ldd	r23, Z+1	; 0x01
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	08 c0       	rjmp	.+16     	; 0x3f0c <vfprintf+0x56c>
    3efc:	f2 e0       	ldi	r31, 0x02	; 2
    3efe:	af 0e       	add	r10, r31
    3f00:	b1 1c       	adc	r11, r1
    3f02:	f6 01       	movw	r30, r12
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a3 01       	movw	r20, r6
    3f0e:	0e 94 14 22 	call	0x4428	; 0x4428 <__ultoa_invert>
    3f12:	c8 2e       	mov	r12, r24
    3f14:	c6 18       	sub	r12, r6
    3f16:	0f 77       	andi	r16, 0x7F	; 127
    3f18:	90 2e       	mov	r9, r16
    3f1a:	96 fe       	sbrs	r9, 6
    3f1c:	0b c0       	rjmp	.+22     	; 0x3f34 <vfprintf+0x594>
    3f1e:	09 2d       	mov	r16, r9
    3f20:	0e 7f       	andi	r16, 0xFE	; 254
    3f22:	c1 16       	cp	r12, r17
    3f24:	50 f4       	brcc	.+20     	; 0x3f3a <vfprintf+0x59a>
    3f26:	94 fe       	sbrs	r9, 4
    3f28:	0a c0       	rjmp	.+20     	; 0x3f3e <vfprintf+0x59e>
    3f2a:	92 fc       	sbrc	r9, 2
    3f2c:	08 c0       	rjmp	.+16     	; 0x3f3e <vfprintf+0x59e>
    3f2e:	09 2d       	mov	r16, r9
    3f30:	0e 7e       	andi	r16, 0xEE	; 238
    3f32:	05 c0       	rjmp	.+10     	; 0x3f3e <vfprintf+0x59e>
    3f34:	dc 2c       	mov	r13, r12
    3f36:	09 2d       	mov	r16, r9
    3f38:	03 c0       	rjmp	.+6      	; 0x3f40 <vfprintf+0x5a0>
    3f3a:	dc 2c       	mov	r13, r12
    3f3c:	01 c0       	rjmp	.+2      	; 0x3f40 <vfprintf+0x5a0>
    3f3e:	d1 2e       	mov	r13, r17
    3f40:	04 ff       	sbrs	r16, 4
    3f42:	0d c0       	rjmp	.+26     	; 0x3f5e <vfprintf+0x5be>
    3f44:	fe 01       	movw	r30, r28
    3f46:	ec 0d       	add	r30, r12
    3f48:	f1 1d       	adc	r31, r1
    3f4a:	80 81       	ld	r24, Z
    3f4c:	80 33       	cpi	r24, 0x30	; 48
    3f4e:	11 f4       	brne	.+4      	; 0x3f54 <vfprintf+0x5b4>
    3f50:	09 7e       	andi	r16, 0xE9	; 233
    3f52:	09 c0       	rjmp	.+18     	; 0x3f66 <vfprintf+0x5c6>
    3f54:	02 ff       	sbrs	r16, 2
    3f56:	06 c0       	rjmp	.+12     	; 0x3f64 <vfprintf+0x5c4>
    3f58:	d3 94       	inc	r13
    3f5a:	d3 94       	inc	r13
    3f5c:	04 c0       	rjmp	.+8      	; 0x3f66 <vfprintf+0x5c6>
    3f5e:	80 2f       	mov	r24, r16
    3f60:	86 78       	andi	r24, 0x86	; 134
    3f62:	09 f0       	breq	.+2      	; 0x3f66 <vfprintf+0x5c6>
    3f64:	d3 94       	inc	r13
    3f66:	03 fd       	sbrc	r16, 3
    3f68:	11 c0       	rjmp	.+34     	; 0x3f8c <vfprintf+0x5ec>
    3f6a:	00 ff       	sbrs	r16, 0
    3f6c:	06 c0       	rjmp	.+12     	; 0x3f7a <vfprintf+0x5da>
    3f6e:	1c 2d       	mov	r17, r12
    3f70:	d5 14       	cp	r13, r5
    3f72:	80 f4       	brcc	.+32     	; 0x3f94 <vfprintf+0x5f4>
    3f74:	15 0d       	add	r17, r5
    3f76:	1d 19       	sub	r17, r13
    3f78:	0d c0       	rjmp	.+26     	; 0x3f94 <vfprintf+0x5f4>
    3f7a:	d5 14       	cp	r13, r5
    3f7c:	58 f4       	brcc	.+22     	; 0x3f94 <vfprintf+0x5f4>
    3f7e:	b7 01       	movw	r22, r14
    3f80:	80 e2       	ldi	r24, 0x20	; 32
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3f88:	d3 94       	inc	r13
    3f8a:	f7 cf       	rjmp	.-18     	; 0x3f7a <vfprintf+0x5da>
    3f8c:	d5 14       	cp	r13, r5
    3f8e:	10 f4       	brcc	.+4      	; 0x3f94 <vfprintf+0x5f4>
    3f90:	5d 18       	sub	r5, r13
    3f92:	01 c0       	rjmp	.+2      	; 0x3f96 <vfprintf+0x5f6>
    3f94:	51 2c       	mov	r5, r1
    3f96:	04 ff       	sbrs	r16, 4
    3f98:	10 c0       	rjmp	.+32     	; 0x3fba <vfprintf+0x61a>
    3f9a:	b7 01       	movw	r22, r14
    3f9c:	80 e3       	ldi	r24, 0x30	; 48
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3fa4:	02 ff       	sbrs	r16, 2
    3fa6:	17 c0       	rjmp	.+46     	; 0x3fd6 <vfprintf+0x636>
    3fa8:	01 fd       	sbrc	r16, 1
    3faa:	03 c0       	rjmp	.+6      	; 0x3fb2 <vfprintf+0x612>
    3fac:	88 e7       	ldi	r24, 0x78	; 120
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	02 c0       	rjmp	.+4      	; 0x3fb6 <vfprintf+0x616>
    3fb2:	88 e5       	ldi	r24, 0x58	; 88
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	0c c0       	rjmp	.+24     	; 0x3fd2 <vfprintf+0x632>
    3fba:	80 2f       	mov	r24, r16
    3fbc:	86 78       	andi	r24, 0x86	; 134
    3fbe:	59 f0       	breq	.+22     	; 0x3fd6 <vfprintf+0x636>
    3fc0:	01 ff       	sbrs	r16, 1
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <vfprintf+0x628>
    3fc4:	8b e2       	ldi	r24, 0x2B	; 43
    3fc6:	01 c0       	rjmp	.+2      	; 0x3fca <vfprintf+0x62a>
    3fc8:	80 e2       	ldi	r24, 0x20	; 32
    3fca:	07 fd       	sbrc	r16, 7
    3fcc:	8d e2       	ldi	r24, 0x2D	; 45
    3fce:	b7 01       	movw	r22, r14
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3fd6:	c1 16       	cp	r12, r17
    3fd8:	38 f4       	brcc	.+14     	; 0x3fe8 <vfprintf+0x648>
    3fda:	b7 01       	movw	r22, r14
    3fdc:	80 e3       	ldi	r24, 0x30	; 48
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3fe4:	11 50       	subi	r17, 0x01	; 1
    3fe6:	f7 cf       	rjmp	.-18     	; 0x3fd6 <vfprintf+0x636>
    3fe8:	ca 94       	dec	r12
    3fea:	f3 01       	movw	r30, r6
    3fec:	ec 0d       	add	r30, r12
    3fee:	f1 1d       	adc	r31, r1
    3ff0:	80 81       	ld	r24, Z
    3ff2:	b7 01       	movw	r22, r14
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    3ffa:	c1 10       	cpse	r12, r1
    3ffc:	f5 cf       	rjmp	.-22     	; 0x3fe8 <vfprintf+0x648>
    3ffe:	15 c0       	rjmp	.+42     	; 0x402a <vfprintf+0x68a>
    4000:	f4 e0       	ldi	r31, 0x04	; 4
    4002:	f5 15       	cp	r31, r5
    4004:	60 f5       	brcc	.+88     	; 0x405e <vfprintf+0x6be>
    4006:	84 e0       	ldi	r24, 0x04	; 4
    4008:	58 1a       	sub	r5, r24
    400a:	93 fe       	sbrs	r9, 3
    400c:	1f c0       	rjmp	.+62     	; 0x404c <vfprintf+0x6ac>
    400e:	01 11       	cpse	r16, r1
    4010:	27 c0       	rjmp	.+78     	; 0x4060 <vfprintf+0x6c0>
    4012:	2c 85       	ldd	r18, Y+12	; 0x0c
    4014:	23 ff       	sbrs	r18, 3
    4016:	2a c0       	rjmp	.+84     	; 0x406c <vfprintf+0x6cc>
    4018:	04 ed       	ldi	r16, 0xD4	; 212
    401a:	12 e0       	ldi	r17, 0x02	; 2
    401c:	39 2d       	mov	r19, r9
    401e:	30 71       	andi	r19, 0x10	; 16
    4020:	93 2e       	mov	r9, r19
    4022:	f8 01       	movw	r30, r16
    4024:	84 91       	lpm	r24, Z
    4026:	81 11       	cpse	r24, r1
    4028:	24 c0       	rjmp	.+72     	; 0x4072 <vfprintf+0x6d2>
    402a:	55 20       	and	r5, r5
    402c:	09 f4       	brne	.+2      	; 0x4030 <vfprintf+0x690>
    402e:	e4 cc       	rjmp	.-1592   	; 0x39f8 <vfprintf+0x58>
    4030:	b7 01       	movw	r22, r14
    4032:	80 e2       	ldi	r24, 0x20	; 32
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    403a:	5a 94       	dec	r5
    403c:	f6 cf       	rjmp	.-20     	; 0x402a <vfprintf+0x68a>
    403e:	f7 01       	movw	r30, r14
    4040:	86 81       	ldd	r24, Z+6	; 0x06
    4042:	97 81       	ldd	r25, Z+7	; 0x07
    4044:	26 c0       	rjmp	.+76     	; 0x4092 <vfprintf+0x6f2>
    4046:	8f ef       	ldi	r24, 0xFF	; 255
    4048:	9f ef       	ldi	r25, 0xFF	; 255
    404a:	23 c0       	rjmp	.+70     	; 0x4092 <vfprintf+0x6f2>
    404c:	b7 01       	movw	r22, r14
    404e:	80 e2       	ldi	r24, 0x20	; 32
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    4056:	5a 94       	dec	r5
    4058:	51 10       	cpse	r5, r1
    405a:	f8 cf       	rjmp	.-16     	; 0x404c <vfprintf+0x6ac>
    405c:	d8 cf       	rjmp	.-80     	; 0x400e <vfprintf+0x66e>
    405e:	51 2c       	mov	r5, r1
    4060:	b7 01       	movw	r22, r14
    4062:	80 2f       	mov	r24, r16
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    406a:	d3 cf       	rjmp	.-90     	; 0x4012 <vfprintf+0x672>
    406c:	08 ed       	ldi	r16, 0xD8	; 216
    406e:	12 e0       	ldi	r17, 0x02	; 2
    4070:	d5 cf       	rjmp	.-86     	; 0x401c <vfprintf+0x67c>
    4072:	91 10       	cpse	r9, r1
    4074:	80 52       	subi	r24, 0x20	; 32
    4076:	b7 01       	movw	r22, r14
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	0e 94 bc 21 	call	0x4378	; 0x4378 <fputc>
    407e:	0f 5f       	subi	r16, 0xFF	; 255
    4080:	1f 4f       	sbci	r17, 0xFF	; 255
    4082:	cf cf       	rjmp	.-98     	; 0x4022 <vfprintf+0x682>
    4084:	23 e0       	ldi	r18, 0x03	; 3
    4086:	25 15       	cp	r18, r5
    4088:	10 f4       	brcc	.+4      	; 0x408e <vfprintf+0x6ee>
    408a:	83 e0       	ldi	r24, 0x03	; 3
    408c:	bd cf       	rjmp	.-134    	; 0x4008 <vfprintf+0x668>
    408e:	51 2c       	mov	r5, r1
    4090:	c0 cf       	rjmp	.-128    	; 0x4012 <vfprintf+0x672>
    4092:	60 96       	adiw	r28, 0x10	; 16
    4094:	e2 e1       	ldi	r30, 0x12	; 18
    4096:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__epilogue_restores__>

0000409a <__divmodhi4>:
    409a:	97 fb       	bst	r25, 7
    409c:	07 2e       	mov	r0, r23
    409e:	16 f4       	brtc	.+4      	; 0x40a4 <__divmodhi4+0xa>
    40a0:	00 94       	com	r0
    40a2:	07 d0       	rcall	.+14     	; 0x40b2 <__divmodhi4_neg1>
    40a4:	77 fd       	sbrc	r23, 7
    40a6:	09 d0       	rcall	.+18     	; 0x40ba <__divmodhi4_neg2>
    40a8:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodhi4>
    40ac:	07 fc       	sbrc	r0, 7
    40ae:	05 d0       	rcall	.+10     	; 0x40ba <__divmodhi4_neg2>
    40b0:	3e f4       	brtc	.+14     	; 0x40c0 <__divmodhi4_exit>

000040b2 <__divmodhi4_neg1>:
    40b2:	90 95       	com	r25
    40b4:	81 95       	neg	r24
    40b6:	9f 4f       	sbci	r25, 0xFF	; 255
    40b8:	08 95       	ret

000040ba <__divmodhi4_neg2>:
    40ba:	70 95       	com	r23
    40bc:	61 95       	neg	r22
    40be:	7f 4f       	sbci	r23, 0xFF	; 255

000040c0 <__divmodhi4_exit>:
    40c0:	08 95       	ret

000040c2 <__tablejump2__>:
    40c2:	ee 0f       	add	r30, r30
    40c4:	ff 1f       	adc	r31, r31
    40c6:	05 90       	lpm	r0, Z+
    40c8:	f4 91       	lpm	r31, Z
    40ca:	e0 2d       	mov	r30, r0
    40cc:	09 94       	ijmp

000040ce <__umulhisi3>:
    40ce:	a2 9f       	mul	r26, r18
    40d0:	b0 01       	movw	r22, r0
    40d2:	b3 9f       	mul	r27, r19
    40d4:	c0 01       	movw	r24, r0
    40d6:	a3 9f       	mul	r26, r19
    40d8:	70 0d       	add	r23, r0
    40da:	81 1d       	adc	r24, r1
    40dc:	11 24       	eor	r1, r1
    40de:	91 1d       	adc	r25, r1
    40e0:	b2 9f       	mul	r27, r18
    40e2:	70 0d       	add	r23, r0
    40e4:	81 1d       	adc	r24, r1
    40e6:	11 24       	eor	r1, r1
    40e8:	91 1d       	adc	r25, r1
    40ea:	08 95       	ret

000040ec <__prologue_saves__>:
    40ec:	2f 92       	push	r2
    40ee:	3f 92       	push	r3
    40f0:	4f 92       	push	r4
    40f2:	5f 92       	push	r5
    40f4:	6f 92       	push	r6
    40f6:	7f 92       	push	r7
    40f8:	8f 92       	push	r8
    40fa:	9f 92       	push	r9
    40fc:	af 92       	push	r10
    40fe:	bf 92       	push	r11
    4100:	cf 92       	push	r12
    4102:	df 92       	push	r13
    4104:	ef 92       	push	r14
    4106:	ff 92       	push	r15
    4108:	0f 93       	push	r16
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
    4114:	ca 1b       	sub	r28, r26
    4116:	db 0b       	sbc	r29, r27
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	09 94       	ijmp

00004124 <__epilogue_restores__>:
    4124:	2a 88       	ldd	r2, Y+18	; 0x12
    4126:	39 88       	ldd	r3, Y+17	; 0x11
    4128:	48 88       	ldd	r4, Y+16	; 0x10
    412a:	5f 84       	ldd	r5, Y+15	; 0x0f
    412c:	6e 84       	ldd	r6, Y+14	; 0x0e
    412e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4130:	8c 84       	ldd	r8, Y+12	; 0x0c
    4132:	9b 84       	ldd	r9, Y+11	; 0x0b
    4134:	aa 84       	ldd	r10, Y+10	; 0x0a
    4136:	b9 84       	ldd	r11, Y+9	; 0x09
    4138:	c8 84       	ldd	r12, Y+8	; 0x08
    413a:	df 80       	ldd	r13, Y+7	; 0x07
    413c:	ee 80       	ldd	r14, Y+6	; 0x06
    413e:	fd 80       	ldd	r15, Y+5	; 0x05
    4140:	0c 81       	ldd	r16, Y+4	; 0x04
    4142:	1b 81       	ldd	r17, Y+3	; 0x03
    4144:	aa 81       	ldd	r26, Y+2	; 0x02
    4146:	b9 81       	ldd	r27, Y+1	; 0x01
    4148:	ce 0f       	add	r28, r30
    414a:	d1 1d       	adc	r29, r1
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	ed 01       	movw	r28, r26
    4158:	08 95       	ret

0000415a <__udivmodhi4>:
    415a:	aa 1b       	sub	r26, r26
    415c:	bb 1b       	sub	r27, r27
    415e:	51 e1       	ldi	r21, 0x11	; 17
    4160:	07 c0       	rjmp	.+14     	; 0x4170 <__udivmodhi4_ep>

00004162 <__udivmodhi4_loop>:
    4162:	aa 1f       	adc	r26, r26
    4164:	bb 1f       	adc	r27, r27
    4166:	a6 17       	cp	r26, r22
    4168:	b7 07       	cpc	r27, r23
    416a:	10 f0       	brcs	.+4      	; 0x4170 <__udivmodhi4_ep>
    416c:	a6 1b       	sub	r26, r22
    416e:	b7 0b       	sbc	r27, r23

00004170 <__udivmodhi4_ep>:
    4170:	88 1f       	adc	r24, r24
    4172:	99 1f       	adc	r25, r25
    4174:	5a 95       	dec	r21
    4176:	a9 f7       	brne	.-22     	; 0x4162 <__udivmodhi4_loop>
    4178:	80 95       	com	r24
    417a:	90 95       	com	r25
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	08 95       	ret

00004182 <__ftoa_engine>:
    4182:	28 30       	cpi	r18, 0x08	; 8
    4184:	08 f0       	brcs	.+2      	; 0x4188 <__ftoa_engine+0x6>
    4186:	27 e0       	ldi	r18, 0x07	; 7
    4188:	33 27       	eor	r19, r19
    418a:	da 01       	movw	r26, r20
    418c:	99 0f       	add	r25, r25
    418e:	31 1d       	adc	r19, r1
    4190:	87 fd       	sbrc	r24, 7
    4192:	91 60       	ori	r25, 0x01	; 1
    4194:	00 96       	adiw	r24, 0x00	; 0
    4196:	61 05       	cpc	r22, r1
    4198:	71 05       	cpc	r23, r1
    419a:	39 f4       	brne	.+14     	; 0x41aa <__ftoa_engine+0x28>
    419c:	32 60       	ori	r19, 0x02	; 2
    419e:	2e 5f       	subi	r18, 0xFE	; 254
    41a0:	3d 93       	st	X+, r19
    41a2:	30 e3       	ldi	r19, 0x30	; 48
    41a4:	2a 95       	dec	r18
    41a6:	e1 f7       	brne	.-8      	; 0x41a0 <__ftoa_engine+0x1e>
    41a8:	08 95       	ret
    41aa:	9f 3f       	cpi	r25, 0xFF	; 255
    41ac:	30 f0       	brcs	.+12     	; 0x41ba <__ftoa_engine+0x38>
    41ae:	80 38       	cpi	r24, 0x80	; 128
    41b0:	71 05       	cpc	r23, r1
    41b2:	61 05       	cpc	r22, r1
    41b4:	09 f0       	breq	.+2      	; 0x41b8 <__ftoa_engine+0x36>
    41b6:	3c 5f       	subi	r19, 0xFC	; 252
    41b8:	3c 5f       	subi	r19, 0xFC	; 252
    41ba:	3d 93       	st	X+, r19
    41bc:	91 30       	cpi	r25, 0x01	; 1
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <__ftoa_engine+0x40>
    41c0:	80 68       	ori	r24, 0x80	; 128
    41c2:	91 1d       	adc	r25, r1
    41c4:	df 93       	push	r29
    41c6:	cf 93       	push	r28
    41c8:	1f 93       	push	r17
    41ca:	0f 93       	push	r16
    41cc:	ff 92       	push	r15
    41ce:	ef 92       	push	r14
    41d0:	19 2f       	mov	r17, r25
    41d2:	98 7f       	andi	r25, 0xF8	; 248
    41d4:	96 95       	lsr	r25
    41d6:	e9 2f       	mov	r30, r25
    41d8:	96 95       	lsr	r25
    41da:	96 95       	lsr	r25
    41dc:	e9 0f       	add	r30, r25
    41de:	ff 27       	eor	r31, r31
    41e0:	ea 5c       	subi	r30, 0xCA	; 202
    41e2:	fc 4f       	sbci	r31, 0xFC	; 252
    41e4:	99 27       	eor	r25, r25
    41e6:	33 27       	eor	r19, r19
    41e8:	ee 24       	eor	r14, r14
    41ea:	ff 24       	eor	r15, r15
    41ec:	a7 01       	movw	r20, r14
    41ee:	e7 01       	movw	r28, r14
    41f0:	05 90       	lpm	r0, Z+
    41f2:	08 94       	sec
    41f4:	07 94       	ror	r0
    41f6:	28 f4       	brcc	.+10     	; 0x4202 <__ftoa_engine+0x80>
    41f8:	36 0f       	add	r19, r22
    41fa:	e7 1e       	adc	r14, r23
    41fc:	f8 1e       	adc	r15, r24
    41fe:	49 1f       	adc	r20, r25
    4200:	51 1d       	adc	r21, r1
    4202:	66 0f       	add	r22, r22
    4204:	77 1f       	adc	r23, r23
    4206:	88 1f       	adc	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	06 94       	lsr	r0
    420c:	a1 f7       	brne	.-24     	; 0x41f6 <__ftoa_engine+0x74>
    420e:	05 90       	lpm	r0, Z+
    4210:	07 94       	ror	r0
    4212:	28 f4       	brcc	.+10     	; 0x421e <__ftoa_engine+0x9c>
    4214:	e7 0e       	add	r14, r23
    4216:	f8 1e       	adc	r15, r24
    4218:	49 1f       	adc	r20, r25
    421a:	56 1f       	adc	r21, r22
    421c:	c1 1d       	adc	r28, r1
    421e:	77 0f       	add	r23, r23
    4220:	88 1f       	adc	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	66 1f       	adc	r22, r22
    4226:	06 94       	lsr	r0
    4228:	a1 f7       	brne	.-24     	; 0x4212 <__ftoa_engine+0x90>
    422a:	05 90       	lpm	r0, Z+
    422c:	07 94       	ror	r0
    422e:	28 f4       	brcc	.+10     	; 0x423a <__ftoa_engine+0xb8>
    4230:	f8 0e       	add	r15, r24
    4232:	49 1f       	adc	r20, r25
    4234:	56 1f       	adc	r21, r22
    4236:	c7 1f       	adc	r28, r23
    4238:	d1 1d       	adc	r29, r1
    423a:	88 0f       	add	r24, r24
    423c:	99 1f       	adc	r25, r25
    423e:	66 1f       	adc	r22, r22
    4240:	77 1f       	adc	r23, r23
    4242:	06 94       	lsr	r0
    4244:	a1 f7       	brne	.-24     	; 0x422e <__ftoa_engine+0xac>
    4246:	05 90       	lpm	r0, Z+
    4248:	07 94       	ror	r0
    424a:	20 f4       	brcc	.+8      	; 0x4254 <__ftoa_engine+0xd2>
    424c:	49 0f       	add	r20, r25
    424e:	56 1f       	adc	r21, r22
    4250:	c7 1f       	adc	r28, r23
    4252:	d8 1f       	adc	r29, r24
    4254:	99 0f       	add	r25, r25
    4256:	66 1f       	adc	r22, r22
    4258:	77 1f       	adc	r23, r23
    425a:	88 1f       	adc	r24, r24
    425c:	06 94       	lsr	r0
    425e:	a9 f7       	brne	.-22     	; 0x424a <__ftoa_engine+0xc8>
    4260:	84 91       	lpm	r24, Z
    4262:	10 95       	com	r17
    4264:	17 70       	andi	r17, 0x07	; 7
    4266:	41 f0       	breq	.+16     	; 0x4278 <__ftoa_engine+0xf6>
    4268:	d6 95       	lsr	r29
    426a:	c7 95       	ror	r28
    426c:	57 95       	ror	r21
    426e:	47 95       	ror	r20
    4270:	f7 94       	ror	r15
    4272:	e7 94       	ror	r14
    4274:	1a 95       	dec	r17
    4276:	c1 f7       	brne	.-16     	; 0x4268 <__ftoa_engine+0xe6>
    4278:	ec ed       	ldi	r30, 0xDC	; 220
    427a:	f2 e0       	ldi	r31, 0x02	; 2
    427c:	68 94       	set
    427e:	15 90       	lpm	r1, Z+
    4280:	15 91       	lpm	r17, Z+
    4282:	35 91       	lpm	r19, Z+
    4284:	65 91       	lpm	r22, Z+
    4286:	95 91       	lpm	r25, Z+
    4288:	05 90       	lpm	r0, Z+
    428a:	7f e2       	ldi	r23, 0x2F	; 47
    428c:	73 95       	inc	r23
    428e:	e1 18       	sub	r14, r1
    4290:	f1 0a       	sbc	r15, r17
    4292:	43 0b       	sbc	r20, r19
    4294:	56 0b       	sbc	r21, r22
    4296:	c9 0b       	sbc	r28, r25
    4298:	d0 09       	sbc	r29, r0
    429a:	c0 f7       	brcc	.-16     	; 0x428c <__ftoa_engine+0x10a>
    429c:	e1 0c       	add	r14, r1
    429e:	f1 1e       	adc	r15, r17
    42a0:	43 1f       	adc	r20, r19
    42a2:	56 1f       	adc	r21, r22
    42a4:	c9 1f       	adc	r28, r25
    42a6:	d0 1d       	adc	r29, r0
    42a8:	7e f4       	brtc	.+30     	; 0x42c8 <__ftoa_engine+0x146>
    42aa:	70 33       	cpi	r23, 0x30	; 48
    42ac:	11 f4       	brne	.+4      	; 0x42b2 <__ftoa_engine+0x130>
    42ae:	8a 95       	dec	r24
    42b0:	e6 cf       	rjmp	.-52     	; 0x427e <__ftoa_engine+0xfc>
    42b2:	e8 94       	clt
    42b4:	01 50       	subi	r16, 0x01	; 1
    42b6:	30 f0       	brcs	.+12     	; 0x42c4 <__ftoa_engine+0x142>
    42b8:	08 0f       	add	r16, r24
    42ba:	0a f4       	brpl	.+2      	; 0x42be <__ftoa_engine+0x13c>
    42bc:	00 27       	eor	r16, r16
    42be:	02 17       	cp	r16, r18
    42c0:	08 f4       	brcc	.+2      	; 0x42c4 <__ftoa_engine+0x142>
    42c2:	20 2f       	mov	r18, r16
    42c4:	23 95       	inc	r18
    42c6:	02 2f       	mov	r16, r18
    42c8:	7a 33       	cpi	r23, 0x3A	; 58
    42ca:	28 f0       	brcs	.+10     	; 0x42d6 <__ftoa_engine+0x154>
    42cc:	79 e3       	ldi	r23, 0x39	; 57
    42ce:	7d 93       	st	X+, r23
    42d0:	2a 95       	dec	r18
    42d2:	e9 f7       	brne	.-6      	; 0x42ce <__ftoa_engine+0x14c>
    42d4:	10 c0       	rjmp	.+32     	; 0x42f6 <__ftoa_engine+0x174>
    42d6:	7d 93       	st	X+, r23
    42d8:	2a 95       	dec	r18
    42da:	89 f6       	brne	.-94     	; 0x427e <__ftoa_engine+0xfc>
    42dc:	06 94       	lsr	r0
    42de:	97 95       	ror	r25
    42e0:	67 95       	ror	r22
    42e2:	37 95       	ror	r19
    42e4:	17 95       	ror	r17
    42e6:	17 94       	ror	r1
    42e8:	e1 18       	sub	r14, r1
    42ea:	f1 0a       	sbc	r15, r17
    42ec:	43 0b       	sbc	r20, r19
    42ee:	56 0b       	sbc	r21, r22
    42f0:	c9 0b       	sbc	r28, r25
    42f2:	d0 09       	sbc	r29, r0
    42f4:	98 f0       	brcs	.+38     	; 0x431c <__ftoa_engine+0x19a>
    42f6:	23 95       	inc	r18
    42f8:	7e 91       	ld	r23, -X
    42fa:	73 95       	inc	r23
    42fc:	7a 33       	cpi	r23, 0x3A	; 58
    42fe:	08 f0       	brcs	.+2      	; 0x4302 <__ftoa_engine+0x180>
    4300:	70 e3       	ldi	r23, 0x30	; 48
    4302:	7c 93       	st	X, r23
    4304:	20 13       	cpse	r18, r16
    4306:	b8 f7       	brcc	.-18     	; 0x42f6 <__ftoa_engine+0x174>
    4308:	7e 91       	ld	r23, -X
    430a:	70 61       	ori	r23, 0x10	; 16
    430c:	7d 93       	st	X+, r23
    430e:	30 f0       	brcs	.+12     	; 0x431c <__ftoa_engine+0x19a>
    4310:	83 95       	inc	r24
    4312:	71 e3       	ldi	r23, 0x31	; 49
    4314:	7d 93       	st	X+, r23
    4316:	70 e3       	ldi	r23, 0x30	; 48
    4318:	2a 95       	dec	r18
    431a:	e1 f7       	brne	.-8      	; 0x4314 <__ftoa_engine+0x192>
    431c:	11 24       	eor	r1, r1
    431e:	ef 90       	pop	r14
    4320:	ff 90       	pop	r15
    4322:	0f 91       	pop	r16
    4324:	1f 91       	pop	r17
    4326:	cf 91       	pop	r28
    4328:	df 91       	pop	r29
    432a:	99 27       	eor	r25, r25
    432c:	87 fd       	sbrc	r24, 7
    432e:	90 95       	com	r25
    4330:	08 95       	ret

00004332 <strnlen_P>:
    4332:	fc 01       	movw	r30, r24
    4334:	05 90       	lpm	r0, Z+
    4336:	61 50       	subi	r22, 0x01	; 1
    4338:	70 40       	sbci	r23, 0x00	; 0
    433a:	01 10       	cpse	r0, r1
    433c:	d8 f7       	brcc	.-10     	; 0x4334 <strnlen_P+0x2>
    433e:	80 95       	com	r24
    4340:	90 95       	com	r25
    4342:	8e 0f       	add	r24, r30
    4344:	9f 1f       	adc	r25, r31
    4346:	08 95       	ret

00004348 <memcmp>:
    4348:	fb 01       	movw	r30, r22
    434a:	dc 01       	movw	r26, r24
    434c:	04 c0       	rjmp	.+8      	; 0x4356 <memcmp+0xe>
    434e:	8d 91       	ld	r24, X+
    4350:	01 90       	ld	r0, Z+
    4352:	80 19       	sub	r24, r0
    4354:	21 f4       	brne	.+8      	; 0x435e <memcmp+0x16>
    4356:	41 50       	subi	r20, 0x01	; 1
    4358:	50 40       	sbci	r21, 0x00	; 0
    435a:	c8 f7       	brcc	.-14     	; 0x434e <memcmp+0x6>
    435c:	88 1b       	sub	r24, r24
    435e:	99 0b       	sbc	r25, r25
    4360:	08 95       	ret

00004362 <strnlen>:
    4362:	fc 01       	movw	r30, r24
    4364:	61 50       	subi	r22, 0x01	; 1
    4366:	70 40       	sbci	r23, 0x00	; 0
    4368:	01 90       	ld	r0, Z+
    436a:	01 10       	cpse	r0, r1
    436c:	d8 f7       	brcc	.-10     	; 0x4364 <strnlen+0x2>
    436e:	80 95       	com	r24
    4370:	90 95       	com	r25
    4372:	8e 0f       	add	r24, r30
    4374:	9f 1f       	adc	r25, r31
    4376:	08 95       	ret

00004378 <fputc>:
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	fb 01       	movw	r30, r22
    4382:	23 81       	ldd	r18, Z+3	; 0x03
    4384:	21 fd       	sbrc	r18, 1
    4386:	03 c0       	rjmp	.+6      	; 0x438e <fputc+0x16>
    4388:	8f ef       	ldi	r24, 0xFF	; 255
    438a:	9f ef       	ldi	r25, 0xFF	; 255
    438c:	2c c0       	rjmp	.+88     	; 0x43e6 <fputc+0x6e>
    438e:	22 ff       	sbrs	r18, 2
    4390:	16 c0       	rjmp	.+44     	; 0x43be <fputc+0x46>
    4392:	46 81       	ldd	r20, Z+6	; 0x06
    4394:	57 81       	ldd	r21, Z+7	; 0x07
    4396:	24 81       	ldd	r18, Z+4	; 0x04
    4398:	35 81       	ldd	r19, Z+5	; 0x05
    439a:	42 17       	cp	r20, r18
    439c:	53 07       	cpc	r21, r19
    439e:	44 f4       	brge	.+16     	; 0x43b0 <fputc+0x38>
    43a0:	a0 81       	ld	r26, Z
    43a2:	b1 81       	ldd	r27, Z+1	; 0x01
    43a4:	9d 01       	movw	r18, r26
    43a6:	2f 5f       	subi	r18, 0xFF	; 255
    43a8:	3f 4f       	sbci	r19, 0xFF	; 255
    43aa:	31 83       	std	Z+1, r19	; 0x01
    43ac:	20 83       	st	Z, r18
    43ae:	8c 93       	st	X, r24
    43b0:	26 81       	ldd	r18, Z+6	; 0x06
    43b2:	37 81       	ldd	r19, Z+7	; 0x07
    43b4:	2f 5f       	subi	r18, 0xFF	; 255
    43b6:	3f 4f       	sbci	r19, 0xFF	; 255
    43b8:	37 83       	std	Z+7, r19	; 0x07
    43ba:	26 83       	std	Z+6, r18	; 0x06
    43bc:	14 c0       	rjmp	.+40     	; 0x43e6 <fputc+0x6e>
    43be:	8b 01       	movw	r16, r22
    43c0:	ec 01       	movw	r28, r24
    43c2:	fb 01       	movw	r30, r22
    43c4:	00 84       	ldd	r0, Z+8	; 0x08
    43c6:	f1 85       	ldd	r31, Z+9	; 0x09
    43c8:	e0 2d       	mov	r30, r0
    43ca:	09 95       	icall
    43cc:	89 2b       	or	r24, r25
    43ce:	e1 f6       	brne	.-72     	; 0x4388 <fputc+0x10>
    43d0:	d8 01       	movw	r26, r16
    43d2:	16 96       	adiw	r26, 0x06	; 6
    43d4:	8d 91       	ld	r24, X+
    43d6:	9c 91       	ld	r25, X
    43d8:	17 97       	sbiw	r26, 0x07	; 7
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	17 96       	adiw	r26, 0x07	; 7
    43de:	9c 93       	st	X, r25
    43e0:	8e 93       	st	-X, r24
    43e2:	16 97       	sbiw	r26, 0x06	; 6
    43e4:	ce 01       	movw	r24, r28
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	08 95       	ret

000043f0 <vsprintf>:
    43f0:	ae e0       	ldi	r26, 0x0E	; 14
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	ee ef       	ldi	r30, 0xFE	; 254
    43f6:	f1 e2       	ldi	r31, 0x21	; 33
    43f8:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__prologue_saves__+0x1c>
    43fc:	8c 01       	movw	r16, r24
    43fe:	86 e0       	ldi	r24, 0x06	; 6
    4400:	8c 83       	std	Y+4, r24	; 0x04
    4402:	1a 83       	std	Y+2, r17	; 0x02
    4404:	09 83       	std	Y+1, r16	; 0x01
    4406:	8f ef       	ldi	r24, 0xFF	; 255
    4408:	9f e7       	ldi	r25, 0x7F	; 127
    440a:	9e 83       	std	Y+6, r25	; 0x06
    440c:	8d 83       	std	Y+5, r24	; 0x05
    440e:	ce 01       	movw	r24, r28
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <vfprintf>
    4416:	ef 81       	ldd	r30, Y+7	; 0x07
    4418:	f8 85       	ldd	r31, Y+8	; 0x08
    441a:	e0 0f       	add	r30, r16
    441c:	f1 1f       	adc	r31, r17
    441e:	10 82       	st	Z, r1
    4420:	2e 96       	adiw	r28, 0x0e	; 14
    4422:	e4 e0       	ldi	r30, 0x04	; 4
    4424:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__epilogue_restores__+0x1c>

00004428 <__ultoa_invert>:
    4428:	fa 01       	movw	r30, r20
    442a:	aa 27       	eor	r26, r26
    442c:	28 30       	cpi	r18, 0x08	; 8
    442e:	51 f1       	breq	.+84     	; 0x4484 <__ultoa_invert+0x5c>
    4430:	20 31       	cpi	r18, 0x10	; 16
    4432:	81 f1       	breq	.+96     	; 0x4494 <__ultoa_invert+0x6c>
    4434:	e8 94       	clt
    4436:	6f 93       	push	r22
    4438:	6e 7f       	andi	r22, 0xFE	; 254
    443a:	6e 5f       	subi	r22, 0xFE	; 254
    443c:	7f 4f       	sbci	r23, 0xFF	; 255
    443e:	8f 4f       	sbci	r24, 0xFF	; 255
    4440:	9f 4f       	sbci	r25, 0xFF	; 255
    4442:	af 4f       	sbci	r26, 0xFF	; 255
    4444:	b1 e0       	ldi	r27, 0x01	; 1
    4446:	3e d0       	rcall	.+124    	; 0x44c4 <__ultoa_invert+0x9c>
    4448:	b4 e0       	ldi	r27, 0x04	; 4
    444a:	3c d0       	rcall	.+120    	; 0x44c4 <__ultoa_invert+0x9c>
    444c:	67 0f       	add	r22, r23
    444e:	78 1f       	adc	r23, r24
    4450:	89 1f       	adc	r24, r25
    4452:	9a 1f       	adc	r25, r26
    4454:	a1 1d       	adc	r26, r1
    4456:	68 0f       	add	r22, r24
    4458:	79 1f       	adc	r23, r25
    445a:	8a 1f       	adc	r24, r26
    445c:	91 1d       	adc	r25, r1
    445e:	a1 1d       	adc	r26, r1
    4460:	6a 0f       	add	r22, r26
    4462:	71 1d       	adc	r23, r1
    4464:	81 1d       	adc	r24, r1
    4466:	91 1d       	adc	r25, r1
    4468:	a1 1d       	adc	r26, r1
    446a:	20 d0       	rcall	.+64     	; 0x44ac <__ultoa_invert+0x84>
    446c:	09 f4       	brne	.+2      	; 0x4470 <__ultoa_invert+0x48>
    446e:	68 94       	set
    4470:	3f 91       	pop	r19
    4472:	2a e0       	ldi	r18, 0x0A	; 10
    4474:	26 9f       	mul	r18, r22
    4476:	11 24       	eor	r1, r1
    4478:	30 19       	sub	r19, r0
    447a:	30 5d       	subi	r19, 0xD0	; 208
    447c:	31 93       	st	Z+, r19
    447e:	de f6       	brtc	.-74     	; 0x4436 <__ultoa_invert+0xe>
    4480:	cf 01       	movw	r24, r30
    4482:	08 95       	ret
    4484:	46 2f       	mov	r20, r22
    4486:	47 70       	andi	r20, 0x07	; 7
    4488:	40 5d       	subi	r20, 0xD0	; 208
    448a:	41 93       	st	Z+, r20
    448c:	b3 e0       	ldi	r27, 0x03	; 3
    448e:	0f d0       	rcall	.+30     	; 0x44ae <__ultoa_invert+0x86>
    4490:	c9 f7       	brne	.-14     	; 0x4484 <__ultoa_invert+0x5c>
    4492:	f6 cf       	rjmp	.-20     	; 0x4480 <__ultoa_invert+0x58>
    4494:	46 2f       	mov	r20, r22
    4496:	4f 70       	andi	r20, 0x0F	; 15
    4498:	40 5d       	subi	r20, 0xD0	; 208
    449a:	4a 33       	cpi	r20, 0x3A	; 58
    449c:	18 f0       	brcs	.+6      	; 0x44a4 <__ultoa_invert+0x7c>
    449e:	49 5d       	subi	r20, 0xD9	; 217
    44a0:	31 fd       	sbrc	r19, 1
    44a2:	40 52       	subi	r20, 0x20	; 32
    44a4:	41 93       	st	Z+, r20
    44a6:	02 d0       	rcall	.+4      	; 0x44ac <__ultoa_invert+0x84>
    44a8:	a9 f7       	brne	.-22     	; 0x4494 <__ultoa_invert+0x6c>
    44aa:	ea cf       	rjmp	.-44     	; 0x4480 <__ultoa_invert+0x58>
    44ac:	b4 e0       	ldi	r27, 0x04	; 4
    44ae:	a6 95       	lsr	r26
    44b0:	97 95       	ror	r25
    44b2:	87 95       	ror	r24
    44b4:	77 95       	ror	r23
    44b6:	67 95       	ror	r22
    44b8:	ba 95       	dec	r27
    44ba:	c9 f7       	brne	.-14     	; 0x44ae <__ultoa_invert+0x86>
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	61 05       	cpc	r22, r1
    44c0:	71 05       	cpc	r23, r1
    44c2:	08 95       	ret
    44c4:	9b 01       	movw	r18, r22
    44c6:	ac 01       	movw	r20, r24
    44c8:	0a 2e       	mov	r0, r26
    44ca:	06 94       	lsr	r0
    44cc:	57 95       	ror	r21
    44ce:	47 95       	ror	r20
    44d0:	37 95       	ror	r19
    44d2:	27 95       	ror	r18
    44d4:	ba 95       	dec	r27
    44d6:	c9 f7       	brne	.-14     	; 0x44ca <__ultoa_invert+0xa2>
    44d8:	62 0f       	add	r22, r18
    44da:	73 1f       	adc	r23, r19
    44dc:	84 1f       	adc	r24, r20
    44de:	95 1f       	adc	r25, r21
    44e0:	a0 1d       	adc	r26, r0
    44e2:	08 95       	ret

000044e4 <_exit>:
    44e4:	f8 94       	cli

000044e6 <__stop_program>:
    44e6:	ff cf       	rjmp	.-2      	; 0x44e6 <__stop_program>
