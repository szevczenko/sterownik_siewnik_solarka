
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000043cc  00004460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029f  008001fe  008001fe  000045fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000045fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000465c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000601a  00000000  00000000  00004cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020a0  00000000  00000000  0000acd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c2a  00000000  00000000  0000cd72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e50  00000000  00000000  0001099c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c61  00000000  00000000  000117ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b16  00000000  00000000  0001344d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  00015f63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__vector_13>
      38:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	48 08       	sbc	r4, r8
      56:	4f 08       	sbc	r4, r15
      58:	52 08       	sbc	r5, r2
      5a:	58 08       	sbc	r5, r8
      5c:	5e 08       	sbc	r5, r14
      5e:	63 08       	sbc	r6, r3
      60:	69 08       	sbc	r6, r9
      62:	70 08       	sbc	r7, r0
      64:	74 08       	sbc	r7, r4
      66:	7c 08       	sbc	r7, r12
      68:	cb 08       	sbc	r12, r11
      6a:	cb 08       	sbc	r12, r11
      6c:	cb 08       	sbc	r12, r11
      6e:	cb 08       	sbc	r12, r11
      70:	cb 08       	sbc	r12, r11
      72:	cb 08       	sbc	r12, r11
      74:	cb 08       	sbc	r12, r11
      76:	cb 08       	sbc	r12, r11
      78:	cb 08       	sbc	r12, r11
      7a:	cb 08       	sbc	r12, r11
      7c:	cb 08       	sbc	r12, r11
      7e:	cb 08       	sbc	r12, r11
      80:	cb 08       	sbc	r12, r11
      82:	cb 08       	sbc	r12, r11
      84:	cb 08       	sbc	r12, r11
      86:	cb 08       	sbc	r12, r11
      88:	cb 08       	sbc	r12, r11
      8a:	cb 08       	sbc	r12, r11
      8c:	cb 08       	sbc	r12, r11
      8e:	cb 08       	sbc	r12, r11
      90:	cb 08       	sbc	r12, r11
      92:	cb 08       	sbc	r12, r11
      94:	cb 08       	sbc	r12, r11
      96:	cb 08       	sbc	r12, r11
      98:	cb 08       	sbc	r12, r11
      9a:	cb 08       	sbc	r12, r11
      9c:	cb 08       	sbc	r12, r11
      9e:	cb 08       	sbc	r12, r11
      a0:	cb 08       	sbc	r12, r11
      a2:	cb 08       	sbc	r12, r11
      a4:	cb 08       	sbc	r12, r11
      a6:	cb 08       	sbc	r12, r11
      a8:	cb 08       	sbc	r12, r11
      aa:	cb 08       	sbc	r12, r11
      ac:	cb 08       	sbc	r12, r11
      ae:	cb 08       	sbc	r12, r11
      b0:	cb 08       	sbc	r12, r11
      b2:	cb 08       	sbc	r12, r11
      b4:	cb 08       	sbc	r12, r11
      b6:	cb 08       	sbc	r12, r11
      b8:	cb 08       	sbc	r12, r11
      ba:	cb 08       	sbc	r12, r11
      bc:	cb 08       	sbc	r12, r11
      be:	cb 08       	sbc	r12, r11
      c0:	cb 08       	sbc	r12, r11
      c2:	cb 08       	sbc	r12, r11
      c4:	cb 08       	sbc	r12, r11
      c6:	cb 08       	sbc	r12, r11
      c8:	cb 08       	sbc	r12, r11
      ca:	cb 08       	sbc	r12, r11
      cc:	cb 08       	sbc	r12, r11
      ce:	cb 08       	sbc	r12, r11
      d0:	cb 08       	sbc	r12, r11
      d2:	cb 08       	sbc	r12, r11
      d4:	cb 08       	sbc	r12, r11
      d6:	cb 08       	sbc	r12, r11
      d8:	cb 08       	sbc	r12, r11
      da:	cb 08       	sbc	r12, r11
      dc:	cb 08       	sbc	r12, r11
      de:	cb 08       	sbc	r12, r11
      e0:	cb 08       	sbc	r12, r11
      e2:	cb 08       	sbc	r12, r11
      e4:	cb 08       	sbc	r12, r11
      e6:	cb 08       	sbc	r12, r11
      e8:	cb 08       	sbc	r12, r11
      ea:	cb 08       	sbc	r12, r11
      ec:	cb 08       	sbc	r12, r11
      ee:	cb 08       	sbc	r12, r11
      f0:	cb 08       	sbc	r12, r11
      f2:	cb 08       	sbc	r12, r11
      f4:	cb 08       	sbc	r12, r11
      f6:	cb 08       	sbc	r12, r11
      f8:	cb 08       	sbc	r12, r11
      fa:	cb 08       	sbc	r12, r11
      fc:	cb 08       	sbc	r12, r11
      fe:	cb 08       	sbc	r12, r11
     100:	cb 08       	sbc	r12, r11
     102:	cb 08       	sbc	r12, r11
     104:	cb 08       	sbc	r12, r11
     106:	cb 08       	sbc	r12, r11
     108:	cb 08       	sbc	r12, r11
     10a:	cb 08       	sbc	r12, r11
     10c:	cb 08       	sbc	r12, r11
     10e:	cb 08       	sbc	r12, r11
     110:	cb 08       	sbc	r12, r11
     112:	cb 08       	sbc	r12, r11
     114:	cb 08       	sbc	r12, r11
     116:	83 08       	sbc	r8, r3
     118:	8a 08       	sbc	r8, r10
     11a:	90 08       	sbc	r9, r0
     11c:	95 08       	sbc	r9, r5
     11e:	9b 08       	sbc	r9, r11
     120:	a1 08       	sbc	r10, r1
     122:	cb 08       	sbc	r12, r11
     124:	cb 08       	sbc	r12, r11
     126:	cb 08       	sbc	r12, r11
     128:	cb 08       	sbc	r12, r11
     12a:	cb 08       	sbc	r12, r11
     12c:	ba 08       	sbc	r11, r10
     12e:	cb 08       	sbc	r12, r11
     130:	cb 08       	sbc	r12, r11
     132:	a9 08       	sbc	r10, r9
     134:	ae 08       	sbc	r10, r14
     136:	cb 08       	sbc	r12, r11
     138:	a6 08       	sbc	r10, r6
     13a:	b4 08       	sbc	r11, r4
     13c:	cb 08       	sbc	r12, r11
     13e:	cb 08       	sbc	r12, r11
     140:	cb 08       	sbc	r12, r11
     142:	cb 08       	sbc	r12, r11
     144:	cb 08       	sbc	r12, r11
     146:	cb 08       	sbc	r12, r11
     148:	cb 08       	sbc	r12, r11
     14a:	cb 08       	sbc	r12, r11
     14c:	cb 08       	sbc	r12, r11
     14e:	cb 08       	sbc	r12, r11
     150:	cb 08       	sbc	r12, r11
     152:	cb 08       	sbc	r12, r11
     154:	cb 08       	sbc	r12, r11
     156:	cb 08       	sbc	r12, r11
     158:	cb 08       	sbc	r12, r11
     15a:	cb 08       	sbc	r12, r11
     15c:	cb 08       	sbc	r12, r11
     15e:	cb 08       	sbc	r12, r11
     160:	cb 08       	sbc	r12, r11
     162:	cb 08       	sbc	r12, r11
     164:	cb 08       	sbc	r12, r11
     166:	cb 08       	sbc	r12, r11
     168:	cb 08       	sbc	r12, r11
     16a:	cb 08       	sbc	r12, r11
     16c:	cb 08       	sbc	r12, r11
     16e:	cb 08       	sbc	r12, r11
     170:	cb 08       	sbc	r12, r11
     172:	cb 08       	sbc	r12, r11
     174:	cb 08       	sbc	r12, r11
     176:	cb 08       	sbc	r12, r11
     178:	cb 08       	sbc	r12, r11
     17a:	cb 08       	sbc	r12, r11
     17c:	cb 08       	sbc	r12, r11
     17e:	cb 08       	sbc	r12, r11
     180:	cb 08       	sbc	r12, r11
     182:	cb 08       	sbc	r12, r11
     184:	cb 08       	sbc	r12, r11
     186:	cb 08       	sbc	r12, r11
     188:	cb 08       	sbc	r12, r11
     18a:	cb 08       	sbc	r12, r11
     18c:	cb 08       	sbc	r12, r11
     18e:	cb 08       	sbc	r12, r11
     190:	cb 08       	sbc	r12, r11
     192:	cb 08       	sbc	r12, r11
     194:	cb 08       	sbc	r12, r11
     196:	cb 08       	sbc	r12, r11
     198:	cb 08       	sbc	r12, r11
     19a:	cb 08       	sbc	r12, r11
     19c:	cb 08       	sbc	r12, r11
     19e:	cb 08       	sbc	r12, r11
     1a0:	cb 08       	sbc	r12, r11
     1a2:	cb 08       	sbc	r12, r11
     1a4:	cb 08       	sbc	r12, r11
     1a6:	cb 08       	sbc	r12, r11
     1a8:	cb 08       	sbc	r12, r11
     1aa:	cb 08       	sbc	r12, r11
     1ac:	cb 08       	sbc	r12, r11
     1ae:	cb 08       	sbc	r12, r11
     1b0:	cb 08       	sbc	r12, r11
     1b2:	cb 08       	sbc	r12, r11
     1b4:	cb 08       	sbc	r12, r11
     1b6:	cb 08       	sbc	r12, r11
     1b8:	cb 08       	sbc	r12, r11
     1ba:	cb 08       	sbc	r12, r11
     1bc:	cb 08       	sbc	r12, r11
     1be:	cb 08       	sbc	r12, r11
     1c0:	cb 08       	sbc	r12, r11
     1c2:	cb 08       	sbc	r12, r11
     1c4:	cb 08       	sbc	r12, r11
     1c6:	cb 08       	sbc	r12, r11
     1c8:	cb 08       	sbc	r12, r11
     1ca:	cb 08       	sbc	r12, r11
     1cc:	cb 08       	sbc	r12, r11
     1ce:	cb 08       	sbc	r12, r11
     1d0:	cb 08       	sbc	r12, r11
     1d2:	cb 08       	sbc	r12, r11
     1d4:	cb 08       	sbc	r12, r11
     1d6:	cb 08       	sbc	r12, r11
     1d8:	cb 08       	sbc	r12, r11
     1da:	cb 08       	sbc	r12, r11
     1dc:	cb 08       	sbc	r12, r11
     1de:	cb 08       	sbc	r12, r11
     1e0:	cb 08       	sbc	r12, r11
     1e2:	cb 08       	sbc	r12, r11
     1e4:	cb 08       	sbc	r12, r11
     1e6:	cb 08       	sbc	r12, r11
     1e8:	cb 08       	sbc	r12, r11
     1ea:	cb 08       	sbc	r12, r11
     1ec:	cb 08       	sbc	r12, r11
     1ee:	cb 08       	sbc	r12, r11
     1f0:	cb 08       	sbc	r12, r11
     1f2:	cb 08       	sbc	r12, r11
     1f4:	cb 08       	sbc	r12, r11
     1f6:	cb 08       	sbc	r12, r11
     1f8:	cb 08       	sbc	r12, r11
     1fa:	cb 08       	sbc	r12, r11
     1fc:	cb 08       	sbc	r12, r11
     1fe:	cb 08       	sbc	r12, r11
     200:	cb 08       	sbc	r12, r11
     202:	cb 08       	sbc	r12, r11
     204:	cb 08       	sbc	r12, r11
     206:	cb 08       	sbc	r12, r11
     208:	cb 08       	sbc	r12, r11
     20a:	cb 08       	sbc	r12, r11
     20c:	cb 08       	sbc	r12, r11
     20e:	cb 08       	sbc	r12, r11
     210:	cb 08       	sbc	r12, r11
     212:	cb 08       	sbc	r12, r11
     214:	cb 08       	sbc	r12, r11
     216:	cb 08       	sbc	r12, r11
     218:	cb 08       	sbc	r12, r11
     21a:	cb 08       	sbc	r12, r11
     21c:	cb 08       	sbc	r12, r11
     21e:	cb 08       	sbc	r12, r11
     220:	cb 08       	sbc	r12, r11
     222:	cb 08       	sbc	r12, r11
     224:	cb 08       	sbc	r12, r11
     226:	cb 08       	sbc	r12, r11
     228:	cb 08       	sbc	r12, r11
     22a:	cb 08       	sbc	r12, r11
     22c:	cb 08       	sbc	r12, r11
     22e:	cb 08       	sbc	r12, r11
     230:	cb 08       	sbc	r12, r11
     232:	cb 08       	sbc	r12, r11
     234:	cb 08       	sbc	r12, r11
     236:	cb 08       	sbc	r12, r11
     238:	cb 08       	sbc	r12, r11
     23a:	cb 08       	sbc	r12, r11
     23c:	cb 08       	sbc	r12, r11
     23e:	cb 08       	sbc	r12, r11
     240:	cb 08       	sbc	r12, r11
     242:	cb 08       	sbc	r12, r11
     244:	be 08       	sbc	r11, r14
     246:	ca 08       	sbc	r12, r10
     248:	c8 08       	sbc	r12, r8
     24a:	c6 08       	sbc	r12, r6
     24c:	c4 08       	sbc	r12, r4
     24e:	c2 08       	sbc	r12, r2
     250:	c0 08       	sbc	r12, r0
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_2_menu+0x2>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	11 e0       	ldi	r17, 0x01	; 1
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ec ec       	ldi	r30, 0xCC	; 204
     3ea:	f3 e4       	ldi	r31, 0x43	; 67
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	ae 3f       	cpi	r26, 0xFE	; 254
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	24 e0       	ldi	r18, 0x04	; 4
     3fa:	ae ef       	ldi	r26, 0xFE	; 254
     3fc:	b1 e0       	ldi	r27, 0x01	; 1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	ad 39       	cpi	r26, 0x9D	; 157
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	88 e7       	ldi	r24, 0x78	; 120
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	88 e7       	ldi	r24, 0x78	; 120
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	0e 94 75 18 	call	0x30ea	; 0x30ea <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 4a 18 	call	0x3094	; 0x3094 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <timer0_init>
	init_display_drv();
     45a:	0e 94 ff 07 	call	0xffe	; 0xffe <init_display_drv>
	init_buttons();
     45e:	0e 94 cf 04 	call	0x99e	; 0x99e <init_buttons>
	init_system();
     462:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <init_system>
	init_measure();
     466:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 ab 11 	call	0x2356	; 0x2356 <servo_init>
	#endif
	init_pin();
     478:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     47c:	78 94       	sei
	init_driver();
     47e:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     482:	85 e8       	ldi	r24, 0x85	; 133
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     48e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     492:	0e 94 0a 10 	call	0x2014	; 0x2014 <measure_get_servo_calibration>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     49a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <disp_process>
		animation();
     49e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <animation>
		process_button();
     4a2:	0e 94 25 04 	call	0x84a	; 0x84a <process_button>
		disp_fast_process();
     4a6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <disp_fast_process>
		disp_very_fast_process();
     4aa:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <disp_very_fast_process>
		dcmotor_process(motor_value);
     4ae:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <motor_value>
     4b2:	0e 94 83 07 	call	0xf06	; 0xf06 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
     4ba:	0e 94 90 12 	call	0x2520	; 0x2520 <servo_process>
		menu_process();
     4be:	0e 94 16 06 	call	0xc2c	; 0xc2c <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4c2:	0e 94 46 0c 	call	0x188c	; 0x188c <error_event>
		error_led_blink();
     4c6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <error_led_blink>
		measure_process();
     4ca:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <measure_process>
		accumulator_process();
     4ce:	0e 94 8a 02 	call	0x514	; 0x514 <accumulator_process>
		accum_led_process();
     4d2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <accum_led_process>
		buzzer_process();
     4d6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <buzzer_process>
     4da:	df cf       	rjmp	.-66     	; 0x49a <main+0x28>

000004dc <accum_get_voltage>:
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 46 10 	call	0x208c	; 0x208c <measure_get_filtered_value>
     4e2:	bc 01       	movw	r22, r24
     4e4:	66 0f       	add	r22, r22
     4e6:	77 1f       	adc	r23, r23
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	86 0f       	add	r24, r22
     4ee:	97 1f       	adc	r25, r23
     4f0:	bc 01       	movw	r22, r24
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
     4fa:	26 e6       	ldi	r18, 0x66	; 102
     4fc:	36 e6       	ldi	r19, 0x66	; 102
     4fe:	46 eb       	ldi	r20, 0xB6	; 182
     500:	50 e4       	ldi	r21, 0x40	; 64
     502:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e8       	ldi	r20, 0x80	; 128
     50c:	5a e3       	ldi	r21, 0x3A	; 58
     50e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     512:	08 95       	ret

00000514 <accumulator_process>:
     514:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
     518:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
     51c:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
     520:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
     524:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <accumulator_timer.1914>
     528:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <accumulator_timer.1914+0x1>
     52c:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <accumulator_timer.1914+0x2>
     530:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <accumulator_timer.1914+0x3>
     534:	84 17       	cp	r24, r20
     536:	95 07       	cpc	r25, r21
     538:	a6 07       	cpc	r26, r22
     53a:	b7 07       	cpc	r27, r23
     53c:	98 f5       	brcc	.+102    	; 0x5a4 <accumulator_process+0x90>
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 46 10 	call	0x208c	; 0x208c <measure_get_filtered_value>
     544:	89 35       	cpi	r24, 0x59	; 89
     546:	22 e0       	ldi	r18, 0x02	; 2
     548:	92 07       	cpc	r25, r18
     54a:	18 f0       	brcs	.+6      	; 0x552 <accumulator_process+0x3e>
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <accumulator_state>
     552:	8b 38       	cpi	r24, 0x8B	; 139
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	92 07       	cpc	r25, r18
     558:	18 f4       	brcc	.+6      	; 0x560 <accumulator_process+0x4c>
     55a:	22 e0       	ldi	r18, 0x02	; 2
     55c:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <accumulator_state>
     560:	8e 35       	cpi	r24, 0x5E	; 94
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	92 07       	cpc	r25, r18
     566:	18 f4       	brcc	.+6      	; 0x56e <accumulator_process+0x5a>
     568:	23 e0       	ldi	r18, 0x03	; 3
     56a:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <accumulator_state>
     56e:	8c 58       	subi	r24, 0x8C	; 140
     570:	91 40       	sbci	r25, 0x01	; 1
     572:	8c 3c       	cpi	r24, 0xCC	; 204
     574:	91 05       	cpc	r25, r1
     576:	10 f4       	brcc	.+4      	; 0x57c <accumulator_process+0x68>
     578:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <accumulator_state>
     57c:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
     580:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
     584:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
     588:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
     58c:	8c 59       	subi	r24, 0x9C	; 156
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	af 4f       	sbci	r26, 0xFF	; 255
     592:	bf 4f       	sbci	r27, 0xFF	; 255
     594:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <accumulator_timer.1914>
     598:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <accumulator_timer.1914+0x1>
     59c:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <accumulator_timer.1914+0x2>
     5a0:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <accumulator_timer.1914+0x3>
     5a4:	08 95       	ret

000005a6 <accum_led_process>:
     5a6:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
     5aa:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
     5ae:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
     5b2:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
     5b6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     5ba:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     5be:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     5c2:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     5c6:	84 17       	cp	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	a6 07       	cpc	r26, r22
     5cc:	b7 07       	cpc	r27, r23
     5ce:	08 f0       	brcs	.+2      	; 0x5d2 <accum_led_process+0x2c>
     5d0:	86 c0       	rjmp	.+268    	; 0x6de <accum_led_process+0x138>
     5d2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <accumulator_state>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	e9 f0       	breq	.+58     	; 0x614 <accum_led_process+0x6e>
     5da:	30 f0       	brcs	.+12     	; 0x5e8 <accum_led_process+0x42>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	99 f1       	breq	.+102    	; 0x646 <accum_led_process+0xa0>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <accum_led_process+0x40>
     5e4:	67 c0       	rjmp	.+206    	; 0x6b4 <accum_led_process+0x10e>
     5e6:	08 95       	ret
     5e8:	c5 98       	cbi	0x18, 5	; 24
     5ea:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     5ee:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     5f2:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     5f6:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     5fa:	88 53       	subi	r24, 0x38	; 56
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	af 4f       	sbci	r26, 0xFF	; 255
     600:	bf 4f       	sbci	r27, 0xFF	; 255
     602:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <process_timer.1918>
     606:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <process_timer.1918+0x1>
     60a:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <process_timer.1918+0x2>
     60e:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <process_timer.1918+0x3>
     612:	08 95       	ret
     614:	98 b3       	in	r25, 0x18	; 24
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	89 27       	eor	r24, r25
     61a:	88 bb       	out	0x18, r24	; 24
     61c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     620:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     624:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     628:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     62c:	86 50       	subi	r24, 0x06	; 6
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	af 4f       	sbci	r26, 0xFF	; 255
     632:	bf 4f       	sbci	r27, 0xFF	; 255
     634:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <process_timer.1918>
     638:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <process_timer.1918+0x1>
     63c:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <process_timer.1918+0x2>
     640:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <process_timer.1918+0x3>
     644:	08 95       	ret
     646:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
     64a:	81 11       	cpse	r24, r1
     64c:	19 c0       	rjmp	.+50     	; 0x680 <accum_led_process+0xda>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
     654:	c5 9a       	sbi	0x18, 5	; 24
     656:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     65a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     65e:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     662:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     666:	8c 50       	subi	r24, 0x0C	; 12
     668:	9e 4f       	sbci	r25, 0xFE	; 254
     66a:	af 4f       	sbci	r26, 0xFF	; 255
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <process_timer.1918>
     672:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <process_timer.1918+0x1>
     676:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <process_timer.1918+0x2>
     67a:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <process_timer.1918+0x3>
     67e:	08 95       	ret
     680:	81 30       	cpi	r24, 0x01	; 1
     682:	69 f5       	brne	.+90     	; 0x6de <accum_led_process+0x138>
     684:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__data_end>
     688:	c5 98       	cbi	0x18, 5	; 24
     68a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     68e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     692:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     696:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     69a:	84 52       	subi	r24, 0x24	; 36
     69c:	9a 4f       	sbci	r25, 0xFA	; 250
     69e:	af 4f       	sbci	r26, 0xFF	; 255
     6a0:	bf 4f       	sbci	r27, 0xFF	; 255
     6a2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <process_timer.1918>
     6a6:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <process_timer.1918+0x1>
     6aa:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <process_timer.1918+0x2>
     6ae:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <process_timer.1918+0x3>
     6b2:	08 95       	ret
     6b4:	c5 9a       	sbi	0x18, 5	; 24
     6b6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <process_timer.1918>
     6ba:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <process_timer.1918+0x1>
     6be:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <process_timer.1918+0x2>
     6c2:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <process_timer.1918+0x3>
     6c6:	88 51       	subi	r24, 0x18	; 24
     6c8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ca:	af 4f       	sbci	r26, 0xFF	; 255
     6cc:	bf 4f       	sbci	r27, 0xFF	; 255
     6ce:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <process_timer.1918>
     6d2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <process_timer.1918+0x1>
     6d6:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <process_timer.1918+0x2>
     6da:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <process_timer.1918+0x3>
     6de:	08 95       	ret

000006e0 <adc_setchannel>:
     6e0:	37 98       	cbi	0x06, 7	; 6
     6e2:	97 b1       	in	r25, 0x07	; 7
     6e4:	98 7f       	andi	r25, 0xF8	; 248
     6e6:	87 70       	andi	r24, 0x07	; 7
     6e8:	89 2b       	or	r24, r25
     6ea:	87 b9       	out	0x07, r24	; 7
     6ec:	37 9a       	sbi	0x06, 7	; 6
     6ee:	08 95       	ret

000006f0 <adc_readsel>:
     6f0:	36 9a       	sbi	0x06, 6	; 6
     6f2:	36 99       	sbic	0x06, 6	; 6
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <adc_readsel+0x2>
     6f6:	84 b1       	in	r24, 0x04	; 4
     6f8:	95 b1       	in	r25, 0x05	; 5
     6fa:	08 95       	ret

000006fc <adc_read>:
     6fc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <adc_setchannel>
     700:	0e 94 78 03 	call	0x6f0	; 0x6f0 <adc_readsel>
     704:	08 95       	ret

00000706 <read_button>:
     706:	dc 01       	movw	r26, r24
     708:	16 96       	adiw	r26, 0x06	; 6
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	17 97       	sbiw	r26, 0x07	; 7
     710:	20 81       	ld	r18, Z
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	18 96       	adiw	r26, 0x08	; 8
     718:	0c 90       	ld	r0, X
     71a:	02 c0       	rjmp	.+4      	; 0x720 <read_button+0x1a>
     71c:	f5 95       	asr	r31
     71e:	e7 95       	ror	r30
     720:	0a 94       	dec	r0
     722:	e2 f7       	brpl	.-8      	; 0x71c <read_button+0x16>
     724:	cf 01       	movw	r24, r30
     726:	81 70       	andi	r24, 0x01	; 1
     728:	08 95       	ret

0000072a <init_but_struct>:
     72a:	e5 e2       	ldi	r30, 0x25	; 37
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	14 82       	std	Z+4, r1	; 0x04
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	85 83       	std	Z+5, r24	; 0x05
     734:	14 86       	std	Z+12, r1	; 0x0c
     736:	13 86       	std	Z+11, r1	; 0x0b
     738:	12 86       	std	Z+10, r1	; 0x0a
     73a:	11 86       	std	Z+9, r1	; 0x09
     73c:	16 86       	std	Z+14, r1	; 0x0e
     73e:	15 86       	std	Z+13, r1	; 0x0d
     740:	26 e3       	ldi	r18, 0x36	; 54
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	37 83       	std	Z+7, r19	; 0x07
     746:	26 83       	std	Z+6, r18	; 0x06
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	90 87       	std	Z+8, r25	; 0x08
     74c:	e8 ef       	ldi	r30, 0xF8	; 248
     74e:	f3 e0       	ldi	r31, 0x03	; 3
     750:	14 82       	std	Z+4, r1	; 0x04
     752:	85 83       	std	Z+5, r24	; 0x05
     754:	14 86       	std	Z+12, r1	; 0x0c
     756:	13 86       	std	Z+11, r1	; 0x0b
     758:	12 86       	std	Z+10, r1	; 0x0a
     75a:	11 86       	std	Z+9, r1	; 0x09
     75c:	16 86       	std	Z+14, r1	; 0x0e
     75e:	15 86       	std	Z+13, r1	; 0x0d
     760:	37 83       	std	Z+7, r19	; 0x07
     762:	26 83       	std	Z+6, r18	; 0x06
     764:	80 87       	std	Z+8, r24	; 0x08
     766:	e7 e0       	ldi	r30, 0x07	; 7
     768:	f4 e0       	ldi	r31, 0x04	; 4
     76a:	14 82       	std	Z+4, r1	; 0x04
     76c:	85 83       	std	Z+5, r24	; 0x05
     76e:	14 86       	std	Z+12, r1	; 0x0c
     770:	13 86       	std	Z+11, r1	; 0x0b
     772:	12 86       	std	Z+10, r1	; 0x0a
     774:	11 86       	std	Z+9, r1	; 0x09
     776:	16 86       	std	Z+14, r1	; 0x0e
     778:	15 86       	std	Z+13, r1	; 0x0d
     77a:	37 83       	std	Z+7, r19	; 0x07
     77c:	26 83       	std	Z+6, r18	; 0x06
     77e:	96 e0       	ldi	r25, 0x06	; 6
     780:	90 87       	std	Z+8, r25	; 0x08
     782:	e5 ee       	ldi	r30, 0xE5	; 229
     784:	f3 e0       	ldi	r31, 0x03	; 3
     786:	14 82       	std	Z+4, r1	; 0x04
     788:	85 83       	std	Z+5, r24	; 0x05
     78a:	14 86       	std	Z+12, r1	; 0x0c
     78c:	13 86       	std	Z+11, r1	; 0x0b
     78e:	12 86       	std	Z+10, r1	; 0x0a
     790:	11 86       	std	Z+9, r1	; 0x09
     792:	16 86       	std	Z+14, r1	; 0x0e
     794:	15 86       	std	Z+13, r1	; 0x0d
     796:	40 e3       	ldi	r20, 0x30	; 48
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	57 83       	std	Z+7, r21	; 0x07
     79c:	46 83       	std	Z+6, r20	; 0x06
     79e:	93 e0       	ldi	r25, 0x03	; 3
     7a0:	90 87       	std	Z+8, r25	; 0x08
     7a2:	e6 ed       	ldi	r30, 0xD6	; 214
     7a4:	f3 e0       	ldi	r31, 0x03	; 3
     7a6:	14 82       	std	Z+4, r1	; 0x04
     7a8:	85 83       	std	Z+5, r24	; 0x05
     7aa:	14 86       	std	Z+12, r1	; 0x0c
     7ac:	13 86       	std	Z+11, r1	; 0x0b
     7ae:	12 86       	std	Z+10, r1	; 0x0a
     7b0:	11 86       	std	Z+9, r1	; 0x09
     7b2:	16 86       	std	Z+14, r1	; 0x0e
     7b4:	15 86       	std	Z+13, r1	; 0x0d
     7b6:	37 83       	std	Z+7, r19	; 0x07
     7b8:	26 83       	std	Z+6, r18	; 0x06
     7ba:	90 87       	std	Z+8, r25	; 0x08
     7bc:	e6 e1       	ldi	r30, 0x16	; 22
     7be:	f4 e0       	ldi	r31, 0x04	; 4
     7c0:	14 82       	std	Z+4, r1	; 0x04
     7c2:	85 83       	std	Z+5, r24	; 0x05
     7c4:	14 86       	std	Z+12, r1	; 0x0c
     7c6:	13 86       	std	Z+11, r1	; 0x0b
     7c8:	12 86       	std	Z+10, r1	; 0x0a
     7ca:	11 86       	std	Z+9, r1	; 0x09
     7cc:	16 86       	std	Z+14, r1	; 0x0e
     7ce:	15 86       	std	Z+13, r1	; 0x0d
     7d0:	69 e3       	ldi	r22, 0x39	; 57
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	77 83       	std	Z+7, r23	; 0x07
     7d6:	66 83       	std	Z+6, r22	; 0x06
     7d8:	a4 e0       	ldi	r26, 0x04	; 4
     7da:	a0 87       	std	Z+8, r26	; 0x08
     7dc:	e4 e3       	ldi	r30, 0x34	; 52
     7de:	f4 e0       	ldi	r31, 0x04	; 4
     7e0:	14 82       	std	Z+4, r1	; 0x04
     7e2:	85 83       	std	Z+5, r24	; 0x05
     7e4:	14 86       	std	Z+12, r1	; 0x0c
     7e6:	13 86       	std	Z+11, r1	; 0x0b
     7e8:	12 86       	std	Z+10, r1	; 0x0a
     7ea:	11 86       	std	Z+9, r1	; 0x09
     7ec:	16 86       	std	Z+14, r1	; 0x0e
     7ee:	15 86       	std	Z+13, r1	; 0x0d
     7f0:	43 e3       	ldi	r20, 0x33	; 51
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	57 83       	std	Z+7, r21	; 0x07
     7f6:	46 83       	std	Z+6, r20	; 0x06
     7f8:	80 87       	std	Z+8, r24	; 0x08
     7fa:	e3 e4       	ldi	r30, 0x43	; 67
     7fc:	f4 e0       	ldi	r31, 0x04	; 4
     7fe:	14 82       	std	Z+4, r1	; 0x04
     800:	85 83       	std	Z+5, r24	; 0x05
     802:	14 86       	std	Z+12, r1	; 0x0c
     804:	13 86       	std	Z+11, r1	; 0x0b
     806:	12 86       	std	Z+10, r1	; 0x0a
     808:	11 86       	std	Z+9, r1	; 0x09
     80a:	16 86       	std	Z+14, r1	; 0x0e
     80c:	15 86       	std	Z+13, r1	; 0x0d
     80e:	37 83       	std	Z+7, r19	; 0x07
     810:	26 83       	std	Z+6, r18	; 0x06
     812:	a0 87       	std	Z+8, r26	; 0x08
     814:	e8 eb       	ldi	r30, 0xB8	; 184
     816:	f3 e0       	ldi	r31, 0x03	; 3
     818:	14 82       	std	Z+4, r1	; 0x04
     81a:	85 83       	std	Z+5, r24	; 0x05
     81c:	14 86       	std	Z+12, r1	; 0x0c
     81e:	13 86       	std	Z+11, r1	; 0x0b
     820:	12 86       	std	Z+10, r1	; 0x0a
     822:	11 86       	std	Z+9, r1	; 0x09
     824:	16 86       	std	Z+14, r1	; 0x0e
     826:	15 86       	std	Z+13, r1	; 0x0d
     828:	77 83       	std	Z+7, r23	; 0x07
     82a:	66 83       	std	Z+6, r22	; 0x06
     82c:	90 87       	std	Z+8, r25	; 0x08
     82e:	e7 ec       	ldi	r30, 0xC7	; 199
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	14 82       	std	Z+4, r1	; 0x04
     834:	85 83       	std	Z+5, r24	; 0x05
     836:	14 86       	std	Z+12, r1	; 0x0c
     838:	13 86       	std	Z+11, r1	; 0x0b
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	11 86       	std	Z+9, r1	; 0x09
     83e:	16 86       	std	Z+14, r1	; 0x0e
     840:	15 86       	std	Z+13, r1	; 0x0d
     842:	57 83       	std	Z+7, r21	; 0x07
     844:	46 83       	std	Z+6, r20	; 0x06
     846:	10 86       	std	Z+8, r1	; 0x08
     848:	08 95       	ret

0000084a <process_button>:
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
     85c:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
     860:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
     864:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
     868:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <timer_button>
     86c:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <timer_button+0x1>
     870:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <timer_button+0x2>
     874:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <timer_button+0x3>
     878:	84 17       	cp	r24, r20
     87a:	95 07       	cpc	r25, r21
     87c:	a6 07       	cpc	r26, r22
     87e:	b7 07       	cpc	r27, r23
     880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
     882:	85 c0       	rjmp	.+266    	; 0x98e <__stack+0x12f>
     884:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
     888:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
     88c:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
     890:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
     894:	44 96       	adiw	r24, 0x14	; 20
     896:	a1 1d       	adc	r26, r1
     898:	b1 1d       	adc	r27, r1
     89a:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <timer_button>
     89e:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <timer_button+0x1>
     8a2:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <timer_button+0x2>
     8a6:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <timer_button+0x3>
     8aa:	c0 e6       	ldi	r28, 0x60	; 96
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f4 e7       	ldi	r31, 0x74	; 116
     8b2:	ef 2e       	mov	r14, r31
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ff 2e       	mov	r15, r31
     8b8:	f0 2d       	mov	r31, r0
     8ba:	dd 24       	eor	r13, r13
     8bc:	d3 94       	inc	r13
     8be:	8e 01       	movw	r16, r28
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	0e 94 83 03 	call	0x706	; 0x706 <read_button>
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	95 81       	ldd	r25, Z+5	; 0x05
     8ce:	89 17       	cp	r24, r25
     8d0:	e1 f0       	breq	.+56     	; 0x90a <__stack+0xab>
     8d2:	85 83       	std	Z+5, r24	; 0x05
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <__stack+0x91>
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	dc 01       	movw	r26, r24
     8de:	19 96       	adiw	r26, 0x09	; 9
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	1a 97       	sbiw	r26, 0x0a	; 10
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <__stack+0x10f>
     8ec:	09 95       	icall
     8ee:	3f c0       	rjmp	.+126    	; 0x96e <__stack+0x10f>
     8f0:	81 11       	cpse	r24, r1
     8f2:	3d c0       	rjmp	.+122    	; 0x96e <__stack+0x10f>
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	dc 01       	movw	r26, r24
     8fa:	1b 96       	adiw	r26, 0x0b	; 11
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	1c 97       	sbiw	r26, 0x0c	; 12
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xaf>
     906:	09 95       	icall
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
     90a:	81 11       	cpse	r24, r1
     90c:	30 c0       	rjmp	.+96     	; 0x96e <__stack+0x10f>
     90e:	d8 01       	movw	r26, r16
     910:	ed 91       	ld	r30, X+
     912:	fc 91       	ld	r31, X
     914:	80 81       	ld	r24, Z
     916:	91 81       	ldd	r25, Z+1	; 0x01
     918:	a2 81       	ldd	r26, Z+2	; 0x02
     91a:	b3 81       	ldd	r27, Z+3	; 0x03
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	a1 1d       	adc	r26, r1
     920:	b1 1d       	adc	r27, r1
     922:	80 83       	st	Z, r24
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	a2 83       	std	Z+2, r26	; 0x02
     928:	b3 83       	std	Z+3, r27	; 0x03
     92a:	d8 01       	movw	r26, r16
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	a2 81       	ldd	r26, Z+2	; 0x02
     936:	b3 81       	ldd	r27, Z+3	; 0x03
     938:	88 97       	sbiw	r24, 0x28	; 40
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	10 f1       	brcs	.+68     	; 0x984 <__stack+0x125>
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	f9 f0       	breq	.+62     	; 0x984 <__stack+0x125>
     946:	05 84       	ldd	r0, Z+13	; 0x0d
     948:	f6 85       	ldd	r31, Z+14	; 0x0e
     94a:	e0 2d       	mov	r30, r0
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0xf7>
     950:	85 e2       	ldi	r24, 0x25	; 37
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	09 95       	icall
     956:	d8 01       	movw	r26, r16
     958:	ed 91       	ld	r30, X+
     95a:	fc 91       	ld	r31, X
     95c:	11 97       	sbiw	r26, 0x01	; 1
     95e:	10 82       	st	Z, r1
     960:	11 82       	std	Z+1, r1	; 0x01
     962:	12 82       	std	Z+2, r1	; 0x02
     964:	13 82       	std	Z+3, r1	; 0x03
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	d4 82       	std	Z+4, r13	; 0x04
     96c:	0b c0       	rjmp	.+22     	; 0x984 <__stack+0x125>
     96e:	d8 01       	movw	r26, r16
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	11 97       	sbiw	r26, 0x01	; 1
     976:	10 82       	st	Z, r1
     978:	11 82       	std	Z+1, r1	; 0x01
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	13 82       	std	Z+3, r1	; 0x03
     97e:	ed 91       	ld	r30, X+
     980:	fc 91       	ld	r31, X
     982:	14 82       	std	Z+4, r1	; 0x04
     984:	22 96       	adiw	r28, 0x02	; 2
     986:	ce 15       	cp	r28, r14
     988:	df 05       	cpc	r29, r15
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x12f>
     98c:	98 cf       	rjmp	.-208    	; 0x8be <__stack+0x5f>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	08 95       	ret

0000099e <init_buttons>:
     99e:	0e 94 95 03 	call	0x72a	; 0x72a <init_but_struct>
     9a2:	ba 98       	cbi	0x17, 2	; 23
     9a4:	c2 9a       	sbi	0x18, 2	; 24
     9a6:	b9 98       	cbi	0x17, 1	; 23
     9a8:	c1 9a       	sbi	0x18, 1	; 24
     9aa:	be 98       	cbi	0x17, 6	; 23
     9ac:	c6 9a       	sbi	0x18, 6	; 24
     9ae:	8b 98       	cbi	0x11, 3	; 17
     9b0:	93 9a       	sbi	0x12, 3	; 18
     9b2:	bb 98       	cbi	0x17, 3	; 23
     9b4:	c3 9a       	sbi	0x18, 3	; 24
     9b6:	d4 98       	cbi	0x1a, 4	; 26
     9b8:	dc 9a       	sbi	0x1b, 4	; 27
     9ba:	a1 98       	cbi	0x14, 1	; 20
     9bc:	a9 9a       	sbi	0x15, 1	; 21
     9be:	bc 98       	cbi	0x17, 4	; 23
     9c0:	c4 9a       	sbi	0x18, 4	; 24
     9c2:	d3 98       	cbi	0x1a, 3	; 26
     9c4:	db 9a       	sbi	0x1b, 3	; 27
     9c6:	a0 98       	cbi	0x14, 0	; 20
     9c8:	a8 9a       	sbi	0x15, 0	; 21
     9ca:	08 95       	ret

000009cc <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9cc:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
     9d0:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
     9d4:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
     9d8:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
     9dc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <buzzer_timer>
     9e0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <buzzer_timer+0x1>
     9e4:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <buzzer_timer+0x2>
     9e8:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <buzzer_timer+0x3>
     9ec:	84 17       	cp	r24, r20
     9ee:	95 07       	cpc	r25, r21
     9f0:	a6 07       	cpc	r26, r22
     9f2:	b7 07       	cpc	r27, r23
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <buzzer_process+0x2c>
     9f6:	5e c0       	rjmp	.+188    	; 0xab4 <buzzer_process+0xe8>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER) == 0)
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
     9fe:	81 11       	cpse	r24, r1
     a00:	59 c0       	rjmp	.+178    	; 0xab4 <buzzer_process+0xe8>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     a02:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
     a06:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
     a0a:	95 ff       	sbrs	r25, 5
     a0c:	37 c0       	rjmp	.+110    	; 0xa7c <buzzer_process+0xb0>
     a0e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <buzzer_state>
     a12:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <buzzer_state+0x1>
     a16:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <buzzer_state+0x2>
     a1a:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <buzzer_state+0x3>
     a1e:	89 2b       	or	r24, r25
     a20:	8a 2b       	or	r24, r26
     a22:	8b 2b       	or	r24, r27
     a24:	59 f5       	brne	.+86     	; 0xa7c <buzzer_process+0xb0>
			{
				ON_BUZZER;
     a26:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a28:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
     a2c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
     a30:	9f 7d       	andi	r25, 0xDF	; 223
     a32:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
     a36:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
				buzzer_state = 1;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <buzzer_state>
     a46:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <buzzer_state+0x1>
     a4a:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <buzzer_state+0x2>
     a4e:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <buzzer_state+0x3>
				buzzer_timer += 100;
     a52:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <buzzer_timer>
     a56:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <buzzer_timer+0x1>
     a5a:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <buzzer_timer+0x2>
     a5e:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <buzzer_timer+0x3>
     a62:	8c 59       	subi	r24, 0x9C	; 156
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	af 4f       	sbci	r26, 0xFF	; 255
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <buzzer_timer>
     a6e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <buzzer_timer+0x1>
     a72:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <buzzer_timer+0x2>
     a76:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <buzzer_timer+0x3>
     a7a:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a7c:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a7e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <buzzer_state>
     a82:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <buzzer_state+0x1>
     a86:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <buzzer_state+0x2>
     a8a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <buzzer_state+0x3>
				buzzer_timer += 50;
     a8e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <buzzer_timer>
     a92:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <buzzer_timer+0x1>
     a96:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <buzzer_timer+0x2>
     a9a:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <buzzer_timer+0x3>
     a9e:	c2 96       	adiw	r24, 0x32	; 50
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <buzzer_timer>
     aa8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <buzzer_timer+0x1>
     aac:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <buzzer_timer+0x2>
     ab0:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <buzzer_timer+0x3>
     ab4:	08 95       	ret

00000ab6 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     ab6:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     ab8:	c0 98       	cbi	0x18, 0	; 24
     aba:	08 95       	ret

00000abc <button_1_menu>:
	//debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     abc:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     ac0:	88 23       	and	r24, r24
     ac2:	19 f0       	breq	.+6      	; 0xaca <button_1_menu+0xe>
		configured_parameter--;
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <configured_parameter>
     aca:	08 95       	ret

00000acc <button_2_menu>:
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     acc:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     ad0:	86 30       	cpi	r24, 0x06	; 6
     ad2:	18 f4       	brcc	.+6      	; 0xada <button_2_menu+0xe>
		configured_parameter++;
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <configured_parameter>
     ada:	08 95       	ret

00000adc <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     adc:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	e8 5a       	subi	r30, 0xA8	; 168
     ae6:	fb 4f       	sbci	r31, 0xFB	; 251
     ae8:	20 81       	ld	r18, Z
     aea:	22 23       	and	r18, r18
     aec:	29 f0       	breq	.+10     	; 0xaf8 <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     aee:	fc 01       	movw	r30, r24
     af0:	e8 5a       	subi	r30, 0xA8	; 168
     af2:	fb 4f       	sbci	r31, 0xFB	; 251
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	20 83       	st	Z, r18
     af8:	08 95       	ret

00000afa <button_6_menu>:
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     afa:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	fc 01       	movw	r30, r24
     b02:	e8 5a       	subi	r30, 0xA8	; 168
     b04:	fb 4f       	sbci	r31, 0xFB	; 251
     b06:	20 81       	ld	r18, Z
     b08:	fc 01       	movw	r30, r24
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ec 58       	subi	r30, 0x8C	; 140
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	30 81       	ld	r19, Z
     b14:	23 17       	cp	r18, r19
     b16:	28 f4       	brcc	.+10     	; 0xb22 <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b18:	fc 01       	movw	r30, r24
     b1a:	e8 5a       	subi	r30, 0xA8	; 168
     b1c:	fb 4f       	sbci	r31, 0xFB	; 251
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	20 83       	st	Z, r18
     b22:	08 95       	ret

00000b24 <button_7_menu>:
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     b24:	a4 e7       	ldi	r26, 0x74	; 116
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 e5       	ldi	r30, 0x58	; 88
     b2a:	f4 e0       	ldi	r31, 0x04	; 4
     b2c:	2f e5       	ldi	r18, 0x5F	; 95
     b2e:	34 e0       	ldi	r19, 0x04	; 4

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	8c 91       	ld	r24, X
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	81 93       	st	Z+, r24
     b38:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	c1 f7       	brne	.-16     	; 0xb30 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     b40:	08 95       	ret

00000b42 <button_3_menu>:

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b42:	68 e5       	ldi	r22, 0x58	; 88
     b44:	74 e0       	ldi	r23, 0x04	; 4
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	0e 94 9b 10 	call	0x2136	; 0x2136 <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     b52:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
	LED_MOTOR_OFF;
     b56:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     b58:	96 98       	cbi	0x12, 6	; 18
     b5a:	08 95       	ret

00000b5c <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     b5c:	cf 93       	push	r28
	pass[pass_len++] = number;
     b5e:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <pass_len>
     b62:	c1 e0       	ldi	r28, 0x01	; 1
     b64:	ce 0f       	add	r28, r30
     b66:	c0 93 60 04 	sts	0x0460, r28	; 0x800460 <pass_len>
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	ee 5a       	subi	r30, 0xAE	; 174
     b6e:	fb 4f       	sbci	r31, 0xFB	; 251
     b70:	80 83       	st	Z, r24
	//debug_msg("pass %d\n", number);
	if (memcmp(pass, password, pass_len) != 0) {
     b72:	4c 2f       	mov	r20, r28
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	6c ea       	ldi	r22, 0xAC	; 172
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	82 e5       	ldi	r24, 0x52	; 82
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 16 21 	call	0x422c	; 0x422c <memcmp>
     b82:	89 2b       	or	r24, r25
     b84:	51 f0       	breq	.+20     	; 0xb9a <pass_add_number+0x3e>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     b86:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <pass_len>
	memset(pass, 0, sizeof(pass));
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	e2 e5       	ldi	r30, 0x52	; 82
     b8e:	f4 e0       	ldi	r31, 0x04	; 4
     b90:	df 01       	movw	r26, r30
     b92:	1d 92       	st	X+, r1
     b94:	8a 95       	dec	r24
     b96:	e9 f7       	brne	.-6      	; 0xb92 <pass_add_number+0x36>
     b98:	2d c0       	rjmp	.+90     	; 0xbf4 <pass_add_number+0x98>
	if (memcmp(pass, password, pass_len) != 0) {
		//debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     b9a:	c6 30       	cpi	r28, 0x06	; 6
     b9c:	59 f5       	brne	.+86     	; 0xbf4 <pass_add_number+0x98>
	return 0;
}

static void enter_to_menu(void)
{
	dark_menu_state = MENU_PARAMETERS;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <dark_menu_state>
	button1.fall_callback = button_1_menu;
     ba4:	8e e5       	ldi	r24, 0x5E	; 94
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <button1+0xc>
     bac:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <button1+0xb>
	button2.fall_callback = button_2_menu;
     bb0:	86 e6       	ldi	r24, 0x66	; 102
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <button2+0xc>
     bb8:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <button2+0xb>
	button3.fall_callback = button_3_menu;
     bbc:	81 ea       	ldi	r24, 0xA1	; 161
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <button3+0xc>
     bc4:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <button3+0xb>
	button5.fall_callback = button_5_menu;
     bc8:	8e e6       	ldi	r24, 0x6E	; 110
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <button5+0xc>
     bd0:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <button5+0xb>
	button6.fall_callback = button_6_menu;
     bd4:	8d e7       	ldi	r24, 0x7D	; 125
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <button6+0xc>
     bdc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <button6+0xb>
	button7.fall_callback = button_7_menu;
     be0:	82 e9       	ldi	r24, 0x92	; 146
     be2:	95 e0       	ldi	r25, 0x05	; 5
     be4:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <button7+0xc>
     be8:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     bec:	67 e0       	ldi	r22, 0x07	; 7
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
	}
	if (pass_len == sizeof(pass)) {
		//debug_msg("enter_to_menu\n");
		enter_to_menu();
	}
}
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     bfe:	08 95       	ret

00000c00 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     c06:	08 95       	ret

00000c08 <button_5_number>:
{
	pass_add_number(2);
}
static void button_5_number(void *pv)
{
	pass_add_number(3);
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     c0e:	08 95       	ret

00000c10 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     c16:	08 95       	ret

00000c18 <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     c1e:	08 95       	ret

00000c20 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 ae 05 	call	0xb5c	; 0xb5c <pass_add_number>
     c26:	08 95       	ret

00000c28 <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	08 95       	ret

00000c2c <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state == 1)
     c2c:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
     c30:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
     c34:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
     c38:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
     c3c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <menu_timer.2231>
     c40:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <menu_timer.2231+0x1>
     c44:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <menu_timer.2231+0x2>
     c48:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <menu_timer.2231+0x3>
     c4c:	84 17       	cp	r24, r20
     c4e:	95 07       	cpc	r25, r21
     c50:	a6 07       	cpc	r26, r22
     c52:	b7 07       	cpc	r27, r23
     c54:	08 f0       	brcs	.+2      	; 0xc58 <menu_process+0x2c>
     c56:	7a c0       	rjmp	.+244    	; 0xd4c <menu_process+0x120>
     c58:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <dark_menu_state>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <menu_process+0x36>
     c60:	75 c0       	rjmp	.+234    	; 0xd4c <menu_process+0x120>
	{
		menu_timer = mktime.ms + 250;
     c62:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
     c66:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
     c6a:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
     c6e:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
     c72:	86 50       	subi	r24, 0x06	; 6
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	af 4f       	sbci	r26, 0xFF	; 255
     c78:	bf 4f       	sbci	r27, 0xFF	; 255
     c7a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <menu_timer.2231>
     c7e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <menu_timer.2231+0x1>
     c82:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <menu_timer.2231+0x2>
     c86:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <menu_timer.2231+0x3>
		if (segment1.state == SEG_MENU)
     c8a:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
     c8e:	87 30       	cpi	r24, 0x07	; 7
     c90:	31 f4       	brne	.+12     	; 0xc9e <menu_process+0x72>
			disp_set_number(&segment1, configured_parameter);
     c92:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <configured_parameter>
     c96:	81 e7       	ldi	r24, 0x71	; 113
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
		if (segment2.state == SEG_MENU)
     c9e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
     ca2:	87 30       	cpi	r24, 0x07	; 7
     ca4:	51 f4       	brne	.+20     	; 0xcba <menu_process+0x8e>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     ca6:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <configured_parameter>
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	e8 5a       	subi	r30, 0xA8	; 168
     cae:	fb 4f       	sbci	r31, 0xFB	; 251
     cb0:	60 81       	ld	r22, Z
     cb2:	8c e6       	ldi	r24, 0x6C	; 108
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     cba:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
     cbe:	88 30       	cpi	r24, 0x08	; 8
     cc0:	49 f5       	brne	.+82     	; 0xd14 <menu_process+0xe8>
     cc2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	29 f5       	brne	.+74     	; 0xd14 <menu_process+0xe8>
		{
			menu_timer = 1000 + mktime.ms;
     cca:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
     cce:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
     cd2:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
     cd6:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
     cda:	88 51       	subi	r24, 0x18	; 24
     cdc:	9c 4f       	sbci	r25, 0xFC	; 252
     cde:	af 4f       	sbci	r26, 0xFF	; 255
     ce0:	bf 4f       	sbci	r27, 0xFF	; 255
     ce2:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <menu_timer.2231>
     ce6:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <menu_timer.2231+0x1>
     cea:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <menu_timer.2231+0x2>
     cee:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <menu_timer.2231+0x3>
			DispD2.value = 's';
     cf2:	83 e7       	ldi	r24, 0x73	; 115
     cf4:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <DispD2>
			DispD1.value = 'a';
     cf8:	81 e6       	ldi	r24, 0x61	; 97
     cfa:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <DispD1>
			DispD3.value = 'p';
     cfe:	80 e7       	ldi	r24, 0x70	; 112
     d00:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <DispD3>
			DispD4.value = 0;
     d04:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d0e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
			
			return;
     d12:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     d14:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
     d18:	8a 30       	cpi	r24, 0x0A	; 10
     d1a:	51 f4       	brne	.+20     	; 0xd30 <menu_process+0x104>
     d1c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
     d20:	8a 30       	cpi	r24, 0x0A	; 10
     d22:	31 f4       	brne	.+12     	; 0xd30 <menu_process+0x104>
		{
			segment1.state = SEG_OFF;
     d24:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <segment1+0x4>
			segment2.state = SEG_OFF;
     d28:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <segment2+0x4>
			dark_menu_state = 0;
     d2c:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <dark_menu_state>
		}
		if (configured_parameter == MENU_CLOSE_SERVO_REGULATION)
     d30:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     d34:	85 30       	cpi	r24, 0x05	; 5
     d36:	19 f4       	brne	.+6      	; 0xd3e <menu_process+0x112>
		{
			servo_regulation(0);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 9b 11 	call	0x2336	; 0x2336 <servo_regulation>
		}
		if (configured_parameter == MENU_OPEN_SERVO_REGULATION)
     d3e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <configured_parameter>
     d42:	86 30       	cpi	r24, 0x06	; 6
     d44:	19 f4       	brne	.+6      	; 0xd4c <menu_process+0x120>
		{
			servo_regulation(99);
     d46:	83 e6       	ldi	r24, 0x63	; 99
     d48:	0e 94 9b 11 	call	0x2336	; 0x2336 <servo_regulation>
     d4c:	08 95       	ret

00000d4e <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_number;
     d4e:	80 e1       	ldi	r24, 0x10	; 16
     d50:	96 e0       	ldi	r25, 0x06	; 6
     d52:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <button1+0xc>
     d56:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <button1+0xb>
	button2.fall_callback = button_2_number;
     d5a:	8c e0       	ldi	r24, 0x0C	; 12
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <button2+0xc>
     d62:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <button2+0xb>
	button3.fall_callback = button_3_number;
     d66:	88 e0       	ldi	r24, 0x08	; 8
     d68:	96 e0       	ldi	r25, 0x06	; 6
     d6a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <button3+0xc>
     d6e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <button3+0xb>
	button5.fall_callback = button_5_number;
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	96 e0       	ldi	r25, 0x06	; 6
     d76:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <button5+0xc>
     d7a:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <button5+0xb>
	button6.fall_callback = button_6_number;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	96 e0       	ldi	r25, 0x06	; 6
     d82:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <button6+0xc>
     d86:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <button6+0xb>
	button7.fall_callback = button_7_number;
     d8a:	8c ef       	ldi	r24, 0xFC	; 252
     d8c:	95 e0       	ldi	r25, 0x05	; 5
     d8e:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <button7+0xc>
     d92:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     d96:	68 e5       	ldi	r22, 0x58	; 88
     d98:	74 e0       	ldi	r23, 0x04	; 4
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <mem_read_data>
     da0:	a8 e5       	ldi	r26, 0x58	; 88
     da2:	b4 e0       	ldi	r27, 0x04	; 4
     da4:	e4 e7       	ldi	r30, 0x74	; 116
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	42 e8       	ldi	r20, 0x82	; 130
     daa:	50 e0       	ldi	r21, 0x00	; 0
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     dac:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     dae:	9c 91       	ld	r25, X
     db0:	80 81       	ld	r24, Z
     db2:	89 17       	cp	r24, r25
     db4:	18 f4       	brcc	.+6      	; 0xdbc <init_menu+0x6e>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	8c 93       	st	X, r24
			check_error++;
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     dc0:	e4 17       	cp	r30, r20
     dc2:	f5 07       	cpc	r31, r21
     dc4:	a1 f7       	brne	.-24     	; 0xdae <init_menu+0x60>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     dc6:	22 23       	and	r18, r18
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <init_menu+0x86>

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     dca:	68 e5       	ldi	r22, 0x58	; 88
     dcc:	74 e0       	ldi	r23, 0x04	; 4
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	0e 94 9b 10 	call	0x2136	; 0x2136 <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     dd4:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <pass_len>
	memset(pass, 0, sizeof(pass));
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	e2 e5       	ldi	r30, 0x52	; 82
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
     dde:	df 01       	movw	r26, r30
     de0:	1d 92       	st	X+, r1
     de2:	8a 95       	dec	r24
     de4:	e9 f7       	brne	.-6      	; 0xde0 <init_menu+0x92>
     de6:	08 95       	ret

00000de8 <dark_menu_get_value>:
	clear_password();
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     de8:	87 30       	cpi	r24, 0x07	; 7
     dea:	30 f4       	brcc	.+12     	; 0xdf8 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     dec:	e8 2f       	mov	r30, r24
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	e8 5a       	subi	r30, 0xA8	; 168
     df2:	fb 4f       	sbci	r31, 0xFB	; 251
     df4:	80 81       	ld	r24, Z
     df6:	08 95       	ret
	}
	return 0;
     df8:	80 e0       	ldi	r24, 0x00	; 0
}
     dfa:	08 95       	ret

00000dfc <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     dfc:	82 eb       	ldi	r24, 0xB2	; 178
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e08:	86 e6       	ldi	r24, 0x66	; 102
     e0a:	94 e0       	ldi	r25, 0x04	; 4
     e0c:	0e 94 67 17 	call	0x2ece	; 0x2ece <evTime_init>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <motorD>
     e16:	94 98       	cbi	0x12, 4	; 18
     e18:	15 bc       	out	0x25, r1	; 37
     e1a:	8f 9a       	sbi	0x11, 7	; 17
     e1c:	97 9a       	sbi	0x12, 7	; 18
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	08 95       	ret

00000e24 <dcmotorpwm_deinit>:
     e24:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <motorD>
     e28:	15 bc       	out	0x25, r1	; 37
     e2a:	97 9a       	sbi	0x12, 7	; 18
     e2c:	94 98       	cbi	0x12, 4	; 18
     e2e:	08 95       	ret

00000e30 <dcmotor_is_on>:
     e30:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <motorD>
     e34:	92 50       	subi	r25, 0x02	; 2
     e36:	21 e0       	ldi	r18, 0x01	; 1
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	93 30       	cpi	r25, 0x03	; 3
     e3c:	10 f0       	brcs	.+4      	; 0xe42 <dcmotor_is_on+0x12>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	c9 01       	movw	r24, r18
     e44:	08 95       	ret

00000e46 <dcmotorpwm_stop>:
     e46:	0e 94 18 07 	call	0xe30	; 0xe30 <dcmotor_is_on>
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	99 f0       	breq	.+38     	; 0xe74 <dcmotorpwm_stop+0x2e>
     e4e:	80 ec       	ldi	r24, 0xC0	; 192
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9f 93       	push	r25
     e54:	8f 93       	push	r24
     e56:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e5a:	15 bc       	out	0x25, r1	; 37
     e5c:	97 9a       	sbi	0x12, 7	; 18
     e5e:	94 98       	cbi	0x12, 4	; 18
     e60:	e2 e6       	ldi	r30, 0x62	; 98
     e62:	f4 e0       	ldi	r31, 0x04	; 4
     e64:	80 81       	ld	r24, Z
     e66:	81 83       	std	Z+1, r24	; 0x01
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 83       	st	Z, r24
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 95       	ret

00000e76 <dcmotorpwm_start>:
     e76:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <motorD>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	d9 f4       	brne	.+54     	; 0xeb4 <dcmotorpwm_start+0x3e>
     e7e:	94 9a       	sbi	0x12, 4	; 18
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	80 63       	ori	r24, 0x30	; 48
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	85 bd       	out	0x25, r24	; 37
     e8c:	85 b5       	in	r24, 0x25	; 37
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	85 bd       	out	0x25, r24	; 37
     e92:	e2 e6       	ldi	r30, 0x62	; 98
     e94:	f4 e0       	ldi	r31, 0x04	; 4
     e96:	80 81       	ld	r24, Z
     e98:	81 83       	std	Z+1, r24	; 0x01
     e9a:	84 e0       	ldi	r24, 0x04	; 4
     e9c:	80 83       	st	Z, r24
     e9e:	48 ee       	ldi	r20, 0xE8	; 232
     ea0:	53 e0       	ldi	r21, 0x03	; 3
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	86 e6       	ldi	r24, 0x66	; 102
     ea8:	94 e0       	ldi	r25, 0x04	; 4
     eaa:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	08 95       	ret
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	08 95       	ret

00000eba <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     eba:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <motorD+0x3>
}
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	08 95       	ret

00000ec2 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     ec2:	8e ec       	ldi	r24, 0xCE	; 206
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9f 93       	push	r25
     ec8:	8f 93       	push	r24
     eca:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     ece:	0e 94 23 07 	call	0xe46	; 0xe46 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     ed2:	85 e0       	ldi	r24, 0x05	; 5
     ed4:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <motorD>
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	08 95       	ret

00000ede <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     ede:	0e 94 18 07 	call	0xe30	; 0xe30 <dcmotor_is_on>
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	29 f0       	breq	.+10     	; 0xef0 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <motorD>
		return 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     ef0:	08 95       	ret

00000ef2 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     ef2:	0e 94 18 07 	call	0xe30	; 0xe30 <dcmotor_is_on>
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	29 f0       	breq	.+10     	; 0xf04 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <motorD>
		return 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f04:	08 95       	ret

00000f06 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     f06:	cf 93       	push	r28
     f08:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     f0a:	46 e9       	ldi	r20, 0x96	; 150
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	84 e1       	ldi	r24, 0x14	; 20
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_process_period>
     f1a:	89 2b       	or	r24, r25
     f1c:	09 f4       	brne	.+2      	; 0xf20 <dcmotor_process+0x1a>
     f1e:	58 c0       	rjmp	.+176    	; 0xfd0 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     f20:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <motorD>
     f24:	93 30       	cpi	r25, 0x03	; 3
     f26:	e9 f0       	breq	.+58     	; 0xf62 <dcmotor_process+0x5c>
     f28:	28 f4       	brcc	.+10     	; 0xf34 <dcmotor_process+0x2e>
     f2a:	91 30       	cpi	r25, 0x01	; 1
     f2c:	b9 f0       	breq	.+46     	; 0xf5c <dcmotor_process+0x56>
     f2e:	92 30       	cpi	r25, 0x02	; 2
     f30:	41 f0       	breq	.+16     	; 0xf42 <dcmotor_process+0x3c>
     f32:	4e c0       	rjmp	.+156    	; 0xfd0 <dcmotor_process+0xca>
     f34:	94 30       	cpi	r25, 0x04	; 4
     f36:	09 f4       	brne	.+2      	; 0xf3a <dcmotor_process+0x34>
     f38:	48 c0       	rjmp	.+144    	; 0xfca <dcmotor_process+0xc4>
     f3a:	95 30       	cpi	r25, 0x05	; 5
     f3c:	09 f4       	brne	.+2      	; 0xf40 <dcmotor_process+0x3a>
     f3e:	42 c0       	rjmp	.+132    	; 0xfc4 <dcmotor_process+0xbe>
     f40:	47 c0       	rjmp	.+142    	; 0xfd0 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     f42:	c0 93 65 04 	sts	0x0465, r28	; 0x800465 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f46:	2b ee       	ldi	r18, 0xEB	; 235
     f48:	c2 9f       	mul	r28, r18
     f4a:	c0 01       	movw	r24, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	63 e6       	ldi	r22, 0x63	; 99
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__divmodhi4>
     f56:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     f58:	63 bd       	out	0x23, r22	; 35
			break;
     f5a:	3a c0       	rjmp	.+116    	; 0xfd0 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     f5c:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <motorD+0x3>
			break;
     f60:	37 c0       	rjmp	.+110    	; 0xfd0 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     f62:	c3 33       	cpi	r28, 0x33	; 51
     f64:	78 f4       	brcc	.+30     	; 0xf84 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     f66:	84 e1       	ldi	r24, 0x14	; 20
     f68:	8c 0f       	add	r24, r28
     f6a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f6e:	2b ee       	ldi	r18, 0xEB	; 235
     f70:	82 9f       	mul	r24, r18
     f72:	c0 01       	movw	r24, r0
     f74:	11 24       	eor	r1, r1
     f76:	63 e6       	ldi	r22, 0x63	; 99
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__divmodhi4>
     f7e:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     f80:	63 bd       	out	0x23, r22	; 35
     f82:	26 c0       	rjmp	.+76     	; 0xfd0 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     f84:	8d ec       	ldi	r24, 0xCD	; 205
     f86:	8c 0f       	add	r24, r28
     f88:	84 31       	cpi	r24, 0x14	; 20
     f8a:	78 f4       	brcc	.+30     	; 0xfaa <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     f8c:	8f e0       	ldi	r24, 0x0F	; 15
     f8e:	8c 0f       	add	r24, r28
     f90:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f94:	2b ee       	ldi	r18, 0xEB	; 235
     f96:	82 9f       	mul	r24, r18
     f98:	c0 01       	movw	r24, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	63 e6       	ldi	r22, 0x63	; 99
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__divmodhi4>
     fa4:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     fa6:	63 bd       	out	0x23, r22	; 35
     fa8:	13 c0       	rjmp	.+38     	; 0xfd0 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     faa:	c0 93 65 04 	sts	0x0465, r28	; 0x800465 <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     fae:	2b ee       	ldi	r18, 0xEB	; 235
     fb0:	c2 9f       	mul	r28, r18
     fb2:	c0 01       	movw	r24, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	63 e6       	ldi	r22, 0x63	; 99
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <__divmodhi4>
     fbe:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     fc0:	63 bd       	out	0x23, r22	; 35
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
     fc4:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     fc6:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     fd4:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     fd6:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     fd8:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     fda:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     fdc:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     fde:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     fe0:	af 9a       	sbi	0x15, 7	; 21
     fe2:	08 95       	ret

00000fe4 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     fe4:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     fe6:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     fea:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     fec:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     ff0:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     ff2:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     ff6:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     ff8:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <DispD4+0x1>
     ffc:	08 95       	ret

00000ffe <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     ffe:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    1000:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    1002:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    1004:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    1006:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    1008:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    100a:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    100c:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    100e:	ea e7       	ldi	r30, 0x7A	; 122
    1010:	f4 e0       	ldi	r31, 0x04	; 4
    1012:	88 e7       	ldi	r24, 0x78	; 120
    1014:	94 e0       	ldi	r25, 0x04	; 4
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    101a:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    101c:	24 e8       	ldi	r18, 0x84	; 132
    101e:	34 e0       	ldi	r19, 0x04	; 4
    1020:	33 83       	std	Z+3, r19	; 0x03
    1022:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    1024:	a1 e7       	ldi	r26, 0x71	; 113
    1026:	b4 e0       	ldi	r27, 0x04	; 4
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	3c 93       	st	X, r19
    102c:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    102e:	13 96       	adiw	r26, 0x03	; 3
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    1036:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    1038:	26 e7       	ldi	r18, 0x76	; 118
    103a:	34 e0       	ldi	r19, 0x04	; 4
    103c:	35 83       	std	Z+5, r19	; 0x05
    103e:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    1040:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    1042:	82 e8       	ldi	r24, 0x82	; 130
    1044:	94 e0       	ldi	r25, 0x04	; 4
    1046:	97 83       	std	Z+7, r25	; 0x07
    1048:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    104a:	ec e6       	ldi	r30, 0x6C	; 108
    104c:	f4 e0       	ldi	r31, 0x04	; 4
    104e:	31 83       	std	Z+1, r19	; 0x01
    1050:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1056:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <off_all_displays>
	clear_display();
    105a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clear_display>
    105e:	08 95       	ret

00001060 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
	if (DispD->value != displaying_value)
    1064:	fc 01       	movw	r30, r24
    1066:	30 81       	ld	r19, Z
    1068:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <displaying_value>
    106c:	32 17       	cp	r19, r18
    106e:	09 f4       	brne	.+2      	; 0x1072 <display_set_value+0x12>
    1070:	95 c0       	rjmp	.+298    	; 0x119c <display_set_value+0x13c>
    1072:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1074:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clear_display>
		switch(DispD->value)
    1078:	e8 81       	ld	r30, Y
    107a:	8e 2f       	mov	r24, r30
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	91 05       	cpc	r25, r1
    1082:	08 f0       	brcs	.+2      	; 0x1086 <display_set_value+0x26>
    1084:	88 c0       	rjmp	.+272    	; 0x1196 <display_set_value+0x136>
    1086:	fc 01       	movw	r30, r24
    1088:	e6 5d       	subi	r30, 0xD6	; 214
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    1090:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1092:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1094:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1096:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1098:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    109a:	aa 98       	cbi	0x15, 2	; 21
			break;
    109c:	7c c0       	rjmp	.+248    	; 0x1196 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    109e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10a0:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10a2:	79 c0       	rjmp	.+242    	; 0x1196 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    10a4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10a6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    10a8:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    10aa:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    10ac:	df 98       	cbi	0x1b, 7	; 27
			break;
    10ae:	73 c0       	rjmp	.+230    	; 0x1196 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    10b0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10b2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    10b4:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10b6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10b8:	df 98       	cbi	0x1b, 7	; 27
			break;
    10ba:	6d c0       	rjmp	.+218    	; 0x1196 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    10bc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10be:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    10c0:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10c2:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10c4:	68 c0       	rjmp	.+208    	; 0x1196 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    10c6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    10c8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10ca:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10cc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10ce:	df 98       	cbi	0x1b, 7	; 27
			break;
    10d0:	62 c0       	rjmp	.+196    	; 0x1196 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    10d2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    10d4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10d6:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    10d8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10da:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10dc:	de 98       	cbi	0x1b, 6	; 27
			break;
    10de:	5b c0       	rjmp	.+182    	; 0x1196 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    10e0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10e2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10e4:	dd 98       	cbi	0x1b, 5	; 27
			break;
    10e6:	57 c0       	rjmp	.+174    	; 0x1196 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    10e8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10ea:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10ec:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10ee:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10f0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10f2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10f4:	af 98       	cbi	0x15, 7	; 21
			break;
    10f6:	4f c0       	rjmp	.+158    	; 0x1196 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    10f8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10fa:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10fc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10fe:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1100:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1102:	af 98       	cbi	0x15, 7	; 21
			break;
    1104:	48 c0       	rjmp	.+144    	; 0x1196 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    1106:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1108:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    110a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    110c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    110e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1110:	af 98       	cbi	0x15, 7	; 21
			break;
    1112:	41 c0       	rjmp	.+130    	; 0x1196 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    1114:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1116:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1118:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    111a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    111c:	af 98       	cbi	0x15, 7	; 21
			break;
    111e:	3b c0       	rjmp	.+118    	; 0x1196 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    1120:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1122:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1124:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1126:	aa 98       	cbi	0x15, 2	; 21
			break;
    1128:	36 c0       	rjmp	.+108    	; 0x1196 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    112a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    112c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    112e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1130:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1132:	af 98       	cbi	0x15, 7	; 21
			break;
    1134:	30 c0       	rjmp	.+96     	; 0x1196 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    1136:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    1138:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    113a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    113c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    113e:	af 98       	cbi	0x15, 7	; 21
			break;
    1140:	2a c0       	rjmp	.+84     	; 0x1196 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    1142:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    1144:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1146:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1148:	af 98       	cbi	0x15, 7	; 21
			break;
    114a:	25 c0       	rjmp	.+74     	; 0x1196 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    114c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    114e:	af 98       	cbi	0x15, 7	; 21
			break;
    1150:	22 c0       	rjmp	.+68     	; 0x1196 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1152:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1154:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1156:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1158:	af 98       	cbi	0x15, 7	; 21
			break;
    115a:	1d c0       	rjmp	.+58     	; 0x1196 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    115c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    115e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    1160:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1162:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1164:	af 98       	cbi	0x15, 7	; 21
			break;
    1166:	17 c0       	rjmp	.+46     	; 0x1196 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    1168:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    116a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    116c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    116e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1170:	af 98       	cbi	0x15, 7	; 21
			break;
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1174:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1176:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1178:	aa 98       	cbi	0x15, 2	; 21
			break;
    117a:	0d c0       	rjmp	.+26     	; 0x1196 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    117c:	af 98       	cbi	0x15, 7	; 21
			break;
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1180:	aa 98       	cbi	0x15, 2	; 21
			break;
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1184:	de 98       	cbi	0x1b, 6	; 27
			break;
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1188:	df 98       	cbi	0x1b, 7	; 27
			break;
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    118c:	dd 98       	cbi	0x1b, 5	; 27
			break;
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    1190:	ad 98       	cbi	0x15, 5	; 21
			break;
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1194:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1196:	88 81       	ld	r24, Y
    1198:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <displaying_value>
	}
	
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <on_display>:
void on_display(disp_drv *DispD)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
	off_all_displays();
    11a8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <off_all_displays>
	display_set_value(DispD);
    11ac:	ce 01       	movw	r24, r28
    11ae:	0e 94 30 08 	call	0x1060	; 0x1060 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    11b2:	84 e0       	ldi	r24, 0x04	; 4
    11b4:	c8 37       	cpi	r28, 0x78	; 120
    11b6:	d8 07       	cpc	r29, r24
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <on_display+0x22>
	{
		LED_ON_DISP1;
    11ba:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <DispD1+0x1>
    11c2:	19 c0       	rjmp	.+50     	; 0x11f6 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	c4 38       	cpi	r28, 0x84	; 132
    11c8:	d8 07       	cpc	r29, r24
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <on_display+0x34>
	{
		LED_ON_DISP2;
    11cc:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <DispD2+0x1>
    11d4:	10 c0       	rjmp	.+32     	; 0x11f6 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	c6 37       	cpi	r28, 0x76	; 118
    11da:	d8 07       	cpc	r29, r24
    11dc:	29 f4       	brne	.+10     	; 0x11e8 <on_display+0x46>
	{
		LED_ON_DISP3;
    11de:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <DispD3+0x1>
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    11e8:	c2 58       	subi	r28, 0x82	; 130
    11ea:	d4 40       	sbci	r29, 0x04	; 4
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <on_display+0x54>
	{
		LED_ON_DISP4;
    11ee:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <DispD4+0x1>
	}
	#endif
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    1208:	c0 81       	ld	r28, Z
    120a:	d1 81       	ldd	r29, Z+1	; 0x01
    120c:	21 96       	adiw	r28, 0x01	; 1
    120e:	d1 83       	std	Z+1, r29	; 0x01
    1210:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    1212:	9e 01       	movw	r18, r28
    1214:	ad ec       	ldi	r26, 0xCD	; 205
    1216:	bc ec       	ldi	r27, 0xCC	; 204
    1218:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__umulhisi3>
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	96 95       	lsr	r25
    1226:	87 95       	ror	r24
    1228:	9c 01       	movw	r18, r24
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	c8 17       	cp	r28, r24
    1240:	d9 07       	cpc	r29, r25
    1242:	01 f5       	brne	.+64     	; 0x1284 <display_process+0x88>
    1244:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    1246:	10 91 19 02 	lds	r17, 0x0219	; 0x800219 <iteration>
    124a:	14 30       	cpi	r17, 0x04	; 4
    124c:	58 f4       	brcc	.+22     	; 0x1264 <display_process+0x68>
			on_display(disp_tab[iteration]);
    124e:	e1 2f       	mov	r30, r17
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	e6 58       	subi	r30, 0x86	; 134
    1258:	fb 4f       	sbci	r31, 0xFB	; 251
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <on_display>
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <display_process+0x6c>
		else
			off_all_displays();
    1264:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <off_all_displays>
		iteration++;
    1268:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    126a:	15 30       	cpi	r17, 0x05	; 5
    126c:	19 f0       	breq	.+6      	; 0x1274 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    126e:	10 93 19 02 	sts	0x0219, r17	; 0x800219 <iteration>
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1274:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1278:	c0 39       	cpi	r28, 0x90	; 144
    127a:	d1 40       	sbci	r29, 0x01	; 1
    127c:	19 f4       	brne	.+6      	; 0x1284 <display_process+0x88>
    127e:	f7 01       	movw	r30, r14
    1280:	11 82       	std	Z+1, r1	; 0x01
    1282:	10 82       	st	Z, r1
	}
}
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	08 95       	ret

00001290 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    1290:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1292:	64 36       	cpi	r22, 0x64	; 100
    1294:	f8 f4       	brcc	.+62     	; 0x12d4 <disp_set_number+0x44>
	else if (number == 0)
    1296:	61 11       	cpse	r22, r1
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    129a:	a0 81       	ld	r26, Z
    129c:	b1 81       	ldd	r27, Z+1	; 0x01
    129e:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    12a0:	02 80       	ldd	r0, Z+2	; 0x02
    12a2:	f3 81       	ldd	r31, Z+3	; 0x03
    12a4:	e0 2d       	mov	r30, r0
    12a6:	10 82       	st	Z, r1
    12a8:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    12aa:	a0 81       	ld	r26, Z
    12ac:	b1 81       	ldd	r27, Z+1	; 0x01
    12ae:	9d ec       	ldi	r25, 0xCD	; 205
    12b0:	69 9f       	mul	r22, r25
    12b2:	91 2d       	mov	r25, r1
    12b4:	11 24       	eor	r1, r1
    12b6:	96 95       	lsr	r25
    12b8:	96 95       	lsr	r25
    12ba:	96 95       	lsr	r25
    12bc:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    12be:	02 80       	ldd	r0, Z+2	; 0x02
    12c0:	f3 81       	ldd	r31, Z+3	; 0x03
    12c2:	e0 2d       	mov	r30, r0
    12c4:	89 2f       	mov	r24, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	98 2f       	mov	r25, r24
    12ca:	99 0f       	add	r25, r25
    12cc:	99 0f       	add	r25, r25
    12ce:	89 0f       	add	r24, r25
    12d0:	68 1b       	sub	r22, r24
    12d2:	60 83       	st	Z, r22
    12d4:	08 95       	ret

000012d6 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    12d6:	fc 01       	movw	r30, r24
    12d8:	60 83       	st	Z, r22
    12da:	08 95       	ret

000012dc <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	39 f0       	breq	.+14     	; 0x12ee <dip_set_value+0x12>
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <dip_set_value+0xc>
    12e2:	82 30       	cpi	r24, 0x02	; 2
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <dip_set_value+0x18>
    12e6:	08 95       	ret
    12e8:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <motor_disp_value>
    12ec:	08 95       	ret
    12ee:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <servo_disp_value>
    12f2:	08 95       	ret
    12f4:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <servo_disp_value>
    12f8:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <motor_disp_value>
    12fc:	08 95       	ret

000012fe <disp_get_state>:
    12fe:	88 23       	and	r24, r24
    1300:	19 f0       	breq	.+6      	; 0x1308 <disp_get_state+0xa>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	29 f0       	breq	.+10     	; 0x1310 <disp_get_state+0x12>
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <disp_get_state+0x1a>
    1308:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	08 95       	ret
    1310:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	08 95       	ret
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <disp_disable_voltage>:
    131e:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    1322:	86 30       	cpi	r24, 0x06	; 6
    1324:	21 f4       	brne	.+8      	; 0x132e <disp_disable_voltage+0x10>
    1326:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <disp1_last_state>
    132a:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
    132e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    1332:	86 30       	cpi	r24, 0x06	; 6
    1334:	21 f4       	brne	.+8      	; 0x133e <disp_disable_voltage+0x20>
    1336:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <disp2_last_state>
    133a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
    133e:	08 95       	ret

00001340 <disp_set_state>:
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	a1 f0       	breq	.+40     	; 0x136c <disp_set_state+0x2c>
    1344:	18 f0       	brcs	.+6      	; 0x134c <disp_set_state+0xc>
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	09 f1       	breq	.+66     	; 0x138c <disp_set_state+0x4c>
    134a:	08 95       	ret
    134c:	66 30       	cpi	r22, 0x06	; 6
    134e:	21 f4       	brne	.+8      	; 0x1358 <disp_set_state+0x18>
    1350:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    1354:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <disp1_last_state>
    1358:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    135c:	86 30       	cpi	r24, 0x06	; 6
    135e:	19 f4       	brne	.+6      	; 0x1366 <disp_set_state+0x26>
    1360:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <disp1_last_state>
    1364:	08 95       	ret
    1366:	60 93 75 04 	sts	0x0475, r22	; 0x800475 <segment1+0x4>
    136a:	08 95       	ret
    136c:	66 30       	cpi	r22, 0x06	; 6
    136e:	21 f4       	brne	.+8      	; 0x1378 <disp_set_state+0x38>
    1370:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    1374:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <disp2_last_state>
    1378:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    137c:	86 30       	cpi	r24, 0x06	; 6
    137e:	19 f4       	brne	.+6      	; 0x1386 <disp_set_state+0x46>
    1380:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <disp2_last_state>
    1384:	08 95       	ret
    1386:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <segment2+0x4>
    138a:	08 95       	ret
    138c:	66 30       	cpi	r22, 0x06	; 6
    138e:	41 f4       	brne	.+16     	; 0x13a0 <disp_set_state+0x60>
    1390:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    1394:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <disp1_last_state>
    1398:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    139c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <disp2_last_state>
    13a0:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    13a4:	86 30       	cpi	r24, 0x06	; 6
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <disp_set_state+0x72>
    13a8:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <disp2_last_state>
    13ac:	60 93 86 04 	sts	0x0486, r22	; 0x800486 <disp1_last_state>
    13b0:	08 95       	ret
    13b2:	60 93 75 04 	sts	0x0475, r22	; 0x800475 <segment1+0x4>
    13b6:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <segment2+0x4>
    13ba:	08 95       	ret

000013bc <display_set_error>:
    13bc:	95 e0       	ldi	r25, 0x05	; 5
    13be:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <segment1+0x4>
    13c2:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <segment2+0x4>
    13c6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <error_reason>
    13ca:	08 95       	ret

000013cc <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    13cc:	68 ef       	ldi	r22, 0xF8	; 248
    13ce:	88 e7       	ldi	r24, 0x78	; 120
    13d0:	94 e0       	ldi	r25, 0x04	; 4
    13d2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    13d6:	68 ef       	ldi	r22, 0xF8	; 248
    13d8:	84 e8       	ldi	r24, 0x84	; 132
    13da:	94 e0       	ldi	r25, 0x04	; 4
    13dc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    13e0:	68 ef       	ldi	r22, 0xF8	; 248
    13e2:	86 e7       	ldi	r24, 0x76	; 118
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    13ea:	68 ef       	ldi	r22, 0xF8	; 248
    13ec:	82 e8       	ldi	r24, 0x82	; 130
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
    13f4:	08 95       	ret

000013f6 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    13f6:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
    13fa:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
    13fe:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
    1402:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
    1406:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <timer_disp_process.1979>
    140a:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <timer_disp_process.1979+0x1>
    140e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <timer_disp_process.1979+0x2>
    1412:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <timer_disp_process.1979+0x3>
    1416:	48 17       	cp	r20, r24
    1418:	59 07       	cpc	r21, r25
    141a:	6a 07       	cpc	r22, r26
    141c:	7b 07       	cpc	r23, r27
    141e:	08 f0       	brcs	.+2      	; 0x1422 <disp_process+0x2c>
    1420:	26 c1       	rjmp	.+588    	; 0x166e <disp_process+0x278>
	{
        
        switch(segment1.state)
    1422:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	09 f4       	brne	.+2      	; 0x142c <disp_process+0x36>
    142a:	59 c0       	rjmp	.+178    	; 0x14de <disp_process+0xe8>
    142c:	30 f4       	brcc	.+12     	; 0x143a <disp_process+0x44>
    142e:	88 23       	and	r24, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <disp_process+0x3e>
    1432:	87 c0       	rjmp	.+270    	; 0x1542 <disp_process+0x14c>
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	39 f1       	breq	.+78     	; 0x1486 <disp_process+0x90>
    1438:	8e c0       	rjmp	.+284    	; 0x1556 <disp_process+0x160>
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	09 f4       	brne	.+2      	; 0x1440 <disp_process+0x4a>
    143e:	74 c0       	rjmp	.+232    	; 0x1528 <disp_process+0x132>
    1440:	48 f1       	brcs	.+82     	; 0x1494 <disp_process+0x9e>
    1442:	86 30       	cpi	r24, 0x06	; 6
    1444:	09 f0       	breq	.+2      	; 0x1448 <disp_process+0x52>
    1446:	87 c0       	rjmp	.+270    	; 0x1556 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    1448:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	48 ec       	ldi	r20, 0xC8	; 200
    1452:	52 e4       	ldi	r21, 0x42	; 66
    1454:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1458:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__fixsfsi>
    145c:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <voltage+0x1>
    1460:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <voltage>
            disp_set_number(&segment1, voltage/100);
    1464:	9b 01       	movw	r18, r22
    1466:	36 95       	lsr	r19
    1468:	27 95       	ror	r18
    146a:	36 95       	lsr	r19
    146c:	27 95       	ror	r18
    146e:	ab e7       	ldi	r26, 0x7B	; 123
    1470:	b4 e1       	ldi	r27, 0x14	; 20
    1472:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__umulhisi3>
    1476:	96 95       	lsr	r25
    1478:	87 95       	ror	r24
    147a:	68 2f       	mov	r22, r24
    147c:	81 e7       	ldi	r24, 0x71	; 113
    147e:	94 e0       	ldi	r25, 0x04	; 4
    1480:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
            break;
    1484:	68 c0       	rjmp	.+208    	; 0x1556 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1486:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <motor_disp_value>
    148a:	81 e7       	ldi	r24, 0x71	; 113
    148c:	94 e0       	ldi	r25, 0x04	; 4
    148e:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
            break;
    1492:	61 c0       	rjmp	.+194    	; 0x1556 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1494:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	31 f0       	breq	.+12     	; 0x14a8 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
			    segment2.state = SEG_VALUE;
    14a2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
                break;
    14a6:	57 c0       	rjmp	.+174    	; 0x1556 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    14a8:	48 51       	subi	r20, 0x18	; 24
    14aa:	5c 4f       	sbci	r21, 0xFC	; 252
    14ac:	6f 4f       	sbci	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <timer_disp_process.1979>
    14b4:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <timer_disp_process.1979+0x1>
    14b8:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <timer_disp_process.1979+0x2>
    14bc:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    14c0:	83 e7       	ldi	r24, 0x73	; 115
    14c2:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <DispD2>
			DispD1.value = 'a';
    14c6:	81 e6       	ldi	r24, 0x61	; 97
    14c8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <DispD1>
			DispD3.value = 'p';
    14cc:	80 e7       	ldi	r24, 0x70	; 112
    14ce:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <DispD3>
			segment1.state = SEG_VALUE;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
			segment2.state = SEG_VALUE;
    14d8:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
			return;
    14dc:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    14de:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    14ec:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
                break;
    14f0:	32 c0       	rjmp	.+100    	; 0x1556 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    14f2:	48 51       	subi	r20, 0x18	; 24
    14f4:	5c 4f       	sbci	r21, 0xFC	; 252
    14f6:	6f 4f       	sbci	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <timer_disp_process.1979>
    14fe:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <timer_disp_process.1979+0x1>
    1502:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <timer_disp_process.1979+0x2>
    1506:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    150a:	8c e6       	ldi	r24, 0x6C	; 108
    150c:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <DispD2>
			DispD1.value = 'o';
    1510:	8f e6       	ldi	r24, 0x6F	; 111
    1512:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <DispD1>
			DispD3.value = 'p';
    1516:	80 e7       	ldi	r24, 0x70	; 112
    1518:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <DispD3>
			segment1.state = SEG_VALUE;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <segment1+0x4>
			segment2.state = SEG_VALUE;
    1522:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <segment2+0x4>
            break;
    1526:	17 c0       	rjmp	.+46     	; 0x1556 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    1528:	85 e6       	ldi	r24, 0x65	; 101
    152a:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <DispD2>
			DispD1.value = 'r';
    152e:	82 e7       	ldi	r24, 0x72	; 114
    1530:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <DispD1>
			disp_set_number(&segment2, error_reason);
    1534:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <error_reason>
    1538:	8c e6       	ldi	r24, 0x6C	; 108
    153a:	94 e0       	ldi	r25, 0x04	; 4
    153c:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
            break;
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1542:	68 ef       	ldi	r22, 0xF8	; 248
    1544:	88 e7       	ldi	r24, 0x78	; 120
    1546:	94 e0       	ldi	r25, 0x04	; 4
    1548:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    154c:	68 ef       	ldi	r22, 0xF8	; 248
    154e:	84 e8       	ldi	r24, 0x84	; 132
    1550:	94 e0       	ldi	r25, 0x04	; 4
    1552:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1556:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	19 f1       	breq	.+70     	; 0x15a4 <disp_process+0x1ae>
    155e:	48 f1       	brcs	.+82     	; 0x15b2 <disp_process+0x1bc>
    1560:	86 30       	cpi	r24, 0x06	; 6
    1562:	19 f0       	breq	.+6      	; 0x156a <disp_process+0x174>
    1564:	8d 30       	cpi	r24, 0x0D	; 13
    1566:	81 f1       	breq	.+96     	; 0x15c8 <disp_process+0x1d2>
    1568:	6f c0       	rjmp	.+222    	; 0x1648 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    156a:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <voltage>
    156e:	50 91 2e 02 	lds	r21, 0x022E	; 0x80022e <voltage+0x1>
    1572:	9a 01       	movw	r18, r20
    1574:	36 95       	lsr	r19
    1576:	27 95       	ror	r18
    1578:	36 95       	lsr	r19
    157a:	27 95       	ror	r18
    157c:	ab e7       	ldi	r26, 0x7B	; 123
    157e:	b4 e1       	ldi	r27, 0x14	; 20
    1580:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <__umulhisi3>
    1584:	96 95       	lsr	r25
    1586:	87 95       	ror	r24
    1588:	64 e6       	ldi	r22, 0x64	; 100
    158a:	68 9f       	mul	r22, r24
    158c:	90 01       	movw	r18, r0
    158e:	69 9f       	mul	r22, r25
    1590:	30 0d       	add	r19, r0
    1592:	11 24       	eor	r1, r1
    1594:	ba 01       	movw	r22, r20
    1596:	62 1b       	sub	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	8c e6       	ldi	r24, 0x6C	; 108
    159c:	94 e0       	ldi	r25, 0x04	; 4
    159e:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
            break;
    15a2:	52 c0       	rjmp	.+164    	; 0x1648 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    15a4:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <servo_disp_value>
    15a8:	8c e6       	ldi	r24, 0x6C	; 108
    15aa:	94 e0       	ldi	r25, 0x04	; 4
    15ac:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
            break;
    15b0:	4b c0       	rjmp	.+150    	; 0x1648 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    15b2:	68 ef       	ldi	r22, 0xF8	; 248
    15b4:	86 e7       	ldi	r24, 0x76	; 118
    15b6:	94 e0       	ldi	r25, 0x04	; 4
    15b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    15bc:	68 ef       	ldi	r22, 0xF8	; 248
    15be:	82 e8       	ldi	r24, 0x82	; 130
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
            break;
    15c6:	40 c0       	rjmp	.+128    	; 0x1648 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    15c8:	44 ef       	ldi	r20, 0xF4	; 244
    15ca:	51 e0       	ldi	r21, 0x01	; 1
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	88 e2       	ldi	r24, 0x28	; 40
    15d2:	92 e0       	ldi	r25, 0x02	; 2
    15d4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_process_period>
    15d8:	89 2b       	or	r24, r25
    15da:	b1 f1       	breq	.+108    	; 0x1648 <disp_process+0x252>
			{
				if (blink_state == 0)
    15dc:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <blink_state>
    15e0:	81 11       	cpse	r24, r1
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <disp_process+0x20a>
				{
					blink_state = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    15ea:	67 ef       	ldi	r22, 0xF7	; 247
    15ec:	86 e7       	ldi	r24, 0x76	; 118
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    15f4:	67 ef       	ldi	r22, 0xF7	; 247
    15f6:	82 e8       	ldi	r24, 0x82	; 130
    15f8:	94 e0       	ldi	r25, 0x04	; 4
    15fa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
    15fe:	24 c0       	rjmp	.+72     	; 0x1648 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    1600:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <blink_state>
					if (blink_cnt == 0) 
    1604:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <blink_cnt>
    1608:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <blink_cnt+0x1>
    160c:	a0 91 25 02 	lds	r26, 0x0225	; 0x800225 <blink_cnt+0x2>
    1610:	b0 91 26 02 	lds	r27, 0x0226	; 0x800226 <blink_cnt+0x3>
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	a1 05       	cpc	r26, r1
    1618:	b1 05       	cpc	r27, r1
    161a:	29 f4       	brne	.+10     	; 0x1626 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
						break;
    1624:	11 c0       	rjmp	.+34     	; 0x1648 <disp_process+0x252>
					}
					blink_cnt--;
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	a1 09       	sbc	r26, r1
    162a:	b1 09       	sbc	r27, r1
    162c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <blink_cnt>
    1630:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <blink_cnt+0x1>
    1634:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <blink_cnt+0x2>
    1638:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    163c:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <second_disp_blink_val>
    1640:	8c e6       	ldi	r24, 0x6C	; 108
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	0e 94 48 09 	call	0x1290	; 0x1290 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    1648:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <timer_disp_process.1979>
    164c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <timer_disp_process.1979+0x1>
    1650:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <timer_disp_process.1979+0x2>
    1654:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <timer_disp_process.1979+0x3>
    1658:	c2 96       	adiw	r24, 0x32	; 50
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <timer_disp_process.1979>
    1662:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <timer_disp_process.1979+0x1>
    1666:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <timer_disp_process.1979+0x2>
    166a:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <timer_disp_process.1979+0x3>
    166e:	08 95       	ret

00001670 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1674:	00 91 99 04 	lds	r16, 0x0499	; 0x800499 <mktime+0x2>
    1678:	10 91 9a 04 	lds	r17, 0x049A	; 0x80049a <mktime+0x3>
    167c:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <mktime+0x4>
    1680:	30 91 9c 04 	lds	r19, 0x049C	; 0x80049c <mktime+0x5>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	80 0f       	add	r24, r16
    168a:	91 1f       	adc	r25, r17
    168c:	a2 1f       	adc	r26, r18
    168e:	b3 1f       	adc	r27, r19
    1690:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <animation_time>
    1694:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <animation_time+0x1>
    1698:	a0 93 32 02 	sts	0x0232, r26	; 0x800232 <animation_time+0x2>
    169c:	b0 93 33 02 	sts	0x0233, r27	; 0x800233 <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	84 2f       	mov	r24, r20
    16a4:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
}
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    16ae:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <animation+0x12>
    16b6:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <animation+0x12>
    16be:	78 c0       	rjmp	.+240    	; 0x17b0 <animation+0x102>
    16c0:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    16c4:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    16c8:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    16cc:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    16d0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <timer_anim.1999>
    16d4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <timer_anim.1999+0x1>
    16d8:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <timer_anim.1999+0x2>
    16dc:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <timer_anim.1999+0x3>
    16e0:	84 17       	cp	r24, r20
    16e2:	95 07       	cpc	r25, r21
    16e4:	a6 07       	cpc	r26, r22
    16e6:	b7 07       	cpc	r27, r23
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <animation+0x3e>
    16ea:	62 c0       	rjmp	.+196    	; 0x17b0 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    16ec:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
    16f0:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
    16f4:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
    16f8:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
    16fc:	81 55       	subi	r24, 0x51	; 81
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	af 4f       	sbci	r26, 0xFF	; 255
    1702:	bf 4f       	sbci	r27, 0xFF	; 255
    1704:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <timer_anim.1999>
    1708:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <timer_anim.1999+0x1>
    170c:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <timer_anim.1999+0x2>
    1710:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    1714:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <segment1+0x4>
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	61 f4       	brne	.+24     	; 0x1734 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    171c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <anim_iteration.2000>
    1720:	88 e7       	ldi	r24, 0x78	; 120
    1722:	94 e0       	ldi	r25, 0x04	; 4
    1724:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    1728:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <anim_iteration.2000>
    172c:	84 e8       	ldi	r24, 0x84	; 132
    172e:	94 e0       	ldi	r25, 0x04	; 4
    1730:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    1734:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <segment2+0x4>
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	61 f4       	brne	.+24     	; 0x1754 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    173c:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <anim_iteration2.2001>
    1740:	86 e7       	ldi	r24, 0x76	; 118
    1742:	94 e0       	ldi	r25, 0x04	; 4
    1744:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    1748:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <anim_iteration2.2001>
    174c:	82 e8       	ldi	r24, 0x82	; 130
    174e:	94 e0       	ldi	r25, 0x04	; 4
    1750:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1754:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    1758:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    175c:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    1760:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    1764:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <animation_time>
    1768:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <animation_time+0x1>
    176c:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <animation_time+0x2>
    1770:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <animation_time+0x3>
    1774:	84 17       	cp	r24, r20
    1776:	95 07       	cpc	r25, r21
    1778:	a6 07       	cpc	r26, r22
    177a:	b7 07       	cpc	r27, r23
    177c:	28 f4       	brcc	.+10     	; 0x1788 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
			LED_ACUM_OFF;
    1786:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1788:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <anim_iteration.2000>
    178c:	9f 5f       	subi	r25, 0xFF	; 255
    178e:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <anim_iteration.2000>
		anim_iteration2--;
    1792:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <anim_iteration2.2001>
    1796:	81 50       	subi	r24, 0x01	; 1
    1798:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    179c:	9f 3f       	cpi	r25, 0xFF	; 255
    179e:	19 f4       	brne	.+6      	; 0x17a6 <animation+0xf8>
    17a0:	99 ef       	ldi	r25, 0xF9	; 249
    17a2:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    17a6:	88 3f       	cpi	r24, 0xF8	; 248
    17a8:	19 f4       	brne	.+6      	; 0x17b0 <animation+0x102>
    17aa:	8e ef       	ldi	r24, 0xFE	; 254
    17ac:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <anim_iteration2.2001>
    17b0:	08 95       	ret

000017b2 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    17b2:	e1 99       	sbic	0x1c, 1	; 28
    17b4:	fe cf       	rjmp	.-4      	; 0x17b2 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    17b6:	9f bb       	out	0x1f, r25	; 31
    17b8:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    17ba:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    17bc:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    17be:	e1 9a       	sbi	0x1c, 1	; 28
    17c0:	08 95       	ret

000017c2 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    17c2:	e1 99       	sbic	0x1c, 1	; 28
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    17c6:	9f bb       	out	0x1f, r25	; 31
    17c8:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    17ca:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    17cc:	8d b3       	in	r24, 0x1d	; 29
    17ce:	08 95       	ret

000017d0 <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    17d0:	cf 93       	push	r28
    17d2:	c8 2f       	mov	r28, r24
    17d4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    17d8:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    17dc:	82 60       	ori	r24, 0x02	; 2
    17de:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    17e2:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    17e6:	8c 2f       	mov	r24, r28
    17e8:	0e 94 de 09 	call	0x13bc	; 0x13bc <display_set_error>
    17ec:	0e 94 61 07 	call	0xec2	; 0xec2 <dcmotor_set_error>
    17f0:	c1 30       	cpi	r28, 0x01	; 1
    17f2:	21 f4       	brne	.+8      	; 0x17fc <set_error_state+0x2c>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	0e 94 a1 11 	call	0x2342	; 0x2342 <servo_error>
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <set_error_state+0x32>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 a1 11 	call	0x2342	; 0x2342 <servo_error>
    1802:	0e 94 f5 16 	call	0x2dea	; 0x2dea <system_error>
    1806:	c0 93 88 04 	sts	0x0488, r28	; 0x800488 <led_blink>
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <error_init>:
    180e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <error_motor_state>
    1812:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <error_motor_last_state>
    1816:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <error_motor_status>
    181a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <error_servo_status>
    181e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <error_servo_state>
    1822:	83 e5       	ldi	r24, 0x53	; 83
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <evTime_off>
    182a:	83 e4       	ldi	r24, 0x43	; 67
    182c:	92 e0       	ldi	r25, 0x02	; 2
    182e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <evTime_off>
    1832:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <led_blink>
    1836:	08 95       	ret

00001838 <error_deinit>:
    1838:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <error_motor_state>
    183c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <error_motor_last_state>
    1840:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <error_motor_status>
    1844:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <error_servo_status>
    1848:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <error_servo_state>
    184c:	83 e5       	ldi	r24, 0x53	; 83
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <evTime_off>
    1854:	83 e4       	ldi	r24, 0x43	; 67
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <evTime_off>
    185c:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <led_blink>
    1860:	08 95       	ret

00001862 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	//debug_msg("ERROR: reset timer");
	error_servo_tim = mktime.ms + 2000;
    1862:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
    1866:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
    186a:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
    186e:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
    1872:	80 53       	subi	r24, 0x30	; 48
    1874:	98 4f       	sbci	r25, 0xF8	; 248
    1876:	af 4f       	sbci	r26, 0xFF	; 255
    1878:	bf 4f       	sbci	r27, 0xFF	; 255
    187a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <error_servo_tim>
    187e:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <error_servo_tim+0x1>
    1882:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <error_servo_tim+0x2>
    1886:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <error_servo_tim+0x3>
    188a:	08 95       	ret

0000188c <error_event>:
}

void error_event(void)
{
    188c:	4f 92       	push	r4
    188e:	5f 92       	push	r5
    1890:	6f 92       	push	r6
    1892:	7f 92       	push	r7
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    18a4:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    18a8:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    18ac:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    18b0:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    18b4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <error_event_timer.2075>
    18b8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <error_event_timer.2075+0x1>
    18bc:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <error_event_timer.2075+0x2>
    18c0:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <error_event_timer.2075+0x3>
    18c4:	84 17       	cp	r24, r20
    18c6:	95 07       	cpc	r25, r21
    18c8:	a6 07       	cpc	r26, r22
    18ca:	b7 07       	cpc	r27, r23
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <error_event+0x44>
    18ce:	45 c2       	rjmp	.+1162   	; 0x1d5a <error_event+0x4ce>
    18d0:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    18d4:	80 ff       	sbrs	r24, 0
    18d6:	41 c2       	rjmp	.+1154   	; 0x1d5a <error_event+0x4ce>
	{
		error_event_timer = mktime.ms + 250;
    18d8:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    18dc:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    18e0:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    18e4:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    18e8:	46 50       	subi	r20, 0x06	; 6
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	6f 4f       	sbci	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	40 93 3b 02 	sts	0x023B, r20	; 0x80023b <error_event_timer.2075>
    18f4:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <error_event_timer.2075+0x1>
    18f8:	60 93 3d 02 	sts	0x023D, r22	; 0x80023d <error_event_timer.2075+0x2>
    18fc:	70 93 3e 02 	sts	0x023E, r23	; 0x80023e <error_event_timer.2075+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1900:	81 fd       	sbrc	r24, 1
    1902:	2b c2       	rjmp	.+1110   	; 0x1d5a <error_event+0x4ce>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    1904:	0e 94 6e 02 	call	0x4dc	; 0x4dc <accum_get_voltage>
    1908:	4b 01       	movw	r8, r22
    190a:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    190c:	0e 94 5d 07 	call	0xeba	; 0xeba <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    1910:	bc 01       	movw	r22, r24
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
    191a:	6b 01       	movw	r12, r22
    191c:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    191e:	25 e9       	ldi	r18, 0x95	; 149
    1920:	35 e6       	ldi	r19, 0x65	; 101
    1922:	40 ed       	ldi	r20, 0xD0	; 208
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 bd 1a 	call	0x357a	; 0x357a <pow>
    192a:	2b 01       	movw	r4, r22
    192c:	3c 01       	movw	r6, r24
    192e:	a7 01       	movw	r20, r14
    1930:	96 01       	movw	r18, r12
    1932:	c5 01       	movw	r24, r10
    1934:	b4 01       	movw	r22, r8
    1936:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	48 ec       	ldi	r20, 0xC8	; 200
    1940:	52 e4       	ldi	r21, 0x42	; 66
    1942:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    1946:	4b 01       	movw	r8, r22
    1948:	5c 01       	movw	r10, r24
    194a:	23 e3       	ldi	r18, 0x33	; 51
    194c:	33 e3       	ldi	r19, 0x33	; 51
    194e:	43 e6       	ldi	r20, 0x63	; 99
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	c7 01       	movw	r24, r14
    1954:	b6 01       	movw	r22, r12
    1956:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	48 ec       	ldi	r20, 0xC8	; 200
    1960:	52 e4       	ldi	r21, 0x42	; 66
    1962:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	c5 01       	movw	r24, r10
    196c:	b4 01       	movw	r22, r8
    196e:	0e 94 84 18 	call	0x3108	; 0x3108 <__subsf3>
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e4       	ldi	r20, 0x40	; 64
    1978:	50 e4       	ldi	r21, 0x40	; 64
    197a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    197e:	4b 01       	movw	r8, r22
    1980:	5c 01       	movw	r10, r24
    1982:	28 e5       	ldi	r18, 0x58	; 88
    1984:	39 e3       	ldi	r19, 0x39	; 57
    1986:	44 e3       	ldi	r20, 0x34	; 52
    1988:	5c e3       	ldi	r21, 0x3C	; 60
    198a:	c3 01       	movw	r24, r6
    198c:	b2 01       	movw	r22, r4
    198e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	c5 01       	movw	r24, r10
    1998:	b4 01       	movw	r22, r8
    199a:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    199e:	4b 01       	movw	r8, r22
    19a0:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp += (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/400;
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    19a8:	68 2f       	mov	r22, r24
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	62 53       	subi	r22, 0x32	; 50
    19ae:	71 09       	sbc	r23, r1
    19b0:	07 2e       	mov	r0, r23
    19b2:	00 0c       	add	r0, r0
    19b4:	88 0b       	sbc	r24, r24
    19b6:	99 0b       	sbc	r25, r25
    19b8:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatsisf>
    19bc:	a7 01       	movw	r20, r14
    19be:	96 01       	movw	r18, r12
    19c0:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	48 ec       	ldi	r20, 0xC8	; 200
    19ca:	53 e4       	ldi	r21, 0x43	; 67
    19cc:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    19d0:	a5 01       	movw	r20, r10
    19d2:	94 01       	movw	r18, r8
    19d4:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    19d8:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <motor_error_value>
    19dc:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <motor_error_value+0x1>
    19e0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <motor_error_value+0x2>
    19e4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 46 10 	call	0x208c	; 0x208c <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    19ee:	42 e0       	ldi	r20, 0x02	; 2
    19f0:	5b e2       	ldi	r21, 0x2B	; 43
    19f2:	67 e0       	ldi	r22, 0x07	; 7
    19f4:	7d e3       	ldi	r23, 0x3D	; 61
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	0e 94 5f 10 	call	0x20be	; 0x20be <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    19fc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <motor_error_value>
    1a00:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <motor_error_value+0x1>
    1a04:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <motor_error_value+0x2>
    1a08:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <motor_error_value+0x3>
    1a0c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__gesf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	44 f4       	brge	.+16     	; 0x1a24 <error_event+0x198>
    1a14:	0e 94 18 07 	call	0xe30	; 0xe30 <dcmotor_is_on>
    1a18:	89 2b       	or	r24, r25
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <error_event+0x198>
		{
			error_motor_status = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <error_motor_status>
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1a24:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	d2 c0       	rjmp	.+420    	; 0x1bd6 <error_event+0x34a>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1a32:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <error_motor_status>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <error_event+0x1b0>
    1a3a:	88 c0       	rjmp	.+272    	; 0x1b4c <error_event+0x2c0>
			{
				switch(error_motor_state)
    1a3c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <error_motor_state>
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <error_event+0x1ba>
    1a44:	60 c0       	rjmp	.+192    	; 0x1b06 <error_event+0x27a>
    1a46:	28 f4       	brcc	.+10     	; 0x1a52 <error_event+0x1c6>
    1a48:	88 23       	and	r24, r24
    1a4a:	51 f0       	breq	.+20     	; 0x1a60 <error_event+0x1d4>
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	69 f1       	breq	.+90     	; 0x1aaa <error_event+0x21e>
    1a50:	c2 c0       	rjmp	.+388    	; 0x1bd6 <error_event+0x34a>
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <error_event+0x1cc>
    1a56:	62 c0       	rjmp	.+196    	; 0x1b1c <error_event+0x290>
    1a58:	84 30       	cpi	r24, 0x04	; 4
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <error_event+0x1d2>
    1a5c:	63 c0       	rjmp	.+198    	; 0x1b24 <error_event+0x298>
    1a5e:	bb c0       	rjmp	.+374    	; 0x1bd6 <error_event+0x34a>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1a66:	0e 94 5d 07 	call	0xeba	; 0xeba <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1a6a:	2e e1       	ldi	r18, 0x1E	; 30
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	24 9f       	mul	r18, r20
    1a70:	c0 01       	movw	r24, r0
    1a72:	25 9f       	mul	r18, r21
    1a74:	90 0d       	add	r25, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	48 e8       	ldi	r20, 0x88	; 136
    1a7a:	53 e1       	ldi	r21, 0x13	; 19
    1a7c:	7a 01       	movw	r14, r20
    1a7e:	e8 1a       	sub	r14, r24
    1a80:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1a82:	ff 92       	push	r15
    1a84:	ef 92       	push	r14
    1a86:	8d ed       	ldi	r24, 0xDD	; 221
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						//debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1a92:	a7 01       	movw	r20, r14
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	83 e5       	ldi	r24, 0x53	; 83
    1a9a:	92 e0       	ldi	r25, 0x02	; 2
    1a9c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
					break;
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	96 c0       	rjmp	.+300    	; 0x1bd6 <error_event+0x34a>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1aaa:	83 e5       	ldi	r24, 0x53	; 83
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <error_event+0x22c>
    1ab6:	8f c0       	rjmp	.+286    	; 0x1bd6 <error_event+0x34a>
						{
							dcmotor_set_try();
    1ab8:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1abc:	0e 94 5d 07 	call	0xeba	; 0xeba <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1ac0:	2e e1       	ldi	r18, 0x1E	; 30
    1ac2:	ac 01       	movw	r20, r24
    1ac4:	24 9f       	mul	r18, r20
    1ac6:	c0 01       	movw	r24, r0
    1ac8:	25 9f       	mul	r18, r21
    1aca:	90 0d       	add	r25, r0
    1acc:	11 24       	eor	r1, r1
    1ace:	48 e8       	ldi	r20, 0x88	; 136
    1ad0:	53 e1       	ldi	r21, 0x13	; 19
    1ad2:	7a 01       	movw	r14, r20
    1ad4:	e8 1a       	sub	r14, r24
    1ad6:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1ad8:	ff 92       	push	r15
    1ada:	ef 92       	push	r14
    1adc:	8c ef       	ldi	r24, 0xFC	; 252
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1ae8:	a7 01       	movw	r20, r14
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	83 e5       	ldi	r24, 0x53	; 83
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	68 c0       	rjmp	.+208    	; 0x1bd6 <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1b06:	83 e5       	ldi	r24, 0x53	; 83
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1b0e:	89 2b       	or	r24, r25
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <error_event+0x288>
    1b12:	61 c0       	rjmp	.+194    	; 0x1bd6 <error_event+0x34a>
						{
							error_motor_state = ERR_M_ERROR;
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
    1b1a:	5d c0       	rjmp	.+186    	; 0x1bd6 <error_event+0x34a>
							//debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <set_error_state>
					break;
    1b22:	59 c0       	rjmp	.+178    	; 0x1bd6 <error_event+0x34a>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1b24:	83 e5       	ldi	r24, 0x53	; 83
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <error_event+0x2a6>
    1b30:	52 c0       	rjmp	.+164    	; 0x1bd6 <error_event+0x34a>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1b32:	40 ed       	ldi	r20, 0xD0	; 208
    1b34:	57 e0       	ldi	r21, 0x07	; 7
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	83 e5       	ldi	r24, 0x53	; 83
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
							error_motor_state = error_motor_last_state;
    1b42:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <error_motor_last_state>
    1b46:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
    1b4a:	45 c0       	rjmp	.+138    	; 0x1bd6 <error_event+0x34a>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1b4c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <error_motor_state>
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	f1 f0       	breq	.+60     	; 0x1b90 <error_event+0x304>
    1b54:	18 f4       	brcc	.+6      	; 0x1b5c <error_event+0x2d0>
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	31 f0       	breq	.+12     	; 0x1b66 <error_event+0x2da>
    1b5a:	3d c0       	rjmp	.+122    	; 0x1bd6 <error_event+0x34a>
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	79 f1       	breq	.+94     	; 0x1bbe <error_event+0x332>
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	89 f1       	breq	.+98     	; 0x1bc6 <error_event+0x33a>
    1b64:	38 c0       	rjmp	.+112    	; 0x1bd6 <error_event+0x34a>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1b66:	83 e5       	ldi	r24, 0x53	; 83
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1b6e:	89 2b       	or	r24, r25
    1b70:	91 f1       	breq	.+100    	; 0x1bd6 <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1b72:	40 ed       	ldi	r20, 0xD0	; 208
    1b74:	57 e0       	ldi	r21, 0x07	; 7
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	83 e5       	ldi	r24, 0x53	; 83
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <error_motor_last_state>
    1b8e:	23 c0       	rjmp	.+70     	; 0x1bd6 <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1b90:	83 e5       	ldi	r24, 0x53	; 83
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1b98:	89 2b       	or	r24, r25
    1b9a:	e9 f0       	breq	.+58     	; 0x1bd6 <error_event+0x34a>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1b9c:	40 ed       	ldi	r20, 0xD0	; 208
    1b9e:	57 e0       	ldi	r21, 0x07	; 7
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	83 e5       	ldi	r24, 0x53	; 83
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
						dcmotor_set_normal_state();
    1bac:	0e 94 79 07 	call	0xef2	; 0xef2 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <error_motor_last_state>
    1bbc:	0c c0       	rjmp	.+24     	; 0x1bd6 <error_event+0x34a>
						//debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <set_error_state>
					break;
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <error_event+0x34a>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1bc6:	83 e5       	ldi	r24, 0x53	; 83
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1bce:	89 2b       	or	r24, r25
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <error_event+0x34a>
					{
						//debug_msg("ERROR STATUS: ERR_M_OK\n\r");
						error_motor_state = ERR_M_OK;
    1bd2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <error_motor_state>
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
    1bdc:	81 11       	cpse	r24, r1
    1bde:	bd c0       	rjmp	.+378    	; 0x1d5a <error_event+0x4ce>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <servo_error_value+0x1>
    1bec:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 46 10 	call	0x208c	; 0x208c <measure_get_filtered_value>
			//debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_filt_val*5
    1bf6:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <servo_error_value>
    1bfa:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <servo_error_value+0x1>
    1bfe:	28 17       	cp	r18, r24
    1c00:	39 07       	cpc	r19, r25
    1c02:	20 f5       	brcc	.+72     	; 0x1c4c <error_event+0x3c0>
    1c04:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    1c08:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    1c0c:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    1c10:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    1c14:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <error_servo_tim>
    1c18:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <error_servo_tim+0x1>
    1c1c:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <error_servo_tim+0x2>
    1c20:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <error_servo_tim+0x3>
    1c24:	84 17       	cp	r24, r20
    1c26:	95 07       	cpc	r25, r21
    1c28:	a6 07       	cpc	r26, r22
    1c2a:	b7 07       	cpc	r27, r23
    1c2c:	78 f4       	brcc	.+30     	; 0x1c4c <error_event+0x3c0>
			{
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1c34:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <error_servo_state>
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	51 f1       	breq	.+84     	; 0x1c90 <error_event+0x404>
    1c3c:	a8 f0       	brcs	.+42     	; 0x1c68 <error_event+0x3dc>
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <error_event+0x3b8>
    1c42:	4b c0       	rjmp	.+150    	; 0x1cda <error_event+0x44e>
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <error_event+0x3be>
    1c48:	51 c0       	rjmp	.+162    	; 0x1cec <error_event+0x460>
    1c4a:	87 c0       	rjmp	.+270    	; 0x1d5a <error_event+0x4ce>
				//debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1c4c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1c50:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <error_servo_state>
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <error_event+0x3ce>
    1c58:	66 c0       	rjmp	.+204    	; 0x1d26 <error_event+0x49a>
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <error_event+0x3d4>
    1c5e:	7a c0       	rjmp	.+244    	; 0x1d54 <error_event+0x4c8>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <error_event+0x3da>
    1c64:	7a c0       	rjmp	.+244    	; 0x1d5a <error_event+0x4ce>
    1c66:	46 c0       	rjmp	.+140    	; 0x1cf4 <error_event+0x468>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1c6e:	80 e2       	ldi	r24, 0x20	; 32
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	9f 93       	push	r25
    1c74:	8f 93       	push	r24
    1c76:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1c7a:	4c ed       	ldi	r20, 0xDC	; 220
    1c7c:	55 e0       	ldi	r21, 0x05	; 5
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	83 e4       	ldi	r24, 0x43	; 67
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
					break;
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	65 c0       	rjmp	.+202    	; 0x1d5a <error_event+0x4ce>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1c90:	83 e4       	ldi	r24, 0x43	; 67
    1c92:	92 e0       	ldi	r25, 0x02	; 2
    1c94:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1c98:	89 2b       	or	r24, r25
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <error_event+0x412>
    1c9c:	5e c0       	rjmp	.+188    	; 0x1d5a <error_event+0x4ce>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1c9e:	0e 94 13 12 	call	0x2426	; 0x2426 <servo_get_try_cnt>
    1ca2:	04 97       	sbiw	r24, 0x04	; 4
    1ca4:	24 f0       	brlt	.+8      	; 0x1cae <error_event+0x422>
							{
								error_servo_state = ERR_S_ERROR;
    1ca6:	83 e0       	ldi	r24, 0x03	; 3
    1ca8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <error_servo_state>
								break;
    1cac:	56 c0       	rjmp	.+172    	; 0x1d5a <error_event+0x4ce>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1cae:	40 ed       	ldi	r20, 0xD0	; 208
    1cb0:	57 e0       	ldi	r21, 0x07	; 7
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	83 e4       	ldi	r24, 0x43	; 67
    1cb8:	92 e0       	ldi	r25, 0x02	; 2
    1cba:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
							error_servo_state = ERR_S_TRY;
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <error_servo_state>
							servo_enable_try();
    1cc4:	0e 94 07 12 	call	0x240e	; 0x240e <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1cc8:	8b e3       	ldi	r24, 0x3B	; 59
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	9f 93       	push	r25
    1cce:	8f 93       	push	r24
    1cd0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	40 c0       	rjmp	.+128    	; 0x1d5a <error_event+0x4ce>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1cda:	83 e4       	ldi	r24, 0x43	; 67
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1ce2:	89 2b       	or	r24, r25
    1ce4:	d1 f1       	breq	.+116    	; 0x1d5a <error_event+0x4ce>
						{
							error_servo_state = ERR_S_OK;
    1ce6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <error_servo_state>
    1cea:	37 c0       	rjmp	.+110    	; 0x1d5a <error_event+0x4ce>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <set_error_state>
					break;
    1cf2:	33 c0       	rjmp	.+102    	; 0x1d5a <error_event+0x4ce>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1cf4:	83 e4       	ldi	r24, 0x43	; 67
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	69 f1       	breq	.+90     	; 0x1d5a <error_event+0x4ce>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1d00:	40 ed       	ldi	r20, 0xD0	; 208
    1d02:	57 e0       	ldi	r21, 0x07	; 7
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	83 e4       	ldi	r24, 0x43	; 67
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
						error_servo_state = ERR_M_OK;
    1d10:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1d14:	85 e5       	ldi	r24, 0x55	; 85
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	9f 93       	push	r25
    1d1a:	8f 93       	push	r24
    1d1c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	1a c0       	rjmp	.+52     	; 0x1d5a <error_event+0x4ce>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1d26:	83 e4       	ldi	r24, 0x43	; 67
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    1d2e:	89 2b       	or	r24, r25
    1d30:	a1 f0       	breq	.+40     	; 0x1d5a <error_event+0x4ce>
					{
						error_servo_state = ERR_S_OK;
    1d32:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1d36:	85 e5       	ldi	r24, 0x55	; 85
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	9f 93       	push	r25
    1d3c:	8f 93       	push	r24
    1d3e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1d42:	6c ea       	ldi	r22, 0xAC	; 172
    1d44:	7d e0       	ldi	r23, 0x0D	; 13
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 89 12 	call	0x2512	; 0x2512 <servo_try_reset_timeout>
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <error_event+0x4ce>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	08 95       	ret

00001d74 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1d74:	4e e5       	ldi	r20, 0x5E	; 94
    1d76:	51 e0       	ldi	r21, 0x01	; 1
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	86 e3       	ldi	r24, 0x36	; 54
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_process_period>
    1d84:	89 2b       	or	r24, r25
    1d86:	09 f1       	breq	.+66     	; 0x1dca <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1d88:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <led_blink>
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	71 f4       	brne	.+28     	; 0x1dac <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1d90:	92 b3       	in	r25, 0x12	; 18
    1d92:	80 e1       	ldi	r24, 0x10	; 16
    1d94:	89 27       	eor	r24, r25
    1d96:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1d98:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    1d9c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    1da0:	90 62       	ori	r25, 0x20	; 32
    1da2:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    1da6:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    1daa:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	69 f4       	brne	.+26     	; 0x1dca <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1db0:	92 b3       	in	r25, 0x12	; 18
    1db2:	80 e4       	ldi	r24, 0x40	; 64
    1db4:	89 27       	eor	r24, r25
    1db6:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1db8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    1dbc:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    1dc0:	90 62       	ori	r25, 0x20	; 32
    1dc2:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    1dc6:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    1dca:	08 95       	ret

00001dcc <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1dcc:	fc 01       	movw	r30, r24
    1dce:	20 81       	ld	r18, Z
    1dd0:	31 81       	ldd	r19, Z+1	; 0x01
    1dd2:	62 30       	cpi	r22, 0x02	; 2
    1dd4:	58 f0       	brcs	.+22     	; 0x1dec <filtered_value+0x20>
    1dd6:	32 96       	adiw	r30, 0x02	; 2
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	41 91       	ld	r20, Z+
    1ddc:	51 91       	ld	r21, Z+
    1dde:	24 0f       	add	r18, r20
    1de0:	35 1f       	adc	r19, r21
    1de2:	36 95       	lsr	r19
    1de4:	27 95       	ror	r18
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	69 13       	cpse	r22, r25
    1dea:	f7 cf       	rjmp	.-18     	; 0x1dda <filtered_value+0xe>
    1dec:	c9 01       	movw	r24, r18
    1dee:	08 95       	ret

00001df0 <init_measure>:
    1df0:	ee e9       	ldi	r30, 0x9E	; 158
    1df2:	f2 e0       	ldi	r31, 0x02	; 2
    1df4:	26 ec       	ldi	r18, 0xC6	; 198
    1df6:	32 e0       	ldi	r19, 0x02	; 2
    1df8:	81 ef       	ldi	r24, 0xF1	; 241
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	81 93       	st	Z+, r24
    1dfe:	91 93       	st	Z+, r25
    1e00:	2e 17       	cp	r18, r30
    1e02:	3f 07       	cpc	r19, r31
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <init_measure+0xc>
    1e06:	ed e7       	ldi	r30, 0x7D	; 125
    1e08:	f2 e0       	ldi	r31, 0x02	; 2
    1e0a:	8b e9       	ldi	r24, 0x9B	; 155
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	11 92       	st	Z+, r1
    1e10:	11 92       	st	Z+, r1
    1e12:	8e 17       	cp	r24, r30
    1e14:	9f 07       	cpc	r25, r31
    1e16:	d9 f7       	brne	.-10     	; 0x1e0e <init_measure+0x1e>
    1e18:	e5 e6       	ldi	r30, 0x65	; 101
    1e1a:	f2 e0       	ldi	r31, 0x02	; 2
    1e1c:	89 e7       	ldi	r24, 0x79	; 121
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	11 92       	st	Z+, r1
    1e22:	11 92       	st	Z+, r1
    1e24:	8e 17       	cp	r24, r30
    1e26:	9f 07       	cpc	r25, r31
    1e28:	d9 f7       	brne	.-10     	; 0x1e20 <init_measure+0x30>
    1e2a:	08 95       	ret

00001e2c <measure_process>:
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    1e3c:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    1e40:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    1e44:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    1e48:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <measure_timer>
    1e4c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <measure_timer+0x1>
    1e50:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <measure_timer+0x2>
    1e54:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <measure_timer+0x3>
    1e58:	84 17       	cp	r24, r20
    1e5a:	95 07       	cpc	r25, r21
    1e5c:	a6 07       	cpc	r26, r22
    1e5e:	b7 07       	cpc	r27, r23
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <measure_process+0x38>
    1e62:	d1 c0       	rjmp	.+418    	; 0x2006 <measure_process+0x1da>
    1e64:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
    1e68:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
    1e6c:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
    1e70:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
    1e74:	44 96       	adiw	r24, 0x14	; 20
    1e76:	a1 1d       	adc	r26, r1
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <measure_timer>
    1e7e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <measure_timer+0x1>
    1e82:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <measure_timer+0x2>
    1e86:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <measure_timer+0x3>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1e90:	ec 01       	movw	r28, r24
    1e92:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <motor_filter_value>
    1e96:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <motor_filter_value+0x1>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
    1ea2:	21 e7       	ldi	r18, 0x71	; 113
    1ea4:	3d e3       	ldi	r19, 0x3D	; 61
    1ea6:	4a e8       	ldi	r20, 0x8A	; 138
    1ea8:	5e e3       	ldi	r21, 0x3E	; 62
    1eaa:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1eae:	6b 01       	movw	r12, r22
    1eb0:	7c 01       	movw	r14, r24
    1eb2:	be 01       	movw	r22, r28
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    1ec8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixunssfsi>
    1ecc:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <accum_adc+0x1>
    1ed0:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <accum_adc>
    1ed4:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <iteration_adc_accum_table>
    1ed8:	e2 2f       	mov	r30, r18
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	e2 56       	subi	r30, 0x62	; 98
    1ee2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee4:	71 83       	std	Z+1, r23	; 0x01
    1ee6:	60 83       	st	Z, r22
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	82 0f       	add	r24, r18
    1eec:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <iteration_adc_accum_table>
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1ef6:	80 32       	cpi	r24, 0x20	; 32
    1ef8:	91 05       	cpc	r25, r1
    1efa:	30 f0       	brcs	.+12     	; 0x1f08 <measure_process+0xdc>
    1efc:	4f 97       	sbiw	r24, 0x1f	; 31
    1efe:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <motor_adc+0x1>
    1f02:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <motor_adc>
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <measure_process+0xe4>
    1f08:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <motor_adc+0x1>
    1f0c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <motor_adc>
    1f10:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <iteration_adc_motor_table>
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	e3 58       	subi	r30, 0x83	; 131
    1f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <motor_adc>
    1f22:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <motor_adc+0x1>
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <adc_read>
    1f30:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <s_o_t_adc+0x1>
    1f34:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <s_o_t_adc>
    1f38:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <calibration_value>
    1f3c:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <calibration_value+0x1>
    1f40:	21 15       	cp	r18, r1
    1f42:	31 05       	cpc	r19, r1
    1f44:	71 f0       	breq	.+28     	; 0x1f62 <measure_process+0x136>
    1f46:	28 17       	cp	r18, r24
    1f48:	39 07       	cpc	r19, r25
    1f4a:	28 f4       	brcc	.+10     	; 0x1f56 <measure_process+0x12a>
    1f4c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <s_o_t_adc+0x1>
    1f50:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <s_o_t_adc>
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <measure_process+0x136>
    1f56:	28 1b       	sub	r18, r24
    1f58:	39 0b       	sbc	r19, r25
    1f5a:	30 93 63 02 	sts	0x0263, r19	; 0x800263 <s_o_t_adc+0x1>
    1f5e:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <s_o_t_adc>
    1f62:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <s_o_t_iteration_adc_table>
    1f66:	ec 2f       	mov	r30, r28
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	eb 59       	subi	r30, 0x9B	; 155
    1f70:	fd 4f       	sbci	r31, 0xFD	; 253
    1f72:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <s_o_t_adc>
    1f76:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <s_o_t_adc+0x1>
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	d0 91 9d 02 	lds	r29, 0x029D	; 0x80029d <iteration_adc_motor_table>
    1f82:	df 5f       	subi	r29, 0xFF	; 255
    1f84:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <iteration_adc_motor_table>
    1f88:	cf 5f       	subi	r28, 0xFF	; 255
    1f8a:	c0 93 64 02 	sts	0x0264, r28	; 0x800264 <s_o_t_iteration_adc_table>
    1f8e:	64 e1       	ldi	r22, 0x14	; 20
    1f90:	8e e9       	ldi	r24, 0x9E	; 158
    1f92:	92 e0       	ldi	r25, 0x02	; 2
    1f94:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <filtered_value>
    1f98:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <filtered_accum_adc_val+0x1>
    1f9c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <filtered_accum_adc_val>
    1fa0:	6f e0       	ldi	r22, 0x0F	; 15
    1fa2:	8d e7       	ldi	r24, 0x7D	; 125
    1fa4:	92 e0       	ldi	r25, 0x02	; 2
    1fa6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <filtered_value>
    1faa:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <motor_filter_value+0x1>
    1fae:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <motor_filter_value>
    1fb2:	6a e0       	ldi	r22, 0x0A	; 10
    1fb4:	85 e6       	ldi	r24, 0x65	; 101
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <filtered_value>
    1fbc:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <s_o_t_filter_value+0x1>
    1fc0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <s_o_t_filter_value>
    1fc4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <debug_msg_counter>
    1fc8:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <debug_msg_counter+0x1>
    1fcc:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <debug_msg_counter+0x2>
    1fd0:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <debug_msg_counter+0x3>
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	b1 1d       	adc	r27, r1
    1fda:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <debug_msg_counter>
    1fde:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <debug_msg_counter+0x1>
    1fe2:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <debug_msg_counter+0x2>
    1fe6:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <debug_msg_counter+0x3>
    1fea:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <iteration_adc_accum_table>
    1fee:	84 31       	cpi	r24, 0x14	; 20
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <measure_process+0x1ca>
    1ff2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <iteration_adc_accum_table>
    1ff6:	ca 30       	cpi	r28, 0x0A	; 10
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <measure_process+0x1d2>
    1ffa:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <s_o_t_iteration_adc_table>
    1ffe:	df 30       	cpi	r29, 0x0F	; 15
    2000:	11 f4       	brne	.+4      	; 0x2006 <measure_process+0x1da>
    2002:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <iteration_adc_motor_table>
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	08 95       	ret

00002014 <measure_get_servo_calibration>:
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	c0 90 99 04 	lds	r12, 0x0499	; 0x800499 <mktime+0x2>
    2024:	d0 90 9a 04 	lds	r13, 0x049A	; 0x80049a <mktime+0x3>
    2028:	e0 90 9b 04 	lds	r14, 0x049B	; 0x80049b <mktime+0x4>
    202c:	f0 90 9c 04 	lds	r15, 0x049C	; 0x80049c <mktime+0x5>
    2030:	8c ed       	ldi	r24, 0xDC	; 220
    2032:	c8 0e       	add	r12, r24
    2034:	85 e0       	ldi	r24, 0x05	; 5
    2036:	d8 1e       	adc	r13, r24
    2038:	e1 1c       	adc	r14, r1
    203a:	f1 1c       	adc	r15, r1
    203c:	c7 e9       	ldi	r28, 0x97	; 151
    203e:	d4 e0       	ldi	r29, 0x04	; 4
    2040:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <measure_process>
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	9b 81       	ldd	r25, Y+3	; 0x03
    2048:	ac 81       	ldd	r26, Y+4	; 0x04
    204a:	bd 81       	ldd	r27, Y+5	; 0x05
    204c:	c8 16       	cp	r12, r24
    204e:	d9 06       	cpc	r13, r25
    2050:	ea 06       	cpc	r14, r26
    2052:	fb 06       	cpc	r15, r27
    2054:	a8 f7       	brcc	.-22     	; 0x2040 <measure_get_servo_calibration+0x2c>
    2056:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <s_o_t_filter_value>
    205a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <s_o_t_filter_value+0x1>
    205e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <calibration_value>
    2062:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <calibration_value+0x1>
    2066:	9f 93       	push	r25
    2068:	8f 93       	push	r24
    206a:	8e e6       	ldi	r24, 0x6E	; 110
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	9f 93       	push	r25
    2070:	8f 93       	push	r24
    2072:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	df 90       	pop	r13
    2088:	cf 90       	pop	r12
    208a:	08 95       	ret

0000208c <measure_get_filtered_value>:
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	18 f4       	brcc	.+6      	; 0x2096 <measure_get_filtered_value+0xa>
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	40 f0       	brcs	.+16     	; 0x20a4 <measure_get_filtered_value+0x18>
    2094:	0c c0       	rjmp	.+24     	; 0x20ae <measure_get_filtered_value+0x22>
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	79 f4       	brne	.+30     	; 0x20b8 <measure_get_filtered_value+0x2c>
    209a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <filtered_accum_adc_val>
    209e:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <filtered_accum_adc_val+0x1>
    20a2:	08 95       	ret
    20a4:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <motor_filter_value>
    20a8:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <motor_filter_value+0x1>
    20ac:	08 95       	ret
    20ae:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <s_o_t_filter_value>
    20b2:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <s_o_t_filter_value+0x1>
    20b6:	08 95       	ret
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	08 95       	ret

000020be <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	6a 01       	movw	r12, r20
    20c8:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	18 f4       	brcc	.+6      	; 0x20d4 <measure_get_current+0x16>
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	50 f0       	brcs	.+20     	; 0x20e6 <measure_get_current+0x28>
    20d2:	10 c0       	rjmp	.+32     	; 0x20f4 <measure_get_current+0x36>
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	a9 f4       	brne	.+42     	; 0x2102 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    20d8:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <filtered_accum_adc_val>
    20dc:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <filtered_accum_adc_val+0x1>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
		break;
    20e4:	11 c0       	rjmp	.+34     	; 0x2108 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    20e6:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <motor_filter_value>
    20ea:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <motor_filter_value+0x1>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    20f4:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <s_o_t_filter_value>
    20f8:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <s_o_t_filter_value+0x1>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    2108:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5a e3       	ldi	r21, 0x3A	; 58
    2114:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 ea       	ldi	r20, 0xA0	; 160
    211e:	50 e4       	ldi	r21, 0x40	; 64
    2120:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    2124:	a7 01       	movw	r20, r14
    2126:	96 01       	movw	r18, r12
    2128:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	08 95       	ret

00002136 <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    2136:	ef 92       	push	r14
    2138:	ff 92       	push	r15
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	59 f0       	breq	.+22     	; 0x215c <mem_save_data+0x26>
    2146:	28 f4       	brcc	.+10     	; 0x2152 <mem_save_data+0x1c>
    2148:	88 23       	and	r24, r24
    214a:	91 f0       	breq	.+36     	; 0x2170 <mem_save_data+0x3a>
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	51 f1       	breq	.+84     	; 0x21a4 <mem_save_data+0x6e>
    2150:	34 c0       	rjmp	.+104    	; 0x21ba <mem_save_data+0x84>
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	51 f1       	breq	.+84     	; 0x21aa <mem_save_data+0x74>
    2156:	84 30       	cpi	r24, 0x04	; 4
    2158:	21 f0       	breq	.+8      	; 0x2162 <mem_save_data+0x2c>
    215a:	2f c0       	rjmp	.+94     	; 0x21ba <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    215c:	84 e0       	ldi	r24, 0x04	; 4
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	26 c0       	rjmp	.+76     	; 0x21ae <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    2162:	0e 94 14 06 	call	0xc28	; 0xc28 <dark_menu_parameters_len>
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    216a:	88 e0       	ldi	r24, 0x08	; 8
    216c:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    216e:	04 c0       	rjmp	.+8      	; 0x2178 <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2170:	22 e0       	ldi	r18, 0x02	; 2
    2172:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2178:	c8 2f       	mov	r28, r24
    217a:	7c 01       	movw	r14, r24
    217c:	e2 0e       	add	r14, r18
    217e:	f3 1e       	adc	r15, r19
    2180:	99 27       	eor	r25, r25
    2182:	8e 15       	cp	r24, r14
    2184:	9f 05       	cpc	r25, r15
    2186:	cc f4       	brge	.+50     	; 0x21ba <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2188:	f8 01       	movw	r30, r16
    218a:	61 91       	ld	r22, Z+
    218c:	8f 01       	movw	r16, r30
    218e:	8c 2f       	mov	r24, r28
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2196:	cf 5f       	subi	r28, 0xFF	; 255
    2198:	8c 2f       	mov	r24, r28
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	8e 15       	cp	r24, r14
    219e:	9f 05       	cpc	r25, r15
    21a0:	9c f3       	brlt	.-26     	; 0x2188 <mem_save_data+0x52>
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    21ae:	c8 2f       	mov	r28, r24
    21b0:	7c 01       	movw	r14, r24
    21b2:	f2 e0       	ldi	r31, 0x02	; 2
    21b4:	ef 0e       	add	r14, r31
    21b6:	f1 1c       	adc	r15, r1
    21b8:	e7 cf       	rjmp	.-50     	; 0x2188 <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	08 95       	ret

000021c6 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	59 f0       	breq	.+22     	; 0x21ec <mem_read_data+0x26>
    21d6:	28 f4       	brcc	.+10     	; 0x21e2 <mem_read_data+0x1c>
    21d8:	88 23       	and	r24, r24
    21da:	91 f0       	breq	.+36     	; 0x2200 <mem_read_data+0x3a>
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	51 f1       	breq	.+84     	; 0x2234 <mem_read_data+0x6e>
    21e0:	34 c0       	rjmp	.+104    	; 0x224a <mem_read_data+0x84>
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	51 f1       	breq	.+84     	; 0x223a <mem_read_data+0x74>
    21e6:	84 30       	cpi	r24, 0x04	; 4
    21e8:	21 f0       	breq	.+8      	; 0x21f2 <mem_read_data+0x2c>
    21ea:	2f c0       	rjmp	.+94     	; 0x224a <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    21ec:	84 e0       	ldi	r24, 0x04	; 4
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	26 c0       	rjmp	.+76     	; 0x223e <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    21f2:	0e 94 14 06 	call	0xc28	; 0xc28 <dark_menu_parameters_len>
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    21fa:	88 e0       	ldi	r24, 0x08	; 8
    21fc:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    2200:	22 e0       	ldi	r18, 0x02	; 2
    2202:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2208:	c8 2f       	mov	r28, r24
    220a:	7c 01       	movw	r14, r24
    220c:	e2 0e       	add	r14, r18
    220e:	f3 1e       	adc	r15, r19
    2210:	99 27       	eor	r25, r25
    2212:	8e 15       	cp	r24, r14
    2214:	9f 05       	cpc	r25, r15
    2216:	cc f4       	brge	.+50     	; 0x224a <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    2218:	8c 2f       	mov	r24, r28
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <EEPROM_read>
    2220:	f8 01       	movw	r30, r16
    2222:	81 93       	st	Z+, r24
    2224:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2226:	cf 5f       	subi	r28, 0xFF	; 255
    2228:	8c 2f       	mov	r24, r28
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	8e 15       	cp	r24, r14
    222e:	9f 05       	cpc	r25, r15
    2230:	9c f3       	brlt	.-26     	; 0x2218 <mem_read_data+0x52>
    2232:	0b c0       	rjmp	.+22     	; 0x224a <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 c0       	rjmp	.+4      	; 0x223e <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    223a:	86 e0       	ldi	r24, 0x06	; 6
    223c:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    223e:	c8 2f       	mov	r28, r24
    2240:	7c 01       	movw	r14, r24
    2242:	f2 e0       	ldi	r31, 0x02	; 2
    2244:	ef 0e       	add	r14, r31
    2246:	f1 1c       	adc	r15, r1
    2248:	e7 cf       	rjmp	.-50     	; 0x2218 <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	08 95       	ret

00002256 <servo_set_pwm_val>:
	#endif
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
    2256:	8f 92       	push	r8
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	cf 92       	push	r12
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	f8 2e       	mov	r15, r24
	int min = 2000 + (50 - dark_menu_get_value(MENU_CLOSE_SERVO_REGULATION))*10;
    2270:	85 e0       	ldi	r24, 0x05	; 5
    2272:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
    2276:	c2 e3       	ldi	r28, 0x32	; 50
    2278:	d0 e0       	ldi	r29, 0x00	; 0
    227a:	9e 01       	movw	r18, r28
    227c:	28 1b       	sub	r18, r24
    227e:	31 09       	sbc	r19, r1
    2280:	c9 01       	movw	r24, r18
    2282:	89 01       	movw	r16, r18
    2284:	00 0f       	add	r16, r16
    2286:	11 1f       	adc	r17, r17
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	08 0f       	add	r16, r24
    2296:	19 1f       	adc	r17, r25
    2298:	00 53       	subi	r16, 0x30	; 48
    229a:	18 4f       	sbci	r17, 0xF8	; 248
	int max = 1275 + (50 - dark_menu_get_value(MENU_OPEN_SERVO_REGULATION))*10;
    229c:	86 e0       	ldi	r24, 0x06	; 6
    229e:	0e 94 f4 06 	call	0xde8	; 0xde8 <dark_menu_get_value>
	uint16_t pwm = (uint16_t)((float)(max-min)*(float)value/(float)99 + (float)min);
    22a2:	c8 1b       	sub	r28, r24
    22a4:	d1 09       	sbc	r29, r1
    22a6:	be 01       	movw	r22, r28
    22a8:	66 0f       	add	r22, r22
    22aa:	77 1f       	adc	r23, r23
    22ac:	cc 0f       	add	r28, r28
    22ae:	dd 1f       	adc	r29, r29
    22b0:	cc 0f       	add	r28, r28
    22b2:	dd 1f       	adc	r29, r29
    22b4:	cc 0f       	add	r28, r28
    22b6:	dd 1f       	adc	r29, r29
    22b8:	6c 0f       	add	r22, r28
    22ba:	7d 1f       	adc	r23, r29
    22bc:	65 50       	subi	r22, 0x05	; 5
    22be:	7b 4f       	sbci	r23, 0xFB	; 251
    22c0:	60 1b       	sub	r22, r16
    22c2:	71 0b       	sbc	r23, r17
    22c4:	07 2e       	mov	r0, r23
    22c6:	00 0c       	add	r0, r0
    22c8:	88 0b       	sbc	r24, r24
    22ca:	99 0b       	sbc	r25, r25
    22cc:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatsisf>
    22d0:	4b 01       	movw	r8, r22
    22d2:	5c 01       	movw	r10, r24
    22d4:	6f 2d       	mov	r22, r15
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 99 19 	call	0x3332	; 0x3332 <__floatunsisf>
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	c5 01       	movw	r24, r10
    22e6:	b4 01       	movw	r22, r8
    22e8:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	46 ec       	ldi	r20, 0xC6	; 198
    22f2:	52 e4       	ldi	r21, 0x42	; 66
    22f4:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__divsf3>
    22f8:	6b 01       	movw	r12, r22
    22fa:	7c 01       	movw	r14, r24
    22fc:	b8 01       	movw	r22, r16
    22fe:	11 0f       	add	r17, r17
    2300:	88 0b       	sbc	r24, r24
    2302:	99 0b       	sbc	r25, r25
    2304:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatsisf>
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	c7 01       	movw	r24, r14
    230e:	b6 01       	movw	r22, r12
    2310:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    2314:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixunssfsi>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2318:	7b bd       	out	0x2b, r23	; 43
    231a:	6a bd       	out	0x2a, r22	; 42
	set_pwm(2000);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
	set_pwm(1520 - (value - 50)*5);*/
}
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	df 90       	pop	r13
    232a:	cf 90       	pop	r12
    232c:	bf 90       	pop	r11
    232e:	af 90       	pop	r10
    2330:	9f 90       	pop	r9
    2332:	8f 90       	pop	r8
    2334:	08 95       	ret

00002336 <servo_regulation>:

void servo_regulation(uint8_t value)
{
	servoD.state = SERVO_REGULATION;
    2336:	94 e0       	ldi	r25, 0x04	; 4
    2338:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <servoD>
	servo_set_pwm_val(value);
    233c:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
    2340:	08 95       	ret

00002342 <servo_error>:
}

void servo_error(uint8_t close)
{
	if (close)
    2342:	88 23       	and	r24, r24
    2344:	19 f0       	breq	.+6      	; 0x234c <servo_error+0xa>
		servo_set_pwm_val(0);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
	LED_SERVO_OFF;
    234c:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    234e:	86 e0       	ldi	r24, 0x06	; 6
    2350:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <servoD>
    2354:	08 95       	ret

00002356 <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    235a:	2f e1       	ldi	r18, 0x1F	; 31
    235c:	3e e4       	ldi	r19, 0x4E	; 78
    235e:	37 bd       	out	0x27, r19	; 39
    2360:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    2362:	81 b3       	in	r24, 0x11	; 17
    2364:	80 63       	ori	r24, 0x30	; 48
    2366:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    2368:	19 bc       	out	0x29, r1	; 41
    236a:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    236c:	1b bc       	out	0x2b, r1	; 43
    236e:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    2370:	8f b5       	in	r24, 0x2f	; 47
    2372:	82 60       	ori	r24, 0x02	; 2
    2374:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    2376:	8e b5       	in	r24, 0x2e	; 46
    2378:	88 61       	ori	r24, 0x18	; 24
    237a:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    237c:	8f b5       	in	r24, 0x2f	; 47
    237e:	80 68       	ori	r24, 0x80	; 128
    2380:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    2382:	8e b5       	in	r24, 0x2e	; 46
    2384:	82 60       	ori	r24, 0x02	; 2
    2386:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2388:	3b bd       	out	0x2b, r19	; 43
    238a:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    238c:	96 98       	cbi	0x12, 6	; 18
	#endif
	servo_set_pwm_val((uint16_t)0);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
	servoD.state = SERVO_CLOSE;
    2394:	c9 e8       	ldi	r28, 0x89	; 137
    2396:	d4 e0       	ldi	r29, 0x04	; 4
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	88 83       	st	Y, r24
	servoD.value = 0;
    239c:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    239e:	8d e8       	ldi	r24, 0x8D	; 141
    23a0:	94 e0       	ldi	r25, 0x04	; 4
    23a2:	0e 94 67 17 	call	0x2ece	; 0x2ece <evTime_init>
	servoD.try_cnt = 0;
    23a6:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    23a8:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <try_count>
	debug_msg("SERVO: init\n");
    23ac:	84 e9       	ldi	r24, 0x94	; 148
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	9f 93       	push	r25
    23b2:	8f 93       	push	r24
    23b4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    23c2:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <servoD>
    23c6:	92 50       	subi	r25, 0x02	; 2
    23c8:	21 e0       	ldi	r18, 0x01	; 1
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	92 30       	cpi	r25, 0x02	; 2
    23ce:	10 f0       	brcs	.+4      	; 0x23d4 <servo_is_open+0x12>
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
}
    23d4:	c9 01       	movw	r24, r18
    23d6:	08 95       	ret

000023d8 <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    23d8:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <servoD>
    23dc:	91 30       	cpi	r25, 0x01	; 1
    23de:	a1 f4       	brne	.+40     	; 0x2408 <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    23e0:	e9 e8       	ldi	r30, 0x89	; 137
    23e2:	f4 e0       	ldi	r31, 0x04	; 4
    23e4:	93 e0       	ldi	r25, 0x03	; 3
    23e6:	90 83       	st	Z, r25
		servoD.value = value;
    23e8:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    23ea:	1f 92       	push	r1
    23ec:	8f 93       	push	r24
    23ee:	81 ea       	ldi	r24, 0xA1	; 161
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	9f 93       	push	r25
    23f4:	8f 93       	push	r24
    23f6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
}
    240c:	08 95       	ret

0000240e <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    240e:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <servoD>
    2412:	9f ef       	ldi	r25, 0xFF	; 255
    2414:	98 0f       	add	r25, r24
    2416:	92 30       	cpi	r25, 0x02	; 2
    2418:	28 f4       	brcc	.+10     	; 0x2424 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    241a:	e9 e8       	ldi	r30, 0x89	; 137
    241c:	f4 e0       	ldi	r31, 0x04	; 4
    241e:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    2420:	85 e0       	ldi	r24, 0x05	; 5
    2422:	80 83       	st	Z, r24
    2424:	08 95       	ret

00002426 <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    2426:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <servoD+0x9>
}
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	08 95       	ret

0000242e <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    242e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <servo_is_open>
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	d1 f0       	breq	.+52     	; 0x246a <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    243c:	e9 e8       	ldi	r30, 0x89	; 137
    243e:	f4 e0       	ldi	r31, 0x04	; 4
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 83       	st	Z, r24
		servoD.value = 0;
    2444:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    2446:	1f 92       	push	r1
    2448:	1f 92       	push	r1
    244a:	88 eb       	ldi	r24, 0xB8	; 184
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	9f 93       	push	r25
    2450:	8f 93       	push	r24
    2452:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    2456:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    2458:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
		return 1;
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    246a:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <servoD>
    246e:	25 30       	cpi	r18, 0x05	; 5
    2470:	31 f4       	brne	.+12     	; 0x247e <servo_close+0x50>
	{
		servo_exit_try();
    2472:	0e 94 40 12 	call	0x2480	; 0x2480 <servo_exit_try>
		error_servo_timer();
    2476:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
		return 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    247e:	08 95       	ret

00002480 <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    2480:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <servoD+0x1>
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	29 f4       	brne	.+10     	; 0x2492 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    2488:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <servoD>
		servo_close();
    248c:	0e 94 17 12 	call	0x242e	; 0x242e <servo_close>
    2490:	09 c0       	rjmp	.+18     	; 0x24a4 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    2492:	81 30       	cpi	r24, 0x01	; 1
    2494:	71 f4       	brne	.+28     	; 0x24b2 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    2496:	e9 e8       	ldi	r30, 0x89	; 137
    2498:	f4 e0       	ldi	r31, 0x04	; 4
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	80 83       	st	Z, r24
		servo_open(servoD.value);
    249e:	83 81       	ldd	r24, Z+3	; 0x03
    24a0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <servo_open>
	}
	else return;
	try_count = 0;
    24a4:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <try_count>
	servoD.try_cnt++;
    24a8:	e9 e8       	ldi	r30, 0x89	; 137
    24aa:	f4 e0       	ldi	r31, 0x04	; 4
    24ac:	81 85       	ldd	r24, Z+9	; 0x09
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	81 87       	std	Z+9, r24	; 0x09
    24b2:	08 95       	ret

000024b4 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    24b4:	cf 93       	push	r28
    24b6:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    24b8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <servoD>
    24bc:	9f ef       	ldi	r25, 0xFF	; 255
    24be:	98 0f       	add	r25, r24
    24c0:	93 30       	cpi	r25, 0x03	; 3
    24c2:	d0 f4       	brcc	.+52     	; 0x24f8 <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    24c4:	e9 e8       	ldi	r30, 0x89	; 137
    24c6:	f4 e0       	ldi	r31, 0x04	; 4
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	80 83       	st	Z, r24
		servoD.value = value;
    24cc:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    24ce:	8c 2f       	mov	r24, r28
    24d0:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    24d4:	1f 92       	push	r1
    24d6:	cf 93       	push	r28
    24d8:	89 ec       	ldi	r24, 0xC9	; 201
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	9f 93       	push	r25
    24de:	8f 93       	push	r24
    24e0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    24e4:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    24e6:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
		return 1;
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    24f8:	85 30       	cpi	r24, 0x05	; 5
    24fa:	39 f4       	brne	.+14     	; 0x250a <servo_open+0x56>
	{
		servo_exit_try();
    24fc:	0e 94 40 12 	call	0x2480	; 0x2480 <servo_exit_try>
		error_servo_timer();
    2500:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
		return 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 c0       	rjmp	.+4      	; 0x250e <servo_open+0x5a>
	}
	else return 0;
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
}
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2512:	ab 01       	movw	r20, r22
    2514:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    2516:	8d e8       	ldi	r24, 0x8D	; 141
    2518:	94 e0       	ldi	r25, 0x04	; 4
    251a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
    251e:	08 95       	ret

00002520 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    2526:	4b e4       	ldi	r20, 0x4B	; 75
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	8a ed       	ldi	r24, 0xDA	; 218
    2530:	92 e0       	ldi	r25, 0x02	; 2
    2532:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <evTime_process_period>
    2536:	89 2b       	or	r24, r25
    2538:	09 f4       	brne	.+2      	; 0x253c <servo_process+0x1c>
    253a:	b8 c0       	rjmp	.+368    	; 0x26ac <servo_process+0x18c>
	{
		switch(servoD.state)
    253c:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <servoD>
    2540:	85 30       	cpi	r24, 0x05	; 5
    2542:	a1 f0       	breq	.+40     	; 0x256c <servo_process+0x4c>
    2544:	30 f4       	brcc	.+12     	; 0x2552 <servo_process+0x32>
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	59 f0       	breq	.+22     	; 0x2560 <servo_process+0x40>
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	09 f4       	brne	.+2      	; 0x2550 <servo_process+0x30>
    254e:	63 c0       	rjmp	.+198    	; 0x2616 <servo_process+0xf6>
    2550:	9d c0       	rjmp	.+314    	; 0x268c <servo_process+0x16c>
    2552:	86 30       	cpi	r24, 0x06	; 6
    2554:	09 f4       	brne	.+2      	; 0x2558 <servo_process+0x38>
    2556:	79 c0       	rjmp	.+242    	; 0x264a <servo_process+0x12a>
    2558:	87 30       	cpi	r24, 0x07	; 7
    255a:	09 f4       	brne	.+2      	; 0x255e <servo_process+0x3e>
    255c:	93 c0       	rjmp	.+294    	; 0x2684 <servo_process+0x164>
    255e:	96 c0       	rjmp	.+300    	; 0x268c <servo_process+0x16c>
		{
			case SERVO_OPEN:
			servoD.value = value;
    2560:	c0 93 8c 04 	sts	0x048C, r28	; 0x80048c <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    2564:	8c 2f       	mov	r24, r28
    2566:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
			break;
    256a:	90 c0       	rjmp	.+288    	; 0x268c <servo_process+0x16c>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    256c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <try_count>
    2570:	81 11       	cpse	r24, r1
    2572:	13 c0       	rjmp	.+38     	; 0x259a <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	85 ed       	ldi	r24, 0xD5	; 213
    257e:	92 e0       	ldi	r25, 0x02	; 2
    2580:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
		try_count++;
    2584:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <try_count>
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    258e:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <servoD+0x3>
    2592:	89 0f       	add	r24, r25
    2594:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
    2598:	2a c0       	rjmp	.+84     	; 0x25ee <servo_process+0xce>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    259a:	81 50       	subi	r24, 0x01	; 1
    259c:	89 30       	cpi	r24, 0x09	; 9
    259e:	d8 f4       	brcc	.+54     	; 0x25d6 <servo_process+0xb6>
	{
		if (evTime_check(&timeout) == 1)
    25a0:	85 ed       	ldi	r24, 0xD5	; 213
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	09 f5       	brne	.+66     	; 0x25ee <servo_process+0xce>
		{
			evTime_start(&timeout, 250);
    25ac:	4a ef       	ldi	r20, 0xFA	; 250
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	85 ed       	ldi	r24, 0xD5	; 213
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
			try_count++;
    25bc:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <try_count>
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <try_count>
			servo_set_pwm_val(servoD.value + try_count*4);
    25c6:	88 0f       	add	r24, r24
    25c8:	88 0f       	add	r24, r24
    25ca:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <servoD+0x3>
    25ce:	89 0f       	add	r24, r25
    25d0:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
    25d4:	0c c0       	rjmp	.+24     	; 0x25ee <servo_process+0xce>
		}
	}
	else
	{
		try_count = 0;
    25d6:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <try_count>
		servo_set_pwm_val(servoD.value);
    25da:	c9 e8       	ldi	r28, 0x89	; 137
    25dc:	d4 e0       	ldi	r29, 0x04	; 4
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	0e 94 2b 11 	call	0x2256	; 0x2256 <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	88 83       	st	Y, r24
		servoD.try_cnt++;
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	8f 5f       	subi	r24, 0xFF	; 255
    25ec:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    25ee:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <servoD+0x3>
    25f2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <try_count>
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	82 0f       	add	r24, r18
    25fa:	91 1d       	adc	r25, r1
    25fc:	9f 93       	push	r25
    25fe:	8f 93       	push	r24
    2600:	8b ed       	ldi	r24, 0xDB	; 219
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	9f 93       	push	r25
    2606:	8f 93       	push	r24
    2608:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	3b c0       	rjmp	.+118    	; 0x268c <servo_process+0x16c>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2616:	80 ed       	ldi	r24, 0xD0	; 208
    2618:	92 e0       	ldi	r25, 0x02	; 2
    261a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <evTime_is_stated>
    261e:	89 2b       	or	r24, r25
    2620:	59 f0       	breq	.+22     	; 0x2638 <servo_process+0x118>
	{
		if (evTime_check(&timeout) == 1)
    2622:	80 ed       	ldi	r24, 0xD0	; 208
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	79 f5       	brne	.+94     	; 0x268c <servo_process+0x16c>
		{
			servoD.state = SERVO_OPEN;
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <servoD>
			LED_SERVO_ON;
    2634:	96 9a       	sbi	0x12, 6	; 18
    2636:	2a c0       	rjmp	.+84     	; 0x268c <servo_process+0x16c>
		}
	}
	else
	{
		evTime_start(&timeout, 3000);
    2638:	48 eb       	ldi	r20, 0xB8	; 184
    263a:	5b e0       	ldi	r21, 0x0B	; 11
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	80 ed       	ldi	r24, 0xD0	; 208
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
    2648:	21 c0       	rjmp	.+66     	; 0x268c <servo_process+0x16c>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    264a:	8b ec       	ldi	r24, 0xCB	; 203
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <evTime_is_stated>
    2652:	89 2b       	or	r24, r25
    2654:	71 f0       	breq	.+28     	; 0x2672 <servo_process+0x152>
	{
		if (evTime_check(&timeout) == 1)
    2656:	8b ec       	ldi	r24, 0xCB	; 203
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	a9 f4       	brne	.+42     	; 0x268c <servo_process+0x16c>
		{
			servoD.state = SERVO_ERROR;
    2662:	87 e0       	ldi	r24, 0x07	; 7
    2664:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2668:	8f e1       	ldi	r24, 0x1F	; 31
    266a:	9e e4       	ldi	r25, 0x4E	; 78
    266c:	9b bd       	out	0x2b, r25	; 43
    266e:	8a bd       	out	0x2a, r24	; 42
    2670:	0d c0       	rjmp	.+26     	; 0x268c <servo_process+0x16c>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    2672:	4c ea       	ldi	r20, 0xAC	; 172
    2674:	5d e0       	ldi	r21, 0x0D	; 13
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	8b ec       	ldi	r24, 0xCB	; 203
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
    2682:	04 c0       	rjmp	.+8      	; 0x268c <servo_process+0x16c>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2684:	8f e1       	ldi	r24, 0x1F	; 31
    2686:	9e e4       	ldi	r25, 0x4E	; 78
    2688:	9b bd       	out	0x2b, r25	; 43
    268a:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    268c:	8d e8       	ldi	r24, 0x8D	; 141
    268e:	94 e0       	ldi	r25, 0x04	; 4
    2690:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	51 f4       	brne	.+20     	; 0x26ac <servo_process+0x18c>
		{
			servoD.try_cnt = 0;
    2698:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    269c:	89 ee       	ldi	r24, 0xE9	; 233
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	9f 93       	push	r25
    26a2:	8f 93       	push	r24
    26a4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
		}
	}
}
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    26b2:	e5 e2       	ldi	r30, 0x25	; 37
    26b4:	f4 e0       	ldi	r31, 0x04	; 4
    26b6:	16 86       	std	Z+14, r1	; 0x0e
    26b8:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    26ba:	12 86       	std	Z+10, r1	; 0x0a
    26bc:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    26be:	14 86       	std	Z+12, r1	; 0x0c
    26c0:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    26c2:	e8 ef       	ldi	r30, 0xF8	; 248
    26c4:	f3 e0       	ldi	r31, 0x03	; 3
    26c6:	16 86       	std	Z+14, r1	; 0x0e
    26c8:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    26ca:	12 86       	std	Z+10, r1	; 0x0a
    26cc:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    26ce:	14 86       	std	Z+12, r1	; 0x0c
    26d0:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    26d2:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <button3+0xc>
    26d6:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <button3+0xb>
	
	button5.timer_callback = 0;
    26da:	e6 ed       	ldi	r30, 0xD6	; 214
    26dc:	f3 e0       	ldi	r31, 0x03	; 3
    26de:	16 86       	std	Z+14, r1	; 0x0e
    26e0:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    26e2:	14 86       	std	Z+12, r1	; 0x0c
    26e4:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    26e6:	12 86       	std	Z+10, r1	; 0x0a
    26e8:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    26ea:	e6 e1       	ldi	r30, 0x16	; 22
    26ec:	f4 e0       	ldi	r31, 0x04	; 4
    26ee:	16 86       	std	Z+14, r1	; 0x0e
    26f0:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    26f2:	14 86       	std	Z+12, r1	; 0x0c
    26f4:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    26f6:	12 86       	std	Z+10, r1	; 0x0a
    26f8:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    26fa:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <button7+0xc>
    26fe:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <button7+0xb>
	
	button8.fall_callback = 0;
    2702:	e3 e4       	ldi	r30, 0x43	; 67
    2704:	f4 e0       	ldi	r31, 0x04	; 4
    2706:	14 86       	std	Z+12, r1	; 0x0c
    2708:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    270a:	16 86       	std	Z+14, r1	; 0x0e
    270c:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    270e:	12 86       	std	Z+10, r1	; 0x0a
    2710:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2712:	e8 eb       	ldi	r30, 0xB8	; 184
    2714:	f3 e0       	ldi	r31, 0x03	; 3
    2716:	14 86       	std	Z+12, r1	; 0x0c
    2718:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    271a:	16 86       	std	Z+14, r1	; 0x0e
    271c:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    271e:	12 86       	std	Z+10, r1	; 0x0a
    2720:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2722:	e7 ec       	ldi	r30, 0xC7	; 199
    2724:	f3 e0       	ldi	r31, 0x03	; 3
    2726:	14 86       	std	Z+12, r1	; 0x0c
    2728:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    272a:	16 86       	std	Z+14, r1	; 0x0e
    272c:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    272e:	12 86       	std	Z+10, r1	; 0x0a
    2730:	11 86       	std	Z+9, r1	; 0x09
    2732:	08 95       	ret

00002734 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2734:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	49 f0       	breq	.+18     	; 0x274e <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    273c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2740:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2744:	98 60       	ori	r25, 0x08	; 8
    2746:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    274a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    274e:	08 95       	ret

00002750 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2750:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	49 f0       	breq	.+18     	; 0x276a <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2758:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    275c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2760:	80 68       	ori	r24, 0x80	; 128
    2762:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2766:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    276a:	08 95       	ret

0000276c <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    276c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2770:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2774:	92 60       	ori	r25, 0x02	; 2
    2776:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    277a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    277e:	08 95       	ret

00002780 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2780:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2784:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2788:	99 7f       	andi	r25, 0xF9	; 249
    278a:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    278e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	counter_very_fast_motor_sub = 0;
    2792:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <counter_very_fast_motor_sub>
    2796:	08 95       	ret

00002798 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2798:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    279c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    27a0:	80 62       	ori	r24, 0x20	; 32
    27a2:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    27a6:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    27aa:	08 95       	ret

000027ac <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    27ac:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    27b0:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    27b4:	8f 79       	andi	r24, 0x9F	; 159
    27b6:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    27ba:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	counter_very_fast_motor_sub = 0;
    27be:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <counter_very_fast_motor_sub>
    27c2:	08 95       	ret

000027c4 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    27c4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    27c8:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    27cc:	90 62       	ori	r25, 0x20	; 32
    27ce:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    27d2:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    27d6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    27da:	8b 30       	cpi	r24, 0x0B	; 11
    27dc:	18 f0       	brcs	.+6      	; 0x27e4 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    27e4:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    27ee:	61 e0       	ldi	r22, 0x01	; 1
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    27f6:	08 95       	ret

000027f8 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    27f8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    27fc:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2800:	90 62       	ori	r25, 0x20	; 32
    2802:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2806:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	if (motor_value > 10)
    280a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <motor_value>
    280e:	8b 30       	cpi	r24, 0x0B	; 11
    2810:	18 f0       	brcs	.+6      	; 0x2818 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2812:	81 50       	subi	r24, 0x01	; 1
    2814:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2818:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	0e 94 7f 09 	call	0x12fe	; 0x12fe <disp_get_state>
    2828:	02 97       	sbiw	r24, 0x02	; 2
    282a:	29 f4       	brne	.+10     	; 0x2836 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    2834:	04 c0       	rjmp	.+8      	; 0x283e <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
	state_measure_volt++;
    283e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <state_measure_volt>
	if (state_measure_volt == 2)
    2848:	82 30       	cpi	r24, 0x02	; 2
    284a:	19 f4       	brne	.+6      	; 0x2852 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    284c:	66 e0       	ldi	r22, 0x06	; 6
    284e:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    2852:	08 95       	ret

00002854 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2854:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2858:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    285c:	90 62       	ori	r25, 0x20	; 32
    285e:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2862:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	if (motor_value < 99)
    2866:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <motor_value>
    286a:	83 36       	cpi	r24, 0x63	; 99
    286c:	18 f4       	brcc	.+6      	; 0x2874 <button_motor_add_fall_cb+0x20>
		motor_value++;
    286e:	8f 5f       	subi	r24, 0xFF	; 255
    2870:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2874:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	0e 94 7f 09 	call	0x12fe	; 0x12fe <disp_get_state>
    2884:	02 97       	sbiw	r24, 0x02	; 2
    2886:	29 f4       	brne	.+10     	; 0x2892 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    2890:	04 c0       	rjmp	.+8      	; 0x289a <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
	state_measure_volt++;
    289a:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    289e:	8f 5f       	subi	r24, 0xFF	; 255
    28a0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <state_measure_volt>
	if (state_measure_volt == 2)
    28a4:	82 30       	cpi	r24, 0x02	; 2
    28a6:	19 f4       	brne	.+6      	; 0x28ae <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28a8:	66 e0       	ldi	r22, 0x06	; 6
    28aa:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    28ae:	08 95       	ret

000028b0 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    28b0:	0e 94 8f 09 	call	0x131e	; 0x131e <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    28b4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    28b8:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    28bc:	97 7e       	andi	r25, 0xE7	; 231
    28be:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    28c2:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	counter_very_fast_motor_sub = 0;
    28c6:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    28ca:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    28ce:	88 23       	and	r24, r24
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    28d2:	81 50       	subi	r24, 0x01	; 1
    28d4:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 7f 09 	call	0x12fe	; 0x12fe <disp_get_state>
    28de:	02 97       	sbiw	r24, 0x02	; 2
    28e0:	29 f4       	brne	.+10     	; 0x28ec <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    28ea:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    28f4:	08 95       	ret

000028f6 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    28f6:	0e 94 8f 09 	call	0x131e	; 0x131e <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    28fa:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    28fe:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2902:	8f 77       	andi	r24, 0x7F	; 127
    2904:	9e 7f       	andi	r25, 0xFE	; 254
    2906:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    290a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	counter_very_fast_motor_sub = 0;
    290e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2912:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <state_measure_volt>
    2916:	88 23       	and	r24, r24
    2918:	19 f0       	breq	.+6      	; 0x2920 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    291a:	81 50       	subi	r24, 0x01	; 1
    291c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0e 94 7f 09 	call	0x12fe	; 0x12fe <disp_get_state>
    2926:	02 97       	sbiw	r24, 0x02	; 2
    2928:	29 f4       	brne	.+10     	; 0x2934 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    2932:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    293c:	08 95       	ret

0000293e <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    293e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2942:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2946:	90 62       	ori	r25, 0x20	; 32
    2948:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    294c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2950:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    2954:	83 36       	cpi	r24, 0x63	; 99
    2956:	28 f4       	brcc	.+10     	; 0x2962 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    2958:	8f 5f       	subi	r24, 0xFF	; 255
    295a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <servo_vibro_value>
		error_servo_timer();
    295e:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2962:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
    2974:	08 95       	ret

00002976 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2976:	e5 e9       	ldi	r30, 0x95	; 149
    2978:	f4 e0       	ldi	r31, 0x04	; 4
    297a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <motor_value>
    297e:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2980:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    2984:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2986:	bf 01       	movw	r22, r30
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	0e 94 9b 10 	call	0x2136	; 0x2136 <mem_save_data>
    298e:	08 95       	ret

00002990 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2990:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2994:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2998:	90 62       	ori	r25, 0x20	; 32
    299a:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    299e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	if (motor_value < 10)
    29a2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <motor_value>
    29a6:	8a 30       	cpi	r24, 0x0A	; 10
    29a8:	38 f4       	brcc	.+14     	; 0x29b8 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    29aa:	8a e0       	ldi	r24, 0x0A	; 10
    29ac:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    29b0:	6a e0       	ldi	r22, 0x0A	; 10
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	}
	sys_save_display();
    29b8:	0e 94 bb 14 	call	0x2976	; 0x2976 <sys_save_display>
	if(!dcmotor_is_on())
    29bc:	0e 94 18 07 	call	0xe30	; 0xe30 <dcmotor_is_on>
    29c0:	89 2b       	or	r24, r25
    29c2:	39 f4       	brne	.+14     	; 0x29d2 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    29c4:	0e 94 3b 07 	call	0xe76	; 0xe76 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    29c8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    29cc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <servo_delayed_open>
    29d0:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    29d2:	0e 94 23 07 	call	0xe46	; 0xe46 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    29d6:	0e 94 17 12 	call	0x242e	; 0x242e <servo_close>
    29da:	08 95       	ret

000029dc <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    29dc:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    29e0:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    29e4:	90 62       	ori	r25, 0x20	; 32
    29e6:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    29ea:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
	if (servo_vibro_value < 10)
    29ee:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    29f2:	8a 30       	cpi	r24, 0x0A	; 10
    29f4:	38 f4       	brcc	.+14     	; 0x2a04 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    29f6:	8a e0       	ldi	r24, 0x0A	; 10
    29f8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    29fc:	6a e0       	ldi	r22, 0x0A	; 10
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2a04:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <servo_is_open>
    2a08:	89 2b       	or	r24, r25
    2a0a:	19 f0       	breq	.+6      	; 0x2a12 <button_on_off_pwm+0x36>
    2a0c:	0e 94 17 12 	call	0x242e	; 0x242e <servo_close>
    2a10:	08 95       	ret
	else servo_open(servo_vibro_value);
    2a12:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    2a16:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <servo_open>
    2a1a:	08 95       	ret

00002a1c <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2a1c:	87 eb       	ldi	r24, 0xB7	; 183
    2a1e:	95 e1       	ldi	r25, 0x15	; 21
    2a20:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <button4+0xa>
    2a24:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
	disp_off_segments();
    2a30:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2a34:	63 e9       	ldi	r22, 0x93	; 147
    2a36:	74 e0       	ldi	r23, 0x04	; 4
    2a38:	83 e0       	ldi	r24, 0x03	; 3
    2a3a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2a3e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <mem_last_save+0x1>
    2a42:	96 ef       	ldi	r25, 0xF6	; 246
    2a44:	98 0f       	add	r25, r24
    2a46:	9a 35       	cpi	r25, 0x5A	; 90
    2a48:	10 f4       	brcc	.+4      	; 0x2a4e <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2a4a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2a4e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <mem_last_save>
    2a52:	96 ef       	ldi	r25, 0xF6	; 246
    2a54:	98 0f       	add	r25, r24
    2a56:	9a 35       	cpi	r25, 0x5A	; 90
    2a58:	10 f4       	brcc	.+4      	; 0x2a5e <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2a5a:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <motor_value>
    2a5e:	08 95       	ret

00002a60 <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2a60:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2a64:	42 e0       	ldi	r20, 0x02	; 2
    2a66:	68 ee       	ldi	r22, 0xE8	; 232
    2a68:	73 e0       	ldi	r23, 0x03	; 3
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 38 0b 	call	0x1670	; 0x1670 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2a72:	0e 94 fe 06 	call	0xdfc	; 0xdfc <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	0e 94 ab 11 	call	0x2356	; 0x2356 <servo_init>
	#endif
	error_init();
    2a7c:	0e 94 07 0c 	call	0x180e	; 0x180e <error_init>
	init_measure();
    2a80:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <init_measure>
	init_buzzer();
    2a84:	0e 94 5b 05 	call	0xab6	; 0xab6 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2a90:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2a94:	e5 e2       	ldi	r30, 0x25	; 37
    2a96:	f4 e0       	ldi	r31, 0x04	; 4
    2a98:	8a e9       	ldi	r24, 0x9A	; 154
    2a9a:	93 e1       	ldi	r25, 0x13	; 19
    2a9c:	96 87       	std	Z+14, r25	; 0x0e
    2a9e:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2aa0:	8c ef       	ldi	r24, 0xFC	; 252
    2aa2:	93 e1       	ldi	r25, 0x13	; 19
    2aa4:	94 87       	std	Z+12, r25	; 0x0c
    2aa6:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2aa8:	88 e5       	ldi	r24, 0x58	; 88
    2aaa:	94 e1       	ldi	r25, 0x14	; 20
    2aac:	92 87       	std	Z+10, r25	; 0x0a
    2aae:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2ab0:	e8 ef       	ldi	r30, 0xF8	; 248
    2ab2:	f3 e0       	ldi	r31, 0x03	; 3
    2ab4:	88 ea       	ldi	r24, 0xA8	; 168
    2ab6:	93 e1       	ldi	r25, 0x13	; 19
    2ab8:	96 87       	std	Z+14, r25	; 0x0e
    2aba:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2abc:	8a e2       	ldi	r24, 0x2A	; 42
    2abe:	94 e1       	ldi	r25, 0x14	; 20
    2ac0:	94 87       	std	Z+12, r25	; 0x0c
    2ac2:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2ac4:	8b e7       	ldi	r24, 0x7B	; 123
    2ac6:	94 e1       	ldi	r25, 0x14	; 20
    2ac8:	92 87       	std	Z+10, r25	; 0x0a
    2aca:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	94 e1       	ldi	r25, 0x14	; 20
    2ad0:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <button3+0xc>
    2ad4:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2ad8:	e6 ed       	ldi	r30, 0xD6	; 214
    2ada:	f3 e0       	ldi	r31, 0x03	; 3
    2adc:	86 eb       	ldi	r24, 0xB6	; 182
    2ade:	93 e1       	ldi	r25, 0x13	; 19
    2ae0:	96 87       	std	Z+14, r25	; 0x0e
    2ae2:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2ae4:	80 ec       	ldi	r24, 0xC0	; 192
    2ae6:	93 e1       	ldi	r25, 0x13	; 19
    2ae8:	92 87       	std	Z+10, r25	; 0x0a
    2aea:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2aec:	82 ee       	ldi	r24, 0xE2	; 226
    2aee:	93 e1       	ldi	r25, 0x13	; 19
    2af0:	94 87       	std	Z+12, r25	; 0x0c
    2af2:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2af4:	e6 e1       	ldi	r30, 0x16	; 22
    2af6:	f4 e0       	ldi	r31, 0x04	; 4
    2af8:	8c ec       	ldi	r24, 0xCC	; 204
    2afa:	93 e1       	ldi	r25, 0x13	; 19
    2afc:	96 87       	std	Z+14, r25	; 0x0e
    2afe:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2b00:	86 ed       	ldi	r24, 0xD6	; 214
    2b02:	93 e1       	ldi	r25, 0x13	; 19
    2b04:	92 87       	std	Z+10, r25	; 0x0a
    2b06:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2b08:	8f e9       	ldi	r24, 0x9F	; 159
    2b0a:	94 e1       	ldi	r25, 0x14	; 20
    2b0c:	94 87       	std	Z+12, r25	; 0x0c
    2b0e:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2b10:	8e ee       	ldi	r24, 0xEE	; 238
    2b12:	94 e1       	ldi	r25, 0x14	; 20
    2b14:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <button7+0xc>
    2b18:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2b1c:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2b26:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
    2b30:	08 95       	ret

00002b32 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2b32:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <state_measure_volt>
	dcmotorpwm_deinit();
    2b36:	0e 94 12 07 	call	0xe24	; 0xe24 <dcmotorpwm_deinit>
	off_button();
    2b3a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <off_button>
	error_deinit();
    2b3e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	#if DARK_MENU
	init_menu();
    2b42:	0e 94 a7 06 	call	0xd4e	; 0xd4e <init_menu>
	#endif /* DARK_MENU */
	servo_close();
    2b46:	0e 94 17 12 	call	0x242e	; 0x242e <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2b4a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <system_events+0x1>
    2b4e:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	0e 94 a0 09 	call	0x1340	; 0x1340 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2b5a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2b5e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2b62:	8e 7f       	andi	r24, 0xFE	; 254
    2b64:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2b68:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    2b6c:	08 95       	ret

00002b6e <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2b6e:	0e 94 bb 14 	call	0x2976	; 0x2976 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2b72:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2b76:	80 ff       	sbrs	r24, 0
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <button4_toggle_system+0x12>
	{
		off_system();
    2b7a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <off_system>
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2b80:	0e 94 30 15 	call	0x2a60	; 0x2a60 <on_system>
	}
	ON_BUZZ_SIGNAL;
    2b84:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2b88:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2b8c:	90 62       	ori	r25, 0x20	; 32
    2b8e:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2b92:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
    2b96:	08 95       	ret

00002b98 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2b98:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    2b9c:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    2ba0:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    2ba4:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    2ba8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <disp_fast_timer.2116>
    2bac:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <disp_fast_timer.2116+0x1>
    2bb0:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <disp_fast_timer.2116+0x2>
    2bb4:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <disp_fast_timer.2116+0x3>
    2bb8:	84 17       	cp	r24, r20
    2bba:	95 07       	cpc	r25, r21
    2bbc:	a6 07       	cpc	r26, r22
    2bbe:	b7 07       	cpc	r27, r23
    2bc0:	08 f0       	brcs	.+2      	; 0x2bc4 <disp_fast_process+0x2c>
    2bc2:	a4 c0       	rjmp	.+328    	; 0x2d0c <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2bc4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2bc8:	85 ff       	sbrs	r24, 5
    2bca:	21 c0       	rjmp	.+66     	; 0x2c0e <disp_fast_process+0x76>
    2bcc:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2bd0:	63 36       	cpi	r22, 0x63	; 99
    2bd2:	e8 f4       	brcc	.+58     	; 0x2c0e <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2bd4:	6b 30       	cpi	r22, 0x0B	; 11
    2bd6:	40 f0       	brcs	.+16     	; 0x2be8 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2bd8:	6f 5f       	subi	r22, 0xFF	; 255
    2bda:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <servo_vibro_value>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
				error_servo_timer();
    2be4:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2be8:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <counter_very_fast_servo_add>
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2bf2:	8f 30       	cpi	r24, 0x0F	; 15
    2bf4:	60 f0       	brcs	.+24     	; 0x2c0e <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2bf6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2bfa:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2bfe:	8f 7d       	andi	r24, 0xDF	; 223
    2c00:	80 64       	ori	r24, 0x40	; 64
    2c02:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2c06:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
				counter_very_fast_servo_add = 0;
    2c0a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2c0e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2c12:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2c16:	91 ff       	sbrs	r25, 1
    2c18:	21 c0       	rjmp	.+66     	; 0x2c5c <disp_fast_process+0xc4>
    2c1a:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2c1e:	66 23       	and	r22, r22
    2c20:	e9 f0       	breq	.+58     	; 0x2c5c <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2c22:	6b 30       	cpi	r22, 0x0B	; 11
    2c24:	40 f0       	brcs	.+16     	; 0x2c36 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2c26:	61 50       	subi	r22, 0x01	; 1
    2c28:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <servo_vibro_value>
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
				error_servo_timer();
    2c32:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2c36:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <counter_very_fast_servo_sub>
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2c40:	8f 30       	cpi	r24, 0x0F	; 15
    2c42:	60 f0       	brcs	.+24     	; 0x2c5c <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2c44:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2c48:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2c4c:	9d 7f       	andi	r25, 0xFD	; 253
    2c4e:	94 60       	ori	r25, 0x04	; 4
    2c50:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2c54:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
				counter_very_fast_servo_sub = 0;
    2c58:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2c5c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2c60:	87 ff       	sbrs	r24, 7
    2c62:	1d c0       	rjmp	.+58     	; 0x2c9e <disp_fast_process+0x106>
    2c64:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2c68:	63 36       	cpi	r22, 0x63	; 99
    2c6a:	c8 f4       	brcc	.+50     	; 0x2c9e <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2c6c:	6f 5f       	subi	r22, 0xFF	; 255
    2c6e:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <motor_value>
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
			counter_very_fast_motor_add++;
    2c78:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <counter_very_fast_motor_add>
    2c7c:	8f 5f       	subi	r24, 0xFF	; 255
    2c7e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2c82:	8f 30       	cpi	r24, 0x0F	; 15
    2c84:	60 f0       	brcs	.+24     	; 0x2c9e <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2c86:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2c8a:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2c8e:	8f 77       	andi	r24, 0x7F	; 127
    2c90:	91 60       	ori	r25, 0x01	; 1
    2c92:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2c96:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
				counter_very_fast_motor_add = 0;
    2c9a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2c9e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2ca2:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2ca6:	93 ff       	sbrs	r25, 3
    2ca8:	1d c0       	rjmp	.+58     	; 0x2ce4 <disp_fast_process+0x14c>
    2caa:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2cae:	6b 30       	cpi	r22, 0x0B	; 11
    2cb0:	c8 f0       	brcs	.+50     	; 0x2ce4 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2cb2:	61 50       	subi	r22, 0x01	; 1
    2cb4:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <motor_value>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
			counter_very_fast_motor_sub++;
    2cbe:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <counter_very_fast_motor_sub>
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2cc8:	8f 30       	cpi	r24, 0x0F	; 15
    2cca:	60 f0       	brcs	.+24     	; 0x2ce4 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2ccc:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2cd0:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2cd4:	97 7f       	andi	r25, 0xF7	; 247
    2cd6:	90 61       	ori	r25, 0x10	; 16
    2cd8:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <system_events+0x1>
    2cdc:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <system_events>
				counter_very_fast_motor_sub = 0;
    2ce0:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2ce4:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <disp_fast_timer.2116>
    2ce8:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <disp_fast_timer.2116+0x1>
    2cec:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <disp_fast_timer.2116+0x2>
    2cf0:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <disp_fast_timer.2116+0x3>
    2cf4:	80 5b       	subi	r24, 0xB0	; 176
    2cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf8:	af 4f       	sbci	r26, 0xFF	; 255
    2cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfc:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <disp_fast_timer.2116>
    2d00:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <disp_fast_timer.2116+0x1>
    2d04:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <disp_fast_timer.2116+0x2>
    2d08:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <disp_fast_timer.2116+0x3>
    2d0c:	08 95       	ret

00002d0e <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2d0e:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <mktime+0x2>
    2d12:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <mktime+0x3>
    2d16:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <mktime+0x4>
    2d1a:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <mktime+0x5>
    2d1e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <disp_very_fast_timer>
    2d22:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <disp_very_fast_timer+0x1>
    2d26:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <disp_very_fast_timer+0x2>
    2d2a:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <disp_very_fast_timer+0x3>
    2d2e:	84 17       	cp	r24, r20
    2d30:	95 07       	cpc	r25, r21
    2d32:	a6 07       	cpc	r26, r22
    2d34:	b7 07       	cpc	r27, r23
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <disp_very_fast_process+0x2c>
    2d38:	57 c0       	rjmp	.+174    	; 0x2de8 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2d3a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <servo_vibro_value>
    2d3e:	83 36       	cpi	r24, 0x63	; 99
    2d40:	70 f4       	brcc	.+28     	; 0x2d5e <disp_very_fast_process+0x50>
    2d42:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2d46:	86 ff       	sbrs	r24, 6
    2d48:	0a c0       	rjmp	.+20     	; 0x2d5e <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2d4a:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d4e:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2d52:	6f 5f       	subi	r22, 0xFF	; 255
    2d54:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <servo_vibro_value>
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2d5e:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <servo_vibro_value>
    2d62:	6b 30       	cpi	r22, 0x0B	; 11
    2d64:	70 f0       	brcs	.+28     	; 0x2d82 <disp_very_fast_process+0x74>
    2d66:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2d6a:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2d6e:	92 ff       	sbrs	r25, 2
    2d70:	08 c0       	rjmp	.+16     	; 0x2d82 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2d72:	61 50       	subi	r22, 0x01	; 1
    2d74:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <servo_vibro_value>
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
				error_servo_timer();
    2d7e:	0e 94 31 0c 	call	0x1862	; 0x1862 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2d82:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2d86:	63 36       	cpi	r22, 0x63	; 99
    2d88:	60 f4       	brcc	.+24     	; 0x2da2 <disp_very_fast_process+0x94>
    2d8a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2d8e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2d92:	90 ff       	sbrs	r25, 0
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2d96:	6f 5f       	subi	r22, 0xFF	; 255
    2d98:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <motor_value>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2da2:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <motor_value>
    2da6:	6b 30       	cpi	r22, 0x0B	; 11
    2da8:	60 f0       	brcs	.+24     	; 0x2dc2 <disp_very_fast_process+0xb4>
    2daa:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <system_events>
    2dae:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <system_events+0x1>
    2db2:	94 ff       	sbrs	r25, 4
    2db4:	06 c0       	rjmp	.+12     	; 0x2dc2 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2db6:	61 50       	subi	r22, 0x01	; 1
    2db8:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <motor_value>
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2dc2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <disp_very_fast_timer>
    2dc6:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <disp_very_fast_timer+0x1>
    2dca:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <disp_very_fast_timer+0x2>
    2dce:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <disp_very_fast_timer+0x3>
    2dd2:	4e 96       	adiw	r24, 0x1e	; 30
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <disp_very_fast_timer>
    2ddc:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <disp_very_fast_timer+0x1>
    2de0:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <disp_very_fast_timer+0x2>
    2de4:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <disp_very_fast_timer+0x3>
    2de8:	08 95       	ret

00002dea <system_error>:
}


void system_error(void)
{
	off_button();
    2dea:	0e 94 59 13 	call	0x26b2	; 0x26b2 <off_button>
    2dee:	08 95       	ret

00002df0 <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2df0:	1f 92       	push	r1
    2df2:	0f 92       	push	r0
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	0f 92       	push	r0
    2df8:	11 24       	eor	r1, r1
    2dfa:	2f 93       	push	r18
    2dfc:	3f 93       	push	r19
    2dfe:	4f 93       	push	r20
    2e00:	5f 93       	push	r21
    2e02:	6f 93       	push	r22
    2e04:	7f 93       	push	r23
    2e06:	8f 93       	push	r24
    2e08:	9f 93       	push	r25
    2e0a:	af 93       	push	r26
    2e0c:	bf 93       	push	r27
    2e0e:	ef 93       	push	r30
    2e10:	ff 93       	push	r31
    2e12:	e7 e9       	ldi	r30, 0x97	; 151
    2e14:	f4 e0       	ldi	r31, 0x04	; 4
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	c2 96       	adiw	r24, 0x32	; 50
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
    2e20:	80 81       	ld	r24, Z
    2e22:	91 81       	ldd	r25, Z+1	; 0x01
    2e24:	88 3e       	cpi	r24, 0xE8	; 232
    2e26:	93 40       	sbci	r25, 0x03	; 3
    2e28:	88 f0       	brcs	.+34     	; 0x2e4c <__vector_10+0x5c>
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	a4 81       	ldd	r26, Z+4	; 0x04
    2e30:	b5 81       	ldd	r27, Z+5	; 0x05
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	a1 1d       	adc	r26, r1
    2e36:	b1 1d       	adc	r27, r1
    2e38:	82 83       	std	Z+2, r24	; 0x02
    2e3a:	93 83       	std	Z+3, r25	; 0x03
    2e3c:	a4 83       	std	Z+4, r26	; 0x04
    2e3e:	b5 83       	std	Z+5, r27	; 0x05
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	88 5e       	subi	r24, 0xE8	; 232
    2e46:	93 40       	sbci	r25, 0x03	; 3
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	80 83       	st	Z, r24
    2e4c:	8d ee       	ldi	r24, 0xED	; 237
    2e4e:	92 e0       	ldi	r25, 0x02	; 2
    2e50:	0e 94 fe 08 	call	0x11fc	; 0x11fc <display_process>
    2e54:	ff 91       	pop	r31
    2e56:	ef 91       	pop	r30
    2e58:	bf 91       	pop	r27
    2e5a:	af 91       	pop	r26
    2e5c:	9f 91       	pop	r25
    2e5e:	8f 91       	pop	r24
    2e60:	7f 91       	pop	r23
    2e62:	6f 91       	pop	r22
    2e64:	5f 91       	pop	r21
    2e66:	4f 91       	pop	r20
    2e68:	3f 91       	pop	r19
    2e6a:	2f 91       	pop	r18
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	0f 90       	pop	r0
    2e72:	1f 90       	pop	r1
    2e74:	18 95       	reti

00002e76 <timer0_init>:
    2e76:	93 b7       	in	r25, 0x33	; 51
    2e78:	98 60       	ori	r25, 0x08	; 8
    2e7a:	93 bf       	out	0x33, r25	; 51
    2e7c:	6c bf       	out	0x3c, r22	; 60
    2e7e:	82 30       	cpi	r24, 0x02	; 2
    2e80:	99 f0       	breq	.+38     	; 0x2ea8 <timer0_init+0x32>
    2e82:	28 f4       	brcc	.+10     	; 0x2e8e <timer0_init+0x18>
    2e84:	88 23       	and	r24, r24
    2e86:	41 f0       	breq	.+16     	; 0x2e98 <timer0_init+0x22>
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	51 f0       	breq	.+20     	; 0x2ea0 <timer0_init+0x2a>
    2e8c:	19 c0       	rjmp	.+50     	; 0x2ec0 <timer0_init+0x4a>
    2e8e:	83 30       	cpi	r24, 0x03	; 3
    2e90:	79 f0       	breq	.+30     	; 0x2eb0 <timer0_init+0x3a>
    2e92:	84 30       	cpi	r24, 0x04	; 4
    2e94:	89 f0       	breq	.+34     	; 0x2eb8 <timer0_init+0x42>
    2e96:	14 c0       	rjmp	.+40     	; 0x2ec0 <timer0_init+0x4a>
    2e98:	83 b7       	in	r24, 0x33	; 51
    2e9a:	81 60       	ori	r24, 0x01	; 1
    2e9c:	83 bf       	out	0x33, r24	; 51
    2e9e:	13 c0       	rjmp	.+38     	; 0x2ec6 <timer0_init+0x50>
    2ea0:	83 b7       	in	r24, 0x33	; 51
    2ea2:	82 60       	ori	r24, 0x02	; 2
    2ea4:	83 bf       	out	0x33, r24	; 51
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <timer0_init+0x50>
    2ea8:	83 b7       	in	r24, 0x33	; 51
    2eaa:	83 60       	ori	r24, 0x03	; 3
    2eac:	83 bf       	out	0x33, r24	; 51
    2eae:	0b c0       	rjmp	.+22     	; 0x2ec6 <timer0_init+0x50>
    2eb0:	83 b7       	in	r24, 0x33	; 51
    2eb2:	84 60       	ori	r24, 0x04	; 4
    2eb4:	83 bf       	out	0x33, r24	; 51
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <timer0_init+0x50>
    2eb8:	83 b7       	in	r24, 0x33	; 51
    2eba:	85 60       	ori	r24, 0x05	; 5
    2ebc:	83 bf       	out	0x33, r24	; 51
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <timer0_init+0x50>
    2ec0:	83 b7       	in	r24, 0x33	; 51
    2ec2:	81 60       	ori	r24, 0x01	; 1
    2ec4:	83 bf       	out	0x33, r24	; 51
    2ec6:	89 b7       	in	r24, 0x39	; 57
    2ec8:	82 60       	ori	r24, 0x02	; 2
    2eca:	89 bf       	out	0x39, r24	; 57
    2ecc:	08 95       	ret

00002ece <evTime_init>:
    2ece:	23 e0       	ldi	r18, 0x03	; 3
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	24 83       	std	Z+4, r18	; 0x04
    2ed4:	10 82       	st	Z, r1
    2ed6:	11 82       	std	Z+1, r1	; 0x01
    2ed8:	12 82       	std	Z+2, r1	; 0x02
    2eda:	13 82       	std	Z+3, r1	; 0x03
    2edc:	08 95       	ret

00002ede <evTime_start>:
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	21 e0       	ldi	r18, 0x01	; 1
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	24 83       	std	Z+4, r18	; 0x04
    2ee8:	00 91 99 04 	lds	r16, 0x0499	; 0x800499 <mktime+0x2>
    2eec:	10 91 9a 04 	lds	r17, 0x049A	; 0x80049a <mktime+0x3>
    2ef0:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <mktime+0x4>
    2ef4:	30 91 9c 04 	lds	r19, 0x049C	; 0x80049c <mktime+0x5>
    2ef8:	40 0f       	add	r20, r16
    2efa:	51 1f       	adc	r21, r17
    2efc:	62 1f       	adc	r22, r18
    2efe:	73 1f       	adc	r23, r19
    2f00:	40 83       	st	Z, r20
    2f02:	51 83       	std	Z+1, r21	; 0x01
    2f04:	62 83       	std	Z+2, r22	; 0x02
    2f06:	73 83       	std	Z+3, r23	; 0x03
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	08 95       	ret

00002f0e <evTime_is_stated>:
    2f0e:	21 e0       	ldi	r18, 0x01	; 1
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	fc 01       	movw	r30, r24
    2f14:	84 81       	ldd	r24, Z+4	; 0x04
    2f16:	81 30       	cpi	r24, 0x01	; 1
    2f18:	11 f0       	breq	.+4      	; 0x2f1e <evTime_is_stated+0x10>
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	c9 01       	movw	r24, r18
    2f20:	08 95       	ret

00002f22 <evTime_check>:

int evTime_check(evTime * evt)
{
    2f22:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2f24:	84 81       	ldd	r24, Z+4	; 0x04
    2f26:	81 30       	cpi	r24, 0x01	; 1
    2f28:	b1 f4       	brne	.+44     	; 0x2f56 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2f2a:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <mktime+0x2>
    2f2e:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <mktime+0x3>
    2f32:	a0 91 9b 04 	lds	r26, 0x049B	; 0x80049b <mktime+0x4>
    2f36:	b0 91 9c 04 	lds	r27, 0x049C	; 0x80049c <mktime+0x5>
    2f3a:	40 81       	ld	r20, Z
    2f3c:	51 81       	ldd	r21, Z+1	; 0x01
    2f3e:	62 81       	ldd	r22, Z+2	; 0x02
    2f40:	73 81       	ldd	r23, Z+3	; 0x03
    2f42:	48 17       	cp	r20, r24
    2f44:	59 07       	cpc	r21, r25
    2f46:	6a 07       	cpc	r22, r26
    2f48:	7b 07       	cpc	r23, r27
    2f4a:	40 f4       	brcc	.+16     	; 0x2f5c <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2f56:	8f ef       	ldi	r24, 0xFF	; 255
    2f58:	9f ef       	ldi	r25, 0xFF	; 255
    2f5a:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2f60:	08 95       	ret

00002f62 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2f62:	21 e0       	ldi	r18, 0x01	; 1
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	fc 01       	movw	r30, r24
    2f68:	84 81       	ldd	r24, Z+4	; 0x04
    2f6a:	83 30       	cpi	r24, 0x03	; 3
    2f6c:	11 f0       	breq	.+4      	; 0x2f72 <evTime_off+0x10>
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
}
    2f72:	c9 01       	movw	r24, r18
    2f74:	08 95       	ret

00002f76 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
    2f88:	6a 01       	movw	r12, r20
    2f8a:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	81 11       	cpse	r24, r1
    2f90:	06 c0       	rjmp	.+12     	; 0x2f9e <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2f96:	18 82       	st	Y, r1
    2f98:	19 82       	std	Y+1, r1	; 0x01
    2f9a:	1a 82       	std	Y+2, r1	; 0x02
    2f9c:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <evTime_check>
    2fa4:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	31 f4       	brne	.+12     	; 0x2fb6 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2faa:	b7 01       	movw	r22, r14
    2fac:	a6 01       	movw	r20, r12
    2fae:	ce 01       	movw	r24, r28
    2fb0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
		return 1;
    2fb4:	0d c0       	rjmp	.+26     	; 0x2fd0 <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb8:	83 30       	cpi	r24, 0x03	; 3
    2fba:	41 f4       	brne	.+16     	; 0x2fcc <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2fbc:	b7 01       	movw	r22, r14
    2fbe:	a6 01       	movw	r20, r12
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_start>
	}
	return 0;
    2fc6:	00 e0       	ldi	r16, 0x00	; 0
    2fc8:	10 e0       	ldi	r17, 0x00	; 0
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <evTime_process_period+0x5a>
    2fcc:	00 e0       	ldi	r16, 0x00	; 0
    2fce:	10 e0       	ldi	r17, 0x00	; 0
}
    2fd0:	c8 01       	movw	r24, r16
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	08 95       	ret

00002fe4 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    2fe4:	1f 92       	push	r1
    2fe6:	0f 92       	push	r0
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	0f 92       	push	r0
    2fec:	11 24       	eor	r1, r1
    2fee:	2f 93       	push	r18
    2ff0:	3f 93       	push	r19
    2ff2:	4f 93       	push	r20
    2ff4:	5f 93       	push	r21
    2ff6:	8f 93       	push	r24
    2ff8:	9f 93       	push	r25
    2ffa:	ef 93       	push	r30
    2ffc:	ff 93       	push	r31
    2ffe:	2b b1       	in	r18, 0x0b	; 11
    3000:	3c b1       	in	r19, 0x0c	; 12
    3002:	28 71       	andi	r18, 0x18	; 24
    3004:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <UART_RxHead>
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	01 96       	adiw	r24, 0x01	; 1
    300c:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <UART_RxTail>
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	84 17       	cp	r24, r20
    3014:	95 07       	cpc	r25, r21
    3016:	39 f0       	breq	.+14     	; 0x3026 <__vector_13+0x42>
    3018:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <UART_RxHead>
    301c:	fc 01       	movw	r30, r24
    301e:	ec 50       	subi	r30, 0x0C	; 12
    3020:	fd 4f       	sbci	r31, 0xFD	; 253
    3022:	30 83       	st	Z, r19
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <__vector_13+0x44>
    3026:	22 e0       	ldi	r18, 0x02	; 2
    3028:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <UART_LastRxError>
    302c:	ff 91       	pop	r31
    302e:	ef 91       	pop	r30
    3030:	9f 91       	pop	r25
    3032:	8f 91       	pop	r24
    3034:	5f 91       	pop	r21
    3036:	4f 91       	pop	r20
    3038:	3f 91       	pop	r19
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <__vector_14>:
    3046:	1f 92       	push	r1
    3048:	0f 92       	push	r0
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	0f 92       	push	r0
    304e:	11 24       	eor	r1, r1
    3050:	8f 93       	push	r24
    3052:	9f 93       	push	r25
    3054:	ef 93       	push	r30
    3056:	ff 93       	push	r31
    3058:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <UART_TxHead>
    305c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <UART_TxTail>
    3060:	98 17       	cp	r25, r24
    3062:	71 f0       	breq	.+28     	; 0x3080 <__vector_14+0x3a>
    3064:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <UART_TxTail>
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	01 96       	adiw	r24, 0x01	; 1
    306c:	8f 77       	andi	r24, 0x7F	; 127
    306e:	99 27       	eor	r25, r25
    3070:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <UART_TxTail>
    3074:	fc 01       	movw	r30, r24
    3076:	ec 50       	subi	r30, 0x0C	; 12
    3078:	fd 4f       	sbci	r31, 0xFD	; 253
    307a:	80 81       	ld	r24, Z
    307c:	8c b9       	out	0x0c, r24	; 12
    307e:	01 c0       	rjmp	.+2      	; 0x3082 <__vector_14+0x3c>
    3080:	55 98       	cbi	0x0a, 5	; 10
    3082:	ff 91       	pop	r31
    3084:	ef 91       	pop	r30
    3086:	9f 91       	pop	r25
    3088:	8f 91       	pop	r24
    308a:	0f 90       	pop	r0
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	0f 90       	pop	r0
    3090:	1f 90       	pop	r1
    3092:	18 95       	reti

00003094 <uart0_init>:
    3094:	f8 94       	cli
    3096:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <UART_TxHead>
    309a:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <UART_TxTail>
    309e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <UART_RxHead>
    30a2:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <UART_RxTail>
    30a6:	78 94       	sei
    30a8:	99 23       	and	r25, r25
    30aa:	1c f4       	brge	.+6      	; 0x30b2 <uart0_init+0x1e>
    30ac:	22 e0       	ldi	r18, 0x02	; 2
    30ae:	2b b9       	out	0x0b, r18	; 11
    30b0:	9f 77       	andi	r25, 0x7F	; 127
    30b2:	90 bd       	out	0x20, r25	; 32
    30b4:	89 b9       	out	0x09, r24	; 9
    30b6:	88 e9       	ldi	r24, 0x98	; 152
    30b8:	8a b9       	out	0x0a, r24	; 10
    30ba:	86 e8       	ldi	r24, 0x86	; 134
    30bc:	80 bd       	out	0x20, r24	; 32
    30be:	08 95       	ret

000030c0 <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    30c0:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <UART_TxHead>
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	4f 5f       	subi	r20, 0xFF	; 255
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ca:	4f 77       	andi	r20, 0x7F	; 127
    30cc:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    30ce:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <UART_TxTail>
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	42 17       	cp	r20, r18
    30d6:	53 07       	cpc	r21, r19
    30d8:	d1 f3       	breq	.-12     	; 0x30ce <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    30da:	fa 01       	movw	r30, r20
    30dc:	ec 50       	subi	r30, 0x0C	; 12
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    30e2:	40 93 f3 02 	sts	0x02F3, r20	; 0x8002f3 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    30e6:	55 9a       	sbi	0x0a, 5	; 10
    30e8:	08 95       	ret

000030ea <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	ec 01       	movw	r28, r24
	while (*s) {
    30f0:	88 81       	ld	r24, Y
    30f2:	88 23       	and	r24, r24
    30f4:	31 f0       	breq	.+12     	; 0x3102 <uart0_puts+0x18>
    30f6:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    30f8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    30fc:	89 91       	ld	r24, Y+
    30fe:	81 11       	cpse	r24, r1
    3100:	fb cf       	rjmp	.-10     	; 0x30f8 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <__subsf3>:
    3108:	50 58       	subi	r21, 0x80	; 128

0000310a <__addsf3>:
    310a:	bb 27       	eor	r27, r27
    310c:	aa 27       	eor	r26, r26
    310e:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3x>
    3112:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_round>
    3116:	0e 94 03 1a 	call	0x3406	; 0x3406 <__fp_pscA>
    311a:	38 f0       	brcs	.+14     	; 0x312a <__addsf3+0x20>
    311c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscB>
    3120:	20 f0       	brcs	.+8      	; 0x312a <__addsf3+0x20>
    3122:	39 f4       	brne	.+14     	; 0x3132 <__addsf3+0x28>
    3124:	9f 3f       	cpi	r25, 0xFF	; 255
    3126:	19 f4       	brne	.+6      	; 0x312e <__addsf3+0x24>
    3128:	26 f4       	brtc	.+8      	; 0x3132 <__addsf3+0x28>
    312a:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>
    312e:	0e f4       	brtc	.+2      	; 0x3132 <__addsf3+0x28>
    3130:	e0 95       	com	r30
    3132:	e7 fb       	bst	r30, 7
    3134:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>

00003138 <__addsf3x>:
    3138:	e9 2f       	mov	r30, r25
    313a:	0e 94 22 1a 	call	0x3444	; 0x3444 <__fp_split3>
    313e:	58 f3       	brcs	.-42     	; 0x3116 <__addsf3+0xc>
    3140:	ba 17       	cp	r27, r26
    3142:	62 07       	cpc	r22, r18
    3144:	73 07       	cpc	r23, r19
    3146:	84 07       	cpc	r24, r20
    3148:	95 07       	cpc	r25, r21
    314a:	20 f0       	brcs	.+8      	; 0x3154 <__addsf3x+0x1c>
    314c:	79 f4       	brne	.+30     	; 0x316c <__addsf3x+0x34>
    314e:	a6 f5       	brtc	.+104    	; 0x31b8 <__addsf3x+0x80>
    3150:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__fp_zero>
    3154:	0e f4       	brtc	.+2      	; 0x3158 <__addsf3x+0x20>
    3156:	e0 95       	com	r30
    3158:	0b 2e       	mov	r0, r27
    315a:	ba 2f       	mov	r27, r26
    315c:	a0 2d       	mov	r26, r0
    315e:	0b 01       	movw	r0, r22
    3160:	b9 01       	movw	r22, r18
    3162:	90 01       	movw	r18, r0
    3164:	0c 01       	movw	r0, r24
    3166:	ca 01       	movw	r24, r20
    3168:	a0 01       	movw	r20, r0
    316a:	11 24       	eor	r1, r1
    316c:	ff 27       	eor	r31, r31
    316e:	59 1b       	sub	r21, r25
    3170:	99 f0       	breq	.+38     	; 0x3198 <__addsf3x+0x60>
    3172:	59 3f       	cpi	r21, 0xF9	; 249
    3174:	50 f4       	brcc	.+20     	; 0x318a <__addsf3x+0x52>
    3176:	50 3e       	cpi	r21, 0xE0	; 224
    3178:	68 f1       	brcs	.+90     	; 0x31d4 <__addsf3x+0x9c>
    317a:	1a 16       	cp	r1, r26
    317c:	f0 40       	sbci	r31, 0x00	; 0
    317e:	a2 2f       	mov	r26, r18
    3180:	23 2f       	mov	r18, r19
    3182:	34 2f       	mov	r19, r20
    3184:	44 27       	eor	r20, r20
    3186:	58 5f       	subi	r21, 0xF8	; 248
    3188:	f3 cf       	rjmp	.-26     	; 0x3170 <__addsf3x+0x38>
    318a:	46 95       	lsr	r20
    318c:	37 95       	ror	r19
    318e:	27 95       	ror	r18
    3190:	a7 95       	ror	r26
    3192:	f0 40       	sbci	r31, 0x00	; 0
    3194:	53 95       	inc	r21
    3196:	c9 f7       	brne	.-14     	; 0x318a <__addsf3x+0x52>
    3198:	7e f4       	brtc	.+30     	; 0x31b8 <__addsf3x+0x80>
    319a:	1f 16       	cp	r1, r31
    319c:	ba 0b       	sbc	r27, r26
    319e:	62 0b       	sbc	r22, r18
    31a0:	73 0b       	sbc	r23, r19
    31a2:	84 0b       	sbc	r24, r20
    31a4:	ba f0       	brmi	.+46     	; 0x31d4 <__addsf3x+0x9c>
    31a6:	91 50       	subi	r25, 0x01	; 1
    31a8:	a1 f0       	breq	.+40     	; 0x31d2 <__addsf3x+0x9a>
    31aa:	ff 0f       	add	r31, r31
    31ac:	bb 1f       	adc	r27, r27
    31ae:	66 1f       	adc	r22, r22
    31b0:	77 1f       	adc	r23, r23
    31b2:	88 1f       	adc	r24, r24
    31b4:	c2 f7       	brpl	.-16     	; 0x31a6 <__addsf3x+0x6e>
    31b6:	0e c0       	rjmp	.+28     	; 0x31d4 <__addsf3x+0x9c>
    31b8:	ba 0f       	add	r27, r26
    31ba:	62 1f       	adc	r22, r18
    31bc:	73 1f       	adc	r23, r19
    31be:	84 1f       	adc	r24, r20
    31c0:	48 f4       	brcc	.+18     	; 0x31d4 <__addsf3x+0x9c>
    31c2:	87 95       	ror	r24
    31c4:	77 95       	ror	r23
    31c6:	67 95       	ror	r22
    31c8:	b7 95       	ror	r27
    31ca:	f7 95       	ror	r31
    31cc:	9e 3f       	cpi	r25, 0xFE	; 254
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <__addsf3x+0x9a>
    31d0:	b0 cf       	rjmp	.-160    	; 0x3132 <__addsf3+0x28>
    31d2:	93 95       	inc	r25
    31d4:	88 0f       	add	r24, r24
    31d6:	08 f0       	brcs	.+2      	; 0x31da <__addsf3x+0xa2>
    31d8:	99 27       	eor	r25, r25
    31da:	ee 0f       	add	r30, r30
    31dc:	97 95       	ror	r25
    31de:	87 95       	ror	r24
    31e0:	08 95       	ret

000031e2 <__divsf3>:
    31e2:	0e 94 05 19 	call	0x320a	; 0x320a <__divsf3x>
    31e6:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_round>
    31ea:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscB>
    31ee:	58 f0       	brcs	.+22     	; 0x3206 <__divsf3+0x24>
    31f0:	0e 94 03 1a 	call	0x3406	; 0x3406 <__fp_pscA>
    31f4:	40 f0       	brcs	.+16     	; 0x3206 <__divsf3+0x24>
    31f6:	29 f4       	brne	.+10     	; 0x3202 <__divsf3+0x20>
    31f8:	5f 3f       	cpi	r21, 0xFF	; 255
    31fa:	29 f0       	breq	.+10     	; 0x3206 <__divsf3+0x24>
    31fc:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    3200:	51 11       	cpse	r21, r1
    3202:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>
    3206:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>

0000320a <__divsf3x>:
    320a:	0e 94 22 1a 	call	0x3444	; 0x3444 <__fp_split3>
    320e:	68 f3       	brcs	.-38     	; 0x31ea <__divsf3+0x8>

00003210 <__divsf3_pse>:
    3210:	99 23       	and	r25, r25
    3212:	b1 f3       	breq	.-20     	; 0x3200 <__divsf3+0x1e>
    3214:	55 23       	and	r21, r21
    3216:	91 f3       	breq	.-28     	; 0x31fc <__divsf3+0x1a>
    3218:	95 1b       	sub	r25, r21
    321a:	55 0b       	sbc	r21, r21
    321c:	bb 27       	eor	r27, r27
    321e:	aa 27       	eor	r26, r26
    3220:	62 17       	cp	r22, r18
    3222:	73 07       	cpc	r23, r19
    3224:	84 07       	cpc	r24, r20
    3226:	38 f0       	brcs	.+14     	; 0x3236 <__divsf3_pse+0x26>
    3228:	9f 5f       	subi	r25, 0xFF	; 255
    322a:	5f 4f       	sbci	r21, 0xFF	; 255
    322c:	22 0f       	add	r18, r18
    322e:	33 1f       	adc	r19, r19
    3230:	44 1f       	adc	r20, r20
    3232:	aa 1f       	adc	r26, r26
    3234:	a9 f3       	breq	.-22     	; 0x3220 <__divsf3_pse+0x10>
    3236:	35 d0       	rcall	.+106    	; 0x32a2 <__divsf3_pse+0x92>
    3238:	0e 2e       	mov	r0, r30
    323a:	3a f0       	brmi	.+14     	; 0x324a <__divsf3_pse+0x3a>
    323c:	e0 e8       	ldi	r30, 0x80	; 128
    323e:	32 d0       	rcall	.+100    	; 0x32a4 <__divsf3_pse+0x94>
    3240:	91 50       	subi	r25, 0x01	; 1
    3242:	50 40       	sbci	r21, 0x00	; 0
    3244:	e6 95       	lsr	r30
    3246:	00 1c       	adc	r0, r0
    3248:	ca f7       	brpl	.-14     	; 0x323c <__divsf3_pse+0x2c>
    324a:	2b d0       	rcall	.+86     	; 0x32a2 <__divsf3_pse+0x92>
    324c:	fe 2f       	mov	r31, r30
    324e:	29 d0       	rcall	.+82     	; 0x32a2 <__divsf3_pse+0x92>
    3250:	66 0f       	add	r22, r22
    3252:	77 1f       	adc	r23, r23
    3254:	88 1f       	adc	r24, r24
    3256:	bb 1f       	adc	r27, r27
    3258:	26 17       	cp	r18, r22
    325a:	37 07       	cpc	r19, r23
    325c:	48 07       	cpc	r20, r24
    325e:	ab 07       	cpc	r26, r27
    3260:	b0 e8       	ldi	r27, 0x80	; 128
    3262:	09 f0       	breq	.+2      	; 0x3266 <__divsf3_pse+0x56>
    3264:	bb 0b       	sbc	r27, r27
    3266:	80 2d       	mov	r24, r0
    3268:	bf 01       	movw	r22, r30
    326a:	ff 27       	eor	r31, r31
    326c:	93 58       	subi	r25, 0x83	; 131
    326e:	5f 4f       	sbci	r21, 0xFF	; 255
    3270:	3a f0       	brmi	.+14     	; 0x3280 <__divsf3_pse+0x70>
    3272:	9e 3f       	cpi	r25, 0xFE	; 254
    3274:	51 05       	cpc	r21, r1
    3276:	78 f0       	brcs	.+30     	; 0x3296 <__divsf3_pse+0x86>
    3278:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    327c:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>
    3280:	5f 3f       	cpi	r21, 0xFF	; 255
    3282:	e4 f3       	brlt	.-8      	; 0x327c <__divsf3_pse+0x6c>
    3284:	98 3e       	cpi	r25, 0xE8	; 232
    3286:	d4 f3       	brlt	.-12     	; 0x327c <__divsf3_pse+0x6c>
    3288:	86 95       	lsr	r24
    328a:	77 95       	ror	r23
    328c:	67 95       	ror	r22
    328e:	b7 95       	ror	r27
    3290:	f7 95       	ror	r31
    3292:	9f 5f       	subi	r25, 0xFF	; 255
    3294:	c9 f7       	brne	.-14     	; 0x3288 <__divsf3_pse+0x78>
    3296:	88 0f       	add	r24, r24
    3298:	91 1d       	adc	r25, r1
    329a:	96 95       	lsr	r25
    329c:	87 95       	ror	r24
    329e:	97 f9       	bld	r25, 7
    32a0:	08 95       	ret
    32a2:	e1 e0       	ldi	r30, 0x01	; 1
    32a4:	66 0f       	add	r22, r22
    32a6:	77 1f       	adc	r23, r23
    32a8:	88 1f       	adc	r24, r24
    32aa:	bb 1f       	adc	r27, r27
    32ac:	62 17       	cp	r22, r18
    32ae:	73 07       	cpc	r23, r19
    32b0:	84 07       	cpc	r24, r20
    32b2:	ba 07       	cpc	r27, r26
    32b4:	20 f0       	brcs	.+8      	; 0x32be <__divsf3_pse+0xae>
    32b6:	62 1b       	sub	r22, r18
    32b8:	73 0b       	sbc	r23, r19
    32ba:	84 0b       	sbc	r24, r20
    32bc:	ba 0b       	sbc	r27, r26
    32be:	ee 1f       	adc	r30, r30
    32c0:	88 f7       	brcc	.-30     	; 0x32a4 <__divsf3_pse+0x94>
    32c2:	e0 95       	com	r30
    32c4:	08 95       	ret

000032c6 <__fixsfsi>:
    32c6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__fixunssfsi>
    32ca:	68 94       	set
    32cc:	b1 11       	cpse	r27, r1
    32ce:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>
    32d2:	08 95       	ret

000032d4 <__fixunssfsi>:
    32d4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_splitA>
    32d8:	88 f0       	brcs	.+34     	; 0x32fc <__fixunssfsi+0x28>
    32da:	9f 57       	subi	r25, 0x7F	; 127
    32dc:	98 f0       	brcs	.+38     	; 0x3304 <__fixunssfsi+0x30>
    32de:	b9 2f       	mov	r27, r25
    32e0:	99 27       	eor	r25, r25
    32e2:	b7 51       	subi	r27, 0x17	; 23
    32e4:	b0 f0       	brcs	.+44     	; 0x3312 <__fixunssfsi+0x3e>
    32e6:	e1 f0       	breq	.+56     	; 0x3320 <__fixunssfsi+0x4c>
    32e8:	66 0f       	add	r22, r22
    32ea:	77 1f       	adc	r23, r23
    32ec:	88 1f       	adc	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	1a f0       	brmi	.+6      	; 0x32f8 <__fixunssfsi+0x24>
    32f2:	ba 95       	dec	r27
    32f4:	c9 f7       	brne	.-14     	; 0x32e8 <__fixunssfsi+0x14>
    32f6:	14 c0       	rjmp	.+40     	; 0x3320 <__fixunssfsi+0x4c>
    32f8:	b1 30       	cpi	r27, 0x01	; 1
    32fa:	91 f0       	breq	.+36     	; 0x3320 <__fixunssfsi+0x4c>
    32fc:	0e 94 44 1a 	call	0x3488	; 0x3488 <__fp_zero>
    3300:	b1 e0       	ldi	r27, 0x01	; 1
    3302:	08 95       	ret
    3304:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__fp_zero>
    3308:	67 2f       	mov	r22, r23
    330a:	78 2f       	mov	r23, r24
    330c:	88 27       	eor	r24, r24
    330e:	b8 5f       	subi	r27, 0xF8	; 248
    3310:	39 f0       	breq	.+14     	; 0x3320 <__fixunssfsi+0x4c>
    3312:	b9 3f       	cpi	r27, 0xF9	; 249
    3314:	cc f3       	brlt	.-14     	; 0x3308 <__fixunssfsi+0x34>
    3316:	86 95       	lsr	r24
    3318:	77 95       	ror	r23
    331a:	67 95       	ror	r22
    331c:	b3 95       	inc	r27
    331e:	d9 f7       	brne	.-10     	; 0x3316 <__fixunssfsi+0x42>
    3320:	3e f4       	brtc	.+14     	; 0x3330 <__fixunssfsi+0x5c>
    3322:	90 95       	com	r25
    3324:	80 95       	com	r24
    3326:	70 95       	com	r23
    3328:	61 95       	neg	r22
    332a:	7f 4f       	sbci	r23, 0xFF	; 255
    332c:	8f 4f       	sbci	r24, 0xFF	; 255
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	08 95       	ret

00003332 <__floatunsisf>:
    3332:	e8 94       	clt
    3334:	09 c0       	rjmp	.+18     	; 0x3348 <__floatsisf+0x12>

00003336 <__floatsisf>:
    3336:	97 fb       	bst	r25, 7
    3338:	3e f4       	brtc	.+14     	; 0x3348 <__floatsisf+0x12>
    333a:	90 95       	com	r25
    333c:	80 95       	com	r24
    333e:	70 95       	com	r23
    3340:	61 95       	neg	r22
    3342:	7f 4f       	sbci	r23, 0xFF	; 255
    3344:	8f 4f       	sbci	r24, 0xFF	; 255
    3346:	9f 4f       	sbci	r25, 0xFF	; 255
    3348:	99 23       	and	r25, r25
    334a:	a9 f0       	breq	.+42     	; 0x3376 <__floatsisf+0x40>
    334c:	f9 2f       	mov	r31, r25
    334e:	96 e9       	ldi	r25, 0x96	; 150
    3350:	bb 27       	eor	r27, r27
    3352:	93 95       	inc	r25
    3354:	f6 95       	lsr	r31
    3356:	87 95       	ror	r24
    3358:	77 95       	ror	r23
    335a:	67 95       	ror	r22
    335c:	b7 95       	ror	r27
    335e:	f1 11       	cpse	r31, r1
    3360:	f8 cf       	rjmp	.-16     	; 0x3352 <__floatsisf+0x1c>
    3362:	fa f4       	brpl	.+62     	; 0x33a2 <__floatsisf+0x6c>
    3364:	bb 0f       	add	r27, r27
    3366:	11 f4       	brne	.+4      	; 0x336c <__floatsisf+0x36>
    3368:	60 ff       	sbrs	r22, 0
    336a:	1b c0       	rjmp	.+54     	; 0x33a2 <__floatsisf+0x6c>
    336c:	6f 5f       	subi	r22, 0xFF	; 255
    336e:	7f 4f       	sbci	r23, 0xFF	; 255
    3370:	8f 4f       	sbci	r24, 0xFF	; 255
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	16 c0       	rjmp	.+44     	; 0x33a2 <__floatsisf+0x6c>
    3376:	88 23       	and	r24, r24
    3378:	11 f0       	breq	.+4      	; 0x337e <__floatsisf+0x48>
    337a:	96 e9       	ldi	r25, 0x96	; 150
    337c:	11 c0       	rjmp	.+34     	; 0x33a0 <__floatsisf+0x6a>
    337e:	77 23       	and	r23, r23
    3380:	21 f0       	breq	.+8      	; 0x338a <__floatsisf+0x54>
    3382:	9e e8       	ldi	r25, 0x8E	; 142
    3384:	87 2f       	mov	r24, r23
    3386:	76 2f       	mov	r23, r22
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <__floatsisf+0x5e>
    338a:	66 23       	and	r22, r22
    338c:	71 f0       	breq	.+28     	; 0x33aa <__floatsisf+0x74>
    338e:	96 e8       	ldi	r25, 0x86	; 134
    3390:	86 2f       	mov	r24, r22
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	2a f0       	brmi	.+10     	; 0x33a2 <__floatsisf+0x6c>
    3398:	9a 95       	dec	r25
    339a:	66 0f       	add	r22, r22
    339c:	77 1f       	adc	r23, r23
    339e:	88 1f       	adc	r24, r24
    33a0:	da f7       	brpl	.-10     	; 0x3398 <__floatsisf+0x62>
    33a2:	88 0f       	add	r24, r24
    33a4:	96 95       	lsr	r25
    33a6:	87 95       	ror	r24
    33a8:	97 f9       	bld	r25, 7
    33aa:	08 95       	ret

000033ac <__fp_cmp>:
    33ac:	99 0f       	add	r25, r25
    33ae:	00 08       	sbc	r0, r0
    33b0:	55 0f       	add	r21, r21
    33b2:	aa 0b       	sbc	r26, r26
    33b4:	e0 e8       	ldi	r30, 0x80	; 128
    33b6:	fe ef       	ldi	r31, 0xFE	; 254
    33b8:	16 16       	cp	r1, r22
    33ba:	17 06       	cpc	r1, r23
    33bc:	e8 07       	cpc	r30, r24
    33be:	f9 07       	cpc	r31, r25
    33c0:	c0 f0       	brcs	.+48     	; 0x33f2 <__fp_cmp+0x46>
    33c2:	12 16       	cp	r1, r18
    33c4:	13 06       	cpc	r1, r19
    33c6:	e4 07       	cpc	r30, r20
    33c8:	f5 07       	cpc	r31, r21
    33ca:	98 f0       	brcs	.+38     	; 0x33f2 <__fp_cmp+0x46>
    33cc:	62 1b       	sub	r22, r18
    33ce:	73 0b       	sbc	r23, r19
    33d0:	84 0b       	sbc	r24, r20
    33d2:	95 0b       	sbc	r25, r21
    33d4:	39 f4       	brne	.+14     	; 0x33e4 <__fp_cmp+0x38>
    33d6:	0a 26       	eor	r0, r26
    33d8:	61 f0       	breq	.+24     	; 0x33f2 <__fp_cmp+0x46>
    33da:	23 2b       	or	r18, r19
    33dc:	24 2b       	or	r18, r20
    33de:	25 2b       	or	r18, r21
    33e0:	21 f4       	brne	.+8      	; 0x33ea <__fp_cmp+0x3e>
    33e2:	08 95       	ret
    33e4:	0a 26       	eor	r0, r26
    33e6:	09 f4       	brne	.+2      	; 0x33ea <__fp_cmp+0x3e>
    33e8:	a1 40       	sbci	r26, 0x01	; 1
    33ea:	a6 95       	lsr	r26
    33ec:	8f ef       	ldi	r24, 0xFF	; 255
    33ee:	81 1d       	adc	r24, r1
    33f0:	81 1d       	adc	r24, r1
    33f2:	08 95       	ret

000033f4 <__fp_inf>:
    33f4:	97 f9       	bld	r25, 7
    33f6:	9f 67       	ori	r25, 0x7F	; 127
    33f8:	80 e8       	ldi	r24, 0x80	; 128
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	08 95       	ret

00003400 <__fp_nan>:
    3400:	9f ef       	ldi	r25, 0xFF	; 255
    3402:	80 ec       	ldi	r24, 0xC0	; 192
    3404:	08 95       	ret

00003406 <__fp_pscA>:
    3406:	00 24       	eor	r0, r0
    3408:	0a 94       	dec	r0
    340a:	16 16       	cp	r1, r22
    340c:	17 06       	cpc	r1, r23
    340e:	18 06       	cpc	r1, r24
    3410:	09 06       	cpc	r0, r25
    3412:	08 95       	ret

00003414 <__fp_pscB>:
    3414:	00 24       	eor	r0, r0
    3416:	0a 94       	dec	r0
    3418:	12 16       	cp	r1, r18
    341a:	13 06       	cpc	r1, r19
    341c:	14 06       	cpc	r1, r20
    341e:	05 06       	cpc	r0, r21
    3420:	08 95       	ret

00003422 <__fp_round>:
    3422:	09 2e       	mov	r0, r25
    3424:	03 94       	inc	r0
    3426:	00 0c       	add	r0, r0
    3428:	11 f4       	brne	.+4      	; 0x342e <__fp_round+0xc>
    342a:	88 23       	and	r24, r24
    342c:	52 f0       	brmi	.+20     	; 0x3442 <__fp_round+0x20>
    342e:	bb 0f       	add	r27, r27
    3430:	40 f4       	brcc	.+16     	; 0x3442 <__fp_round+0x20>
    3432:	bf 2b       	or	r27, r31
    3434:	11 f4       	brne	.+4      	; 0x343a <__fp_round+0x18>
    3436:	60 ff       	sbrs	r22, 0
    3438:	04 c0       	rjmp	.+8      	; 0x3442 <__fp_round+0x20>
    343a:	6f 5f       	subi	r22, 0xFF	; 255
    343c:	7f 4f       	sbci	r23, 0xFF	; 255
    343e:	8f 4f       	sbci	r24, 0xFF	; 255
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	08 95       	ret

00003444 <__fp_split3>:
    3444:	57 fd       	sbrc	r21, 7
    3446:	90 58       	subi	r25, 0x80	; 128
    3448:	44 0f       	add	r20, r20
    344a:	55 1f       	adc	r21, r21
    344c:	59 f0       	breq	.+22     	; 0x3464 <__fp_splitA+0x10>
    344e:	5f 3f       	cpi	r21, 0xFF	; 255
    3450:	71 f0       	breq	.+28     	; 0x346e <__fp_splitA+0x1a>
    3452:	47 95       	ror	r20

00003454 <__fp_splitA>:
    3454:	88 0f       	add	r24, r24
    3456:	97 fb       	bst	r25, 7
    3458:	99 1f       	adc	r25, r25
    345a:	61 f0       	breq	.+24     	; 0x3474 <__fp_splitA+0x20>
    345c:	9f 3f       	cpi	r25, 0xFF	; 255
    345e:	79 f0       	breq	.+30     	; 0x347e <__fp_splitA+0x2a>
    3460:	87 95       	ror	r24
    3462:	08 95       	ret
    3464:	12 16       	cp	r1, r18
    3466:	13 06       	cpc	r1, r19
    3468:	14 06       	cpc	r1, r20
    346a:	55 1f       	adc	r21, r21
    346c:	f2 cf       	rjmp	.-28     	; 0x3452 <__fp_split3+0xe>
    346e:	46 95       	lsr	r20
    3470:	f1 df       	rcall	.-30     	; 0x3454 <__fp_splitA>
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <__fp_splitA+0x30>
    3474:	16 16       	cp	r1, r22
    3476:	17 06       	cpc	r1, r23
    3478:	18 06       	cpc	r1, r24
    347a:	99 1f       	adc	r25, r25
    347c:	f1 cf       	rjmp	.-30     	; 0x3460 <__fp_splitA+0xc>
    347e:	86 95       	lsr	r24
    3480:	71 05       	cpc	r23, r1
    3482:	61 05       	cpc	r22, r1
    3484:	08 94       	sec
    3486:	08 95       	ret

00003488 <__fp_zero>:
    3488:	e8 94       	clt

0000348a <__fp_szero>:
    348a:	bb 27       	eor	r27, r27
    348c:	66 27       	eor	r22, r22
    348e:	77 27       	eor	r23, r23
    3490:	cb 01       	movw	r24, r22
    3492:	97 f9       	bld	r25, 7
    3494:	08 95       	ret

00003496 <__gesf2>:
    3496:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fp_cmp>
    349a:	08 f4       	brcc	.+2      	; 0x349e <__gesf2+0x8>
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	08 95       	ret

000034a0 <__mulsf3>:
    34a0:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__mulsf3x>
    34a4:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_round>
    34a8:	0e 94 03 1a 	call	0x3406	; 0x3406 <__fp_pscA>
    34ac:	38 f0       	brcs	.+14     	; 0x34bc <__mulsf3+0x1c>
    34ae:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__fp_pscB>
    34b2:	20 f0       	brcs	.+8      	; 0x34bc <__mulsf3+0x1c>
    34b4:	95 23       	and	r25, r21
    34b6:	11 f0       	breq	.+4      	; 0x34bc <__mulsf3+0x1c>
    34b8:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    34bc:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>
    34c0:	11 24       	eor	r1, r1
    34c2:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>

000034c6 <__mulsf3x>:
    34c6:	0e 94 22 1a 	call	0x3444	; 0x3444 <__fp_split3>
    34ca:	70 f3       	brcs	.-36     	; 0x34a8 <__mulsf3+0x8>

000034cc <__mulsf3_pse>:
    34cc:	95 9f       	mul	r25, r21
    34ce:	c1 f3       	breq	.-16     	; 0x34c0 <__mulsf3+0x20>
    34d0:	95 0f       	add	r25, r21
    34d2:	50 e0       	ldi	r21, 0x00	; 0
    34d4:	55 1f       	adc	r21, r21
    34d6:	62 9f       	mul	r22, r18
    34d8:	f0 01       	movw	r30, r0
    34da:	72 9f       	mul	r23, r18
    34dc:	bb 27       	eor	r27, r27
    34de:	f0 0d       	add	r31, r0
    34e0:	b1 1d       	adc	r27, r1
    34e2:	63 9f       	mul	r22, r19
    34e4:	aa 27       	eor	r26, r26
    34e6:	f0 0d       	add	r31, r0
    34e8:	b1 1d       	adc	r27, r1
    34ea:	aa 1f       	adc	r26, r26
    34ec:	64 9f       	mul	r22, r20
    34ee:	66 27       	eor	r22, r22
    34f0:	b0 0d       	add	r27, r0
    34f2:	a1 1d       	adc	r26, r1
    34f4:	66 1f       	adc	r22, r22
    34f6:	82 9f       	mul	r24, r18
    34f8:	22 27       	eor	r18, r18
    34fa:	b0 0d       	add	r27, r0
    34fc:	a1 1d       	adc	r26, r1
    34fe:	62 1f       	adc	r22, r18
    3500:	73 9f       	mul	r23, r19
    3502:	b0 0d       	add	r27, r0
    3504:	a1 1d       	adc	r26, r1
    3506:	62 1f       	adc	r22, r18
    3508:	83 9f       	mul	r24, r19
    350a:	a0 0d       	add	r26, r0
    350c:	61 1d       	adc	r22, r1
    350e:	22 1f       	adc	r18, r18
    3510:	74 9f       	mul	r23, r20
    3512:	33 27       	eor	r19, r19
    3514:	a0 0d       	add	r26, r0
    3516:	61 1d       	adc	r22, r1
    3518:	23 1f       	adc	r18, r19
    351a:	84 9f       	mul	r24, r20
    351c:	60 0d       	add	r22, r0
    351e:	21 1d       	adc	r18, r1
    3520:	82 2f       	mov	r24, r18
    3522:	76 2f       	mov	r23, r22
    3524:	6a 2f       	mov	r22, r26
    3526:	11 24       	eor	r1, r1
    3528:	9f 57       	subi	r25, 0x7F	; 127
    352a:	50 40       	sbci	r21, 0x00	; 0
    352c:	9a f0       	brmi	.+38     	; 0x3554 <__mulsf3_pse+0x88>
    352e:	f1 f0       	breq	.+60     	; 0x356c <__mulsf3_pse+0xa0>
    3530:	88 23       	and	r24, r24
    3532:	4a f0       	brmi	.+18     	; 0x3546 <__mulsf3_pse+0x7a>
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	bb 1f       	adc	r27, r27
    353a:	66 1f       	adc	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	91 50       	subi	r25, 0x01	; 1
    3542:	50 40       	sbci	r21, 0x00	; 0
    3544:	a9 f7       	brne	.-22     	; 0x3530 <__mulsf3_pse+0x64>
    3546:	9e 3f       	cpi	r25, 0xFE	; 254
    3548:	51 05       	cpc	r21, r1
    354a:	80 f0       	brcs	.+32     	; 0x356c <__mulsf3_pse+0xa0>
    354c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    3550:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>
    3554:	5f 3f       	cpi	r21, 0xFF	; 255
    3556:	e4 f3       	brlt	.-8      	; 0x3550 <__mulsf3_pse+0x84>
    3558:	98 3e       	cpi	r25, 0xE8	; 232
    355a:	d4 f3       	brlt	.-12     	; 0x3550 <__mulsf3_pse+0x84>
    355c:	86 95       	lsr	r24
    355e:	77 95       	ror	r23
    3560:	67 95       	ror	r22
    3562:	b7 95       	ror	r27
    3564:	f7 95       	ror	r31
    3566:	e7 95       	ror	r30
    3568:	9f 5f       	subi	r25, 0xFF	; 255
    356a:	c1 f7       	brne	.-16     	; 0x355c <__mulsf3_pse+0x90>
    356c:	fe 2b       	or	r31, r30
    356e:	88 0f       	add	r24, r24
    3570:	91 1d       	adc	r25, r1
    3572:	96 95       	lsr	r25
    3574:	87 95       	ror	r24
    3576:	97 f9       	bld	r25, 7
    3578:	08 95       	ret

0000357a <pow>:
    357a:	fa 01       	movw	r30, r20
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	30 96       	adiw	r30, 0x00	; 0
    3582:	21 05       	cpc	r18, r1
    3584:	31 05       	cpc	r19, r1
    3586:	a1 f1       	breq	.+104    	; 0x35f0 <pow+0x76>
    3588:	61 15       	cp	r22, r1
    358a:	71 05       	cpc	r23, r1
    358c:	61 f4       	brne	.+24     	; 0x35a6 <pow+0x2c>
    358e:	80 38       	cpi	r24, 0x80	; 128
    3590:	bf e3       	ldi	r27, 0x3F	; 63
    3592:	9b 07       	cpc	r25, r27
    3594:	49 f1       	breq	.+82     	; 0x35e8 <pow+0x6e>
    3596:	68 94       	set
    3598:	90 38       	cpi	r25, 0x80	; 128
    359a:	81 05       	cpc	r24, r1
    359c:	61 f0       	breq	.+24     	; 0x35b6 <pow+0x3c>
    359e:	80 38       	cpi	r24, 0x80	; 128
    35a0:	bf ef       	ldi	r27, 0xFF	; 255
    35a2:	9b 07       	cpc	r25, r27
    35a4:	41 f0       	breq	.+16     	; 0x35b6 <pow+0x3c>
    35a6:	99 23       	and	r25, r25
    35a8:	4a f5       	brpl	.+82     	; 0x35fc <pow+0x82>
    35aa:	ff 3f       	cpi	r31, 0xFF	; 255
    35ac:	e1 05       	cpc	r30, r1
    35ae:	31 05       	cpc	r19, r1
    35b0:	21 05       	cpc	r18, r1
    35b2:	19 f1       	breq	.+70     	; 0x35fa <pow+0x80>
    35b4:	e8 94       	clt
    35b6:	08 94       	sec
    35b8:	e7 95       	ror	r30
    35ba:	d9 01       	movw	r26, r18
    35bc:	aa 23       	and	r26, r26
    35be:	29 f4       	brne	.+10     	; 0x35ca <pow+0x50>
    35c0:	ab 2f       	mov	r26, r27
    35c2:	be 2f       	mov	r27, r30
    35c4:	f8 5f       	subi	r31, 0xF8	; 248
    35c6:	d0 f3       	brcs	.-12     	; 0x35bc <pow+0x42>
    35c8:	10 c0       	rjmp	.+32     	; 0x35ea <pow+0x70>
    35ca:	ff 5f       	subi	r31, 0xFF	; 255
    35cc:	70 f4       	brcc	.+28     	; 0x35ea <pow+0x70>
    35ce:	a6 95       	lsr	r26
    35d0:	e0 f7       	brcc	.-8      	; 0x35ca <pow+0x50>
    35d2:	f7 39       	cpi	r31, 0x97	; 151
    35d4:	50 f0       	brcs	.+20     	; 0x35ea <pow+0x70>
    35d6:	19 f0       	breq	.+6      	; 0x35de <pow+0x64>
    35d8:	ff 3a       	cpi	r31, 0xAF	; 175
    35da:	38 f4       	brcc	.+14     	; 0x35ea <pow+0x70>
    35dc:	9f 77       	andi	r25, 0x7F	; 127
    35de:	9f 93       	push	r25
    35e0:	0d d0       	rcall	.+26     	; 0x35fc <pow+0x82>
    35e2:	0f 90       	pop	r0
    35e4:	07 fc       	sbrc	r0, 7
    35e6:	90 58       	subi	r25, 0x80	; 128
    35e8:	08 95       	ret
    35ea:	46 f0       	brts	.+16     	; 0x35fc <pow+0x82>
    35ec:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	70 e0       	ldi	r23, 0x00	; 0
    35f4:	80 e8       	ldi	r24, 0x80	; 128
    35f6:	9f e3       	ldi	r25, 0x3F	; 63
    35f8:	08 95       	ret
    35fa:	4f e7       	ldi	r20, 0x7F	; 127
    35fc:	9f 77       	andi	r25, 0x7F	; 127
    35fe:	5f 93       	push	r21
    3600:	4f 93       	push	r20
    3602:	3f 93       	push	r19
    3604:	2f 93       	push	r18
    3606:	0e 94 b8 1b 	call	0x3770	; 0x3770 <log>
    360a:	2f 91       	pop	r18
    360c:	3f 91       	pop	r19
    360e:	4f 91       	pop	r20
    3610:	5f 91       	pop	r21
    3612:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    3616:	0c 94 15 1b 	jmp	0x362a	; 0x362a <exp>
    361a:	29 f4       	brne	.+10     	; 0x3626 <pow+0xac>
    361c:	16 f0       	brts	.+4      	; 0x3622 <pow+0xa8>
    361e:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    3622:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__fp_zero>
    3626:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>

0000362a <exp>:
    362a:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_splitA>
    362e:	a8 f3       	brcs	.-22     	; 0x361a <pow+0xa0>
    3630:	96 38       	cpi	r25, 0x86	; 134
    3632:	a0 f7       	brcc	.-24     	; 0x361c <pow+0xa2>
    3634:	07 f8       	bld	r0, 7
    3636:	0f 92       	push	r0
    3638:	e8 94       	clt
    363a:	2b e3       	ldi	r18, 0x3B	; 59
    363c:	3a ea       	ldi	r19, 0xAA	; 170
    363e:	48 eb       	ldi	r20, 0xB8	; 184
    3640:	5f e7       	ldi	r21, 0x7F	; 127
    3642:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsf3_pse>
    3646:	0f 92       	push	r0
    3648:	0f 92       	push	r0
    364a:	0f 92       	push	r0
    364c:	4d b7       	in	r20, 0x3d	; 61
    364e:	5e b7       	in	r21, 0x3e	; 62
    3650:	0f 92       	push	r0
    3652:	0e 94 00 1c 	call	0x3800	; 0x3800 <modf>
    3656:	e2 e5       	ldi	r30, 0x52	; 82
    3658:	f2 e0       	ldi	r31, 0x02	; 2
    365a:	0e 94 47 1b 	call	0x368e	; 0x368e <__fp_powser>
    365e:	4f 91       	pop	r20
    3660:	5f 91       	pop	r21
    3662:	ef 91       	pop	r30
    3664:	ff 91       	pop	r31
    3666:	e5 95       	asr	r30
    3668:	ee 1f       	adc	r30, r30
    366a:	ff 1f       	adc	r31, r31
    366c:	49 f0       	breq	.+18     	; 0x3680 <exp+0x56>
    366e:	fe 57       	subi	r31, 0x7E	; 126
    3670:	e0 68       	ori	r30, 0x80	; 128
    3672:	44 27       	eor	r20, r20
    3674:	ee 0f       	add	r30, r30
    3676:	44 1f       	adc	r20, r20
    3678:	fa 95       	dec	r31
    367a:	e1 f7       	brne	.-8      	; 0x3674 <exp+0x4a>
    367c:	41 95       	neg	r20
    367e:	55 0b       	sbc	r21, r21
    3680:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <ldexp>
    3684:	0f 90       	pop	r0
    3686:	07 fe       	sbrs	r0, 7
    3688:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <inverse>
    368c:	08 95       	ret

0000368e <__fp_powser>:
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	1f 93       	push	r17
    3694:	0f 93       	push	r16
    3696:	ff 92       	push	r15
    3698:	ef 92       	push	r14
    369a:	df 92       	push	r13
    369c:	7b 01       	movw	r14, r22
    369e:	8c 01       	movw	r16, r24
    36a0:	68 94       	set
    36a2:	06 c0       	rjmp	.+12     	; 0x36b0 <__fp_powser+0x22>
    36a4:	da 2e       	mov	r13, r26
    36a6:	ef 01       	movw	r28, r30
    36a8:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__mulsf3x>
    36ac:	fe 01       	movw	r30, r28
    36ae:	e8 94       	clt
    36b0:	a5 91       	lpm	r26, Z+
    36b2:	25 91       	lpm	r18, Z+
    36b4:	35 91       	lpm	r19, Z+
    36b6:	45 91       	lpm	r20, Z+
    36b8:	55 91       	lpm	r21, Z+
    36ba:	a6 f3       	brts	.-24     	; 0x36a4 <__fp_powser+0x16>
    36bc:	ef 01       	movw	r28, r30
    36be:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3x>
    36c2:	fe 01       	movw	r30, r28
    36c4:	97 01       	movw	r18, r14
    36c6:	a8 01       	movw	r20, r16
    36c8:	da 94       	dec	r13
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <__fp_powser+0x18>
    36cc:	df 90       	pop	r13
    36ce:	ef 90       	pop	r14
    36d0:	ff 90       	pop	r15
    36d2:	0f 91       	pop	r16
    36d4:	1f 91       	pop	r17
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <inverse>:
    36dc:	9b 01       	movw	r18, r22
    36de:	ac 01       	movw	r20, r24
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	80 e8       	ldi	r24, 0x80	; 128
    36e6:	9f e3       	ldi	r25, 0x3F	; 63
    36e8:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__divsf3>
    36ec:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>
    36f0:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__fp_mpack>

000036f4 <ldexp>:
    36f4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_splitA>
    36f8:	d8 f3       	brcs	.-10     	; 0x36f0 <inverse+0x14>
    36fa:	99 23       	and	r25, r25
    36fc:	c9 f3       	breq	.-14     	; 0x36f0 <inverse+0x14>
    36fe:	94 0f       	add	r25, r20
    3700:	51 1d       	adc	r21, r1
    3702:	a3 f3       	brvs	.-24     	; 0x36ec <inverse+0x10>
    3704:	91 50       	subi	r25, 0x01	; 1
    3706:	50 40       	sbci	r21, 0x00	; 0
    3708:	94 f0       	brlt	.+36     	; 0x372e <ldexp+0x3a>
    370a:	59 f0       	breq	.+22     	; 0x3722 <ldexp+0x2e>
    370c:	88 23       	and	r24, r24
    370e:	32 f0       	brmi	.+12     	; 0x371c <ldexp+0x28>
    3710:	66 0f       	add	r22, r22
    3712:	77 1f       	adc	r23, r23
    3714:	88 1f       	adc	r24, r24
    3716:	91 50       	subi	r25, 0x01	; 1
    3718:	50 40       	sbci	r21, 0x00	; 0
    371a:	c1 f7       	brne	.-16     	; 0x370c <ldexp+0x18>
    371c:	9e 3f       	cpi	r25, 0xFE	; 254
    371e:	51 05       	cpc	r21, r1
    3720:	2c f7       	brge	.-54     	; 0x36ec <inverse+0x10>
    3722:	88 0f       	add	r24, r24
    3724:	91 1d       	adc	r25, r1
    3726:	96 95       	lsr	r25
    3728:	87 95       	ror	r24
    372a:	97 f9       	bld	r25, 7
    372c:	08 95       	ret
    372e:	5f 3f       	cpi	r21, 0xFF	; 255
    3730:	ac f0       	brlt	.+42     	; 0x375c <ldexp+0x68>
    3732:	98 3e       	cpi	r25, 0xE8	; 232
    3734:	9c f0       	brlt	.+38     	; 0x375c <ldexp+0x68>
    3736:	bb 27       	eor	r27, r27
    3738:	86 95       	lsr	r24
    373a:	77 95       	ror	r23
    373c:	67 95       	ror	r22
    373e:	b7 95       	ror	r27
    3740:	08 f4       	brcc	.+2      	; 0x3744 <ldexp+0x50>
    3742:	b1 60       	ori	r27, 0x01	; 1
    3744:	93 95       	inc	r25
    3746:	c1 f7       	brne	.-16     	; 0x3738 <ldexp+0x44>
    3748:	bb 0f       	add	r27, r27
    374a:	58 f7       	brcc	.-42     	; 0x3722 <ldexp+0x2e>
    374c:	11 f4       	brne	.+4      	; 0x3752 <ldexp+0x5e>
    374e:	60 ff       	sbrs	r22, 0
    3750:	e8 cf       	rjmp	.-48     	; 0x3722 <ldexp+0x2e>
    3752:	6f 5f       	subi	r22, 0xFF	; 255
    3754:	7f 4f       	sbci	r23, 0xFF	; 255
    3756:	8f 4f       	sbci	r24, 0xFF	; 255
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	e3 cf       	rjmp	.-58     	; 0x3722 <ldexp+0x2e>
    375c:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__fp_szero>
    3760:	16 f0       	brts	.+4      	; 0x3766 <ldexp+0x72>
    3762:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__fp_mpack>
    3766:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__fp_nan>
    376a:	68 94       	set
    376c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__fp_inf>

00003770 <log>:
    3770:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_splitA>
    3774:	a8 f3       	brcs	.-22     	; 0x3760 <ldexp+0x6c>
    3776:	99 23       	and	r25, r25
    3778:	c1 f3       	breq	.-16     	; 0x376a <ldexp+0x76>
    377a:	ae f3       	brts	.-22     	; 0x3766 <ldexp+0x72>
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	1f 93       	push	r17
    3782:	0f 93       	push	r16
    3784:	ff 92       	push	r15
    3786:	c9 2f       	mov	r28, r25
    3788:	dd 27       	eor	r29, r29
    378a:	88 23       	and	r24, r24
    378c:	2a f0       	brmi	.+10     	; 0x3798 <log+0x28>
    378e:	21 97       	sbiw	r28, 0x01	; 1
    3790:	66 0f       	add	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	88 1f       	adc	r24, r24
    3796:	da f7       	brpl	.-10     	; 0x378e <log+0x1e>
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e8       	ldi	r20, 0x80	; 128
    379e:	5f eb       	ldi	r21, 0xBF	; 191
    37a0:	9f e3       	ldi	r25, 0x3F	; 63
    37a2:	88 39       	cpi	r24, 0x98	; 152
    37a4:	20 f0       	brcs	.+8      	; 0x37ae <log+0x3e>
    37a6:	80 3e       	cpi	r24, 0xE0	; 224
    37a8:	38 f0       	brcs	.+14     	; 0x37b8 <log+0x48>
    37aa:	21 96       	adiw	r28, 0x01	; 1
    37ac:	8f 77       	andi	r24, 0x7F	; 127
    37ae:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    37b2:	ea e7       	ldi	r30, 0x7A	; 122
    37b4:	f2 e0       	ldi	r31, 0x02	; 2
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <log+0x50>
    37b8:	0e 94 85 18 	call	0x310a	; 0x310a <__addsf3>
    37bc:	e7 ea       	ldi	r30, 0xA7	; 167
    37be:	f2 e0       	ldi	r31, 0x02	; 2
    37c0:	0e 94 47 1b 	call	0x368e	; 0x368e <__fp_powser>
    37c4:	8b 01       	movw	r16, r22
    37c6:	be 01       	movw	r22, r28
    37c8:	ec 01       	movw	r28, r24
    37ca:	fb 2e       	mov	r15, r27
    37cc:	6f 57       	subi	r22, 0x7F	; 127
    37ce:	71 09       	sbc	r23, r1
    37d0:	75 95       	asr	r23
    37d2:	77 1f       	adc	r23, r23
    37d4:	88 0b       	sbc	r24, r24
    37d6:	99 0b       	sbc	r25, r25
    37d8:	0e 94 9b 19 	call	0x3336	; 0x3336 <__floatsisf>
    37dc:	28 e1       	ldi	r18, 0x18	; 24
    37de:	32 e7       	ldi	r19, 0x72	; 114
    37e0:	41 e3       	ldi	r20, 0x31	; 49
    37e2:	5f e3       	ldi	r21, 0x3F	; 63
    37e4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__mulsf3x>
    37e8:	af 2d       	mov	r26, r15
    37ea:	98 01       	movw	r18, r16
    37ec:	ae 01       	movw	r20, r28
    37ee:	ff 90       	pop	r15
    37f0:	0f 91       	pop	r16
    37f2:	1f 91       	pop	r17
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3x>
    37fc:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_round>

00003800 <modf>:
    3800:	fa 01       	movw	r30, r20
    3802:	dc 01       	movw	r26, r24
    3804:	aa 0f       	add	r26, r26
    3806:	bb 1f       	adc	r27, r27
    3808:	9b 01       	movw	r18, r22
    380a:	ac 01       	movw	r20, r24
    380c:	bf 57       	subi	r27, 0x7F	; 127
    380e:	28 f4       	brcc	.+10     	; 0x381a <modf+0x1a>
    3810:	22 27       	eor	r18, r18
    3812:	33 27       	eor	r19, r19
    3814:	44 27       	eor	r20, r20
    3816:	50 78       	andi	r21, 0x80	; 128
    3818:	20 c0       	rjmp	.+64     	; 0x385a <modf+0x5a>
    381a:	b7 51       	subi	r27, 0x17	; 23
    381c:	90 f4       	brcc	.+36     	; 0x3842 <modf+0x42>
    381e:	ab 2f       	mov	r26, r27
    3820:	00 24       	eor	r0, r0
    3822:	46 95       	lsr	r20
    3824:	37 95       	ror	r19
    3826:	27 95       	ror	r18
    3828:	01 1c       	adc	r0, r1
    382a:	a3 95       	inc	r26
    382c:	d2 f3       	brmi	.-12     	; 0x3822 <modf+0x22>
    382e:	00 20       	and	r0, r0
    3830:	71 f0       	breq	.+28     	; 0x384e <modf+0x4e>
    3832:	22 0f       	add	r18, r18
    3834:	33 1f       	adc	r19, r19
    3836:	44 1f       	adc	r20, r20
    3838:	b3 95       	inc	r27
    383a:	da f3       	brmi	.-10     	; 0x3832 <modf+0x32>
    383c:	0e d0       	rcall	.+28     	; 0x385a <modf+0x5a>
    383e:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__subsf3>
    3842:	61 30       	cpi	r22, 0x01	; 1
    3844:	71 05       	cpc	r23, r1
    3846:	a0 e8       	ldi	r26, 0x80	; 128
    3848:	8a 07       	cpc	r24, r26
    384a:	b9 46       	sbci	r27, 0x69	; 105
    384c:	30 f4       	brcc	.+12     	; 0x385a <modf+0x5a>
    384e:	9b 01       	movw	r18, r22
    3850:	ac 01       	movw	r20, r24
    3852:	66 27       	eor	r22, r22
    3854:	77 27       	eor	r23, r23
    3856:	88 27       	eor	r24, r24
    3858:	90 78       	andi	r25, 0x80	; 128
    385a:	30 96       	adiw	r30, 0x00	; 0
    385c:	21 f0       	breq	.+8      	; 0x3866 <modf+0x66>
    385e:	20 83       	st	Z, r18
    3860:	31 83       	std	Z+1, r19	; 0x01
    3862:	42 83       	std	Z+2, r20	; 0x02
    3864:	53 83       	std	Z+3, r21	; 0x03
    3866:	08 95       	ret

00003868 <__fp_mpack>:
    3868:	9f 3f       	cpi	r25, 0xFF	; 255
    386a:	31 f0       	breq	.+12     	; 0x3878 <__fp_mpack_finite+0xc>

0000386c <__fp_mpack_finite>:
    386c:	91 50       	subi	r25, 0x01	; 1
    386e:	20 f4       	brcc	.+8      	; 0x3878 <__fp_mpack_finite+0xc>
    3870:	87 95       	ror	r24
    3872:	77 95       	ror	r23
    3874:	67 95       	ror	r22
    3876:	b7 95       	ror	r27
    3878:	88 0f       	add	r24, r24
    387a:	91 1d       	adc	r25, r1
    387c:	96 95       	lsr	r25
    387e:	87 95       	ror	r24
    3880:	97 f9       	bld	r25, 7
    3882:	08 95       	ret

00003884 <vfprintf>:
    3884:	a0 e1       	ldi	r26, 0x10	; 16
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e8 e4       	ldi	r30, 0x48	; 72
    388a:	fc e1       	ldi	r31, 0x1C	; 28
    388c:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__>
    3890:	7c 01       	movw	r14, r24
    3892:	1b 01       	movw	r2, r22
    3894:	6a 01       	movw	r12, r20
    3896:	fc 01       	movw	r30, r24
    3898:	17 82       	std	Z+7, r1	; 0x07
    389a:	16 82       	std	Z+6, r1	; 0x06
    389c:	83 81       	ldd	r24, Z+3	; 0x03
    389e:	81 ff       	sbrs	r24, 1
    38a0:	44 c3       	rjmp	.+1672   	; 0x3f2a <vfprintf+0x6a6>
    38a2:	9e 01       	movw	r18, r28
    38a4:	2f 5f       	subi	r18, 0xFF	; 255
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	39 01       	movw	r6, r18
    38aa:	f7 01       	movw	r30, r14
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	f1 01       	movw	r30, r2
    38b0:	93 fd       	sbrc	r25, 3
    38b2:	85 91       	lpm	r24, Z+
    38b4:	93 ff       	sbrs	r25, 3
    38b6:	81 91       	ld	r24, Z+
    38b8:	1f 01       	movw	r2, r30
    38ba:	88 23       	and	r24, r24
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <vfprintf+0x3c>
    38be:	31 c3       	rjmp	.+1634   	; 0x3f22 <vfprintf+0x69e>
    38c0:	85 32       	cpi	r24, 0x25	; 37
    38c2:	39 f4       	brne	.+14     	; 0x38d2 <vfprintf+0x4e>
    38c4:	93 fd       	sbrc	r25, 3
    38c6:	85 91       	lpm	r24, Z+
    38c8:	93 ff       	sbrs	r25, 3
    38ca:	81 91       	ld	r24, Z+
    38cc:	1f 01       	movw	r2, r30
    38ce:	85 32       	cpi	r24, 0x25	; 37
    38d0:	39 f4       	brne	.+14     	; 0x38e0 <vfprintf+0x5c>
    38d2:	b7 01       	movw	r22, r14
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    38da:	56 01       	movw	r10, r12
    38dc:	65 01       	movw	r12, r10
    38de:	e5 cf       	rjmp	.-54     	; 0x38aa <vfprintf+0x26>
    38e0:	10 e0       	ldi	r17, 0x00	; 0
    38e2:	51 2c       	mov	r5, r1
    38e4:	91 2c       	mov	r9, r1
    38e6:	ff e1       	ldi	r31, 0x1F	; 31
    38e8:	f9 15       	cp	r31, r9
    38ea:	d8 f0       	brcs	.+54     	; 0x3922 <vfprintf+0x9e>
    38ec:	8b 32       	cpi	r24, 0x2B	; 43
    38ee:	79 f0       	breq	.+30     	; 0x390e <vfprintf+0x8a>
    38f0:	38 f4       	brcc	.+14     	; 0x3900 <vfprintf+0x7c>
    38f2:	80 32       	cpi	r24, 0x20	; 32
    38f4:	79 f0       	breq	.+30     	; 0x3914 <vfprintf+0x90>
    38f6:	83 32       	cpi	r24, 0x23	; 35
    38f8:	a1 f4       	brne	.+40     	; 0x3922 <vfprintf+0x9e>
    38fa:	f9 2d       	mov	r31, r9
    38fc:	f0 61       	ori	r31, 0x10	; 16
    38fe:	2e c0       	rjmp	.+92     	; 0x395c <vfprintf+0xd8>
    3900:	8d 32       	cpi	r24, 0x2D	; 45
    3902:	61 f0       	breq	.+24     	; 0x391c <vfprintf+0x98>
    3904:	80 33       	cpi	r24, 0x30	; 48
    3906:	69 f4       	brne	.+26     	; 0x3922 <vfprintf+0x9e>
    3908:	29 2d       	mov	r18, r9
    390a:	21 60       	ori	r18, 0x01	; 1
    390c:	2d c0       	rjmp	.+90     	; 0x3968 <vfprintf+0xe4>
    390e:	39 2d       	mov	r19, r9
    3910:	32 60       	ori	r19, 0x02	; 2
    3912:	93 2e       	mov	r9, r19
    3914:	89 2d       	mov	r24, r9
    3916:	84 60       	ori	r24, 0x04	; 4
    3918:	98 2e       	mov	r9, r24
    391a:	2a c0       	rjmp	.+84     	; 0x3970 <vfprintf+0xec>
    391c:	e9 2d       	mov	r30, r9
    391e:	e8 60       	ori	r30, 0x08	; 8
    3920:	15 c0       	rjmp	.+42     	; 0x394c <vfprintf+0xc8>
    3922:	97 fc       	sbrc	r9, 7
    3924:	2d c0       	rjmp	.+90     	; 0x3980 <vfprintf+0xfc>
    3926:	20 ed       	ldi	r18, 0xD0	; 208
    3928:	28 0f       	add	r18, r24
    392a:	2a 30       	cpi	r18, 0x0A	; 10
    392c:	88 f4       	brcc	.+34     	; 0x3950 <vfprintf+0xcc>
    392e:	96 fe       	sbrs	r9, 6
    3930:	06 c0       	rjmp	.+12     	; 0x393e <vfprintf+0xba>
    3932:	3a e0       	ldi	r19, 0x0A	; 10
    3934:	13 9f       	mul	r17, r19
    3936:	20 0d       	add	r18, r0
    3938:	11 24       	eor	r1, r1
    393a:	12 2f       	mov	r17, r18
    393c:	19 c0       	rjmp	.+50     	; 0x3970 <vfprintf+0xec>
    393e:	8a e0       	ldi	r24, 0x0A	; 10
    3940:	58 9e       	mul	r5, r24
    3942:	20 0d       	add	r18, r0
    3944:	11 24       	eor	r1, r1
    3946:	52 2e       	mov	r5, r18
    3948:	e9 2d       	mov	r30, r9
    394a:	e0 62       	ori	r30, 0x20	; 32
    394c:	9e 2e       	mov	r9, r30
    394e:	10 c0       	rjmp	.+32     	; 0x3970 <vfprintf+0xec>
    3950:	8e 32       	cpi	r24, 0x2E	; 46
    3952:	31 f4       	brne	.+12     	; 0x3960 <vfprintf+0xdc>
    3954:	96 fc       	sbrc	r9, 6
    3956:	e5 c2       	rjmp	.+1482   	; 0x3f22 <vfprintf+0x69e>
    3958:	f9 2d       	mov	r31, r9
    395a:	f0 64       	ori	r31, 0x40	; 64
    395c:	9f 2e       	mov	r9, r31
    395e:	08 c0       	rjmp	.+16     	; 0x3970 <vfprintf+0xec>
    3960:	8c 36       	cpi	r24, 0x6C	; 108
    3962:	21 f4       	brne	.+8      	; 0x396c <vfprintf+0xe8>
    3964:	29 2d       	mov	r18, r9
    3966:	20 68       	ori	r18, 0x80	; 128
    3968:	92 2e       	mov	r9, r18
    396a:	02 c0       	rjmp	.+4      	; 0x3970 <vfprintf+0xec>
    396c:	88 36       	cpi	r24, 0x68	; 104
    396e:	41 f4       	brne	.+16     	; 0x3980 <vfprintf+0xfc>
    3970:	f1 01       	movw	r30, r2
    3972:	93 fd       	sbrc	r25, 3
    3974:	85 91       	lpm	r24, Z+
    3976:	93 ff       	sbrs	r25, 3
    3978:	81 91       	ld	r24, Z+
    397a:	1f 01       	movw	r2, r30
    397c:	81 11       	cpse	r24, r1
    397e:	b3 cf       	rjmp	.-154    	; 0x38e6 <vfprintf+0x62>
    3980:	9b eb       	ldi	r25, 0xBB	; 187
    3982:	98 0f       	add	r25, r24
    3984:	93 30       	cpi	r25, 0x03	; 3
    3986:	20 f4       	brcc	.+8      	; 0x3990 <vfprintf+0x10c>
    3988:	99 2d       	mov	r25, r9
    398a:	90 61       	ori	r25, 0x10	; 16
    398c:	80 5e       	subi	r24, 0xE0	; 224
    398e:	07 c0       	rjmp	.+14     	; 0x399e <vfprintf+0x11a>
    3990:	9b e9       	ldi	r25, 0x9B	; 155
    3992:	98 0f       	add	r25, r24
    3994:	93 30       	cpi	r25, 0x03	; 3
    3996:	08 f0       	brcs	.+2      	; 0x399a <vfprintf+0x116>
    3998:	66 c1       	rjmp	.+716    	; 0x3c66 <vfprintf+0x3e2>
    399a:	99 2d       	mov	r25, r9
    399c:	9f 7e       	andi	r25, 0xEF	; 239
    399e:	96 ff       	sbrs	r25, 6
    39a0:	16 e0       	ldi	r17, 0x06	; 6
    39a2:	9f 73       	andi	r25, 0x3F	; 63
    39a4:	99 2e       	mov	r9, r25
    39a6:	85 36       	cpi	r24, 0x65	; 101
    39a8:	19 f4       	brne	.+6      	; 0x39b0 <vfprintf+0x12c>
    39aa:	90 64       	ori	r25, 0x40	; 64
    39ac:	99 2e       	mov	r9, r25
    39ae:	08 c0       	rjmp	.+16     	; 0x39c0 <vfprintf+0x13c>
    39b0:	86 36       	cpi	r24, 0x66	; 102
    39b2:	21 f4       	brne	.+8      	; 0x39bc <vfprintf+0x138>
    39b4:	39 2f       	mov	r19, r25
    39b6:	30 68       	ori	r19, 0x80	; 128
    39b8:	93 2e       	mov	r9, r19
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <vfprintf+0x13c>
    39bc:	11 11       	cpse	r17, r1
    39be:	11 50       	subi	r17, 0x01	; 1
    39c0:	97 fe       	sbrs	r9, 7
    39c2:	07 c0       	rjmp	.+14     	; 0x39d2 <vfprintf+0x14e>
    39c4:	1c 33       	cpi	r17, 0x3C	; 60
    39c6:	50 f4       	brcc	.+20     	; 0x39dc <vfprintf+0x158>
    39c8:	44 24       	eor	r4, r4
    39ca:	43 94       	inc	r4
    39cc:	41 0e       	add	r4, r17
    39ce:	27 e0       	ldi	r18, 0x07	; 7
    39d0:	0b c0       	rjmp	.+22     	; 0x39e8 <vfprintf+0x164>
    39d2:	18 30       	cpi	r17, 0x08	; 8
    39d4:	38 f0       	brcs	.+14     	; 0x39e4 <vfprintf+0x160>
    39d6:	27 e0       	ldi	r18, 0x07	; 7
    39d8:	17 e0       	ldi	r17, 0x07	; 7
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <vfprintf+0x162>
    39dc:	27 e0       	ldi	r18, 0x07	; 7
    39de:	9c e3       	ldi	r25, 0x3C	; 60
    39e0:	49 2e       	mov	r4, r25
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <vfprintf+0x164>
    39e4:	21 2f       	mov	r18, r17
    39e6:	41 2c       	mov	r4, r1
    39e8:	56 01       	movw	r10, r12
    39ea:	84 e0       	ldi	r24, 0x04	; 4
    39ec:	a8 0e       	add	r10, r24
    39ee:	b1 1c       	adc	r11, r1
    39f0:	f6 01       	movw	r30, r12
    39f2:	60 81       	ld	r22, Z
    39f4:	71 81       	ldd	r23, Z+1	; 0x01
    39f6:	82 81       	ldd	r24, Z+2	; 0x02
    39f8:	93 81       	ldd	r25, Z+3	; 0x03
    39fa:	04 2d       	mov	r16, r4
    39fc:	a3 01       	movw	r20, r6
    39fe:	0e 94 33 20 	call	0x4066	; 0x4066 <__ftoa_engine>
    3a02:	6c 01       	movw	r12, r24
    3a04:	f9 81       	ldd	r31, Y+1	; 0x01
    3a06:	fc 87       	std	Y+12, r31	; 0x0c
    3a08:	f0 ff       	sbrs	r31, 0
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <vfprintf+0x18c>
    3a0c:	f3 ff       	sbrs	r31, 3
    3a0e:	06 c0       	rjmp	.+12     	; 0x3a1c <vfprintf+0x198>
    3a10:	91 fc       	sbrc	r9, 1
    3a12:	06 c0       	rjmp	.+12     	; 0x3a20 <vfprintf+0x19c>
    3a14:	92 fe       	sbrs	r9, 2
    3a16:	06 c0       	rjmp	.+12     	; 0x3a24 <vfprintf+0x1a0>
    3a18:	00 e2       	ldi	r16, 0x20	; 32
    3a1a:	05 c0       	rjmp	.+10     	; 0x3a26 <vfprintf+0x1a2>
    3a1c:	0d e2       	ldi	r16, 0x2D	; 45
    3a1e:	03 c0       	rjmp	.+6      	; 0x3a26 <vfprintf+0x1a2>
    3a20:	0b e2       	ldi	r16, 0x2B	; 43
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <vfprintf+0x1a2>
    3a24:	00 e0       	ldi	r16, 0x00	; 0
    3a26:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a28:	8c 70       	andi	r24, 0x0C	; 12
    3a2a:	19 f0       	breq	.+6      	; 0x3a32 <vfprintf+0x1ae>
    3a2c:	01 11       	cpse	r16, r1
    3a2e:	5a c2       	rjmp	.+1204   	; 0x3ee4 <vfprintf+0x660>
    3a30:	9b c2       	rjmp	.+1334   	; 0x3f68 <vfprintf+0x6e4>
    3a32:	97 fe       	sbrs	r9, 7
    3a34:	10 c0       	rjmp	.+32     	; 0x3a56 <vfprintf+0x1d2>
    3a36:	4c 0c       	add	r4, r12
    3a38:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a3a:	f4 ff       	sbrs	r31, 4
    3a3c:	04 c0       	rjmp	.+8      	; 0x3a46 <vfprintf+0x1c2>
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	81 33       	cpi	r24, 0x31	; 49
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <vfprintf+0x1c2>
    3a44:	4a 94       	dec	r4
    3a46:	14 14       	cp	r1, r4
    3a48:	74 f5       	brge	.+92     	; 0x3aa6 <vfprintf+0x222>
    3a4a:	28 e0       	ldi	r18, 0x08	; 8
    3a4c:	24 15       	cp	r18, r4
    3a4e:	78 f5       	brcc	.+94     	; 0x3aae <vfprintf+0x22a>
    3a50:	88 e0       	ldi	r24, 0x08	; 8
    3a52:	48 2e       	mov	r4, r24
    3a54:	2c c0       	rjmp	.+88     	; 0x3aae <vfprintf+0x22a>
    3a56:	96 fc       	sbrc	r9, 6
    3a58:	2a c0       	rjmp	.+84     	; 0x3aae <vfprintf+0x22a>
    3a5a:	81 2f       	mov	r24, r17
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	8c 15       	cp	r24, r12
    3a60:	9d 05       	cpc	r25, r13
    3a62:	9c f0       	brlt	.+38     	; 0x3a8a <vfprintf+0x206>
    3a64:	3c ef       	ldi	r19, 0xFC	; 252
    3a66:	c3 16       	cp	r12, r19
    3a68:	3f ef       	ldi	r19, 0xFF	; 255
    3a6a:	d3 06       	cpc	r13, r19
    3a6c:	74 f0       	brlt	.+28     	; 0x3a8a <vfprintf+0x206>
    3a6e:	89 2d       	mov	r24, r9
    3a70:	80 68       	ori	r24, 0x80	; 128
    3a72:	98 2e       	mov	r9, r24
    3a74:	0a c0       	rjmp	.+20     	; 0x3a8a <vfprintf+0x206>
    3a76:	e2 e0       	ldi	r30, 0x02	; 2
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	ec 0f       	add	r30, r28
    3a7c:	fd 1f       	adc	r31, r29
    3a7e:	e1 0f       	add	r30, r17
    3a80:	f1 1d       	adc	r31, r1
    3a82:	80 81       	ld	r24, Z
    3a84:	80 33       	cpi	r24, 0x30	; 48
    3a86:	19 f4       	brne	.+6      	; 0x3a8e <vfprintf+0x20a>
    3a88:	11 50       	subi	r17, 0x01	; 1
    3a8a:	11 11       	cpse	r17, r1
    3a8c:	f4 cf       	rjmp	.-24     	; 0x3a76 <vfprintf+0x1f2>
    3a8e:	97 fe       	sbrs	r9, 7
    3a90:	0e c0       	rjmp	.+28     	; 0x3aae <vfprintf+0x22a>
    3a92:	44 24       	eor	r4, r4
    3a94:	43 94       	inc	r4
    3a96:	41 0e       	add	r4, r17
    3a98:	81 2f       	mov	r24, r17
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	c8 16       	cp	r12, r24
    3a9e:	d9 06       	cpc	r13, r25
    3aa0:	2c f4       	brge	.+10     	; 0x3aac <vfprintf+0x228>
    3aa2:	1c 19       	sub	r17, r12
    3aa4:	04 c0       	rjmp	.+8      	; 0x3aae <vfprintf+0x22a>
    3aa6:	44 24       	eor	r4, r4
    3aa8:	43 94       	inc	r4
    3aaa:	01 c0       	rjmp	.+2      	; 0x3aae <vfprintf+0x22a>
    3aac:	10 e0       	ldi	r17, 0x00	; 0
    3aae:	97 fe       	sbrs	r9, 7
    3ab0:	06 c0       	rjmp	.+12     	; 0x3abe <vfprintf+0x23a>
    3ab2:	1c 14       	cp	r1, r12
    3ab4:	1d 04       	cpc	r1, r13
    3ab6:	34 f4       	brge	.+12     	; 0x3ac4 <vfprintf+0x240>
    3ab8:	c6 01       	movw	r24, r12
    3aba:	01 96       	adiw	r24, 0x01	; 1
    3abc:	05 c0       	rjmp	.+10     	; 0x3ac8 <vfprintf+0x244>
    3abe:	85 e0       	ldi	r24, 0x05	; 5
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <vfprintf+0x244>
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	01 11       	cpse	r16, r1
    3aca:	01 96       	adiw	r24, 0x01	; 1
    3acc:	11 23       	and	r17, r17
    3ace:	31 f0       	breq	.+12     	; 0x3adc <vfprintf+0x258>
    3ad0:	21 2f       	mov	r18, r17
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	2f 5f       	subi	r18, 0xFF	; 255
    3ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad8:	82 0f       	add	r24, r18
    3ada:	93 1f       	adc	r25, r19
    3adc:	25 2d       	mov	r18, r5
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	82 17       	cp	r24, r18
    3ae2:	93 07       	cpc	r25, r19
    3ae4:	14 f4       	brge	.+4      	; 0x3aea <vfprintf+0x266>
    3ae6:	58 1a       	sub	r5, r24
    3ae8:	01 c0       	rjmp	.+2      	; 0x3aec <vfprintf+0x268>
    3aea:	51 2c       	mov	r5, r1
    3aec:	89 2d       	mov	r24, r9
    3aee:	89 70       	andi	r24, 0x09	; 9
    3af0:	49 f4       	brne	.+18     	; 0x3b04 <vfprintf+0x280>
    3af2:	55 20       	and	r5, r5
    3af4:	39 f0       	breq	.+14     	; 0x3b04 <vfprintf+0x280>
    3af6:	b7 01       	movw	r22, r14
    3af8:	80 e2       	ldi	r24, 0x20	; 32
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3b00:	5a 94       	dec	r5
    3b02:	f7 cf       	rjmp	.-18     	; 0x3af2 <vfprintf+0x26e>
    3b04:	00 23       	and	r16, r16
    3b06:	29 f0       	breq	.+10     	; 0x3b12 <vfprintf+0x28e>
    3b08:	b7 01       	movw	r22, r14
    3b0a:	80 2f       	mov	r24, r16
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3b12:	93 fc       	sbrc	r9, 3
    3b14:	09 c0       	rjmp	.+18     	; 0x3b28 <vfprintf+0x2a4>
    3b16:	55 20       	and	r5, r5
    3b18:	39 f0       	breq	.+14     	; 0x3b28 <vfprintf+0x2a4>
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	80 e3       	ldi	r24, 0x30	; 48
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3b24:	5a 94       	dec	r5
    3b26:	f7 cf       	rjmp	.-18     	; 0x3b16 <vfprintf+0x292>
    3b28:	97 fe       	sbrs	r9, 7
    3b2a:	4c c0       	rjmp	.+152    	; 0x3bc4 <vfprintf+0x340>
    3b2c:	46 01       	movw	r8, r12
    3b2e:	d7 fe       	sbrs	r13, 7
    3b30:	02 c0       	rjmp	.+4      	; 0x3b36 <vfprintf+0x2b2>
    3b32:	81 2c       	mov	r8, r1
    3b34:	91 2c       	mov	r9, r1
    3b36:	c6 01       	movw	r24, r12
    3b38:	88 19       	sub	r24, r8
    3b3a:	99 09       	sbc	r25, r9
    3b3c:	f3 01       	movw	r30, r6
    3b3e:	e8 0f       	add	r30, r24
    3b40:	f9 1f       	adc	r31, r25
    3b42:	fe 87       	std	Y+14, r31	; 0x0e
    3b44:	ed 87       	std	Y+13, r30	; 0x0d
    3b46:	96 01       	movw	r18, r12
    3b48:	24 19       	sub	r18, r4
    3b4a:	31 09       	sbc	r19, r1
    3b4c:	38 8b       	std	Y+16, r19	; 0x10
    3b4e:	2f 87       	std	Y+15, r18	; 0x0f
    3b50:	01 2f       	mov	r16, r17
    3b52:	10 e0       	ldi	r17, 0x00	; 0
    3b54:	11 95       	neg	r17
    3b56:	01 95       	neg	r16
    3b58:	11 09       	sbc	r17, r1
    3b5a:	3f ef       	ldi	r19, 0xFF	; 255
    3b5c:	83 16       	cp	r8, r19
    3b5e:	93 06       	cpc	r9, r19
    3b60:	29 f4       	brne	.+10     	; 0x3b6c <vfprintf+0x2e8>
    3b62:	b7 01       	movw	r22, r14
    3b64:	8e e2       	ldi	r24, 0x2E	; 46
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3b6c:	c8 14       	cp	r12, r8
    3b6e:	d9 04       	cpc	r13, r9
    3b70:	4c f0       	brlt	.+18     	; 0x3b84 <vfprintf+0x300>
    3b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b74:	98 89       	ldd	r25, Y+16	; 0x10
    3b76:	88 15       	cp	r24, r8
    3b78:	99 05       	cpc	r25, r9
    3b7a:	24 f4       	brge	.+8      	; 0x3b84 <vfprintf+0x300>
    3b7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3b7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3b80:	81 81       	ldd	r24, Z+1	; 0x01
    3b82:	01 c0       	rjmp	.+2      	; 0x3b86 <vfprintf+0x302>
    3b84:	80 e3       	ldi	r24, 0x30	; 48
    3b86:	f1 e0       	ldi	r31, 0x01	; 1
    3b88:	8f 1a       	sub	r8, r31
    3b8a:	91 08       	sbc	r9, r1
    3b8c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b8e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b90:	2f 5f       	subi	r18, 0xFF	; 255
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	3e 87       	std	Y+14, r19	; 0x0e
    3b96:	2d 87       	std	Y+13, r18	; 0x0d
    3b98:	80 16       	cp	r8, r16
    3b9a:	91 06       	cpc	r9, r17
    3b9c:	2c f0       	brlt	.+10     	; 0x3ba8 <vfprintf+0x324>
    3b9e:	b7 01       	movw	r22, r14
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3ba6:	d9 cf       	rjmp	.-78     	; 0x3b5a <vfprintf+0x2d6>
    3ba8:	c8 14       	cp	r12, r8
    3baa:	d9 04       	cpc	r13, r9
    3bac:	41 f4       	brne	.+16     	; 0x3bbe <vfprintf+0x33a>
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	96 33       	cpi	r25, 0x36	; 54
    3bb2:	20 f4       	brcc	.+8      	; 0x3bbc <vfprintf+0x338>
    3bb4:	95 33       	cpi	r25, 0x35	; 53
    3bb6:	19 f4       	brne	.+6      	; 0x3bbe <vfprintf+0x33a>
    3bb8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bba:	34 ff       	sbrs	r19, 4
    3bbc:	81 e3       	ldi	r24, 0x31	; 49
    3bbe:	b7 01       	movw	r22, r14
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	4e c0       	rjmp	.+156    	; 0x3c60 <vfprintf+0x3dc>
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	81 33       	cpi	r24, 0x31	; 49
    3bc8:	19 f0       	breq	.+6      	; 0x3bd0 <vfprintf+0x34c>
    3bca:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bcc:	9f 7e       	andi	r25, 0xEF	; 239
    3bce:	9c 87       	std	Y+12, r25	; 0x0c
    3bd0:	b7 01       	movw	r22, r14
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3bd8:	11 11       	cpse	r17, r1
    3bda:	05 c0       	rjmp	.+10     	; 0x3be6 <vfprintf+0x362>
    3bdc:	94 fc       	sbrc	r9, 4
    3bde:	18 c0       	rjmp	.+48     	; 0x3c10 <vfprintf+0x38c>
    3be0:	85 e6       	ldi	r24, 0x65	; 101
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	17 c0       	rjmp	.+46     	; 0x3c14 <vfprintf+0x390>
    3be6:	b7 01       	movw	r22, r14
    3be8:	8e e2       	ldi	r24, 0x2E	; 46
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3bf0:	1e 5f       	subi	r17, 0xFE	; 254
    3bf2:	82 e0       	ldi	r24, 0x02	; 2
    3bf4:	01 e0       	ldi	r16, 0x01	; 1
    3bf6:	08 0f       	add	r16, r24
    3bf8:	f3 01       	movw	r30, r6
    3bfa:	e8 0f       	add	r30, r24
    3bfc:	f1 1d       	adc	r31, r1
    3bfe:	80 81       	ld	r24, Z
    3c00:	b7 01       	movw	r22, r14
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3c08:	80 2f       	mov	r24, r16
    3c0a:	01 13       	cpse	r16, r17
    3c0c:	f3 cf       	rjmp	.-26     	; 0x3bf4 <vfprintf+0x370>
    3c0e:	e6 cf       	rjmp	.-52     	; 0x3bdc <vfprintf+0x358>
    3c10:	85 e4       	ldi	r24, 0x45	; 69
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	b7 01       	movw	r22, r14
    3c16:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3c1a:	d7 fc       	sbrc	r13, 7
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <vfprintf+0x3a6>
    3c1e:	c1 14       	cp	r12, r1
    3c20:	d1 04       	cpc	r13, r1
    3c22:	41 f4       	brne	.+16     	; 0x3c34 <vfprintf+0x3b0>
    3c24:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c26:	e4 ff       	sbrs	r30, 4
    3c28:	05 c0       	rjmp	.+10     	; 0x3c34 <vfprintf+0x3b0>
    3c2a:	d1 94       	neg	r13
    3c2c:	c1 94       	neg	r12
    3c2e:	d1 08       	sbc	r13, r1
    3c30:	8d e2       	ldi	r24, 0x2D	; 45
    3c32:	01 c0       	rjmp	.+2      	; 0x3c36 <vfprintf+0x3b2>
    3c34:	8b e2       	ldi	r24, 0x2B	; 43
    3c36:	b7 01       	movw	r22, r14
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3c3e:	80 e3       	ldi	r24, 0x30	; 48
    3c40:	2a e0       	ldi	r18, 0x0A	; 10
    3c42:	c2 16       	cp	r12, r18
    3c44:	d1 04       	cpc	r13, r1
    3c46:	2c f0       	brlt	.+10     	; 0x3c52 <vfprintf+0x3ce>
    3c48:	8f 5f       	subi	r24, 0xFF	; 255
    3c4a:	fa e0       	ldi	r31, 0x0A	; 10
    3c4c:	cf 1a       	sub	r12, r31
    3c4e:	d1 08       	sbc	r13, r1
    3c50:	f7 cf       	rjmp	.-18     	; 0x3c40 <vfprintf+0x3bc>
    3c52:	b7 01       	movw	r22, r14
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3c5a:	b7 01       	movw	r22, r14
    3c5c:	c6 01       	movw	r24, r12
    3c5e:	c0 96       	adiw	r24, 0x30	; 48
    3c60:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3c64:	54 c1       	rjmp	.+680    	; 0x3f0e <vfprintf+0x68a>
    3c66:	83 36       	cpi	r24, 0x63	; 99
    3c68:	31 f0       	breq	.+12     	; 0x3c76 <vfprintf+0x3f2>
    3c6a:	83 37       	cpi	r24, 0x73	; 115
    3c6c:	79 f0       	breq	.+30     	; 0x3c8c <vfprintf+0x408>
    3c6e:	83 35       	cpi	r24, 0x53	; 83
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <vfprintf+0x3f0>
    3c72:	56 c0       	rjmp	.+172    	; 0x3d20 <vfprintf+0x49c>
    3c74:	20 c0       	rjmp	.+64     	; 0x3cb6 <vfprintf+0x432>
    3c76:	56 01       	movw	r10, r12
    3c78:	32 e0       	ldi	r19, 0x02	; 2
    3c7a:	a3 0e       	add	r10, r19
    3c7c:	b1 1c       	adc	r11, r1
    3c7e:	f6 01       	movw	r30, r12
    3c80:	80 81       	ld	r24, Z
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	01 e0       	ldi	r16, 0x01	; 1
    3c86:	10 e0       	ldi	r17, 0x00	; 0
    3c88:	63 01       	movw	r12, r6
    3c8a:	12 c0       	rjmp	.+36     	; 0x3cb0 <vfprintf+0x42c>
    3c8c:	56 01       	movw	r10, r12
    3c8e:	f2 e0       	ldi	r31, 0x02	; 2
    3c90:	af 0e       	add	r10, r31
    3c92:	b1 1c       	adc	r11, r1
    3c94:	f6 01       	movw	r30, r12
    3c96:	c0 80       	ld	r12, Z
    3c98:	d1 80       	ldd	r13, Z+1	; 0x01
    3c9a:	96 fe       	sbrs	r9, 6
    3c9c:	03 c0       	rjmp	.+6      	; 0x3ca4 <vfprintf+0x420>
    3c9e:	61 2f       	mov	r22, r17
    3ca0:	70 e0       	ldi	r23, 0x00	; 0
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <vfprintf+0x424>
    3ca4:	6f ef       	ldi	r22, 0xFF	; 255
    3ca6:	7f ef       	ldi	r23, 0xFF	; 255
    3ca8:	c6 01       	movw	r24, r12
    3caa:	0e 94 23 21 	call	0x4246	; 0x4246 <strnlen>
    3cae:	8c 01       	movw	r16, r24
    3cb0:	f9 2d       	mov	r31, r9
    3cb2:	ff 77       	andi	r31, 0x7F	; 127
    3cb4:	14 c0       	rjmp	.+40     	; 0x3cde <vfprintf+0x45a>
    3cb6:	56 01       	movw	r10, r12
    3cb8:	22 e0       	ldi	r18, 0x02	; 2
    3cba:	a2 0e       	add	r10, r18
    3cbc:	b1 1c       	adc	r11, r1
    3cbe:	f6 01       	movw	r30, r12
    3cc0:	c0 80       	ld	r12, Z
    3cc2:	d1 80       	ldd	r13, Z+1	; 0x01
    3cc4:	96 fe       	sbrs	r9, 6
    3cc6:	03 c0       	rjmp	.+6      	; 0x3cce <vfprintf+0x44a>
    3cc8:	61 2f       	mov	r22, r17
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <vfprintf+0x44e>
    3cce:	6f ef       	ldi	r22, 0xFF	; 255
    3cd0:	7f ef       	ldi	r23, 0xFF	; 255
    3cd2:	c6 01       	movw	r24, r12
    3cd4:	0e 94 0b 21 	call	0x4216	; 0x4216 <strnlen_P>
    3cd8:	8c 01       	movw	r16, r24
    3cda:	f9 2d       	mov	r31, r9
    3cdc:	f0 68       	ori	r31, 0x80	; 128
    3cde:	9f 2e       	mov	r9, r31
    3ce0:	f3 fd       	sbrc	r31, 3
    3ce2:	1a c0       	rjmp	.+52     	; 0x3d18 <vfprintf+0x494>
    3ce4:	85 2d       	mov	r24, r5
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	08 17       	cp	r16, r24
    3cea:	19 07       	cpc	r17, r25
    3cec:	a8 f4       	brcc	.+42     	; 0x3d18 <vfprintf+0x494>
    3cee:	b7 01       	movw	r22, r14
    3cf0:	80 e2       	ldi	r24, 0x20	; 32
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3cf8:	5a 94       	dec	r5
    3cfa:	f4 cf       	rjmp	.-24     	; 0x3ce4 <vfprintf+0x460>
    3cfc:	f6 01       	movw	r30, r12
    3cfe:	97 fc       	sbrc	r9, 7
    3d00:	85 91       	lpm	r24, Z+
    3d02:	97 fe       	sbrs	r9, 7
    3d04:	81 91       	ld	r24, Z+
    3d06:	6f 01       	movw	r12, r30
    3d08:	b7 01       	movw	r22, r14
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3d10:	51 10       	cpse	r5, r1
    3d12:	5a 94       	dec	r5
    3d14:	01 50       	subi	r16, 0x01	; 1
    3d16:	11 09       	sbc	r17, r1
    3d18:	01 15       	cp	r16, r1
    3d1a:	11 05       	cpc	r17, r1
    3d1c:	79 f7       	brne	.-34     	; 0x3cfc <vfprintf+0x478>
    3d1e:	f7 c0       	rjmp	.+494    	; 0x3f0e <vfprintf+0x68a>
    3d20:	84 36       	cpi	r24, 0x64	; 100
    3d22:	11 f0       	breq	.+4      	; 0x3d28 <vfprintf+0x4a4>
    3d24:	89 36       	cpi	r24, 0x69	; 105
    3d26:	61 f5       	brne	.+88     	; 0x3d80 <vfprintf+0x4fc>
    3d28:	56 01       	movw	r10, r12
    3d2a:	97 fe       	sbrs	r9, 7
    3d2c:	09 c0       	rjmp	.+18     	; 0x3d40 <vfprintf+0x4bc>
    3d2e:	24 e0       	ldi	r18, 0x04	; 4
    3d30:	a2 0e       	add	r10, r18
    3d32:	b1 1c       	adc	r11, r1
    3d34:	f6 01       	movw	r30, r12
    3d36:	60 81       	ld	r22, Z
    3d38:	71 81       	ldd	r23, Z+1	; 0x01
    3d3a:	82 81       	ldd	r24, Z+2	; 0x02
    3d3c:	93 81       	ldd	r25, Z+3	; 0x03
    3d3e:	0a c0       	rjmp	.+20     	; 0x3d54 <vfprintf+0x4d0>
    3d40:	f2 e0       	ldi	r31, 0x02	; 2
    3d42:	af 0e       	add	r10, r31
    3d44:	b1 1c       	adc	r11, r1
    3d46:	f6 01       	movw	r30, r12
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	07 2e       	mov	r0, r23
    3d4e:	00 0c       	add	r0, r0
    3d50:	88 0b       	sbc	r24, r24
    3d52:	99 0b       	sbc	r25, r25
    3d54:	f9 2d       	mov	r31, r9
    3d56:	ff 76       	andi	r31, 0x6F	; 111
    3d58:	9f 2e       	mov	r9, r31
    3d5a:	97 ff       	sbrs	r25, 7
    3d5c:	09 c0       	rjmp	.+18     	; 0x3d70 <vfprintf+0x4ec>
    3d5e:	90 95       	com	r25
    3d60:	80 95       	com	r24
    3d62:	70 95       	com	r23
    3d64:	61 95       	neg	r22
    3d66:	7f 4f       	sbci	r23, 0xFF	; 255
    3d68:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6c:	f0 68       	ori	r31, 0x80	; 128
    3d6e:	9f 2e       	mov	r9, r31
    3d70:	2a e0       	ldi	r18, 0x0A	; 10
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	a3 01       	movw	r20, r6
    3d76:	0e 94 86 21 	call	0x430c	; 0x430c <__ultoa_invert>
    3d7a:	c8 2e       	mov	r12, r24
    3d7c:	c6 18       	sub	r12, r6
    3d7e:	3f c0       	rjmp	.+126    	; 0x3dfe <vfprintf+0x57a>
    3d80:	09 2d       	mov	r16, r9
    3d82:	85 37       	cpi	r24, 0x75	; 117
    3d84:	21 f4       	brne	.+8      	; 0x3d8e <vfprintf+0x50a>
    3d86:	0f 7e       	andi	r16, 0xEF	; 239
    3d88:	2a e0       	ldi	r18, 0x0A	; 10
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	1d c0       	rjmp	.+58     	; 0x3dc8 <vfprintf+0x544>
    3d8e:	09 7f       	andi	r16, 0xF9	; 249
    3d90:	8f 36       	cpi	r24, 0x6F	; 111
    3d92:	91 f0       	breq	.+36     	; 0x3db8 <vfprintf+0x534>
    3d94:	18 f4       	brcc	.+6      	; 0x3d9c <vfprintf+0x518>
    3d96:	88 35       	cpi	r24, 0x58	; 88
    3d98:	59 f0       	breq	.+22     	; 0x3db0 <vfprintf+0x52c>
    3d9a:	c3 c0       	rjmp	.+390    	; 0x3f22 <vfprintf+0x69e>
    3d9c:	80 37       	cpi	r24, 0x70	; 112
    3d9e:	19 f0       	breq	.+6      	; 0x3da6 <vfprintf+0x522>
    3da0:	88 37       	cpi	r24, 0x78	; 120
    3da2:	11 f0       	breq	.+4      	; 0x3da8 <vfprintf+0x524>
    3da4:	be c0       	rjmp	.+380    	; 0x3f22 <vfprintf+0x69e>
    3da6:	00 61       	ori	r16, 0x10	; 16
    3da8:	04 ff       	sbrs	r16, 4
    3daa:	09 c0       	rjmp	.+18     	; 0x3dbe <vfprintf+0x53a>
    3dac:	04 60       	ori	r16, 0x04	; 4
    3dae:	07 c0       	rjmp	.+14     	; 0x3dbe <vfprintf+0x53a>
    3db0:	94 fe       	sbrs	r9, 4
    3db2:	08 c0       	rjmp	.+16     	; 0x3dc4 <vfprintf+0x540>
    3db4:	06 60       	ori	r16, 0x06	; 6
    3db6:	06 c0       	rjmp	.+12     	; 0x3dc4 <vfprintf+0x540>
    3db8:	28 e0       	ldi	r18, 0x08	; 8
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <vfprintf+0x544>
    3dbe:	20 e1       	ldi	r18, 0x10	; 16
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <vfprintf+0x544>
    3dc4:	20 e1       	ldi	r18, 0x10	; 16
    3dc6:	32 e0       	ldi	r19, 0x02	; 2
    3dc8:	56 01       	movw	r10, r12
    3dca:	07 ff       	sbrs	r16, 7
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <vfprintf+0x55c>
    3dce:	84 e0       	ldi	r24, 0x04	; 4
    3dd0:	a8 0e       	add	r10, r24
    3dd2:	b1 1c       	adc	r11, r1
    3dd4:	f6 01       	movw	r30, r12
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	08 c0       	rjmp	.+16     	; 0x3df0 <vfprintf+0x56c>
    3de0:	f2 e0       	ldi	r31, 0x02	; 2
    3de2:	af 0e       	add	r10, r31
    3de4:	b1 1c       	adc	r11, r1
    3de6:	f6 01       	movw	r30, r12
    3de8:	60 81       	ld	r22, Z
    3dea:	71 81       	ldd	r23, Z+1	; 0x01
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	a3 01       	movw	r20, r6
    3df2:	0e 94 86 21 	call	0x430c	; 0x430c <__ultoa_invert>
    3df6:	c8 2e       	mov	r12, r24
    3df8:	c6 18       	sub	r12, r6
    3dfa:	0f 77       	andi	r16, 0x7F	; 127
    3dfc:	90 2e       	mov	r9, r16
    3dfe:	96 fe       	sbrs	r9, 6
    3e00:	0b c0       	rjmp	.+22     	; 0x3e18 <vfprintf+0x594>
    3e02:	09 2d       	mov	r16, r9
    3e04:	0e 7f       	andi	r16, 0xFE	; 254
    3e06:	c1 16       	cp	r12, r17
    3e08:	50 f4       	brcc	.+20     	; 0x3e1e <vfprintf+0x59a>
    3e0a:	94 fe       	sbrs	r9, 4
    3e0c:	0a c0       	rjmp	.+20     	; 0x3e22 <vfprintf+0x59e>
    3e0e:	92 fc       	sbrc	r9, 2
    3e10:	08 c0       	rjmp	.+16     	; 0x3e22 <vfprintf+0x59e>
    3e12:	09 2d       	mov	r16, r9
    3e14:	0e 7e       	andi	r16, 0xEE	; 238
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <vfprintf+0x59e>
    3e18:	dc 2c       	mov	r13, r12
    3e1a:	09 2d       	mov	r16, r9
    3e1c:	03 c0       	rjmp	.+6      	; 0x3e24 <vfprintf+0x5a0>
    3e1e:	dc 2c       	mov	r13, r12
    3e20:	01 c0       	rjmp	.+2      	; 0x3e24 <vfprintf+0x5a0>
    3e22:	d1 2e       	mov	r13, r17
    3e24:	04 ff       	sbrs	r16, 4
    3e26:	0d c0       	rjmp	.+26     	; 0x3e42 <vfprintf+0x5be>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ec 0d       	add	r30, r12
    3e2c:	f1 1d       	adc	r31, r1
    3e2e:	80 81       	ld	r24, Z
    3e30:	80 33       	cpi	r24, 0x30	; 48
    3e32:	11 f4       	brne	.+4      	; 0x3e38 <vfprintf+0x5b4>
    3e34:	09 7e       	andi	r16, 0xE9	; 233
    3e36:	09 c0       	rjmp	.+18     	; 0x3e4a <vfprintf+0x5c6>
    3e38:	02 ff       	sbrs	r16, 2
    3e3a:	06 c0       	rjmp	.+12     	; 0x3e48 <vfprintf+0x5c4>
    3e3c:	d3 94       	inc	r13
    3e3e:	d3 94       	inc	r13
    3e40:	04 c0       	rjmp	.+8      	; 0x3e4a <vfprintf+0x5c6>
    3e42:	80 2f       	mov	r24, r16
    3e44:	86 78       	andi	r24, 0x86	; 134
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <vfprintf+0x5c6>
    3e48:	d3 94       	inc	r13
    3e4a:	03 fd       	sbrc	r16, 3
    3e4c:	11 c0       	rjmp	.+34     	; 0x3e70 <vfprintf+0x5ec>
    3e4e:	00 ff       	sbrs	r16, 0
    3e50:	06 c0       	rjmp	.+12     	; 0x3e5e <vfprintf+0x5da>
    3e52:	1c 2d       	mov	r17, r12
    3e54:	d5 14       	cp	r13, r5
    3e56:	80 f4       	brcc	.+32     	; 0x3e78 <vfprintf+0x5f4>
    3e58:	15 0d       	add	r17, r5
    3e5a:	1d 19       	sub	r17, r13
    3e5c:	0d c0       	rjmp	.+26     	; 0x3e78 <vfprintf+0x5f4>
    3e5e:	d5 14       	cp	r13, r5
    3e60:	58 f4       	brcc	.+22     	; 0x3e78 <vfprintf+0x5f4>
    3e62:	b7 01       	movw	r22, r14
    3e64:	80 e2       	ldi	r24, 0x20	; 32
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3e6c:	d3 94       	inc	r13
    3e6e:	f7 cf       	rjmp	.-18     	; 0x3e5e <vfprintf+0x5da>
    3e70:	d5 14       	cp	r13, r5
    3e72:	10 f4       	brcc	.+4      	; 0x3e78 <vfprintf+0x5f4>
    3e74:	5d 18       	sub	r5, r13
    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <vfprintf+0x5f6>
    3e78:	51 2c       	mov	r5, r1
    3e7a:	04 ff       	sbrs	r16, 4
    3e7c:	10 c0       	rjmp	.+32     	; 0x3e9e <vfprintf+0x61a>
    3e7e:	b7 01       	movw	r22, r14
    3e80:	80 e3       	ldi	r24, 0x30	; 48
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3e88:	02 ff       	sbrs	r16, 2
    3e8a:	17 c0       	rjmp	.+46     	; 0x3eba <vfprintf+0x636>
    3e8c:	01 fd       	sbrc	r16, 1
    3e8e:	03 c0       	rjmp	.+6      	; 0x3e96 <vfprintf+0x612>
    3e90:	88 e7       	ldi	r24, 0x78	; 120
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <vfprintf+0x616>
    3e96:	88 e5       	ldi	r24, 0x58	; 88
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	b7 01       	movw	r22, r14
    3e9c:	0c c0       	rjmp	.+24     	; 0x3eb6 <vfprintf+0x632>
    3e9e:	80 2f       	mov	r24, r16
    3ea0:	86 78       	andi	r24, 0x86	; 134
    3ea2:	59 f0       	breq	.+22     	; 0x3eba <vfprintf+0x636>
    3ea4:	01 ff       	sbrs	r16, 1
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <vfprintf+0x628>
    3ea8:	8b e2       	ldi	r24, 0x2B	; 43
    3eaa:	01 c0       	rjmp	.+2      	; 0x3eae <vfprintf+0x62a>
    3eac:	80 e2       	ldi	r24, 0x20	; 32
    3eae:	07 fd       	sbrc	r16, 7
    3eb0:	8d e2       	ldi	r24, 0x2D	; 45
    3eb2:	b7 01       	movw	r22, r14
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3eba:	c1 16       	cp	r12, r17
    3ebc:	38 f4       	brcc	.+14     	; 0x3ecc <vfprintf+0x648>
    3ebe:	b7 01       	movw	r22, r14
    3ec0:	80 e3       	ldi	r24, 0x30	; 48
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3ec8:	11 50       	subi	r17, 0x01	; 1
    3eca:	f7 cf       	rjmp	.-18     	; 0x3eba <vfprintf+0x636>
    3ecc:	ca 94       	dec	r12
    3ece:	f3 01       	movw	r30, r6
    3ed0:	ec 0d       	add	r30, r12
    3ed2:	f1 1d       	adc	r31, r1
    3ed4:	80 81       	ld	r24, Z
    3ed6:	b7 01       	movw	r22, r14
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3ede:	c1 10       	cpse	r12, r1
    3ee0:	f5 cf       	rjmp	.-22     	; 0x3ecc <vfprintf+0x648>
    3ee2:	15 c0       	rjmp	.+42     	; 0x3f0e <vfprintf+0x68a>
    3ee4:	f4 e0       	ldi	r31, 0x04	; 4
    3ee6:	f5 15       	cp	r31, r5
    3ee8:	60 f5       	brcc	.+88     	; 0x3f42 <vfprintf+0x6be>
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	58 1a       	sub	r5, r24
    3eee:	93 fe       	sbrs	r9, 3
    3ef0:	1f c0       	rjmp	.+62     	; 0x3f30 <vfprintf+0x6ac>
    3ef2:	01 11       	cpse	r16, r1
    3ef4:	27 c0       	rjmp	.+78     	; 0x3f44 <vfprintf+0x6c0>
    3ef6:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ef8:	23 ff       	sbrs	r18, 3
    3efa:	2a c0       	rjmp	.+84     	; 0x3f50 <vfprintf+0x6cc>
    3efc:	04 ed       	ldi	r16, 0xD4	; 212
    3efe:	12 e0       	ldi	r17, 0x02	; 2
    3f00:	39 2d       	mov	r19, r9
    3f02:	30 71       	andi	r19, 0x10	; 16
    3f04:	93 2e       	mov	r9, r19
    3f06:	f8 01       	movw	r30, r16
    3f08:	84 91       	lpm	r24, Z
    3f0a:	81 11       	cpse	r24, r1
    3f0c:	24 c0       	rjmp	.+72     	; 0x3f56 <vfprintf+0x6d2>
    3f0e:	55 20       	and	r5, r5
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <vfprintf+0x690>
    3f12:	e4 cc       	rjmp	.-1592   	; 0x38dc <vfprintf+0x58>
    3f14:	b7 01       	movw	r22, r14
    3f16:	80 e2       	ldi	r24, 0x20	; 32
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3f1e:	5a 94       	dec	r5
    3f20:	f6 cf       	rjmp	.-20     	; 0x3f0e <vfprintf+0x68a>
    3f22:	f7 01       	movw	r30, r14
    3f24:	86 81       	ldd	r24, Z+6	; 0x06
    3f26:	97 81       	ldd	r25, Z+7	; 0x07
    3f28:	26 c0       	rjmp	.+76     	; 0x3f76 <vfprintf+0x6f2>
    3f2a:	8f ef       	ldi	r24, 0xFF	; 255
    3f2c:	9f ef       	ldi	r25, 0xFF	; 255
    3f2e:	23 c0       	rjmp	.+70     	; 0x3f76 <vfprintf+0x6f2>
    3f30:	b7 01       	movw	r22, r14
    3f32:	80 e2       	ldi	r24, 0x20	; 32
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3f3a:	5a 94       	dec	r5
    3f3c:	51 10       	cpse	r5, r1
    3f3e:	f8 cf       	rjmp	.-16     	; 0x3f30 <vfprintf+0x6ac>
    3f40:	d8 cf       	rjmp	.-80     	; 0x3ef2 <vfprintf+0x66e>
    3f42:	51 2c       	mov	r5, r1
    3f44:	b7 01       	movw	r22, r14
    3f46:	80 2f       	mov	r24, r16
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3f4e:	d3 cf       	rjmp	.-90     	; 0x3ef6 <vfprintf+0x672>
    3f50:	08 ed       	ldi	r16, 0xD8	; 216
    3f52:	12 e0       	ldi	r17, 0x02	; 2
    3f54:	d5 cf       	rjmp	.-86     	; 0x3f00 <vfprintf+0x67c>
    3f56:	91 10       	cpse	r9, r1
    3f58:	80 52       	subi	r24, 0x20	; 32
    3f5a:	b7 01       	movw	r22, r14
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 2e 21 	call	0x425c	; 0x425c <fputc>
    3f62:	0f 5f       	subi	r16, 0xFF	; 255
    3f64:	1f 4f       	sbci	r17, 0xFF	; 255
    3f66:	cf cf       	rjmp	.-98     	; 0x3f06 <vfprintf+0x682>
    3f68:	23 e0       	ldi	r18, 0x03	; 3
    3f6a:	25 15       	cp	r18, r5
    3f6c:	10 f4       	brcc	.+4      	; 0x3f72 <vfprintf+0x6ee>
    3f6e:	83 e0       	ldi	r24, 0x03	; 3
    3f70:	bd cf       	rjmp	.-134    	; 0x3eec <vfprintf+0x668>
    3f72:	51 2c       	mov	r5, r1
    3f74:	c0 cf       	rjmp	.-128    	; 0x3ef6 <vfprintf+0x672>
    3f76:	60 96       	adiw	r28, 0x10	; 16
    3f78:	e2 e1       	ldi	r30, 0x12	; 18
    3f7a:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__>

00003f7e <__divmodhi4>:
    3f7e:	97 fb       	bst	r25, 7
    3f80:	07 2e       	mov	r0, r23
    3f82:	16 f4       	brtc	.+4      	; 0x3f88 <__divmodhi4+0xa>
    3f84:	00 94       	com	r0
    3f86:	07 d0       	rcall	.+14     	; 0x3f96 <__divmodhi4_neg1>
    3f88:	77 fd       	sbrc	r23, 7
    3f8a:	09 d0       	rcall	.+18     	; 0x3f9e <__divmodhi4_neg2>
    3f8c:	0e 94 1f 20 	call	0x403e	; 0x403e <__udivmodhi4>
    3f90:	07 fc       	sbrc	r0, 7
    3f92:	05 d0       	rcall	.+10     	; 0x3f9e <__divmodhi4_neg2>
    3f94:	3e f4       	brtc	.+14     	; 0x3fa4 <__divmodhi4_exit>

00003f96 <__divmodhi4_neg1>:
    3f96:	90 95       	com	r25
    3f98:	81 95       	neg	r24
    3f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9c:	08 95       	ret

00003f9e <__divmodhi4_neg2>:
    3f9e:	70 95       	com	r23
    3fa0:	61 95       	neg	r22
    3fa2:	7f 4f       	sbci	r23, 0xFF	; 255

00003fa4 <__divmodhi4_exit>:
    3fa4:	08 95       	ret

00003fa6 <__tablejump2__>:
    3fa6:	ee 0f       	add	r30, r30
    3fa8:	ff 1f       	adc	r31, r31
    3faa:	05 90       	lpm	r0, Z+
    3fac:	f4 91       	lpm	r31, Z
    3fae:	e0 2d       	mov	r30, r0
    3fb0:	09 94       	ijmp

00003fb2 <__umulhisi3>:
    3fb2:	a2 9f       	mul	r26, r18
    3fb4:	b0 01       	movw	r22, r0
    3fb6:	b3 9f       	mul	r27, r19
    3fb8:	c0 01       	movw	r24, r0
    3fba:	a3 9f       	mul	r26, r19
    3fbc:	70 0d       	add	r23, r0
    3fbe:	81 1d       	adc	r24, r1
    3fc0:	11 24       	eor	r1, r1
    3fc2:	91 1d       	adc	r25, r1
    3fc4:	b2 9f       	mul	r27, r18
    3fc6:	70 0d       	add	r23, r0
    3fc8:	81 1d       	adc	r24, r1
    3fca:	11 24       	eor	r1, r1
    3fcc:	91 1d       	adc	r25, r1
    3fce:	08 95       	ret

00003fd0 <__prologue_saves__>:
    3fd0:	2f 92       	push	r2
    3fd2:	3f 92       	push	r3
    3fd4:	4f 92       	push	r4
    3fd6:	5f 92       	push	r5
    3fd8:	6f 92       	push	r6
    3fda:	7f 92       	push	r7
    3fdc:	8f 92       	push	r8
    3fde:	9f 92       	push	r9
    3fe0:	af 92       	push	r10
    3fe2:	bf 92       	push	r11
    3fe4:	cf 92       	push	r12
    3fe6:	df 92       	push	r13
    3fe8:	ef 92       	push	r14
    3fea:	ff 92       	push	r15
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	ca 1b       	sub	r28, r26
    3ffa:	db 0b       	sbc	r29, r27
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	09 94       	ijmp

00004008 <__epilogue_restores__>:
    4008:	2a 88       	ldd	r2, Y+18	; 0x12
    400a:	39 88       	ldd	r3, Y+17	; 0x11
    400c:	48 88       	ldd	r4, Y+16	; 0x10
    400e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4010:	6e 84       	ldd	r6, Y+14	; 0x0e
    4012:	7d 84       	ldd	r7, Y+13	; 0x0d
    4014:	8c 84       	ldd	r8, Y+12	; 0x0c
    4016:	9b 84       	ldd	r9, Y+11	; 0x0b
    4018:	aa 84       	ldd	r10, Y+10	; 0x0a
    401a:	b9 84       	ldd	r11, Y+9	; 0x09
    401c:	c8 84       	ldd	r12, Y+8	; 0x08
    401e:	df 80       	ldd	r13, Y+7	; 0x07
    4020:	ee 80       	ldd	r14, Y+6	; 0x06
    4022:	fd 80       	ldd	r15, Y+5	; 0x05
    4024:	0c 81       	ldd	r16, Y+4	; 0x04
    4026:	1b 81       	ldd	r17, Y+3	; 0x03
    4028:	aa 81       	ldd	r26, Y+2	; 0x02
    402a:	b9 81       	ldd	r27, Y+1	; 0x01
    402c:	ce 0f       	add	r28, r30
    402e:	d1 1d       	adc	r29, r1
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	ed 01       	movw	r28, r26
    403c:	08 95       	ret

0000403e <__udivmodhi4>:
    403e:	aa 1b       	sub	r26, r26
    4040:	bb 1b       	sub	r27, r27
    4042:	51 e1       	ldi	r21, 0x11	; 17
    4044:	07 c0       	rjmp	.+14     	; 0x4054 <__udivmodhi4_ep>

00004046 <__udivmodhi4_loop>:
    4046:	aa 1f       	adc	r26, r26
    4048:	bb 1f       	adc	r27, r27
    404a:	a6 17       	cp	r26, r22
    404c:	b7 07       	cpc	r27, r23
    404e:	10 f0       	brcs	.+4      	; 0x4054 <__udivmodhi4_ep>
    4050:	a6 1b       	sub	r26, r22
    4052:	b7 0b       	sbc	r27, r23

00004054 <__udivmodhi4_ep>:
    4054:	88 1f       	adc	r24, r24
    4056:	99 1f       	adc	r25, r25
    4058:	5a 95       	dec	r21
    405a:	a9 f7       	brne	.-22     	; 0x4046 <__udivmodhi4_loop>
    405c:	80 95       	com	r24
    405e:	90 95       	com	r25
    4060:	bc 01       	movw	r22, r24
    4062:	cd 01       	movw	r24, r26
    4064:	08 95       	ret

00004066 <__ftoa_engine>:
    4066:	28 30       	cpi	r18, 0x08	; 8
    4068:	08 f0       	brcs	.+2      	; 0x406c <__ftoa_engine+0x6>
    406a:	27 e0       	ldi	r18, 0x07	; 7
    406c:	33 27       	eor	r19, r19
    406e:	da 01       	movw	r26, r20
    4070:	99 0f       	add	r25, r25
    4072:	31 1d       	adc	r19, r1
    4074:	87 fd       	sbrc	r24, 7
    4076:	91 60       	ori	r25, 0x01	; 1
    4078:	00 96       	adiw	r24, 0x00	; 0
    407a:	61 05       	cpc	r22, r1
    407c:	71 05       	cpc	r23, r1
    407e:	39 f4       	brne	.+14     	; 0x408e <__ftoa_engine+0x28>
    4080:	32 60       	ori	r19, 0x02	; 2
    4082:	2e 5f       	subi	r18, 0xFE	; 254
    4084:	3d 93       	st	X+, r19
    4086:	30 e3       	ldi	r19, 0x30	; 48
    4088:	2a 95       	dec	r18
    408a:	e1 f7       	brne	.-8      	; 0x4084 <__ftoa_engine+0x1e>
    408c:	08 95       	ret
    408e:	9f 3f       	cpi	r25, 0xFF	; 255
    4090:	30 f0       	brcs	.+12     	; 0x409e <__ftoa_engine+0x38>
    4092:	80 38       	cpi	r24, 0x80	; 128
    4094:	71 05       	cpc	r23, r1
    4096:	61 05       	cpc	r22, r1
    4098:	09 f0       	breq	.+2      	; 0x409c <__ftoa_engine+0x36>
    409a:	3c 5f       	subi	r19, 0xFC	; 252
    409c:	3c 5f       	subi	r19, 0xFC	; 252
    409e:	3d 93       	st	X+, r19
    40a0:	91 30       	cpi	r25, 0x01	; 1
    40a2:	08 f0       	brcs	.+2      	; 0x40a6 <__ftoa_engine+0x40>
    40a4:	80 68       	ori	r24, 0x80	; 128
    40a6:	91 1d       	adc	r25, r1
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	1f 93       	push	r17
    40ae:	0f 93       	push	r16
    40b0:	ff 92       	push	r15
    40b2:	ef 92       	push	r14
    40b4:	19 2f       	mov	r17, r25
    40b6:	98 7f       	andi	r25, 0xF8	; 248
    40b8:	96 95       	lsr	r25
    40ba:	e9 2f       	mov	r30, r25
    40bc:	96 95       	lsr	r25
    40be:	96 95       	lsr	r25
    40c0:	e9 0f       	add	r30, r25
    40c2:	ff 27       	eor	r31, r31
    40c4:	ea 5c       	subi	r30, 0xCA	; 202
    40c6:	fc 4f       	sbci	r31, 0xFC	; 252
    40c8:	99 27       	eor	r25, r25
    40ca:	33 27       	eor	r19, r19
    40cc:	ee 24       	eor	r14, r14
    40ce:	ff 24       	eor	r15, r15
    40d0:	a7 01       	movw	r20, r14
    40d2:	e7 01       	movw	r28, r14
    40d4:	05 90       	lpm	r0, Z+
    40d6:	08 94       	sec
    40d8:	07 94       	ror	r0
    40da:	28 f4       	brcc	.+10     	; 0x40e6 <__ftoa_engine+0x80>
    40dc:	36 0f       	add	r19, r22
    40de:	e7 1e       	adc	r14, r23
    40e0:	f8 1e       	adc	r15, r24
    40e2:	49 1f       	adc	r20, r25
    40e4:	51 1d       	adc	r21, r1
    40e6:	66 0f       	add	r22, r22
    40e8:	77 1f       	adc	r23, r23
    40ea:	88 1f       	adc	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	06 94       	lsr	r0
    40f0:	a1 f7       	brne	.-24     	; 0x40da <__ftoa_engine+0x74>
    40f2:	05 90       	lpm	r0, Z+
    40f4:	07 94       	ror	r0
    40f6:	28 f4       	brcc	.+10     	; 0x4102 <__ftoa_engine+0x9c>
    40f8:	e7 0e       	add	r14, r23
    40fa:	f8 1e       	adc	r15, r24
    40fc:	49 1f       	adc	r20, r25
    40fe:	56 1f       	adc	r21, r22
    4100:	c1 1d       	adc	r28, r1
    4102:	77 0f       	add	r23, r23
    4104:	88 1f       	adc	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	66 1f       	adc	r22, r22
    410a:	06 94       	lsr	r0
    410c:	a1 f7       	brne	.-24     	; 0x40f6 <__ftoa_engine+0x90>
    410e:	05 90       	lpm	r0, Z+
    4110:	07 94       	ror	r0
    4112:	28 f4       	brcc	.+10     	; 0x411e <__ftoa_engine+0xb8>
    4114:	f8 0e       	add	r15, r24
    4116:	49 1f       	adc	r20, r25
    4118:	56 1f       	adc	r21, r22
    411a:	c7 1f       	adc	r28, r23
    411c:	d1 1d       	adc	r29, r1
    411e:	88 0f       	add	r24, r24
    4120:	99 1f       	adc	r25, r25
    4122:	66 1f       	adc	r22, r22
    4124:	77 1f       	adc	r23, r23
    4126:	06 94       	lsr	r0
    4128:	a1 f7       	brne	.-24     	; 0x4112 <__ftoa_engine+0xac>
    412a:	05 90       	lpm	r0, Z+
    412c:	07 94       	ror	r0
    412e:	20 f4       	brcc	.+8      	; 0x4138 <__ftoa_engine+0xd2>
    4130:	49 0f       	add	r20, r25
    4132:	56 1f       	adc	r21, r22
    4134:	c7 1f       	adc	r28, r23
    4136:	d8 1f       	adc	r29, r24
    4138:	99 0f       	add	r25, r25
    413a:	66 1f       	adc	r22, r22
    413c:	77 1f       	adc	r23, r23
    413e:	88 1f       	adc	r24, r24
    4140:	06 94       	lsr	r0
    4142:	a9 f7       	brne	.-22     	; 0x412e <__ftoa_engine+0xc8>
    4144:	84 91       	lpm	r24, Z
    4146:	10 95       	com	r17
    4148:	17 70       	andi	r17, 0x07	; 7
    414a:	41 f0       	breq	.+16     	; 0x415c <__ftoa_engine+0xf6>
    414c:	d6 95       	lsr	r29
    414e:	c7 95       	ror	r28
    4150:	57 95       	ror	r21
    4152:	47 95       	ror	r20
    4154:	f7 94       	ror	r15
    4156:	e7 94       	ror	r14
    4158:	1a 95       	dec	r17
    415a:	c1 f7       	brne	.-16     	; 0x414c <__ftoa_engine+0xe6>
    415c:	ec ed       	ldi	r30, 0xDC	; 220
    415e:	f2 e0       	ldi	r31, 0x02	; 2
    4160:	68 94       	set
    4162:	15 90       	lpm	r1, Z+
    4164:	15 91       	lpm	r17, Z+
    4166:	35 91       	lpm	r19, Z+
    4168:	65 91       	lpm	r22, Z+
    416a:	95 91       	lpm	r25, Z+
    416c:	05 90       	lpm	r0, Z+
    416e:	7f e2       	ldi	r23, 0x2F	; 47
    4170:	73 95       	inc	r23
    4172:	e1 18       	sub	r14, r1
    4174:	f1 0a       	sbc	r15, r17
    4176:	43 0b       	sbc	r20, r19
    4178:	56 0b       	sbc	r21, r22
    417a:	c9 0b       	sbc	r28, r25
    417c:	d0 09       	sbc	r29, r0
    417e:	c0 f7       	brcc	.-16     	; 0x4170 <__ftoa_engine+0x10a>
    4180:	e1 0c       	add	r14, r1
    4182:	f1 1e       	adc	r15, r17
    4184:	43 1f       	adc	r20, r19
    4186:	56 1f       	adc	r21, r22
    4188:	c9 1f       	adc	r28, r25
    418a:	d0 1d       	adc	r29, r0
    418c:	7e f4       	brtc	.+30     	; 0x41ac <__ftoa_engine+0x146>
    418e:	70 33       	cpi	r23, 0x30	; 48
    4190:	11 f4       	brne	.+4      	; 0x4196 <__ftoa_engine+0x130>
    4192:	8a 95       	dec	r24
    4194:	e6 cf       	rjmp	.-52     	; 0x4162 <__ftoa_engine+0xfc>
    4196:	e8 94       	clt
    4198:	01 50       	subi	r16, 0x01	; 1
    419a:	30 f0       	brcs	.+12     	; 0x41a8 <__ftoa_engine+0x142>
    419c:	08 0f       	add	r16, r24
    419e:	0a f4       	brpl	.+2      	; 0x41a2 <__ftoa_engine+0x13c>
    41a0:	00 27       	eor	r16, r16
    41a2:	02 17       	cp	r16, r18
    41a4:	08 f4       	brcc	.+2      	; 0x41a8 <__ftoa_engine+0x142>
    41a6:	20 2f       	mov	r18, r16
    41a8:	23 95       	inc	r18
    41aa:	02 2f       	mov	r16, r18
    41ac:	7a 33       	cpi	r23, 0x3A	; 58
    41ae:	28 f0       	brcs	.+10     	; 0x41ba <__ftoa_engine+0x154>
    41b0:	79 e3       	ldi	r23, 0x39	; 57
    41b2:	7d 93       	st	X+, r23
    41b4:	2a 95       	dec	r18
    41b6:	e9 f7       	brne	.-6      	; 0x41b2 <__ftoa_engine+0x14c>
    41b8:	10 c0       	rjmp	.+32     	; 0x41da <__ftoa_engine+0x174>
    41ba:	7d 93       	st	X+, r23
    41bc:	2a 95       	dec	r18
    41be:	89 f6       	brne	.-94     	; 0x4162 <__ftoa_engine+0xfc>
    41c0:	06 94       	lsr	r0
    41c2:	97 95       	ror	r25
    41c4:	67 95       	ror	r22
    41c6:	37 95       	ror	r19
    41c8:	17 95       	ror	r17
    41ca:	17 94       	ror	r1
    41cc:	e1 18       	sub	r14, r1
    41ce:	f1 0a       	sbc	r15, r17
    41d0:	43 0b       	sbc	r20, r19
    41d2:	56 0b       	sbc	r21, r22
    41d4:	c9 0b       	sbc	r28, r25
    41d6:	d0 09       	sbc	r29, r0
    41d8:	98 f0       	brcs	.+38     	; 0x4200 <__ftoa_engine+0x19a>
    41da:	23 95       	inc	r18
    41dc:	7e 91       	ld	r23, -X
    41de:	73 95       	inc	r23
    41e0:	7a 33       	cpi	r23, 0x3A	; 58
    41e2:	08 f0       	brcs	.+2      	; 0x41e6 <__ftoa_engine+0x180>
    41e4:	70 e3       	ldi	r23, 0x30	; 48
    41e6:	7c 93       	st	X, r23
    41e8:	20 13       	cpse	r18, r16
    41ea:	b8 f7       	brcc	.-18     	; 0x41da <__ftoa_engine+0x174>
    41ec:	7e 91       	ld	r23, -X
    41ee:	70 61       	ori	r23, 0x10	; 16
    41f0:	7d 93       	st	X+, r23
    41f2:	30 f0       	brcs	.+12     	; 0x4200 <__ftoa_engine+0x19a>
    41f4:	83 95       	inc	r24
    41f6:	71 e3       	ldi	r23, 0x31	; 49
    41f8:	7d 93       	st	X+, r23
    41fa:	70 e3       	ldi	r23, 0x30	; 48
    41fc:	2a 95       	dec	r18
    41fe:	e1 f7       	brne	.-8      	; 0x41f8 <__ftoa_engine+0x192>
    4200:	11 24       	eor	r1, r1
    4202:	ef 90       	pop	r14
    4204:	ff 90       	pop	r15
    4206:	0f 91       	pop	r16
    4208:	1f 91       	pop	r17
    420a:	cf 91       	pop	r28
    420c:	df 91       	pop	r29
    420e:	99 27       	eor	r25, r25
    4210:	87 fd       	sbrc	r24, 7
    4212:	90 95       	com	r25
    4214:	08 95       	ret

00004216 <strnlen_P>:
    4216:	fc 01       	movw	r30, r24
    4218:	05 90       	lpm	r0, Z+
    421a:	61 50       	subi	r22, 0x01	; 1
    421c:	70 40       	sbci	r23, 0x00	; 0
    421e:	01 10       	cpse	r0, r1
    4220:	d8 f7       	brcc	.-10     	; 0x4218 <strnlen_P+0x2>
    4222:	80 95       	com	r24
    4224:	90 95       	com	r25
    4226:	8e 0f       	add	r24, r30
    4228:	9f 1f       	adc	r25, r31
    422a:	08 95       	ret

0000422c <memcmp>:
    422c:	fb 01       	movw	r30, r22
    422e:	dc 01       	movw	r26, r24
    4230:	04 c0       	rjmp	.+8      	; 0x423a <memcmp+0xe>
    4232:	8d 91       	ld	r24, X+
    4234:	01 90       	ld	r0, Z+
    4236:	80 19       	sub	r24, r0
    4238:	21 f4       	brne	.+8      	; 0x4242 <memcmp+0x16>
    423a:	41 50       	subi	r20, 0x01	; 1
    423c:	50 40       	sbci	r21, 0x00	; 0
    423e:	c8 f7       	brcc	.-14     	; 0x4232 <memcmp+0x6>
    4240:	88 1b       	sub	r24, r24
    4242:	99 0b       	sbc	r25, r25
    4244:	08 95       	ret

00004246 <strnlen>:
    4246:	fc 01       	movw	r30, r24
    4248:	61 50       	subi	r22, 0x01	; 1
    424a:	70 40       	sbci	r23, 0x00	; 0
    424c:	01 90       	ld	r0, Z+
    424e:	01 10       	cpse	r0, r1
    4250:	d8 f7       	brcc	.-10     	; 0x4248 <strnlen+0x2>
    4252:	80 95       	com	r24
    4254:	90 95       	com	r25
    4256:	8e 0f       	add	r24, r30
    4258:	9f 1f       	adc	r25, r31
    425a:	08 95       	ret

0000425c <fputc>:
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	fb 01       	movw	r30, r22
    4266:	23 81       	ldd	r18, Z+3	; 0x03
    4268:	21 fd       	sbrc	r18, 1
    426a:	03 c0       	rjmp	.+6      	; 0x4272 <fputc+0x16>
    426c:	8f ef       	ldi	r24, 0xFF	; 255
    426e:	9f ef       	ldi	r25, 0xFF	; 255
    4270:	2c c0       	rjmp	.+88     	; 0x42ca <fputc+0x6e>
    4272:	22 ff       	sbrs	r18, 2
    4274:	16 c0       	rjmp	.+44     	; 0x42a2 <fputc+0x46>
    4276:	46 81       	ldd	r20, Z+6	; 0x06
    4278:	57 81       	ldd	r21, Z+7	; 0x07
    427a:	24 81       	ldd	r18, Z+4	; 0x04
    427c:	35 81       	ldd	r19, Z+5	; 0x05
    427e:	42 17       	cp	r20, r18
    4280:	53 07       	cpc	r21, r19
    4282:	44 f4       	brge	.+16     	; 0x4294 <fputc+0x38>
    4284:	a0 81       	ld	r26, Z
    4286:	b1 81       	ldd	r27, Z+1	; 0x01
    4288:	9d 01       	movw	r18, r26
    428a:	2f 5f       	subi	r18, 0xFF	; 255
    428c:	3f 4f       	sbci	r19, 0xFF	; 255
    428e:	31 83       	std	Z+1, r19	; 0x01
    4290:	20 83       	st	Z, r18
    4292:	8c 93       	st	X, r24
    4294:	26 81       	ldd	r18, Z+6	; 0x06
    4296:	37 81       	ldd	r19, Z+7	; 0x07
    4298:	2f 5f       	subi	r18, 0xFF	; 255
    429a:	3f 4f       	sbci	r19, 0xFF	; 255
    429c:	37 83       	std	Z+7, r19	; 0x07
    429e:	26 83       	std	Z+6, r18	; 0x06
    42a0:	14 c0       	rjmp	.+40     	; 0x42ca <fputc+0x6e>
    42a2:	8b 01       	movw	r16, r22
    42a4:	ec 01       	movw	r28, r24
    42a6:	fb 01       	movw	r30, r22
    42a8:	00 84       	ldd	r0, Z+8	; 0x08
    42aa:	f1 85       	ldd	r31, Z+9	; 0x09
    42ac:	e0 2d       	mov	r30, r0
    42ae:	09 95       	icall
    42b0:	89 2b       	or	r24, r25
    42b2:	e1 f6       	brne	.-72     	; 0x426c <fputc+0x10>
    42b4:	d8 01       	movw	r26, r16
    42b6:	16 96       	adiw	r26, 0x06	; 6
    42b8:	8d 91       	ld	r24, X+
    42ba:	9c 91       	ld	r25, X
    42bc:	17 97       	sbiw	r26, 0x07	; 7
    42be:	01 96       	adiw	r24, 0x01	; 1
    42c0:	17 96       	adiw	r26, 0x07	; 7
    42c2:	9c 93       	st	X, r25
    42c4:	8e 93       	st	-X, r24
    42c6:	16 97       	sbiw	r26, 0x06	; 6
    42c8:	ce 01       	movw	r24, r28
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	1f 91       	pop	r17
    42d0:	0f 91       	pop	r16
    42d2:	08 95       	ret

000042d4 <vsprintf>:
    42d4:	ae e0       	ldi	r26, 0x0E	; 14
    42d6:	b0 e0       	ldi	r27, 0x00	; 0
    42d8:	e0 e7       	ldi	r30, 0x70	; 112
    42da:	f1 e2       	ldi	r31, 0x21	; 33
    42dc:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__prologue_saves__+0x1c>
    42e0:	8c 01       	movw	r16, r24
    42e2:	86 e0       	ldi	r24, 0x06	; 6
    42e4:	8c 83       	std	Y+4, r24	; 0x04
    42e6:	1a 83       	std	Y+2, r17	; 0x02
    42e8:	09 83       	std	Y+1, r16	; 0x01
    42ea:	8f ef       	ldi	r24, 0xFF	; 255
    42ec:	9f e7       	ldi	r25, 0x7F	; 127
    42ee:	9e 83       	std	Y+6, r25	; 0x06
    42f0:	8d 83       	std	Y+5, r24	; 0x05
    42f2:	ce 01       	movw	r24, r28
    42f4:	01 96       	adiw	r24, 0x01	; 1
    42f6:	0e 94 42 1c 	call	0x3884	; 0x3884 <vfprintf>
    42fa:	ef 81       	ldd	r30, Y+7	; 0x07
    42fc:	f8 85       	ldd	r31, Y+8	; 0x08
    42fe:	e0 0f       	add	r30, r16
    4300:	f1 1f       	adc	r31, r17
    4302:	10 82       	st	Z, r1
    4304:	2e 96       	adiw	r28, 0x0e	; 14
    4306:	e4 e0       	ldi	r30, 0x04	; 4
    4308:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__epilogue_restores__+0x1c>

0000430c <__ultoa_invert>:
    430c:	fa 01       	movw	r30, r20
    430e:	aa 27       	eor	r26, r26
    4310:	28 30       	cpi	r18, 0x08	; 8
    4312:	51 f1       	breq	.+84     	; 0x4368 <__ultoa_invert+0x5c>
    4314:	20 31       	cpi	r18, 0x10	; 16
    4316:	81 f1       	breq	.+96     	; 0x4378 <__ultoa_invert+0x6c>
    4318:	e8 94       	clt
    431a:	6f 93       	push	r22
    431c:	6e 7f       	andi	r22, 0xFE	; 254
    431e:	6e 5f       	subi	r22, 0xFE	; 254
    4320:	7f 4f       	sbci	r23, 0xFF	; 255
    4322:	8f 4f       	sbci	r24, 0xFF	; 255
    4324:	9f 4f       	sbci	r25, 0xFF	; 255
    4326:	af 4f       	sbci	r26, 0xFF	; 255
    4328:	b1 e0       	ldi	r27, 0x01	; 1
    432a:	3e d0       	rcall	.+124    	; 0x43a8 <__ultoa_invert+0x9c>
    432c:	b4 e0       	ldi	r27, 0x04	; 4
    432e:	3c d0       	rcall	.+120    	; 0x43a8 <__ultoa_invert+0x9c>
    4330:	67 0f       	add	r22, r23
    4332:	78 1f       	adc	r23, r24
    4334:	89 1f       	adc	r24, r25
    4336:	9a 1f       	adc	r25, r26
    4338:	a1 1d       	adc	r26, r1
    433a:	68 0f       	add	r22, r24
    433c:	79 1f       	adc	r23, r25
    433e:	8a 1f       	adc	r24, r26
    4340:	91 1d       	adc	r25, r1
    4342:	a1 1d       	adc	r26, r1
    4344:	6a 0f       	add	r22, r26
    4346:	71 1d       	adc	r23, r1
    4348:	81 1d       	adc	r24, r1
    434a:	91 1d       	adc	r25, r1
    434c:	a1 1d       	adc	r26, r1
    434e:	20 d0       	rcall	.+64     	; 0x4390 <__ultoa_invert+0x84>
    4350:	09 f4       	brne	.+2      	; 0x4354 <__ultoa_invert+0x48>
    4352:	68 94       	set
    4354:	3f 91       	pop	r19
    4356:	2a e0       	ldi	r18, 0x0A	; 10
    4358:	26 9f       	mul	r18, r22
    435a:	11 24       	eor	r1, r1
    435c:	30 19       	sub	r19, r0
    435e:	30 5d       	subi	r19, 0xD0	; 208
    4360:	31 93       	st	Z+, r19
    4362:	de f6       	brtc	.-74     	; 0x431a <__ultoa_invert+0xe>
    4364:	cf 01       	movw	r24, r30
    4366:	08 95       	ret
    4368:	46 2f       	mov	r20, r22
    436a:	47 70       	andi	r20, 0x07	; 7
    436c:	40 5d       	subi	r20, 0xD0	; 208
    436e:	41 93       	st	Z+, r20
    4370:	b3 e0       	ldi	r27, 0x03	; 3
    4372:	0f d0       	rcall	.+30     	; 0x4392 <__ultoa_invert+0x86>
    4374:	c9 f7       	brne	.-14     	; 0x4368 <__ultoa_invert+0x5c>
    4376:	f6 cf       	rjmp	.-20     	; 0x4364 <__ultoa_invert+0x58>
    4378:	46 2f       	mov	r20, r22
    437a:	4f 70       	andi	r20, 0x0F	; 15
    437c:	40 5d       	subi	r20, 0xD0	; 208
    437e:	4a 33       	cpi	r20, 0x3A	; 58
    4380:	18 f0       	brcs	.+6      	; 0x4388 <__ultoa_invert+0x7c>
    4382:	49 5d       	subi	r20, 0xD9	; 217
    4384:	31 fd       	sbrc	r19, 1
    4386:	40 52       	subi	r20, 0x20	; 32
    4388:	41 93       	st	Z+, r20
    438a:	02 d0       	rcall	.+4      	; 0x4390 <__ultoa_invert+0x84>
    438c:	a9 f7       	brne	.-22     	; 0x4378 <__ultoa_invert+0x6c>
    438e:	ea cf       	rjmp	.-44     	; 0x4364 <__ultoa_invert+0x58>
    4390:	b4 e0       	ldi	r27, 0x04	; 4
    4392:	a6 95       	lsr	r26
    4394:	97 95       	ror	r25
    4396:	87 95       	ror	r24
    4398:	77 95       	ror	r23
    439a:	67 95       	ror	r22
    439c:	ba 95       	dec	r27
    439e:	c9 f7       	brne	.-14     	; 0x4392 <__ultoa_invert+0x86>
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	61 05       	cpc	r22, r1
    43a4:	71 05       	cpc	r23, r1
    43a6:	08 95       	ret
    43a8:	9b 01       	movw	r18, r22
    43aa:	ac 01       	movw	r20, r24
    43ac:	0a 2e       	mov	r0, r26
    43ae:	06 94       	lsr	r0
    43b0:	57 95       	ror	r21
    43b2:	47 95       	ror	r20
    43b4:	37 95       	ror	r19
    43b6:	27 95       	ror	r18
    43b8:	ba 95       	dec	r27
    43ba:	c9 f7       	brne	.-14     	; 0x43ae <__ultoa_invert+0xa2>
    43bc:	62 0f       	add	r22, r18
    43be:	73 1f       	adc	r23, r19
    43c0:	84 1f       	adc	r24, r20
    43c2:	95 1f       	adc	r25, r21
    43c4:	a0 1d       	adc	r26, r0
    43c6:	08 95       	ret

000043c8 <_exit>:
    43c8:	f8 94       	cli

000043ca <__stop_program>:
    43ca:	ff cf       	rjmp	.-2      	; 0x43ca <__stop_program>
