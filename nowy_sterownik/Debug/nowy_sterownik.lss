
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000456e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000034a  00800060  0000456e  00004602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029d  008003aa  008003aa  0000494c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000049a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005efb  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002053  00000000  00000000  0000aeff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c89  00000000  00000000  0000cf52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f1c  00000000  00000000  00010bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c20  00000000  00000000  00011af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ec3  00000000  00000000  00013718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  000165db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__vector_13>
      38:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	9f 08       	sbc	r9, r15
      56:	a6 08       	sbc	r10, r6
      58:	a9 08       	sbc	r10, r9
      5a:	af 08       	sbc	r10, r15
      5c:	b5 08       	sbc	r11, r5
      5e:	ba 08       	sbc	r11, r10
      60:	c0 08       	sbc	r12, r0
      62:	c7 08       	sbc	r12, r7
      64:	cb 08       	sbc	r12, r11
      66:	d3 08       	sbc	r13, r3
      68:	22 09       	sbc	r18, r2
      6a:	22 09       	sbc	r18, r2
      6c:	22 09       	sbc	r18, r2
      6e:	22 09       	sbc	r18, r2
      70:	22 09       	sbc	r18, r2
      72:	22 09       	sbc	r18, r2
      74:	22 09       	sbc	r18, r2
      76:	22 09       	sbc	r18, r2
      78:	22 09       	sbc	r18, r2
      7a:	22 09       	sbc	r18, r2
      7c:	22 09       	sbc	r18, r2
      7e:	22 09       	sbc	r18, r2
      80:	22 09       	sbc	r18, r2
      82:	22 09       	sbc	r18, r2
      84:	22 09       	sbc	r18, r2
      86:	22 09       	sbc	r18, r2
      88:	22 09       	sbc	r18, r2
      8a:	22 09       	sbc	r18, r2
      8c:	22 09       	sbc	r18, r2
      8e:	22 09       	sbc	r18, r2
      90:	22 09       	sbc	r18, r2
      92:	22 09       	sbc	r18, r2
      94:	22 09       	sbc	r18, r2
      96:	22 09       	sbc	r18, r2
      98:	22 09       	sbc	r18, r2
      9a:	22 09       	sbc	r18, r2
      9c:	22 09       	sbc	r18, r2
      9e:	22 09       	sbc	r18, r2
      a0:	22 09       	sbc	r18, r2
      a2:	22 09       	sbc	r18, r2
      a4:	22 09       	sbc	r18, r2
      a6:	22 09       	sbc	r18, r2
      a8:	22 09       	sbc	r18, r2
      aa:	22 09       	sbc	r18, r2
      ac:	22 09       	sbc	r18, r2
      ae:	22 09       	sbc	r18, r2
      b0:	22 09       	sbc	r18, r2
      b2:	22 09       	sbc	r18, r2
      b4:	22 09       	sbc	r18, r2
      b6:	22 09       	sbc	r18, r2
      b8:	22 09       	sbc	r18, r2
      ba:	22 09       	sbc	r18, r2
      bc:	22 09       	sbc	r18, r2
      be:	22 09       	sbc	r18, r2
      c0:	22 09       	sbc	r18, r2
      c2:	22 09       	sbc	r18, r2
      c4:	22 09       	sbc	r18, r2
      c6:	22 09       	sbc	r18, r2
      c8:	22 09       	sbc	r18, r2
      ca:	22 09       	sbc	r18, r2
      cc:	22 09       	sbc	r18, r2
      ce:	22 09       	sbc	r18, r2
      d0:	22 09       	sbc	r18, r2
      d2:	22 09       	sbc	r18, r2
      d4:	22 09       	sbc	r18, r2
      d6:	22 09       	sbc	r18, r2
      d8:	22 09       	sbc	r18, r2
      da:	22 09       	sbc	r18, r2
      dc:	22 09       	sbc	r18, r2
      de:	22 09       	sbc	r18, r2
      e0:	22 09       	sbc	r18, r2
      e2:	22 09       	sbc	r18, r2
      e4:	22 09       	sbc	r18, r2
      e6:	22 09       	sbc	r18, r2
      e8:	22 09       	sbc	r18, r2
      ea:	22 09       	sbc	r18, r2
      ec:	22 09       	sbc	r18, r2
      ee:	22 09       	sbc	r18, r2
      f0:	22 09       	sbc	r18, r2
      f2:	22 09       	sbc	r18, r2
      f4:	22 09       	sbc	r18, r2
      f6:	22 09       	sbc	r18, r2
      f8:	22 09       	sbc	r18, r2
      fa:	22 09       	sbc	r18, r2
      fc:	22 09       	sbc	r18, r2
      fe:	22 09       	sbc	r18, r2
     100:	22 09       	sbc	r18, r2
     102:	22 09       	sbc	r18, r2
     104:	22 09       	sbc	r18, r2
     106:	22 09       	sbc	r18, r2
     108:	22 09       	sbc	r18, r2
     10a:	22 09       	sbc	r18, r2
     10c:	22 09       	sbc	r18, r2
     10e:	22 09       	sbc	r18, r2
     110:	22 09       	sbc	r18, r2
     112:	22 09       	sbc	r18, r2
     114:	22 09       	sbc	r18, r2
     116:	da 08       	sbc	r13, r10
     118:	e1 08       	sbc	r14, r1
     11a:	e7 08       	sbc	r14, r7
     11c:	ec 08       	sbc	r14, r12
     11e:	f2 08       	sbc	r15, r2
     120:	f8 08       	sbc	r15, r8
     122:	22 09       	sbc	r18, r2
     124:	22 09       	sbc	r18, r2
     126:	22 09       	sbc	r18, r2
     128:	22 09       	sbc	r18, r2
     12a:	22 09       	sbc	r18, r2
     12c:	11 09       	sbc	r17, r1
     12e:	22 09       	sbc	r18, r2
     130:	22 09       	sbc	r18, r2
     132:	00 09       	sbc	r16, r0
     134:	05 09       	sbc	r16, r5
     136:	22 09       	sbc	r18, r2
     138:	fd 08       	sbc	r15, r13
     13a:	0b 09       	sbc	r16, r11
     13c:	22 09       	sbc	r18, r2
     13e:	22 09       	sbc	r18, r2
     140:	22 09       	sbc	r18, r2
     142:	22 09       	sbc	r18, r2
     144:	22 09       	sbc	r18, r2
     146:	22 09       	sbc	r18, r2
     148:	22 09       	sbc	r18, r2
     14a:	22 09       	sbc	r18, r2
     14c:	22 09       	sbc	r18, r2
     14e:	22 09       	sbc	r18, r2
     150:	22 09       	sbc	r18, r2
     152:	22 09       	sbc	r18, r2
     154:	22 09       	sbc	r18, r2
     156:	22 09       	sbc	r18, r2
     158:	22 09       	sbc	r18, r2
     15a:	22 09       	sbc	r18, r2
     15c:	22 09       	sbc	r18, r2
     15e:	22 09       	sbc	r18, r2
     160:	22 09       	sbc	r18, r2
     162:	22 09       	sbc	r18, r2
     164:	22 09       	sbc	r18, r2
     166:	22 09       	sbc	r18, r2
     168:	22 09       	sbc	r18, r2
     16a:	22 09       	sbc	r18, r2
     16c:	22 09       	sbc	r18, r2
     16e:	22 09       	sbc	r18, r2
     170:	22 09       	sbc	r18, r2
     172:	22 09       	sbc	r18, r2
     174:	22 09       	sbc	r18, r2
     176:	22 09       	sbc	r18, r2
     178:	22 09       	sbc	r18, r2
     17a:	22 09       	sbc	r18, r2
     17c:	22 09       	sbc	r18, r2
     17e:	22 09       	sbc	r18, r2
     180:	22 09       	sbc	r18, r2
     182:	22 09       	sbc	r18, r2
     184:	22 09       	sbc	r18, r2
     186:	22 09       	sbc	r18, r2
     188:	22 09       	sbc	r18, r2
     18a:	22 09       	sbc	r18, r2
     18c:	22 09       	sbc	r18, r2
     18e:	22 09       	sbc	r18, r2
     190:	22 09       	sbc	r18, r2
     192:	22 09       	sbc	r18, r2
     194:	22 09       	sbc	r18, r2
     196:	22 09       	sbc	r18, r2
     198:	22 09       	sbc	r18, r2
     19a:	22 09       	sbc	r18, r2
     19c:	22 09       	sbc	r18, r2
     19e:	22 09       	sbc	r18, r2
     1a0:	22 09       	sbc	r18, r2
     1a2:	22 09       	sbc	r18, r2
     1a4:	22 09       	sbc	r18, r2
     1a6:	22 09       	sbc	r18, r2
     1a8:	22 09       	sbc	r18, r2
     1aa:	22 09       	sbc	r18, r2
     1ac:	22 09       	sbc	r18, r2
     1ae:	22 09       	sbc	r18, r2
     1b0:	22 09       	sbc	r18, r2
     1b2:	22 09       	sbc	r18, r2
     1b4:	22 09       	sbc	r18, r2
     1b6:	22 09       	sbc	r18, r2
     1b8:	22 09       	sbc	r18, r2
     1ba:	22 09       	sbc	r18, r2
     1bc:	22 09       	sbc	r18, r2
     1be:	22 09       	sbc	r18, r2
     1c0:	22 09       	sbc	r18, r2
     1c2:	22 09       	sbc	r18, r2
     1c4:	22 09       	sbc	r18, r2
     1c6:	22 09       	sbc	r18, r2
     1c8:	22 09       	sbc	r18, r2
     1ca:	22 09       	sbc	r18, r2
     1cc:	22 09       	sbc	r18, r2
     1ce:	22 09       	sbc	r18, r2
     1d0:	22 09       	sbc	r18, r2
     1d2:	22 09       	sbc	r18, r2
     1d4:	22 09       	sbc	r18, r2
     1d6:	22 09       	sbc	r18, r2
     1d8:	22 09       	sbc	r18, r2
     1da:	22 09       	sbc	r18, r2
     1dc:	22 09       	sbc	r18, r2
     1de:	22 09       	sbc	r18, r2
     1e0:	22 09       	sbc	r18, r2
     1e2:	22 09       	sbc	r18, r2
     1e4:	22 09       	sbc	r18, r2
     1e6:	22 09       	sbc	r18, r2
     1e8:	22 09       	sbc	r18, r2
     1ea:	22 09       	sbc	r18, r2
     1ec:	22 09       	sbc	r18, r2
     1ee:	22 09       	sbc	r18, r2
     1f0:	22 09       	sbc	r18, r2
     1f2:	22 09       	sbc	r18, r2
     1f4:	22 09       	sbc	r18, r2
     1f6:	22 09       	sbc	r18, r2
     1f8:	22 09       	sbc	r18, r2
     1fa:	22 09       	sbc	r18, r2
     1fc:	22 09       	sbc	r18, r2
     1fe:	22 09       	sbc	r18, r2
     200:	22 09       	sbc	r18, r2
     202:	22 09       	sbc	r18, r2
     204:	22 09       	sbc	r18, r2
     206:	22 09       	sbc	r18, r2
     208:	22 09       	sbc	r18, r2
     20a:	22 09       	sbc	r18, r2
     20c:	22 09       	sbc	r18, r2
     20e:	22 09       	sbc	r18, r2
     210:	22 09       	sbc	r18, r2
     212:	22 09       	sbc	r18, r2
     214:	22 09       	sbc	r18, r2
     216:	22 09       	sbc	r18, r2
     218:	22 09       	sbc	r18, r2
     21a:	22 09       	sbc	r18, r2
     21c:	22 09       	sbc	r18, r2
     21e:	22 09       	sbc	r18, r2
     220:	22 09       	sbc	r18, r2
     222:	22 09       	sbc	r18, r2
     224:	22 09       	sbc	r18, r2
     226:	22 09       	sbc	r18, r2
     228:	22 09       	sbc	r18, r2
     22a:	22 09       	sbc	r18, r2
     22c:	22 09       	sbc	r18, r2
     22e:	22 09       	sbc	r18, r2
     230:	22 09       	sbc	r18, r2
     232:	22 09       	sbc	r18, r2
     234:	22 09       	sbc	r18, r2
     236:	22 09       	sbc	r18, r2
     238:	22 09       	sbc	r18, r2
     23a:	22 09       	sbc	r18, r2
     23c:	22 09       	sbc	r18, r2
     23e:	22 09       	sbc	r18, r2
     240:	22 09       	sbc	r18, r2
     242:	22 09       	sbc	r18, r2
     244:	15 09       	sbc	r17, r5
     246:	21 09       	sbc	r18, r1
     248:	1f 09       	sbc	r17, r15
     24a:	1d 09       	sbc	r17, r13
     24c:	1b 09       	sbc	r17, r11
     24e:	19 09       	sbc	r17, r9
     250:	17 09       	sbc	r17, r7
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_7_menu+0x18>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ee e6       	ldi	r30, 0x6E	; 110
     3ea:	f5 e4       	ldi	r31, 0x45	; 69
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	aa 3a       	cpi	r26, 0xAA	; 170
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	26 e0       	ldi	r18, 0x06	; 6
     3fa:	aa ea       	ldi	r26, 0xAA	; 170
     3fc:	b3 e0       	ldi	r27, 0x03	; 3
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a7 34       	cpi	r26, 0x47	; 71
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 b5 22 	jmp	0x456a	; 0x456a <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	84 e2       	ldi	r24, 0x24	; 36
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	0e 94 3b 22 	call	0x4476	; 0x4476 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	84 e2       	ldi	r24, 0x24	; 36
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	0e 94 24 19 	call	0x3248	; 0x3248 <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <timer0_init>
	init_display_drv();
     45a:	0e 94 56 08 	call	0x10ac	; 0x10ac <init_display_drv>
	init_buttons();
     45e:	0e 94 cc 04 	call	0x998	; 0x998 <init_buttons>
	init_system();
     462:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <init_system>
	init_measure();
     466:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	init_pin();
     472:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     476:	78 94       	sei
	init_driver();
     478:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     47c:	81 e8       	ldi	r24, 0x81	; 129
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     488:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     48c:	0e 94 07 11 	call	0x220e	; 0x220e <measure_get_servo_calibration>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     494:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <disp_process>
		animation();
     498:	0e 94 ae 0b 	call	0x175c	; 0x175c <animation>
		process_button();
     49c:	0e 94 22 04 	call	0x844	; 0x844 <process_button>
		disp_fast_process();
     4a0:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <disp_fast_process>
		disp_very_fast_process();
     4a4:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <disp_very_fast_process>
		dcmotor_process(motor_value);
     4a8:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <motor_value>
     4ac:	0e 94 da 07 	call	0xfb4	; 0xfb4 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b0:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
     4b4:	0e 94 3f 13 	call	0x267e	; 0x267e <servo_process>
		menu_process();
     4b8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4bc:	0e 94 9e 0c 	call	0x193c	; 0x193c <error_event>
		error_led_blink();
     4c0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <error_led_blink>
		measure_process();
     4c4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <measure_process>
		accumulator_process();
     4c8:	0e 94 87 02 	call	0x50e	; 0x50e <accumulator_process>
		accum_led_process();
     4cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <accum_led_process>
		buzzer_process();
     4d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <buzzer_process>
     4d4:	df cf       	rjmp	.-66     	; 0x494 <main+0x22>

000004d6 <accum_get_voltage>:
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 43 11 	call	0x2286	; 0x2286 <measure_get_filtered_value>
     4dc:	bc 01       	movw	r22, r24
     4de:	66 0f       	add	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	66 0f       	add	r22, r22
     4e4:	77 1f       	adc	r23, r23
     4e6:	86 0f       	add	r24, r22
     4e8:	97 1f       	adc	r25, r23
     4ea:	bc 01       	movw	r22, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
     4f4:	26 e6       	ldi	r18, 0x66	; 102
     4f6:	36 e6       	ldi	r19, 0x66	; 102
     4f8:	46 eb       	ldi	r20, 0xB6	; 182
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5a e3       	ldi	r21, 0x3A	; 58
     508:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
     50c:	08 95       	ret

0000050e <accumulator_process>:
     50e:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
     512:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
     516:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
     51a:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
     51e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <accumulator_timer.1914>
     522:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <accumulator_timer.1914+0x1>
     526:	a0 91 b1 03 	lds	r26, 0x03B1	; 0x8003b1 <accumulator_timer.1914+0x2>
     52a:	b0 91 b2 03 	lds	r27, 0x03B2	; 0x8003b2 <accumulator_timer.1914+0x3>
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a6 07       	cpc	r26, r22
     534:	b7 07       	cpc	r27, r23
     536:	98 f5       	brcc	.+102    	; 0x59e <accumulator_process+0x90>
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 43 11 	call	0x2286	; 0x2286 <measure_get_filtered_value>
     53e:	89 35       	cpi	r24, 0x59	; 89
     540:	22 e0       	ldi	r18, 0x02	; 2
     542:	92 07       	cpc	r25, r18
     544:	18 f0       	brcs	.+6      	; 0x54c <accumulator_process+0x3e>
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	20 93 b3 03 	sts	0x03B3, r18	; 0x8003b3 <accumulator_state>
     54c:	8b 38       	cpi	r24, 0x8B	; 139
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	92 07       	cpc	r25, r18
     552:	18 f4       	brcc	.+6      	; 0x55a <accumulator_process+0x4c>
     554:	22 e0       	ldi	r18, 0x02	; 2
     556:	20 93 b3 03 	sts	0x03B3, r18	; 0x8003b3 <accumulator_state>
     55a:	8e 35       	cpi	r24, 0x5E	; 94
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	92 07       	cpc	r25, r18
     560:	18 f4       	brcc	.+6      	; 0x568 <accumulator_process+0x5a>
     562:	23 e0       	ldi	r18, 0x03	; 3
     564:	20 93 b3 03 	sts	0x03B3, r18	; 0x8003b3 <accumulator_state>
     568:	8c 58       	subi	r24, 0x8C	; 140
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	8c 3c       	cpi	r24, 0xCC	; 204
     56e:	91 05       	cpc	r25, r1
     570:	10 f4       	brcc	.+4      	; 0x576 <accumulator_process+0x68>
     572:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <accumulator_state>
     576:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
     57a:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
     57e:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
     582:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
     586:	8c 59       	subi	r24, 0x9C	; 156
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	af 4f       	sbci	r26, 0xFF	; 255
     58c:	bf 4f       	sbci	r27, 0xFF	; 255
     58e:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <accumulator_timer.1914>
     592:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <accumulator_timer.1914+0x1>
     596:	a0 93 b1 03 	sts	0x03B1, r26	; 0x8003b1 <accumulator_timer.1914+0x2>
     59a:	b0 93 b2 03 	sts	0x03B2, r27	; 0x8003b2 <accumulator_timer.1914+0x3>
     59e:	08 95       	ret

000005a0 <accum_led_process>:
     5a0:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
     5a4:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
     5a8:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
     5ac:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
     5b0:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     5b4:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     5b8:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     5bc:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	a6 07       	cpc	r26, r22
     5c6:	b7 07       	cpc	r27, r23
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <accum_led_process+0x2c>
     5ca:	86 c0       	rjmp	.+268    	; 0x6d8 <accum_led_process+0x138>
     5cc:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <accumulator_state>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	e9 f0       	breq	.+58     	; 0x60e <accum_led_process+0x6e>
     5d4:	30 f0       	brcs	.+12     	; 0x5e2 <accum_led_process+0x42>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	99 f1       	breq	.+102    	; 0x640 <accum_led_process+0xa0>
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <accum_led_process+0x40>
     5de:	67 c0       	rjmp	.+206    	; 0x6ae <accum_led_process+0x10e>
     5e0:	08 95       	ret
     5e2:	c5 98       	cbi	0x18, 5	; 24
     5e4:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     5e8:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     5ec:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     5f0:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     5f4:	88 53       	subi	r24, 0x38	; 56
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	af 4f       	sbci	r26, 0xFF	; 255
     5fa:	bf 4f       	sbci	r27, 0xFF	; 255
     5fc:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <process_timer.1918>
     600:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <process_timer.1918+0x1>
     604:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <process_timer.1918+0x2>
     608:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <process_timer.1918+0x3>
     60c:	08 95       	ret
     60e:	98 b3       	in	r25, 0x18	; 24
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	89 27       	eor	r24, r25
     614:	88 bb       	out	0x18, r24	; 24
     616:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     61a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     61e:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     622:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     626:	86 50       	subi	r24, 0x06	; 6
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	af 4f       	sbci	r26, 0xFF	; 255
     62c:	bf 4f       	sbci	r27, 0xFF	; 255
     62e:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <process_timer.1918>
     632:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <process_timer.1918+0x1>
     636:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <process_timer.1918+0x2>
     63a:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <process_timer.1918+0x3>
     63e:	08 95       	ret
     640:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <__data_end>
     644:	81 11       	cpse	r24, r1
     646:	19 c0       	rjmp	.+50     	; 0x67a <accum_led_process+0xda>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <__data_end>
     64e:	c5 9a       	sbi	0x18, 5	; 24
     650:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     654:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     658:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     65c:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     660:	8c 50       	subi	r24, 0x0C	; 12
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	af 4f       	sbci	r26, 0xFF	; 255
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <process_timer.1918>
     66c:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <process_timer.1918+0x1>
     670:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <process_timer.1918+0x2>
     674:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <process_timer.1918+0x3>
     678:	08 95       	ret
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	69 f5       	brne	.+90     	; 0x6d8 <accum_led_process+0x138>
     67e:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <__data_end>
     682:	c5 98       	cbi	0x18, 5	; 24
     684:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     688:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     68c:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     690:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     694:	84 52       	subi	r24, 0x24	; 36
     696:	9a 4f       	sbci	r25, 0xFA	; 250
     698:	af 4f       	sbci	r26, 0xFF	; 255
     69a:	bf 4f       	sbci	r27, 0xFF	; 255
     69c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <process_timer.1918>
     6a0:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <process_timer.1918+0x1>
     6a4:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <process_timer.1918+0x2>
     6a8:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <process_timer.1918+0x3>
     6ac:	08 95       	ret
     6ae:	c5 9a       	sbi	0x18, 5	; 24
     6b0:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <process_timer.1918>
     6b4:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <process_timer.1918+0x1>
     6b8:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <process_timer.1918+0x2>
     6bc:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <process_timer.1918+0x3>
     6c0:	88 51       	subi	r24, 0x18	; 24
     6c2:	9c 4f       	sbci	r25, 0xFC	; 252
     6c4:	af 4f       	sbci	r26, 0xFF	; 255
     6c6:	bf 4f       	sbci	r27, 0xFF	; 255
     6c8:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <process_timer.1918>
     6cc:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <process_timer.1918+0x1>
     6d0:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <process_timer.1918+0x2>
     6d4:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <process_timer.1918+0x3>
     6d8:	08 95       	ret

000006da <adc_setchannel>:
     6da:	37 98       	cbi	0x06, 7	; 6
     6dc:	97 b1       	in	r25, 0x07	; 7
     6de:	98 7f       	andi	r25, 0xF8	; 248
     6e0:	87 70       	andi	r24, 0x07	; 7
     6e2:	89 2b       	or	r24, r25
     6e4:	87 b9       	out	0x07, r24	; 7
     6e6:	37 9a       	sbi	0x06, 7	; 6
     6e8:	08 95       	ret

000006ea <adc_readsel>:
     6ea:	36 9a       	sbi	0x06, 6	; 6
     6ec:	36 99       	sbic	0x06, 6	; 6
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <adc_readsel+0x2>
     6f0:	84 b1       	in	r24, 0x04	; 4
     6f2:	95 b1       	in	r25, 0x05	; 5
     6f4:	08 95       	ret

000006f6 <adc_read>:
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <adc_setchannel>
     6fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <adc_readsel>
     6fe:	08 95       	ret

00000700 <read_button>:
     700:	dc 01       	movw	r26, r24
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	20 81       	ld	r18, Z
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	18 96       	adiw	r26, 0x08	; 8
     712:	0c 90       	ld	r0, X
     714:	02 c0       	rjmp	.+4      	; 0x71a <read_button+0x1a>
     716:	f5 95       	asr	r31
     718:	e7 95       	ror	r30
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <read_button+0x16>
     71e:	cf 01       	movw	r24, r30
     720:	81 70       	andi	r24, 0x01	; 1
     722:	08 95       	ret

00000724 <init_but_struct>:
     724:	e1 ed       	ldi	r30, 0xD1	; 209
     726:	f5 e0       	ldi	r31, 0x05	; 5
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	85 83       	std	Z+5, r24	; 0x05
     72e:	14 86       	std	Z+12, r1	; 0x0c
     730:	13 86       	std	Z+11, r1	; 0x0b
     732:	12 86       	std	Z+10, r1	; 0x0a
     734:	11 86       	std	Z+9, r1	; 0x09
     736:	16 86       	std	Z+14, r1	; 0x0e
     738:	15 86       	std	Z+13, r1	; 0x0d
     73a:	26 e3       	ldi	r18, 0x36	; 54
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	26 83       	std	Z+6, r18	; 0x06
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	90 87       	std	Z+8, r25	; 0x08
     746:	e4 ea       	ldi	r30, 0xA4	; 164
     748:	f5 e0       	ldi	r31, 0x05	; 5
     74a:	14 82       	std	Z+4, r1	; 0x04
     74c:	85 83       	std	Z+5, r24	; 0x05
     74e:	14 86       	std	Z+12, r1	; 0x0c
     750:	13 86       	std	Z+11, r1	; 0x0b
     752:	12 86       	std	Z+10, r1	; 0x0a
     754:	11 86       	std	Z+9, r1	; 0x09
     756:	16 86       	std	Z+14, r1	; 0x0e
     758:	15 86       	std	Z+13, r1	; 0x0d
     75a:	37 83       	std	Z+7, r19	; 0x07
     75c:	26 83       	std	Z+6, r18	; 0x06
     75e:	80 87       	std	Z+8, r24	; 0x08
     760:	e3 eb       	ldi	r30, 0xB3	; 179
     762:	f5 e0       	ldi	r31, 0x05	; 5
     764:	14 82       	std	Z+4, r1	; 0x04
     766:	85 83       	std	Z+5, r24	; 0x05
     768:	14 86       	std	Z+12, r1	; 0x0c
     76a:	13 86       	std	Z+11, r1	; 0x0b
     76c:	12 86       	std	Z+10, r1	; 0x0a
     76e:	11 86       	std	Z+9, r1	; 0x09
     770:	16 86       	std	Z+14, r1	; 0x0e
     772:	15 86       	std	Z+13, r1	; 0x0d
     774:	37 83       	std	Z+7, r19	; 0x07
     776:	26 83       	std	Z+6, r18	; 0x06
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	90 87       	std	Z+8, r25	; 0x08
     77c:	e1 e9       	ldi	r30, 0x91	; 145
     77e:	f5 e0       	ldi	r31, 0x05	; 5
     780:	14 82       	std	Z+4, r1	; 0x04
     782:	85 83       	std	Z+5, r24	; 0x05
     784:	14 86       	std	Z+12, r1	; 0x0c
     786:	13 86       	std	Z+11, r1	; 0x0b
     788:	12 86       	std	Z+10, r1	; 0x0a
     78a:	11 86       	std	Z+9, r1	; 0x09
     78c:	16 86       	std	Z+14, r1	; 0x0e
     78e:	15 86       	std	Z+13, r1	; 0x0d
     790:	40 e3       	ldi	r20, 0x30	; 48
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	57 83       	std	Z+7, r21	; 0x07
     796:	46 83       	std	Z+6, r20	; 0x06
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	90 87       	std	Z+8, r25	; 0x08
     79c:	e2 e8       	ldi	r30, 0x82	; 130
     79e:	f5 e0       	ldi	r31, 0x05	; 5
     7a0:	14 82       	std	Z+4, r1	; 0x04
     7a2:	85 83       	std	Z+5, r24	; 0x05
     7a4:	14 86       	std	Z+12, r1	; 0x0c
     7a6:	13 86       	std	Z+11, r1	; 0x0b
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	11 86       	std	Z+9, r1	; 0x09
     7ac:	16 86       	std	Z+14, r1	; 0x0e
     7ae:	15 86       	std	Z+13, r1	; 0x0d
     7b0:	37 83       	std	Z+7, r19	; 0x07
     7b2:	26 83       	std	Z+6, r18	; 0x06
     7b4:	90 87       	std	Z+8, r25	; 0x08
     7b6:	e2 ec       	ldi	r30, 0xC2	; 194
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	14 82       	std	Z+4, r1	; 0x04
     7bc:	85 83       	std	Z+5, r24	; 0x05
     7be:	14 86       	std	Z+12, r1	; 0x0c
     7c0:	13 86       	std	Z+11, r1	; 0x0b
     7c2:	12 86       	std	Z+10, r1	; 0x0a
     7c4:	11 86       	std	Z+9, r1	; 0x09
     7c6:	16 86       	std	Z+14, r1	; 0x0e
     7c8:	15 86       	std	Z+13, r1	; 0x0d
     7ca:	69 e3       	ldi	r22, 0x39	; 57
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	77 83       	std	Z+7, r23	; 0x07
     7d0:	66 83       	std	Z+6, r22	; 0x06
     7d2:	a4 e0       	ldi	r26, 0x04	; 4
     7d4:	a0 87       	std	Z+8, r26	; 0x08
     7d6:	e0 ee       	ldi	r30, 0xE0	; 224
     7d8:	f5 e0       	ldi	r31, 0x05	; 5
     7da:	14 82       	std	Z+4, r1	; 0x04
     7dc:	85 83       	std	Z+5, r24	; 0x05
     7de:	14 86       	std	Z+12, r1	; 0x0c
     7e0:	13 86       	std	Z+11, r1	; 0x0b
     7e2:	12 86       	std	Z+10, r1	; 0x0a
     7e4:	11 86       	std	Z+9, r1	; 0x09
     7e6:	16 86       	std	Z+14, r1	; 0x0e
     7e8:	15 86       	std	Z+13, r1	; 0x0d
     7ea:	43 e3       	ldi	r20, 0x33	; 51
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	57 83       	std	Z+7, r21	; 0x07
     7f0:	46 83       	std	Z+6, r20	; 0x06
     7f2:	80 87       	std	Z+8, r24	; 0x08
     7f4:	ef ee       	ldi	r30, 0xEF	; 239
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	14 82       	std	Z+4, r1	; 0x04
     7fa:	85 83       	std	Z+5, r24	; 0x05
     7fc:	14 86       	std	Z+12, r1	; 0x0c
     7fe:	13 86       	std	Z+11, r1	; 0x0b
     800:	12 86       	std	Z+10, r1	; 0x0a
     802:	11 86       	std	Z+9, r1	; 0x09
     804:	16 86       	std	Z+14, r1	; 0x0e
     806:	15 86       	std	Z+13, r1	; 0x0d
     808:	37 83       	std	Z+7, r19	; 0x07
     80a:	26 83       	std	Z+6, r18	; 0x06
     80c:	a0 87       	std	Z+8, r26	; 0x08
     80e:	e4 e6       	ldi	r30, 0x64	; 100
     810:	f5 e0       	ldi	r31, 0x05	; 5
     812:	14 82       	std	Z+4, r1	; 0x04
     814:	85 83       	std	Z+5, r24	; 0x05
     816:	14 86       	std	Z+12, r1	; 0x0c
     818:	13 86       	std	Z+11, r1	; 0x0b
     81a:	12 86       	std	Z+10, r1	; 0x0a
     81c:	11 86       	std	Z+9, r1	; 0x09
     81e:	16 86       	std	Z+14, r1	; 0x0e
     820:	15 86       	std	Z+13, r1	; 0x0d
     822:	77 83       	std	Z+7, r23	; 0x07
     824:	66 83       	std	Z+6, r22	; 0x06
     826:	90 87       	std	Z+8, r25	; 0x08
     828:	e3 e7       	ldi	r30, 0x73	; 115
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	14 82       	std	Z+4, r1	; 0x04
     82e:	85 83       	std	Z+5, r24	; 0x05
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	13 86       	std	Z+11, r1	; 0x0b
     834:	12 86       	std	Z+10, r1	; 0x0a
     836:	11 86       	std	Z+9, r1	; 0x09
     838:	16 86       	std	Z+14, r1	; 0x0e
     83a:	15 86       	std	Z+13, r1	; 0x0d
     83c:	57 83       	std	Z+7, r21	; 0x07
     83e:	46 83       	std	Z+6, r20	; 0x06
     840:	10 86       	std	Z+8, r1	; 0x08
     842:	08 95       	ret

00000844 <process_button>:
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
     856:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
     85a:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
     85e:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
     862:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <timer_button>
     866:	90 91 a1 05 	lds	r25, 0x05A1	; 0x8005a1 <timer_button+0x1>
     86a:	a0 91 a2 05 	lds	r26, 0x05A2	; 0x8005a2 <timer_button+0x2>
     86e:	b0 91 a3 05 	lds	r27, 0x05A3	; 0x8005a3 <timer_button+0x3>
     872:	84 17       	cp	r24, r20
     874:	95 07       	cpc	r25, r21
     876:	a6 07       	cpc	r26, r22
     878:	b7 07       	cpc	r27, r23
     87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
     87c:	85 c0       	rjmp	.+266    	; 0x988 <__stack+0x129>
     87e:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
     882:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
     886:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
     88a:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
     88e:	44 96       	adiw	r24, 0x14	; 20
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
     894:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <timer_button>
     898:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <timer_button+0x1>
     89c:	a0 93 a2 05 	sts	0x05A2, r26	; 0x8005a2 <timer_button+0x2>
     8a0:	b0 93 a3 05 	sts	0x05A3, r27	; 0x8005a3 <timer_button+0x3>
     8a4:	c0 e6       	ldi	r28, 0x60	; 96
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f4 e7       	ldi	r31, 0x74	; 116
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	dd 24       	eor	r13, r13
     8b6:	d3 94       	inc	r13
     8b8:	8e 01       	movw	r16, r28
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	0e 94 80 03 	call	0x700	; 0x700 <read_button>
     8c2:	e8 81       	ld	r30, Y
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	89 17       	cp	r24, r25
     8ca:	e1 f0       	breq	.+56     	; 0x904 <__stack+0xa5>
     8cc:	85 83       	std	Z+5, r24	; 0x05
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	61 f4       	brne	.+24     	; 0x8ea <__stack+0x8b>
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	dc 01       	movw	r26, r24
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	1a 97       	sbiw	r26, 0x0a	; 10
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	41 c0       	rjmp	.+130    	; 0x968 <__stack+0x109>
     8e6:	09 95       	icall
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <__stack+0x109>
     8ea:	81 11       	cpse	r24, r1
     8ec:	3d c0       	rjmp	.+122    	; 0x968 <__stack+0x109>
     8ee:	88 81       	ld	r24, Y
     8f0:	99 81       	ldd	r25, Y+1	; 0x01
     8f2:	dc 01       	movw	r26, r24
     8f4:	1b 96       	adiw	r26, 0x0b	; 11
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	1c 97       	sbiw	r26, 0x0c	; 12
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	09 95       	icall
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	81 11       	cpse	r24, r1
     906:	30 c0       	rjmp	.+96     	; 0x968 <__stack+0x109>
     908:	d8 01       	movw	r26, r16
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a2 81       	ldd	r26, Z+2	; 0x02
     914:	b3 81       	ldd	r27, Z+3	; 0x03
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	a1 1d       	adc	r26, r1
     91a:	b1 1d       	adc	r27, r1
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	a2 83       	std	Z+2, r26	; 0x02
     922:	b3 83       	std	Z+3, r27	; 0x03
     924:	d8 01       	movw	r26, r16
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	a2 81       	ldd	r26, Z+2	; 0x02
     930:	b3 81       	ldd	r27, Z+3	; 0x03
     932:	88 97       	sbiw	r24, 0x28	; 40
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	10 f1       	brcs	.+68     	; 0x97e <__stack+0x11f>
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	f9 f0       	breq	.+62     	; 0x97e <__stack+0x11f>
     940:	05 84       	ldd	r0, Z+13	; 0x0d
     942:	f6 85       	ldd	r31, Z+14	; 0x0e
     944:	e0 2d       	mov	r30, r0
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0xf1>
     94a:	81 ed       	ldi	r24, 0xD1	; 209
     94c:	95 e0       	ldi	r25, 0x05	; 5
     94e:	09 95       	icall
     950:	d8 01       	movw	r26, r16
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	d4 82       	std	Z+4, r13	; 0x04
     966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x11f>
     968:	d8 01       	movw	r26, r16
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	22 96       	adiw	r28, 0x02	; 2
     980:	ce 15       	cp	r28, r14
     982:	df 05       	cpc	r29, r15
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	98 cf       	rjmp	.-208    	; 0x8b8 <__stack+0x59>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	08 95       	ret

00000998 <init_buttons>:
     998:	0e 94 92 03 	call	0x724	; 0x724 <init_but_struct>
     99c:	ba 98       	cbi	0x17, 2	; 23
     99e:	c2 9a       	sbi	0x18, 2	; 24
     9a0:	b9 98       	cbi	0x17, 1	; 23
     9a2:	c1 9a       	sbi	0x18, 1	; 24
     9a4:	be 98       	cbi	0x17, 6	; 23
     9a6:	c6 9a       	sbi	0x18, 6	; 24
     9a8:	8b 98       	cbi	0x11, 3	; 17
     9aa:	93 9a       	sbi	0x12, 3	; 18
     9ac:	bb 98       	cbi	0x17, 3	; 23
     9ae:	c3 9a       	sbi	0x18, 3	; 24
     9b0:	d4 98       	cbi	0x1a, 4	; 26
     9b2:	dc 9a       	sbi	0x1b, 4	; 27
     9b4:	a1 98       	cbi	0x14, 1	; 20
     9b6:	a9 9a       	sbi	0x15, 1	; 21
     9b8:	bc 98       	cbi	0x17, 4	; 23
     9ba:	c4 9a       	sbi	0x18, 4	; 24
     9bc:	d3 98       	cbi	0x1a, 3	; 26
     9be:	db 9a       	sbi	0x1b, 3	; 27
     9c0:	a0 98       	cbi	0x14, 0	; 20
     9c2:	a8 9a       	sbi	0x15, 0	; 21
     9c4:	08 95       	ret

000009c6 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     9c6:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
     9ca:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
     9ce:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
     9d2:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
     9d6:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <buzzer_timer>
     9da:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <buzzer_timer+0x1>
     9de:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <buzzer_timer+0x2>
     9e2:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <buzzer_timer+0x3>
     9e6:	84 17       	cp	r24, r20
     9e8:	95 07       	cpc	r25, r21
     9ea:	a6 07       	cpc	r26, r22
     9ec:	b7 07       	cpc	r27, r23
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <buzzer_process+0x2c>
     9f0:	5e c0       	rjmp	.+188    	; 0xaae <buzzer_process+0xe8>
	{
		#if CONFIG_DEVICE_SIEWNIK && DARK_MENU
		if (dark_menu_get_value(MENU_BUZZER) == 0)
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
     9f8:	81 11       	cpse	r24, r1
     9fa:	59 c0       	rjmp	.+178    	; 0xaae <buzzer_process+0xe8>
		#endif
		{
			if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     9fc:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
     a00:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
     a04:	95 ff       	sbrs	r25, 5
     a06:	37 c0       	rjmp	.+110    	; 0xa76 <buzzer_process+0xb0>
     a08:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <buzzer_state>
     a0c:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <buzzer_state+0x1>
     a10:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <buzzer_state+0x2>
     a14:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <buzzer_state+0x3>
     a18:	89 2b       	or	r24, r25
     a1a:	8a 2b       	or	r24, r26
     a1c:	8b 2b       	or	r24, r27
     a1e:	59 f5       	brne	.+86     	; 0xa76 <buzzer_process+0xb0>
			{
				ON_BUZZER;
     a20:	c0 9a       	sbi	0x18, 0	; 24
				CLEAR_PIN(system_events, EV_ON_BUZZER);
     a22:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
     a26:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
     a2a:	9f 7d       	andi	r25, 0xDF	; 223
     a2c:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
     a30:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
				buzzer_state = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <buzzer_state>
     a40:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <buzzer_state+0x1>
     a44:	a0 93 b6 03 	sts	0x03B6, r26	; 0x8003b6 <buzzer_state+0x2>
     a48:	b0 93 b7 03 	sts	0x03B7, r27	; 0x8003b7 <buzzer_state+0x3>
				buzzer_timer += 100;
     a4c:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <buzzer_timer>
     a50:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <buzzer_timer+0x1>
     a54:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <buzzer_timer+0x2>
     a58:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <buzzer_timer+0x3>
     a5c:	8c 59       	subi	r24, 0x9C	; 156
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	af 4f       	sbci	r26, 0xFF	; 255
     a62:	bf 4f       	sbci	r27, 0xFF	; 255
     a64:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <buzzer_timer>
     a68:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <buzzer_timer+0x1>
     a6c:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <buzzer_timer+0x2>
     a70:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <buzzer_timer+0x3>
     a74:	08 95       	ret
			}
			else
			{
				OFF_BUZZER;
     a76:	c0 98       	cbi	0x18, 0	; 24
				buzzer_state = 0;
     a78:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <buzzer_state>
     a7c:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <buzzer_state+0x1>
     a80:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <buzzer_state+0x2>
     a84:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <buzzer_state+0x3>
				buzzer_timer += 50;
     a88:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <buzzer_timer>
     a8c:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <buzzer_timer+0x1>
     a90:	a0 91 ba 03 	lds	r26, 0x03BA	; 0x8003ba <buzzer_timer+0x2>
     a94:	b0 91 bb 03 	lds	r27, 0x03BB	; 0x8003bb <buzzer_timer+0x3>
     a98:	c2 96       	adiw	r24, 0x32	; 50
     a9a:	a1 1d       	adc	r26, r1
     a9c:	b1 1d       	adc	r27, r1
     a9e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <buzzer_timer>
     aa2:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <buzzer_timer+0x1>
     aa6:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <buzzer_timer+0x2>
     aaa:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <buzzer_timer+0x3>
     aae:	08 95       	ret

00000ab0 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     ab0:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     ab2:	c0 98       	cbi	0x18, 0	; 24
     ab4:	08 95       	ret

00000ab6 <button_7_menu>:
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
		menuSaveParameters[configured_parameter]++;
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
     ab6:	a4 e7       	ldi	r26, 0x74	; 116
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e4 e0       	ldi	r30, 0x04	; 4
     abc:	f6 e0       	ldi	r31, 0x06	; 6
     abe:	29 e0       	ldi	r18, 0x09	; 9
     ac0:	36 e0       	ldi	r19, 0x06	; 6

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		menuSaveParameters[i] = menuParameters[i].default_value;
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	8c 91       	ld	r24, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	81 93       	st	Z+, r24
     aca:	12 96       	adiw	r26, 0x02	; 2
	}
}

static void set_default_parameters(void)
{
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     acc:	e2 17       	cp	r30, r18
     ace:	f3 07       	cpc	r31, r19
     ad0:	c1 f7       	brne	.-16     	; 0xac2 <button_7_menu+0xc>
	button_debug_msg();
}
static void button_7_menu(void *pv)
{	
	set_default_parameters();
}
     ad2:	08 95       	ret

00000ad4 <button_debug_msg>:
	pass_add_number(5);
}

static void button_debug_msg(void)
{
	debug_msg("conf: %d\n", configured_parameter);
     ad4:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <configured_parameter>
     ad8:	1f 92       	push	r1
     ada:	8f 93       	push	r24
     adc:	88 ea       	ldi	r24, 0xA8	; 168
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     ae8:	e4 e0       	ldi	r30, 0x04	; 4
     aea:	f6 e0       	ldi	r31, 0x06	; 6
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	1f 92       	push	r1
     af0:	8f 93       	push	r24
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	81 81       	ldd	r24, Z+1	; 0x01
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	80 81       	ld	r24, Z
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	82 eb       	ldi	r24, 0xB2	; 178
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	0e 96       	adiw	r24, 0x0e	; 14
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	08 95       	ret

00000b22 <button_6_menu>:
		menuSaveParameters[configured_parameter]--;
	button_debug_msg();
}
static void button_6_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] < menuParameters[configured_parameter].max_value)
     b22:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <configured_parameter>
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	ec 5f       	subi	r30, 0xFC	; 252
     b2c:	f9 4f       	sbci	r31, 0xF9	; 249
     b2e:	20 81       	ld	r18, Z
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	ec 58       	subi	r30, 0x8C	; 140
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	30 81       	ld	r19, Z
     b3c:	23 17       	cp	r18, r19
     b3e:	28 f4       	brcc	.+10     	; 0xb4a <button_6_menu+0x28>
		menuSaveParameters[configured_parameter]++;
     b40:	fc 01       	movw	r30, r24
     b42:	ec 5f       	subi	r30, 0xFC	; 252
     b44:	f9 4f       	sbci	r31, 0xF9	; 249
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 83       	st	Z, r18
	button_debug_msg();
     b4a:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b4e:	08 95       	ret

00000b50 <button_5_menu>:
	LED_SERVO_OFF;
}

static void button_5_menu(void *pv)
{
	if (menuSaveParameters[configured_parameter] > 0)
     b50:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <configured_parameter>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	fc 01       	movw	r30, r24
     b58:	ec 5f       	subi	r30, 0xFC	; 252
     b5a:	f9 4f       	sbci	r31, 0xF9	; 249
     b5c:	20 81       	ld	r18, Z
     b5e:	22 23       	and	r18, r18
     b60:	29 f0       	breq	.+10     	; 0xb6c <button_5_menu+0x1c>
		menuSaveParameters[configured_parameter]--;
     b62:	fc 01       	movw	r30, r24
     b64:	ec 5f       	subi	r30, 0xFC	; 252
     b66:	f9 4f       	sbci	r31, 0xF9	; 249
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	20 83       	st	Z, r18
	button_debug_msg();
     b6c:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b70:	08 95       	ret

00000b72 <button_2_menu>:
		configured_parameter--;
	button_debug_msg();
}
static void button_2_menu(void *pv)
{
	if (configured_parameter < sizeof(menuSaveParameters) - 1)
     b72:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <configured_parameter>
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	18 f4       	brcc	.+6      	; 0xb80 <button_2_menu+0xe>
		configured_parameter++;
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <configured_parameter>
	button_debug_msg();
     b80:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b84:	08 95       	ret

00000b86 <button_1_menu>:
	debug_msg("menu after check %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
}

static void button_1_menu(void *pv) 
{
	if (configured_parameter > 0)
     b86:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <configured_parameter>
     b8a:	88 23       	and	r24, r24
     b8c:	19 f0       	breq	.+6      	; 0xb94 <button_1_menu+0xe>
		configured_parameter--;
     b8e:	81 50       	subi	r24, 0x01	; 1
     b90:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <configured_parameter>
	button_debug_msg();
     b94:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b98:	08 95       	ret

00000b9a <button_3_menu>:

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	76 e0       	ldi	r23, 0x06	; 6
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	0e 94 98 11 	call	0x2330	; 0x2330 <mem_save_data>
	button_debug_msg();
}
static void button_3_menu(void *pv)
{
	save_parametrs();
	segment1.state = SEG_MENU_SAVE; 
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
	segment2.state = SEG_MENU_SAVE;
     baa:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
	LED_MOTOR_OFF;
     bae:	94 98       	cbi	0x12, 4	; 18
	LED_SERVO_OFF;
     bb0:	96 98       	cbi	0x12, 6	; 18
     bb2:	08 95       	ret

00000bb4 <pass_add_number>:
	pass_len = 0;
	memset(pass, 0, sizeof(pass));
}

static void pass_add_number(uint8_t number)
{
     bb4:	cf 93       	push	r28
	pass[pass_len++] = number;
     bb6:	e0 91 0a 06 	lds	r30, 0x060A	; 0x80060a <pass_len>
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	9e 0f       	add	r25, r30
     bbe:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <pass_len>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e2 50       	subi	r30, 0x02	; 2
     bc6:	fa 4f       	sbci	r31, 0xFA	; 250
     bc8:	80 83       	st	Z, r24
	debug_msg("pass %d\n", number);
     bca:	1f 92       	push	r1
     bcc:	8f 93       	push	r24
     bce:	81 ed       	ldi	r24, 0xD1	; 209
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	if (memcmp(pass, password, pass_len) != 0) {
     bda:	c0 91 0a 06 	lds	r28, 0x060A	; 0x80060a <pass_len>
     bde:	4c 2f       	mov	r20, r28
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	61 e1       	ldi	r22, 0x11	; 17
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	8e ef       	ldi	r24, 0xFE	; 254
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 e7 21 	call	0x43ce	; 0x43ce <memcmp>
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	89 2b       	or	r24, r25
     bf8:	91 f0       	breq	.+36     	; 0xc1e <pass_add_number+0x6a>
		debug_msg("clear_password\n");
     bfa:	8a ed       	ldi	r24, 0xDA	; 218
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     c06:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <pass_len>
	memset(pass, 0, sizeof(pass));
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	ee ef       	ldi	r30, 0xFE	; 254
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <pass_add_number+0x5e>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	35 c0       	rjmp	.+106    	; 0xc88 <pass_add_number+0xd4>
	if (memcmp(pass, password, pass_len) != 0) {
		debug_msg("clear_password\n");
		clear_password();
		return;
	}
	if (pass_len == sizeof(pass)) {
     c1e:	c6 30       	cpi	r28, 0x06	; 6
     c20:	99 f5       	brne	.+102    	; 0xc88 <pass_add_number+0xd4>
		debug_msg("enter_to_menu\n");
     c22:	8a ee       	ldi	r24, 0xEA	; 234
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	return 0;
}

static void enter_to_menu(void)
{
	dark_menu_state = MENU_PARAMETERS;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <dark_menu_state>
	button1.fall_callback = button_1_menu;
     c34:	83 ec       	ldi	r24, 0xC3	; 195
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <button1+0xc>
     c3c:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <button1+0xb>
	button2.fall_callback = button_2_menu;
     c40:	89 eb       	ldi	r24, 0xB9	; 185
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <button2+0xc>
     c48:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <button2+0xb>
	button3.fall_callback = button_3_menu;
     c4c:	8d ec       	ldi	r24, 0xCD	; 205
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <button3+0xc>
     c54:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <button3+0xb>
	button5.fall_callback = button_5_menu;
     c58:	88 ea       	ldi	r24, 0xA8	; 168
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <button5+0xc>
     c60:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <button5+0xb>
	button6.fall_callback = button_6_menu;
     c64:	81 e9       	ldi	r24, 0x91	; 145
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <button6+0xc>
     c6c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <button6+0xb>
	button7.fall_callback = button_7_menu;
     c70:	8b e5       	ldi	r24, 0x5B	; 91
     c72:	95 e0       	ldi	r25, 0x05	; 5
     c74:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <button7+0xc>
     c78:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <button7+0xb>
	disp_set_state(DISP_ALL, SEG_MENU);
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
	}
	if (pass_len == sizeof(pass)) {
		debug_msg("enter_to_menu\n");
		enter_to_menu();
	}
}
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <button_7_number>:
{
	pass_add_number(4);
}
static void button_7_number(void *pv)
{
	pass_add_number(5);
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c92:	08 95       	ret

00000c94 <button_6_number>:
{
	pass_add_number(3);
}
static void button_6_number(void *pv)
{
	pass_add_number(4);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c9a:	08 95       	ret

00000c9c <button_5_number>:
{
	pass_add_number(2);
}
static void button_5_number(void *pv)
{
	pass_add_number(3);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     ca2:	08 95       	ret

00000ca4 <button_3_number>:
{
	pass_add_number(1);
}
static void button_3_number(void *pv)
{
	pass_add_number(2);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     caa:	08 95       	ret

00000cac <button_2_number>:
	pass_add_number(0);
}

static void button_2_number(void *pv)
{
	pass_add_number(1);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cb2:	08 95       	ret

00000cb4 <button_1_number>:
	}
}

static void button_1_number(void *pv)
{
	pass_add_number(0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cba:	08 95       	ret

00000cbc <dark_menu_parameters_len>:
uint8_t menuSaveParameters[sizeof(menuParameters)/sizeof(menuPStruct_t)];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	08 95       	ret

00000cc0 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state == 1)
     cc0:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
     cc4:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
     cc8:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
     ccc:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
     cd0:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <menu_timer.2189>
     cd4:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <menu_timer.2189+0x1>
     cd8:	a0 91 be 03 	lds	r26, 0x03BE	; 0x8003be <menu_timer.2189+0x2>
     cdc:	b0 91 bf 03 	lds	r27, 0x03BF	; 0x8003bf <menu_timer.2189+0x3>
     ce0:	84 17       	cp	r24, r20
     ce2:	95 07       	cpc	r25, r21
     ce4:	a6 07       	cpc	r26, r22
     ce6:	b7 07       	cpc	r27, r23
     ce8:	08 f0       	brcs	.+2      	; 0xcec <menu_process+0x2c>
     cea:	6b c0       	rjmp	.+214    	; 0xdc2 <menu_process+0x102>
     cec:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <dark_menu_state>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <menu_process+0x36>
     cf4:	66 c0       	rjmp	.+204    	; 0xdc2 <menu_process+0x102>
	{
		menu_timer = mktime.ms + 50;
     cf6:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
     cfa:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
     cfe:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
     d02:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
     d06:	c2 96       	adiw	r24, 0x32	; 50
     d08:	a1 1d       	adc	r26, r1
     d0a:	b1 1d       	adc	r27, r1
     d0c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <menu_timer.2189>
     d10:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <menu_timer.2189+0x1>
     d14:	a0 93 be 03 	sts	0x03BE, r26	; 0x8003be <menu_timer.2189+0x2>
     d18:	b0 93 bf 03 	sts	0x03BF, r27	; 0x8003bf <menu_timer.2189+0x3>
		if (segment1.state == SEG_MENU)
     d1c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
     d20:	87 30       	cpi	r24, 0x07	; 7
     d22:	31 f4       	brne	.+12     	; 0xd30 <menu_process+0x70>
			disp_set_number(&segment1, configured_parameter);
     d24:	60 91 09 06 	lds	r22, 0x0609	; 0x800609 <configured_parameter>
     d28:	8b e1       	ldi	r24, 0x1B	; 27
     d2a:	96 e0       	ldi	r25, 0x06	; 6
     d2c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
		if (segment2.state == SEG_MENU)
     d30:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
     d34:	87 30       	cpi	r24, 0x07	; 7
     d36:	51 f4       	brne	.+20     	; 0xd4c <menu_process+0x8c>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     d38:	e0 91 09 06 	lds	r30, 0x0609	; 0x800609 <configured_parameter>
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ec 5f       	subi	r30, 0xFC	; 252
     d40:	f9 4f       	sbci	r31, 0xF9	; 249
     d42:	60 81       	ld	r22, Z
     d44:	86 e1       	ldi	r24, 0x16	; 22
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     d4c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
     d50:	88 30       	cpi	r24, 0x08	; 8
     d52:	49 f5       	brne	.+82     	; 0xda6 <menu_process+0xe6>
     d54:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	29 f5       	brne	.+74     	; 0xda6 <menu_process+0xe6>
		{
			menu_timer = 1000 + mktime.ms;
     d5c:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
     d60:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
     d64:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
     d68:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
     d6c:	88 51       	subi	r24, 0x18	; 24
     d6e:	9c 4f       	sbci	r25, 0xFC	; 252
     d70:	af 4f       	sbci	r26, 0xFF	; 255
     d72:	bf 4f       	sbci	r27, 0xFF	; 255
     d74:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <menu_timer.2189>
     d78:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <menu_timer.2189+0x1>
     d7c:	a0 93 be 03 	sts	0x03BE, r26	; 0x8003be <menu_timer.2189+0x2>
     d80:	b0 93 bf 03 	sts	0x03BF, r27	; 0x8003bf <menu_timer.2189+0x3>
			DispD2.value = 's';
     d84:	83 e7       	ldi	r24, 0x73	; 115
     d86:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <DispD2>
			DispD1.value = 'a';
     d8a:	81 e6       	ldi	r24, 0x61	; 97
     d8c:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <DispD1>
			DispD3.value = 'p';
     d90:	80 e7       	ldi	r24, 0x70	; 112
     d92:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <DispD3>
			DispD4.value = 0;
     d96:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <DispD4>
			segment1.state = SEG_MENU_OFF;
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     da0:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
			
			return;
     da4:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     da6:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
     daa:	8a 30       	cpi	r24, 0x0A	; 10
     dac:	51 f4       	brne	.+20     	; 0xdc2 <menu_process+0x102>
     dae:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
     db2:	8a 30       	cpi	r24, 0x0A	; 10
     db4:	31 f4       	brne	.+12     	; 0xdc2 <menu_process+0x102>
		{
			segment1.state = SEG_OFF;
     db6:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <segment1+0x4>
			segment2.state = SEG_OFF;
     dba:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <segment2+0x4>
			dark_menu_state = 0;
     dbe:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <dark_menu_state>
     dc2:	08 95       	ret

00000dc4 <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dc4:	8a e5       	ldi	r24, 0x5A	; 90
     dc6:	96 e0       	ldi	r25, 0x06	; 6
     dc8:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <button1+0xc>
     dcc:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <button1+0xb>
	button2.fall_callback = button_2_number;
     dd0:	86 e5       	ldi	r24, 0x56	; 86
     dd2:	96 e0       	ldi	r25, 0x06	; 6
     dd4:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <button2+0xc>
     dd8:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <button2+0xb>
	button3.fall_callback = button_3_number;
     ddc:	82 e5       	ldi	r24, 0x52	; 82
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <button3+0xc>
     de4:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <button3+0xb>
	button5.fall_callback = button_5_number;
     de8:	8e e4       	ldi	r24, 0x4E	; 78
     dea:	96 e0       	ldi	r25, 0x06	; 6
     dec:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <button5+0xc>
     df0:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <button5+0xb>
	button6.fall_callback = button_6_number;
     df4:	8a e4       	ldi	r24, 0x4A	; 74
     df6:	96 e0       	ldi	r25, 0x06	; 6
     df8:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <button6+0xc>
     dfc:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <button6+0xb>
	button7.fall_callback = button_7_number;
     e00:	86 e4       	ldi	r24, 0x46	; 70
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <button7+0xc>
     e08:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e0c:	64 e0       	ldi	r22, 0x04	; 4
     e0e:	76 e0       	ldi	r23, 0x06	; 6
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <mem_read_data>
	debug_msg("menu_read %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     e16:	e4 e0       	ldi	r30, 0x04	; 4
     e18:	f6 e0       	ldi	r31, 0x06	; 6
     e1a:	83 81       	ldd	r24, Z+3	; 0x03
     e1c:	1f 92       	push	r1
     e1e:	8f 93       	push	r24
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	1f 92       	push	r1
     e2a:	8f 93       	push	r24
     e2c:	80 81       	ld	r24, Z
     e2e:	1f 92       	push	r1
     e30:	8f 93       	push	r24
     e32:	89 ef       	ldi	r24, 0xF9	; 249
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9f 93       	push	r25
     e38:	8f 93       	push	r24
     e3a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e3e:	a4 e0       	ldi	r26, 0x04	; 4
     e40:	b6 e0       	ldi	r27, 0x06	; 6
     e42:	e4 e7       	ldi	r30, 0x74	; 116
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	4e e7       	ldi	r20, 0x7E	; 126
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	8d b7       	in	r24, 0x3d	; 61
     e4c:	9e b7       	in	r25, 0x3e	; 62
     e4e:	0a 96       	adiw	r24, 0x0a	; 10
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	9e bf       	out	0x3e, r25	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	8d bf       	out	0x3d, r24	; 61
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e5a:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e5c:	9c 91       	ld	r25, X
     e5e:	80 81       	ld	r24, Z
     e60:	89 17       	cp	r24, r25
     e62:	18 f4       	brcc	.+6      	; 0xe6a <init_menu+0xa6>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e64:	81 81       	ldd	r24, Z+1	; 0x01
     e66:	8c 93       	st	X, r24
			check_error++;
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e6e:	e4 17       	cp	r30, r20
     e70:	f5 07       	cpc	r31, r21
     e72:	a1 f7       	brne	.-24     	; 0xe5c <init_menu+0x98>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e74:	22 23       	and	r18, r18
     e76:	29 f0       	breq	.+10     	; 0xe82 <init_menu+0xbe>

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e78:	64 e0       	ldi	r22, 0x04	; 4
     e7a:	76 e0       	ldi	r23, 0x06	; 6
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	0e 94 98 11 	call	0x2330	; 0x2330 <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e82:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <pass_len>
	memset(pass, 0, sizeof(pass));
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	ee ef       	ldi	r30, 0xFE	; 254
     e8a:	f5 e0       	ldi	r31, 0x05	; 5
     e8c:	df 01       	movw	r26, r30
     e8e:	1d 92       	st	X+, r1
     e90:	8a 95       	dec	r24
     e92:	e9 f7       	brne	.-6      	; 0xe8e <init_menu+0xca>
     e94:	08 95       	ret

00000e96 <dark_menu_get_value>:
	clear_password();
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	30 f4       	brcc	.+12     	; 0xea6 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e9a:	e8 2f       	mov	r30, r24
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	ec 5f       	subi	r30, 0xFC	; 252
     ea0:	f9 4f       	sbci	r31, 0xF9	; 249
     ea2:	80 81       	ld	r24, Z
     ea4:	08 95       	ret
	}
	return 0;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
}
     ea8:	08 95       	ret

00000eaa <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     eaa:	87 e1       	ldi	r24, 0x17	; 23
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
     eb2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     eb6:	80 e1       	ldi	r24, 0x10	; 16
     eb8:	96 e0       	ldi	r25, 0x06	; 6
     eba:	0e 94 16 18 	call	0x302c	; 0x302c <evTime_init>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <motorD>
     ec4:	94 98       	cbi	0x12, 4	; 18
     ec6:	15 bc       	out	0x25, r1	; 37
     ec8:	8f 9a       	sbi	0x11, 7	; 17
     eca:	97 9a       	sbi	0x12, 7	; 18
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	08 95       	ret

00000ed2 <dcmotorpwm_deinit>:
     ed2:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <motorD>
     ed6:	15 bc       	out	0x25, r1	; 37
     ed8:	97 9a       	sbi	0x12, 7	; 18
     eda:	94 98       	cbi	0x12, 4	; 18
     edc:	08 95       	ret

00000ede <dcmotor_is_on>:
     ede:	90 91 0c 06 	lds	r25, 0x060C	; 0x80060c <motorD>
     ee2:	92 50       	subi	r25, 0x02	; 2
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	93 30       	cpi	r25, 0x03	; 3
     eea:	10 f0       	brcs	.+4      	; 0xef0 <dcmotor_is_on+0x12>
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	08 95       	ret

00000ef4 <dcmotorpwm_stop>:
     ef4:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	99 f0       	breq	.+38     	; 0xf22 <dcmotorpwm_stop+0x2e>
     efc:	85 e2       	ldi	r24, 0x25	; 37
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f08:	15 bc       	out	0x25, r1	; 37
     f0a:	97 9a       	sbi	0x12, 7	; 18
     f0c:	94 98       	cbi	0x12, 4	; 18
     f0e:	ec e0       	ldi	r30, 0x0C	; 12
     f10:	f6 e0       	ldi	r31, 0x06	; 6
     f12:	80 81       	ld	r24, Z
     f14:	81 83       	std	Z+1, r24	; 0x01
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 83       	st	Z, r24
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	08 95       	ret

00000f24 <dcmotorpwm_start>:
     f24:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <motorD>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	d9 f4       	brne	.+54     	; 0xf62 <dcmotorpwm_start+0x3e>
     f2c:	94 9a       	sbi	0x12, 4	; 18
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	80 63       	ori	r24, 0x30	; 48
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 64       	ori	r24, 0x40	; 64
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	ec e0       	ldi	r30, 0x0C	; 12
     f42:	f6 e0       	ldi	r31, 0x06	; 6
     f44:	80 81       	ld	r24, Z
     f46:	81 83       	std	Z+1, r24	; 0x01
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	80 83       	st	Z, r24
     f4c:	48 ee       	ldi	r20, 0xE8	; 232
     f4e:	53 e0       	ldi	r21, 0x03	; 3
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	08 95       	ret
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	08 95       	ret

00000f68 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f68:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <motorD+0x3>
}
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f70:	83 e3       	ldi	r24, 0x33	; 51
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f7c:	0e 94 7a 07 	call	0xef4	; 0xef4 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f80:	85 e0       	ldi	r24, 0x05	; 5
     f82:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <motorD>
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	08 95       	ret

00000f8c <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f8c:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	29 f0       	breq	.+10     	; 0xf9e <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <motorD>
		return 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f9e:	08 95       	ret

00000fa0 <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     fa0:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <motorD>
		return 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fb2:	08 95       	ret

00000fb4 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     fb4:	cf 93       	push	r28
     fb6:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     fb8:	46 e9       	ldi	r20, 0x96	; 150
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 ec       	ldi	r24, 0xC0	; 192
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <evTime_process_period>
     fc8:	89 2b       	or	r24, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <dcmotor_process+0x1a>
     fcc:	58 c0       	rjmp	.+176    	; 0x107e <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     fce:	90 91 0c 06 	lds	r25, 0x060C	; 0x80060c <motorD>
     fd2:	93 30       	cpi	r25, 0x03	; 3
     fd4:	e9 f0       	breq	.+58     	; 0x1010 <dcmotor_process+0x5c>
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <dcmotor_process+0x2e>
     fd8:	91 30       	cpi	r25, 0x01	; 1
     fda:	b9 f0       	breq	.+46     	; 0x100a <dcmotor_process+0x56>
     fdc:	92 30       	cpi	r25, 0x02	; 2
     fde:	41 f0       	breq	.+16     	; 0xff0 <dcmotor_process+0x3c>
     fe0:	4e c0       	rjmp	.+156    	; 0x107e <dcmotor_process+0xca>
     fe2:	94 30       	cpi	r25, 0x04	; 4
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <dcmotor_process+0x34>
     fe6:	48 c0       	rjmp	.+144    	; 0x1078 <dcmotor_process+0xc4>
     fe8:	95 30       	cpi	r25, 0x05	; 5
     fea:	09 f4       	brne	.+2      	; 0xfee <dcmotor_process+0x3a>
     fec:	42 c0       	rjmp	.+132    	; 0x1072 <dcmotor_process+0xbe>
     fee:	47 c0       	rjmp	.+142    	; 0x107e <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     ff0:	c0 93 0f 06 	sts	0x060F, r28	; 0x80060f <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     ff4:	2b ee       	ldi	r18, 0xEB	; 235
     ff6:	c2 9f       	mul	r28, r18
     ff8:	c0 01       	movw	r24, r0
     ffa:	11 24       	eor	r1, r1
     ffc:	63 e6       	ldi	r22, 0x63	; 99
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__divmodhi4>
    1004:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
    1006:	63 bd       	out	0x23, r22	; 35
			break;
    1008:	3a c0       	rjmp	.+116    	; 0x107e <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    100a:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <motorD+0x3>
			break;
    100e:	37 c0       	rjmp	.+110    	; 0x107e <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
    1010:	c3 33       	cpi	r28, 0x33	; 51
    1012:	78 f4       	brcc	.+30     	; 0x1032 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
    1014:	84 e1       	ldi	r24, 0x14	; 20
    1016:	8c 0f       	add	r24, r28
    1018:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    101c:	2b ee       	ldi	r18, 0xEB	; 235
    101e:	82 9f       	mul	r24, r18
    1020:	c0 01       	movw	r24, r0
    1022:	11 24       	eor	r1, r1
    1024:	63 e6       	ldi	r22, 0x63	; 99
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__divmodhi4>
    102c:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
    102e:	63 bd       	out	0x23, r22	; 35
    1030:	26 c0       	rjmp	.+76     	; 0x107e <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    1032:	8d ec       	ldi	r24, 0xCD	; 205
    1034:	8c 0f       	add	r24, r28
    1036:	84 31       	cpi	r24, 0x14	; 20
    1038:	78 f4       	brcc	.+30     	; 0x1058 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    103a:	8f e0       	ldi	r24, 0x0F	; 15
    103c:	8c 0f       	add	r24, r28
    103e:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1042:	2b ee       	ldi	r18, 0xEB	; 235
    1044:	82 9f       	mul	r24, r18
    1046:	c0 01       	movw	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	63 e6       	ldi	r22, 0x63	; 99
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__divmodhi4>
    1052:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    1054:	63 bd       	out	0x23, r22	; 35
    1056:	13 c0       	rjmp	.+38     	; 0x107e <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    1058:	c0 93 0f 06 	sts	0x060F, r28	; 0x80060f <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    105c:	2b ee       	ldi	r18, 0xEB	; 235
    105e:	c2 9f       	mul	r28, r18
    1060:	c0 01       	movw	r24, r0
    1062:	11 24       	eor	r1, r1
    1064:	63 e6       	ldi	r22, 0x63	; 99
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__divmodhi4>
    106c:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    106e:	63 bd       	out	0x23, r22	; 35
    1070:	06 c0       	rjmp	.+12     	; 0x107e <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    1072:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1074:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1076:	03 c0       	rjmp	.+6      	; 0x107e <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    1082:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1084:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1086:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1088:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    108a:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    108c:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    108e:	af 9a       	sbi	0x15, 7	; 21
    1090:	08 95       	ret

00001092 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    1092:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1094:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1098:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    109a:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    109e:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    10a0:	10 92 21 06 	sts	0x0621, r1	; 0x800621 <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    10a4:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    10a6:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <DispD4+0x1>
    10aa:	08 95       	ret

000010ac <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    10ac:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    10ae:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    10b0:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    10b2:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    10b4:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10b6:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10b8:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10ba:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10bc:	e4 e2       	ldi	r30, 0x24	; 36
    10be:	f6 e0       	ldi	r31, 0x06	; 6
    10c0:	82 e2       	ldi	r24, 0x22	; 34
    10c2:	96 e0       	ldi	r25, 0x06	; 6
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10c8:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10ca:	2e e2       	ldi	r18, 0x2E	; 46
    10cc:	36 e0       	ldi	r19, 0x06	; 6
    10ce:	33 83       	std	Z+3, r19	; 0x03
    10d0:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10d2:	ab e1       	ldi	r26, 0x1B	; 27
    10d4:	b6 e0       	ldi	r27, 0x06	; 6
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	3c 93       	st	X, r19
    10da:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
    10e2:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10e4:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10e6:	20 e2       	ldi	r18, 0x20	; 32
    10e8:	36 e0       	ldi	r19, 0x06	; 6
    10ea:	35 83       	std	Z+5, r19	; 0x05
    10ec:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10ee:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10f0:	8c e2       	ldi	r24, 0x2C	; 44
    10f2:	96 e0       	ldi	r25, 0x06	; 6
    10f4:	97 83       	std	Z+7, r25	; 0x07
    10f6:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10f8:	e6 e1       	ldi	r30, 0x16	; 22
    10fa:	f6 e0       	ldi	r31, 0x06	; 6
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1104:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
	clear_display();
    1108:	0e 94 41 08 	call	0x1082	; 0x1082 <clear_display>
    110c:	08 95       	ret

0000110e <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
	if (DispD->value != displaying_value)
    1112:	fc 01       	movw	r30, r24
    1114:	30 81       	ld	r19, Z
    1116:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <displaying_value>
    111a:	32 17       	cp	r19, r18
    111c:	09 f4       	brne	.+2      	; 0x1120 <display_set_value+0x12>
    111e:	95 c0       	rjmp	.+298    	; 0x124a <display_set_value+0x13c>
    1120:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1122:	0e 94 41 08 	call	0x1082	; 0x1082 <clear_display>
		switch(DispD->value)
    1126:	e8 81       	ld	r30, Y
    1128:	8e 2f       	mov	r24, r30
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	8f 3f       	cpi	r24, 0xFF	; 255
    112e:	91 05       	cpc	r25, r1
    1130:	08 f0       	brcs	.+2      	; 0x1134 <display_set_value+0x26>
    1132:	88 c0       	rjmp	.+272    	; 0x1244 <display_set_value+0x136>
    1134:	fc 01       	movw	r30, r24
    1136:	e6 5d       	subi	r30, 0xD6	; 214
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    113e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1140:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1142:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1144:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1146:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1148:	aa 98       	cbi	0x15, 2	; 21
			break;
    114a:	7c c0       	rjmp	.+248    	; 0x1244 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    114c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    114e:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1150:	79 c0       	rjmp	.+242    	; 0x1244 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1152:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1154:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1156:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1158:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    115a:	df 98       	cbi	0x1b, 7	; 27
			break;
    115c:	73 c0       	rjmp	.+230    	; 0x1244 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    115e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1160:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1162:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1164:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1166:	df 98       	cbi	0x1b, 7	; 27
			break;
    1168:	6d c0       	rjmp	.+218    	; 0x1244 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    116a:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    116c:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    116e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1170:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1172:	68 c0       	rjmp	.+208    	; 0x1244 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1174:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1176:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1178:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    117a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    117c:	df 98       	cbi	0x1b, 7	; 27
			break;
    117e:	62 c0       	rjmp	.+196    	; 0x1244 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1180:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1182:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1184:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1186:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1188:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    118a:	de 98       	cbi	0x1b, 6	; 27
			break;
    118c:	5b c0       	rjmp	.+182    	; 0x1244 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    118e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1190:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1192:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1194:	57 c0       	rjmp	.+174    	; 0x1244 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1196:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1198:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    119a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    119c:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    119e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11a0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11a2:	af 98       	cbi	0x15, 7	; 21
			break;
    11a4:	4f c0       	rjmp	.+158    	; 0x1244 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    11a6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11a8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11aa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11ac:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11ae:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11b0:	af 98       	cbi	0x15, 7	; 21
			break;
    11b2:	48 c0       	rjmp	.+144    	; 0x1244 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    11b4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11b6:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11b8:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11ba:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11bc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11be:	af 98       	cbi	0x15, 7	; 21
			break;
    11c0:	41 c0       	rjmp	.+130    	; 0x1244 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11c2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11c4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11c6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ca:	af 98       	cbi	0x15, 7	; 21
			break;
    11cc:	3b c0       	rjmp	.+118    	; 0x1244 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11ce:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11d0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11d2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11d4:	aa 98       	cbi	0x15, 2	; 21
			break;
    11d6:	36 c0       	rjmp	.+108    	; 0x1244 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11d8:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11da:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11dc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11de:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11e0:	af 98       	cbi	0x15, 7	; 21
			break;
    11e2:	30 c0       	rjmp	.+96     	; 0x1244 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11e4:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11e6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11e8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11ea:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ec:	af 98       	cbi	0x15, 7	; 21
			break;
    11ee:	2a c0       	rjmp	.+84     	; 0x1244 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11f0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11f2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11f6:	af 98       	cbi	0x15, 7	; 21
			break;
    11f8:	25 c0       	rjmp	.+74     	; 0x1244 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    11fa:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11fc:	af 98       	cbi	0x15, 7	; 21
			break;
    11fe:	22 c0       	rjmp	.+68     	; 0x1244 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    1200:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1202:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1204:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1206:	af 98       	cbi	0x15, 7	; 21
			break;
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    120a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    120c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    120e:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1210:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1212:	af 98       	cbi	0x15, 7	; 21
			break;
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    1216:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    1218:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    121a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    121c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    121e:	af 98       	cbi	0x15, 7	; 21
			break;
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1222:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1224:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1226:	aa 98       	cbi	0x15, 2	; 21
			break;
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    122a:	af 98       	cbi	0x15, 7	; 21
			break;
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    122e:	aa 98       	cbi	0x15, 2	; 21
			break;
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1232:	de 98       	cbi	0x1b, 6	; 27
			break;
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1236:	df 98       	cbi	0x1b, 7	; 27
			break;
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    123a:	dd 98       	cbi	0x1b, 5	; 27
			break;
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    123e:	ad 98       	cbi	0x15, 5	; 21
			break;
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1242:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1244:	88 81       	ld	r24, Y
    1246:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displaying_value>
	}
	
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <on_display>:
void on_display(disp_drv *DispD)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
	off_all_displays();
    1256:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
	display_set_value(DispD);
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 87 08 	call	0x110e	; 0x110e <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1260:	86 e0       	ldi	r24, 0x06	; 6
    1262:	c2 32       	cpi	r28, 0x22	; 34
    1264:	d8 07       	cpc	r29, r24
    1266:	29 f4       	brne	.+10     	; 0x1272 <on_display+0x22>
	{
		LED_ON_DISP1;
    1268:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <DispD1+0x1>
    1270:	19 c0       	rjmp	.+50     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1272:	86 e0       	ldi	r24, 0x06	; 6
    1274:	ce 32       	cpi	r28, 0x2E	; 46
    1276:	d8 07       	cpc	r29, r24
    1278:	29 f4       	brne	.+10     	; 0x1284 <on_display+0x34>
	{
		LED_ON_DISP2;
    127a:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <DispD2+0x1>
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1284:	86 e0       	ldi	r24, 0x06	; 6
    1286:	c0 32       	cpi	r28, 0x20	; 32
    1288:	d8 07       	cpc	r29, r24
    128a:	29 f4       	brne	.+10     	; 0x1296 <on_display+0x46>
	{
		LED_ON_DISP3;
    128c:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <DispD3+0x1>
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1296:	cc 52       	subi	r28, 0x2C	; 44
    1298:	d6 40       	sbci	r29, 0x06	; 6
    129a:	21 f4       	brne	.+8      	; 0x12a4 <on_display+0x54>
	{
		LED_ON_DISP4;
    129c:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <DispD4+0x1>
	}
	#endif
}
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12b6:	c0 81       	ld	r28, Z
    12b8:	d1 81       	ldd	r29, Z+1	; 0x01
    12ba:	21 96       	adiw	r28, 0x01	; 1
    12bc:	d1 83       	std	Z+1, r29	; 0x01
    12be:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12c0:	9e 01       	movw	r18, r28
    12c2:	ad ec       	ldi	r26, 0xCD	; 205
    12c4:	bc ec       	ldi	r27, 0xCC	; 204
    12c6:	0e 94 aa 20 	call	0x4154	; 0x4154 <__umulhisi3>
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	9c 01       	movw	r18, r24
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	c8 17       	cp	r28, r24
    12ee:	d9 07       	cpc	r29, r25
    12f0:	01 f5       	brne	.+64     	; 0x1332 <display_process+0x88>
    12f2:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12f4:	10 91 c5 03 	lds	r17, 0x03C5	; 0x8003c5 <iteration>
    12f8:	14 30       	cpi	r17, 0x04	; 4
    12fa:	58 f4       	brcc	.+22     	; 0x1312 <display_process+0x68>
			on_display(disp_tab[iteration]);
    12fc:	e1 2f       	mov	r30, r17
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	ec 5d       	subi	r30, 0xDC	; 220
    1306:	f9 4f       	sbci	r31, 0xF9	; 249
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	0e 94 28 09 	call	0x1250	; 0x1250 <on_display>
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <display_process+0x6c>
		else
			off_all_displays();
    1312:	0e 94 49 08 	call	0x1092	; 0x1092 <off_all_displays>
		iteration++;
    1316:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1318:	15 30       	cpi	r17, 0x05	; 5
    131a:	19 f0       	breq	.+6      	; 0x1322 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    131c:	10 93 c5 03 	sts	0x03C5, r17	; 0x8003c5 <iteration>
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1322:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1326:	c0 39       	cpi	r28, 0x90	; 144
    1328:	d1 40       	sbci	r29, 0x01	; 1
    132a:	19 f4       	brne	.+6      	; 0x1332 <display_process+0x88>
    132c:	f7 01       	movw	r30, r14
    132e:	11 82       	std	Z+1, r1	; 0x01
    1330:	10 82       	st	Z, r1
	}
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	08 95       	ret

0000133e <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    133e:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1340:	64 36       	cpi	r22, 0x64	; 100
    1342:	f8 f4       	brcc	.+62     	; 0x1382 <disp_set_number+0x44>
	else if (number == 0)
    1344:	61 11       	cpse	r22, r1
    1346:	08 c0       	rjmp	.+16     	; 0x1358 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    1348:	a0 81       	ld	r26, Z
    134a:	b1 81       	ldd	r27, Z+1	; 0x01
    134c:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    134e:	02 80       	ldd	r0, Z+2	; 0x02
    1350:	f3 81       	ldd	r31, Z+3	; 0x03
    1352:	e0 2d       	mov	r30, r0
    1354:	10 82       	st	Z, r1
    1356:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1358:	a0 81       	ld	r26, Z
    135a:	b1 81       	ldd	r27, Z+1	; 0x01
    135c:	9d ec       	ldi	r25, 0xCD	; 205
    135e:	69 9f       	mul	r22, r25
    1360:	91 2d       	mov	r25, r1
    1362:	11 24       	eor	r1, r1
    1364:	96 95       	lsr	r25
    1366:	96 95       	lsr	r25
    1368:	96 95       	lsr	r25
    136a:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    136c:	02 80       	ldd	r0, Z+2	; 0x02
    136e:	f3 81       	ldd	r31, Z+3	; 0x03
    1370:	e0 2d       	mov	r30, r0
    1372:	89 2f       	mov	r24, r25
    1374:	88 0f       	add	r24, r24
    1376:	98 2f       	mov	r25, r24
    1378:	99 0f       	add	r25, r25
    137a:	99 0f       	add	r25, r25
    137c:	89 0f       	add	r24, r25
    137e:	68 1b       	sub	r22, r24
    1380:	60 83       	st	Z, r22
    1382:	08 95       	ret

00001384 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1384:	fc 01       	movw	r30, r24
    1386:	60 83       	st	Z, r22
    1388:	08 95       	ret

0000138a <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	39 f0       	breq	.+14     	; 0x139c <dip_set_value+0x12>
    138e:	18 f0       	brcs	.+6      	; 0x1396 <dip_set_value+0xc>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	39 f0       	breq	.+14     	; 0x13a2 <dip_set_value+0x18>
    1394:	08 95       	ret
    1396:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <motor_disp_value>
    139a:	08 95       	ret
    139c:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <servo_disp_value>
    13a0:	08 95       	ret
    13a2:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <servo_disp_value>
    13a6:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <motor_disp_value>
    13aa:	08 95       	ret

000013ac <disp_get_state>:
    13ac:	88 23       	and	r24, r24
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <disp_get_state+0xa>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	29 f0       	breq	.+10     	; 0x13be <disp_get_state+0x12>
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <disp_get_state+0x1a>
    13b6:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	08 95       	ret
    13be:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 95       	ret
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	08 95       	ret

000013cc <disp_disable_voltage>:
    13cc:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    13d0:	86 30       	cpi	r24, 0x06	; 6
    13d2:	21 f4       	brne	.+8      	; 0x13dc <disp_disable_voltage+0x10>
    13d4:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <disp1_last_state>
    13d8:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
    13dc:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    13e0:	86 30       	cpi	r24, 0x06	; 6
    13e2:	21 f4       	brne	.+8      	; 0x13ec <disp_disable_voltage+0x20>
    13e4:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <disp2_last_state>
    13e8:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
    13ec:	08 95       	ret

000013ee <disp_set_state>:
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	a1 f0       	breq	.+40     	; 0x141a <disp_set_state+0x2c>
    13f2:	18 f0       	brcs	.+6      	; 0x13fa <disp_set_state+0xc>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	09 f1       	breq	.+66     	; 0x143a <disp_set_state+0x4c>
    13f8:	08 95       	ret
    13fa:	66 30       	cpi	r22, 0x06	; 6
    13fc:	21 f4       	brne	.+8      	; 0x1406 <disp_set_state+0x18>
    13fe:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    1402:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <disp1_last_state>
    1406:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    140a:	86 30       	cpi	r24, 0x06	; 6
    140c:	19 f4       	brne	.+6      	; 0x1414 <disp_set_state+0x26>
    140e:	60 93 30 06 	sts	0x0630, r22	; 0x800630 <disp1_last_state>
    1412:	08 95       	ret
    1414:	60 93 1f 06 	sts	0x061F, r22	; 0x80061f <segment1+0x4>
    1418:	08 95       	ret
    141a:	66 30       	cpi	r22, 0x06	; 6
    141c:	21 f4       	brne	.+8      	; 0x1426 <disp_set_state+0x38>
    141e:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    1422:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <disp2_last_state>
    1426:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    142a:	86 30       	cpi	r24, 0x06	; 6
    142c:	19 f4       	brne	.+6      	; 0x1434 <disp_set_state+0x46>
    142e:	60 93 31 06 	sts	0x0631, r22	; 0x800631 <disp2_last_state>
    1432:	08 95       	ret
    1434:	60 93 1a 06 	sts	0x061A, r22	; 0x80061a <segment2+0x4>
    1438:	08 95       	ret
    143a:	66 30       	cpi	r22, 0x06	; 6
    143c:	41 f4       	brne	.+16     	; 0x144e <disp_set_state+0x60>
    143e:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    1442:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <disp1_last_state>
    1446:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    144a:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <disp2_last_state>
    144e:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    1452:	86 30       	cpi	r24, 0x06	; 6
    1454:	29 f4       	brne	.+10     	; 0x1460 <disp_set_state+0x72>
    1456:	60 93 31 06 	sts	0x0631, r22	; 0x800631 <disp2_last_state>
    145a:	60 93 30 06 	sts	0x0630, r22	; 0x800630 <disp1_last_state>
    145e:	08 95       	ret
    1460:	60 93 1f 06 	sts	0x061F, r22	; 0x80061f <segment1+0x4>
    1464:	60 93 1a 06 	sts	0x061A, r22	; 0x80061a <segment2+0x4>
    1468:	08 95       	ret

0000146a <display_set_error>:
    146a:	95 e0       	ldi	r25, 0x05	; 5
    146c:	90 93 1f 06 	sts	0x061F, r25	; 0x80061f <segment1+0x4>
    1470:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <segment2+0x4>
    1474:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <error_reason>
    1478:	08 95       	ret

0000147a <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    147a:	68 ef       	ldi	r22, 0xF8	; 248
    147c:	82 e2       	ldi	r24, 0x22	; 34
    147e:	96 e0       	ldi	r25, 0x06	; 6
    1480:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1484:	68 ef       	ldi	r22, 0xF8	; 248
    1486:	8e e2       	ldi	r24, 0x2E	; 46
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    148e:	68 ef       	ldi	r22, 0xF8	; 248
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	96 e0       	ldi	r25, 0x06	; 6
    1494:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1498:	68 ef       	ldi	r22, 0xF8	; 248
    149a:	8c e2       	ldi	r24, 0x2C	; 44
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
    14a2:	08 95       	ret

000014a4 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    14a4:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
    14a8:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
    14ac:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
    14b0:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
    14b4:	40 91 ca 03 	lds	r20, 0x03CA	; 0x8003ca <timer_disp_process.1979>
    14b8:	50 91 cb 03 	lds	r21, 0x03CB	; 0x8003cb <timer_disp_process.1979+0x1>
    14bc:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <timer_disp_process.1979+0x2>
    14c0:	70 91 cd 03 	lds	r23, 0x03CD	; 0x8003cd <timer_disp_process.1979+0x3>
    14c4:	48 17       	cp	r20, r24
    14c6:	59 07       	cpc	r21, r25
    14c8:	6a 07       	cpc	r22, r26
    14ca:	7b 07       	cpc	r23, r27
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <disp_process+0x2c>
    14ce:	26 c1       	rjmp	.+588    	; 0x171c <disp_process+0x278>
	{
        
        switch(segment1.state)
    14d0:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	09 f4       	brne	.+2      	; 0x14da <disp_process+0x36>
    14d8:	59 c0       	rjmp	.+178    	; 0x158c <disp_process+0xe8>
    14da:	30 f4       	brcc	.+12     	; 0x14e8 <disp_process+0x44>
    14dc:	88 23       	and	r24, r24
    14de:	09 f4       	brne	.+2      	; 0x14e2 <disp_process+0x3e>
    14e0:	87 c0       	rjmp	.+270    	; 0x15f0 <disp_process+0x14c>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	39 f1       	breq	.+78     	; 0x1534 <disp_process+0x90>
    14e6:	8e c0       	rjmp	.+284    	; 0x1604 <disp_process+0x160>
    14e8:	85 30       	cpi	r24, 0x05	; 5
    14ea:	09 f4       	brne	.+2      	; 0x14ee <disp_process+0x4a>
    14ec:	74 c0       	rjmp	.+232    	; 0x15d6 <disp_process+0x132>
    14ee:	48 f1       	brcs	.+82     	; 0x1542 <disp_process+0x9e>
    14f0:	86 30       	cpi	r24, 0x06	; 6
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <disp_process+0x52>
    14f4:	87 c0       	rjmp	.+270    	; 0x1604 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	48 ec       	ldi	r20, 0xC8	; 200
    1500:	52 e4       	ldi	r21, 0x42	; 66
    1502:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    1506:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fixsfsi>
    150a:	70 93 da 03 	sts	0x03DA, r23	; 0x8003da <voltage+0x1>
    150e:	60 93 d9 03 	sts	0x03D9, r22	; 0x8003d9 <voltage>
            disp_set_number(&segment1, voltage/100);
    1512:	9b 01       	movw	r18, r22
    1514:	36 95       	lsr	r19
    1516:	27 95       	ror	r18
    1518:	36 95       	lsr	r19
    151a:	27 95       	ror	r18
    151c:	ab e7       	ldi	r26, 0x7B	; 123
    151e:	b4 e1       	ldi	r27, 0x14	; 20
    1520:	0e 94 aa 20 	call	0x4154	; 0x4154 <__umulhisi3>
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	68 2f       	mov	r22, r24
    152a:	8b e1       	ldi	r24, 0x1B	; 27
    152c:	96 e0       	ldi	r25, 0x06	; 6
    152e:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1532:	68 c0       	rjmp	.+208    	; 0x1604 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1534:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <motor_disp_value>
    1538:	8b e1       	ldi	r24, 0x1B	; 27
    153a:	96 e0       	ldi	r25, 0x06	; 6
    153c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1540:	61 c0       	rjmp	.+194    	; 0x1604 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    1542:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	31 f0       	breq	.+12     	; 0x1556 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1550:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
                break;
    1554:	57 c0       	rjmp	.+174    	; 0x1604 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1556:	48 51       	subi	r20, 0x18	; 24
    1558:	5c 4f       	sbci	r21, 0xFC	; 252
    155a:	6f 4f       	sbci	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	40 93 ca 03 	sts	0x03CA, r20	; 0x8003ca <timer_disp_process.1979>
    1562:	50 93 cb 03 	sts	0x03CB, r21	; 0x8003cb <timer_disp_process.1979+0x1>
    1566:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <timer_disp_process.1979+0x2>
    156a:	70 93 cd 03 	sts	0x03CD, r23	; 0x8003cd <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    156e:	83 e7       	ldi	r24, 0x73	; 115
    1570:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <DispD2>
			DispD1.value = 'a';
    1574:	81 e6       	ldi	r24, 0x61	; 97
    1576:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <DispD1>
			DispD3.value = 'p';
    157a:	80 e7       	ldi	r24, 0x70	; 112
    157c:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <DispD3>
			segment1.state = SEG_VALUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
			segment2.state = SEG_VALUE;
    1586:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
			return;
    158a:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    158c:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	31 f0       	breq	.+12     	; 0x15a0 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    159a:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
                break;
    159e:	32 c0       	rjmp	.+100    	; 0x1604 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    15a0:	48 51       	subi	r20, 0x18	; 24
    15a2:	5c 4f       	sbci	r21, 0xFC	; 252
    15a4:	6f 4f       	sbci	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	40 93 ca 03 	sts	0x03CA, r20	; 0x8003ca <timer_disp_process.1979>
    15ac:	50 93 cb 03 	sts	0x03CB, r21	; 0x8003cb <timer_disp_process.1979+0x1>
    15b0:	60 93 cc 03 	sts	0x03CC, r22	; 0x8003cc <timer_disp_process.1979+0x2>
    15b4:	70 93 cd 03 	sts	0x03CD, r23	; 0x8003cd <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15b8:	8c e6       	ldi	r24, 0x6C	; 108
    15ba:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <DispD2>
			DispD1.value = 'o';
    15be:	8f e6       	ldi	r24, 0x6F	; 111
    15c0:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <DispD1>
			DispD3.value = 'p';
    15c4:	80 e7       	ldi	r24, 0x70	; 112
    15c6:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <DispD3>
			segment1.state = SEG_VALUE;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <segment1+0x4>
			segment2.state = SEG_VALUE;
    15d0:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <segment2+0x4>
            break;
    15d4:	17 c0       	rjmp	.+46     	; 0x1604 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15d6:	85 e6       	ldi	r24, 0x65	; 101
    15d8:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <DispD2>
			DispD1.value = 'r';
    15dc:	82 e7       	ldi	r24, 0x72	; 114
    15de:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <DispD1>
			disp_set_number(&segment2, error_reason);
    15e2:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <error_reason>
    15e6:	86 e1       	ldi	r24, 0x16	; 22
    15e8:	96 e0       	ldi	r25, 0x06	; 6
    15ea:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15f0:	68 ef       	ldi	r22, 0xF8	; 248
    15f2:	82 e2       	ldi	r24, 0x22	; 34
    15f4:	96 e0       	ldi	r25, 0x06	; 6
    15f6:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    15fa:	68 ef       	ldi	r22, 0xF8	; 248
    15fc:	8e e2       	ldi	r24, 0x2E	; 46
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1604:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	19 f1       	breq	.+70     	; 0x1652 <disp_process+0x1ae>
    160c:	48 f1       	brcs	.+82     	; 0x1660 <disp_process+0x1bc>
    160e:	86 30       	cpi	r24, 0x06	; 6
    1610:	19 f0       	breq	.+6      	; 0x1618 <disp_process+0x174>
    1612:	8d 30       	cpi	r24, 0x0D	; 13
    1614:	81 f1       	breq	.+96     	; 0x1676 <disp_process+0x1d2>
    1616:	6f c0       	rjmp	.+222    	; 0x16f6 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1618:	40 91 d9 03 	lds	r20, 0x03D9	; 0x8003d9 <voltage>
    161c:	50 91 da 03 	lds	r21, 0x03DA	; 0x8003da <voltage+0x1>
    1620:	9a 01       	movw	r18, r20
    1622:	36 95       	lsr	r19
    1624:	27 95       	ror	r18
    1626:	36 95       	lsr	r19
    1628:	27 95       	ror	r18
    162a:	ab e7       	ldi	r26, 0x7B	; 123
    162c:	b4 e1       	ldi	r27, 0x14	; 20
    162e:	0e 94 aa 20 	call	0x4154	; 0x4154 <__umulhisi3>
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	64 e6       	ldi	r22, 0x64	; 100
    1638:	68 9f       	mul	r22, r24
    163a:	90 01       	movw	r18, r0
    163c:	69 9f       	mul	r22, r25
    163e:	30 0d       	add	r19, r0
    1640:	11 24       	eor	r1, r1
    1642:	ba 01       	movw	r22, r20
    1644:	62 1b       	sub	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	86 e1       	ldi	r24, 0x16	; 22
    164a:	96 e0       	ldi	r25, 0x06	; 6
    164c:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    1650:	52 c0       	rjmp	.+164    	; 0x16f6 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    1652:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <servo_disp_value>
    1656:	86 e1       	ldi	r24, 0x16	; 22
    1658:	96 e0       	ldi	r25, 0x06	; 6
    165a:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
            break;
    165e:	4b c0       	rjmp	.+150    	; 0x16f6 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1660:	68 ef       	ldi	r22, 0xF8	; 248
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	96 e0       	ldi	r25, 0x06	; 6
    1666:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    166a:	68 ef       	ldi	r22, 0xF8	; 248
    166c:	8c e2       	ldi	r24, 0x2C	; 44
    166e:	96 e0       	ldi	r25, 0x06	; 6
    1670:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
            break;
    1674:	40 c0       	rjmp	.+128    	; 0x16f6 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1676:	44 ef       	ldi	r20, 0xF4	; 244
    1678:	51 e0       	ldi	r21, 0x01	; 1
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	84 ed       	ldi	r24, 0xD4	; 212
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <evTime_process_period>
    1686:	89 2b       	or	r24, r25
    1688:	b1 f1       	breq	.+108    	; 0x16f6 <disp_process+0x252>
			{
				if (blink_state == 0)
    168a:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <blink_state>
    168e:	81 11       	cpse	r24, r1
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <disp_process+0x20a>
				{
					blink_state = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1698:	67 ef       	ldi	r22, 0xF7	; 247
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	96 e0       	ldi	r25, 0x06	; 6
    169e:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    16a2:	67 ef       	ldi	r22, 0xF7	; 247
    16a4:	8c e2       	ldi	r24, 0x2C	; 44
    16a6:	96 e0       	ldi	r25, 0x06	; 6
    16a8:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
    16ac:	24 c0       	rjmp	.+72     	; 0x16f6 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    16ae:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <blink_state>
					if (blink_cnt == 0) 
    16b2:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <blink_cnt>
    16b6:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <blink_cnt+0x1>
    16ba:	a0 91 d1 03 	lds	r26, 0x03D1	; 0x8003d1 <blink_cnt+0x2>
    16be:	b0 91 d2 03 	lds	r27, 0x03D2	; 0x8003d2 <blink_cnt+0x3>
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
						break;
    16d2:	11 c0       	rjmp	.+34     	; 0x16f6 <disp_process+0x252>
					}
					blink_cnt--;
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	a1 09       	sbc	r26, r1
    16d8:	b1 09       	sbc	r27, r1
    16da:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <blink_cnt>
    16de:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <blink_cnt+0x1>
    16e2:	a0 93 d1 03 	sts	0x03D1, r26	; 0x8003d1 <blink_cnt+0x2>
    16e6:	b0 93 d2 03 	sts	0x03D2, r27	; 0x8003d2 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16ea:	60 91 ce 03 	lds	r22, 0x03CE	; 0x8003ce <second_disp_blink_val>
    16ee:	86 e1       	ldi	r24, 0x16	; 22
    16f0:	96 e0       	ldi	r25, 0x06	; 6
    16f2:	0e 94 9f 09 	call	0x133e	; 0x133e <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16f6:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <timer_disp_process.1979>
    16fa:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <timer_disp_process.1979+0x1>
    16fe:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <timer_disp_process.1979+0x2>
    1702:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <timer_disp_process.1979+0x3>
    1706:	c2 96       	adiw	r24, 0x32	; 50
    1708:	a1 1d       	adc	r26, r1
    170a:	b1 1d       	adc	r27, r1
    170c:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timer_disp_process.1979>
    1710:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timer_disp_process.1979+0x1>
    1714:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <timer_disp_process.1979+0x2>
    1718:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <timer_disp_process.1979+0x3>
    171c:	08 95       	ret

0000171e <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    1722:	00 91 43 06 	lds	r16, 0x0643	; 0x800643 <mktime+0x2>
    1726:	10 91 44 06 	lds	r17, 0x0644	; 0x800644 <mktime+0x3>
    172a:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <mktime+0x4>
    172e:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <mktime+0x5>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	80 0f       	add	r24, r16
    1738:	91 1f       	adc	r25, r17
    173a:	a2 1f       	adc	r26, r18
    173c:	b3 1f       	adc	r27, r19
    173e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <animation_time>
    1742:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <animation_time+0x1>
    1746:	a0 93 de 03 	sts	0x03DE, r26	; 0x8003de <animation_time+0x2>
    174a:	b0 93 df 03 	sts	0x03DF, r27	; 0x8003df <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	84 2f       	mov	r24, r20
    1752:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
}
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    175c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	29 f0       	breq	.+10     	; 0x176e <animation+0x12>
    1764:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	09 f0       	breq	.+2      	; 0x176e <animation+0x12>
    176c:	78 c0       	rjmp	.+240    	; 0x185e <animation+0x102>
    176e:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    1772:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    1776:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    177a:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    177e:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer_anim.1999>
    1782:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer_anim.1999+0x1>
    1786:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer_anim.1999+0x2>
    178a:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer_anim.1999+0x3>
    178e:	84 17       	cp	r24, r20
    1790:	95 07       	cpc	r25, r21
    1792:	a6 07       	cpc	r26, r22
    1794:	b7 07       	cpc	r27, r23
    1796:	08 f0       	brcs	.+2      	; 0x179a <animation+0x3e>
    1798:	62 c0       	rjmp	.+196    	; 0x185e <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    179a:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
    179e:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
    17a2:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
    17a6:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
    17aa:	81 55       	subi	r24, 0x51	; 81
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	af 4f       	sbci	r26, 0xFF	; 255
    17b0:	bf 4f       	sbci	r27, 0xFF	; 255
    17b2:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timer_anim.1999>
    17b6:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timer_anim.1999+0x1>
    17ba:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <timer_anim.1999+0x2>
    17be:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17c2:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <segment1+0x4>
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	61 f4       	brne	.+24     	; 0x17e2 <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17ca:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17ce:	82 e2       	ldi	r24, 0x22	; 34
    17d0:	96 e0       	ldi	r25, 0x06	; 6
    17d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17d6:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <anim_iteration.2000>
    17da:	8e e2       	ldi	r24, 0x2E	; 46
    17dc:	96 e0       	ldi	r25, 0x06	; 6
    17de:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17e2:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <segment2+0x4>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	61 f4       	brne	.+24     	; 0x1802 <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17ea:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    17ee:	80 e2       	ldi	r24, 0x20	; 32
    17f0:	96 e0       	ldi	r25, 0x06	; 6
    17f2:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17f6:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <anim_iteration2.2001>
    17fa:	8c e2       	ldi	r24, 0x2C	; 44
    17fc:	96 e0       	ldi	r25, 0x06	; 6
    17fe:	0e 94 c2 09 	call	0x1384	; 0x1384 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    1802:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    1806:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    180a:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    180e:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    1812:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <animation_time>
    1816:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <animation_time+0x1>
    181a:	a0 91 de 03 	lds	r26, 0x03DE	; 0x8003de <animation_time+0x2>
    181e:	b0 91 df 03 	lds	r27, 0x03DF	; 0x8003df <animation_time+0x3>
    1822:	84 17       	cp	r24, r20
    1824:	95 07       	cpc	r25, r21
    1826:	a6 07       	cpc	r26, r22
    1828:	b7 07       	cpc	r27, r23
    182a:	28 f4       	brcc	.+10     	; 0x1836 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
			LED_ACUM_OFF;
    1834:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1836:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <anim_iteration.2000>
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		anim_iteration2--;
    1840:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <anim_iteration2.2001>
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    184a:	9f 3f       	cpi	r25, 0xFF	; 255
    184c:	19 f4       	brne	.+6      	; 0x1854 <animation+0xf8>
    184e:	99 ef       	ldi	r25, 0xF9	; 249
    1850:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1854:	88 3f       	cpi	r24, 0xF8	; 248
    1856:	19 f4       	brne	.+6      	; 0x185e <animation+0x102>
    1858:	8e ef       	ldi	r24, 0xFE	; 254
    185a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <anim_iteration2.2001>
    185e:	08 95       	ret

00001860 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1860:	e1 99       	sbic	0x1c, 1	; 28
    1862:	fe cf       	rjmp	.-4      	; 0x1860 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1864:	9f bb       	out	0x1f, r25	; 31
    1866:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1868:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    186a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    186c:	e1 9a       	sbi	0x1c, 1	; 28
    186e:	08 95       	ret

00001870 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1870:	e1 99       	sbic	0x1c, 1	; 28
    1872:	fe cf       	rjmp	.-4      	; 0x1870 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1874:	9f bb       	out	0x1f, r25	; 31
    1876:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1878:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    187a:	8d b3       	in	r24, 0x1d	; 29
    187c:	08 95       	ret

0000187e <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    187e:	cf 93       	push	r28
    1880:	c8 2f       	mov	r28, r24
    1882:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    1886:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    188a:	82 60       	ori	r24, 0x02	; 2
    188c:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    1890:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    1894:	8c 2f       	mov	r24, r28
    1896:	0e 94 35 0a 	call	0x146a	; 0x146a <display_set_error>
    189a:	0e 94 b8 07 	call	0xf70	; 0xf70 <dcmotor_set_error>
    189e:	0e 94 55 12 	call	0x24aa	; 0x24aa <servo_error>
    18a2:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <system_error>
    18a6:	c0 93 32 06 	sts	0x0632, r28	; 0x800632 <led_blink>
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <error_init>:
    18ae:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <error_motor_state>
    18b2:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <error_motor_last_state>
    18b6:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <error_motor_status>
    18ba:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <error_servo_status>
    18be:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <error_servo_state>
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	0e 94 60 18 	call	0x30c0	; 0x30c0 <evTime_off>
    18ca:	8f ee       	ldi	r24, 0xEF	; 239
    18cc:	93 e0       	ldi	r25, 0x03	; 3
    18ce:	0e 94 60 18 	call	0x30c0	; 0x30c0 <evTime_off>
    18d2:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <led_blink>
    18d6:	08 95       	ret

000018d8 <error_deinit>:
    18d8:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <error_motor_state>
    18dc:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <error_motor_last_state>
    18e0:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <error_motor_status>
    18e4:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <error_servo_status>
    18e8:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <error_servo_state>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 60 18 	call	0x30c0	; 0x30c0 <evTime_off>
    18f4:	8f ee       	ldi	r24, 0xEF	; 239
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <evTime_off>
    18fc:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <led_blink>
    1900:	08 95       	ret

00001902 <error_servo_timer>:
static uint32_t error_servo_tim;
void error_servo_timer(void)
{
	debug_msg("ERROR: reset timer");
    1902:	82 e4       	ldi	r24, 0x42	; 66
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	error_servo_tim = mktime.ms + 2000;
    190e:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
    1912:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
    1916:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
    191a:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
    191e:	80 53       	subi	r24, 0x30	; 48
    1920:	98 4f       	sbci	r25, 0xF8	; 248
    1922:	af 4f       	sbci	r26, 0xFF	; 255
    1924:	bf 4f       	sbci	r27, 0xFF	; 255
    1926:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <error_servo_tim>
    192a:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <error_servo_tim+0x1>
    192e:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <error_servo_tim+0x2>
    1932:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <error_servo_tim+0x3>
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	08 95       	ret

0000193c <error_event>:

void error_event(void)
{
    193c:	4f 92       	push	r4
    193e:	5f 92       	push	r5
    1940:	6f 92       	push	r6
    1942:	7f 92       	push	r7
    1944:	8f 92       	push	r8
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1954:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    1958:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    195c:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    1960:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    1964:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <error_event_timer.2070>
    1968:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <error_event_timer.2070+0x1>
    196c:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <error_event_timer.2070+0x2>
    1970:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <error_event_timer.2070+0x3>
    1974:	84 17       	cp	r24, r20
    1976:	95 07       	cpc	r25, r21
    1978:	a6 07       	cpc	r26, r22
    197a:	b7 07       	cpc	r27, r23
    197c:	08 f0       	brcs	.+2      	; 0x1980 <error_event+0x44>
    197e:	a1 c2       	rjmp	.+1346   	; 0x1ec2 <error_event+0x586>
    1980:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    1984:	80 ff       	sbrs	r24, 0
    1986:	9d c2       	rjmp	.+1338   	; 0x1ec2 <error_event+0x586>
	{
		error_event_timer = mktime.ms + 250;
    1988:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    198c:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    1990:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    1994:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    1998:	46 50       	subi	r20, 0x06	; 6
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	6f 4f       	sbci	r22, 0xFF	; 255
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	40 93 e7 03 	sts	0x03E7, r20	; 0x8003e7 <error_event_timer.2070>
    19a4:	50 93 e8 03 	sts	0x03E8, r21	; 0x8003e8 <error_event_timer.2070+0x1>
    19a8:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <error_event_timer.2070+0x2>
    19ac:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <error_event_timer.2070+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    19b0:	81 fd       	sbrc	r24, 1
    19b2:	87 c2       	rjmp	.+1294   	; 0x1ec2 <error_event+0x586>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    19b4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    19b8:	4b 01       	movw	r8, r22
    19ba:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    19bc:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    19c0:	bc 01       	movw	r22, r24
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    19ca:	6b 01       	movw	r12, r22
    19cc:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    19ce:	25 e9       	ldi	r18, 0x95	; 149
    19d0:	35 e6       	ldi	r19, 0x65	; 101
    19d2:	40 ed       	ldi	r20, 0xD0	; 208
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <pow>
    19da:	2b 01       	movw	r4, r22
    19dc:	3c 01       	movw	r6, r24
    19de:	a7 01       	movw	r20, r14
    19e0:	96 01       	movw	r18, r12
    19e2:	c5 01       	movw	r24, r10
    19e4:	b4 01       	movw	r22, r8
    19e6:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	48 ec       	ldi	r20, 0xC8	; 200
    19f0:	52 e4       	ldi	r21, 0x42	; 66
    19f2:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divsf3>
    19f6:	4b 01       	movw	r8, r22
    19f8:	5c 01       	movw	r10, r24
    19fa:	23 e3       	ldi	r18, 0x33	; 51
    19fc:	33 e3       	ldi	r19, 0x33	; 51
    19fe:	43 e6       	ldi	r20, 0x63	; 99
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	c7 01       	movw	r24, r14
    1a04:	b6 01       	movw	r22, r12
    1a06:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	48 ec       	ldi	r20, 0xC8	; 200
    1a10:	52 e4       	ldi	r21, 0x42	; 66
    1a12:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divsf3>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	c5 01       	movw	r24, r10
    1a1c:	b4 01       	movw	r22, r8
    1a1e:	0e 94 33 19 	call	0x3266	; 0x3266 <__subsf3>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e4       	ldi	r20, 0x40	; 64
    1a28:	50 e4       	ldi	r21, 0x40	; 64
    1a2a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divsf3>
    1a2e:	4b 01       	movw	r8, r22
    1a30:	5c 01       	movw	r10, r24
    1a32:	28 e5       	ldi	r18, 0x58	; 88
    1a34:	39 e3       	ldi	r19, 0x39	; 57
    1a36:	44 e3       	ldi	r20, 0x34	; 52
    1a38:	5c e3       	ldi	r21, 0x3C	; 60
    1a3a:	c3 01       	movw	r24, r6
    1a3c:	b2 01       	movw	r22, r4
    1a3e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	c5 01       	movw	r24, r10
    1a48:	b4 01       	movw	r22, r8
    1a4a:	0e 94 34 19 	call	0x3268	; 0x3268 <__addsf3>
    1a4e:	4b 01       	movw	r8, r22
    1a50:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp = (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/100 + temp;
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
		error_event_timer = mktime.ms + 250;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a58:	68 2f       	mov	r22, r24
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	62 53       	subi	r22, 0x32	; 50
    1a5e:	71 09       	sbc	r23, r1
    1a60:	07 2e       	mov	r0, r23
    1a62:	00 0c       	add	r0, r0
    1a64:	88 0b       	sbc	r24, r24
    1a66:	99 0b       	sbc	r25, r25
    1a68:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    1a6c:	a7 01       	movw	r20, r14
    1a6e:	96 01       	movw	r18, r12
    1a70:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	48 ec       	ldi	r20, 0xC8	; 200
    1a7a:	52 e4       	ldi	r21, 0x42	; 66
    1a7c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divsf3>
    1a80:	a5 01       	movw	r20, r10
    1a82:	94 01       	movw	r18, r8
    1a84:	0e 94 34 19 	call	0x3268	; 0x3268 <__addsf3>
    1a88:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <motor_error_value>
    1a8c:	70 93 f9 03 	sts	0x03F9, r23	; 0x8003f9 <motor_error_value+0x1>
    1a90:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <motor_error_value+0x2>
    1a94:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	0e 94 43 11 	call	0x2286	; 0x2286 <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1a9e:	42 e0       	ldi	r20, 0x02	; 2
    1aa0:	5b e2       	ldi	r21, 0x2B	; 43
    1aa2:	67 e0       	ldi	r22, 0x07	; 7
    1aa4:	7d e3       	ldi	r23, 0x3D	; 61
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1aac:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <motor_error_value>
    1ab0:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <motor_error_value+0x1>
    1ab4:	40 91 fa 03 	lds	r20, 0x03FA	; 0x8003fa <motor_error_value+0x2>
    1ab8:	50 91 fb 03 	lds	r21, 0x03FB	; 0x8003fb <motor_error_value+0x3>
    1abc:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <__gesf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	44 f4       	brge	.+16     	; 0x1ad4 <error_event+0x198>
    1ac4:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
    1ac8:	89 2b       	or	r24, r25
    1aca:	21 f0       	breq	.+8      	; 0x1ad4 <error_event+0x198>
		{
			error_motor_status = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <error_motor_status>
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1ad4:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
    1ade:	81 11       	cpse	r24, r1
    1ae0:	0d c1       	rjmp	.+538    	; 0x1cfc <error_event+0x3c0>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1ae2:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <error_motor_status>
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <error_event+0x1b0>
    1aea:	a8 c0       	rjmp	.+336    	; 0x1c3c <error_event+0x300>
			{
				switch(error_motor_state)
    1aec:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <error_motor_state>
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <error_event+0x1ba>
    1af4:	70 c0       	rjmp	.+224    	; 0x1bd6 <error_event+0x29a>
    1af6:	28 f4       	brcc	.+10     	; 0x1b02 <error_event+0x1c6>
    1af8:	88 23       	and	r24, r24
    1afa:	51 f0       	breq	.+20     	; 0x1b10 <error_event+0x1d4>
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	a9 f1       	breq	.+106    	; 0x1b6a <error_event+0x22e>
    1b00:	fd c0       	rjmp	.+506    	; 0x1cfc <error_event+0x3c0>
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <error_event+0x1cc>
    1b06:	7a c0       	rjmp	.+244    	; 0x1bfc <error_event+0x2c0>
    1b08:	84 30       	cpi	r24, 0x04	; 4
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <error_event+0x1d2>
    1b0c:	7b c0       	rjmp	.+246    	; 0x1c04 <error_event+0x2c8>
    1b0e:	f6 c0       	rjmp	.+492    	; 0x1cfc <error_event+0x3c0>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1b16:	85 e5       	ldi	r24, 0x55	; 85
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	9f 93       	push	r25
    1b1c:	8f 93       	push	r24
    1b1e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b22:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b26:	2e e1       	ldi	r18, 0x1E	; 30
    1b28:	ac 01       	movw	r20, r24
    1b2a:	24 9f       	mul	r18, r20
    1b2c:	c0 01       	movw	r24, r0
    1b2e:	25 9f       	mul	r18, r21
    1b30:	90 0d       	add	r25, r0
    1b32:	11 24       	eor	r1, r1
    1b34:	48 e8       	ldi	r20, 0x88	; 136
    1b36:	53 e1       	ldi	r21, 0x13	; 19
    1b38:	7a 01       	movw	r14, r20
    1b3a:	e8 1a       	sub	r14, r24
    1b3c:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b3e:	ff 92       	push	r15
    1b40:	ef 92       	push	r14
    1b42:	80 e7       	ldi	r24, 0x70	; 112
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	9f 93       	push	r25
    1b48:	8f 93       	push	r24
    1b4a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b4e:	a7 01       	movw	r20, r14
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	93 e0       	ldi	r25, 0x03	; 3
    1b58:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
					break;
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	c9 c0       	rjmp	.+402    	; 0x1cfc <error_event+0x3c0>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1b72:	89 2b       	or	r24, r25
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <error_event+0x23c>
    1b76:	c2 c0       	rjmp	.+388    	; 0x1cfc <error_event+0x3c0>
						{
							dcmotor_set_try();
    1b78:	0e 94 c6 07 	call	0xf8c	; 0xf8c <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b7c:	0e 94 b4 07 	call	0xf68	; 0xf68 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b80:	2e e1       	ldi	r18, 0x1E	; 30
    1b82:	ac 01       	movw	r20, r24
    1b84:	24 9f       	mul	r18, r20
    1b86:	c0 01       	movw	r24, r0
    1b88:	25 9f       	mul	r18, r21
    1b8a:	90 0d       	add	r25, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	48 e8       	ldi	r20, 0x88	; 136
    1b90:	53 e1       	ldi	r21, 0x13	; 19
    1b92:	7a 01       	movw	r14, r20
    1b94:	e8 1a       	sub	r14, r24
    1b96:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b98:	ff 92       	push	r15
    1b9a:	ef 92       	push	r14
    1b9c:	8f e8       	ldi	r24, 0x8F	; 143
    1b9e:	91 e0       	ldi	r25, 0x01	; 1
    1ba0:	9f 93       	push	r25
    1ba2:	8f 93       	push	r24
    1ba4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1ba8:	a7 01       	movw	r20, r14
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    1bbc:	83 eb       	ldi	r24, 0xB3	; 179
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	9f 93       	push	r25
    1bc2:	8f 93       	push	r24
    1bc4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	93 c0       	rjmp	.+294    	; 0x1cfc <error_event+0x3c0>
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1bde:	89 2b       	or	r24, r25
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <error_event+0x2a8>
    1be2:	8c c0       	rjmp	.+280    	; 0x1cfc <error_event+0x3c0>
						{
							error_motor_state = ERR_M_ERROR;
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1bea:	83 ed       	ldi	r24, 0xD3	; 211
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	9f 93       	push	r25
    1bf0:	8f 93       	push	r24
    1bf2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	80 c0       	rjmp	.+256    	; 0x1cfc <error_event+0x3c0>
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1c02:	7c c0       	rjmp	.+248    	; 0x1cfc <error_event+0x3c0>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	93 e0       	ldi	r25, 0x03	; 3
    1c08:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1c0c:	89 2b       	or	r24, r25
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <error_event+0x2d6>
    1c10:	75 c0       	rjmp	.+234    	; 0x1cfc <error_event+0x3c0>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c12:	40 ed       	ldi	r20, 0xD0	; 208
    1c14:	57 e0       	ldi	r21, 0x07	; 7
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	93 e0       	ldi	r25, 0x03	; 3
    1c1e:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
							error_motor_state = error_motor_last_state;
    1c22:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <error_motor_last_state>
    1c26:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
							debug_msg("ERROR STATUS: go to last before wait\n\r");
    1c2a:	8f ee       	ldi	r24, 0xEF	; 239
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	9f 93       	push	r25
    1c30:	8f 93       	push	r24
    1c32:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	60 c0       	rjmp	.+192    	; 0x1cfc <error_event+0x3c0>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1c3c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <error_motor_state>
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	49 f1       	breq	.+82     	; 0x1c96 <error_event+0x35a>
    1c44:	18 f4       	brcc	.+6      	; 0x1c4c <error_event+0x310>
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	41 f0       	breq	.+16     	; 0x1c5a <error_event+0x31e>
    1c4a:	58 c0       	rjmp	.+176    	; 0x1cfc <error_event+0x3c0>
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <error_event+0x316>
    1c50:	41 c0       	rjmp	.+130    	; 0x1cd4 <error_event+0x398>
    1c52:	84 30       	cpi	r24, 0x04	; 4
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <error_event+0x31c>
    1c56:	42 c0       	rjmp	.+132    	; 0x1cdc <error_event+0x3a0>
    1c58:	51 c0       	rjmp	.+162    	; 0x1cfc <error_event+0x3c0>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1c62:	89 2b       	or	r24, r25
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <error_event+0x32c>
    1c66:	4a c0       	rjmp	.+148    	; 0x1cfc <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c68:	40 ed       	ldi	r20, 0xD0	; 208
    1c6a:	57 e0       	ldi	r21, 0x07	; 7
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1c84:	86 e1       	ldi	r24, 0x16	; 22
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	9f 93       	push	r25
    1c8a:	8f 93       	push	r24
    1c8c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	33 c0       	rjmp	.+102    	; 0x1cfc <error_event+0x3c0>
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	69 f1       	breq	.+90     	; 0x1cfc <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1ca2:	40 ed       	ldi	r20, 0xD0	; 208
    1ca4:	57 e0       	ldi	r21, 0x07	; 7
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	93 e0       	ldi	r25, 0x03	; 3
    1cae:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
						dcmotor_set_normal_state();
    1cb2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1cb6:	84 e0       	ldi	r24, 0x04	; 4
    1cb8:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1cc2:	86 e1       	ldi	r24, 0x16	; 22
    1cc4:	92 e0       	ldi	r25, 0x02	; 2
    1cc6:	9f 93       	push	r25
    1cc8:	8f 93       	push	r24
    1cca:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <error_event+0x3c0>
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1cda:	10 c0       	rjmp	.+32     	; 0x1cfc <error_event+0x3c0>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	93 e0       	ldi	r25, 0x03	; 3
    1ce0:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1ce4:	89 2b       	or	r24, r25
    1ce6:	51 f0       	breq	.+20     	; 0x1cfc <error_event+0x3c0>
					{
						debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1ce8:	81 e3       	ldi	r24, 0x31	; 49
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	9f 93       	push	r25
    1cee:	8f 93       	push	r24
    1cf0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						error_motor_state = ERR_M_OK;
    1cf4:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <error_motor_state>
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
    1d02:	81 11       	cpse	r24, r1
    1d04:	de c0       	rjmp	.+444    	; 0x1ec2 <error_event+0x586>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	int ret = dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	0e 94 4b 07 	call	0xe96	; 0xe96 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <servo_error_value+0x1>
    1d12:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <servo_error_value>
			uint16_t servo_filt_val = measure_get_filtered_value(MEAS_SERVO);
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	0e 94 43 11 	call	0x2286	; 0x2286 <measure_get_filtered_value>
    1d1c:	7c 01       	movw	r14, r24
			debug_msg("servo_error_value: %d, filtered value: %d\n", servo_error_value, servo_filt_val);
    1d1e:	ff 92       	push	r15
    1d20:	8f 93       	push	r24
    1d22:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <servo_error_value+0x1>
    1d26:	8f 93       	push	r24
    1d28:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <servo_error_value>
    1d2c:	8f 93       	push	r24
    1d2e:	8a e4       	ldi	r24, 0x4A	; 74
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	9f 93       	push	r25
    1d34:	8f 93       	push	r24
    1d36:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
			if (servo_filt_val > servo_error_value && error_servo_tim < mktime.ms) //servo_vibro_value*5
    1d3a:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <servo_error_value>
    1d3e:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <servo_error_value+0x1>
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	8e 15       	cp	r24, r14
    1d50:	9f 05       	cpc	r25, r15
    1d52:	80 f5       	brcc	.+96     	; 0x1db4 <error_event+0x478>
    1d54:	c0 90 43 06 	lds	r12, 0x0643	; 0x800643 <mktime+0x2>
    1d58:	d0 90 44 06 	lds	r13, 0x0644	; 0x800644 <mktime+0x3>
    1d5c:	e0 90 45 06 	lds	r14, 0x0645	; 0x800645 <mktime+0x4>
    1d60:	f0 90 46 06 	lds	r15, 0x0646	; 0x800646 <mktime+0x5>
    1d64:	40 91 eb 03 	lds	r20, 0x03EB	; 0x8003eb <error_servo_tim>
    1d68:	50 91 ec 03 	lds	r21, 0x03EC	; 0x8003ec <error_servo_tim+0x1>
    1d6c:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <error_servo_tim+0x2>
    1d70:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <error_servo_tim+0x3>
    1d74:	4c 15       	cp	r20, r12
    1d76:	5d 05       	cpc	r21, r13
    1d78:	6e 05       	cpc	r22, r14
    1d7a:	7f 05       	cpc	r23, r15
    1d7c:	d8 f4       	brcc	.+54     	; 0x1db4 <error_event+0x478>
			{
				debug_msg("servo_error_value: %d\n", servo_error_value);
    1d7e:	9f 93       	push	r25
    1d80:	8f 93       	push	r24
    1d82:	85 e7       	ldi	r24, 0x75	; 117
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	9f 93       	push	r25
    1d88:	8f 93       	push	r24
    1d8a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				error_servo_status = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <error_servo_state>
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	51 f1       	breq	.+84     	; 0x1df8 <error_event+0x4bc>
    1da4:	a8 f0       	brcs	.+42     	; 0x1dd0 <error_event+0x494>
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	09 f4       	brne	.+2      	; 0x1dac <error_event+0x470>
    1daa:	4b c0       	rjmp	.+150    	; 0x1e42 <error_event+0x506>
    1dac:	83 30       	cpi	r24, 0x03	; 3
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <error_event+0x476>
    1db0:	51 c0       	rjmp	.+162    	; 0x1e54 <error_event+0x518>
    1db2:	87 c0       	rjmp	.+270    	; 0x1ec2 <error_event+0x586>
				debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1db4:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1db8:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <error_servo_state>
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <error_event+0x486>
    1dc0:	66 c0       	rjmp	.+204    	; 0x1e8e <error_event+0x552>
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <error_event+0x48c>
    1dc6:	7a c0       	rjmp	.+244    	; 0x1ebc <error_event+0x580>
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <error_event+0x492>
    1dcc:	7a c0       	rjmp	.+244    	; 0x1ec2 <error_event+0x586>
    1dce:	46 c0       	rjmp	.+140    	; 0x1e5c <error_event+0x520>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1dd6:	8c e8       	ldi	r24, 0x8C	; 140
    1dd8:	92 e0       	ldi	r25, 0x02	; 2
    1dda:	9f 93       	push	r25
    1ddc:	8f 93       	push	r24
    1dde:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1de2:	4c ed       	ldi	r20, 0xDC	; 220
    1de4:	55 e0       	ldi	r21, 0x05	; 5
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	8f ee       	ldi	r24, 0xEF	; 239
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
					break;
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	65 c0       	rjmp	.+202    	; 0x1ec2 <error_event+0x586>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1df8:	8f ee       	ldi	r24, 0xEF	; 239
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1e00:	89 2b       	or	r24, r25
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <error_event+0x4ca>
    1e04:	5e c0       	rjmp	.+188    	; 0x1ec2 <error_event+0x586>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1e06:	0e 94 c2 12 	call	0x2584	; 0x2584 <servo_get_try_cnt>
    1e0a:	04 97       	sbiw	r24, 0x04	; 4
    1e0c:	24 f0       	brlt	.+8      	; 0x1e16 <error_event+0x4da>
							{
								error_servo_state = ERR_S_ERROR;
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <error_servo_state>
								break;
    1e14:	56 c0       	rjmp	.+172    	; 0x1ec2 <error_event+0x586>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1e16:	40 ed       	ldi	r20, 0xD0	; 208
    1e18:	57 e0       	ldi	r21, 0x07	; 7
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	8f ee       	ldi	r24, 0xEF	; 239
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
							error_servo_state = ERR_S_TRY;
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <error_servo_state>
							servo_enable_try();
    1e2c:	0e 94 b6 12 	call	0x256c	; 0x256c <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1e30:	87 ea       	ldi	r24, 0xA7	; 167
    1e32:	92 e0       	ldi	r25, 0x02	; 2
    1e34:	9f 93       	push	r25
    1e36:	8f 93       	push	r24
    1e38:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	40 c0       	rjmp	.+128    	; 0x1ec2 <error_event+0x586>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1e42:	8f ee       	ldi	r24, 0xEF	; 239
    1e44:	93 e0       	ldi	r25, 0x03	; 3
    1e46:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1e4a:	89 2b       	or	r24, r25
    1e4c:	d1 f1       	breq	.+116    	; 0x1ec2 <error_event+0x586>
						{
							error_servo_state = ERR_S_OK;
    1e4e:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <error_servo_state>
    1e52:	37 c0       	rjmp	.+110    	; 0x1ec2 <error_event+0x586>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
					break;
    1e5a:	33 c0       	rjmp	.+102    	; 0x1ec2 <error_event+0x586>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1e5c:	8f ee       	ldi	r24, 0xEF	; 239
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1e64:	89 2b       	or	r24, r25
    1e66:	69 f1       	breq	.+90     	; 0x1ec2 <error_event+0x586>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1e68:	40 ed       	ldi	r20, 0xD0	; 208
    1e6a:	57 e0       	ldi	r21, 0x07	; 7
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	8f ee       	ldi	r24, 0xEF	; 239
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
						error_servo_state = ERR_M_OK;
    1e78:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e7c:	81 ec       	ldi	r24, 0xC1	; 193
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	1a c0       	rjmp	.+52     	; 0x1ec2 <error_event+0x586>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1e8e:	8f ee       	ldi	r24, 0xEF	; 239
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    1e96:	89 2b       	or	r24, r25
    1e98:	a1 f0       	breq	.+40     	; 0x1ec2 <error_event+0x586>
					{
						error_servo_state = ERR_S_OK;
    1e9a:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e9e:	81 ec       	ldi	r24, 0xC1	; 193
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	9f 93       	push	r25
    1ea4:	8f 93       	push	r24
    1ea6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						servo_try_reset_timeout(3500);
    1eaa:	6c ea       	ldi	r22, 0xAC	; 172
    1eac:	7d e0       	ldi	r23, 0x0D	; 13
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 38 13 	call	0x2670	; 0x2670 <servo_try_reset_timeout>
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <error_event+0x586>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 3f 0c 	call	0x187e	; 0x187e <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	bf 90       	pop	r11
    1ecc:	af 90       	pop	r10
    1ece:	9f 90       	pop	r9
    1ed0:	8f 90       	pop	r8
    1ed2:	7f 90       	pop	r7
    1ed4:	6f 90       	pop	r6
    1ed6:	5f 90       	pop	r5
    1ed8:	4f 90       	pop	r4
    1eda:	08 95       	ret

00001edc <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1edc:	4e e5       	ldi	r20, 0x5E	; 94
    1ede:	51 e0       	ldi	r21, 0x01	; 1
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	82 ee       	ldi	r24, 0xE2	; 226
    1ee6:	93 e0       	ldi	r25, 0x03	; 3
    1ee8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <evTime_process_period>
    1eec:	89 2b       	or	r24, r25
    1eee:	09 f1       	breq	.+66     	; 0x1f32 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1ef0:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <led_blink>
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	71 f4       	brne	.+28     	; 0x1f14 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1ef8:	92 b3       	in	r25, 0x12	; 18
    1efa:	80 e1       	ldi	r24, 0x10	; 16
    1efc:	89 27       	eor	r24, r25
    1efe:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1f00:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    1f04:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    1f08:	90 62       	ori	r25, 0x20	; 32
    1f0a:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    1f0e:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    1f12:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	69 f4       	brne	.+26     	; 0x1f32 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1f18:	92 b3       	in	r25, 0x12	; 18
    1f1a:	80 e4       	ldi	r24, 0x40	; 64
    1f1c:	89 27       	eor	r24, r25
    1f1e:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1f20:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    1f24:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    1f28:	90 62       	ori	r25, 0x20	; 32
    1f2a:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    1f2e:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    1f32:	08 95       	ret

00001f34 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1f34:	fc 01       	movw	r30, r24
    1f36:	20 81       	ld	r18, Z
    1f38:	31 81       	ldd	r19, Z+1	; 0x01
    1f3a:	62 30       	cpi	r22, 0x02	; 2
    1f3c:	58 f0       	brcs	.+22     	; 0x1f54 <filtered_value+0x20>
    1f3e:	32 96       	adiw	r30, 0x02	; 2
    1f40:	91 e0       	ldi	r25, 0x01	; 1
    1f42:	41 91       	ld	r20, Z+
    1f44:	51 91       	ld	r21, Z+
    1f46:	24 0f       	add	r18, r20
    1f48:	35 1f       	adc	r19, r21
    1f4a:	36 95       	lsr	r19
    1f4c:	27 95       	ror	r18
    1f4e:	9f 5f       	subi	r25, 0xFF	; 255
    1f50:	69 13       	cpse	r22, r25
    1f52:	f7 cf       	rjmp	.-18     	; 0x1f42 <filtered_value+0xe>
    1f54:	c9 01       	movw	r24, r18
    1f56:	08 95       	ret

00001f58 <init_measure>:
    1f58:	ea e4       	ldi	r30, 0x4A	; 74
    1f5a:	f4 e0       	ldi	r31, 0x04	; 4
    1f5c:	22 e7       	ldi	r18, 0x72	; 114
    1f5e:	34 e0       	ldi	r19, 0x04	; 4
    1f60:	81 ef       	ldi	r24, 0xF1	; 241
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	81 93       	st	Z+, r24
    1f66:	91 93       	st	Z+, r25
    1f68:	2e 17       	cp	r18, r30
    1f6a:	3f 07       	cpc	r19, r31
    1f6c:	d9 f7       	brne	.-10     	; 0x1f64 <init_measure+0xc>
    1f6e:	e9 e2       	ldi	r30, 0x29	; 41
    1f70:	f4 e0       	ldi	r31, 0x04	; 4
    1f72:	87 e4       	ldi	r24, 0x47	; 71
    1f74:	94 e0       	ldi	r25, 0x04	; 4
    1f76:	11 92       	st	Z+, r1
    1f78:	11 92       	st	Z+, r1
    1f7a:	8e 17       	cp	r24, r30
    1f7c:	9f 07       	cpc	r25, r31
    1f7e:	d9 f7       	brne	.-10     	; 0x1f76 <init_measure+0x1e>
    1f80:	e1 e1       	ldi	r30, 0x11	; 17
    1f82:	f4 e0       	ldi	r31, 0x04	; 4
    1f84:	85 e2       	ldi	r24, 0x25	; 37
    1f86:	94 e0       	ldi	r25, 0x04	; 4
    1f88:	11 92       	st	Z+, r1
    1f8a:	11 92       	st	Z+, r1
    1f8c:	8e 17       	cp	r24, r30
    1f8e:	9f 07       	cpc	r25, r31
    1f90:	d9 f7       	brne	.-10     	; 0x1f88 <init_measure+0x30>
    1f92:	08 95       	ret

00001f94 <measure_process>:
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    1fa8:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    1fac:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    1fb0:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    1fb4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <measure_timer>
    1fb8:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <measure_timer+0x1>
    1fbc:	a0 91 0a 04 	lds	r26, 0x040A	; 0x80040a <measure_timer+0x2>
    1fc0:	b0 91 0b 04 	lds	r27, 0x040B	; 0x80040b <measure_timer+0x3>
    1fc4:	84 17       	cp	r24, r20
    1fc6:	95 07       	cpc	r25, r21
    1fc8:	a6 07       	cpc	r26, r22
    1fca:	b7 07       	cpc	r27, r23
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <measure_process+0x3c>
    1fce:	16 c1       	rjmp	.+556    	; 0x21fc <measure_process+0x268>
    1fd0:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
    1fd4:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
    1fd8:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
    1fdc:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
    1fe0:	44 96       	adiw	r24, 0x14	; 20
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <measure_timer>
    1fea:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <measure_timer+0x1>
    1fee:	a0 93 0a 04 	sts	0x040A, r26	; 0x80040a <measure_timer+0x2>
    1ff2:	b0 93 0b 04 	sts	0x040B, r27	; 0x80040b <measure_timer+0x3>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <motor_filter_value>
    2002:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <motor_filter_value+0x1>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    200e:	21 e7       	ldi	r18, 0x71	; 113
    2010:	3d e3       	ldi	r19, 0x3D	; 61
    2012:	4a e8       	ldi	r20, 0x8A	; 138
    2014:	5e e3       	ldi	r21, 0x3E	; 62
    2016:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    201a:	6b 01       	movw	r12, r22
    201c:	7c 01       	movw	r14, r24
    201e:	be 01       	movw	r22, r28
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    2028:	9b 01       	movw	r18, r22
    202a:	ac 01       	movw	r20, r24
    202c:	c7 01       	movw	r24, r14
    202e:	b6 01       	movw	r22, r12
    2030:	0e 94 34 19 	call	0x3268	; 0x3268 <__addsf3>
    2034:	0e 94 19 1a 	call	0x3432	; 0x3432 <__fixunssfsi>
    2038:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <accum_adc+0x1>
    203c:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <accum_adc>
    2040:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <iteration_adc_accum_table>
    2044:	e2 2f       	mov	r30, r18
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e6 5b       	subi	r30, 0xB6	; 182
    204e:	fb 4f       	sbci	r31, 0xFB	; 251
    2050:	71 83       	std	Z+1, r23	; 0x01
    2052:	60 83       	st	Z, r22
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	82 0f       	add	r24, r18
    2058:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <iteration_adc_accum_table>
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    2062:	80 32       	cpi	r24, 0x20	; 32
    2064:	91 05       	cpc	r25, r1
    2066:	30 f0       	brcs	.+12     	; 0x2074 <measure_process+0xe0>
    2068:	4f 97       	sbiw	r24, 0x1f	; 31
    206a:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <motor_adc+0x1>
    206e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <motor_adc>
    2072:	04 c0       	rjmp	.+8      	; 0x207c <measure_process+0xe8>
    2074:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <motor_adc+0x1>
    2078:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <motor_adc>
    207c:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <iteration_adc_motor_table>
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	ee 0f       	add	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	e7 5d       	subi	r30, 0xD7	; 215
    2088:	fb 4f       	sbci	r31, 0xFB	; 251
    208a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <motor_adc>
    208e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <motor_adc+0x1>
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    209c:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <s_o_t_adc+0x1>
    20a0:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <s_o_t_adc>
    20a4:	c0 91 0c 04 	lds	r28, 0x040C	; 0x80040c <calibration_value>
    20a8:	d0 91 0d 04 	lds	r29, 0x040D	; 0x80040d <calibration_value+0x1>
    20ac:	20 97       	sbiw	r28, 0x00	; 0
    20ae:	79 f0       	breq	.+30     	; 0x20ce <measure_process+0x13a>
    20b0:	c8 17       	cp	r28, r24
    20b2:	d9 07       	cpc	r29, r25
    20b4:	28 f4       	brcc	.+10     	; 0x20c0 <measure_process+0x12c>
    20b6:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <s_o_t_adc+0x1>
    20ba:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <s_o_t_adc>
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <measure_process+0x13a>
    20c0:	9e 01       	movw	r18, r28
    20c2:	28 1b       	sub	r18, r24
    20c4:	39 0b       	sbc	r19, r25
    20c6:	30 93 0f 04 	sts	0x040F, r19	; 0x80040f <s_o_t_adc+0x1>
    20ca:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <s_o_t_adc>
    20ce:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <s_o_t_iteration_adc_table>
    20d2:	10 91 0e 04 	lds	r17, 0x040E	; 0x80040e <s_o_t_adc>
    20d6:	00 91 0f 04 	lds	r16, 0x040F	; 0x80040f <s_o_t_adc+0x1>
    20da:	e8 2f       	mov	r30, r24
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ef 5e       	subi	r30, 0xEF	; 239
    20e4:	fb 4f       	sbci	r31, 0xFB	; 251
    20e6:	10 83       	st	Z, r17
    20e8:	01 83       	std	Z+1, r16	; 0x01
    20ea:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <iteration_adc_motor_table>
    20ee:	9f 5f       	subi	r25, 0xFF	; 255
    20f0:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <iteration_adc_motor_table>
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <s_o_t_iteration_adc_table>
    20fa:	64 e1       	ldi	r22, 0x14	; 20
    20fc:	8a e4       	ldi	r24, 0x4A	; 74
    20fe:	94 e0       	ldi	r25, 0x04	; 4
    2100:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <filtered_value>
    2104:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <filtered_accum_adc_val+0x1>
    2108:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <filtered_accum_adc_val>
    210c:	6f e0       	ldi	r22, 0x0F	; 15
    210e:	89 e2       	ldi	r24, 0x29	; 41
    2110:	94 e0       	ldi	r25, 0x04	; 4
    2112:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <filtered_value>
    2116:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <motor_filter_value+0x1>
    211a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <motor_filter_value>
    211e:	6a e0       	ldi	r22, 0x0A	; 10
    2120:	81 e1       	ldi	r24, 0x11	; 17
    2122:	94 e0       	ldi	r25, 0x04	; 4
    2124:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <filtered_value>
    2128:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <s_o_t_filter_value+0x1>
    212c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <s_o_t_filter_value>
    2130:	c0 90 04 04 	lds	r12, 0x0404	; 0x800404 <debug_msg_counter>
    2134:	d0 90 05 04 	lds	r13, 0x0405	; 0x800405 <debug_msg_counter+0x1>
    2138:	e0 90 06 04 	lds	r14, 0x0406	; 0x800406 <debug_msg_counter+0x2>
    213c:	f0 90 07 04 	lds	r15, 0x0407	; 0x800407 <debug_msg_counter+0x3>
    2140:	c7 01       	movw	r24, r14
    2142:	b6 01       	movw	r22, r12
    2144:	20 ea       	ldi	r18, 0xA0	; 160
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	0e 94 82 20 	call	0x4104	; 0x4104 <__udivmodsi4>
    2150:	67 2b       	or	r22, r23
    2152:	68 2b       	or	r22, r24
    2154:	69 2b       	or	r22, r25
    2156:	71 f0       	breq	.+28     	; 0x2174 <measure_process+0x1e0>
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	0e 94 82 20 	call	0x4104	; 0x4104 <__udivmodsi4>
    2168:	67 2b       	or	r22, r23
    216a:	68 2b       	or	r22, r24
    216c:	69 2b       	or	r22, r25
    216e:	09 f5       	brne	.+66     	; 0x21b2 <measure_process+0x21e>
    2170:	20 97       	sbiw	r28, 0x00	; 0
    2172:	f9 f4       	brne	.+62     	; 0x21b2 <measure_process+0x21e>
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <motor_adc+0x1>
    217c:	8f 93       	push	r24
    217e:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <motor_adc>
    2182:	8f 93       	push	r24
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <accum_adc+0x1>
    218c:	8f 93       	push	r24
    218e:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <accum_adc>
    2192:	8f 93       	push	r24
    2194:	8a ed       	ldi	r24, 0xDA	; 218
    2196:	92 e0       	ldi	r25, 0x02	; 2
    2198:	9f 93       	push	r25
    219a:	8f 93       	push	r24
    219c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    21a0:	2d b7       	in	r18, 0x3d	; 61
    21a2:	3e b7       	in	r19, 0x3e	; 62
    21a4:	26 5f       	subi	r18, 0xF6	; 246
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	3e bf       	out	0x3e, r19	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	2d bf       	out	0x3d, r18	; 61
    21b2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <debug_msg_counter>
    21b6:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <debug_msg_counter+0x1>
    21ba:	a0 91 06 04 	lds	r26, 0x0406	; 0x800406 <debug_msg_counter+0x2>
    21be:	b0 91 07 04 	lds	r27, 0x0407	; 0x800407 <debug_msg_counter+0x3>
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	a1 1d       	adc	r26, r1
    21c6:	b1 1d       	adc	r27, r1
    21c8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <debug_msg_counter>
    21cc:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <debug_msg_counter+0x1>
    21d0:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <debug_msg_counter+0x2>
    21d4:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <debug_msg_counter+0x3>
    21d8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <iteration_adc_accum_table>
    21dc:	84 31       	cpi	r24, 0x14	; 20
    21de:	11 f4       	brne	.+4      	; 0x21e4 <measure_process+0x250>
    21e0:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <iteration_adc_accum_table>
    21e4:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <s_o_t_iteration_adc_table>
    21e8:	8a 30       	cpi	r24, 0x0A	; 10
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <measure_process+0x25c>
    21ec:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <s_o_t_iteration_adc_table>
    21f0:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <iteration_adc_motor_table>
    21f4:	8f 30       	cpi	r24, 0x0F	; 15
    21f6:	11 f4       	brne	.+4      	; 0x21fc <measure_process+0x268>
    21f8:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <iteration_adc_motor_table>
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	df 90       	pop	r13
    220a:	cf 90       	pop	r12
    220c:	08 95       	ret

0000220e <measure_get_servo_calibration>:
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	cf 93       	push	r28
    2218:	df 93       	push	r29
    221a:	c0 90 43 06 	lds	r12, 0x0643	; 0x800643 <mktime+0x2>
    221e:	d0 90 44 06 	lds	r13, 0x0644	; 0x800644 <mktime+0x3>
    2222:	e0 90 45 06 	lds	r14, 0x0645	; 0x800645 <mktime+0x4>
    2226:	f0 90 46 06 	lds	r15, 0x0646	; 0x800646 <mktime+0x5>
    222a:	8c ed       	ldi	r24, 0xDC	; 220
    222c:	c8 0e       	add	r12, r24
    222e:	85 e0       	ldi	r24, 0x05	; 5
    2230:	d8 1e       	adc	r13, r24
    2232:	e1 1c       	adc	r14, r1
    2234:	f1 1c       	adc	r15, r1
    2236:	c1 e4       	ldi	r28, 0x41	; 65
    2238:	d6 e0       	ldi	r29, 0x06	; 6
    223a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <measure_process>
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	ac 81       	ldd	r26, Y+4	; 0x04
    2244:	bd 81       	ldd	r27, Y+5	; 0x05
    2246:	c8 16       	cp	r12, r24
    2248:	d9 06       	cpc	r13, r25
    224a:	ea 06       	cpc	r14, r26
    224c:	fb 06       	cpc	r15, r27
    224e:	a8 f7       	brcc	.-22     	; 0x223a <measure_get_servo_calibration+0x2c>
    2250:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <s_o_t_filter_value>
    2254:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <s_o_t_filter_value+0x1>
    2258:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <calibration_value>
    225c:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <calibration_value+0x1>
    2260:	9f 93       	push	r25
    2262:	8f 93       	push	r24
    2264:	8a e1       	ldi	r24, 0x1A	; 26
    2266:	93 e0       	ldi	r25, 0x03	; 3
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
    226c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	08 95       	ret

00002286 <measure_get_filtered_value>:
    2286:	83 30       	cpi	r24, 0x03	; 3
    2288:	18 f4       	brcc	.+6      	; 0x2290 <measure_get_filtered_value+0xa>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	40 f0       	brcs	.+16     	; 0x229e <measure_get_filtered_value+0x18>
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <measure_get_filtered_value+0x22>
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	79 f4       	brne	.+30     	; 0x22b2 <measure_get_filtered_value+0x2c>
    2294:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <filtered_accum_adc_val>
    2298:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <filtered_accum_adc_val+0x1>
    229c:	08 95       	ret
    229e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <motor_filter_value>
    22a2:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <motor_filter_value+0x1>
    22a6:	08 95       	ret
    22a8:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <s_o_t_filter_value>
    22ac:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <s_o_t_filter_value+0x1>
    22b0:	08 95       	ret
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	08 95       	ret

000022b8 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	6a 01       	movw	r12, r20
    22c2:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	18 f4       	brcc	.+6      	; 0x22ce <measure_get_current+0x16>
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	50 f0       	brcs	.+20     	; 0x22e0 <measure_get_current+0x28>
    22cc:	10 c0       	rjmp	.+32     	; 0x22ee <measure_get_current+0x36>
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	a9 f4       	brne	.+42     	; 0x22fc <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    22d2:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <filtered_accum_adc_val>
    22d6:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <filtered_accum_adc_val+0x1>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
		break;
    22de:	11 c0       	rjmp	.+34     	; 0x2302 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    22e0:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <motor_filter_value>
    22e4:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <motor_filter_value+0x1>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
		break;
    22ec:	0a c0       	rjmp	.+20     	; 0x2302 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    22ee:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <s_o_t_filter_value>
    22f2:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <s_o_t_filter_value+0x1>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
		break;
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    2302:	0e 94 48 1a 	call	0x3490	; 0x3490 <__floatunsisf>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5a e3       	ldi	r21, 0x3A	; 58
    230e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 ea       	ldi	r20, 0xA0	; 160
    2318:	50 e4       	ldi	r21, 0x40	; 64
    231a:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    231e:	a7 01       	movw	r20, r14
    2320:	96 01       	movw	r18, r12
    2322:	0e 94 a0 19 	call	0x3340	; 0x3340 <__divsf3>
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	08 95       	ret

00002330 <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	59 f0       	breq	.+22     	; 0x2356 <mem_save_data+0x26>
    2340:	28 f4       	brcc	.+10     	; 0x234c <mem_save_data+0x1c>
    2342:	88 23       	and	r24, r24
    2344:	91 f0       	breq	.+36     	; 0x236a <mem_save_data+0x3a>
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	51 f1       	breq	.+84     	; 0x239e <mem_save_data+0x6e>
    234a:	34 c0       	rjmp	.+104    	; 0x23b4 <mem_save_data+0x84>
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	51 f1       	breq	.+84     	; 0x23a4 <mem_save_data+0x74>
    2350:	84 30       	cpi	r24, 0x04	; 4
    2352:	21 f0       	breq	.+8      	; 0x235c <mem_save_data+0x2c>
    2354:	2f c0       	rjmp	.+94     	; 0x23b4 <mem_save_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	26 c0       	rjmp	.+76     	; 0x23a8 <mem_save_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = dark_menu_parameters_len();
    235c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <dark_menu_parameters_len>
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2364:	88 e0       	ldi	r24, 0x08	; 8
    2366:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = dark_menu_parameters_len();
		#else
		len = 0;
		#endif
        break;
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <mem_save_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    236a:	22 e0       	ldi	r18, 0x02	; 2
    236c:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2372:	c8 2f       	mov	r28, r24
    2374:	7c 01       	movw	r14, r24
    2376:	e2 0e       	add	r14, r18
    2378:	f3 1e       	adc	r15, r19
    237a:	99 27       	eor	r25, r25
    237c:	8e 15       	cp	r24, r14
    237e:	9f 05       	cpc	r25, r15
    2380:	cc f4       	brge	.+50     	; 0x23b4 <mem_save_data+0x84>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2382:	f8 01       	movw	r30, r16
    2384:	61 91       	ld	r22, Z+
    2386:	8f 01       	movw	r16, r30
    2388:	8c 2f       	mov	r24, r28
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 30 0c 	call	0x1860	; 0x1860 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2390:	cf 5f       	subi	r28, 0xFF	; 255
    2392:	8c 2f       	mov	r24, r28
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	8e 15       	cp	r24, r14
    2398:	9f 05       	cpc	r25, r15
    239a:	9c f3       	brlt	.-26     	; 0x2382 <mem_save_data+0x52>
    239c:	0b c0       	rjmp	.+22     	; 0x23b4 <mem_save_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <mem_save_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    23a4:	86 e0       	ldi	r24, 0x06	; 6
    23a6:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    23a8:	c8 2f       	mov	r28, r24
    23aa:	7c 01       	movw	r14, r24
    23ac:	f2 e0       	ldi	r31, 0x02	; 2
    23ae:	ef 0e       	add	r14, r31
    23b0:	f1 1c       	adc	r15, r1
    23b2:	e7 cf       	rjmp	.-50     	; 0x2382 <mem_save_data+0x52>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	08 95       	ret

000023c0 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    23cc:	82 30       	cpi	r24, 0x02	; 2
    23ce:	59 f0       	breq	.+22     	; 0x23e6 <mem_read_data+0x26>
    23d0:	28 f4       	brcc	.+10     	; 0x23dc <mem_read_data+0x1c>
    23d2:	88 23       	and	r24, r24
    23d4:	91 f0       	breq	.+36     	; 0x23fa <mem_read_data+0x3a>
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	51 f1       	breq	.+84     	; 0x242e <mem_read_data+0x6e>
    23da:	34 c0       	rjmp	.+104    	; 0x2444 <mem_read_data+0x84>
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	51 f1       	breq	.+84     	; 0x2434 <mem_read_data+0x74>
    23e0:	84 30       	cpi	r24, 0x04	; 4
    23e2:	21 f0       	breq	.+8      	; 0x23ec <mem_read_data+0x2c>
    23e4:	2f c0       	rjmp	.+94     	; 0x2444 <mem_read_data+0x84>
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	26 c0       	rjmp	.+76     	; 0x2438 <mem_read_data+0x78>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        #if DARK_MENU
        len = dark_menu_parameters_len();
    23ec:	0e 94 5e 06 	call	0xcbc	; 0xcbc <dark_menu_parameters_len>
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    23f4:	88 e0       	ldi	r24, 0x08	; 8
    23f6:	90 e0       	ldi	r25, 0x00	; 0
        #if DARK_MENU
        len = dark_menu_parameters_len();
        #else
        len = 0;
        #endif
        break;
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <mem_read_data+0x42>
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
    23fa:	22 e0       	ldi	r18, 0x02	; 2
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    {
        case MEM_PROGRAM_1:
        offset = 0;
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2402:	c8 2f       	mov	r28, r24
    2404:	7c 01       	movw	r14, r24
    2406:	e2 0e       	add	r14, r18
    2408:	f3 1e       	adc	r15, r19
    240a:	99 27       	eor	r25, r25
    240c:	8e 15       	cp	r24, r14
    240e:	9f 05       	cpc	r25, r15
    2410:	cc f4       	brge	.+50     	; 0x2444 <mem_read_data+0x84>
	{
		*data_pnt = EEPROM_read(byte_n);
    2412:	8c 2f       	mov	r24, r28
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 38 0c 	call	0x1870	; 0x1870 <EEPROM_read>
    241a:	f8 01       	movw	r30, r16
    241c:	81 93       	st	Z+, r24
    241e:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2420:	cf 5f       	subi	r28, 0xFF	; 255
    2422:	8c 2f       	mov	r24, r28
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	8e 15       	cp	r24, r14
    2428:	9f 05       	cpc	r25, r15
    242a:	9c f3       	brlt	.-26     	; 0x2412 <mem_read_data+0x52>
    242c:	0b c0       	rjmp	.+22     	; 0x2444 <mem_read_data+0x84>
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <mem_read_data+0x78>
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    2434:	86 e0       	ldi	r24, 0x06	; 6
    2436:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2438:	c8 2f       	mov	r28, r24
    243a:	7c 01       	movw	r14, r24
    243c:	f2 e0       	ldi	r31, 0x02	; 2
    243e:	ef 0e       	add	r14, r31
    2440:	f1 1c       	adc	r15, r1
    2442:	e7 cf       	rjmp	.-50     	; 0x2412 <mem_read_data+0x52>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <servo_set_pwm_val>:
	//OCR1B = pwm;
}

void servo_set_pwm_val(uint8_t value)
{
	if (value == 0)
    2450:	81 11       	cpse	r24, r1
    2452:	05 c0       	rjmp	.+10     	; 0x245e <servo_set_pwm_val+0xe>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2454:	8c e6       	ldi	r24, 0x6C	; 108
    2456:	97 e0       	ldi	r25, 0x07	; 7
    2458:	9b bd       	out	0x2b, r25	; 43
    245a:	8a bd       	out	0x2a, r24	; 42
    245c:	08 95       	ret

void servo_set_pwm_val(uint8_t value)
{
	if (value == 0)
	set_pwm(1900);
	else if(value < 50)
    245e:	82 33       	cpi	r24, 0x32	; 50
    2460:	98 f4       	brcc	.+38     	; 0x2488 <servo_set_pwm_val+0x38>
	set_pwm(1800 - (value - 10)*7);
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0a 97       	sbiw	r24, 0x0a	; 10
    2466:	22 27       	eor	r18, r18
    2468:	33 27       	eor	r19, r19
    246a:	28 1b       	sub	r18, r24
    246c:	39 0b       	sbc	r19, r25
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	88 5f       	subi	r24, 0xF8	; 248
    2480:	98 4f       	sbci	r25, 0xF8	; 248
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2482:	9b bd       	out	0x2b, r25	; 43
    2484:	8a bd       	out	0x2a, r24	; 42
    2486:	08 95       	ret
{
	if (value == 0)
	set_pwm(1900);
	else if(value < 50)
	set_pwm(1800 - (value - 10)*7);
	else if(value <= 99)
    2488:	84 36       	cpi	r24, 0x64	; 100
    248a:	70 f4       	brcc	.+28     	; 0x24a8 <servo_set_pwm_val+0x58>
	set_pwm(1450 - (value - 50)*5);
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	22 53       	subi	r18, 0x32	; 50
    2492:	31 09       	sbc	r19, r1
    2494:	4b ef       	ldi	r20, 0xFB	; 251
    2496:	42 03       	mulsu	r20, r18
    2498:	c0 01       	movw	r24, r0
    249a:	43 9f       	mul	r20, r19
    249c:	90 0d       	add	r25, r0
    249e:	11 24       	eor	r1, r1
    24a0:	86 55       	subi	r24, 0x56	; 86
    24a2:	9a 4f       	sbci	r25, 0xFA	; 250
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    24a4:	9b bd       	out	0x2b, r25	; 43
    24a6:	8a bd       	out	0x2a, r24	; 42
    24a8:	08 95       	ret

000024aa <servo_error>:
	set_pwm(1450 - (value - 50)*5);
}

void servo_error(void)
{
	CLOSE_SERVO;
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
	LED_SERVO_OFF;
    24b0:	96 98       	cbi	0x12, 6	; 18
	servoD.state = SERVO_ERROR_PROCESS;
    24b2:	85 e0       	ldi	r24, 0x05	; 5
    24b4:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <servoD>
    24b8:	08 95       	ret

000024ba <servo_init>:
	}
}


void servo_init(uint8_t prescaler)
{
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
	(void) prescaler;
	#if !TEST_APP
	ICR1 = 19999;
    24be:	2f e1       	ldi	r18, 0x1F	; 31
    24c0:	3e e4       	ldi	r19, 0x4E	; 78
    24c2:	37 bd       	out	0x27, r19	; 39
    24c4:	26 bd       	out	0x26, r18	; 38
	DDRD |= (1 << 4) | (1<<5); //?????????? TO DO
    24c6:	81 b3       	in	r24, 0x11	; 17
    24c8:	80 63       	ori	r24, 0x30	; 48
    24ca:	81 bb       	out	0x11, r24	; 17
	// set TOP to 16bit
	OCR1B = 0x0;
    24cc:	19 bc       	out	0x29, r1	; 41
    24ce:	18 bc       	out	0x28, r1	; 40
	OCR1A = 0x0;
    24d0:	1b bc       	out	0x2b, r1	; 43
    24d2:	1a bc       	out	0x2a, r1	; 42
	TCCR1A |= (1 << WGM11);
    24d4:	8f b5       	in	r24, 0x2f	; 47
    24d6:	82 60       	ori	r24, 0x02	; 2
    24d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
    24da:	8e b5       	in	r24, 0x2e	; 46
    24dc:	88 61       	ori	r24, 0x18	; 24
    24de:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
    24e0:	8f b5       	in	r24, 0x2f	; 47
    24e2:	80 68       	ori	r24, 0x80	; 128
    24e4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
    24e6:	8e b5       	in	r24, 0x2e	; 46
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	8e bd       	out	0x2e, r24	; 46
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    24ec:	3b bd       	out	0x2b, r19	; 43
    24ee:	2a bd       	out	0x2a, r18	; 42
	TCCR1A |= (1 << WGM11);
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
	TCCR1A |=  (1<<COM1A1); //(1 << COM1B1) |
	TCCR1B |= (1<<CS11);
	set_pwm(19999);
	LED_SERVO_OFF;
    24f0:	96 98       	cbi	0x12, 6	; 18
	#endif
	servoD.state = SERVO_CLOSE;
    24f2:	c3 e3       	ldi	r28, 0x33	; 51
    24f4:	d6 e0       	ldi	r29, 0x06	; 6
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	88 83       	st	Y, r24
	servoD.value = 0;
    24fa:	1b 82       	std	Y+3, r1	; 0x03
	evTime_init(&servoD.timeout);
    24fc:	87 e3       	ldi	r24, 0x37	; 55
    24fe:	96 e0       	ldi	r25, 0x06	; 6
    2500:	0e 94 16 18 	call	0x302c	; 0x302c <evTime_init>
	servoD.try_cnt = 0;
    2504:	19 86       	std	Y+9, r1	; 0x09
	try_count = 0;
    2506:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <try_count>
	debug_msg("SERVO: init\n");
    250a:	80 e4       	ldi	r24, 0x40	; 64
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	9f 93       	push	r25
    2510:	8f 93       	push	r24
    2512:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <servo_is_open>:

int servo_is_open(void)
{
	return servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN;
    2520:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <servoD>
    2524:	92 50       	subi	r25, 0x02	; 2
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	92 30       	cpi	r25, 0x02	; 2
    252c:	10 f0       	brcs	.+4      	; 0x2532 <servo_is_open+0x12>
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
}
    2532:	c9 01       	movw	r24, r18
    2534:	08 95       	ret

00002536 <servo_delayed_open>:

int servo_delayed_open(uint8_t value)
{
	if (servoD.state == SERVO_CLOSE)
    2536:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <servoD>
    253a:	91 30       	cpi	r25, 0x01	; 1
    253c:	a1 f4       	brne	.+40     	; 0x2566 <servo_delayed_open+0x30>
	{
		servoD.state = SERVO_DELAYED_OPEN;
    253e:	e3 e3       	ldi	r30, 0x33	; 51
    2540:	f6 e0       	ldi	r31, 0x06	; 6
    2542:	93 e0       	ldi	r25, 0x03	; 3
    2544:	90 83       	st	Z, r25
		servoD.value = value;
    2546:	83 83       	std	Z+3, r24	; 0x03
		debug_msg("SERVO_DELAYED_OPEN %d\n", value);
    2548:	1f 92       	push	r1
    254a:	8f 93       	push	r24
    254c:	8d e4       	ldi	r24, 0x4D	; 77
    254e:	93 e0       	ldi	r25, 0x03	; 3
    2550:	9f 93       	push	r25
    2552:	8f 93       	push	r24
    2554:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		return 1;
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	08 95       	ret
	else if (servoD.state == SERVO_TRY)
	{
		servo_exit_try();
		return 1;
	}*/
	else return 0;
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
}
    256a:	08 95       	ret

0000256c <servo_enable_try>:
	else return 0;
}

void servo_enable_try(void)
{
	if (servoD.state == SERVO_OPEN || servoD.state == SERVO_CLOSE)
    256c:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <servoD>
    2570:	9f ef       	ldi	r25, 0xFF	; 255
    2572:	98 0f       	add	r25, r24
    2574:	92 30       	cpi	r25, 0x02	; 2
    2576:	28 f4       	brcc	.+10     	; 0x2582 <servo_enable_try+0x16>
	{
		servoD.last_state = servoD.state;
    2578:	e3 e3       	ldi	r30, 0x33	; 51
    257a:	f6 e0       	ldi	r31, 0x06	; 6
    257c:	81 83       	std	Z+1, r24	; 0x01
		servoD.state = SERVO_TRY;
    257e:	84 e0       	ldi	r24, 0x04	; 4
    2580:	80 83       	st	Z, r24
    2582:	08 95       	ret

00002584 <servo_get_try_cnt>:
	}
}

int servo_get_try_cnt(void)
{
	return servoD.try_cnt;
    2584:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <servoD+0x9>
}
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	08 95       	ret

0000258c <servo_close>:

int servo_close(void)
{
	if (servo_is_open())
    258c:	0e 94 90 12 	call	0x2520	; 0x2520 <servo_is_open>
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	d1 f0       	breq	.+52     	; 0x25c8 <servo_close+0x3c>
	{
		servo_set_pwm_val((uint16_t)0);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
		servoD.state = SERVO_CLOSE;
    259a:	e3 e3       	ldi	r30, 0x33	; 51
    259c:	f6 e0       	ldi	r31, 0x06	; 6
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 83       	st	Z, r24
		servoD.value = 0;
    25a2:	13 82       	std	Z+3, r1	; 0x03
		debug_msg("SERVO_CLOSED %d\n", servoD.value);
    25a4:	1f 92       	push	r1
    25a6:	1f 92       	push	r1
    25a8:	84 e6       	ldi	r24, 0x64	; 100
    25aa:	93 e0       	ldi	r25, 0x03	; 3
    25ac:	9f 93       	push	r25
    25ae:	8f 93       	push	r24
    25b0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_OFF;
    25b4:	96 98       	cbi	0x12, 6	; 18
		error_servo_timer();
    25b6:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
		return 1;
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	08 95       	ret
	}
	else if (servoD.state == SERVO_TRY)
    25c8:	20 91 33 06 	lds	r18, 0x0633	; 0x800633 <servoD>
    25cc:	24 30       	cpi	r18, 0x04	; 4
    25ce:	31 f4       	brne	.+12     	; 0x25dc <servo_close+0x50>
	{
		servo_exit_try();
    25d0:	0e 94 ef 12 	call	0x25de	; 0x25de <servo_exit_try>
		error_servo_timer();
    25d4:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
		return 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    25dc:	08 95       	ret

000025de <servo_exit_try>:

}

static void servo_exit_try(void)
{
	if (servoD.last_state == SERVO_OPEN)
    25de:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <servoD+0x1>
    25e2:	82 30       	cpi	r24, 0x02	; 2
    25e4:	29 f4       	brne	.+10     	; 0x25f0 <servo_exit_try+0x12>
	{
		servoD.state = SERVO_OPEN;
    25e6:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <servoD>
		servo_close();
    25ea:	0e 94 c6 12 	call	0x258c	; 0x258c <servo_close>
    25ee:	09 c0       	rjmp	.+18     	; 0x2602 <servo_exit_try+0x24>
	}
	else if ((servoD.last_state == SERVO_CLOSE))
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	71 f4       	brne	.+28     	; 0x2610 <servo_exit_try+0x32>
	{
		servoD.state = SERVO_OPEN;
    25f4:	e3 e3       	ldi	r30, 0x33	; 51
    25f6:	f6 e0       	ldi	r31, 0x06	; 6
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	80 83       	st	Z, r24
		servo_open(servoD.value);
    25fc:	83 81       	ldd	r24, Z+3	; 0x03
    25fe:	0e 94 09 13 	call	0x2612	; 0x2612 <servo_open>
	}
	else return;
	try_count = 0;
    2602:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <try_count>
	servoD.try_cnt++;
    2606:	e3 e3       	ldi	r30, 0x33	; 51
    2608:	f6 e0       	ldi	r31, 0x06	; 6
    260a:	81 85       	ldd	r24, Z+9	; 0x09
    260c:	8f 5f       	subi	r24, 0xFF	; 255
    260e:	81 87       	std	Z+9, r24	; 0x09
    2610:	08 95       	ret

00002612 <servo_open>:
	}*/
	else return 0;
}

int servo_open(uint8_t value) // value - 0-100%
{
    2612:	cf 93       	push	r28
    2614:	c8 2f       	mov	r28, r24
	if (servoD.state == SERVO_CLOSE || servoD.state == SERVO_OPEN || servoD.state == SERVO_DELAYED_OPEN)
    2616:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <servoD>
    261a:	9f ef       	ldi	r25, 0xFF	; 255
    261c:	98 0f       	add	r25, r24
    261e:	93 30       	cpi	r25, 0x03	; 3
    2620:	d0 f4       	brcc	.+52     	; 0x2656 <servo_open+0x44>
	{
		servoD.state = SERVO_OPEN;
    2622:	e3 e3       	ldi	r30, 0x33	; 51
    2624:	f6 e0       	ldi	r31, 0x06	; 6
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	80 83       	st	Z, r24
		servoD.value = value;
    262a:	c3 83       	std	Z+3, r28	; 0x03
		servo_set_pwm_val((uint16_t)value);
    262c:	8c 2f       	mov	r24, r28
    262e:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
		debug_msg("SERVO_OPPENED %d\n", value);
    2632:	1f 92       	push	r1
    2634:	cf 93       	push	r28
    2636:	85 e7       	ldi	r24, 0x75	; 117
    2638:	93 e0       	ldi	r25, 0x03	; 3
    263a:	9f 93       	push	r25
    263c:	8f 93       	push	r24
    263e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
		LED_SERVO_ON;
    2642:	96 9a       	sbi	0x12, 6	; 18
		error_servo_timer();
    2644:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
		return 1;
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0b c0       	rjmp	.+22     	; 0x266c <servo_open+0x5a>
	}
	else if (servoD.state == SERVO_TRY)
    2656:	84 30       	cpi	r24, 0x04	; 4
    2658:	39 f4       	brne	.+14     	; 0x2668 <servo_open+0x56>
	{
		servo_exit_try();
    265a:	0e 94 ef 12 	call	0x25de	; 0x25de <servo_exit_try>
		error_servo_timer();
    265e:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
		return 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 c0       	rjmp	.+4      	; 0x266c <servo_open+0x5a>
	}
	else return 0;
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
}
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <servo_try_reset_timeout>:
	return 0;
}


void servo_try_reset_timeout(uint32_t time_ms)
{
    2670:	ab 01       	movw	r20, r22
    2672:	bc 01       	movw	r22, r24
	evTime_start(&servoD.timeout, time_ms);
    2674:	87 e3       	ldi	r24, 0x37	; 55
    2676:	96 e0       	ldi	r25, 0x06	; 6
    2678:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
    267c:	08 95       	ret

0000267e <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    2684:	4b e4       	ldi	r20, 0x4B	; 75
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	86 e8       	ldi	r24, 0x86	; 134
    268e:	94 e0       	ldi	r25, 0x04	; 4
    2690:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <evTime_process_period>
    2694:	89 2b       	or	r24, r25
    2696:	09 f4       	brne	.+2      	; 0x269a <servo_process+0x1c>
    2698:	b8 c0       	rjmp	.+368    	; 0x280a <servo_process+0x18c>
	{
		switch(servoD.state)
    269a:	80 91 33 06 	lds	r24, 0x0633	; 0x800633 <servoD>
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	a1 f0       	breq	.+40     	; 0x26ca <servo_process+0x4c>
    26a2:	30 f4       	brcc	.+12     	; 0x26b0 <servo_process+0x32>
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	59 f0       	breq	.+22     	; 0x26be <servo_process+0x40>
    26a8:	83 30       	cpi	r24, 0x03	; 3
    26aa:	09 f4       	brne	.+2      	; 0x26ae <servo_process+0x30>
    26ac:	63 c0       	rjmp	.+198    	; 0x2774 <servo_process+0xf6>
    26ae:	9d c0       	rjmp	.+314    	; 0x27ea <servo_process+0x16c>
    26b0:	85 30       	cpi	r24, 0x05	; 5
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <servo_process+0x38>
    26b4:	79 c0       	rjmp	.+242    	; 0x27a8 <servo_process+0x12a>
    26b6:	86 30       	cpi	r24, 0x06	; 6
    26b8:	09 f4       	brne	.+2      	; 0x26bc <servo_process+0x3e>
    26ba:	93 c0       	rjmp	.+294    	; 0x27e2 <servo_process+0x164>
    26bc:	96 c0       	rjmp	.+300    	; 0x27ea <servo_process+0x16c>
		{
			case SERVO_OPEN:
			servoD.value = value;
    26be:	c0 93 36 06 	sts	0x0636, r28	; 0x800636 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    26c2:	8c 2f       	mov	r24, r28
    26c4:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
			break;
    26c8:	90 c0       	rjmp	.+288    	; 0x27ea <servo_process+0x16c>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    26ca:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <try_count>
    26ce:	81 11       	cpse	r24, r1
    26d0:	13 c0       	rjmp	.+38     	; 0x26f8 <servo_process+0x7a>
	{
		evTime_start(&timeout, 250);
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	81 e8       	ldi	r24, 0x81	; 129
    26dc:	94 e0       	ldi	r25, 0x04	; 4
    26de:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
		try_count++;
    26e2:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <try_count>
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    26ec:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <servoD+0x3>
    26f0:	89 0f       	add	r24, r25
    26f2:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
    26f6:	2a c0       	rjmp	.+84     	; 0x274c <servo_process+0xce>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    26f8:	81 50       	subi	r24, 0x01	; 1
    26fa:	89 30       	cpi	r24, 0x09	; 9
    26fc:	d8 f4       	brcc	.+54     	; 0x2734 <servo_process+0xb6>
	{
		if (evTime_check(&timeout) == 1)
    26fe:	81 e8       	ldi	r24, 0x81	; 129
    2700:	94 e0       	ldi	r25, 0x04	; 4
    2702:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	09 f5       	brne	.+66     	; 0x274c <servo_process+0xce>
		{
			evTime_start(&timeout, 250);
    270a:	4a ef       	ldi	r20, 0xFA	; 250
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	70 e0       	ldi	r23, 0x00	; 0
    2712:	81 e8       	ldi	r24, 0x81	; 129
    2714:	94 e0       	ldi	r25, 0x04	; 4
    2716:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
			try_count++;
    271a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <try_count>
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <try_count>
			servo_set_pwm_val(servoD.value + try_count*4);
    2724:	88 0f       	add	r24, r24
    2726:	88 0f       	add	r24, r24
    2728:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <servoD+0x3>
    272c:	89 0f       	add	r24, r25
    272e:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
    2732:	0c c0       	rjmp	.+24     	; 0x274c <servo_process+0xce>
		}
	}
	else
	{
		try_count = 0;
    2734:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <try_count>
		servo_set_pwm_val(servoD.value);
    2738:	c3 e3       	ldi	r28, 0x33	; 51
    273a:	d6 e0       	ldi	r29, 0x06	; 6
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	0e 94 28 12 	call	0x2450	; 0x2450 <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	8f 5f       	subi	r24, 0xFF	; 255
    274a:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    274c:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <servoD+0x3>
    2750:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <try_count>
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	82 0f       	add	r24, r18
    2758:	91 1d       	adc	r25, r1
    275a:	9f 93       	push	r25
    275c:	8f 93       	push	r24
    275e:	87 e8       	ldi	r24, 0x87	; 135
    2760:	93 e0       	ldi	r25, 0x03	; 3
    2762:	9f 93       	push	r25
    2764:	8f 93       	push	r24
    2766:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	3b c0       	rjmp	.+118    	; 0x27ea <servo_process+0x16c>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2774:	8c e7       	ldi	r24, 0x7C	; 124
    2776:	94 e0       	ldi	r25, 0x04	; 4
    2778:	0e 94 36 18 	call	0x306c	; 0x306c <evTime_is_stated>
    277c:	89 2b       	or	r24, r25
    277e:	59 f0       	breq	.+22     	; 0x2796 <servo_process+0x118>
	{
		if (evTime_check(&timeout) == 1)
    2780:	8c e7       	ldi	r24, 0x7C	; 124
    2782:	94 e0       	ldi	r25, 0x04	; 4
    2784:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	79 f5       	brne	.+94     	; 0x27ea <servo_process+0x16c>
		{
			servoD.state = SERVO_OPEN;
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <servoD>
			LED_SERVO_ON;
    2792:	96 9a       	sbi	0x12, 6	; 18
    2794:	2a c0       	rjmp	.+84     	; 0x27ea <servo_process+0x16c>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2796:	40 ed       	ldi	r20, 0xD0	; 208
    2798:	57 e0       	ldi	r21, 0x07	; 7
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	8c e7       	ldi	r24, 0x7C	; 124
    27a0:	94 e0       	ldi	r25, 0x04	; 4
    27a2:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
    27a6:	21 c0       	rjmp	.+66     	; 0x27ea <servo_process+0x16c>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    27a8:	87 e7       	ldi	r24, 0x77	; 119
    27aa:	94 e0       	ldi	r25, 0x04	; 4
    27ac:	0e 94 36 18 	call	0x306c	; 0x306c <evTime_is_stated>
    27b0:	89 2b       	or	r24, r25
    27b2:	71 f0       	breq	.+28     	; 0x27d0 <servo_process+0x152>
	{
		if (evTime_check(&timeout) == 1)
    27b4:	87 e7       	ldi	r24, 0x77	; 119
    27b6:	94 e0       	ldi	r25, 0x04	; 4
    27b8:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	a9 f4       	brne	.+42     	; 0x27ea <servo_process+0x16c>
		{
			servoD.state = SERVO_ERROR;
    27c0:	86 e0       	ldi	r24, 0x06	; 6
    27c2:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    27c6:	8f e1       	ldi	r24, 0x1F	; 31
    27c8:	9e e4       	ldi	r25, 0x4E	; 78
    27ca:	9b bd       	out	0x2b, r25	; 43
    27cc:	8a bd       	out	0x2a, r24	; 42
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <servo_process+0x16c>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 3500);
    27d0:	4c ea       	ldi	r20, 0xAC	; 172
    27d2:	5d e0       	ldi	r21, 0x0D	; 13
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	87 e7       	ldi	r24, 0x77	; 119
    27da:	94 e0       	ldi	r25, 0x04	; 4
    27dc:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <servo_process+0x16c>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    27e2:	8f e1       	ldi	r24, 0x1F	; 31
    27e4:	9e e4       	ldi	r25, 0x4E	; 78
    27e6:	9b bd       	out	0x2b, r25	; 43
    27e8:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    27ea:	87 e3       	ldi	r24, 0x37	; 55
    27ec:	96 e0       	ldi	r25, 0x06	; 6
    27ee:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	51 f4       	brne	.+20     	; 0x280a <servo_process+0x18c>
		{
			servoD.try_cnt = 0;
    27f6:	10 92 3c 06 	sts	0x063C, r1	; 0x80063c <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    27fa:	85 e9       	ldi	r24, 0x95	; 149
    27fc:	93 e0       	ldi	r25, 0x03	; 3
    27fe:	9f 93       	push	r25
    2800:	8f 93       	push	r24
    2802:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
		}
	}
}
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	08 95       	ret

00002810 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2810:	e1 ed       	ldi	r30, 0xD1	; 209
    2812:	f5 e0       	ldi	r31, 0x05	; 5
    2814:	16 86       	std	Z+14, r1	; 0x0e
    2816:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    2818:	12 86       	std	Z+10, r1	; 0x0a
    281a:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    281c:	14 86       	std	Z+12, r1	; 0x0c
    281e:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2820:	e4 ea       	ldi	r30, 0xA4	; 164
    2822:	f5 e0       	ldi	r31, 0x05	; 5
    2824:	16 86       	std	Z+14, r1	; 0x0e
    2826:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    2828:	12 86       	std	Z+10, r1	; 0x0a
    282a:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    282c:	14 86       	std	Z+12, r1	; 0x0c
    282e:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2830:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <button3+0xc>
    2834:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <button3+0xb>
	
	button5.timer_callback = 0;
    2838:	e2 e8       	ldi	r30, 0x82	; 130
    283a:	f5 e0       	ldi	r31, 0x05	; 5
    283c:	16 86       	std	Z+14, r1	; 0x0e
    283e:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2840:	14 86       	std	Z+12, r1	; 0x0c
    2842:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2844:	12 86       	std	Z+10, r1	; 0x0a
    2846:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    2848:	e2 ec       	ldi	r30, 0xC2	; 194
    284a:	f5 e0       	ldi	r31, 0x05	; 5
    284c:	16 86       	std	Z+14, r1	; 0x0e
    284e:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2850:	14 86       	std	Z+12, r1	; 0x0c
    2852:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2854:	12 86       	std	Z+10, r1	; 0x0a
    2856:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    2858:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <button7+0xc>
    285c:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <button7+0xb>
	
	button8.fall_callback = 0;
    2860:	ef ee       	ldi	r30, 0xEF	; 239
    2862:	f5 e0       	ldi	r31, 0x05	; 5
    2864:	14 86       	std	Z+12, r1	; 0x0c
    2866:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    2868:	16 86       	std	Z+14, r1	; 0x0e
    286a:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    286c:	12 86       	std	Z+10, r1	; 0x0a
    286e:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2870:	e4 e6       	ldi	r30, 0x64	; 100
    2872:	f5 e0       	ldi	r31, 0x05	; 5
    2874:	14 86       	std	Z+12, r1	; 0x0c
    2876:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    2878:	16 86       	std	Z+14, r1	; 0x0e
    287a:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    287c:	12 86       	std	Z+10, r1	; 0x0a
    287e:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2880:	e3 e7       	ldi	r30, 0x73	; 115
    2882:	f5 e0       	ldi	r31, 0x05	; 5
    2884:	14 86       	std	Z+12, r1	; 0x0c
    2886:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    2888:	16 86       	std	Z+14, r1	; 0x0e
    288a:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    288c:	12 86       	std	Z+10, r1	; 0x0a
    288e:	11 86       	std	Z+9, r1	; 0x09
    2890:	08 95       	ret

00002892 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2892:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	49 f0       	breq	.+18     	; 0x28ac <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    289a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    289e:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    28a2:	98 60       	ori	r25, 0x08	; 8
    28a4:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    28a8:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    28ac:	08 95       	ret

000028ae <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    28ae:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	49 f0       	breq	.+18     	; 0x28c8 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    28b6:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    28ba:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    28be:	80 68       	ori	r24, 0x80	; 128
    28c0:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    28c4:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    28c8:	08 95       	ret

000028ca <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    28ca:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    28ce:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    28d2:	92 60       	ori	r25, 0x02	; 2
    28d4:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    28d8:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    28dc:	08 95       	ret

000028de <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    28de:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    28e2:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    28e6:	99 7f       	andi	r25, 0xF9	; 249
    28e8:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    28ec:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	counter_very_fast_motor_sub = 0;
    28f0:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <counter_very_fast_motor_sub>
    28f4:	08 95       	ret

000028f6 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    28f6:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    28fa:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    28fe:	80 62       	ori	r24, 0x20	; 32
    2900:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2904:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    2908:	08 95       	ret

0000290a <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    290a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    290e:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2912:	8f 79       	andi	r24, 0x9F	; 159
    2914:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2918:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	counter_very_fast_motor_sub = 0;
    291c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <counter_very_fast_motor_sub>
    2920:	08 95       	ret

00002922 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2922:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2926:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    292a:	90 62       	ori	r25, 0x20	; 32
    292c:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2930:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2934:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2938:	8b 30       	cpi	r24, 0x0B	; 11
    293a:	18 f0       	brcs	.+6      	; 0x2942 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2942:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2954:	08 95       	ret

00002956 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2956:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    295a:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    295e:	90 62       	ori	r25, 0x20	; 32
    2960:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2964:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	if (motor_value > 10)
    2968:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <motor_value>
    296c:	8b 30       	cpi	r24, 0x0B	; 11
    296e:	18 f0       	brcs	.+6      	; 0x2976 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2970:	81 50       	subi	r24, 0x01	; 1
    2972:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2976:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    2986:	02 97       	sbiw	r24, 0x02	; 2
    2988:	29 f4       	brne	.+10     	; 0x2994 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    298a:	61 e0       	ldi	r22, 0x01	; 1
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2992:	04 c0       	rjmp	.+8      	; 0x299c <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2994:	61 e0       	ldi	r22, 0x01	; 1
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	state_measure_volt++;
    299c:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <state_measure_volt>
	if (state_measure_volt == 2)
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	19 f4       	brne	.+6      	; 0x29b0 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    29aa:	66 e0       	ldi	r22, 0x06	; 6
    29ac:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    29b0:	08 95       	ret

000029b2 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    29b2:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    29b6:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    29ba:	90 62       	ori	r25, 0x20	; 32
    29bc:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    29c0:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	if (motor_value < 99)
    29c4:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <motor_value>
    29c8:	83 36       	cpi	r24, 0x63	; 99
    29ca:	18 f4       	brcc	.+6      	; 0x29d2 <button_motor_add_fall_cb+0x20>
		motor_value++;
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    29d2:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    29e2:	02 97       	sbiw	r24, 0x02	; 2
    29e4:	29 f4       	brne	.+10     	; 0x29f0 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    29ee:	04 c0       	rjmp	.+8      	; 0x29f8 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	state_measure_volt++;
    29f8:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <state_measure_volt>
	if (state_measure_volt == 2)
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	19 f4       	brne	.+6      	; 0x2a0c <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2a06:	66 e0       	ldi	r22, 0x06	; 6
    2a08:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a0c:	08 95       	ret

00002a0e <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2a0e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2a12:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2a16:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2a1a:	97 7e       	andi	r25, 0xE7	; 231
    2a1c:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2a20:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	counter_very_fast_motor_sub = 0;
    2a24:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2a28:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    2a2c:	88 23       	and	r24, r24
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2a30:	81 50       	subi	r24, 0x01	; 1
    2a32:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    2a3c:	02 97       	sbiw	r24, 0x02	; 2
    2a3e:	29 f4       	brne	.+10     	; 0x2a4a <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a48:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a52:	08 95       	ret

00002a54 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2a54:	0e 94 e6 09 	call	0x13cc	; 0x13cc <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2a58:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2a5c:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2a60:	8f 77       	andi	r24, 0x7F	; 127
    2a62:	9e 7f       	andi	r25, 0xFE	; 254
    2a64:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2a68:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	counter_very_fast_motor_sub = 0;
    2a6c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2a70:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <state_measure_volt>
    2a74:	88 23       	and	r24, r24
    2a76:	19 f0       	breq	.+6      	; 0x2a7e <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2a78:	81 50       	subi	r24, 0x01	; 1
    2a7a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 d6 09 	call	0x13ac	; 0x13ac <disp_get_state>
    2a84:	02 97       	sbiw	r24, 0x02	; 2
    2a86:	29 f4       	brne	.+10     	; 0x2a92 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a90:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2a9a:	08 95       	ret

00002a9c <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a9c:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2aa0:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2aa4:	90 62       	ori	r25, 0x20	; 32
    2aa6:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2aaa:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2aae:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2ab2:	83 36       	cpi	r24, 0x63	; 99
    2ab4:	28 f4       	brcc	.+10     	; 0x2ac0 <b_servo_vibro_add_fall+0x24>
	{
		servo_vibro_value++;
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <servo_vibro_value>
		error_servo_timer();
    2abc:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
	}
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2ac0:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
    2ad2:	08 95       	ret

00002ad4 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2ad4:	ef e3       	ldi	r30, 0x3F	; 63
    2ad6:	f6 e0       	ldi	r31, 0x06	; 6
    2ad8:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <motor_value>
    2adc:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2ade:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2ae2:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2ae4:	bf 01       	movw	r22, r30
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	0e 94 98 11 	call	0x2330	; 0x2330 <mem_save_data>
    2aec:	08 95       	ret

00002aee <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2aee:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2af2:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2af6:	90 62       	ori	r25, 0x20	; 32
    2af8:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2afc:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	if (motor_value < 10)
    2b00:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <motor_value>
    2b04:	8a 30       	cpi	r24, 0x0A	; 10
    2b06:	38 f4       	brcc	.+14     	; 0x2b16 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    2b08:	8a e0       	ldi	r24, 0x0A	; 10
    2b0a:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2b0e:	6a e0       	ldi	r22, 0x0A	; 10
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	}
	sys_save_display();
    2b16:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sys_save_display>
	if(!dcmotor_is_on())
    2b1a:	0e 94 6f 07 	call	0xede	; 0xede <dcmotor_is_on>
    2b1e:	89 2b       	or	r24, r25
    2b20:	39 f4       	brne	.+14     	; 0x2b30 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2b22:	0e 94 92 07 	call	0xf24	; 0xf24 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2b26:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2b2a:	0e 94 9b 12 	call	0x2536	; 0x2536 <servo_delayed_open>
    2b2e:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2b30:	0e 94 7a 07 	call	0xef4	; 0xef4 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2b34:	0e 94 c6 12 	call	0x258c	; 0x258c <servo_close>
    2b38:	08 95       	ret

00002b3a <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2b3a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2b3e:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2b42:	90 62       	ori	r25, 0x20	; 32
    2b44:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2b48:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
	if (servo_vibro_value < 10)
    2b4c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2b50:	8a 30       	cpi	r24, 0x0A	; 10
    2b52:	38 f4       	brcc	.+14     	; 0x2b62 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2b54:	8a e0       	ldi	r24, 0x0A	; 10
    2b56:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2b5a:	6a e0       	ldi	r22, 0x0A	; 10
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2b62:	0e 94 90 12 	call	0x2520	; 0x2520 <servo_is_open>
    2b66:	89 2b       	or	r24, r25
    2b68:	19 f0       	breq	.+6      	; 0x2b70 <button_on_off_pwm+0x36>
    2b6a:	0e 94 c6 12 	call	0x258c	; 0x258c <servo_close>
    2b6e:	08 95       	ret
	else servo_open(servo_vibro_value);
    2b70:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2b74:	0e 94 09 13 	call	0x2612	; 0x2612 <servo_open>
    2b78:	08 95       	ret

00002b7a <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2b7a:	86 e6       	ldi	r24, 0x66	; 102
    2b7c:	96 e1       	ldi	r25, 0x16	; 22
    2b7e:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <button4+0xa>
    2b82:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	disp_off_segments();
    2b8e:	0e 94 3d 0a 	call	0x147a	; 0x147a <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2b92:	6d e3       	ldi	r22, 0x3D	; 61
    2b94:	76 e0       	ldi	r23, 0x06	; 6
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2b9c:	80 91 3e 06 	lds	r24, 0x063E	; 0x80063e <mem_last_save+0x1>
    2ba0:	96 ef       	ldi	r25, 0xF6	; 246
    2ba2:	98 0f       	add	r25, r24
    2ba4:	9a 35       	cpi	r25, 0x5A	; 90
    2ba6:	10 f4       	brcc	.+4      	; 0x2bac <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2ba8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2bac:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <mem_last_save>
    2bb0:	96 ef       	ldi	r25, 0xF6	; 246
    2bb2:	98 0f       	add	r25, r24
    2bb4:	9a 35       	cpi	r25, 0x5A	; 90
    2bb6:	10 f4       	brcc	.+4      	; 0x2bbc <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2bb8:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <motor_value>
    2bbc:	08 95       	ret

00002bbe <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2bbe:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2bc2:	42 e0       	ldi	r20, 0x02	; 2
    2bc4:	68 ee       	ldi	r22, 0xE8	; 232
    2bc6:	73 e0       	ldi	r23, 0x03	; 3
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 8f 0b 	call	0x171e	; 0x171e <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2bd0:	0e 94 55 07 	call	0xeaa	; 0xeaa <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <servo_init>
	#endif
	error_init();
    2bda:	0e 94 57 0c 	call	0x18ae	; 0x18ae <error_init>
	init_measure();
    2bde:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <init_measure>
	init_buzzer();
    2be2:	0e 94 58 05 	call	0xab0	; 0xab0 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2bee:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2bf2:	e1 ed       	ldi	r30, 0xD1	; 209
    2bf4:	f5 e0       	ldi	r31, 0x05	; 5
    2bf6:	89 e4       	ldi	r24, 0x49	; 73
    2bf8:	94 e1       	ldi	r25, 0x14	; 20
    2bfa:	96 87       	std	Z+14, r25	; 0x0e
    2bfc:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2bfe:	8b ea       	ldi	r24, 0xAB	; 171
    2c00:	94 e1       	ldi	r25, 0x14	; 20
    2c02:	94 87       	std	Z+12, r25	; 0x0c
    2c04:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2c06:	87 e0       	ldi	r24, 0x07	; 7
    2c08:	95 e1       	ldi	r25, 0x15	; 21
    2c0a:	92 87       	std	Z+10, r25	; 0x0a
    2c0c:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2c0e:	e4 ea       	ldi	r30, 0xA4	; 164
    2c10:	f5 e0       	ldi	r31, 0x05	; 5
    2c12:	87 e5       	ldi	r24, 0x57	; 87
    2c14:	94 e1       	ldi	r25, 0x14	; 20
    2c16:	96 87       	std	Z+14, r25	; 0x0e
    2c18:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2c1a:	89 ed       	ldi	r24, 0xD9	; 217
    2c1c:	94 e1       	ldi	r25, 0x14	; 20
    2c1e:	94 87       	std	Z+12, r25	; 0x0c
    2c20:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2c22:	8a e2       	ldi	r24, 0x2A	; 42
    2c24:	95 e1       	ldi	r25, 0x15	; 21
    2c26:	92 87       	std	Z+10, r25	; 0x0a
    2c28:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2c2a:	87 e7       	ldi	r24, 0x77	; 119
    2c2c:	95 e1       	ldi	r25, 0x15	; 21
    2c2e:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <button3+0xc>
    2c32:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2c36:	e2 e8       	ldi	r30, 0x82	; 130
    2c38:	f5 e0       	ldi	r31, 0x05	; 5
    2c3a:	85 e6       	ldi	r24, 0x65	; 101
    2c3c:	94 e1       	ldi	r25, 0x14	; 20
    2c3e:	96 87       	std	Z+14, r25	; 0x0e
    2c40:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2c42:	8f e6       	ldi	r24, 0x6F	; 111
    2c44:	94 e1       	ldi	r25, 0x14	; 20
    2c46:	92 87       	std	Z+10, r25	; 0x0a
    2c48:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2c4a:	81 e9       	ldi	r24, 0x91	; 145
    2c4c:	94 e1       	ldi	r25, 0x14	; 20
    2c4e:	94 87       	std	Z+12, r25	; 0x0c
    2c50:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2c52:	e2 ec       	ldi	r30, 0xC2	; 194
    2c54:	f5 e0       	ldi	r31, 0x05	; 5
    2c56:	8b e7       	ldi	r24, 0x7B	; 123
    2c58:	94 e1       	ldi	r25, 0x14	; 20
    2c5a:	96 87       	std	Z+14, r25	; 0x0e
    2c5c:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2c5e:	85 e8       	ldi	r24, 0x85	; 133
    2c60:	94 e1       	ldi	r25, 0x14	; 20
    2c62:	92 87       	std	Z+10, r25	; 0x0a
    2c64:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2c66:	8e e4       	ldi	r24, 0x4E	; 78
    2c68:	95 e1       	ldi	r25, 0x15	; 21
    2c6a:	94 87       	std	Z+12, r25	; 0x0c
    2c6c:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2c6e:	8d e9       	ldi	r24, 0x9D	; 157
    2c70:	95 e1       	ldi	r25, 0x15	; 21
    2c72:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <button7+0xc>
    2c76:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2c7a:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2c84:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
    2c8e:	08 95       	ret

00002c90 <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2c90:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <state_measure_volt>
	dcmotorpwm_deinit();
    2c94:	0e 94 69 07 	call	0xed2	; 0xed2 <dcmotorpwm_deinit>
	off_button();
    2c98:	0e 94 08 14 	call	0x2810	; 0x2810 <off_button>
	error_deinit();
    2c9c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	#if DARK_MENU
	init_menu();
    2ca0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <init_menu>
	#endif /* DARK_MENU */
	servo_close();
    2ca4:	0e 94 c6 12 	call	0x258c	; 0x258c <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2ca8:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <system_events+0x1>
    2cac:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2cb8:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2cbc:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2cc0:	8e 7f       	andi	r24, 0xFE	; 254
    2cc2:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2cc6:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    2cca:	08 95       	ret

00002ccc <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2ccc:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2cd0:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2cd4:	80 ff       	sbrs	r24, 0
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <button4_toggle_system+0x12>
	{
		off_system();
    2cd8:	0e 94 48 16 	call	0x2c90	; 0x2c90 <off_system>
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2cde:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <on_system>
	}
	ON_BUZZ_SIGNAL;
    2ce2:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2ce6:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2cea:	90 62       	ori	r25, 0x20	; 32
    2cec:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2cf0:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
    2cf4:	08 95       	ret

00002cf6 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2cf6:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    2cfa:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    2cfe:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    2d02:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    2d06:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <disp_fast_timer.2111>
    2d0a:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <disp_fast_timer.2111+0x1>
    2d0e:	a0 91 8e 04 	lds	r26, 0x048E	; 0x80048e <disp_fast_timer.2111+0x2>
    2d12:	b0 91 8f 04 	lds	r27, 0x048F	; 0x80048f <disp_fast_timer.2111+0x3>
    2d16:	84 17       	cp	r24, r20
    2d18:	95 07       	cpc	r25, r21
    2d1a:	a6 07       	cpc	r26, r22
    2d1c:	b7 07       	cpc	r27, r23
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <disp_fast_process+0x2c>
    2d20:	a4 c0       	rjmp	.+328    	; 0x2e6a <disp_fast_process+0x174>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2d22:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2d26:	85 ff       	sbrs	r24, 5
    2d28:	21 c0       	rjmp	.+66     	; 0x2d6c <disp_fast_process+0x76>
    2d2a:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2d2e:	63 36       	cpi	r22, 0x63	; 99
    2d30:	e8 f4       	brcc	.+58     	; 0x2d6c <disp_fast_process+0x76>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2d32:	6b 30       	cpi	r22, 0x0B	; 11
    2d34:	40 f0       	brcs	.+16     	; 0x2d46 <disp_fast_process+0x50>
				dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d36:	6f 5f       	subi	r22, 0xFF	; 255
    2d38:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <servo_vibro_value>
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
				error_servo_timer();
    2d42:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_add++;
    2d46:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <counter_very_fast_servo_add>
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2d50:	8f 30       	cpi	r24, 0x0F	; 15
    2d52:	60 f0       	brcs	.+24     	; 0x2d6c <disp_fast_process+0x76>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2d54:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2d58:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2d5c:	8f 7d       	andi	r24, 0xDF	; 223
    2d5e:	80 64       	ori	r24, 0x40	; 64
    2d60:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2d64:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
				counter_very_fast_servo_add = 0;
    2d68:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2d6c:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2d70:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2d74:	91 ff       	sbrs	r25, 1
    2d76:	21 c0       	rjmp	.+66     	; 0x2dba <disp_fast_process+0xc4>
    2d78:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2d7c:	66 23       	and	r22, r22
    2d7e:	e9 f0       	breq	.+58     	; 0x2dba <disp_fast_process+0xc4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
    2d80:	6b 30       	cpi	r22, 0x0B	; 11
    2d82:	40 f0       	brcs	.+16     	; 0x2d94 <disp_fast_process+0x9e>
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2d84:	61 50       	subi	r22, 0x01	; 1
    2d86:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <servo_vibro_value>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
				error_servo_timer();
    2d90:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
			}
			#endif
			counter_very_fast_servo_sub++;
    2d94:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <counter_very_fast_servo_sub>
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2d9e:	8f 30       	cpi	r24, 0x0F	; 15
    2da0:	60 f0       	brcs	.+24     	; 0x2dba <disp_fast_process+0xc4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2da2:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2da6:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2daa:	9d 7f       	andi	r25, 0xFD	; 253
    2dac:	94 60       	ori	r25, 0x04	; 4
    2dae:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2db2:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
				counter_very_fast_servo_sub = 0;
    2db6:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2dba:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2dbe:	87 ff       	sbrs	r24, 7
    2dc0:	1d c0       	rjmp	.+58     	; 0x2dfc <disp_fast_process+0x106>
    2dc2:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    2dc6:	63 36       	cpi	r22, 0x63	; 99
    2dc8:	c8 f4       	brcc	.+50     	; 0x2dfc <disp_fast_process+0x106>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2dca:	6f 5f       	subi	r22, 0xFF	; 255
    2dcc:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <motor_value>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			counter_very_fast_motor_add++;
    2dd6:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <counter_very_fast_motor_add>
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2de0:	8f 30       	cpi	r24, 0x0F	; 15
    2de2:	60 f0       	brcs	.+24     	; 0x2dfc <disp_fast_process+0x106>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2de4:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2de8:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2dec:	8f 77       	andi	r24, 0x7F	; 127
    2dee:	91 60       	ori	r25, 0x01	; 1
    2df0:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2df4:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
				counter_very_fast_motor_add = 0;
    2df8:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2dfc:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2e00:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2e04:	93 ff       	sbrs	r25, 3
    2e06:	1d c0       	rjmp	.+58     	; 0x2e42 <disp_fast_process+0x14c>
    2e08:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    2e0c:	6b 30       	cpi	r22, 0x0B	; 11
    2e0e:	c8 f0       	brcs	.+50     	; 0x2e42 <disp_fast_process+0x14c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2e10:	61 50       	subi	r22, 0x01	; 1
    2e12:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <motor_value>
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			counter_very_fast_motor_sub++;
    2e1c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <counter_very_fast_motor_sub>
    2e20:	8f 5f       	subi	r24, 0xFF	; 255
    2e22:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2e26:	8f 30       	cpi	r24, 0x0F	; 15
    2e28:	60 f0       	brcs	.+24     	; 0x2e42 <disp_fast_process+0x14c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2e2a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2e2e:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2e32:	97 7f       	andi	r25, 0xF7	; 247
    2e34:	90 61       	ori	r25, 0x10	; 16
    2e36:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <system_events+0x1>
    2e3a:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <system_events>
				counter_very_fast_motor_sub = 0;
    2e3e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2e42:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <disp_fast_timer.2111>
    2e46:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <disp_fast_timer.2111+0x1>
    2e4a:	a0 91 8e 04 	lds	r26, 0x048E	; 0x80048e <disp_fast_timer.2111+0x2>
    2e4e:	b0 91 8f 04 	lds	r27, 0x048F	; 0x80048f <disp_fast_timer.2111+0x3>
    2e52:	80 5b       	subi	r24, 0xB0	; 176
    2e54:	9f 4f       	sbci	r25, 0xFF	; 255
    2e56:	af 4f       	sbci	r26, 0xFF	; 255
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <disp_fast_timer.2111>
    2e5e:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <disp_fast_timer.2111+0x1>
    2e62:	a0 93 8e 04 	sts	0x048E, r26	; 0x80048e <disp_fast_timer.2111+0x2>
    2e66:	b0 93 8f 04 	sts	0x048F, r27	; 0x80048f <disp_fast_timer.2111+0x3>
    2e6a:	08 95       	ret

00002e6c <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2e6c:	40 91 43 06 	lds	r20, 0x0643	; 0x800643 <mktime+0x2>
    2e70:	50 91 44 06 	lds	r21, 0x0644	; 0x800644 <mktime+0x3>
    2e74:	60 91 45 06 	lds	r22, 0x0645	; 0x800645 <mktime+0x4>
    2e78:	70 91 46 06 	lds	r23, 0x0646	; 0x800646 <mktime+0x5>
    2e7c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <disp_very_fast_timer>
    2e80:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <disp_very_fast_timer+0x1>
    2e84:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <disp_very_fast_timer+0x2>
    2e88:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <disp_very_fast_timer+0x3>
    2e8c:	84 17       	cp	r24, r20
    2e8e:	95 07       	cpc	r25, r21
    2e90:	a6 07       	cpc	r26, r22
    2e92:	b7 07       	cpc	r27, r23
    2e94:	08 f0       	brcs	.+2      	; 0x2e98 <disp_very_fast_process+0x2c>
    2e96:	57 c0       	rjmp	.+174    	; 0x2f46 <disp_very_fast_process+0xda>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2e98:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <servo_vibro_value>
    2e9c:	83 36       	cpi	r24, 0x63	; 99
    2e9e:	70 f4       	brcc	.+28     	; 0x2ebc <disp_very_fast_process+0x50>
    2ea0:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2ea4:	86 ff       	sbrs	r24, 6
    2ea6:	0a c0       	rjmp	.+20     	; 0x2ebc <disp_very_fast_process+0x50>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			error_servo_timer();
    2ea8:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2eac:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2eb0:	6f 5f       	subi	r22, 0xFF	; 255
    2eb2:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <servo_vibro_value>
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2ebc:	60 91 23 05 	lds	r22, 0x0523	; 0x800523 <servo_vibro_value>
    2ec0:	6b 30       	cpi	r22, 0x0B	; 11
    2ec2:	70 f0       	brcs	.+28     	; 0x2ee0 <disp_very_fast_process+0x74>
    2ec4:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2ec8:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2ecc:	92 ff       	sbrs	r25, 2
    2ece:	08 c0       	rjmp	.+16     	; 0x2ee0 <disp_very_fast_process+0x74>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10) {
				dip_set_value(DISP_SERVO, --servo_vibro_value);
    2ed0:	61 50       	subi	r22, 0x01	; 1
    2ed2:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <servo_vibro_value>
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
				error_servo_timer();
    2edc:	0e 94 81 0c 	call	0x1902	; 0x1902 <error_servo_timer>
			}
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2ee0:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    2ee4:	63 36       	cpi	r22, 0x63	; 99
    2ee6:	60 f4       	brcc	.+24     	; 0x2f00 <disp_very_fast_process+0x94>
    2ee8:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2eec:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2ef0:	90 ff       	sbrs	r25, 0
    2ef2:	06 c0       	rjmp	.+12     	; 0x2f00 <disp_very_fast_process+0x94>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2ef4:	6f 5f       	subi	r22, 0xFF	; 255
    2ef6:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <motor_value>
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2f00:	60 91 22 05 	lds	r22, 0x0522	; 0x800522 <motor_value>
    2f04:	6b 30       	cpi	r22, 0x0B	; 11
    2f06:	60 f0       	brcs	.+24     	; 0x2f20 <disp_very_fast_process+0xb4>
    2f08:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <system_events>
    2f0c:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <system_events+0x1>
    2f10:	94 ff       	sbrs	r25, 4
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <disp_very_fast_process+0xb4>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2f14:	61 50       	subi	r22, 0x01	; 1
    2f16:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <motor_value>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	0e 94 c5 09 	call	0x138a	; 0x138a <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2f20:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <disp_very_fast_timer>
    2f24:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <disp_very_fast_timer+0x1>
    2f28:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <disp_very_fast_timer+0x2>
    2f2c:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <disp_very_fast_timer+0x3>
    2f30:	4e 96       	adiw	r24, 0x1e	; 30
    2f32:	a1 1d       	adc	r26, r1
    2f34:	b1 1d       	adc	r27, r1
    2f36:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <disp_very_fast_timer>
    2f3a:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <disp_very_fast_timer+0x1>
    2f3e:	a0 93 92 04 	sts	0x0492, r26	; 0x800492 <disp_very_fast_timer+0x2>
    2f42:	b0 93 93 04 	sts	0x0493, r27	; 0x800493 <disp_very_fast_timer+0x3>
    2f46:	08 95       	ret

00002f48 <system_error>:
}


void system_error(void)
{
	off_button();
    2f48:	0e 94 08 14 	call	0x2810	; 0x2810 <off_button>
    2f4c:	08 95       	ret

00002f4e <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	0f 92       	push	r0
    2f56:	11 24       	eor	r1, r1
    2f58:	2f 93       	push	r18
    2f5a:	3f 93       	push	r19
    2f5c:	4f 93       	push	r20
    2f5e:	5f 93       	push	r21
    2f60:	6f 93       	push	r22
    2f62:	7f 93       	push	r23
    2f64:	8f 93       	push	r24
    2f66:	9f 93       	push	r25
    2f68:	af 93       	push	r26
    2f6a:	bf 93       	push	r27
    2f6c:	ef 93       	push	r30
    2f6e:	ff 93       	push	r31
    2f70:	e1 e4       	ldi	r30, 0x41	; 65
    2f72:	f6 e0       	ldi	r31, 0x06	; 6
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	c2 96       	adiw	r24, 0x32	; 50
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	88 3e       	cpi	r24, 0xE8	; 232
    2f84:	93 40       	sbci	r25, 0x03	; 3
    2f86:	88 f0       	brcs	.+34     	; 0x2faa <__vector_10+0x5c>
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	a4 81       	ldd	r26, Z+4	; 0x04
    2f8e:	b5 81       	ldd	r27, Z+5	; 0x05
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	a1 1d       	adc	r26, r1
    2f94:	b1 1d       	adc	r27, r1
    2f96:	82 83       	std	Z+2, r24	; 0x02
    2f98:	93 83       	std	Z+3, r25	; 0x03
    2f9a:	a4 83       	std	Z+4, r26	; 0x04
    2f9c:	b5 83       	std	Z+5, r27	; 0x05
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	88 5e       	subi	r24, 0xE8	; 232
    2fa4:	93 40       	sbci	r25, 0x03	; 3
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
    2faa:	89 e9       	ldi	r24, 0x99	; 153
    2fac:	94 e0       	ldi	r25, 0x04	; 4
    2fae:	0e 94 55 09 	call	0x12aa	; 0x12aa <display_process>
    2fb2:	ff 91       	pop	r31
    2fb4:	ef 91       	pop	r30
    2fb6:	bf 91       	pop	r27
    2fb8:	af 91       	pop	r26
    2fba:	9f 91       	pop	r25
    2fbc:	8f 91       	pop	r24
    2fbe:	7f 91       	pop	r23
    2fc0:	6f 91       	pop	r22
    2fc2:	5f 91       	pop	r21
    2fc4:	4f 91       	pop	r20
    2fc6:	3f 91       	pop	r19
    2fc8:	2f 91       	pop	r18
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0
    2fd0:	1f 90       	pop	r1
    2fd2:	18 95       	reti

00002fd4 <timer0_init>:
    2fd4:	93 b7       	in	r25, 0x33	; 51
    2fd6:	98 60       	ori	r25, 0x08	; 8
    2fd8:	93 bf       	out	0x33, r25	; 51
    2fda:	6c bf       	out	0x3c, r22	; 60
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	99 f0       	breq	.+38     	; 0x3006 <timer0_init+0x32>
    2fe0:	28 f4       	brcc	.+10     	; 0x2fec <timer0_init+0x18>
    2fe2:	88 23       	and	r24, r24
    2fe4:	41 f0       	breq	.+16     	; 0x2ff6 <timer0_init+0x22>
    2fe6:	81 30       	cpi	r24, 0x01	; 1
    2fe8:	51 f0       	breq	.+20     	; 0x2ffe <timer0_init+0x2a>
    2fea:	19 c0       	rjmp	.+50     	; 0x301e <timer0_init+0x4a>
    2fec:	83 30       	cpi	r24, 0x03	; 3
    2fee:	79 f0       	breq	.+30     	; 0x300e <timer0_init+0x3a>
    2ff0:	84 30       	cpi	r24, 0x04	; 4
    2ff2:	89 f0       	breq	.+34     	; 0x3016 <timer0_init+0x42>
    2ff4:	14 c0       	rjmp	.+40     	; 0x301e <timer0_init+0x4a>
    2ff6:	83 b7       	in	r24, 0x33	; 51
    2ff8:	81 60       	ori	r24, 0x01	; 1
    2ffa:	83 bf       	out	0x33, r24	; 51
    2ffc:	13 c0       	rjmp	.+38     	; 0x3024 <timer0_init+0x50>
    2ffe:	83 b7       	in	r24, 0x33	; 51
    3000:	82 60       	ori	r24, 0x02	; 2
    3002:	83 bf       	out	0x33, r24	; 51
    3004:	0f c0       	rjmp	.+30     	; 0x3024 <timer0_init+0x50>
    3006:	83 b7       	in	r24, 0x33	; 51
    3008:	83 60       	ori	r24, 0x03	; 3
    300a:	83 bf       	out	0x33, r24	; 51
    300c:	0b c0       	rjmp	.+22     	; 0x3024 <timer0_init+0x50>
    300e:	83 b7       	in	r24, 0x33	; 51
    3010:	84 60       	ori	r24, 0x04	; 4
    3012:	83 bf       	out	0x33, r24	; 51
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <timer0_init+0x50>
    3016:	83 b7       	in	r24, 0x33	; 51
    3018:	85 60       	ori	r24, 0x05	; 5
    301a:	83 bf       	out	0x33, r24	; 51
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <timer0_init+0x50>
    301e:	83 b7       	in	r24, 0x33	; 51
    3020:	81 60       	ori	r24, 0x01	; 1
    3022:	83 bf       	out	0x33, r24	; 51
    3024:	89 b7       	in	r24, 0x39	; 57
    3026:	82 60       	ori	r24, 0x02	; 2
    3028:	89 bf       	out	0x39, r24	; 57
    302a:	08 95       	ret

0000302c <evTime_init>:
    302c:	23 e0       	ldi	r18, 0x03	; 3
    302e:	fc 01       	movw	r30, r24
    3030:	24 83       	std	Z+4, r18	; 0x04
    3032:	10 82       	st	Z, r1
    3034:	11 82       	std	Z+1, r1	; 0x01
    3036:	12 82       	std	Z+2, r1	; 0x02
    3038:	13 82       	std	Z+3, r1	; 0x03
    303a:	08 95       	ret

0000303c <evTime_start>:
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	21 e0       	ldi	r18, 0x01	; 1
    3042:	fc 01       	movw	r30, r24
    3044:	24 83       	std	Z+4, r18	; 0x04
    3046:	00 91 43 06 	lds	r16, 0x0643	; 0x800643 <mktime+0x2>
    304a:	10 91 44 06 	lds	r17, 0x0644	; 0x800644 <mktime+0x3>
    304e:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <mktime+0x4>
    3052:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <mktime+0x5>
    3056:	40 0f       	add	r20, r16
    3058:	51 1f       	adc	r21, r17
    305a:	62 1f       	adc	r22, r18
    305c:	73 1f       	adc	r23, r19
    305e:	40 83       	st	Z, r20
    3060:	51 83       	std	Z+1, r21	; 0x01
    3062:	62 83       	std	Z+2, r22	; 0x02
    3064:	73 83       	std	Z+3, r23	; 0x03
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <evTime_is_stated>:
    306c:	21 e0       	ldi	r18, 0x01	; 1
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	fc 01       	movw	r30, r24
    3072:	84 81       	ldd	r24, Z+4	; 0x04
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	11 f0       	breq	.+4      	; 0x307c <evTime_is_stated+0x10>
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	c9 01       	movw	r24, r18
    307e:	08 95       	ret

00003080 <evTime_check>:

int evTime_check(evTime * evt)
{
    3080:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    3082:	84 81       	ldd	r24, Z+4	; 0x04
    3084:	81 30       	cpi	r24, 0x01	; 1
    3086:	b1 f4       	brne	.+44     	; 0x30b4 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    3088:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <mktime+0x2>
    308c:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <mktime+0x3>
    3090:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <mktime+0x4>
    3094:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <mktime+0x5>
    3098:	40 81       	ld	r20, Z
    309a:	51 81       	ldd	r21, Z+1	; 0x01
    309c:	62 81       	ldd	r22, Z+2	; 0x02
    309e:	73 81       	ldd	r23, Z+3	; 0x03
    30a0:	48 17       	cp	r20, r24
    30a2:	59 07       	cpc	r21, r25
    30a4:	6a 07       	cpc	r22, r26
    30a6:	7b 07       	cpc	r23, r27
    30a8:	40 f4       	brcc	.+16     	; 0x30ba <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    30b4:	8f ef       	ldi	r24, 0xFF	; 255
    30b6:	9f ef       	ldi	r25, 0xFF	; 255
    30b8:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    30be:	08 95       	ret

000030c0 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    30c0:	21 e0       	ldi	r18, 0x01	; 1
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	fc 01       	movw	r30, r24
    30c6:	84 81       	ldd	r24, Z+4	; 0x04
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	11 f0       	breq	.+4      	; 0x30d0 <evTime_off+0x10>
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
}
    30d0:	c9 01       	movw	r24, r18
    30d2:	08 95       	ret

000030d4 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    30d4:	cf 92       	push	r12
    30d6:	df 92       	push	r13
    30d8:	ef 92       	push	r14
    30da:	ff 92       	push	r15
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	ec 01       	movw	r28, r24
    30e6:	6a 01       	movw	r12, r20
    30e8:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    30ea:	8c 81       	ldd	r24, Y+4	; 0x04
    30ec:	81 11       	cpse	r24, r1
    30ee:	06 c0       	rjmp	.+12     	; 0x30fc <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    30f4:	18 82       	st	Y, r1
    30f6:	19 82       	std	Y+1, r1	; 0x01
    30f8:	1a 82       	std	Y+2, r1	; 0x02
    30fa:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    30fc:	ce 01       	movw	r24, r28
    30fe:	0e 94 40 18 	call	0x3080	; 0x3080 <evTime_check>
    3102:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	31 f4       	brne	.+12     	; 0x3114 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    3108:	b7 01       	movw	r22, r14
    310a:	a6 01       	movw	r20, r12
    310c:	ce 01       	movw	r24, r28
    310e:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
		return 1;
    3112:	0d c0       	rjmp	.+26     	; 0x312e <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    3114:	8c 81       	ldd	r24, Y+4	; 0x04
    3116:	83 30       	cpi	r24, 0x03	; 3
    3118:	41 f4       	brne	.+16     	; 0x312a <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    311a:	b7 01       	movw	r22, r14
    311c:	a6 01       	movw	r20, r12
    311e:	ce 01       	movw	r24, r28
    3120:	0e 94 1e 18 	call	0x303c	; 0x303c <evTime_start>
	}
	return 0;
    3124:	00 e0       	ldi	r16, 0x00	; 0
    3126:	10 e0       	ldi	r17, 0x00	; 0
    3128:	02 c0       	rjmp	.+4      	; 0x312e <evTime_process_period+0x5a>
    312a:	00 e0       	ldi	r16, 0x00	; 0
    312c:	10 e0       	ldi	r17, 0x00	; 0
}
    312e:	c8 01       	movw	r24, r16
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	08 95       	ret

00003142 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    3142:	1f 92       	push	r1
    3144:	0f 92       	push	r0
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	0f 92       	push	r0
    314a:	11 24       	eor	r1, r1
    314c:	2f 93       	push	r18
    314e:	3f 93       	push	r19
    3150:	4f 93       	push	r20
    3152:	5f 93       	push	r21
    3154:	8f 93       	push	r24
    3156:	9f 93       	push	r25
    3158:	ef 93       	push	r30
    315a:	ff 93       	push	r31
    315c:	2b b1       	in	r18, 0x0b	; 11
    315e:	3c b1       	in	r19, 0x0c	; 12
    3160:	28 71       	andi	r18, 0x18	; 24
    3162:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <UART_RxHead>
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	40 91 9c 04 	lds	r20, 0x049C	; 0x80049c <UART_RxTail>
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	84 17       	cp	r24, r20
    3172:	95 07       	cpc	r25, r21
    3174:	39 f0       	breq	.+14     	; 0x3184 <__vector_13+0x42>
    3176:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <UART_RxHead>
    317a:	fc 01       	movw	r30, r24
    317c:	e0 56       	subi	r30, 0x60	; 96
    317e:	fb 4f       	sbci	r31, 0xFB	; 251
    3180:	30 83       	st	Z, r19
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <__vector_13+0x44>
    3184:	22 e0       	ldi	r18, 0x02	; 2
    3186:	20 93 9b 04 	sts	0x049B, r18	; 0x80049b <UART_LastRxError>
    318a:	ff 91       	pop	r31
    318c:	ef 91       	pop	r30
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	5f 91       	pop	r21
    3194:	4f 91       	pop	r20
    3196:	3f 91       	pop	r19
    3198:	2f 91       	pop	r18
    319a:	0f 90       	pop	r0
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	0f 90       	pop	r0
    31a0:	1f 90       	pop	r1
    31a2:	18 95       	reti

000031a4 <__vector_14>:
    31a4:	1f 92       	push	r1
    31a6:	0f 92       	push	r0
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	0f 92       	push	r0
    31ac:	11 24       	eor	r1, r1
    31ae:	8f 93       	push	r24
    31b0:	9f 93       	push	r25
    31b2:	ef 93       	push	r30
    31b4:	ff 93       	push	r31
    31b6:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <UART_TxHead>
    31ba:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <UART_TxTail>
    31be:	98 17       	cp	r25, r24
    31c0:	71 f0       	breq	.+28     	; 0x31de <__vector_14+0x3a>
    31c2:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <UART_TxTail>
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	8f 77       	andi	r24, 0x7F	; 127
    31cc:	99 27       	eor	r25, r25
    31ce:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <UART_TxTail>
    31d2:	fc 01       	movw	r30, r24
    31d4:	e0 56       	subi	r30, 0x60	; 96
    31d6:	fb 4f       	sbci	r31, 0xFB	; 251
    31d8:	80 81       	ld	r24, Z
    31da:	8c b9       	out	0x0c, r24	; 12
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <__vector_14+0x3c>
    31de:	55 98       	cbi	0x0a, 5	; 10
    31e0:	ff 91       	pop	r31
    31e2:	ef 91       	pop	r30
    31e4:	9f 91       	pop	r25
    31e6:	8f 91       	pop	r24
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	0f 90       	pop	r0
    31ee:	1f 90       	pop	r1
    31f0:	18 95       	reti

000031f2 <uart0_init>:
    31f2:	f8 94       	cli
    31f4:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <UART_TxHead>
    31f8:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <UART_TxTail>
    31fc:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <UART_RxHead>
    3200:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <UART_RxTail>
    3204:	78 94       	sei
    3206:	99 23       	and	r25, r25
    3208:	1c f4       	brge	.+6      	; 0x3210 <uart0_init+0x1e>
    320a:	22 e0       	ldi	r18, 0x02	; 2
    320c:	2b b9       	out	0x0b, r18	; 11
    320e:	9f 77       	andi	r25, 0x7F	; 127
    3210:	90 bd       	out	0x20, r25	; 32
    3212:	89 b9       	out	0x09, r24	; 9
    3214:	88 e9       	ldi	r24, 0x98	; 152
    3216:	8a b9       	out	0x0a, r24	; 10
    3218:	86 e8       	ldi	r24, 0x86	; 134
    321a:	80 bd       	out	0x20, r24	; 32
    321c:	08 95       	ret

0000321e <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    321e:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <UART_TxHead>
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	4f 5f       	subi	r20, 0xFF	; 255
    3226:	5f 4f       	sbci	r21, 0xFF	; 255
    3228:	4f 77       	andi	r20, 0x7F	; 127
    322a:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    322c:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <UART_TxTail>
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	42 17       	cp	r20, r18
    3234:	53 07       	cpc	r21, r19
    3236:	d1 f3       	breq	.-12     	; 0x322c <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3238:	fa 01       	movw	r30, r20
    323a:	e0 56       	subi	r30, 0x60	; 96
    323c:	fb 4f       	sbci	r31, 0xFB	; 251
    323e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    3240:	40 93 9f 04 	sts	0x049F, r20	; 0x80049f <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    3244:	55 9a       	sbi	0x0a, 5	; 10
    3246:	08 95       	ret

00003248 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	ec 01       	movw	r28, r24
	while (*s) {
    324e:	88 81       	ld	r24, Y
    3250:	88 23       	and	r24, r24
    3252:	31 f0       	breq	.+12     	; 0x3260 <uart0_puts+0x18>
    3254:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    3256:	0e 94 0f 19 	call	0x321e	; 0x321e <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    325a:	89 91       	ld	r24, Y+
    325c:	81 11       	cpse	r24, r1
    325e:	fb cf       	rjmp	.-10     	; 0x3256 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <__subsf3>:
    3266:	50 58       	subi	r21, 0x80	; 128

00003268 <__addsf3>:
    3268:	bb 27       	eor	r27, r27
    326a:	aa 27       	eor	r26, r26
    326c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__addsf3x>
    3270:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_round>
    3274:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__fp_pscA>
    3278:	38 f0       	brcs	.+14     	; 0x3288 <__addsf3+0x20>
    327a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fp_pscB>
    327e:	20 f0       	brcs	.+8      	; 0x3288 <__addsf3+0x20>
    3280:	39 f4       	brne	.+14     	; 0x3290 <__addsf3+0x28>
    3282:	9f 3f       	cpi	r25, 0xFF	; 255
    3284:	19 f4       	brne	.+6      	; 0x328c <__addsf3+0x24>
    3286:	26 f4       	brtc	.+8      	; 0x3290 <__addsf3+0x28>
    3288:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>
    328c:	0e f4       	brtc	.+2      	; 0x3290 <__addsf3+0x28>
    328e:	e0 95       	com	r30
    3290:	e7 fb       	bst	r30, 7
    3292:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>

00003296 <__addsf3x>:
    3296:	e9 2f       	mov	r30, r25
    3298:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_split3>
    329c:	58 f3       	brcs	.-42     	; 0x3274 <__addsf3+0xc>
    329e:	ba 17       	cp	r27, r26
    32a0:	62 07       	cpc	r22, r18
    32a2:	73 07       	cpc	r23, r19
    32a4:	84 07       	cpc	r24, r20
    32a6:	95 07       	cpc	r25, r21
    32a8:	20 f0       	brcs	.+8      	; 0x32b2 <__addsf3x+0x1c>
    32aa:	79 f4       	brne	.+30     	; 0x32ca <__addsf3x+0x34>
    32ac:	a6 f5       	brtc	.+104    	; 0x3316 <__addsf3x+0x80>
    32ae:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__fp_zero>
    32b2:	0e f4       	brtc	.+2      	; 0x32b6 <__addsf3x+0x20>
    32b4:	e0 95       	com	r30
    32b6:	0b 2e       	mov	r0, r27
    32b8:	ba 2f       	mov	r27, r26
    32ba:	a0 2d       	mov	r26, r0
    32bc:	0b 01       	movw	r0, r22
    32be:	b9 01       	movw	r22, r18
    32c0:	90 01       	movw	r18, r0
    32c2:	0c 01       	movw	r0, r24
    32c4:	ca 01       	movw	r24, r20
    32c6:	a0 01       	movw	r20, r0
    32c8:	11 24       	eor	r1, r1
    32ca:	ff 27       	eor	r31, r31
    32cc:	59 1b       	sub	r21, r25
    32ce:	99 f0       	breq	.+38     	; 0x32f6 <__addsf3x+0x60>
    32d0:	59 3f       	cpi	r21, 0xF9	; 249
    32d2:	50 f4       	brcc	.+20     	; 0x32e8 <__addsf3x+0x52>
    32d4:	50 3e       	cpi	r21, 0xE0	; 224
    32d6:	68 f1       	brcs	.+90     	; 0x3332 <__addsf3x+0x9c>
    32d8:	1a 16       	cp	r1, r26
    32da:	f0 40       	sbci	r31, 0x00	; 0
    32dc:	a2 2f       	mov	r26, r18
    32de:	23 2f       	mov	r18, r19
    32e0:	34 2f       	mov	r19, r20
    32e2:	44 27       	eor	r20, r20
    32e4:	58 5f       	subi	r21, 0xF8	; 248
    32e6:	f3 cf       	rjmp	.-26     	; 0x32ce <__addsf3x+0x38>
    32e8:	46 95       	lsr	r20
    32ea:	37 95       	ror	r19
    32ec:	27 95       	ror	r18
    32ee:	a7 95       	ror	r26
    32f0:	f0 40       	sbci	r31, 0x00	; 0
    32f2:	53 95       	inc	r21
    32f4:	c9 f7       	brne	.-14     	; 0x32e8 <__addsf3x+0x52>
    32f6:	7e f4       	brtc	.+30     	; 0x3316 <__addsf3x+0x80>
    32f8:	1f 16       	cp	r1, r31
    32fa:	ba 0b       	sbc	r27, r26
    32fc:	62 0b       	sbc	r22, r18
    32fe:	73 0b       	sbc	r23, r19
    3300:	84 0b       	sbc	r24, r20
    3302:	ba f0       	brmi	.+46     	; 0x3332 <__addsf3x+0x9c>
    3304:	91 50       	subi	r25, 0x01	; 1
    3306:	a1 f0       	breq	.+40     	; 0x3330 <__addsf3x+0x9a>
    3308:	ff 0f       	add	r31, r31
    330a:	bb 1f       	adc	r27, r27
    330c:	66 1f       	adc	r22, r22
    330e:	77 1f       	adc	r23, r23
    3310:	88 1f       	adc	r24, r24
    3312:	c2 f7       	brpl	.-16     	; 0x3304 <__addsf3x+0x6e>
    3314:	0e c0       	rjmp	.+28     	; 0x3332 <__addsf3x+0x9c>
    3316:	ba 0f       	add	r27, r26
    3318:	62 1f       	adc	r22, r18
    331a:	73 1f       	adc	r23, r19
    331c:	84 1f       	adc	r24, r20
    331e:	48 f4       	brcc	.+18     	; 0x3332 <__addsf3x+0x9c>
    3320:	87 95       	ror	r24
    3322:	77 95       	ror	r23
    3324:	67 95       	ror	r22
    3326:	b7 95       	ror	r27
    3328:	f7 95       	ror	r31
    332a:	9e 3f       	cpi	r25, 0xFE	; 254
    332c:	08 f0       	brcs	.+2      	; 0x3330 <__addsf3x+0x9a>
    332e:	b0 cf       	rjmp	.-160    	; 0x3290 <__addsf3+0x28>
    3330:	93 95       	inc	r25
    3332:	88 0f       	add	r24, r24
    3334:	08 f0       	brcs	.+2      	; 0x3338 <__addsf3x+0xa2>
    3336:	99 27       	eor	r25, r25
    3338:	ee 0f       	add	r30, r30
    333a:	97 95       	ror	r25
    333c:	87 95       	ror	r24
    333e:	08 95       	ret

00003340 <__divsf3>:
    3340:	0e 94 b4 19 	call	0x3368	; 0x3368 <__divsf3x>
    3344:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_round>
    3348:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fp_pscB>
    334c:	58 f0       	brcs	.+22     	; 0x3364 <__divsf3+0x24>
    334e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__fp_pscA>
    3352:	40 f0       	brcs	.+16     	; 0x3364 <__divsf3+0x24>
    3354:	29 f4       	brne	.+10     	; 0x3360 <__divsf3+0x20>
    3356:	5f 3f       	cpi	r21, 0xFF	; 255
    3358:	29 f0       	breq	.+10     	; 0x3364 <__divsf3+0x24>
    335a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    335e:	51 11       	cpse	r21, r1
    3360:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>
    3364:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>

00003368 <__divsf3x>:
    3368:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_split3>
    336c:	68 f3       	brcs	.-38     	; 0x3348 <__divsf3+0x8>

0000336e <__divsf3_pse>:
    336e:	99 23       	and	r25, r25
    3370:	b1 f3       	breq	.-20     	; 0x335e <__divsf3+0x1e>
    3372:	55 23       	and	r21, r21
    3374:	91 f3       	breq	.-28     	; 0x335a <__divsf3+0x1a>
    3376:	95 1b       	sub	r25, r21
    3378:	55 0b       	sbc	r21, r21
    337a:	bb 27       	eor	r27, r27
    337c:	aa 27       	eor	r26, r26
    337e:	62 17       	cp	r22, r18
    3380:	73 07       	cpc	r23, r19
    3382:	84 07       	cpc	r24, r20
    3384:	38 f0       	brcs	.+14     	; 0x3394 <__divsf3_pse+0x26>
    3386:	9f 5f       	subi	r25, 0xFF	; 255
    3388:	5f 4f       	sbci	r21, 0xFF	; 255
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	44 1f       	adc	r20, r20
    3390:	aa 1f       	adc	r26, r26
    3392:	a9 f3       	breq	.-22     	; 0x337e <__divsf3_pse+0x10>
    3394:	35 d0       	rcall	.+106    	; 0x3400 <__divsf3_pse+0x92>
    3396:	0e 2e       	mov	r0, r30
    3398:	3a f0       	brmi	.+14     	; 0x33a8 <__divsf3_pse+0x3a>
    339a:	e0 e8       	ldi	r30, 0x80	; 128
    339c:	32 d0       	rcall	.+100    	; 0x3402 <__divsf3_pse+0x94>
    339e:	91 50       	subi	r25, 0x01	; 1
    33a0:	50 40       	sbci	r21, 0x00	; 0
    33a2:	e6 95       	lsr	r30
    33a4:	00 1c       	adc	r0, r0
    33a6:	ca f7       	brpl	.-14     	; 0x339a <__divsf3_pse+0x2c>
    33a8:	2b d0       	rcall	.+86     	; 0x3400 <__divsf3_pse+0x92>
    33aa:	fe 2f       	mov	r31, r30
    33ac:	29 d0       	rcall	.+82     	; 0x3400 <__divsf3_pse+0x92>
    33ae:	66 0f       	add	r22, r22
    33b0:	77 1f       	adc	r23, r23
    33b2:	88 1f       	adc	r24, r24
    33b4:	bb 1f       	adc	r27, r27
    33b6:	26 17       	cp	r18, r22
    33b8:	37 07       	cpc	r19, r23
    33ba:	48 07       	cpc	r20, r24
    33bc:	ab 07       	cpc	r26, r27
    33be:	b0 e8       	ldi	r27, 0x80	; 128
    33c0:	09 f0       	breq	.+2      	; 0x33c4 <__divsf3_pse+0x56>
    33c2:	bb 0b       	sbc	r27, r27
    33c4:	80 2d       	mov	r24, r0
    33c6:	bf 01       	movw	r22, r30
    33c8:	ff 27       	eor	r31, r31
    33ca:	93 58       	subi	r25, 0x83	; 131
    33cc:	5f 4f       	sbci	r21, 0xFF	; 255
    33ce:	3a f0       	brmi	.+14     	; 0x33de <__divsf3_pse+0x70>
    33d0:	9e 3f       	cpi	r25, 0xFE	; 254
    33d2:	51 05       	cpc	r21, r1
    33d4:	78 f0       	brcs	.+30     	; 0x33f4 <__divsf3_pse+0x86>
    33d6:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    33da:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>
    33de:	5f 3f       	cpi	r21, 0xFF	; 255
    33e0:	e4 f3       	brlt	.-8      	; 0x33da <__divsf3_pse+0x6c>
    33e2:	98 3e       	cpi	r25, 0xE8	; 232
    33e4:	d4 f3       	brlt	.-12     	; 0x33da <__divsf3_pse+0x6c>
    33e6:	86 95       	lsr	r24
    33e8:	77 95       	ror	r23
    33ea:	67 95       	ror	r22
    33ec:	b7 95       	ror	r27
    33ee:	f7 95       	ror	r31
    33f0:	9f 5f       	subi	r25, 0xFF	; 255
    33f2:	c9 f7       	brne	.-14     	; 0x33e6 <__divsf3_pse+0x78>
    33f4:	88 0f       	add	r24, r24
    33f6:	91 1d       	adc	r25, r1
    33f8:	96 95       	lsr	r25
    33fa:	87 95       	ror	r24
    33fc:	97 f9       	bld	r25, 7
    33fe:	08 95       	ret
    3400:	e1 e0       	ldi	r30, 0x01	; 1
    3402:	66 0f       	add	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	88 1f       	adc	r24, r24
    3408:	bb 1f       	adc	r27, r27
    340a:	62 17       	cp	r22, r18
    340c:	73 07       	cpc	r23, r19
    340e:	84 07       	cpc	r24, r20
    3410:	ba 07       	cpc	r27, r26
    3412:	20 f0       	brcs	.+8      	; 0x341c <__divsf3_pse+0xae>
    3414:	62 1b       	sub	r22, r18
    3416:	73 0b       	sbc	r23, r19
    3418:	84 0b       	sbc	r24, r20
    341a:	ba 0b       	sbc	r27, r26
    341c:	ee 1f       	adc	r30, r30
    341e:	88 f7       	brcc	.-30     	; 0x3402 <__divsf3_pse+0x94>
    3420:	e0 95       	com	r30
    3422:	08 95       	ret

00003424 <__fixsfsi>:
    3424:	0e 94 19 1a 	call	0x3432	; 0x3432 <__fixunssfsi>
    3428:	68 94       	set
    342a:	b1 11       	cpse	r27, r1
    342c:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>
    3430:	08 95       	ret

00003432 <__fixunssfsi>:
    3432:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_splitA>
    3436:	88 f0       	brcs	.+34     	; 0x345a <__fixunssfsi+0x28>
    3438:	9f 57       	subi	r25, 0x7F	; 127
    343a:	98 f0       	brcs	.+38     	; 0x3462 <__fixunssfsi+0x30>
    343c:	b9 2f       	mov	r27, r25
    343e:	99 27       	eor	r25, r25
    3440:	b7 51       	subi	r27, 0x17	; 23
    3442:	b0 f0       	brcs	.+44     	; 0x3470 <__fixunssfsi+0x3e>
    3444:	e1 f0       	breq	.+56     	; 0x347e <__fixunssfsi+0x4c>
    3446:	66 0f       	add	r22, r22
    3448:	77 1f       	adc	r23, r23
    344a:	88 1f       	adc	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	1a f0       	brmi	.+6      	; 0x3456 <__fixunssfsi+0x24>
    3450:	ba 95       	dec	r27
    3452:	c9 f7       	brne	.-14     	; 0x3446 <__fixunssfsi+0x14>
    3454:	14 c0       	rjmp	.+40     	; 0x347e <__fixunssfsi+0x4c>
    3456:	b1 30       	cpi	r27, 0x01	; 1
    3458:	91 f0       	breq	.+36     	; 0x347e <__fixunssfsi+0x4c>
    345a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__fp_zero>
    345e:	b1 e0       	ldi	r27, 0x01	; 1
    3460:	08 95       	ret
    3462:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__fp_zero>
    3466:	67 2f       	mov	r22, r23
    3468:	78 2f       	mov	r23, r24
    346a:	88 27       	eor	r24, r24
    346c:	b8 5f       	subi	r27, 0xF8	; 248
    346e:	39 f0       	breq	.+14     	; 0x347e <__fixunssfsi+0x4c>
    3470:	b9 3f       	cpi	r27, 0xF9	; 249
    3472:	cc f3       	brlt	.-14     	; 0x3466 <__fixunssfsi+0x34>
    3474:	86 95       	lsr	r24
    3476:	77 95       	ror	r23
    3478:	67 95       	ror	r22
    347a:	b3 95       	inc	r27
    347c:	d9 f7       	brne	.-10     	; 0x3474 <__fixunssfsi+0x42>
    347e:	3e f4       	brtc	.+14     	; 0x348e <__fixunssfsi+0x5c>
    3480:	90 95       	com	r25
    3482:	80 95       	com	r24
    3484:	70 95       	com	r23
    3486:	61 95       	neg	r22
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	8f 4f       	sbci	r24, 0xFF	; 255
    348c:	9f 4f       	sbci	r25, 0xFF	; 255
    348e:	08 95       	ret

00003490 <__floatunsisf>:
    3490:	e8 94       	clt
    3492:	09 c0       	rjmp	.+18     	; 0x34a6 <__floatsisf+0x12>

00003494 <__floatsisf>:
    3494:	97 fb       	bst	r25, 7
    3496:	3e f4       	brtc	.+14     	; 0x34a6 <__floatsisf+0x12>
    3498:	90 95       	com	r25
    349a:	80 95       	com	r24
    349c:	70 95       	com	r23
    349e:	61 95       	neg	r22
    34a0:	7f 4f       	sbci	r23, 0xFF	; 255
    34a2:	8f 4f       	sbci	r24, 0xFF	; 255
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	99 23       	and	r25, r25
    34a8:	a9 f0       	breq	.+42     	; 0x34d4 <__floatsisf+0x40>
    34aa:	f9 2f       	mov	r31, r25
    34ac:	96 e9       	ldi	r25, 0x96	; 150
    34ae:	bb 27       	eor	r27, r27
    34b0:	93 95       	inc	r25
    34b2:	f6 95       	lsr	r31
    34b4:	87 95       	ror	r24
    34b6:	77 95       	ror	r23
    34b8:	67 95       	ror	r22
    34ba:	b7 95       	ror	r27
    34bc:	f1 11       	cpse	r31, r1
    34be:	f8 cf       	rjmp	.-16     	; 0x34b0 <__floatsisf+0x1c>
    34c0:	fa f4       	brpl	.+62     	; 0x3500 <__floatsisf+0x6c>
    34c2:	bb 0f       	add	r27, r27
    34c4:	11 f4       	brne	.+4      	; 0x34ca <__floatsisf+0x36>
    34c6:	60 ff       	sbrs	r22, 0
    34c8:	1b c0       	rjmp	.+54     	; 0x3500 <__floatsisf+0x6c>
    34ca:	6f 5f       	subi	r22, 0xFF	; 255
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	16 c0       	rjmp	.+44     	; 0x3500 <__floatsisf+0x6c>
    34d4:	88 23       	and	r24, r24
    34d6:	11 f0       	breq	.+4      	; 0x34dc <__floatsisf+0x48>
    34d8:	96 e9       	ldi	r25, 0x96	; 150
    34da:	11 c0       	rjmp	.+34     	; 0x34fe <__floatsisf+0x6a>
    34dc:	77 23       	and	r23, r23
    34de:	21 f0       	breq	.+8      	; 0x34e8 <__floatsisf+0x54>
    34e0:	9e e8       	ldi	r25, 0x8E	; 142
    34e2:	87 2f       	mov	r24, r23
    34e4:	76 2f       	mov	r23, r22
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <__floatsisf+0x5e>
    34e8:	66 23       	and	r22, r22
    34ea:	71 f0       	breq	.+28     	; 0x3508 <__floatsisf+0x74>
    34ec:	96 e8       	ldi	r25, 0x86	; 134
    34ee:	86 2f       	mov	r24, r22
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	2a f0       	brmi	.+10     	; 0x3500 <__floatsisf+0x6c>
    34f6:	9a 95       	dec	r25
    34f8:	66 0f       	add	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	da f7       	brpl	.-10     	; 0x34f6 <__floatsisf+0x62>
    3500:	88 0f       	add	r24, r24
    3502:	96 95       	lsr	r25
    3504:	87 95       	ror	r24
    3506:	97 f9       	bld	r25, 7
    3508:	08 95       	ret

0000350a <__fp_cmp>:
    350a:	99 0f       	add	r25, r25
    350c:	00 08       	sbc	r0, r0
    350e:	55 0f       	add	r21, r21
    3510:	aa 0b       	sbc	r26, r26
    3512:	e0 e8       	ldi	r30, 0x80	; 128
    3514:	fe ef       	ldi	r31, 0xFE	; 254
    3516:	16 16       	cp	r1, r22
    3518:	17 06       	cpc	r1, r23
    351a:	e8 07       	cpc	r30, r24
    351c:	f9 07       	cpc	r31, r25
    351e:	c0 f0       	brcs	.+48     	; 0x3550 <__fp_cmp+0x46>
    3520:	12 16       	cp	r1, r18
    3522:	13 06       	cpc	r1, r19
    3524:	e4 07       	cpc	r30, r20
    3526:	f5 07       	cpc	r31, r21
    3528:	98 f0       	brcs	.+38     	; 0x3550 <__fp_cmp+0x46>
    352a:	62 1b       	sub	r22, r18
    352c:	73 0b       	sbc	r23, r19
    352e:	84 0b       	sbc	r24, r20
    3530:	95 0b       	sbc	r25, r21
    3532:	39 f4       	brne	.+14     	; 0x3542 <__fp_cmp+0x38>
    3534:	0a 26       	eor	r0, r26
    3536:	61 f0       	breq	.+24     	; 0x3550 <__fp_cmp+0x46>
    3538:	23 2b       	or	r18, r19
    353a:	24 2b       	or	r18, r20
    353c:	25 2b       	or	r18, r21
    353e:	21 f4       	brne	.+8      	; 0x3548 <__fp_cmp+0x3e>
    3540:	08 95       	ret
    3542:	0a 26       	eor	r0, r26
    3544:	09 f4       	brne	.+2      	; 0x3548 <__fp_cmp+0x3e>
    3546:	a1 40       	sbci	r26, 0x01	; 1
    3548:	a6 95       	lsr	r26
    354a:	8f ef       	ldi	r24, 0xFF	; 255
    354c:	81 1d       	adc	r24, r1
    354e:	81 1d       	adc	r24, r1
    3550:	08 95       	ret

00003552 <__fp_inf>:
    3552:	97 f9       	bld	r25, 7
    3554:	9f 67       	ori	r25, 0x7F	; 127
    3556:	80 e8       	ldi	r24, 0x80	; 128
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	08 95       	ret

0000355e <__fp_nan>:
    355e:	9f ef       	ldi	r25, 0xFF	; 255
    3560:	80 ec       	ldi	r24, 0xC0	; 192
    3562:	08 95       	ret

00003564 <__fp_pscA>:
    3564:	00 24       	eor	r0, r0
    3566:	0a 94       	dec	r0
    3568:	16 16       	cp	r1, r22
    356a:	17 06       	cpc	r1, r23
    356c:	18 06       	cpc	r1, r24
    356e:	09 06       	cpc	r0, r25
    3570:	08 95       	ret

00003572 <__fp_pscB>:
    3572:	00 24       	eor	r0, r0
    3574:	0a 94       	dec	r0
    3576:	12 16       	cp	r1, r18
    3578:	13 06       	cpc	r1, r19
    357a:	14 06       	cpc	r1, r20
    357c:	05 06       	cpc	r0, r21
    357e:	08 95       	ret

00003580 <__fp_round>:
    3580:	09 2e       	mov	r0, r25
    3582:	03 94       	inc	r0
    3584:	00 0c       	add	r0, r0
    3586:	11 f4       	brne	.+4      	; 0x358c <__fp_round+0xc>
    3588:	88 23       	and	r24, r24
    358a:	52 f0       	brmi	.+20     	; 0x35a0 <__fp_round+0x20>
    358c:	bb 0f       	add	r27, r27
    358e:	40 f4       	brcc	.+16     	; 0x35a0 <__fp_round+0x20>
    3590:	bf 2b       	or	r27, r31
    3592:	11 f4       	brne	.+4      	; 0x3598 <__fp_round+0x18>
    3594:	60 ff       	sbrs	r22, 0
    3596:	04 c0       	rjmp	.+8      	; 0x35a0 <__fp_round+0x20>
    3598:	6f 5f       	subi	r22, 0xFF	; 255
    359a:	7f 4f       	sbci	r23, 0xFF	; 255
    359c:	8f 4f       	sbci	r24, 0xFF	; 255
    359e:	9f 4f       	sbci	r25, 0xFF	; 255
    35a0:	08 95       	ret

000035a2 <__fp_split3>:
    35a2:	57 fd       	sbrc	r21, 7
    35a4:	90 58       	subi	r25, 0x80	; 128
    35a6:	44 0f       	add	r20, r20
    35a8:	55 1f       	adc	r21, r21
    35aa:	59 f0       	breq	.+22     	; 0x35c2 <__fp_splitA+0x10>
    35ac:	5f 3f       	cpi	r21, 0xFF	; 255
    35ae:	71 f0       	breq	.+28     	; 0x35cc <__fp_splitA+0x1a>
    35b0:	47 95       	ror	r20

000035b2 <__fp_splitA>:
    35b2:	88 0f       	add	r24, r24
    35b4:	97 fb       	bst	r25, 7
    35b6:	99 1f       	adc	r25, r25
    35b8:	61 f0       	breq	.+24     	; 0x35d2 <__fp_splitA+0x20>
    35ba:	9f 3f       	cpi	r25, 0xFF	; 255
    35bc:	79 f0       	breq	.+30     	; 0x35dc <__fp_splitA+0x2a>
    35be:	87 95       	ror	r24
    35c0:	08 95       	ret
    35c2:	12 16       	cp	r1, r18
    35c4:	13 06       	cpc	r1, r19
    35c6:	14 06       	cpc	r1, r20
    35c8:	55 1f       	adc	r21, r21
    35ca:	f2 cf       	rjmp	.-28     	; 0x35b0 <__fp_split3+0xe>
    35cc:	46 95       	lsr	r20
    35ce:	f1 df       	rcall	.-30     	; 0x35b2 <__fp_splitA>
    35d0:	08 c0       	rjmp	.+16     	; 0x35e2 <__fp_splitA+0x30>
    35d2:	16 16       	cp	r1, r22
    35d4:	17 06       	cpc	r1, r23
    35d6:	18 06       	cpc	r1, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	f1 cf       	rjmp	.-30     	; 0x35be <__fp_splitA+0xc>
    35dc:	86 95       	lsr	r24
    35de:	71 05       	cpc	r23, r1
    35e0:	61 05       	cpc	r22, r1
    35e2:	08 94       	sec
    35e4:	08 95       	ret

000035e6 <__fp_zero>:
    35e6:	e8 94       	clt

000035e8 <__fp_szero>:
    35e8:	bb 27       	eor	r27, r27
    35ea:	66 27       	eor	r22, r22
    35ec:	77 27       	eor	r23, r23
    35ee:	cb 01       	movw	r24, r22
    35f0:	97 f9       	bld	r25, 7
    35f2:	08 95       	ret

000035f4 <__gesf2>:
    35f4:	0e 94 85 1a 	call	0x350a	; 0x350a <__fp_cmp>
    35f8:	08 f4       	brcc	.+2      	; 0x35fc <__gesf2+0x8>
    35fa:	8f ef       	ldi	r24, 0xFF	; 255
    35fc:	08 95       	ret

000035fe <__mulsf3>:
    35fe:	0e 94 12 1b 	call	0x3624	; 0x3624 <__mulsf3x>
    3602:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_round>
    3606:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__fp_pscA>
    360a:	38 f0       	brcs	.+14     	; 0x361a <__mulsf3+0x1c>
    360c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fp_pscB>
    3610:	20 f0       	brcs	.+8      	; 0x361a <__mulsf3+0x1c>
    3612:	95 23       	and	r25, r21
    3614:	11 f0       	breq	.+4      	; 0x361a <__mulsf3+0x1c>
    3616:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    361a:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>
    361e:	11 24       	eor	r1, r1
    3620:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>

00003624 <__mulsf3x>:
    3624:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <__fp_split3>
    3628:	70 f3       	brcs	.-36     	; 0x3606 <__mulsf3+0x8>

0000362a <__mulsf3_pse>:
    362a:	95 9f       	mul	r25, r21
    362c:	c1 f3       	breq	.-16     	; 0x361e <__mulsf3+0x20>
    362e:	95 0f       	add	r25, r21
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	55 1f       	adc	r21, r21
    3634:	62 9f       	mul	r22, r18
    3636:	f0 01       	movw	r30, r0
    3638:	72 9f       	mul	r23, r18
    363a:	bb 27       	eor	r27, r27
    363c:	f0 0d       	add	r31, r0
    363e:	b1 1d       	adc	r27, r1
    3640:	63 9f       	mul	r22, r19
    3642:	aa 27       	eor	r26, r26
    3644:	f0 0d       	add	r31, r0
    3646:	b1 1d       	adc	r27, r1
    3648:	aa 1f       	adc	r26, r26
    364a:	64 9f       	mul	r22, r20
    364c:	66 27       	eor	r22, r22
    364e:	b0 0d       	add	r27, r0
    3650:	a1 1d       	adc	r26, r1
    3652:	66 1f       	adc	r22, r22
    3654:	82 9f       	mul	r24, r18
    3656:	22 27       	eor	r18, r18
    3658:	b0 0d       	add	r27, r0
    365a:	a1 1d       	adc	r26, r1
    365c:	62 1f       	adc	r22, r18
    365e:	73 9f       	mul	r23, r19
    3660:	b0 0d       	add	r27, r0
    3662:	a1 1d       	adc	r26, r1
    3664:	62 1f       	adc	r22, r18
    3666:	83 9f       	mul	r24, r19
    3668:	a0 0d       	add	r26, r0
    366a:	61 1d       	adc	r22, r1
    366c:	22 1f       	adc	r18, r18
    366e:	74 9f       	mul	r23, r20
    3670:	33 27       	eor	r19, r19
    3672:	a0 0d       	add	r26, r0
    3674:	61 1d       	adc	r22, r1
    3676:	23 1f       	adc	r18, r19
    3678:	84 9f       	mul	r24, r20
    367a:	60 0d       	add	r22, r0
    367c:	21 1d       	adc	r18, r1
    367e:	82 2f       	mov	r24, r18
    3680:	76 2f       	mov	r23, r22
    3682:	6a 2f       	mov	r22, r26
    3684:	11 24       	eor	r1, r1
    3686:	9f 57       	subi	r25, 0x7F	; 127
    3688:	50 40       	sbci	r21, 0x00	; 0
    368a:	9a f0       	brmi	.+38     	; 0x36b2 <__mulsf3_pse+0x88>
    368c:	f1 f0       	breq	.+60     	; 0x36ca <__mulsf3_pse+0xa0>
    368e:	88 23       	and	r24, r24
    3690:	4a f0       	brmi	.+18     	; 0x36a4 <__mulsf3_pse+0x7a>
    3692:	ee 0f       	add	r30, r30
    3694:	ff 1f       	adc	r31, r31
    3696:	bb 1f       	adc	r27, r27
    3698:	66 1f       	adc	r22, r22
    369a:	77 1f       	adc	r23, r23
    369c:	88 1f       	adc	r24, r24
    369e:	91 50       	subi	r25, 0x01	; 1
    36a0:	50 40       	sbci	r21, 0x00	; 0
    36a2:	a9 f7       	brne	.-22     	; 0x368e <__mulsf3_pse+0x64>
    36a4:	9e 3f       	cpi	r25, 0xFE	; 254
    36a6:	51 05       	cpc	r21, r1
    36a8:	80 f0       	brcs	.+32     	; 0x36ca <__mulsf3_pse+0xa0>
    36aa:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    36ae:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>
    36b2:	5f 3f       	cpi	r21, 0xFF	; 255
    36b4:	e4 f3       	brlt	.-8      	; 0x36ae <__mulsf3_pse+0x84>
    36b6:	98 3e       	cpi	r25, 0xE8	; 232
    36b8:	d4 f3       	brlt	.-12     	; 0x36ae <__mulsf3_pse+0x84>
    36ba:	86 95       	lsr	r24
    36bc:	77 95       	ror	r23
    36be:	67 95       	ror	r22
    36c0:	b7 95       	ror	r27
    36c2:	f7 95       	ror	r31
    36c4:	e7 95       	ror	r30
    36c6:	9f 5f       	subi	r25, 0xFF	; 255
    36c8:	c1 f7       	brne	.-16     	; 0x36ba <__mulsf3_pse+0x90>
    36ca:	fe 2b       	or	r31, r30
    36cc:	88 0f       	add	r24, r24
    36ce:	91 1d       	adc	r25, r1
    36d0:	96 95       	lsr	r25
    36d2:	87 95       	ror	r24
    36d4:	97 f9       	bld	r25, 7
    36d6:	08 95       	ret

000036d8 <pow>:
    36d8:	fa 01       	movw	r30, r20
    36da:	ee 0f       	add	r30, r30
    36dc:	ff 1f       	adc	r31, r31
    36de:	30 96       	adiw	r30, 0x00	; 0
    36e0:	21 05       	cpc	r18, r1
    36e2:	31 05       	cpc	r19, r1
    36e4:	a1 f1       	breq	.+104    	; 0x374e <pow+0x76>
    36e6:	61 15       	cp	r22, r1
    36e8:	71 05       	cpc	r23, r1
    36ea:	61 f4       	brne	.+24     	; 0x3704 <pow+0x2c>
    36ec:	80 38       	cpi	r24, 0x80	; 128
    36ee:	bf e3       	ldi	r27, 0x3F	; 63
    36f0:	9b 07       	cpc	r25, r27
    36f2:	49 f1       	breq	.+82     	; 0x3746 <pow+0x6e>
    36f4:	68 94       	set
    36f6:	90 38       	cpi	r25, 0x80	; 128
    36f8:	81 05       	cpc	r24, r1
    36fa:	61 f0       	breq	.+24     	; 0x3714 <pow+0x3c>
    36fc:	80 38       	cpi	r24, 0x80	; 128
    36fe:	bf ef       	ldi	r27, 0xFF	; 255
    3700:	9b 07       	cpc	r25, r27
    3702:	41 f0       	breq	.+16     	; 0x3714 <pow+0x3c>
    3704:	99 23       	and	r25, r25
    3706:	4a f5       	brpl	.+82     	; 0x375a <pow+0x82>
    3708:	ff 3f       	cpi	r31, 0xFF	; 255
    370a:	e1 05       	cpc	r30, r1
    370c:	31 05       	cpc	r19, r1
    370e:	21 05       	cpc	r18, r1
    3710:	19 f1       	breq	.+70     	; 0x3758 <pow+0x80>
    3712:	e8 94       	clt
    3714:	08 94       	sec
    3716:	e7 95       	ror	r30
    3718:	d9 01       	movw	r26, r18
    371a:	aa 23       	and	r26, r26
    371c:	29 f4       	brne	.+10     	; 0x3728 <pow+0x50>
    371e:	ab 2f       	mov	r26, r27
    3720:	be 2f       	mov	r27, r30
    3722:	f8 5f       	subi	r31, 0xF8	; 248
    3724:	d0 f3       	brcs	.-12     	; 0x371a <pow+0x42>
    3726:	10 c0       	rjmp	.+32     	; 0x3748 <pow+0x70>
    3728:	ff 5f       	subi	r31, 0xFF	; 255
    372a:	70 f4       	brcc	.+28     	; 0x3748 <pow+0x70>
    372c:	a6 95       	lsr	r26
    372e:	e0 f7       	brcc	.-8      	; 0x3728 <pow+0x50>
    3730:	f7 39       	cpi	r31, 0x97	; 151
    3732:	50 f0       	brcs	.+20     	; 0x3748 <pow+0x70>
    3734:	19 f0       	breq	.+6      	; 0x373c <pow+0x64>
    3736:	ff 3a       	cpi	r31, 0xAF	; 175
    3738:	38 f4       	brcc	.+14     	; 0x3748 <pow+0x70>
    373a:	9f 77       	andi	r25, 0x7F	; 127
    373c:	9f 93       	push	r25
    373e:	0d d0       	rcall	.+26     	; 0x375a <pow+0x82>
    3740:	0f 90       	pop	r0
    3742:	07 fc       	sbrc	r0, 7
    3744:	90 58       	subi	r25, 0x80	; 128
    3746:	08 95       	ret
    3748:	46 f0       	brts	.+16     	; 0x375a <pow+0x82>
    374a:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	80 e8       	ldi	r24, 0x80	; 128
    3754:	9f e3       	ldi	r25, 0x3F	; 63
    3756:	08 95       	ret
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	9f 77       	andi	r25, 0x7F	; 127
    375c:	5f 93       	push	r21
    375e:	4f 93       	push	r20
    3760:	3f 93       	push	r19
    3762:	2f 93       	push	r18
    3764:	0e 94 67 1c 	call	0x38ce	; 0x38ce <log>
    3768:	2f 91       	pop	r18
    376a:	3f 91       	pop	r19
    376c:	4f 91       	pop	r20
    376e:	5f 91       	pop	r21
    3770:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__mulsf3>
    3774:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <exp>
    3778:	29 f4       	brne	.+10     	; 0x3784 <pow+0xac>
    377a:	16 f0       	brts	.+4      	; 0x3780 <pow+0xa8>
    377c:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    3780:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__fp_zero>
    3784:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>

00003788 <exp>:
    3788:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_splitA>
    378c:	a8 f3       	brcs	.-22     	; 0x3778 <pow+0xa0>
    378e:	96 38       	cpi	r25, 0x86	; 134
    3790:	a0 f7       	brcc	.-24     	; 0x377a <pow+0xa2>
    3792:	07 f8       	bld	r0, 7
    3794:	0f 92       	push	r0
    3796:	e8 94       	clt
    3798:	2b e3       	ldi	r18, 0x3B	; 59
    379a:	3a ea       	ldi	r19, 0xAA	; 170
    379c:	48 eb       	ldi	r20, 0xB8	; 184
    379e:	5f e7       	ldi	r21, 0x7F	; 127
    37a0:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3_pse>
    37a4:	0f 92       	push	r0
    37a6:	0f 92       	push	r0
    37a8:	0f 92       	push	r0
    37aa:	4d b7       	in	r20, 0x3d	; 61
    37ac:	5e b7       	in	r21, 0x3e	; 62
    37ae:	0f 92       	push	r0
    37b0:	0e 94 af 1c 	call	0x395e	; 0x395e <modf>
    37b4:	e2 e5       	ldi	r30, 0x52	; 82
    37b6:	f2 e0       	ldi	r31, 0x02	; 2
    37b8:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_powser>
    37bc:	4f 91       	pop	r20
    37be:	5f 91       	pop	r21
    37c0:	ef 91       	pop	r30
    37c2:	ff 91       	pop	r31
    37c4:	e5 95       	asr	r30
    37c6:	ee 1f       	adc	r30, r30
    37c8:	ff 1f       	adc	r31, r31
    37ca:	49 f0       	breq	.+18     	; 0x37de <exp+0x56>
    37cc:	fe 57       	subi	r31, 0x7E	; 126
    37ce:	e0 68       	ori	r30, 0x80	; 128
    37d0:	44 27       	eor	r20, r20
    37d2:	ee 0f       	add	r30, r30
    37d4:	44 1f       	adc	r20, r20
    37d6:	fa 95       	dec	r31
    37d8:	e1 f7       	brne	.-8      	; 0x37d2 <exp+0x4a>
    37da:	41 95       	neg	r20
    37dc:	55 0b       	sbc	r21, r21
    37de:	0e 94 29 1c 	call	0x3852	; 0x3852 <ldexp>
    37e2:	0f 90       	pop	r0
    37e4:	07 fe       	sbrs	r0, 7
    37e6:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <inverse>
    37ea:	08 95       	ret

000037ec <__fp_powser>:
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	1f 93       	push	r17
    37f2:	0f 93       	push	r16
    37f4:	ff 92       	push	r15
    37f6:	ef 92       	push	r14
    37f8:	df 92       	push	r13
    37fa:	7b 01       	movw	r14, r22
    37fc:	8c 01       	movw	r16, r24
    37fe:	68 94       	set
    3800:	06 c0       	rjmp	.+12     	; 0x380e <__fp_powser+0x22>
    3802:	da 2e       	mov	r13, r26
    3804:	ef 01       	movw	r28, r30
    3806:	0e 94 12 1b 	call	0x3624	; 0x3624 <__mulsf3x>
    380a:	fe 01       	movw	r30, r28
    380c:	e8 94       	clt
    380e:	a5 91       	lpm	r26, Z+
    3810:	25 91       	lpm	r18, Z+
    3812:	35 91       	lpm	r19, Z+
    3814:	45 91       	lpm	r20, Z+
    3816:	55 91       	lpm	r21, Z+
    3818:	a6 f3       	brts	.-24     	; 0x3802 <__fp_powser+0x16>
    381a:	ef 01       	movw	r28, r30
    381c:	0e 94 4b 19 	call	0x3296	; 0x3296 <__addsf3x>
    3820:	fe 01       	movw	r30, r28
    3822:	97 01       	movw	r18, r14
    3824:	a8 01       	movw	r20, r16
    3826:	da 94       	dec	r13
    3828:	69 f7       	brne	.-38     	; 0x3804 <__fp_powser+0x18>
    382a:	df 90       	pop	r13
    382c:	ef 90       	pop	r14
    382e:	ff 90       	pop	r15
    3830:	0f 91       	pop	r16
    3832:	1f 91       	pop	r17
    3834:	cf 91       	pop	r28
    3836:	df 91       	pop	r29
    3838:	08 95       	ret

0000383a <inverse>:
    383a:	9b 01       	movw	r18, r22
    383c:	ac 01       	movw	r20, r24
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	80 e8       	ldi	r24, 0x80	; 128
    3844:	9f e3       	ldi	r25, 0x3F	; 63
    3846:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <__divsf3>
    384a:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>
    384e:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__fp_mpack>

00003852 <ldexp>:
    3852:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_splitA>
    3856:	d8 f3       	brcs	.-10     	; 0x384e <inverse+0x14>
    3858:	99 23       	and	r25, r25
    385a:	c9 f3       	breq	.-14     	; 0x384e <inverse+0x14>
    385c:	94 0f       	add	r25, r20
    385e:	51 1d       	adc	r21, r1
    3860:	a3 f3       	brvs	.-24     	; 0x384a <inverse+0x10>
    3862:	91 50       	subi	r25, 0x01	; 1
    3864:	50 40       	sbci	r21, 0x00	; 0
    3866:	94 f0       	brlt	.+36     	; 0x388c <ldexp+0x3a>
    3868:	59 f0       	breq	.+22     	; 0x3880 <ldexp+0x2e>
    386a:	88 23       	and	r24, r24
    386c:	32 f0       	brmi	.+12     	; 0x387a <ldexp+0x28>
    386e:	66 0f       	add	r22, r22
    3870:	77 1f       	adc	r23, r23
    3872:	88 1f       	adc	r24, r24
    3874:	91 50       	subi	r25, 0x01	; 1
    3876:	50 40       	sbci	r21, 0x00	; 0
    3878:	c1 f7       	brne	.-16     	; 0x386a <ldexp+0x18>
    387a:	9e 3f       	cpi	r25, 0xFE	; 254
    387c:	51 05       	cpc	r21, r1
    387e:	2c f7       	brge	.-54     	; 0x384a <inverse+0x10>
    3880:	88 0f       	add	r24, r24
    3882:	91 1d       	adc	r25, r1
    3884:	96 95       	lsr	r25
    3886:	87 95       	ror	r24
    3888:	97 f9       	bld	r25, 7
    388a:	08 95       	ret
    388c:	5f 3f       	cpi	r21, 0xFF	; 255
    388e:	ac f0       	brlt	.+42     	; 0x38ba <ldexp+0x68>
    3890:	98 3e       	cpi	r25, 0xE8	; 232
    3892:	9c f0       	brlt	.+38     	; 0x38ba <ldexp+0x68>
    3894:	bb 27       	eor	r27, r27
    3896:	86 95       	lsr	r24
    3898:	77 95       	ror	r23
    389a:	67 95       	ror	r22
    389c:	b7 95       	ror	r27
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <ldexp+0x50>
    38a0:	b1 60       	ori	r27, 0x01	; 1
    38a2:	93 95       	inc	r25
    38a4:	c1 f7       	brne	.-16     	; 0x3896 <ldexp+0x44>
    38a6:	bb 0f       	add	r27, r27
    38a8:	58 f7       	brcc	.-42     	; 0x3880 <ldexp+0x2e>
    38aa:	11 f4       	brne	.+4      	; 0x38b0 <ldexp+0x5e>
    38ac:	60 ff       	sbrs	r22, 0
    38ae:	e8 cf       	rjmp	.-48     	; 0x3880 <ldexp+0x2e>
    38b0:	6f 5f       	subi	r22, 0xFF	; 255
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255
    38b4:	8f 4f       	sbci	r24, 0xFF	; 255
    38b6:	9f 4f       	sbci	r25, 0xFF	; 255
    38b8:	e3 cf       	rjmp	.-58     	; 0x3880 <ldexp+0x2e>
    38ba:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__fp_szero>
    38be:	16 f0       	brts	.+4      	; 0x38c4 <ldexp+0x72>
    38c0:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__fp_mpack>
    38c4:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__fp_nan>
    38c8:	68 94       	set
    38ca:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__fp_inf>

000038ce <log>:
    38ce:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__fp_splitA>
    38d2:	a8 f3       	brcs	.-22     	; 0x38be <ldexp+0x6c>
    38d4:	99 23       	and	r25, r25
    38d6:	c1 f3       	breq	.-16     	; 0x38c8 <ldexp+0x76>
    38d8:	ae f3       	brts	.-22     	; 0x38c4 <ldexp+0x72>
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	1f 93       	push	r17
    38e0:	0f 93       	push	r16
    38e2:	ff 92       	push	r15
    38e4:	c9 2f       	mov	r28, r25
    38e6:	dd 27       	eor	r29, r29
    38e8:	88 23       	and	r24, r24
    38ea:	2a f0       	brmi	.+10     	; 0x38f6 <log+0x28>
    38ec:	21 97       	sbiw	r28, 0x01	; 1
    38ee:	66 0f       	add	r22, r22
    38f0:	77 1f       	adc	r23, r23
    38f2:	88 1f       	adc	r24, r24
    38f4:	da f7       	brpl	.-10     	; 0x38ec <log+0x1e>
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f eb       	ldi	r21, 0xBF	; 191
    38fe:	9f e3       	ldi	r25, 0x3F	; 63
    3900:	88 39       	cpi	r24, 0x98	; 152
    3902:	20 f0       	brcs	.+8      	; 0x390c <log+0x3e>
    3904:	80 3e       	cpi	r24, 0xE0	; 224
    3906:	38 f0       	brcs	.+14     	; 0x3916 <log+0x48>
    3908:	21 96       	adiw	r28, 0x01	; 1
    390a:	8f 77       	andi	r24, 0x7F	; 127
    390c:	0e 94 34 19 	call	0x3268	; 0x3268 <__addsf3>
    3910:	ea e7       	ldi	r30, 0x7A	; 122
    3912:	f2 e0       	ldi	r31, 0x02	; 2
    3914:	04 c0       	rjmp	.+8      	; 0x391e <log+0x50>
    3916:	0e 94 34 19 	call	0x3268	; 0x3268 <__addsf3>
    391a:	e7 ea       	ldi	r30, 0xA7	; 167
    391c:	f2 e0       	ldi	r31, 0x02	; 2
    391e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__fp_powser>
    3922:	8b 01       	movw	r16, r22
    3924:	be 01       	movw	r22, r28
    3926:	ec 01       	movw	r28, r24
    3928:	fb 2e       	mov	r15, r27
    392a:	6f 57       	subi	r22, 0x7F	; 127
    392c:	71 09       	sbc	r23, r1
    392e:	75 95       	asr	r23
    3930:	77 1f       	adc	r23, r23
    3932:	88 0b       	sbc	r24, r24
    3934:	99 0b       	sbc	r25, r25
    3936:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__floatsisf>
    393a:	28 e1       	ldi	r18, 0x18	; 24
    393c:	32 e7       	ldi	r19, 0x72	; 114
    393e:	41 e3       	ldi	r20, 0x31	; 49
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 12 1b 	call	0x3624	; 0x3624 <__mulsf3x>
    3946:	af 2d       	mov	r26, r15
    3948:	98 01       	movw	r18, r16
    394a:	ae 01       	movw	r20, r28
    394c:	ff 90       	pop	r15
    394e:	0f 91       	pop	r16
    3950:	1f 91       	pop	r17
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	0e 94 4b 19 	call	0x3296	; 0x3296 <__addsf3x>
    395a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__fp_round>

0000395e <modf>:
    395e:	fa 01       	movw	r30, r20
    3960:	dc 01       	movw	r26, r24
    3962:	aa 0f       	add	r26, r26
    3964:	bb 1f       	adc	r27, r27
    3966:	9b 01       	movw	r18, r22
    3968:	ac 01       	movw	r20, r24
    396a:	bf 57       	subi	r27, 0x7F	; 127
    396c:	28 f4       	brcc	.+10     	; 0x3978 <modf+0x1a>
    396e:	22 27       	eor	r18, r18
    3970:	33 27       	eor	r19, r19
    3972:	44 27       	eor	r20, r20
    3974:	50 78       	andi	r21, 0x80	; 128
    3976:	20 c0       	rjmp	.+64     	; 0x39b8 <modf+0x5a>
    3978:	b7 51       	subi	r27, 0x17	; 23
    397a:	90 f4       	brcc	.+36     	; 0x39a0 <modf+0x42>
    397c:	ab 2f       	mov	r26, r27
    397e:	00 24       	eor	r0, r0
    3980:	46 95       	lsr	r20
    3982:	37 95       	ror	r19
    3984:	27 95       	ror	r18
    3986:	01 1c       	adc	r0, r1
    3988:	a3 95       	inc	r26
    398a:	d2 f3       	brmi	.-12     	; 0x3980 <modf+0x22>
    398c:	00 20       	and	r0, r0
    398e:	71 f0       	breq	.+28     	; 0x39ac <modf+0x4e>
    3990:	22 0f       	add	r18, r18
    3992:	33 1f       	adc	r19, r19
    3994:	44 1f       	adc	r20, r20
    3996:	b3 95       	inc	r27
    3998:	da f3       	brmi	.-10     	; 0x3990 <modf+0x32>
    399a:	0e d0       	rcall	.+28     	; 0x39b8 <modf+0x5a>
    399c:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__subsf3>
    39a0:	61 30       	cpi	r22, 0x01	; 1
    39a2:	71 05       	cpc	r23, r1
    39a4:	a0 e8       	ldi	r26, 0x80	; 128
    39a6:	8a 07       	cpc	r24, r26
    39a8:	b9 46       	sbci	r27, 0x69	; 105
    39aa:	30 f4       	brcc	.+12     	; 0x39b8 <modf+0x5a>
    39ac:	9b 01       	movw	r18, r22
    39ae:	ac 01       	movw	r20, r24
    39b0:	66 27       	eor	r22, r22
    39b2:	77 27       	eor	r23, r23
    39b4:	88 27       	eor	r24, r24
    39b6:	90 78       	andi	r25, 0x80	; 128
    39b8:	30 96       	adiw	r30, 0x00	; 0
    39ba:	21 f0       	breq	.+8      	; 0x39c4 <modf+0x66>
    39bc:	20 83       	st	Z, r18
    39be:	31 83       	std	Z+1, r19	; 0x01
    39c0:	42 83       	std	Z+2, r20	; 0x02
    39c2:	53 83       	std	Z+3, r21	; 0x03
    39c4:	08 95       	ret

000039c6 <__fp_mpack>:
    39c6:	9f 3f       	cpi	r25, 0xFF	; 255
    39c8:	31 f0       	breq	.+12     	; 0x39d6 <__fp_mpack_finite+0xc>

000039ca <__fp_mpack_finite>:
    39ca:	91 50       	subi	r25, 0x01	; 1
    39cc:	20 f4       	brcc	.+8      	; 0x39d6 <__fp_mpack_finite+0xc>
    39ce:	87 95       	ror	r24
    39d0:	77 95       	ror	r23
    39d2:	67 95       	ror	r22
    39d4:	b7 95       	ror	r27
    39d6:	88 0f       	add	r24, r24
    39d8:	91 1d       	adc	r25, r1
    39da:	96 95       	lsr	r25
    39dc:	87 95       	ror	r24
    39de:	97 f9       	bld	r25, 7
    39e0:	08 95       	ret

000039e2 <vfprintf>:
    39e2:	a0 e1       	ldi	r26, 0x10	; 16
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	e7 ef       	ldi	r30, 0xF7	; 247
    39e8:	fc e1       	ldi	r31, 0x1C	; 28
    39ea:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__prologue_saves__>
    39ee:	7c 01       	movw	r14, r24
    39f0:	1b 01       	movw	r2, r22
    39f2:	6a 01       	movw	r12, r20
    39f4:	fc 01       	movw	r30, r24
    39f6:	17 82       	std	Z+7, r1	; 0x07
    39f8:	16 82       	std	Z+6, r1	; 0x06
    39fa:	83 81       	ldd	r24, Z+3	; 0x03
    39fc:	81 ff       	sbrs	r24, 1
    39fe:	44 c3       	rjmp	.+1672   	; 0x4088 <vfprintf+0x6a6>
    3a00:	9e 01       	movw	r18, r28
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	39 01       	movw	r6, r18
    3a08:	f7 01       	movw	r30, r14
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	f1 01       	movw	r30, r2
    3a0e:	93 fd       	sbrc	r25, 3
    3a10:	85 91       	lpm	r24, Z+
    3a12:	93 ff       	sbrs	r25, 3
    3a14:	81 91       	ld	r24, Z+
    3a16:	1f 01       	movw	r2, r30
    3a18:	88 23       	and	r24, r24
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <vfprintf+0x3c>
    3a1c:	31 c3       	rjmp	.+1634   	; 0x4080 <vfprintf+0x69e>
    3a1e:	85 32       	cpi	r24, 0x25	; 37
    3a20:	39 f4       	brne	.+14     	; 0x3a30 <vfprintf+0x4e>
    3a22:	93 fd       	sbrc	r25, 3
    3a24:	85 91       	lpm	r24, Z+
    3a26:	93 ff       	sbrs	r25, 3
    3a28:	81 91       	ld	r24, Z+
    3a2a:	1f 01       	movw	r2, r30
    3a2c:	85 32       	cpi	r24, 0x25	; 37
    3a2e:	39 f4       	brne	.+14     	; 0x3a3e <vfprintf+0x5c>
    3a30:	b7 01       	movw	r22, r14
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3a38:	56 01       	movw	r10, r12
    3a3a:	65 01       	movw	r12, r10
    3a3c:	e5 cf       	rjmp	.-54     	; 0x3a08 <vfprintf+0x26>
    3a3e:	10 e0       	ldi	r17, 0x00	; 0
    3a40:	51 2c       	mov	r5, r1
    3a42:	91 2c       	mov	r9, r1
    3a44:	ff e1       	ldi	r31, 0x1F	; 31
    3a46:	f9 15       	cp	r31, r9
    3a48:	d8 f0       	brcs	.+54     	; 0x3a80 <vfprintf+0x9e>
    3a4a:	8b 32       	cpi	r24, 0x2B	; 43
    3a4c:	79 f0       	breq	.+30     	; 0x3a6c <vfprintf+0x8a>
    3a4e:	38 f4       	brcc	.+14     	; 0x3a5e <vfprintf+0x7c>
    3a50:	80 32       	cpi	r24, 0x20	; 32
    3a52:	79 f0       	breq	.+30     	; 0x3a72 <vfprintf+0x90>
    3a54:	83 32       	cpi	r24, 0x23	; 35
    3a56:	a1 f4       	brne	.+40     	; 0x3a80 <vfprintf+0x9e>
    3a58:	f9 2d       	mov	r31, r9
    3a5a:	f0 61       	ori	r31, 0x10	; 16
    3a5c:	2e c0       	rjmp	.+92     	; 0x3aba <vfprintf+0xd8>
    3a5e:	8d 32       	cpi	r24, 0x2D	; 45
    3a60:	61 f0       	breq	.+24     	; 0x3a7a <vfprintf+0x98>
    3a62:	80 33       	cpi	r24, 0x30	; 48
    3a64:	69 f4       	brne	.+26     	; 0x3a80 <vfprintf+0x9e>
    3a66:	29 2d       	mov	r18, r9
    3a68:	21 60       	ori	r18, 0x01	; 1
    3a6a:	2d c0       	rjmp	.+90     	; 0x3ac6 <vfprintf+0xe4>
    3a6c:	39 2d       	mov	r19, r9
    3a6e:	32 60       	ori	r19, 0x02	; 2
    3a70:	93 2e       	mov	r9, r19
    3a72:	89 2d       	mov	r24, r9
    3a74:	84 60       	ori	r24, 0x04	; 4
    3a76:	98 2e       	mov	r9, r24
    3a78:	2a c0       	rjmp	.+84     	; 0x3ace <vfprintf+0xec>
    3a7a:	e9 2d       	mov	r30, r9
    3a7c:	e8 60       	ori	r30, 0x08	; 8
    3a7e:	15 c0       	rjmp	.+42     	; 0x3aaa <vfprintf+0xc8>
    3a80:	97 fc       	sbrc	r9, 7
    3a82:	2d c0       	rjmp	.+90     	; 0x3ade <vfprintf+0xfc>
    3a84:	20 ed       	ldi	r18, 0xD0	; 208
    3a86:	28 0f       	add	r18, r24
    3a88:	2a 30       	cpi	r18, 0x0A	; 10
    3a8a:	88 f4       	brcc	.+34     	; 0x3aae <vfprintf+0xcc>
    3a8c:	96 fe       	sbrs	r9, 6
    3a8e:	06 c0       	rjmp	.+12     	; 0x3a9c <vfprintf+0xba>
    3a90:	3a e0       	ldi	r19, 0x0A	; 10
    3a92:	13 9f       	mul	r17, r19
    3a94:	20 0d       	add	r18, r0
    3a96:	11 24       	eor	r1, r1
    3a98:	12 2f       	mov	r17, r18
    3a9a:	19 c0       	rjmp	.+50     	; 0x3ace <vfprintf+0xec>
    3a9c:	8a e0       	ldi	r24, 0x0A	; 10
    3a9e:	58 9e       	mul	r5, r24
    3aa0:	20 0d       	add	r18, r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	52 2e       	mov	r5, r18
    3aa6:	e9 2d       	mov	r30, r9
    3aa8:	e0 62       	ori	r30, 0x20	; 32
    3aaa:	9e 2e       	mov	r9, r30
    3aac:	10 c0       	rjmp	.+32     	; 0x3ace <vfprintf+0xec>
    3aae:	8e 32       	cpi	r24, 0x2E	; 46
    3ab0:	31 f4       	brne	.+12     	; 0x3abe <vfprintf+0xdc>
    3ab2:	96 fc       	sbrc	r9, 6
    3ab4:	e5 c2       	rjmp	.+1482   	; 0x4080 <vfprintf+0x69e>
    3ab6:	f9 2d       	mov	r31, r9
    3ab8:	f0 64       	ori	r31, 0x40	; 64
    3aba:	9f 2e       	mov	r9, r31
    3abc:	08 c0       	rjmp	.+16     	; 0x3ace <vfprintf+0xec>
    3abe:	8c 36       	cpi	r24, 0x6C	; 108
    3ac0:	21 f4       	brne	.+8      	; 0x3aca <vfprintf+0xe8>
    3ac2:	29 2d       	mov	r18, r9
    3ac4:	20 68       	ori	r18, 0x80	; 128
    3ac6:	92 2e       	mov	r9, r18
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <vfprintf+0xec>
    3aca:	88 36       	cpi	r24, 0x68	; 104
    3acc:	41 f4       	brne	.+16     	; 0x3ade <vfprintf+0xfc>
    3ace:	f1 01       	movw	r30, r2
    3ad0:	93 fd       	sbrc	r25, 3
    3ad2:	85 91       	lpm	r24, Z+
    3ad4:	93 ff       	sbrs	r25, 3
    3ad6:	81 91       	ld	r24, Z+
    3ad8:	1f 01       	movw	r2, r30
    3ada:	81 11       	cpse	r24, r1
    3adc:	b3 cf       	rjmp	.-154    	; 0x3a44 <vfprintf+0x62>
    3ade:	9b eb       	ldi	r25, 0xBB	; 187
    3ae0:	98 0f       	add	r25, r24
    3ae2:	93 30       	cpi	r25, 0x03	; 3
    3ae4:	20 f4       	brcc	.+8      	; 0x3aee <vfprintf+0x10c>
    3ae6:	99 2d       	mov	r25, r9
    3ae8:	90 61       	ori	r25, 0x10	; 16
    3aea:	80 5e       	subi	r24, 0xE0	; 224
    3aec:	07 c0       	rjmp	.+14     	; 0x3afc <vfprintf+0x11a>
    3aee:	9b e9       	ldi	r25, 0x9B	; 155
    3af0:	98 0f       	add	r25, r24
    3af2:	93 30       	cpi	r25, 0x03	; 3
    3af4:	08 f0       	brcs	.+2      	; 0x3af8 <vfprintf+0x116>
    3af6:	66 c1       	rjmp	.+716    	; 0x3dc4 <vfprintf+0x3e2>
    3af8:	99 2d       	mov	r25, r9
    3afa:	9f 7e       	andi	r25, 0xEF	; 239
    3afc:	96 ff       	sbrs	r25, 6
    3afe:	16 e0       	ldi	r17, 0x06	; 6
    3b00:	9f 73       	andi	r25, 0x3F	; 63
    3b02:	99 2e       	mov	r9, r25
    3b04:	85 36       	cpi	r24, 0x65	; 101
    3b06:	19 f4       	brne	.+6      	; 0x3b0e <vfprintf+0x12c>
    3b08:	90 64       	ori	r25, 0x40	; 64
    3b0a:	99 2e       	mov	r9, r25
    3b0c:	08 c0       	rjmp	.+16     	; 0x3b1e <vfprintf+0x13c>
    3b0e:	86 36       	cpi	r24, 0x66	; 102
    3b10:	21 f4       	brne	.+8      	; 0x3b1a <vfprintf+0x138>
    3b12:	39 2f       	mov	r19, r25
    3b14:	30 68       	ori	r19, 0x80	; 128
    3b16:	93 2e       	mov	r9, r19
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <vfprintf+0x13c>
    3b1a:	11 11       	cpse	r17, r1
    3b1c:	11 50       	subi	r17, 0x01	; 1
    3b1e:	97 fe       	sbrs	r9, 7
    3b20:	07 c0       	rjmp	.+14     	; 0x3b30 <vfprintf+0x14e>
    3b22:	1c 33       	cpi	r17, 0x3C	; 60
    3b24:	50 f4       	brcc	.+20     	; 0x3b3a <vfprintf+0x158>
    3b26:	44 24       	eor	r4, r4
    3b28:	43 94       	inc	r4
    3b2a:	41 0e       	add	r4, r17
    3b2c:	27 e0       	ldi	r18, 0x07	; 7
    3b2e:	0b c0       	rjmp	.+22     	; 0x3b46 <vfprintf+0x164>
    3b30:	18 30       	cpi	r17, 0x08	; 8
    3b32:	38 f0       	brcs	.+14     	; 0x3b42 <vfprintf+0x160>
    3b34:	27 e0       	ldi	r18, 0x07	; 7
    3b36:	17 e0       	ldi	r17, 0x07	; 7
    3b38:	05 c0       	rjmp	.+10     	; 0x3b44 <vfprintf+0x162>
    3b3a:	27 e0       	ldi	r18, 0x07	; 7
    3b3c:	9c e3       	ldi	r25, 0x3C	; 60
    3b3e:	49 2e       	mov	r4, r25
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <vfprintf+0x164>
    3b42:	21 2f       	mov	r18, r17
    3b44:	41 2c       	mov	r4, r1
    3b46:	56 01       	movw	r10, r12
    3b48:	84 e0       	ldi	r24, 0x04	; 4
    3b4a:	a8 0e       	add	r10, r24
    3b4c:	b1 1c       	adc	r11, r1
    3b4e:	f6 01       	movw	r30, r12
    3b50:	60 81       	ld	r22, Z
    3b52:	71 81       	ldd	r23, Z+1	; 0x01
    3b54:	82 81       	ldd	r24, Z+2	; 0x02
    3b56:	93 81       	ldd	r25, Z+3	; 0x03
    3b58:	04 2d       	mov	r16, r4
    3b5a:	a3 01       	movw	r20, r6
    3b5c:	0e 94 04 21 	call	0x4208	; 0x4208 <__ftoa_engine>
    3b60:	6c 01       	movw	r12, r24
    3b62:	f9 81       	ldd	r31, Y+1	; 0x01
    3b64:	fc 87       	std	Y+12, r31	; 0x0c
    3b66:	f0 ff       	sbrs	r31, 0
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <vfprintf+0x18c>
    3b6a:	f3 ff       	sbrs	r31, 3
    3b6c:	06 c0       	rjmp	.+12     	; 0x3b7a <vfprintf+0x198>
    3b6e:	91 fc       	sbrc	r9, 1
    3b70:	06 c0       	rjmp	.+12     	; 0x3b7e <vfprintf+0x19c>
    3b72:	92 fe       	sbrs	r9, 2
    3b74:	06 c0       	rjmp	.+12     	; 0x3b82 <vfprintf+0x1a0>
    3b76:	00 e2       	ldi	r16, 0x20	; 32
    3b78:	05 c0       	rjmp	.+10     	; 0x3b84 <vfprintf+0x1a2>
    3b7a:	0d e2       	ldi	r16, 0x2D	; 45
    3b7c:	03 c0       	rjmp	.+6      	; 0x3b84 <vfprintf+0x1a2>
    3b7e:	0b e2       	ldi	r16, 0x2B	; 43
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <vfprintf+0x1a2>
    3b82:	00 e0       	ldi	r16, 0x00	; 0
    3b84:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b86:	8c 70       	andi	r24, 0x0C	; 12
    3b88:	19 f0       	breq	.+6      	; 0x3b90 <vfprintf+0x1ae>
    3b8a:	01 11       	cpse	r16, r1
    3b8c:	5a c2       	rjmp	.+1204   	; 0x4042 <vfprintf+0x660>
    3b8e:	9b c2       	rjmp	.+1334   	; 0x40c6 <vfprintf+0x6e4>
    3b90:	97 fe       	sbrs	r9, 7
    3b92:	10 c0       	rjmp	.+32     	; 0x3bb4 <vfprintf+0x1d2>
    3b94:	4c 0c       	add	r4, r12
    3b96:	fc 85       	ldd	r31, Y+12	; 0x0c
    3b98:	f4 ff       	sbrs	r31, 4
    3b9a:	04 c0       	rjmp	.+8      	; 0x3ba4 <vfprintf+0x1c2>
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	81 33       	cpi	r24, 0x31	; 49
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <vfprintf+0x1c2>
    3ba2:	4a 94       	dec	r4
    3ba4:	14 14       	cp	r1, r4
    3ba6:	74 f5       	brge	.+92     	; 0x3c04 <vfprintf+0x222>
    3ba8:	28 e0       	ldi	r18, 0x08	; 8
    3baa:	24 15       	cp	r18, r4
    3bac:	78 f5       	brcc	.+94     	; 0x3c0c <vfprintf+0x22a>
    3bae:	88 e0       	ldi	r24, 0x08	; 8
    3bb0:	48 2e       	mov	r4, r24
    3bb2:	2c c0       	rjmp	.+88     	; 0x3c0c <vfprintf+0x22a>
    3bb4:	96 fc       	sbrc	r9, 6
    3bb6:	2a c0       	rjmp	.+84     	; 0x3c0c <vfprintf+0x22a>
    3bb8:	81 2f       	mov	r24, r17
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	8c 15       	cp	r24, r12
    3bbe:	9d 05       	cpc	r25, r13
    3bc0:	9c f0       	brlt	.+38     	; 0x3be8 <vfprintf+0x206>
    3bc2:	3c ef       	ldi	r19, 0xFC	; 252
    3bc4:	c3 16       	cp	r12, r19
    3bc6:	3f ef       	ldi	r19, 0xFF	; 255
    3bc8:	d3 06       	cpc	r13, r19
    3bca:	74 f0       	brlt	.+28     	; 0x3be8 <vfprintf+0x206>
    3bcc:	89 2d       	mov	r24, r9
    3bce:	80 68       	ori	r24, 0x80	; 128
    3bd0:	98 2e       	mov	r9, r24
    3bd2:	0a c0       	rjmp	.+20     	; 0x3be8 <vfprintf+0x206>
    3bd4:	e2 e0       	ldi	r30, 0x02	; 2
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	ec 0f       	add	r30, r28
    3bda:	fd 1f       	adc	r31, r29
    3bdc:	e1 0f       	add	r30, r17
    3bde:	f1 1d       	adc	r31, r1
    3be0:	80 81       	ld	r24, Z
    3be2:	80 33       	cpi	r24, 0x30	; 48
    3be4:	19 f4       	brne	.+6      	; 0x3bec <vfprintf+0x20a>
    3be6:	11 50       	subi	r17, 0x01	; 1
    3be8:	11 11       	cpse	r17, r1
    3bea:	f4 cf       	rjmp	.-24     	; 0x3bd4 <vfprintf+0x1f2>
    3bec:	97 fe       	sbrs	r9, 7
    3bee:	0e c0       	rjmp	.+28     	; 0x3c0c <vfprintf+0x22a>
    3bf0:	44 24       	eor	r4, r4
    3bf2:	43 94       	inc	r4
    3bf4:	41 0e       	add	r4, r17
    3bf6:	81 2f       	mov	r24, r17
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	c8 16       	cp	r12, r24
    3bfc:	d9 06       	cpc	r13, r25
    3bfe:	2c f4       	brge	.+10     	; 0x3c0a <vfprintf+0x228>
    3c00:	1c 19       	sub	r17, r12
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <vfprintf+0x22a>
    3c04:	44 24       	eor	r4, r4
    3c06:	43 94       	inc	r4
    3c08:	01 c0       	rjmp	.+2      	; 0x3c0c <vfprintf+0x22a>
    3c0a:	10 e0       	ldi	r17, 0x00	; 0
    3c0c:	97 fe       	sbrs	r9, 7
    3c0e:	06 c0       	rjmp	.+12     	; 0x3c1c <vfprintf+0x23a>
    3c10:	1c 14       	cp	r1, r12
    3c12:	1d 04       	cpc	r1, r13
    3c14:	34 f4       	brge	.+12     	; 0x3c22 <vfprintf+0x240>
    3c16:	c6 01       	movw	r24, r12
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	05 c0       	rjmp	.+10     	; 0x3c26 <vfprintf+0x244>
    3c1c:	85 e0       	ldi	r24, 0x05	; 5
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <vfprintf+0x244>
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	01 11       	cpse	r16, r1
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	11 23       	and	r17, r17
    3c2c:	31 f0       	breq	.+12     	; 0x3c3a <vfprintf+0x258>
    3c2e:	21 2f       	mov	r18, r17
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	2f 5f       	subi	r18, 0xFF	; 255
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	25 2d       	mov	r18, r5
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	82 17       	cp	r24, r18
    3c40:	93 07       	cpc	r25, r19
    3c42:	14 f4       	brge	.+4      	; 0x3c48 <vfprintf+0x266>
    3c44:	58 1a       	sub	r5, r24
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <vfprintf+0x268>
    3c48:	51 2c       	mov	r5, r1
    3c4a:	89 2d       	mov	r24, r9
    3c4c:	89 70       	andi	r24, 0x09	; 9
    3c4e:	49 f4       	brne	.+18     	; 0x3c62 <vfprintf+0x280>
    3c50:	55 20       	and	r5, r5
    3c52:	39 f0       	breq	.+14     	; 0x3c62 <vfprintf+0x280>
    3c54:	b7 01       	movw	r22, r14
    3c56:	80 e2       	ldi	r24, 0x20	; 32
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3c5e:	5a 94       	dec	r5
    3c60:	f7 cf       	rjmp	.-18     	; 0x3c50 <vfprintf+0x26e>
    3c62:	00 23       	and	r16, r16
    3c64:	29 f0       	breq	.+10     	; 0x3c70 <vfprintf+0x28e>
    3c66:	b7 01       	movw	r22, r14
    3c68:	80 2f       	mov	r24, r16
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3c70:	93 fc       	sbrc	r9, 3
    3c72:	09 c0       	rjmp	.+18     	; 0x3c86 <vfprintf+0x2a4>
    3c74:	55 20       	and	r5, r5
    3c76:	39 f0       	breq	.+14     	; 0x3c86 <vfprintf+0x2a4>
    3c78:	b7 01       	movw	r22, r14
    3c7a:	80 e3       	ldi	r24, 0x30	; 48
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3c82:	5a 94       	dec	r5
    3c84:	f7 cf       	rjmp	.-18     	; 0x3c74 <vfprintf+0x292>
    3c86:	97 fe       	sbrs	r9, 7
    3c88:	4c c0       	rjmp	.+152    	; 0x3d22 <vfprintf+0x340>
    3c8a:	46 01       	movw	r8, r12
    3c8c:	d7 fe       	sbrs	r13, 7
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <vfprintf+0x2b2>
    3c90:	81 2c       	mov	r8, r1
    3c92:	91 2c       	mov	r9, r1
    3c94:	c6 01       	movw	r24, r12
    3c96:	88 19       	sub	r24, r8
    3c98:	99 09       	sbc	r25, r9
    3c9a:	f3 01       	movw	r30, r6
    3c9c:	e8 0f       	add	r30, r24
    3c9e:	f9 1f       	adc	r31, r25
    3ca0:	fe 87       	std	Y+14, r31	; 0x0e
    3ca2:	ed 87       	std	Y+13, r30	; 0x0d
    3ca4:	96 01       	movw	r18, r12
    3ca6:	24 19       	sub	r18, r4
    3ca8:	31 09       	sbc	r19, r1
    3caa:	38 8b       	std	Y+16, r19	; 0x10
    3cac:	2f 87       	std	Y+15, r18	; 0x0f
    3cae:	01 2f       	mov	r16, r17
    3cb0:	10 e0       	ldi	r17, 0x00	; 0
    3cb2:	11 95       	neg	r17
    3cb4:	01 95       	neg	r16
    3cb6:	11 09       	sbc	r17, r1
    3cb8:	3f ef       	ldi	r19, 0xFF	; 255
    3cba:	83 16       	cp	r8, r19
    3cbc:	93 06       	cpc	r9, r19
    3cbe:	29 f4       	brne	.+10     	; 0x3cca <vfprintf+0x2e8>
    3cc0:	b7 01       	movw	r22, r14
    3cc2:	8e e2       	ldi	r24, 0x2E	; 46
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3cca:	c8 14       	cp	r12, r8
    3ccc:	d9 04       	cpc	r13, r9
    3cce:	4c f0       	brlt	.+18     	; 0x3ce2 <vfprintf+0x300>
    3cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd2:	98 89       	ldd	r25, Y+16	; 0x10
    3cd4:	88 15       	cp	r24, r8
    3cd6:	99 05       	cpc	r25, r9
    3cd8:	24 f4       	brge	.+8      	; 0x3ce2 <vfprintf+0x300>
    3cda:	ed 85       	ldd	r30, Y+13	; 0x0d
    3cdc:	fe 85       	ldd	r31, Y+14	; 0x0e
    3cde:	81 81       	ldd	r24, Z+1	; 0x01
    3ce0:	01 c0       	rjmp	.+2      	; 0x3ce4 <vfprintf+0x302>
    3ce2:	80 e3       	ldi	r24, 0x30	; 48
    3ce4:	f1 e0       	ldi	r31, 0x01	; 1
    3ce6:	8f 1a       	sub	r8, r31
    3ce8:	91 08       	sbc	r9, r1
    3cea:	2d 85       	ldd	r18, Y+13	; 0x0d
    3cec:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
    3cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf2:	3e 87       	std	Y+14, r19	; 0x0e
    3cf4:	2d 87       	std	Y+13, r18	; 0x0d
    3cf6:	80 16       	cp	r8, r16
    3cf8:	91 06       	cpc	r9, r17
    3cfa:	2c f0       	brlt	.+10     	; 0x3d06 <vfprintf+0x324>
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d04:	d9 cf       	rjmp	.-78     	; 0x3cb8 <vfprintf+0x2d6>
    3d06:	c8 14       	cp	r12, r8
    3d08:	d9 04       	cpc	r13, r9
    3d0a:	41 f4       	brne	.+16     	; 0x3d1c <vfprintf+0x33a>
    3d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0e:	96 33       	cpi	r25, 0x36	; 54
    3d10:	20 f4       	brcc	.+8      	; 0x3d1a <vfprintf+0x338>
    3d12:	95 33       	cpi	r25, 0x35	; 53
    3d14:	19 f4       	brne	.+6      	; 0x3d1c <vfprintf+0x33a>
    3d16:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d18:	34 ff       	sbrs	r19, 4
    3d1a:	81 e3       	ldi	r24, 0x31	; 49
    3d1c:	b7 01       	movw	r22, r14
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	4e c0       	rjmp	.+156    	; 0x3dbe <vfprintf+0x3dc>
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	81 33       	cpi	r24, 0x31	; 49
    3d26:	19 f0       	breq	.+6      	; 0x3d2e <vfprintf+0x34c>
    3d28:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d2a:	9f 7e       	andi	r25, 0xEF	; 239
    3d2c:	9c 87       	std	Y+12, r25	; 0x0c
    3d2e:	b7 01       	movw	r22, r14
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d36:	11 11       	cpse	r17, r1
    3d38:	05 c0       	rjmp	.+10     	; 0x3d44 <vfprintf+0x362>
    3d3a:	94 fc       	sbrc	r9, 4
    3d3c:	18 c0       	rjmp	.+48     	; 0x3d6e <vfprintf+0x38c>
    3d3e:	85 e6       	ldi	r24, 0x65	; 101
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	17 c0       	rjmp	.+46     	; 0x3d72 <vfprintf+0x390>
    3d44:	b7 01       	movw	r22, r14
    3d46:	8e e2       	ldi	r24, 0x2E	; 46
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d4e:	1e 5f       	subi	r17, 0xFE	; 254
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	01 e0       	ldi	r16, 0x01	; 1
    3d54:	08 0f       	add	r16, r24
    3d56:	f3 01       	movw	r30, r6
    3d58:	e8 0f       	add	r30, r24
    3d5a:	f1 1d       	adc	r31, r1
    3d5c:	80 81       	ld	r24, Z
    3d5e:	b7 01       	movw	r22, r14
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d66:	80 2f       	mov	r24, r16
    3d68:	01 13       	cpse	r16, r17
    3d6a:	f3 cf       	rjmp	.-26     	; 0x3d52 <vfprintf+0x370>
    3d6c:	e6 cf       	rjmp	.-52     	; 0x3d3a <vfprintf+0x358>
    3d6e:	85 e4       	ldi	r24, 0x45	; 69
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	b7 01       	movw	r22, r14
    3d74:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d78:	d7 fc       	sbrc	r13, 7
    3d7a:	06 c0       	rjmp	.+12     	; 0x3d88 <vfprintf+0x3a6>
    3d7c:	c1 14       	cp	r12, r1
    3d7e:	d1 04       	cpc	r13, r1
    3d80:	41 f4       	brne	.+16     	; 0x3d92 <vfprintf+0x3b0>
    3d82:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d84:	e4 ff       	sbrs	r30, 4
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <vfprintf+0x3b0>
    3d88:	d1 94       	neg	r13
    3d8a:	c1 94       	neg	r12
    3d8c:	d1 08       	sbc	r13, r1
    3d8e:	8d e2       	ldi	r24, 0x2D	; 45
    3d90:	01 c0       	rjmp	.+2      	; 0x3d94 <vfprintf+0x3b2>
    3d92:	8b e2       	ldi	r24, 0x2B	; 43
    3d94:	b7 01       	movw	r22, r14
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3d9c:	80 e3       	ldi	r24, 0x30	; 48
    3d9e:	2a e0       	ldi	r18, 0x0A	; 10
    3da0:	c2 16       	cp	r12, r18
    3da2:	d1 04       	cpc	r13, r1
    3da4:	2c f0       	brlt	.+10     	; 0x3db0 <vfprintf+0x3ce>
    3da6:	8f 5f       	subi	r24, 0xFF	; 255
    3da8:	fa e0       	ldi	r31, 0x0A	; 10
    3daa:	cf 1a       	sub	r12, r31
    3dac:	d1 08       	sbc	r13, r1
    3dae:	f7 cf       	rjmp	.-18     	; 0x3d9e <vfprintf+0x3bc>
    3db0:	b7 01       	movw	r22, r14
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3db8:	b7 01       	movw	r22, r14
    3dba:	c6 01       	movw	r24, r12
    3dbc:	c0 96       	adiw	r24, 0x30	; 48
    3dbe:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3dc2:	54 c1       	rjmp	.+680    	; 0x406c <vfprintf+0x68a>
    3dc4:	83 36       	cpi	r24, 0x63	; 99
    3dc6:	31 f0       	breq	.+12     	; 0x3dd4 <vfprintf+0x3f2>
    3dc8:	83 37       	cpi	r24, 0x73	; 115
    3dca:	79 f0       	breq	.+30     	; 0x3dea <vfprintf+0x408>
    3dcc:	83 35       	cpi	r24, 0x53	; 83
    3dce:	09 f0       	breq	.+2      	; 0x3dd2 <vfprintf+0x3f0>
    3dd0:	56 c0       	rjmp	.+172    	; 0x3e7e <vfprintf+0x49c>
    3dd2:	20 c0       	rjmp	.+64     	; 0x3e14 <vfprintf+0x432>
    3dd4:	56 01       	movw	r10, r12
    3dd6:	32 e0       	ldi	r19, 0x02	; 2
    3dd8:	a3 0e       	add	r10, r19
    3dda:	b1 1c       	adc	r11, r1
    3ddc:	f6 01       	movw	r30, r12
    3dde:	80 81       	ld	r24, Z
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	01 e0       	ldi	r16, 0x01	; 1
    3de4:	10 e0       	ldi	r17, 0x00	; 0
    3de6:	63 01       	movw	r12, r6
    3de8:	12 c0       	rjmp	.+36     	; 0x3e0e <vfprintf+0x42c>
    3dea:	56 01       	movw	r10, r12
    3dec:	f2 e0       	ldi	r31, 0x02	; 2
    3dee:	af 0e       	add	r10, r31
    3df0:	b1 1c       	adc	r11, r1
    3df2:	f6 01       	movw	r30, r12
    3df4:	c0 80       	ld	r12, Z
    3df6:	d1 80       	ldd	r13, Z+1	; 0x01
    3df8:	96 fe       	sbrs	r9, 6
    3dfa:	03 c0       	rjmp	.+6      	; 0x3e02 <vfprintf+0x420>
    3dfc:	61 2f       	mov	r22, r17
    3dfe:	70 e0       	ldi	r23, 0x00	; 0
    3e00:	02 c0       	rjmp	.+4      	; 0x3e06 <vfprintf+0x424>
    3e02:	6f ef       	ldi	r22, 0xFF	; 255
    3e04:	7f ef       	ldi	r23, 0xFF	; 255
    3e06:	c6 01       	movw	r24, r12
    3e08:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <strnlen>
    3e0c:	8c 01       	movw	r16, r24
    3e0e:	f9 2d       	mov	r31, r9
    3e10:	ff 77       	andi	r31, 0x7F	; 127
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <vfprintf+0x45a>
    3e14:	56 01       	movw	r10, r12
    3e16:	22 e0       	ldi	r18, 0x02	; 2
    3e18:	a2 0e       	add	r10, r18
    3e1a:	b1 1c       	adc	r11, r1
    3e1c:	f6 01       	movw	r30, r12
    3e1e:	c0 80       	ld	r12, Z
    3e20:	d1 80       	ldd	r13, Z+1	; 0x01
    3e22:	96 fe       	sbrs	r9, 6
    3e24:	03 c0       	rjmp	.+6      	; 0x3e2c <vfprintf+0x44a>
    3e26:	61 2f       	mov	r22, r17
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <vfprintf+0x44e>
    3e2c:	6f ef       	ldi	r22, 0xFF	; 255
    3e2e:	7f ef       	ldi	r23, 0xFF	; 255
    3e30:	c6 01       	movw	r24, r12
    3e32:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <strnlen_P>
    3e36:	8c 01       	movw	r16, r24
    3e38:	f9 2d       	mov	r31, r9
    3e3a:	f0 68       	ori	r31, 0x80	; 128
    3e3c:	9f 2e       	mov	r9, r31
    3e3e:	f3 fd       	sbrc	r31, 3
    3e40:	1a c0       	rjmp	.+52     	; 0x3e76 <vfprintf+0x494>
    3e42:	85 2d       	mov	r24, r5
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	08 17       	cp	r16, r24
    3e48:	19 07       	cpc	r17, r25
    3e4a:	a8 f4       	brcc	.+42     	; 0x3e76 <vfprintf+0x494>
    3e4c:	b7 01       	movw	r22, r14
    3e4e:	80 e2       	ldi	r24, 0x20	; 32
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3e56:	5a 94       	dec	r5
    3e58:	f4 cf       	rjmp	.-24     	; 0x3e42 <vfprintf+0x460>
    3e5a:	f6 01       	movw	r30, r12
    3e5c:	97 fc       	sbrc	r9, 7
    3e5e:	85 91       	lpm	r24, Z+
    3e60:	97 fe       	sbrs	r9, 7
    3e62:	81 91       	ld	r24, Z+
    3e64:	6f 01       	movw	r12, r30
    3e66:	b7 01       	movw	r22, r14
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3e6e:	51 10       	cpse	r5, r1
    3e70:	5a 94       	dec	r5
    3e72:	01 50       	subi	r16, 0x01	; 1
    3e74:	11 09       	sbc	r17, r1
    3e76:	01 15       	cp	r16, r1
    3e78:	11 05       	cpc	r17, r1
    3e7a:	79 f7       	brne	.-34     	; 0x3e5a <vfprintf+0x478>
    3e7c:	f7 c0       	rjmp	.+494    	; 0x406c <vfprintf+0x68a>
    3e7e:	84 36       	cpi	r24, 0x64	; 100
    3e80:	11 f0       	breq	.+4      	; 0x3e86 <vfprintf+0x4a4>
    3e82:	89 36       	cpi	r24, 0x69	; 105
    3e84:	61 f5       	brne	.+88     	; 0x3ede <vfprintf+0x4fc>
    3e86:	56 01       	movw	r10, r12
    3e88:	97 fe       	sbrs	r9, 7
    3e8a:	09 c0       	rjmp	.+18     	; 0x3e9e <vfprintf+0x4bc>
    3e8c:	24 e0       	ldi	r18, 0x04	; 4
    3e8e:	a2 0e       	add	r10, r18
    3e90:	b1 1c       	adc	r11, r1
    3e92:	f6 01       	movw	r30, r12
    3e94:	60 81       	ld	r22, Z
    3e96:	71 81       	ldd	r23, Z+1	; 0x01
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	0a c0       	rjmp	.+20     	; 0x3eb2 <vfprintf+0x4d0>
    3e9e:	f2 e0       	ldi	r31, 0x02	; 2
    3ea0:	af 0e       	add	r10, r31
    3ea2:	b1 1c       	adc	r11, r1
    3ea4:	f6 01       	movw	r30, r12
    3ea6:	60 81       	ld	r22, Z
    3ea8:	71 81       	ldd	r23, Z+1	; 0x01
    3eaa:	07 2e       	mov	r0, r23
    3eac:	00 0c       	add	r0, r0
    3eae:	88 0b       	sbc	r24, r24
    3eb0:	99 0b       	sbc	r25, r25
    3eb2:	f9 2d       	mov	r31, r9
    3eb4:	ff 76       	andi	r31, 0x6F	; 111
    3eb6:	9f 2e       	mov	r9, r31
    3eb8:	97 ff       	sbrs	r25, 7
    3eba:	09 c0       	rjmp	.+18     	; 0x3ece <vfprintf+0x4ec>
    3ebc:	90 95       	com	r25
    3ebe:	80 95       	com	r24
    3ec0:	70 95       	com	r23
    3ec2:	61 95       	neg	r22
    3ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	f0 68       	ori	r31, 0x80	; 128
    3ecc:	9f 2e       	mov	r9, r31
    3ece:	2a e0       	ldi	r18, 0x0A	; 10
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	a3 01       	movw	r20, r6
    3ed4:	0e 94 57 22 	call	0x44ae	; 0x44ae <__ultoa_invert>
    3ed8:	c8 2e       	mov	r12, r24
    3eda:	c6 18       	sub	r12, r6
    3edc:	3f c0       	rjmp	.+126    	; 0x3f5c <vfprintf+0x57a>
    3ede:	09 2d       	mov	r16, r9
    3ee0:	85 37       	cpi	r24, 0x75	; 117
    3ee2:	21 f4       	brne	.+8      	; 0x3eec <vfprintf+0x50a>
    3ee4:	0f 7e       	andi	r16, 0xEF	; 239
    3ee6:	2a e0       	ldi	r18, 0x0A	; 10
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	1d c0       	rjmp	.+58     	; 0x3f26 <vfprintf+0x544>
    3eec:	09 7f       	andi	r16, 0xF9	; 249
    3eee:	8f 36       	cpi	r24, 0x6F	; 111
    3ef0:	91 f0       	breq	.+36     	; 0x3f16 <vfprintf+0x534>
    3ef2:	18 f4       	brcc	.+6      	; 0x3efa <vfprintf+0x518>
    3ef4:	88 35       	cpi	r24, 0x58	; 88
    3ef6:	59 f0       	breq	.+22     	; 0x3f0e <vfprintf+0x52c>
    3ef8:	c3 c0       	rjmp	.+390    	; 0x4080 <vfprintf+0x69e>
    3efa:	80 37       	cpi	r24, 0x70	; 112
    3efc:	19 f0       	breq	.+6      	; 0x3f04 <vfprintf+0x522>
    3efe:	88 37       	cpi	r24, 0x78	; 120
    3f00:	11 f0       	breq	.+4      	; 0x3f06 <vfprintf+0x524>
    3f02:	be c0       	rjmp	.+380    	; 0x4080 <vfprintf+0x69e>
    3f04:	00 61       	ori	r16, 0x10	; 16
    3f06:	04 ff       	sbrs	r16, 4
    3f08:	09 c0       	rjmp	.+18     	; 0x3f1c <vfprintf+0x53a>
    3f0a:	04 60       	ori	r16, 0x04	; 4
    3f0c:	07 c0       	rjmp	.+14     	; 0x3f1c <vfprintf+0x53a>
    3f0e:	94 fe       	sbrs	r9, 4
    3f10:	08 c0       	rjmp	.+16     	; 0x3f22 <vfprintf+0x540>
    3f12:	06 60       	ori	r16, 0x06	; 6
    3f14:	06 c0       	rjmp	.+12     	; 0x3f22 <vfprintf+0x540>
    3f16:	28 e0       	ldi	r18, 0x08	; 8
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	05 c0       	rjmp	.+10     	; 0x3f26 <vfprintf+0x544>
    3f1c:	20 e1       	ldi	r18, 0x10	; 16
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	02 c0       	rjmp	.+4      	; 0x3f26 <vfprintf+0x544>
    3f22:	20 e1       	ldi	r18, 0x10	; 16
    3f24:	32 e0       	ldi	r19, 0x02	; 2
    3f26:	56 01       	movw	r10, r12
    3f28:	07 ff       	sbrs	r16, 7
    3f2a:	09 c0       	rjmp	.+18     	; 0x3f3e <vfprintf+0x55c>
    3f2c:	84 e0       	ldi	r24, 0x04	; 4
    3f2e:	a8 0e       	add	r10, r24
    3f30:	b1 1c       	adc	r11, r1
    3f32:	f6 01       	movw	r30, r12
    3f34:	60 81       	ld	r22, Z
    3f36:	71 81       	ldd	r23, Z+1	; 0x01
    3f38:	82 81       	ldd	r24, Z+2	; 0x02
    3f3a:	93 81       	ldd	r25, Z+3	; 0x03
    3f3c:	08 c0       	rjmp	.+16     	; 0x3f4e <vfprintf+0x56c>
    3f3e:	f2 e0       	ldi	r31, 0x02	; 2
    3f40:	af 0e       	add	r10, r31
    3f42:	b1 1c       	adc	r11, r1
    3f44:	f6 01       	movw	r30, r12
    3f46:	60 81       	ld	r22, Z
    3f48:	71 81       	ldd	r23, Z+1	; 0x01
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	a3 01       	movw	r20, r6
    3f50:	0e 94 57 22 	call	0x44ae	; 0x44ae <__ultoa_invert>
    3f54:	c8 2e       	mov	r12, r24
    3f56:	c6 18       	sub	r12, r6
    3f58:	0f 77       	andi	r16, 0x7F	; 127
    3f5a:	90 2e       	mov	r9, r16
    3f5c:	96 fe       	sbrs	r9, 6
    3f5e:	0b c0       	rjmp	.+22     	; 0x3f76 <vfprintf+0x594>
    3f60:	09 2d       	mov	r16, r9
    3f62:	0e 7f       	andi	r16, 0xFE	; 254
    3f64:	c1 16       	cp	r12, r17
    3f66:	50 f4       	brcc	.+20     	; 0x3f7c <vfprintf+0x59a>
    3f68:	94 fe       	sbrs	r9, 4
    3f6a:	0a c0       	rjmp	.+20     	; 0x3f80 <vfprintf+0x59e>
    3f6c:	92 fc       	sbrc	r9, 2
    3f6e:	08 c0       	rjmp	.+16     	; 0x3f80 <vfprintf+0x59e>
    3f70:	09 2d       	mov	r16, r9
    3f72:	0e 7e       	andi	r16, 0xEE	; 238
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <vfprintf+0x59e>
    3f76:	dc 2c       	mov	r13, r12
    3f78:	09 2d       	mov	r16, r9
    3f7a:	03 c0       	rjmp	.+6      	; 0x3f82 <vfprintf+0x5a0>
    3f7c:	dc 2c       	mov	r13, r12
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <vfprintf+0x5a0>
    3f80:	d1 2e       	mov	r13, r17
    3f82:	04 ff       	sbrs	r16, 4
    3f84:	0d c0       	rjmp	.+26     	; 0x3fa0 <vfprintf+0x5be>
    3f86:	fe 01       	movw	r30, r28
    3f88:	ec 0d       	add	r30, r12
    3f8a:	f1 1d       	adc	r31, r1
    3f8c:	80 81       	ld	r24, Z
    3f8e:	80 33       	cpi	r24, 0x30	; 48
    3f90:	11 f4       	brne	.+4      	; 0x3f96 <vfprintf+0x5b4>
    3f92:	09 7e       	andi	r16, 0xE9	; 233
    3f94:	09 c0       	rjmp	.+18     	; 0x3fa8 <vfprintf+0x5c6>
    3f96:	02 ff       	sbrs	r16, 2
    3f98:	06 c0       	rjmp	.+12     	; 0x3fa6 <vfprintf+0x5c4>
    3f9a:	d3 94       	inc	r13
    3f9c:	d3 94       	inc	r13
    3f9e:	04 c0       	rjmp	.+8      	; 0x3fa8 <vfprintf+0x5c6>
    3fa0:	80 2f       	mov	r24, r16
    3fa2:	86 78       	andi	r24, 0x86	; 134
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <vfprintf+0x5c6>
    3fa6:	d3 94       	inc	r13
    3fa8:	03 fd       	sbrc	r16, 3
    3faa:	11 c0       	rjmp	.+34     	; 0x3fce <vfprintf+0x5ec>
    3fac:	00 ff       	sbrs	r16, 0
    3fae:	06 c0       	rjmp	.+12     	; 0x3fbc <vfprintf+0x5da>
    3fb0:	1c 2d       	mov	r17, r12
    3fb2:	d5 14       	cp	r13, r5
    3fb4:	80 f4       	brcc	.+32     	; 0x3fd6 <vfprintf+0x5f4>
    3fb6:	15 0d       	add	r17, r5
    3fb8:	1d 19       	sub	r17, r13
    3fba:	0d c0       	rjmp	.+26     	; 0x3fd6 <vfprintf+0x5f4>
    3fbc:	d5 14       	cp	r13, r5
    3fbe:	58 f4       	brcc	.+22     	; 0x3fd6 <vfprintf+0x5f4>
    3fc0:	b7 01       	movw	r22, r14
    3fc2:	80 e2       	ldi	r24, 0x20	; 32
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3fca:	d3 94       	inc	r13
    3fcc:	f7 cf       	rjmp	.-18     	; 0x3fbc <vfprintf+0x5da>
    3fce:	d5 14       	cp	r13, r5
    3fd0:	10 f4       	brcc	.+4      	; 0x3fd6 <vfprintf+0x5f4>
    3fd2:	5d 18       	sub	r5, r13
    3fd4:	01 c0       	rjmp	.+2      	; 0x3fd8 <vfprintf+0x5f6>
    3fd6:	51 2c       	mov	r5, r1
    3fd8:	04 ff       	sbrs	r16, 4
    3fda:	10 c0       	rjmp	.+32     	; 0x3ffc <vfprintf+0x61a>
    3fdc:	b7 01       	movw	r22, r14
    3fde:	80 e3       	ldi	r24, 0x30	; 48
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    3fe6:	02 ff       	sbrs	r16, 2
    3fe8:	17 c0       	rjmp	.+46     	; 0x4018 <vfprintf+0x636>
    3fea:	01 fd       	sbrc	r16, 1
    3fec:	03 c0       	rjmp	.+6      	; 0x3ff4 <vfprintf+0x612>
    3fee:	88 e7       	ldi	r24, 0x78	; 120
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <vfprintf+0x616>
    3ff4:	88 e5       	ldi	r24, 0x58	; 88
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	b7 01       	movw	r22, r14
    3ffa:	0c c0       	rjmp	.+24     	; 0x4014 <vfprintf+0x632>
    3ffc:	80 2f       	mov	r24, r16
    3ffe:	86 78       	andi	r24, 0x86	; 134
    4000:	59 f0       	breq	.+22     	; 0x4018 <vfprintf+0x636>
    4002:	01 ff       	sbrs	r16, 1
    4004:	02 c0       	rjmp	.+4      	; 0x400a <vfprintf+0x628>
    4006:	8b e2       	ldi	r24, 0x2B	; 43
    4008:	01 c0       	rjmp	.+2      	; 0x400c <vfprintf+0x62a>
    400a:	80 e2       	ldi	r24, 0x20	; 32
    400c:	07 fd       	sbrc	r16, 7
    400e:	8d e2       	ldi	r24, 0x2D	; 45
    4010:	b7 01       	movw	r22, r14
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    4018:	c1 16       	cp	r12, r17
    401a:	38 f4       	brcc	.+14     	; 0x402a <vfprintf+0x648>
    401c:	b7 01       	movw	r22, r14
    401e:	80 e3       	ldi	r24, 0x30	; 48
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    4026:	11 50       	subi	r17, 0x01	; 1
    4028:	f7 cf       	rjmp	.-18     	; 0x4018 <vfprintf+0x636>
    402a:	ca 94       	dec	r12
    402c:	f3 01       	movw	r30, r6
    402e:	ec 0d       	add	r30, r12
    4030:	f1 1d       	adc	r31, r1
    4032:	80 81       	ld	r24, Z
    4034:	b7 01       	movw	r22, r14
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    403c:	c1 10       	cpse	r12, r1
    403e:	f5 cf       	rjmp	.-22     	; 0x402a <vfprintf+0x648>
    4040:	15 c0       	rjmp	.+42     	; 0x406c <vfprintf+0x68a>
    4042:	f4 e0       	ldi	r31, 0x04	; 4
    4044:	f5 15       	cp	r31, r5
    4046:	60 f5       	brcc	.+88     	; 0x40a0 <vfprintf+0x6be>
    4048:	84 e0       	ldi	r24, 0x04	; 4
    404a:	58 1a       	sub	r5, r24
    404c:	93 fe       	sbrs	r9, 3
    404e:	1f c0       	rjmp	.+62     	; 0x408e <vfprintf+0x6ac>
    4050:	01 11       	cpse	r16, r1
    4052:	27 c0       	rjmp	.+78     	; 0x40a2 <vfprintf+0x6c0>
    4054:	2c 85       	ldd	r18, Y+12	; 0x0c
    4056:	23 ff       	sbrs	r18, 3
    4058:	2a c0       	rjmp	.+84     	; 0x40ae <vfprintf+0x6cc>
    405a:	04 ed       	ldi	r16, 0xD4	; 212
    405c:	12 e0       	ldi	r17, 0x02	; 2
    405e:	39 2d       	mov	r19, r9
    4060:	30 71       	andi	r19, 0x10	; 16
    4062:	93 2e       	mov	r9, r19
    4064:	f8 01       	movw	r30, r16
    4066:	84 91       	lpm	r24, Z
    4068:	81 11       	cpse	r24, r1
    406a:	24 c0       	rjmp	.+72     	; 0x40b4 <vfprintf+0x6d2>
    406c:	55 20       	and	r5, r5
    406e:	09 f4       	brne	.+2      	; 0x4072 <vfprintf+0x690>
    4070:	e4 cc       	rjmp	.-1592   	; 0x3a3a <vfprintf+0x58>
    4072:	b7 01       	movw	r22, r14
    4074:	80 e2       	ldi	r24, 0x20	; 32
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    407c:	5a 94       	dec	r5
    407e:	f6 cf       	rjmp	.-20     	; 0x406c <vfprintf+0x68a>
    4080:	f7 01       	movw	r30, r14
    4082:	86 81       	ldd	r24, Z+6	; 0x06
    4084:	97 81       	ldd	r25, Z+7	; 0x07
    4086:	26 c0       	rjmp	.+76     	; 0x40d4 <vfprintf+0x6f2>
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	9f ef       	ldi	r25, 0xFF	; 255
    408c:	23 c0       	rjmp	.+70     	; 0x40d4 <vfprintf+0x6f2>
    408e:	b7 01       	movw	r22, r14
    4090:	80 e2       	ldi	r24, 0x20	; 32
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    4098:	5a 94       	dec	r5
    409a:	51 10       	cpse	r5, r1
    409c:	f8 cf       	rjmp	.-16     	; 0x408e <vfprintf+0x6ac>
    409e:	d8 cf       	rjmp	.-80     	; 0x4050 <vfprintf+0x66e>
    40a0:	51 2c       	mov	r5, r1
    40a2:	b7 01       	movw	r22, r14
    40a4:	80 2f       	mov	r24, r16
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    40ac:	d3 cf       	rjmp	.-90     	; 0x4054 <vfprintf+0x672>
    40ae:	08 ed       	ldi	r16, 0xD8	; 216
    40b0:	12 e0       	ldi	r17, 0x02	; 2
    40b2:	d5 cf       	rjmp	.-86     	; 0x405e <vfprintf+0x67c>
    40b4:	91 10       	cpse	r9, r1
    40b6:	80 52       	subi	r24, 0x20	; 32
    40b8:	b7 01       	movw	r22, r14
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	0e 94 ff 21 	call	0x43fe	; 0x43fe <fputc>
    40c0:	0f 5f       	subi	r16, 0xFF	; 255
    40c2:	1f 4f       	sbci	r17, 0xFF	; 255
    40c4:	cf cf       	rjmp	.-98     	; 0x4064 <vfprintf+0x682>
    40c6:	23 e0       	ldi	r18, 0x03	; 3
    40c8:	25 15       	cp	r18, r5
    40ca:	10 f4       	brcc	.+4      	; 0x40d0 <vfprintf+0x6ee>
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	bd cf       	rjmp	.-134    	; 0x404a <vfprintf+0x668>
    40d0:	51 2c       	mov	r5, r1
    40d2:	c0 cf       	rjmp	.-128    	; 0x4054 <vfprintf+0x672>
    40d4:	60 96       	adiw	r28, 0x10	; 16
    40d6:	e2 e1       	ldi	r30, 0x12	; 18
    40d8:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <__epilogue_restores__>

000040dc <__divmodhi4>:
    40dc:	97 fb       	bst	r25, 7
    40de:	07 2e       	mov	r0, r23
    40e0:	16 f4       	brtc	.+4      	; 0x40e6 <__divmodhi4+0xa>
    40e2:	00 94       	com	r0
    40e4:	07 d0       	rcall	.+14     	; 0x40f4 <__divmodhi4_neg1>
    40e6:	77 fd       	sbrc	r23, 7
    40e8:	09 d0       	rcall	.+18     	; 0x40fc <__divmodhi4_neg2>
    40ea:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    40ee:	07 fc       	sbrc	r0, 7
    40f0:	05 d0       	rcall	.+10     	; 0x40fc <__divmodhi4_neg2>
    40f2:	3e f4       	brtc	.+14     	; 0x4102 <__divmodhi4_exit>

000040f4 <__divmodhi4_neg1>:
    40f4:	90 95       	com	r25
    40f6:	81 95       	neg	r24
    40f8:	9f 4f       	sbci	r25, 0xFF	; 255
    40fa:	08 95       	ret

000040fc <__divmodhi4_neg2>:
    40fc:	70 95       	com	r23
    40fe:	61 95       	neg	r22
    4100:	7f 4f       	sbci	r23, 0xFF	; 255

00004102 <__divmodhi4_exit>:
    4102:	08 95       	ret

00004104 <__udivmodsi4>:
    4104:	a1 e2       	ldi	r26, 0x21	; 33
    4106:	1a 2e       	mov	r1, r26
    4108:	aa 1b       	sub	r26, r26
    410a:	bb 1b       	sub	r27, r27
    410c:	fd 01       	movw	r30, r26
    410e:	0d c0       	rjmp	.+26     	; 0x412a <__udivmodsi4_ep>

00004110 <__udivmodsi4_loop>:
    4110:	aa 1f       	adc	r26, r26
    4112:	bb 1f       	adc	r27, r27
    4114:	ee 1f       	adc	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	a2 17       	cp	r26, r18
    411a:	b3 07       	cpc	r27, r19
    411c:	e4 07       	cpc	r30, r20
    411e:	f5 07       	cpc	r31, r21
    4120:	20 f0       	brcs	.+8      	; 0x412a <__udivmodsi4_ep>
    4122:	a2 1b       	sub	r26, r18
    4124:	b3 0b       	sbc	r27, r19
    4126:	e4 0b       	sbc	r30, r20
    4128:	f5 0b       	sbc	r31, r21

0000412a <__udivmodsi4_ep>:
    412a:	66 1f       	adc	r22, r22
    412c:	77 1f       	adc	r23, r23
    412e:	88 1f       	adc	r24, r24
    4130:	99 1f       	adc	r25, r25
    4132:	1a 94       	dec	r1
    4134:	69 f7       	brne	.-38     	; 0x4110 <__udivmodsi4_loop>
    4136:	60 95       	com	r22
    4138:	70 95       	com	r23
    413a:	80 95       	com	r24
    413c:	90 95       	com	r25
    413e:	9b 01       	movw	r18, r22
    4140:	ac 01       	movw	r20, r24
    4142:	bd 01       	movw	r22, r26
    4144:	cf 01       	movw	r24, r30
    4146:	08 95       	ret

00004148 <__tablejump2__>:
    4148:	ee 0f       	add	r30, r30
    414a:	ff 1f       	adc	r31, r31
    414c:	05 90       	lpm	r0, Z+
    414e:	f4 91       	lpm	r31, Z
    4150:	e0 2d       	mov	r30, r0
    4152:	09 94       	ijmp

00004154 <__umulhisi3>:
    4154:	a2 9f       	mul	r26, r18
    4156:	b0 01       	movw	r22, r0
    4158:	b3 9f       	mul	r27, r19
    415a:	c0 01       	movw	r24, r0
    415c:	a3 9f       	mul	r26, r19
    415e:	70 0d       	add	r23, r0
    4160:	81 1d       	adc	r24, r1
    4162:	11 24       	eor	r1, r1
    4164:	91 1d       	adc	r25, r1
    4166:	b2 9f       	mul	r27, r18
    4168:	70 0d       	add	r23, r0
    416a:	81 1d       	adc	r24, r1
    416c:	11 24       	eor	r1, r1
    416e:	91 1d       	adc	r25, r1
    4170:	08 95       	ret

00004172 <__prologue_saves__>:
    4172:	2f 92       	push	r2
    4174:	3f 92       	push	r3
    4176:	4f 92       	push	r4
    4178:	5f 92       	push	r5
    417a:	6f 92       	push	r6
    417c:	7f 92       	push	r7
    417e:	8f 92       	push	r8
    4180:	9f 92       	push	r9
    4182:	af 92       	push	r10
    4184:	bf 92       	push	r11
    4186:	cf 92       	push	r12
    4188:	df 92       	push	r13
    418a:	ef 92       	push	r14
    418c:	ff 92       	push	r15
    418e:	0f 93       	push	r16
    4190:	1f 93       	push	r17
    4192:	cf 93       	push	r28
    4194:	df 93       	push	r29
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	ca 1b       	sub	r28, r26
    419c:	db 0b       	sbc	r29, r27
    419e:	0f b6       	in	r0, 0x3f	; 63
    41a0:	f8 94       	cli
    41a2:	de bf       	out	0x3e, r29	; 62
    41a4:	0f be       	out	0x3f, r0	; 63
    41a6:	cd bf       	out	0x3d, r28	; 61
    41a8:	09 94       	ijmp

000041aa <__epilogue_restores__>:
    41aa:	2a 88       	ldd	r2, Y+18	; 0x12
    41ac:	39 88       	ldd	r3, Y+17	; 0x11
    41ae:	48 88       	ldd	r4, Y+16	; 0x10
    41b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    41b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    41b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    41b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    41b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    41ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    41bc:	b9 84       	ldd	r11, Y+9	; 0x09
    41be:	c8 84       	ldd	r12, Y+8	; 0x08
    41c0:	df 80       	ldd	r13, Y+7	; 0x07
    41c2:	ee 80       	ldd	r14, Y+6	; 0x06
    41c4:	fd 80       	ldd	r15, Y+5	; 0x05
    41c6:	0c 81       	ldd	r16, Y+4	; 0x04
    41c8:	1b 81       	ldd	r17, Y+3	; 0x03
    41ca:	aa 81       	ldd	r26, Y+2	; 0x02
    41cc:	b9 81       	ldd	r27, Y+1	; 0x01
    41ce:	ce 0f       	add	r28, r30
    41d0:	d1 1d       	adc	r29, r1
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	f8 94       	cli
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	cd bf       	out	0x3d, r28	; 61
    41dc:	ed 01       	movw	r28, r26
    41de:	08 95       	ret

000041e0 <__udivmodhi4>:
    41e0:	aa 1b       	sub	r26, r26
    41e2:	bb 1b       	sub	r27, r27
    41e4:	51 e1       	ldi	r21, 0x11	; 17
    41e6:	07 c0       	rjmp	.+14     	; 0x41f6 <__udivmodhi4_ep>

000041e8 <__udivmodhi4_loop>:
    41e8:	aa 1f       	adc	r26, r26
    41ea:	bb 1f       	adc	r27, r27
    41ec:	a6 17       	cp	r26, r22
    41ee:	b7 07       	cpc	r27, r23
    41f0:	10 f0       	brcs	.+4      	; 0x41f6 <__udivmodhi4_ep>
    41f2:	a6 1b       	sub	r26, r22
    41f4:	b7 0b       	sbc	r27, r23

000041f6 <__udivmodhi4_ep>:
    41f6:	88 1f       	adc	r24, r24
    41f8:	99 1f       	adc	r25, r25
    41fa:	5a 95       	dec	r21
    41fc:	a9 f7       	brne	.-22     	; 0x41e8 <__udivmodhi4_loop>
    41fe:	80 95       	com	r24
    4200:	90 95       	com	r25
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	08 95       	ret

00004208 <__ftoa_engine>:
    4208:	28 30       	cpi	r18, 0x08	; 8
    420a:	08 f0       	brcs	.+2      	; 0x420e <__ftoa_engine+0x6>
    420c:	27 e0       	ldi	r18, 0x07	; 7
    420e:	33 27       	eor	r19, r19
    4210:	da 01       	movw	r26, r20
    4212:	99 0f       	add	r25, r25
    4214:	31 1d       	adc	r19, r1
    4216:	87 fd       	sbrc	r24, 7
    4218:	91 60       	ori	r25, 0x01	; 1
    421a:	00 96       	adiw	r24, 0x00	; 0
    421c:	61 05       	cpc	r22, r1
    421e:	71 05       	cpc	r23, r1
    4220:	39 f4       	brne	.+14     	; 0x4230 <__ftoa_engine+0x28>
    4222:	32 60       	ori	r19, 0x02	; 2
    4224:	2e 5f       	subi	r18, 0xFE	; 254
    4226:	3d 93       	st	X+, r19
    4228:	30 e3       	ldi	r19, 0x30	; 48
    422a:	2a 95       	dec	r18
    422c:	e1 f7       	brne	.-8      	; 0x4226 <__ftoa_engine+0x1e>
    422e:	08 95       	ret
    4230:	9f 3f       	cpi	r25, 0xFF	; 255
    4232:	30 f0       	brcs	.+12     	; 0x4240 <__ftoa_engine+0x38>
    4234:	80 38       	cpi	r24, 0x80	; 128
    4236:	71 05       	cpc	r23, r1
    4238:	61 05       	cpc	r22, r1
    423a:	09 f0       	breq	.+2      	; 0x423e <__ftoa_engine+0x36>
    423c:	3c 5f       	subi	r19, 0xFC	; 252
    423e:	3c 5f       	subi	r19, 0xFC	; 252
    4240:	3d 93       	st	X+, r19
    4242:	91 30       	cpi	r25, 0x01	; 1
    4244:	08 f0       	brcs	.+2      	; 0x4248 <__ftoa_engine+0x40>
    4246:	80 68       	ori	r24, 0x80	; 128
    4248:	91 1d       	adc	r25, r1
    424a:	df 93       	push	r29
    424c:	cf 93       	push	r28
    424e:	1f 93       	push	r17
    4250:	0f 93       	push	r16
    4252:	ff 92       	push	r15
    4254:	ef 92       	push	r14
    4256:	19 2f       	mov	r17, r25
    4258:	98 7f       	andi	r25, 0xF8	; 248
    425a:	96 95       	lsr	r25
    425c:	e9 2f       	mov	r30, r25
    425e:	96 95       	lsr	r25
    4260:	96 95       	lsr	r25
    4262:	e9 0f       	add	r30, r25
    4264:	ff 27       	eor	r31, r31
    4266:	ea 5c       	subi	r30, 0xCA	; 202
    4268:	fc 4f       	sbci	r31, 0xFC	; 252
    426a:	99 27       	eor	r25, r25
    426c:	33 27       	eor	r19, r19
    426e:	ee 24       	eor	r14, r14
    4270:	ff 24       	eor	r15, r15
    4272:	a7 01       	movw	r20, r14
    4274:	e7 01       	movw	r28, r14
    4276:	05 90       	lpm	r0, Z+
    4278:	08 94       	sec
    427a:	07 94       	ror	r0
    427c:	28 f4       	brcc	.+10     	; 0x4288 <__ftoa_engine+0x80>
    427e:	36 0f       	add	r19, r22
    4280:	e7 1e       	adc	r14, r23
    4282:	f8 1e       	adc	r15, r24
    4284:	49 1f       	adc	r20, r25
    4286:	51 1d       	adc	r21, r1
    4288:	66 0f       	add	r22, r22
    428a:	77 1f       	adc	r23, r23
    428c:	88 1f       	adc	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	06 94       	lsr	r0
    4292:	a1 f7       	brne	.-24     	; 0x427c <__ftoa_engine+0x74>
    4294:	05 90       	lpm	r0, Z+
    4296:	07 94       	ror	r0
    4298:	28 f4       	brcc	.+10     	; 0x42a4 <__ftoa_engine+0x9c>
    429a:	e7 0e       	add	r14, r23
    429c:	f8 1e       	adc	r15, r24
    429e:	49 1f       	adc	r20, r25
    42a0:	56 1f       	adc	r21, r22
    42a2:	c1 1d       	adc	r28, r1
    42a4:	77 0f       	add	r23, r23
    42a6:	88 1f       	adc	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	66 1f       	adc	r22, r22
    42ac:	06 94       	lsr	r0
    42ae:	a1 f7       	brne	.-24     	; 0x4298 <__ftoa_engine+0x90>
    42b0:	05 90       	lpm	r0, Z+
    42b2:	07 94       	ror	r0
    42b4:	28 f4       	brcc	.+10     	; 0x42c0 <__ftoa_engine+0xb8>
    42b6:	f8 0e       	add	r15, r24
    42b8:	49 1f       	adc	r20, r25
    42ba:	56 1f       	adc	r21, r22
    42bc:	c7 1f       	adc	r28, r23
    42be:	d1 1d       	adc	r29, r1
    42c0:	88 0f       	add	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	66 1f       	adc	r22, r22
    42c6:	77 1f       	adc	r23, r23
    42c8:	06 94       	lsr	r0
    42ca:	a1 f7       	brne	.-24     	; 0x42b4 <__ftoa_engine+0xac>
    42cc:	05 90       	lpm	r0, Z+
    42ce:	07 94       	ror	r0
    42d0:	20 f4       	brcc	.+8      	; 0x42da <__ftoa_engine+0xd2>
    42d2:	49 0f       	add	r20, r25
    42d4:	56 1f       	adc	r21, r22
    42d6:	c7 1f       	adc	r28, r23
    42d8:	d8 1f       	adc	r29, r24
    42da:	99 0f       	add	r25, r25
    42dc:	66 1f       	adc	r22, r22
    42de:	77 1f       	adc	r23, r23
    42e0:	88 1f       	adc	r24, r24
    42e2:	06 94       	lsr	r0
    42e4:	a9 f7       	brne	.-22     	; 0x42d0 <__ftoa_engine+0xc8>
    42e6:	84 91       	lpm	r24, Z
    42e8:	10 95       	com	r17
    42ea:	17 70       	andi	r17, 0x07	; 7
    42ec:	41 f0       	breq	.+16     	; 0x42fe <__ftoa_engine+0xf6>
    42ee:	d6 95       	lsr	r29
    42f0:	c7 95       	ror	r28
    42f2:	57 95       	ror	r21
    42f4:	47 95       	ror	r20
    42f6:	f7 94       	ror	r15
    42f8:	e7 94       	ror	r14
    42fa:	1a 95       	dec	r17
    42fc:	c1 f7       	brne	.-16     	; 0x42ee <__ftoa_engine+0xe6>
    42fe:	ec ed       	ldi	r30, 0xDC	; 220
    4300:	f2 e0       	ldi	r31, 0x02	; 2
    4302:	68 94       	set
    4304:	15 90       	lpm	r1, Z+
    4306:	15 91       	lpm	r17, Z+
    4308:	35 91       	lpm	r19, Z+
    430a:	65 91       	lpm	r22, Z+
    430c:	95 91       	lpm	r25, Z+
    430e:	05 90       	lpm	r0, Z+
    4310:	7f e2       	ldi	r23, 0x2F	; 47
    4312:	73 95       	inc	r23
    4314:	e1 18       	sub	r14, r1
    4316:	f1 0a       	sbc	r15, r17
    4318:	43 0b       	sbc	r20, r19
    431a:	56 0b       	sbc	r21, r22
    431c:	c9 0b       	sbc	r28, r25
    431e:	d0 09       	sbc	r29, r0
    4320:	c0 f7       	brcc	.-16     	; 0x4312 <__ftoa_engine+0x10a>
    4322:	e1 0c       	add	r14, r1
    4324:	f1 1e       	adc	r15, r17
    4326:	43 1f       	adc	r20, r19
    4328:	56 1f       	adc	r21, r22
    432a:	c9 1f       	adc	r28, r25
    432c:	d0 1d       	adc	r29, r0
    432e:	7e f4       	brtc	.+30     	; 0x434e <__ftoa_engine+0x146>
    4330:	70 33       	cpi	r23, 0x30	; 48
    4332:	11 f4       	brne	.+4      	; 0x4338 <__ftoa_engine+0x130>
    4334:	8a 95       	dec	r24
    4336:	e6 cf       	rjmp	.-52     	; 0x4304 <__ftoa_engine+0xfc>
    4338:	e8 94       	clt
    433a:	01 50       	subi	r16, 0x01	; 1
    433c:	30 f0       	brcs	.+12     	; 0x434a <__ftoa_engine+0x142>
    433e:	08 0f       	add	r16, r24
    4340:	0a f4       	brpl	.+2      	; 0x4344 <__ftoa_engine+0x13c>
    4342:	00 27       	eor	r16, r16
    4344:	02 17       	cp	r16, r18
    4346:	08 f4       	brcc	.+2      	; 0x434a <__ftoa_engine+0x142>
    4348:	20 2f       	mov	r18, r16
    434a:	23 95       	inc	r18
    434c:	02 2f       	mov	r16, r18
    434e:	7a 33       	cpi	r23, 0x3A	; 58
    4350:	28 f0       	brcs	.+10     	; 0x435c <__ftoa_engine+0x154>
    4352:	79 e3       	ldi	r23, 0x39	; 57
    4354:	7d 93       	st	X+, r23
    4356:	2a 95       	dec	r18
    4358:	e9 f7       	brne	.-6      	; 0x4354 <__ftoa_engine+0x14c>
    435a:	10 c0       	rjmp	.+32     	; 0x437c <__ftoa_engine+0x174>
    435c:	7d 93       	st	X+, r23
    435e:	2a 95       	dec	r18
    4360:	89 f6       	brne	.-94     	; 0x4304 <__ftoa_engine+0xfc>
    4362:	06 94       	lsr	r0
    4364:	97 95       	ror	r25
    4366:	67 95       	ror	r22
    4368:	37 95       	ror	r19
    436a:	17 95       	ror	r17
    436c:	17 94       	ror	r1
    436e:	e1 18       	sub	r14, r1
    4370:	f1 0a       	sbc	r15, r17
    4372:	43 0b       	sbc	r20, r19
    4374:	56 0b       	sbc	r21, r22
    4376:	c9 0b       	sbc	r28, r25
    4378:	d0 09       	sbc	r29, r0
    437a:	98 f0       	brcs	.+38     	; 0x43a2 <__ftoa_engine+0x19a>
    437c:	23 95       	inc	r18
    437e:	7e 91       	ld	r23, -X
    4380:	73 95       	inc	r23
    4382:	7a 33       	cpi	r23, 0x3A	; 58
    4384:	08 f0       	brcs	.+2      	; 0x4388 <__ftoa_engine+0x180>
    4386:	70 e3       	ldi	r23, 0x30	; 48
    4388:	7c 93       	st	X, r23
    438a:	20 13       	cpse	r18, r16
    438c:	b8 f7       	brcc	.-18     	; 0x437c <__ftoa_engine+0x174>
    438e:	7e 91       	ld	r23, -X
    4390:	70 61       	ori	r23, 0x10	; 16
    4392:	7d 93       	st	X+, r23
    4394:	30 f0       	brcs	.+12     	; 0x43a2 <__ftoa_engine+0x19a>
    4396:	83 95       	inc	r24
    4398:	71 e3       	ldi	r23, 0x31	; 49
    439a:	7d 93       	st	X+, r23
    439c:	70 e3       	ldi	r23, 0x30	; 48
    439e:	2a 95       	dec	r18
    43a0:	e1 f7       	brne	.-8      	; 0x439a <__ftoa_engine+0x192>
    43a2:	11 24       	eor	r1, r1
    43a4:	ef 90       	pop	r14
    43a6:	ff 90       	pop	r15
    43a8:	0f 91       	pop	r16
    43aa:	1f 91       	pop	r17
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	99 27       	eor	r25, r25
    43b2:	87 fd       	sbrc	r24, 7
    43b4:	90 95       	com	r25
    43b6:	08 95       	ret

000043b8 <strnlen_P>:
    43b8:	fc 01       	movw	r30, r24
    43ba:	05 90       	lpm	r0, Z+
    43bc:	61 50       	subi	r22, 0x01	; 1
    43be:	70 40       	sbci	r23, 0x00	; 0
    43c0:	01 10       	cpse	r0, r1
    43c2:	d8 f7       	brcc	.-10     	; 0x43ba <strnlen_P+0x2>
    43c4:	80 95       	com	r24
    43c6:	90 95       	com	r25
    43c8:	8e 0f       	add	r24, r30
    43ca:	9f 1f       	adc	r25, r31
    43cc:	08 95       	ret

000043ce <memcmp>:
    43ce:	fb 01       	movw	r30, r22
    43d0:	dc 01       	movw	r26, r24
    43d2:	04 c0       	rjmp	.+8      	; 0x43dc <memcmp+0xe>
    43d4:	8d 91       	ld	r24, X+
    43d6:	01 90       	ld	r0, Z+
    43d8:	80 19       	sub	r24, r0
    43da:	21 f4       	brne	.+8      	; 0x43e4 <memcmp+0x16>
    43dc:	41 50       	subi	r20, 0x01	; 1
    43de:	50 40       	sbci	r21, 0x00	; 0
    43e0:	c8 f7       	brcc	.-14     	; 0x43d4 <memcmp+0x6>
    43e2:	88 1b       	sub	r24, r24
    43e4:	99 0b       	sbc	r25, r25
    43e6:	08 95       	ret

000043e8 <strnlen>:
    43e8:	fc 01       	movw	r30, r24
    43ea:	61 50       	subi	r22, 0x01	; 1
    43ec:	70 40       	sbci	r23, 0x00	; 0
    43ee:	01 90       	ld	r0, Z+
    43f0:	01 10       	cpse	r0, r1
    43f2:	d8 f7       	brcc	.-10     	; 0x43ea <strnlen+0x2>
    43f4:	80 95       	com	r24
    43f6:	90 95       	com	r25
    43f8:	8e 0f       	add	r24, r30
    43fa:	9f 1f       	adc	r25, r31
    43fc:	08 95       	ret

000043fe <fputc>:
    43fe:	0f 93       	push	r16
    4400:	1f 93       	push	r17
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
    4406:	fb 01       	movw	r30, r22
    4408:	23 81       	ldd	r18, Z+3	; 0x03
    440a:	21 fd       	sbrc	r18, 1
    440c:	03 c0       	rjmp	.+6      	; 0x4414 <fputc+0x16>
    440e:	8f ef       	ldi	r24, 0xFF	; 255
    4410:	9f ef       	ldi	r25, 0xFF	; 255
    4412:	2c c0       	rjmp	.+88     	; 0x446c <fputc+0x6e>
    4414:	22 ff       	sbrs	r18, 2
    4416:	16 c0       	rjmp	.+44     	; 0x4444 <fputc+0x46>
    4418:	46 81       	ldd	r20, Z+6	; 0x06
    441a:	57 81       	ldd	r21, Z+7	; 0x07
    441c:	24 81       	ldd	r18, Z+4	; 0x04
    441e:	35 81       	ldd	r19, Z+5	; 0x05
    4420:	42 17       	cp	r20, r18
    4422:	53 07       	cpc	r21, r19
    4424:	44 f4       	brge	.+16     	; 0x4436 <fputc+0x38>
    4426:	a0 81       	ld	r26, Z
    4428:	b1 81       	ldd	r27, Z+1	; 0x01
    442a:	9d 01       	movw	r18, r26
    442c:	2f 5f       	subi	r18, 0xFF	; 255
    442e:	3f 4f       	sbci	r19, 0xFF	; 255
    4430:	31 83       	std	Z+1, r19	; 0x01
    4432:	20 83       	st	Z, r18
    4434:	8c 93       	st	X, r24
    4436:	26 81       	ldd	r18, Z+6	; 0x06
    4438:	37 81       	ldd	r19, Z+7	; 0x07
    443a:	2f 5f       	subi	r18, 0xFF	; 255
    443c:	3f 4f       	sbci	r19, 0xFF	; 255
    443e:	37 83       	std	Z+7, r19	; 0x07
    4440:	26 83       	std	Z+6, r18	; 0x06
    4442:	14 c0       	rjmp	.+40     	; 0x446c <fputc+0x6e>
    4444:	8b 01       	movw	r16, r22
    4446:	ec 01       	movw	r28, r24
    4448:	fb 01       	movw	r30, r22
    444a:	00 84       	ldd	r0, Z+8	; 0x08
    444c:	f1 85       	ldd	r31, Z+9	; 0x09
    444e:	e0 2d       	mov	r30, r0
    4450:	09 95       	icall
    4452:	89 2b       	or	r24, r25
    4454:	e1 f6       	brne	.-72     	; 0x440e <fputc+0x10>
    4456:	d8 01       	movw	r26, r16
    4458:	16 96       	adiw	r26, 0x06	; 6
    445a:	8d 91       	ld	r24, X+
    445c:	9c 91       	ld	r25, X
    445e:	17 97       	sbiw	r26, 0x07	; 7
    4460:	01 96       	adiw	r24, 0x01	; 1
    4462:	17 96       	adiw	r26, 0x07	; 7
    4464:	9c 93       	st	X, r25
    4466:	8e 93       	st	-X, r24
    4468:	16 97       	sbiw	r26, 0x06	; 6
    446a:	ce 01       	movw	r24, r28
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	1f 91       	pop	r17
    4472:	0f 91       	pop	r16
    4474:	08 95       	ret

00004476 <vsprintf>:
    4476:	ae e0       	ldi	r26, 0x0E	; 14
    4478:	b0 e0       	ldi	r27, 0x00	; 0
    447a:	e1 e4       	ldi	r30, 0x41	; 65
    447c:	f2 e2       	ldi	r31, 0x22	; 34
    447e:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__prologue_saves__+0x1c>
    4482:	8c 01       	movw	r16, r24
    4484:	86 e0       	ldi	r24, 0x06	; 6
    4486:	8c 83       	std	Y+4, r24	; 0x04
    4488:	1a 83       	std	Y+2, r17	; 0x02
    448a:	09 83       	std	Y+1, r16	; 0x01
    448c:	8f ef       	ldi	r24, 0xFF	; 255
    448e:	9f e7       	ldi	r25, 0x7F	; 127
    4490:	9e 83       	std	Y+6, r25	; 0x06
    4492:	8d 83       	std	Y+5, r24	; 0x05
    4494:	ce 01       	movw	r24, r28
    4496:	01 96       	adiw	r24, 0x01	; 1
    4498:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <vfprintf>
    449c:	ef 81       	ldd	r30, Y+7	; 0x07
    449e:	f8 85       	ldd	r31, Y+8	; 0x08
    44a0:	e0 0f       	add	r30, r16
    44a2:	f1 1f       	adc	r31, r17
    44a4:	10 82       	st	Z, r1
    44a6:	2e 96       	adiw	r28, 0x0e	; 14
    44a8:	e4 e0       	ldi	r30, 0x04	; 4
    44aa:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__epilogue_restores__+0x1c>

000044ae <__ultoa_invert>:
    44ae:	fa 01       	movw	r30, r20
    44b0:	aa 27       	eor	r26, r26
    44b2:	28 30       	cpi	r18, 0x08	; 8
    44b4:	51 f1       	breq	.+84     	; 0x450a <__ultoa_invert+0x5c>
    44b6:	20 31       	cpi	r18, 0x10	; 16
    44b8:	81 f1       	breq	.+96     	; 0x451a <__ultoa_invert+0x6c>
    44ba:	e8 94       	clt
    44bc:	6f 93       	push	r22
    44be:	6e 7f       	andi	r22, 0xFE	; 254
    44c0:	6e 5f       	subi	r22, 0xFE	; 254
    44c2:	7f 4f       	sbci	r23, 0xFF	; 255
    44c4:	8f 4f       	sbci	r24, 0xFF	; 255
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	af 4f       	sbci	r26, 0xFF	; 255
    44ca:	b1 e0       	ldi	r27, 0x01	; 1
    44cc:	3e d0       	rcall	.+124    	; 0x454a <__ultoa_invert+0x9c>
    44ce:	b4 e0       	ldi	r27, 0x04	; 4
    44d0:	3c d0       	rcall	.+120    	; 0x454a <__ultoa_invert+0x9c>
    44d2:	67 0f       	add	r22, r23
    44d4:	78 1f       	adc	r23, r24
    44d6:	89 1f       	adc	r24, r25
    44d8:	9a 1f       	adc	r25, r26
    44da:	a1 1d       	adc	r26, r1
    44dc:	68 0f       	add	r22, r24
    44de:	79 1f       	adc	r23, r25
    44e0:	8a 1f       	adc	r24, r26
    44e2:	91 1d       	adc	r25, r1
    44e4:	a1 1d       	adc	r26, r1
    44e6:	6a 0f       	add	r22, r26
    44e8:	71 1d       	adc	r23, r1
    44ea:	81 1d       	adc	r24, r1
    44ec:	91 1d       	adc	r25, r1
    44ee:	a1 1d       	adc	r26, r1
    44f0:	20 d0       	rcall	.+64     	; 0x4532 <__ultoa_invert+0x84>
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <__ultoa_invert+0x48>
    44f4:	68 94       	set
    44f6:	3f 91       	pop	r19
    44f8:	2a e0       	ldi	r18, 0x0A	; 10
    44fa:	26 9f       	mul	r18, r22
    44fc:	11 24       	eor	r1, r1
    44fe:	30 19       	sub	r19, r0
    4500:	30 5d       	subi	r19, 0xD0	; 208
    4502:	31 93       	st	Z+, r19
    4504:	de f6       	brtc	.-74     	; 0x44bc <__ultoa_invert+0xe>
    4506:	cf 01       	movw	r24, r30
    4508:	08 95       	ret
    450a:	46 2f       	mov	r20, r22
    450c:	47 70       	andi	r20, 0x07	; 7
    450e:	40 5d       	subi	r20, 0xD0	; 208
    4510:	41 93       	st	Z+, r20
    4512:	b3 e0       	ldi	r27, 0x03	; 3
    4514:	0f d0       	rcall	.+30     	; 0x4534 <__ultoa_invert+0x86>
    4516:	c9 f7       	brne	.-14     	; 0x450a <__ultoa_invert+0x5c>
    4518:	f6 cf       	rjmp	.-20     	; 0x4506 <__ultoa_invert+0x58>
    451a:	46 2f       	mov	r20, r22
    451c:	4f 70       	andi	r20, 0x0F	; 15
    451e:	40 5d       	subi	r20, 0xD0	; 208
    4520:	4a 33       	cpi	r20, 0x3A	; 58
    4522:	18 f0       	brcs	.+6      	; 0x452a <__ultoa_invert+0x7c>
    4524:	49 5d       	subi	r20, 0xD9	; 217
    4526:	31 fd       	sbrc	r19, 1
    4528:	40 52       	subi	r20, 0x20	; 32
    452a:	41 93       	st	Z+, r20
    452c:	02 d0       	rcall	.+4      	; 0x4532 <__ultoa_invert+0x84>
    452e:	a9 f7       	brne	.-22     	; 0x451a <__ultoa_invert+0x6c>
    4530:	ea cf       	rjmp	.-44     	; 0x4506 <__ultoa_invert+0x58>
    4532:	b4 e0       	ldi	r27, 0x04	; 4
    4534:	a6 95       	lsr	r26
    4536:	97 95       	ror	r25
    4538:	87 95       	ror	r24
    453a:	77 95       	ror	r23
    453c:	67 95       	ror	r22
    453e:	ba 95       	dec	r27
    4540:	c9 f7       	brne	.-14     	; 0x4534 <__ultoa_invert+0x86>
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	61 05       	cpc	r22, r1
    4546:	71 05       	cpc	r23, r1
    4548:	08 95       	ret
    454a:	9b 01       	movw	r18, r22
    454c:	ac 01       	movw	r20, r24
    454e:	0a 2e       	mov	r0, r26
    4550:	06 94       	lsr	r0
    4552:	57 95       	ror	r21
    4554:	47 95       	ror	r20
    4556:	37 95       	ror	r19
    4558:	27 95       	ror	r18
    455a:	ba 95       	dec	r27
    455c:	c9 f7       	brne	.-14     	; 0x4550 <__ultoa_invert+0xa2>
    455e:	62 0f       	add	r22, r18
    4560:	73 1f       	adc	r23, r19
    4562:	84 1f       	adc	r24, r20
    4564:	95 1f       	adc	r25, r21
    4566:	a0 1d       	adc	r26, r0
    4568:	08 95       	ret

0000456a <_exit>:
    456a:	f8 94       	cli

0000456c <__stop_program>:
    456c:	ff cf       	rjmp	.-2      	; 0x456c <__stop_program>
