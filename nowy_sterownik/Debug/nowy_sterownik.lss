
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000443e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002fa  00800060  0000443e  000044d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000298  0080035a  0080035a  000047cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00004864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d85  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002010  00000000  00000000  0000ac01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003bb5  00000000  00000000  0000cc11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000edc  00000000  00000000  000107c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bef  00000000  00000000  000116a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d63  00000000  00000000  00013293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  00015ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__vector_10>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__vector_13>
      38:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	9d 08       	sbc	r9, r13
      56:	a4 08       	sbc	r10, r4
      58:	a7 08       	sbc	r10, r7
      5a:	ad 08       	sbc	r10, r13
      5c:	b3 08       	sbc	r11, r3
      5e:	b8 08       	sbc	r11, r8
      60:	be 08       	sbc	r11, r14
      62:	c5 08       	sbc	r12, r5
      64:	c9 08       	sbc	r12, r9
      66:	d1 08       	sbc	r13, r1
      68:	20 09       	sbc	r18, r0
      6a:	20 09       	sbc	r18, r0
      6c:	20 09       	sbc	r18, r0
      6e:	20 09       	sbc	r18, r0
      70:	20 09       	sbc	r18, r0
      72:	20 09       	sbc	r18, r0
      74:	20 09       	sbc	r18, r0
      76:	20 09       	sbc	r18, r0
      78:	20 09       	sbc	r18, r0
      7a:	20 09       	sbc	r18, r0
      7c:	20 09       	sbc	r18, r0
      7e:	20 09       	sbc	r18, r0
      80:	20 09       	sbc	r18, r0
      82:	20 09       	sbc	r18, r0
      84:	20 09       	sbc	r18, r0
      86:	20 09       	sbc	r18, r0
      88:	20 09       	sbc	r18, r0
      8a:	20 09       	sbc	r18, r0
      8c:	20 09       	sbc	r18, r0
      8e:	20 09       	sbc	r18, r0
      90:	20 09       	sbc	r18, r0
      92:	20 09       	sbc	r18, r0
      94:	20 09       	sbc	r18, r0
      96:	20 09       	sbc	r18, r0
      98:	20 09       	sbc	r18, r0
      9a:	20 09       	sbc	r18, r0
      9c:	20 09       	sbc	r18, r0
      9e:	20 09       	sbc	r18, r0
      a0:	20 09       	sbc	r18, r0
      a2:	20 09       	sbc	r18, r0
      a4:	20 09       	sbc	r18, r0
      a6:	20 09       	sbc	r18, r0
      a8:	20 09       	sbc	r18, r0
      aa:	20 09       	sbc	r18, r0
      ac:	20 09       	sbc	r18, r0
      ae:	20 09       	sbc	r18, r0
      b0:	20 09       	sbc	r18, r0
      b2:	20 09       	sbc	r18, r0
      b4:	20 09       	sbc	r18, r0
      b6:	20 09       	sbc	r18, r0
      b8:	20 09       	sbc	r18, r0
      ba:	20 09       	sbc	r18, r0
      bc:	20 09       	sbc	r18, r0
      be:	20 09       	sbc	r18, r0
      c0:	20 09       	sbc	r18, r0
      c2:	20 09       	sbc	r18, r0
      c4:	20 09       	sbc	r18, r0
      c6:	20 09       	sbc	r18, r0
      c8:	20 09       	sbc	r18, r0
      ca:	20 09       	sbc	r18, r0
      cc:	20 09       	sbc	r18, r0
      ce:	20 09       	sbc	r18, r0
      d0:	20 09       	sbc	r18, r0
      d2:	20 09       	sbc	r18, r0
      d4:	20 09       	sbc	r18, r0
      d6:	20 09       	sbc	r18, r0
      d8:	20 09       	sbc	r18, r0
      da:	20 09       	sbc	r18, r0
      dc:	20 09       	sbc	r18, r0
      de:	20 09       	sbc	r18, r0
      e0:	20 09       	sbc	r18, r0
      e2:	20 09       	sbc	r18, r0
      e4:	20 09       	sbc	r18, r0
      e6:	20 09       	sbc	r18, r0
      e8:	20 09       	sbc	r18, r0
      ea:	20 09       	sbc	r18, r0
      ec:	20 09       	sbc	r18, r0
      ee:	20 09       	sbc	r18, r0
      f0:	20 09       	sbc	r18, r0
      f2:	20 09       	sbc	r18, r0
      f4:	20 09       	sbc	r18, r0
      f6:	20 09       	sbc	r18, r0
      f8:	20 09       	sbc	r18, r0
      fa:	20 09       	sbc	r18, r0
      fc:	20 09       	sbc	r18, r0
      fe:	20 09       	sbc	r18, r0
     100:	20 09       	sbc	r18, r0
     102:	20 09       	sbc	r18, r0
     104:	20 09       	sbc	r18, r0
     106:	20 09       	sbc	r18, r0
     108:	20 09       	sbc	r18, r0
     10a:	20 09       	sbc	r18, r0
     10c:	20 09       	sbc	r18, r0
     10e:	20 09       	sbc	r18, r0
     110:	20 09       	sbc	r18, r0
     112:	20 09       	sbc	r18, r0
     114:	20 09       	sbc	r18, r0
     116:	d8 08       	sbc	r13, r8
     118:	df 08       	sbc	r13, r15
     11a:	e5 08       	sbc	r14, r5
     11c:	ea 08       	sbc	r14, r10
     11e:	f0 08       	sbc	r15, r0
     120:	f6 08       	sbc	r15, r6
     122:	20 09       	sbc	r18, r0
     124:	20 09       	sbc	r18, r0
     126:	20 09       	sbc	r18, r0
     128:	20 09       	sbc	r18, r0
     12a:	20 09       	sbc	r18, r0
     12c:	0f 09       	sbc	r16, r15
     12e:	20 09       	sbc	r18, r0
     130:	20 09       	sbc	r18, r0
     132:	fe 08       	sbc	r15, r14
     134:	03 09       	sbc	r16, r3
     136:	20 09       	sbc	r18, r0
     138:	fb 08       	sbc	r15, r11
     13a:	09 09       	sbc	r16, r9
     13c:	20 09       	sbc	r18, r0
     13e:	20 09       	sbc	r18, r0
     140:	20 09       	sbc	r18, r0
     142:	20 09       	sbc	r18, r0
     144:	20 09       	sbc	r18, r0
     146:	20 09       	sbc	r18, r0
     148:	20 09       	sbc	r18, r0
     14a:	20 09       	sbc	r18, r0
     14c:	20 09       	sbc	r18, r0
     14e:	20 09       	sbc	r18, r0
     150:	20 09       	sbc	r18, r0
     152:	20 09       	sbc	r18, r0
     154:	20 09       	sbc	r18, r0
     156:	20 09       	sbc	r18, r0
     158:	20 09       	sbc	r18, r0
     15a:	20 09       	sbc	r18, r0
     15c:	20 09       	sbc	r18, r0
     15e:	20 09       	sbc	r18, r0
     160:	20 09       	sbc	r18, r0
     162:	20 09       	sbc	r18, r0
     164:	20 09       	sbc	r18, r0
     166:	20 09       	sbc	r18, r0
     168:	20 09       	sbc	r18, r0
     16a:	20 09       	sbc	r18, r0
     16c:	20 09       	sbc	r18, r0
     16e:	20 09       	sbc	r18, r0
     170:	20 09       	sbc	r18, r0
     172:	20 09       	sbc	r18, r0
     174:	20 09       	sbc	r18, r0
     176:	20 09       	sbc	r18, r0
     178:	20 09       	sbc	r18, r0
     17a:	20 09       	sbc	r18, r0
     17c:	20 09       	sbc	r18, r0
     17e:	20 09       	sbc	r18, r0
     180:	20 09       	sbc	r18, r0
     182:	20 09       	sbc	r18, r0
     184:	20 09       	sbc	r18, r0
     186:	20 09       	sbc	r18, r0
     188:	20 09       	sbc	r18, r0
     18a:	20 09       	sbc	r18, r0
     18c:	20 09       	sbc	r18, r0
     18e:	20 09       	sbc	r18, r0
     190:	20 09       	sbc	r18, r0
     192:	20 09       	sbc	r18, r0
     194:	20 09       	sbc	r18, r0
     196:	20 09       	sbc	r18, r0
     198:	20 09       	sbc	r18, r0
     19a:	20 09       	sbc	r18, r0
     19c:	20 09       	sbc	r18, r0
     19e:	20 09       	sbc	r18, r0
     1a0:	20 09       	sbc	r18, r0
     1a2:	20 09       	sbc	r18, r0
     1a4:	20 09       	sbc	r18, r0
     1a6:	20 09       	sbc	r18, r0
     1a8:	20 09       	sbc	r18, r0
     1aa:	20 09       	sbc	r18, r0
     1ac:	20 09       	sbc	r18, r0
     1ae:	20 09       	sbc	r18, r0
     1b0:	20 09       	sbc	r18, r0
     1b2:	20 09       	sbc	r18, r0
     1b4:	20 09       	sbc	r18, r0
     1b6:	20 09       	sbc	r18, r0
     1b8:	20 09       	sbc	r18, r0
     1ba:	20 09       	sbc	r18, r0
     1bc:	20 09       	sbc	r18, r0
     1be:	20 09       	sbc	r18, r0
     1c0:	20 09       	sbc	r18, r0
     1c2:	20 09       	sbc	r18, r0
     1c4:	20 09       	sbc	r18, r0
     1c6:	20 09       	sbc	r18, r0
     1c8:	20 09       	sbc	r18, r0
     1ca:	20 09       	sbc	r18, r0
     1cc:	20 09       	sbc	r18, r0
     1ce:	20 09       	sbc	r18, r0
     1d0:	20 09       	sbc	r18, r0
     1d2:	20 09       	sbc	r18, r0
     1d4:	20 09       	sbc	r18, r0
     1d6:	20 09       	sbc	r18, r0
     1d8:	20 09       	sbc	r18, r0
     1da:	20 09       	sbc	r18, r0
     1dc:	20 09       	sbc	r18, r0
     1de:	20 09       	sbc	r18, r0
     1e0:	20 09       	sbc	r18, r0
     1e2:	20 09       	sbc	r18, r0
     1e4:	20 09       	sbc	r18, r0
     1e6:	20 09       	sbc	r18, r0
     1e8:	20 09       	sbc	r18, r0
     1ea:	20 09       	sbc	r18, r0
     1ec:	20 09       	sbc	r18, r0
     1ee:	20 09       	sbc	r18, r0
     1f0:	20 09       	sbc	r18, r0
     1f2:	20 09       	sbc	r18, r0
     1f4:	20 09       	sbc	r18, r0
     1f6:	20 09       	sbc	r18, r0
     1f8:	20 09       	sbc	r18, r0
     1fa:	20 09       	sbc	r18, r0
     1fc:	20 09       	sbc	r18, r0
     1fe:	20 09       	sbc	r18, r0
     200:	20 09       	sbc	r18, r0
     202:	20 09       	sbc	r18, r0
     204:	20 09       	sbc	r18, r0
     206:	20 09       	sbc	r18, r0
     208:	20 09       	sbc	r18, r0
     20a:	20 09       	sbc	r18, r0
     20c:	20 09       	sbc	r18, r0
     20e:	20 09       	sbc	r18, r0
     210:	20 09       	sbc	r18, r0
     212:	20 09       	sbc	r18, r0
     214:	20 09       	sbc	r18, r0
     216:	20 09       	sbc	r18, r0
     218:	20 09       	sbc	r18, r0
     21a:	20 09       	sbc	r18, r0
     21c:	20 09       	sbc	r18, r0
     21e:	20 09       	sbc	r18, r0
     220:	20 09       	sbc	r18, r0
     222:	20 09       	sbc	r18, r0
     224:	20 09       	sbc	r18, r0
     226:	20 09       	sbc	r18, r0
     228:	20 09       	sbc	r18, r0
     22a:	20 09       	sbc	r18, r0
     22c:	20 09       	sbc	r18, r0
     22e:	20 09       	sbc	r18, r0
     230:	20 09       	sbc	r18, r0
     232:	20 09       	sbc	r18, r0
     234:	20 09       	sbc	r18, r0
     236:	20 09       	sbc	r18, r0
     238:	20 09       	sbc	r18, r0
     23a:	20 09       	sbc	r18, r0
     23c:	20 09       	sbc	r18, r0
     23e:	20 09       	sbc	r18, r0
     240:	20 09       	sbc	r18, r0
     242:	20 09       	sbc	r18, r0
     244:	13 09       	sbc	r17, r3
     246:	1f 09       	sbc	r17, r15
     248:	1d 09       	sbc	r17, r13
     24a:	1b 09       	sbc	r17, r11
     24c:	19 09       	sbc	r17, r9
     24e:	17 09       	sbc	r17, r7
     250:	15 09       	sbc	r17, r5
     252:	07 63       	ori	r16, 0x37	; 55
     254:	42 36       	cpi	r20, 0x62	; 98
     256:	b7 9b       	sbis	0x16, 7	; 22
     258:	d8 a7       	std	Y+40, r29	; 0x28
     25a:	1a 39       	cpi	r17, 0x9A	; 154
     25c:	68 56       	subi	r22, 0x68	; 104
     25e:	18 ae       	std	Y+56, r1	; 0x38
     260:	ba ab       	std	Y+50, r27	; 0x32
     262:	55 8c       	ldd	r5, Z+29	; 0x1d
     264:	1d 3c       	cpi	r17, 0xCD	; 205
     266:	b7 cc       	rjmp	.-1682   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     268:	57 63       	ori	r21, 0x37	; 55
     26a:	bd 6d       	ori	r27, 0xDD	; 221
     26c:	ed fd       	.word	0xfded	; ????
     26e:	75 3e       	cpi	r23, 0xE5	; 229
     270:	f6 17       	cp	r31, r22
     272:	72 31       	cpi	r23, 0x12	; 18
     274:	bf 00       	.word	0x00bf	; ????
     276:	00 00       	nop
     278:	80 3f       	cpi	r24, 0xF0	; 240
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <button_7_menu+0x22>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
	...

000002d4 <__trampolines_end>:
     2d4:	6e 61       	ori	r22, 0x1E	; 30
     2d6:	6e 00       	.word	0x006e	; ????

000002d8 <__c.2332>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf e5       	ldi	r28, 0x5F	; 95
     3dc:	d8 e0       	ldi	r29, 0x08	; 8
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	cd bf       	out	0x3d, r28	; 61

000003e2 <__do_copy_data>:
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	a0 e6       	ldi	r26, 0x60	; 96
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ee e3       	ldi	r30, 0x3E	; 62
     3ea:	f4 e4       	ldi	r31, 0x44	; 68
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x10>
     3ee:	05 90       	lpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	aa 35       	cpi	r26, 0x5A	; 90
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0xc>

000003f8 <__do_clear_bss>:
     3f8:	25 e0       	ldi	r18, 0x05	; 5
     3fa:	aa e5       	ldi	r26, 0x5A	; 90
     3fc:	b3 e0       	ldi	r27, 0x03	; 3
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a2 3f       	cpi	r26, 0xF2	; 242
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 39 02 	call	0x472	; 0x472 <main>
     40c:	0c 94 1d 22 	jmp	0x443a	; 0x443a <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	ae 01       	movw	r20, r28
     41e:	4b 5f       	subi	r20, 0xFB	; 251
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	fa 01       	movw	r30, r20
     424:	61 91       	ld	r22, Z+
     426:	71 91       	ld	r23, Z+
     428:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     42a:	80 ed       	ldi	r24, 0xD0	; 208
     42c:	94 e0       	ldi	r25, 0x04	; 4
     42e:	0e 94 a3 21 	call	0x4346	; 0x4346 <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     432:	80 ed       	ldi	r24, 0xD0	; 208
     434:	94 e0       	ldi	r25, 0x04	; 4
     436:	0e 94 8c 18 	call	0x3118	; 0x3118 <uart0_puts>
	#endif
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     440:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     442:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     444:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     446:	89 9a       	sbi	0x11, 1	; 17
     448:	08 95       	ret

0000044a <init_driver>:
}

void init_driver(void)
{
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <uart0_init>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     452:	62 e3       	ldi	r22, 0x32	; 50
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <timer0_init>
	init_display_drv();
     45a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <init_display_drv>
	init_buttons();
     45e:	0e 94 cc 04 	call	0x998	; 0x998 <init_buttons>
	init_system();
     462:	0e 94 33 15 	call	0x2a66	; 0x2a66 <init_system>
	init_measure();
     466:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     46a:	80 b7       	in	r24, 0x30	; 48
     46c:	8b 7f       	andi	r24, 0xFB	; 251
     46e:	80 bf       	out	0x30, r24	; 48
     470:	08 95       	ret

00000472 <main>:
}

int main(void)
{
	init_pin();
     472:	0e 94 20 02 	call	0x440	; 0x440 <init_pin>
	sei();
     476:	78 94       	sei
	init_driver();
     478:	0e 94 25 02 	call	0x44a	; 0x44a <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     47c:	8f e7       	ldi	r24, 0x7F	; 127
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     488:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <init_menu>
	#endif
	#if CONFIG_DEVICE_SIEWNIK
	measure_get_servo_calibration();
     48c:	0e 94 9a 10 	call	0x2134	; 0x2134 <measure_get_servo_calibration>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
	#endif
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     494:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <disp_process>
		animation();
     498:	0e 94 ac 0b 	call	0x1758	; 0x1758 <animation>
		process_button();
     49c:	0e 94 22 04 	call	0x844	; 0x844 <process_button>
		disp_fast_process();
     4a0:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <disp_fast_process>
		disp_very_fast_process();
     4a4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <disp_very_fast_process>
		dcmotor_process(motor_value);
     4a8:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <motor_value>
     4ac:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     4b0:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
     4b4:	0e 94 b9 12 	call	0x2572	; 0x2572 <servo_process>
		menu_process();
     4b8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     4bc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <error_event>
		error_led_blink();
     4c0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <error_led_blink>
		measure_process();
     4c4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <measure_process>
		accumulator_process();
     4c8:	0e 94 87 02 	call	0x50e	; 0x50e <accumulator_process>
		accum_led_process();
     4cc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <accum_led_process>
		buzzer_process();
     4d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <buzzer_process>
     4d4:	df cf       	rjmp	.-66     	; 0x494 <main+0x22>

000004d6 <accum_get_voltage>:
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <measure_get_filtered_value>
     4dc:	bc 01       	movw	r22, r24
     4de:	66 0f       	add	r22, r22
     4e0:	77 1f       	adc	r23, r23
     4e2:	66 0f       	add	r22, r22
     4e4:	77 1f       	adc	r23, r23
     4e6:	86 0f       	add	r24, r22
     4e8:	97 1f       	adc	r25, r23
     4ea:	bc 01       	movw	r22, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 b0 19 	call	0x3360	; 0x3360 <__floatunsisf>
     4f4:	26 e6       	ldi	r18, 0x66	; 102
     4f6:	36 e6       	ldi	r19, 0x66	; 102
     4f8:	46 eb       	ldi	r20, 0xB6	; 182
     4fa:	50 e4       	ldi	r21, 0x40	; 64
     4fc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5a e3       	ldi	r21, 0x3A	; 58
     508:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
     50c:	08 95       	ret

0000050e <accumulator_process>:
     50e:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
     512:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
     516:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
     51a:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
     51e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <accumulator_timer.1914>
     522:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <accumulator_timer.1914+0x1>
     526:	a0 91 61 03 	lds	r26, 0x0361	; 0x800361 <accumulator_timer.1914+0x2>
     52a:	b0 91 62 03 	lds	r27, 0x0362	; 0x800362 <accumulator_timer.1914+0x3>
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a6 07       	cpc	r26, r22
     534:	b7 07       	cpc	r27, r23
     536:	98 f5       	brcc	.+102    	; 0x59e <accumulator_process+0x90>
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <measure_get_filtered_value>
     53e:	89 35       	cpi	r24, 0x59	; 89
     540:	22 e0       	ldi	r18, 0x02	; 2
     542:	92 07       	cpc	r25, r18
     544:	18 f0       	brcs	.+6      	; 0x54c <accumulator_process+0x3e>
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <accumulator_state>
     54c:	8b 38       	cpi	r24, 0x8B	; 139
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	92 07       	cpc	r25, r18
     552:	18 f4       	brcc	.+6      	; 0x55a <accumulator_process+0x4c>
     554:	22 e0       	ldi	r18, 0x02	; 2
     556:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <accumulator_state>
     55a:	8e 35       	cpi	r24, 0x5E	; 94
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	92 07       	cpc	r25, r18
     560:	18 f4       	brcc	.+6      	; 0x568 <accumulator_process+0x5a>
     562:	23 e0       	ldi	r18, 0x03	; 3
     564:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <accumulator_state>
     568:	8c 58       	subi	r24, 0x8C	; 140
     56a:	91 40       	sbci	r25, 0x01	; 1
     56c:	8c 3c       	cpi	r24, 0xCC	; 204
     56e:	91 05       	cpc	r25, r1
     570:	10 f4       	brcc	.+4      	; 0x576 <accumulator_process+0x68>
     572:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <accumulator_state>
     576:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
     57a:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
     57e:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
     582:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
     586:	8c 59       	subi	r24, 0x9C	; 156
     588:	9f 4f       	sbci	r25, 0xFF	; 255
     58a:	af 4f       	sbci	r26, 0xFF	; 255
     58c:	bf 4f       	sbci	r27, 0xFF	; 255
     58e:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <accumulator_timer.1914>
     592:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <accumulator_timer.1914+0x1>
     596:	a0 93 61 03 	sts	0x0361, r26	; 0x800361 <accumulator_timer.1914+0x2>
     59a:	b0 93 62 03 	sts	0x0362, r27	; 0x800362 <accumulator_timer.1914+0x3>
     59e:	08 95       	ret

000005a0 <accum_led_process>:
     5a0:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
     5a4:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
     5a8:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
     5ac:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
     5b0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     5b4:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     5b8:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     5bc:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	a6 07       	cpc	r26, r22
     5c6:	b7 07       	cpc	r27, r23
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <accum_led_process+0x2c>
     5ca:	86 c0       	rjmp	.+268    	; 0x6d8 <accum_led_process+0x138>
     5cc:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <accumulator_state>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	e9 f0       	breq	.+58     	; 0x60e <accum_led_process+0x6e>
     5d4:	30 f0       	brcs	.+12     	; 0x5e2 <accum_led_process+0x42>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	99 f1       	breq	.+102    	; 0x640 <accum_led_process+0xa0>
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <accum_led_process+0x40>
     5de:	67 c0       	rjmp	.+206    	; 0x6ae <accum_led_process+0x10e>
     5e0:	08 95       	ret
     5e2:	c5 98       	cbi	0x18, 5	; 24
     5e4:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     5e8:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     5ec:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     5f0:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     5f4:	88 53       	subi	r24, 0x38	; 56
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	af 4f       	sbci	r26, 0xFF	; 255
     5fa:	bf 4f       	sbci	r27, 0xFF	; 255
     5fc:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <process_timer.1918>
     600:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <process_timer.1918+0x1>
     604:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <process_timer.1918+0x2>
     608:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <process_timer.1918+0x3>
     60c:	08 95       	ret
     60e:	98 b3       	in	r25, 0x18	; 24
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	89 27       	eor	r24, r25
     614:	88 bb       	out	0x18, r24	; 24
     616:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     61a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     61e:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     622:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     626:	86 50       	subi	r24, 0x06	; 6
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	af 4f       	sbci	r26, 0xFF	; 255
     62c:	bf 4f       	sbci	r27, 0xFF	; 255
     62e:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <process_timer.1918>
     632:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <process_timer.1918+0x1>
     636:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <process_timer.1918+0x2>
     63a:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <process_timer.1918+0x3>
     63e:	08 95       	ret
     640:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <__data_end>
     644:	81 11       	cpse	r24, r1
     646:	19 c0       	rjmp	.+50     	; 0x67a <accum_led_process+0xda>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <__data_end>
     64e:	c5 9a       	sbi	0x18, 5	; 24
     650:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     654:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     658:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     65c:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     660:	8c 50       	subi	r24, 0x0C	; 12
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	af 4f       	sbci	r26, 0xFF	; 255
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <process_timer.1918>
     66c:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <process_timer.1918+0x1>
     670:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <process_timer.1918+0x2>
     674:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <process_timer.1918+0x3>
     678:	08 95       	ret
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	69 f5       	brne	.+90     	; 0x6d8 <accum_led_process+0x138>
     67e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <__data_end>
     682:	c5 98       	cbi	0x18, 5	; 24
     684:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     688:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     68c:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     690:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     694:	84 52       	subi	r24, 0x24	; 36
     696:	9a 4f       	sbci	r25, 0xFA	; 250
     698:	af 4f       	sbci	r26, 0xFF	; 255
     69a:	bf 4f       	sbci	r27, 0xFF	; 255
     69c:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <process_timer.1918>
     6a0:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <process_timer.1918+0x1>
     6a4:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <process_timer.1918+0x2>
     6a8:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <process_timer.1918+0x3>
     6ac:	08 95       	ret
     6ae:	c5 9a       	sbi	0x18, 5	; 24
     6b0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <process_timer.1918>
     6b4:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <process_timer.1918+0x1>
     6b8:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <process_timer.1918+0x2>
     6bc:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <process_timer.1918+0x3>
     6c0:	88 51       	subi	r24, 0x18	; 24
     6c2:	9c 4f       	sbci	r25, 0xFC	; 252
     6c4:	af 4f       	sbci	r26, 0xFF	; 255
     6c6:	bf 4f       	sbci	r27, 0xFF	; 255
     6c8:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <process_timer.1918>
     6cc:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <process_timer.1918+0x1>
     6d0:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <process_timer.1918+0x2>
     6d4:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <process_timer.1918+0x3>
     6d8:	08 95       	ret

000006da <adc_setchannel>:
     6da:	37 98       	cbi	0x06, 7	; 6
     6dc:	97 b1       	in	r25, 0x07	; 7
     6de:	98 7f       	andi	r25, 0xF8	; 248
     6e0:	87 70       	andi	r24, 0x07	; 7
     6e2:	89 2b       	or	r24, r25
     6e4:	87 b9       	out	0x07, r24	; 7
     6e6:	37 9a       	sbi	0x06, 7	; 6
     6e8:	08 95       	ret

000006ea <adc_readsel>:
     6ea:	36 9a       	sbi	0x06, 6	; 6
     6ec:	36 99       	sbic	0x06, 6	; 6
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <adc_readsel+0x2>
     6f0:	84 b1       	in	r24, 0x04	; 4
     6f2:	95 b1       	in	r25, 0x05	; 5
     6f4:	08 95       	ret

000006f6 <adc_read>:
     6f6:	0e 94 6d 03 	call	0x6da	; 0x6da <adc_setchannel>
     6fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <adc_readsel>
     6fe:	08 95       	ret

00000700 <read_button>:
     700:	dc 01       	movw	r26, r24
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	ed 91       	ld	r30, X+
     706:	fc 91       	ld	r31, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	20 81       	ld	r18, Z
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	f9 01       	movw	r30, r18
     710:	18 96       	adiw	r26, 0x08	; 8
     712:	0c 90       	ld	r0, X
     714:	02 c0       	rjmp	.+4      	; 0x71a <read_button+0x1a>
     716:	f5 95       	asr	r31
     718:	e7 95       	ror	r30
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <read_button+0x16>
     71e:	cf 01       	movw	r24, r30
     720:	81 70       	andi	r24, 0x01	; 1
     722:	08 95       	ret

00000724 <init_but_struct>:
     724:	ed e7       	ldi	r30, 0x7D	; 125
     726:	f5 e0       	ldi	r31, 0x05	; 5
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	85 83       	std	Z+5, r24	; 0x05
     72e:	14 86       	std	Z+12, r1	; 0x0c
     730:	13 86       	std	Z+11, r1	; 0x0b
     732:	12 86       	std	Z+10, r1	; 0x0a
     734:	11 86       	std	Z+9, r1	; 0x09
     736:	16 86       	std	Z+14, r1	; 0x0e
     738:	15 86       	std	Z+13, r1	; 0x0d
     73a:	26 e3       	ldi	r18, 0x36	; 54
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	37 83       	std	Z+7, r19	; 0x07
     740:	26 83       	std	Z+6, r18	; 0x06
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	90 87       	std	Z+8, r25	; 0x08
     746:	e0 e5       	ldi	r30, 0x50	; 80
     748:	f5 e0       	ldi	r31, 0x05	; 5
     74a:	14 82       	std	Z+4, r1	; 0x04
     74c:	85 83       	std	Z+5, r24	; 0x05
     74e:	14 86       	std	Z+12, r1	; 0x0c
     750:	13 86       	std	Z+11, r1	; 0x0b
     752:	12 86       	std	Z+10, r1	; 0x0a
     754:	11 86       	std	Z+9, r1	; 0x09
     756:	16 86       	std	Z+14, r1	; 0x0e
     758:	15 86       	std	Z+13, r1	; 0x0d
     75a:	37 83       	std	Z+7, r19	; 0x07
     75c:	26 83       	std	Z+6, r18	; 0x06
     75e:	80 87       	std	Z+8, r24	; 0x08
     760:	ef e5       	ldi	r30, 0x5F	; 95
     762:	f5 e0       	ldi	r31, 0x05	; 5
     764:	14 82       	std	Z+4, r1	; 0x04
     766:	85 83       	std	Z+5, r24	; 0x05
     768:	14 86       	std	Z+12, r1	; 0x0c
     76a:	13 86       	std	Z+11, r1	; 0x0b
     76c:	12 86       	std	Z+10, r1	; 0x0a
     76e:	11 86       	std	Z+9, r1	; 0x09
     770:	16 86       	std	Z+14, r1	; 0x0e
     772:	15 86       	std	Z+13, r1	; 0x0d
     774:	37 83       	std	Z+7, r19	; 0x07
     776:	26 83       	std	Z+6, r18	; 0x06
     778:	96 e0       	ldi	r25, 0x06	; 6
     77a:	90 87       	std	Z+8, r25	; 0x08
     77c:	ed e3       	ldi	r30, 0x3D	; 61
     77e:	f5 e0       	ldi	r31, 0x05	; 5
     780:	14 82       	std	Z+4, r1	; 0x04
     782:	85 83       	std	Z+5, r24	; 0x05
     784:	14 86       	std	Z+12, r1	; 0x0c
     786:	13 86       	std	Z+11, r1	; 0x0b
     788:	12 86       	std	Z+10, r1	; 0x0a
     78a:	11 86       	std	Z+9, r1	; 0x09
     78c:	16 86       	std	Z+14, r1	; 0x0e
     78e:	15 86       	std	Z+13, r1	; 0x0d
     790:	40 e3       	ldi	r20, 0x30	; 48
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	57 83       	std	Z+7, r21	; 0x07
     796:	46 83       	std	Z+6, r20	; 0x06
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	90 87       	std	Z+8, r25	; 0x08
     79c:	ee e2       	ldi	r30, 0x2E	; 46
     79e:	f5 e0       	ldi	r31, 0x05	; 5
     7a0:	14 82       	std	Z+4, r1	; 0x04
     7a2:	85 83       	std	Z+5, r24	; 0x05
     7a4:	14 86       	std	Z+12, r1	; 0x0c
     7a6:	13 86       	std	Z+11, r1	; 0x0b
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	11 86       	std	Z+9, r1	; 0x09
     7ac:	16 86       	std	Z+14, r1	; 0x0e
     7ae:	15 86       	std	Z+13, r1	; 0x0d
     7b0:	37 83       	std	Z+7, r19	; 0x07
     7b2:	26 83       	std	Z+6, r18	; 0x06
     7b4:	90 87       	std	Z+8, r25	; 0x08
     7b6:	ee e6       	ldi	r30, 0x6E	; 110
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	14 82       	std	Z+4, r1	; 0x04
     7bc:	85 83       	std	Z+5, r24	; 0x05
     7be:	14 86       	std	Z+12, r1	; 0x0c
     7c0:	13 86       	std	Z+11, r1	; 0x0b
     7c2:	12 86       	std	Z+10, r1	; 0x0a
     7c4:	11 86       	std	Z+9, r1	; 0x09
     7c6:	16 86       	std	Z+14, r1	; 0x0e
     7c8:	15 86       	std	Z+13, r1	; 0x0d
     7ca:	69 e3       	ldi	r22, 0x39	; 57
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	77 83       	std	Z+7, r23	; 0x07
     7d0:	66 83       	std	Z+6, r22	; 0x06
     7d2:	a4 e0       	ldi	r26, 0x04	; 4
     7d4:	a0 87       	std	Z+8, r26	; 0x08
     7d6:	ec e8       	ldi	r30, 0x8C	; 140
     7d8:	f5 e0       	ldi	r31, 0x05	; 5
     7da:	14 82       	std	Z+4, r1	; 0x04
     7dc:	85 83       	std	Z+5, r24	; 0x05
     7de:	14 86       	std	Z+12, r1	; 0x0c
     7e0:	13 86       	std	Z+11, r1	; 0x0b
     7e2:	12 86       	std	Z+10, r1	; 0x0a
     7e4:	11 86       	std	Z+9, r1	; 0x09
     7e6:	16 86       	std	Z+14, r1	; 0x0e
     7e8:	15 86       	std	Z+13, r1	; 0x0d
     7ea:	43 e3       	ldi	r20, 0x33	; 51
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	57 83       	std	Z+7, r21	; 0x07
     7f0:	46 83       	std	Z+6, r20	; 0x06
     7f2:	80 87       	std	Z+8, r24	; 0x08
     7f4:	eb e9       	ldi	r30, 0x9B	; 155
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	14 82       	std	Z+4, r1	; 0x04
     7fa:	85 83       	std	Z+5, r24	; 0x05
     7fc:	14 86       	std	Z+12, r1	; 0x0c
     7fe:	13 86       	std	Z+11, r1	; 0x0b
     800:	12 86       	std	Z+10, r1	; 0x0a
     802:	11 86       	std	Z+9, r1	; 0x09
     804:	16 86       	std	Z+14, r1	; 0x0e
     806:	15 86       	std	Z+13, r1	; 0x0d
     808:	37 83       	std	Z+7, r19	; 0x07
     80a:	26 83       	std	Z+6, r18	; 0x06
     80c:	a0 87       	std	Z+8, r26	; 0x08
     80e:	e0 e1       	ldi	r30, 0x10	; 16
     810:	f5 e0       	ldi	r31, 0x05	; 5
     812:	14 82       	std	Z+4, r1	; 0x04
     814:	85 83       	std	Z+5, r24	; 0x05
     816:	14 86       	std	Z+12, r1	; 0x0c
     818:	13 86       	std	Z+11, r1	; 0x0b
     81a:	12 86       	std	Z+10, r1	; 0x0a
     81c:	11 86       	std	Z+9, r1	; 0x09
     81e:	16 86       	std	Z+14, r1	; 0x0e
     820:	15 86       	std	Z+13, r1	; 0x0d
     822:	77 83       	std	Z+7, r23	; 0x07
     824:	66 83       	std	Z+6, r22	; 0x06
     826:	90 87       	std	Z+8, r25	; 0x08
     828:	ef e1       	ldi	r30, 0x1F	; 31
     82a:	f5 e0       	ldi	r31, 0x05	; 5
     82c:	14 82       	std	Z+4, r1	; 0x04
     82e:	85 83       	std	Z+5, r24	; 0x05
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	13 86       	std	Z+11, r1	; 0x0b
     834:	12 86       	std	Z+10, r1	; 0x0a
     836:	11 86       	std	Z+9, r1	; 0x09
     838:	16 86       	std	Z+14, r1	; 0x0e
     83a:	15 86       	std	Z+13, r1	; 0x0d
     83c:	57 83       	std	Z+7, r21	; 0x07
     83e:	46 83       	std	Z+6, r20	; 0x06
     840:	10 86       	std	Z+8, r1	; 0x08
     842:	08 95       	ret

00000844 <process_button>:
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
     856:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
     85a:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
     85e:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
     862:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <timer_button>
     866:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <timer_button+0x1>
     86a:	a0 91 4e 05 	lds	r26, 0x054E	; 0x80054e <timer_button+0x2>
     86e:	b0 91 4f 05 	lds	r27, 0x054F	; 0x80054f <timer_button+0x3>
     872:	84 17       	cp	r24, r20
     874:	95 07       	cpc	r25, r21
     876:	a6 07       	cpc	r26, r22
     878:	b7 07       	cpc	r27, r23
     87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
     87c:	85 c0       	rjmp	.+266    	; 0x988 <__stack+0x129>
     87e:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
     882:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
     886:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
     88a:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
     88e:	44 96       	adiw	r24, 0x14	; 20
     890:	a1 1d       	adc	r26, r1
     892:	b1 1d       	adc	r27, r1
     894:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <timer_button>
     898:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <timer_button+0x1>
     89c:	a0 93 4e 05 	sts	0x054E, r26	; 0x80054e <timer_button+0x2>
     8a0:	b0 93 4f 05 	sts	0x054F, r27	; 0x80054f <timer_button+0x3>
     8a4:	c0 e6       	ldi	r28, 0x60	; 96
     8a6:	d0 e0       	ldi	r29, 0x00	; 0
     8a8:	0f 2e       	mov	r0, r31
     8aa:	f4 e7       	ldi	r31, 0x74	; 116
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	dd 24       	eor	r13, r13
     8b6:	d3 94       	inc	r13
     8b8:	8e 01       	movw	r16, r28
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	0e 94 80 03 	call	0x700	; 0x700 <read_button>
     8c2:	e8 81       	ld	r30, Y
     8c4:	f9 81       	ldd	r31, Y+1	; 0x01
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	89 17       	cp	r24, r25
     8ca:	e1 f0       	breq	.+56     	; 0x904 <__stack+0xa5>
     8cc:	85 83       	std	Z+5, r24	; 0x05
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	61 f4       	brne	.+24     	; 0x8ea <__stack+0x8b>
     8d2:	88 81       	ld	r24, Y
     8d4:	99 81       	ldd	r25, Y+1	; 0x01
     8d6:	dc 01       	movw	r26, r24
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	1a 97       	sbiw	r26, 0x0a	; 10
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	41 c0       	rjmp	.+130    	; 0x968 <__stack+0x109>
     8e6:	09 95       	icall
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <__stack+0x109>
     8ea:	81 11       	cpse	r24, r1
     8ec:	3d c0       	rjmp	.+122    	; 0x968 <__stack+0x109>
     8ee:	88 81       	ld	r24, Y
     8f0:	99 81       	ldd	r25, Y+1	; 0x01
     8f2:	dc 01       	movw	r26, r24
     8f4:	1b 96       	adiw	r26, 0x0b	; 11
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	1c 97       	sbiw	r26, 0x0c	; 12
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0xa9>
     900:	09 95       	icall
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	81 11       	cpse	r24, r1
     906:	30 c0       	rjmp	.+96     	; 0x968 <__stack+0x109>
     908:	d8 01       	movw	r26, r16
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	a2 81       	ldd	r26, Z+2	; 0x02
     914:	b3 81       	ldd	r27, Z+3	; 0x03
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	a1 1d       	adc	r26, r1
     91a:	b1 1d       	adc	r27, r1
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	a2 83       	std	Z+2, r26	; 0x02
     922:	b3 83       	std	Z+3, r27	; 0x03
     924:	d8 01       	movw	r26, r16
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	80 81       	ld	r24, Z
     92c:	91 81       	ldd	r25, Z+1	; 0x01
     92e:	a2 81       	ldd	r26, Z+2	; 0x02
     930:	b3 81       	ldd	r27, Z+3	; 0x03
     932:	88 97       	sbiw	r24, 0x28	; 40
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	10 f1       	brcs	.+68     	; 0x97e <__stack+0x11f>
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	f9 f0       	breq	.+62     	; 0x97e <__stack+0x11f>
     940:	05 84       	ldd	r0, Z+13	; 0x0d
     942:	f6 85       	ldd	r31, Z+14	; 0x0e
     944:	e0 2d       	mov	r30, r0
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0xf1>
     94a:	8d e7       	ldi	r24, 0x7D	; 125
     94c:	95 e0       	ldi	r25, 0x05	; 5
     94e:	09 95       	icall
     950:	d8 01       	movw	r26, r16
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
     964:	d4 82       	std	Z+4, r13	; 0x04
     966:	0b c0       	rjmp	.+22     	; 0x97e <__stack+0x11f>
     968:	d8 01       	movw	r26, r16
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	ed 91       	ld	r30, X+
     97a:	fc 91       	ld	r31, X
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	22 96       	adiw	r28, 0x02	; 2
     980:	ce 15       	cp	r28, r14
     982:	df 05       	cpc	r29, r15
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	98 cf       	rjmp	.-208    	; 0x8b8 <__stack+0x59>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	08 95       	ret

00000998 <init_buttons>:
     998:	0e 94 92 03 	call	0x724	; 0x724 <init_but_struct>
     99c:	ba 98       	cbi	0x17, 2	; 23
     99e:	c2 9a       	sbi	0x18, 2	; 24
     9a0:	b9 98       	cbi	0x17, 1	; 23
     9a2:	c1 9a       	sbi	0x18, 1	; 24
     9a4:	be 98       	cbi	0x17, 6	; 23
     9a6:	c6 9a       	sbi	0x18, 6	; 24
     9a8:	8b 98       	cbi	0x11, 3	; 17
     9aa:	93 9a       	sbi	0x12, 3	; 18
     9ac:	bb 98       	cbi	0x17, 3	; 23
     9ae:	c3 9a       	sbi	0x18, 3	; 24
     9b0:	d4 98       	cbi	0x1a, 4	; 26
     9b2:	dc 9a       	sbi	0x1b, 4	; 27
     9b4:	a1 98       	cbi	0x14, 1	; 20
     9b6:	a9 9a       	sbi	0x15, 1	; 21
     9b8:	bc 98       	cbi	0x17, 4	; 23
     9ba:	c4 9a       	sbi	0x18, 4	; 24
     9bc:	d3 98       	cbi	0x1a, 3	; 26
     9be:	db 9a       	sbi	0x1b, 3	; 27
     9c0:	a0 98       	cbi	0x14, 0	; 20
     9c2:	a8 9a       	sbi	0x15, 0	; 21
     9c4:	08 95       	ret

000009c6 <buzzer_process>:
     9c6:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
     9ca:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
     9ce:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
     9d2:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
     9d6:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <buzzer_timer>
     9da:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <buzzer_timer+0x1>
     9de:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <buzzer_timer+0x2>
     9e2:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <buzzer_timer+0x3>
     9e6:	84 17       	cp	r24, r20
     9e8:	95 07       	cpc	r25, r21
     9ea:	a6 07       	cpc	r26, r22
     9ec:	b7 07       	cpc	r27, r23
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <buzzer_process+0x2c>
     9f0:	59 c0       	rjmp	.+178    	; 0xaa4 <buzzer_process+0xde>
     9f2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
     9f6:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
     9fa:	95 ff       	sbrs	r25, 5
     9fc:	37 c0       	rjmp	.+110    	; 0xa6c <buzzer_process+0xa6>
     9fe:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <buzzer_state>
     a02:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <buzzer_state+0x1>
     a06:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <buzzer_state+0x2>
     a0a:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <buzzer_state+0x3>
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	59 f5       	brne	.+86     	; 0xa6c <buzzer_process+0xa6>
     a16:	c0 9a       	sbi	0x18, 0	; 24
     a18:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
     a1c:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
     a20:	9f 7d       	andi	r25, 0xDF	; 223
     a22:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
     a26:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <buzzer_state>
     a36:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <buzzer_state+0x1>
     a3a:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <buzzer_state+0x2>
     a3e:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <buzzer_state+0x3>
     a42:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <buzzer_timer>
     a46:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <buzzer_timer+0x1>
     a4a:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <buzzer_timer+0x2>
     a4e:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <buzzer_timer+0x3>
     a52:	8c 59       	subi	r24, 0x9C	; 156
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	af 4f       	sbci	r26, 0xFF	; 255
     a58:	bf 4f       	sbci	r27, 0xFF	; 255
     a5a:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <buzzer_timer>
     a5e:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <buzzer_timer+0x1>
     a62:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <buzzer_timer+0x2>
     a66:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <buzzer_timer+0x3>
     a6a:	08 95       	ret
     a6c:	c0 98       	cbi	0x18, 0	; 24
     a6e:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <buzzer_state>
     a72:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <buzzer_state+0x1>
     a76:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <buzzer_state+0x2>
     a7a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <buzzer_state+0x3>
     a7e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <buzzer_timer>
     a82:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <buzzer_timer+0x1>
     a86:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <buzzer_timer+0x2>
     a8a:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <buzzer_timer+0x3>
     a8e:	c2 96       	adiw	r24, 0x32	; 50
     a90:	a1 1d       	adc	r26, r1
     a92:	b1 1d       	adc	r27, r1
     a94:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <buzzer_timer>
     a98:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <buzzer_timer+0x1>
     a9c:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <buzzer_timer+0x2>
     aa0:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <buzzer_timer+0x3>
     aa4:	08 95       	ret

00000aa6 <init_buzzer>:
     aa6:	b8 9a       	sbi	0x17, 0	; 23
     aa8:	c0 98       	cbi	0x18, 0	; 24
     aaa:	08 95       	ret

00000aac <button_7_menu>:
uint8_t menuSaveParameters[4];

uint8_t dark_menu_parameters_len(void)
{
	return sizeof(menuSaveParameters);
}
     aac:	e0 eb       	ldi	r30, 0xB0	; 176
     aae:	f5 e0       	ldi	r31, 0x05	; 5
     ab0:	a4 e7       	ldi	r26, 0x74	; 116
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	8c 91       	ld	r24, X
     ab8:	11 97       	sbiw	r26, 0x01	; 1
     aba:	80 83       	st	Z, r24
     abc:	13 96       	adiw	r26, 0x03	; 3
     abe:	8c 91       	ld	r24, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	81 83       	std	Z+1, r24	; 0x01
     ac4:	15 96       	adiw	r26, 0x05	; 5
     ac6:	8c 91       	ld	r24, X
     ac8:	15 97       	sbiw	r26, 0x05	; 5
     aca:	82 83       	std	Z+2, r24	; 0x02
     acc:	17 96       	adiw	r26, 0x07	; 7
     ace:	8c 91       	ld	r24, X
     ad0:	83 83       	std	Z+3, r24	; 0x03
     ad2:	08 95       	ret

00000ad4 <button_debug_msg>:
     ad4:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <configured_parameter>
     ad8:	1f 92       	push	r1
     ada:	8f 93       	push	r24
     adc:	86 ea       	ldi	r24, 0xA6	; 166
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     ae8:	e0 eb       	ldi	r30, 0xB0	; 176
     aea:	f5 e0       	ldi	r31, 0x05	; 5
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	1f 92       	push	r1
     af0:	8f 93       	push	r24
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	81 81       	ldd	r24, Z+1	; 0x01
     afa:	1f 92       	push	r1
     afc:	8f 93       	push	r24
     afe:	80 81       	ld	r24, Z
     b00:	1f 92       	push	r1
     b02:	8f 93       	push	r24
     b04:	80 eb       	ldi	r24, 0xB0	; 176
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	0e 96       	adiw	r24, 0x0e	; 14
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	08 95       	ret

00000b22 <button_6_menu>:
     b22:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <configured_parameter>
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	e0 55       	subi	r30, 0x50	; 80
     b2c:	fa 4f       	sbci	r31, 0xFA	; 250
     b2e:	20 81       	ld	r18, Z
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	ec 58       	subi	r30, 0x8C	; 140
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	30 81       	ld	r19, Z
     b3c:	23 17       	cp	r18, r19
     b3e:	28 f4       	brcc	.+10     	; 0xb4a <button_6_menu+0x28>
     b40:	fc 01       	movw	r30, r24
     b42:	e0 55       	subi	r30, 0x50	; 80
     b44:	fa 4f       	sbci	r31, 0xFA	; 250
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 83       	st	Z, r18
     b4a:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b4e:	08 95       	ret

00000b50 <button_5_menu>:
     b50:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <configured_parameter>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	fc 01       	movw	r30, r24
     b58:	e0 55       	subi	r30, 0x50	; 80
     b5a:	fa 4f       	sbci	r31, 0xFA	; 250
     b5c:	20 81       	ld	r18, Z
     b5e:	22 23       	and	r18, r18
     b60:	29 f0       	breq	.+10     	; 0xb6c <button_5_menu+0x1c>
     b62:	fc 01       	movw	r30, r24
     b64:	e0 55       	subi	r30, 0x50	; 80
     b66:	fa 4f       	sbci	r31, 0xFA	; 250
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	20 83       	st	Z, r18
     b6c:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b70:	08 95       	ret

00000b72 <button_2_menu>:
     b72:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <configured_parameter>
     b76:	83 30       	cpi	r24, 0x03	; 3
     b78:	18 f4       	brcc	.+6      	; 0xb80 <button_2_menu+0xe>
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <configured_parameter>
     b80:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b84:	08 95       	ret

00000b86 <button_1_menu>:
     b86:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <configured_parameter>
     b8a:	88 23       	and	r24, r24
     b8c:	19 f0       	breq	.+6      	; 0xb94 <button_1_menu+0xe>
     b8e:	81 50       	subi	r24, 0x01	; 1
     b90:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <configured_parameter>
     b94:	0e 94 6a 05 	call	0xad4	; 0xad4 <button_debug_msg>
     b98:	08 95       	ret

00000b9a <button_3_menu>:
     b9a:	60 eb       	ldi	r22, 0xB0	; 176
     b9c:	75 e0       	ldi	r23, 0x05	; 5
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	0e 94 2b 11 	call	0x2256	; 0x2256 <mem_save_data>
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
     baa:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
     bae:	94 98       	cbi	0x12, 4	; 18
     bb0:	96 98       	cbi	0x12, 6	; 18
     bb2:	08 95       	ret

00000bb4 <pass_add_number>:
     bb4:	cf 93       	push	r28
     bb6:	e0 91 b5 05 	lds	r30, 0x05B5	; 0x8005b5 <pass_len>
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	9e 0f       	add	r25, r30
     bbe:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <pass_len>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e6 55       	subi	r30, 0x56	; 86
     bc6:	fa 4f       	sbci	r31, 0xFA	; 250
     bc8:	80 83       	st	Z, r24
     bca:	1f 92       	push	r1
     bcc:	8f 93       	push	r24
     bce:	8f ec       	ldi	r24, 0xCF	; 207
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     bda:	c0 91 b5 05 	lds	r28, 0x05B5	; 0x8005b5 <pass_len>
     bde:	4c 2f       	mov	r20, r28
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	6f e0       	ldi	r22, 0x0F	; 15
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	8a ea       	ldi	r24, 0xAA	; 170
     be8:	95 e0       	ldi	r25, 0x05	; 5
     bea:	0e 94 4f 21 	call	0x429e	; 0x429e <memcmp>
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	89 2b       	or	r24, r25
     bf8:	91 f0       	breq	.+36     	; 0xc1e <pass_add_number+0x6a>
     bfa:	88 ed       	ldi	r24, 0xD8	; 216
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     c06:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <pass_len>
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	ea ea       	ldi	r30, 0xAA	; 170
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <pass_add_number+0x5e>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	35 c0       	rjmp	.+106    	; 0xc88 <pass_add_number+0xd4>
     c1e:	c6 30       	cpi	r28, 0x06	; 6
     c20:	99 f5       	brne	.+102    	; 0xc88 <pass_add_number+0xd4>
     c22:	88 ee       	ldi	r24, 0xE8	; 232
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <dark_menu_state>
     c34:	83 ec       	ldi	r24, 0xC3	; 195
     c36:	95 e0       	ldi	r25, 0x05	; 5
     c38:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <button1+0xc>
     c3c:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <button1+0xb>
     c40:	89 eb       	ldi	r24, 0xB9	; 185
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <button2+0xc>
     c48:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <button2+0xb>
     c4c:	8d ec       	ldi	r24, 0xCD	; 205
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <button3+0xc>
     c54:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <button3+0xb>
     c58:	88 ea       	ldi	r24, 0xA8	; 168
     c5a:	95 e0       	ldi	r25, 0x05	; 5
     c5c:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <button5+0xc>
     c60:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <button5+0xb>
     c64:	81 e9       	ldi	r24, 0x91	; 145
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <button6+0xc>
     c6c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <button6+0xb>
     c70:	86 e5       	ldi	r24, 0x56	; 86
     c72:	95 e0       	ldi	r25, 0x05	; 5
     c74:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <button7+0xc>
     c78:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <button7+0xb>
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <button_7_number>:
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c92:	08 95       	ret

00000c94 <button_6_number>:
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     c9a:	08 95       	ret

00000c9c <button_5_number>:
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     ca2:	08 95       	ret

00000ca4 <button_3_number>:
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     caa:	08 95       	ret

00000cac <button_2_number>:
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cb2:	08 95       	ret

00000cb4 <button_1_number>:
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <pass_add_number>
     cba:	08 95       	ret

00000cbc <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && dark_menu_state == 1)
     cbc:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
     cc0:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
     cc4:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
     cc8:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
     ccc:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <menu_timer.2189>
     cd0:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <menu_timer.2189+0x1>
     cd4:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <menu_timer.2189+0x2>
     cd8:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <menu_timer.2189+0x3>
     cdc:	84 17       	cp	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	a6 07       	cpc	r26, r22
     ce2:	b7 07       	cpc	r27, r23
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <menu_process+0x2c>
     ce6:	6b c0       	rjmp	.+214    	; 0xdbe <menu_process+0x102>
     ce8:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <dark_menu_state>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <menu_process+0x36>
     cf0:	66 c0       	rjmp	.+204    	; 0xdbe <menu_process+0x102>
	{
		menu_timer = mktime.ms + 50;
     cf2:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
     cf6:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
     cfa:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
     cfe:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
     d02:	c2 96       	adiw	r24, 0x32	; 50
     d04:	a1 1d       	adc	r26, r1
     d06:	b1 1d       	adc	r27, r1
     d08:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <menu_timer.2189>
     d0c:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <menu_timer.2189+0x1>
     d10:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <menu_timer.2189+0x2>
     d14:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <menu_timer.2189+0x3>
		if (segment1.state == SEG_MENU)
     d18:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
     d1c:	87 30       	cpi	r24, 0x07	; 7
     d1e:	31 f4       	brne	.+12     	; 0xd2c <menu_process+0x70>
			disp_set_number(&segment1, configured_parameter);
     d20:	60 91 b4 05 	lds	r22, 0x05B4	; 0x8005b4 <configured_parameter>
     d24:	86 ec       	ldi	r24, 0xC6	; 198
     d26:	95 e0       	ldi	r25, 0x05	; 5
     d28:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
		if (segment2.state == SEG_MENU)
     d2c:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
     d30:	87 30       	cpi	r24, 0x07	; 7
     d32:	51 f4       	brne	.+20     	; 0xd48 <menu_process+0x8c>
			disp_set_number(&segment2, menuSaveParameters[configured_parameter]);
     d34:	e0 91 b4 05 	lds	r30, 0x05B4	; 0x8005b4 <configured_parameter>
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	e0 55       	subi	r30, 0x50	; 80
     d3c:	fa 4f       	sbci	r31, 0xFA	; 250
     d3e:	60 81       	ld	r22, Z
     d40:	81 ec       	ldi	r24, 0xC1	; 193
     d42:	95 e0       	ldi	r25, 0x05	; 5
     d44:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     d48:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	49 f5       	brne	.+82     	; 0xda2 <menu_process+0xe6>
     d50:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
     d54:	88 30       	cpi	r24, 0x08	; 8
     d56:	29 f5       	brne	.+74     	; 0xda2 <menu_process+0xe6>
		{
			menu_timer = 1000 + mktime.ms;
     d58:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
     d5c:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
     d60:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
     d64:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
     d68:	88 51       	subi	r24, 0x18	; 24
     d6a:	9c 4f       	sbci	r25, 0xFC	; 252
     d6c:	af 4f       	sbci	r26, 0xFF	; 255
     d6e:	bf 4f       	sbci	r27, 0xFF	; 255
     d70:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <menu_timer.2189>
     d74:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <menu_timer.2189+0x1>
     d78:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <menu_timer.2189+0x2>
     d7c:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <menu_timer.2189+0x3>
			DispD2.value = 's';
     d80:	83 e7       	ldi	r24, 0x73	; 115
     d82:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DispD2>
			DispD1.value = 'a';
     d86:	81 e6       	ldi	r24, 0x61	; 97
     d88:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <DispD1>
			DispD3.value = 'p';
     d8c:	80 e7       	ldi	r24, 0x70	; 112
     d8e:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <DispD3>
			DispD4.value = 0;
     d92:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <DispD4>
			segment1.state = SEG_MENU_OFF;
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     d9c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
			
			return;
     da0:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     da2:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	51 f4       	brne	.+20     	; 0xdbe <menu_process+0x102>
     daa:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
     dae:	8a 30       	cpi	r24, 0x0A	; 10
     db0:	31 f4       	brne	.+12     	; 0xdbe <menu_process+0x102>
		{
			segment1.state = SEG_OFF;
     db2:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <segment1+0x4>
			segment2.state = SEG_OFF;
     db6:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <segment2+0x4>
			dark_menu_state = 0;
     dba:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <dark_menu_state>
     dbe:	08 95       	ret

00000dc0 <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_number;
     dc0:	8a e5       	ldi	r24, 0x5A	; 90
     dc2:	96 e0       	ldi	r25, 0x06	; 6
     dc4:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <button1+0xc>
     dc8:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <button1+0xb>
	button2.fall_callback = button_2_number;
     dcc:	86 e5       	ldi	r24, 0x56	; 86
     dce:	96 e0       	ldi	r25, 0x06	; 6
     dd0:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <button2+0xc>
     dd4:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <button2+0xb>
	button3.fall_callback = button_3_number;
     dd8:	82 e5       	ldi	r24, 0x52	; 82
     dda:	96 e0       	ldi	r25, 0x06	; 6
     ddc:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <button3+0xc>
     de0:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <button3+0xb>
	button5.fall_callback = button_5_number;
     de4:	8e e4       	ldi	r24, 0x4E	; 78
     de6:	96 e0       	ldi	r25, 0x06	; 6
     de8:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <button5+0xc>
     dec:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <button5+0xb>
	button6.fall_callback = button_6_number;
     df0:	8a e4       	ldi	r24, 0x4A	; 74
     df2:	96 e0       	ldi	r25, 0x06	; 6
     df4:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <button6+0xc>
     df8:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <button6+0xb>
	button7.fall_callback = button_7_number;
     dfc:	86 e4       	ldi	r24, 0x46	; 70
     dfe:	96 e0       	ldi	r25, 0x06	; 6
     e00:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <button7+0xc>
     e04:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <button7+0xb>
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
}

static void read_menu_parametrs(void)
{
	mem_read_data(MEM_CALIBRATION, menuSaveParameters);
     e08:	60 eb       	ldi	r22, 0xB0	; 176
     e0a:	75 e0       	ldi	r23, 0x05	; 5
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	0e 94 6f 11 	call	0x22de	; 0x22de <mem_read_data>
	debug_msg("menu_read %d %d %d %d\n\r", menuSaveParameters[0], menuSaveParameters[1], menuSaveParameters[2], menuSaveParameters[3]);
     e12:	e0 eb       	ldi	r30, 0xB0	; 176
     e14:	f5 e0       	ldi	r31, 0x05	; 5
     e16:	83 81       	ldd	r24, Z+3	; 0x03
     e18:	1f 92       	push	r1
     e1a:	8f 93       	push	r24
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	1f 92       	push	r1
     e20:	8f 93       	push	r24
     e22:	81 81       	ldd	r24, Z+1	; 0x01
     e24:	1f 92       	push	r1
     e26:	8f 93       	push	r24
     e28:	80 81       	ld	r24, Z
     e2a:	1f 92       	push	r1
     e2c:	8f 93       	push	r24
     e2e:	87 ef       	ldi	r24, 0xF7	; 247
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9f 93       	push	r25
     e34:	8f 93       	push	r24
     e36:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     e3a:	a0 eb       	ldi	r26, 0xB0	; 176
     e3c:	b5 e0       	ldi	r27, 0x05	; 5
     e3e:	e4 e7       	ldi	r30, 0x74	; 116
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	4c e7       	ldi	r20, 0x7C	; 124
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	8d b7       	in	r24, 0x3d	; 61
     e48:	9e b7       	in	r25, 0x3e	; 62
     e4a:	0a 96       	adiw	r24, 0x0a	; 10
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	9e bf       	out	0x3e, r25	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	8d bf       	out	0x3d, r24	; 61
}

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
     e56:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
	{
		if (menuSaveParameters[i] > menuParameters[i].max_value)
     e58:	9c 91       	ld	r25, X
     e5a:	80 81       	ld	r24, Z
     e5c:	89 17       	cp	r24, r25
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <init_menu+0xa6>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
     e60:	81 81       	ldd	r24, Z+1	; 0x01
     e62:	8c 93       	st	X, r24
			check_error++;
     e64:	2f 5f       	subi	r18, 0xFF	; 255
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	32 96       	adiw	r30, 0x02	; 2

//powinno byc uruchomiane po wczytaniu z EEPROAM
static void check_menu_parameters(void)
{
	uint8_t check_error = 0;
	for(uint8_t i = 0; i < sizeof(menuSaveParameters); i++)
     e6a:	e4 17       	cp	r30, r20
     e6c:	f5 07       	cpc	r31, r21
     e6e:	a1 f7       	brne	.-24     	; 0xe58 <init_menu+0x98>
		{
			menuSaveParameters[i] = menuParameters[i].default_value;
			check_error++;
		}
	}
	if (check_error > 0)
     e70:	22 23       	and	r18, r18
     e72:	29 f0       	breq	.+10     	; 0xe7e <init_menu+0xbe>

static void enter_to_menu(void);

static void save_parametrs(void)
{
	mem_save_data(MEM_CALIBRATION, menuSaveParameters);
     e74:	60 eb       	ldi	r22, 0xB0	; 176
     e76:	75 e0       	ldi	r23, 0x05	; 5
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	0e 94 2b 11 	call	0x2256	; 0x2256 <mem_save_data>
	}
}

static void clear_password(void)
{
	pass_len = 0;
     e7e:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <pass_len>
	memset(pass, 0, sizeof(pass));
     e82:	86 e0       	ldi	r24, 0x06	; 6
     e84:	ea ea       	ldi	r30, 0xAA	; 170
     e86:	f5 e0       	ldi	r31, 0x05	; 5
     e88:	df 01       	movw	r26, r30
     e8a:	1d 92       	st	X+, r1
     e8c:	8a 95       	dec	r24
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <init_menu+0xca>
     e90:	08 95       	ret

00000e92 <dark_menu_get_value>:
	clear_password();
}

uint8_t dark_menu_get_value(menuParam_t param)
{
	if (param < MENU_ERROR_LAST_PARAM) {
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	30 f4       	brcc	.+12     	; 0xea2 <dark_menu_get_value+0x10>
		return menuSaveParameters[param];
     e96:	e8 2f       	mov	r30, r24
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	e0 55       	subi	r30, 0x50	; 80
     e9c:	fa 4f       	sbci	r31, 0xFA	; 250
     e9e:	80 81       	ld	r24, Z
     ea0:	08 95       	ret
	}
	return 0;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
}
     ea4:	08 95       	ret

00000ea6 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     ea6:	85 e1       	ldi	r24, 0x15	; 21
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	9f 93       	push	r25
     eac:	8f 93       	push	r24
     eae:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     eb2:	8b eb       	ldi	r24, 0xBB	; 187
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	0e 94 7e 17 	call	0x2efc	; 0x2efc <evTime_init>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <motorD>
     ec0:	94 98       	cbi	0x12, 4	; 18
     ec2:	15 bc       	out	0x25, r1	; 37
     ec4:	8f 9a       	sbi	0x11, 7	; 17
     ec6:	97 9a       	sbi	0x12, 7	; 18
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	08 95       	ret

00000ece <dcmotorpwm_deinit>:
     ece:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <motorD>
     ed2:	15 bc       	out	0x25, r1	; 37
     ed4:	97 9a       	sbi	0x12, 7	; 18
     ed6:	94 98       	cbi	0x12, 4	; 18
     ed8:	08 95       	ret

00000eda <dcmotor_is_on>:
     eda:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <motorD>
     ede:	92 50       	subi	r25, 0x02	; 2
     ee0:	21 e0       	ldi	r18, 0x01	; 1
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	93 30       	cpi	r25, 0x03	; 3
     ee6:	10 f0       	brcs	.+4      	; 0xeec <dcmotor_is_on+0x12>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	c9 01       	movw	r24, r18
     eee:	08 95       	ret

00000ef0 <dcmotorpwm_stop>:
     ef0:	0e 94 6d 07 	call	0xeda	; 0xeda <dcmotor_is_on>
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	99 f0       	breq	.+38     	; 0xf1e <dcmotorpwm_stop+0x2e>
     ef8:	83 e2       	ldi	r24, 0x23	; 35
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
     f04:	15 bc       	out	0x25, r1	; 37
     f06:	97 9a       	sbi	0x12, 7	; 18
     f08:	94 98       	cbi	0x12, 4	; 18
     f0a:	e7 eb       	ldi	r30, 0xB7	; 183
     f0c:	f5 e0       	ldi	r31, 0x05	; 5
     f0e:	80 81       	ld	r24, Z
     f10:	81 83       	std	Z+1, r24	; 0x01
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 83       	st	Z, r24
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	08 95       	ret

00000f20 <dcmotorpwm_start>:
     f20:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <motorD>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	d9 f4       	brne	.+54     	; 0xf5e <dcmotorpwm_start+0x3e>
     f28:	94 9a       	sbi	0x12, 4	; 18
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	80 63       	ori	r24, 0x30	; 48
     f2e:	85 bd       	out	0x25, r24	; 37
     f30:	85 b5       	in	r24, 0x25	; 37
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	85 bd       	out	0x25, r24	; 37
     f36:	85 b5       	in	r24, 0x25	; 37
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	85 bd       	out	0x25, r24	; 37
     f3c:	e7 eb       	ldi	r30, 0xB7	; 183
     f3e:	f5 e0       	ldi	r31, 0x05	; 5
     f40:	80 81       	ld	r24, Z
     f42:	81 83       	std	Z+1, r24	; 0x01
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	80 83       	st	Z, r24
     f48:	48 ee       	ldi	r20, 0xE8	; 232
     f4a:	53 e0       	ldi	r21, 0x03	; 3
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	8b eb       	ldi	r24, 0xBB	; 187
     f52:	95 e0       	ldi	r25, 0x05	; 5
     f54:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	08 95       	ret
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	08 95       	ret

00000f64 <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     f64:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <motorD+0x3>
}
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	08 95       	ret

00000f6c <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     f6c:	81 e3       	ldi	r24, 0x31	; 49
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
	dcmotorpwm_stop();
     f78:	0e 94 78 07 	call	0xef0	; 0xef0 <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     f7c:	85 e0       	ldi	r24, 0x05	; 5
     f7e:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <motorD>
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	08 95       	ret

00000f88 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     f88:	0e 94 6d 07 	call	0xeda	; 0xeda <dcmotor_is_on>
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	29 f0       	breq	.+10     	; 0xf9a <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <motorD>
		return 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     f9a:	08 95       	ret

00000f9c <dcmotor_set_normal_state>:

int dcmotor_set_normal_state(void)
{
	if (dcmotor_is_on())
     f9c:	0e 94 6d 07 	call	0xeda	; 0xeda <dcmotor_is_on>
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	29 f0       	breq	.+10     	; 0xfae <dcmotor_set_normal_state+0x12>
	{
		motorD.state = MOTOR_ON;
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <motorD>
		return 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     fae:	08 95       	ret

00000fb0 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     fb0:	cf 93       	push	r28
     fb2:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     fb4:	46 e9       	ldi	r20, 0x96	; 150
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e7       	ldi	r24, 0x70	; 112
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <evTime_process_period>
     fc4:	89 2b       	or	r24, r25
     fc6:	09 f4       	brne	.+2      	; 0xfca <dcmotor_process+0x1a>
     fc8:	58 c0       	rjmp	.+176    	; 0x107a <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     fca:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <motorD>
     fce:	93 30       	cpi	r25, 0x03	; 3
     fd0:	e9 f0       	breq	.+58     	; 0x100c <dcmotor_process+0x5c>
     fd2:	28 f4       	brcc	.+10     	; 0xfde <dcmotor_process+0x2e>
     fd4:	91 30       	cpi	r25, 0x01	; 1
     fd6:	b9 f0       	breq	.+46     	; 0x1006 <dcmotor_process+0x56>
     fd8:	92 30       	cpi	r25, 0x02	; 2
     fda:	41 f0       	breq	.+16     	; 0xfec <dcmotor_process+0x3c>
     fdc:	4e c0       	rjmp	.+156    	; 0x107a <dcmotor_process+0xca>
     fde:	94 30       	cpi	r25, 0x04	; 4
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <dcmotor_process+0x34>
     fe2:	48 c0       	rjmp	.+144    	; 0x1074 <dcmotor_process+0xc4>
     fe4:	95 30       	cpi	r25, 0x05	; 5
     fe6:	09 f4       	brne	.+2      	; 0xfea <dcmotor_process+0x3a>
     fe8:	42 c0       	rjmp	.+132    	; 0x106e <dcmotor_process+0xbe>
     fea:	47 c0       	rjmp	.+142    	; 0x107a <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     fec:	c0 93 ba 05 	sts	0x05BA, r28	; 0x8005ba <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     ff0:	2b ee       	ldi	r18, 0xEB	; 235
     ff2:	c2 9f       	mul	r28, r18
     ff4:	c0 01       	movw	r24, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	63 e6       	ldi	r22, 0x63	; 99
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <__divmodhi4>
    1000:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
    1002:	63 bd       	out	0x23, r22	; 35
			break;
    1004:	3a c0       	rjmp	.+116    	; 0x107a <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
    1006:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <motorD+0x3>
			break;
    100a:	37 c0       	rjmp	.+110    	; 0x107a <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
    100c:	c3 33       	cpi	r28, 0x33	; 51
    100e:	78 f4       	brcc	.+30     	; 0x102e <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	8c 0f       	add	r24, r28
    1014:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1018:	2b ee       	ldi	r18, 0xEB	; 235
    101a:	82 9f       	mul	r24, r18
    101c:	c0 01       	movw	r24, r0
    101e:	11 24       	eor	r1, r1
    1020:	63 e6       	ldi	r22, 0x63	; 99
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <__divmodhi4>
    1028:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
    102a:	63 bd       	out	0x23, r22	; 35
    102c:	26 c0       	rjmp	.+76     	; 0x107a <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
    102e:	8d ec       	ldi	r24, 0xCD	; 205
    1030:	8c 0f       	add	r24, r28
    1032:	84 31       	cpi	r24, 0x14	; 20
    1034:	78 f4       	brcc	.+30     	; 0x1054 <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	8c 0f       	add	r24, r28
    103a:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    103e:	2b ee       	ldi	r18, 0xEB	; 235
    1040:	82 9f       	mul	r24, r18
    1042:	c0 01       	movw	r24, r0
    1044:	11 24       	eor	r1, r1
    1046:	63 e6       	ldi	r22, 0x63	; 99
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <__divmodhi4>
    104e:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
    1050:	63 bd       	out	0x23, r22	; 35
    1052:	13 c0       	rjmp	.+38     	; 0x107a <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
    1054:	c0 93 ba 05 	sts	0x05BA, r28	; 0x8005ba <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
    1058:	2b ee       	ldi	r18, 0xEB	; 235
    105a:	c2 9f       	mul	r28, r18
    105c:	c0 01       	movw	r24, r0
    105e:	11 24       	eor	r1, r1
    1060:	63 e6       	ldi	r22, 0x63	; 99
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <__divmodhi4>
    1068:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
    106a:	63 bd       	out	0x23, r22	; 35
    106c:	06 c0       	rjmp	.+12     	; 0x107a <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
    106e:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
    1070:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
    1072:	03 c0       	rjmp	.+6      	; 0x107a <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
    107e:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
    1080:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
    1082:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
    1084:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
    1086:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
    1088:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
    108a:	af 9a       	sbi	0x15, 7	; 21
    108c:	08 95       	ret

0000108e <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
    108e:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
    1090:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
    1094:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
    1096:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
    109a:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
    109c:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
    10a0:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
    10a2:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <DispD4+0x1>
    10a6:	08 95       	ret

000010a8 <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
    10a8:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
    10aa:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
    10ac:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
    10ae:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
    10b0:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
    10b2:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
    10b4:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
    10b6:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
    10b8:	ef ec       	ldi	r30, 0xCF	; 207
    10ba:	f5 e0       	ldi	r31, 0x05	; 5
    10bc:	8d ec       	ldi	r24, 0xCD	; 205
    10be:	95 e0       	ldi	r25, 0x05	; 5
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
    10c4:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
    10c6:	29 ed       	ldi	r18, 0xD9	; 217
    10c8:	35 e0       	ldi	r19, 0x05	; 5
    10ca:	33 83       	std	Z+3, r19	; 0x03
    10cc:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
    10ce:	a6 ec       	ldi	r26, 0xC6	; 198
    10d0:	b5 e0       	ldi	r27, 0x05	; 5
    10d2:	11 96       	adiw	r26, 0x01	; 1
    10d4:	3c 93       	st	X, r19
    10d6:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
    10d8:	13 96       	adiw	r26, 0x03	; 3
    10da:	9c 93       	st	X, r25
    10dc:	8e 93       	st	-X, r24
    10de:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
    10e0:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
    10e2:	2b ec       	ldi	r18, 0xCB	; 203
    10e4:	35 e0       	ldi	r19, 0x05	; 5
    10e6:	35 83       	std	Z+5, r19	; 0x05
    10e8:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
    10ea:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
    10ec:	87 ed       	ldi	r24, 0xD7	; 215
    10ee:	95 e0       	ldi	r25, 0x05	; 5
    10f0:	97 83       	std	Z+7, r25	; 0x07
    10f2:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
    10f4:	e1 ec       	ldi	r30, 0xC1	; 193
    10f6:	f5 e0       	ldi	r31, 0x05	; 5
    10f8:	31 83       	std	Z+1, r19	; 0x01
    10fa:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
    10fc:	93 83       	std	Z+3, r25	; 0x03
    10fe:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
    1100:	0e 94 47 08 	call	0x108e	; 0x108e <off_all_displays>
	clear_display();
    1104:	0e 94 3f 08 	call	0x107e	; 0x107e <clear_display>
    1108:	08 95       	ret

0000110a <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
	if (DispD->value != displaying_value)
    110e:	fc 01       	movw	r30, r24
    1110:	30 81       	ld	r19, Z
    1112:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <displaying_value>
    1116:	32 17       	cp	r19, r18
    1118:	09 f4       	brne	.+2      	; 0x111c <display_set_value+0x12>
    111a:	95 c0       	rjmp	.+298    	; 0x1246 <display_set_value+0x13c>
    111c:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    111e:	0e 94 3f 08 	call	0x107e	; 0x107e <clear_display>
		switch(DispD->value)
    1122:	e8 81       	ld	r30, Y
    1124:	8e 2f       	mov	r24, r30
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	8f 3f       	cpi	r24, 0xFF	; 255
    112a:	91 05       	cpc	r25, r1
    112c:	08 f0       	brcs	.+2      	; 0x1130 <display_set_value+0x26>
    112e:	88 c0       	rjmp	.+272    	; 0x1240 <display_set_value+0x136>
    1130:	fc 01       	movw	r30, r24
    1132:	e6 5d       	subi	r30, 0xD6	; 214
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    113a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    113c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    113e:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1140:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1142:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1144:	aa 98       	cbi	0x15, 2	; 21
			break;
    1146:	7c c0       	rjmp	.+248    	; 0x1240 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    1148:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    114a:	dd 98       	cbi	0x1b, 5	; 27
			break;
    114c:	79 c0       	rjmp	.+242    	; 0x1240 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    114e:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1150:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1152:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    1154:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    1156:	df 98       	cbi	0x1b, 7	; 27
			break;
    1158:	73 c0       	rjmp	.+230    	; 0x1240 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    115a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    115c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    115e:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1160:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1162:	df 98       	cbi	0x1b, 7	; 27
			break;
    1164:	6d c0       	rjmp	.+218    	; 0x1240 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    1166:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1168:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    116a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    116c:	dd 98       	cbi	0x1b, 5	; 27
			break;
    116e:	68 c0       	rjmp	.+208    	; 0x1240 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1170:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1172:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1174:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1176:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1178:	df 98       	cbi	0x1b, 7	; 27
			break;
    117a:	62 c0       	rjmp	.+196    	; 0x1240 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    117c:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    117e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1180:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1182:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1184:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1186:	de 98       	cbi	0x1b, 6	; 27
			break;
    1188:	5b c0       	rjmp	.+182    	; 0x1240 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    118a:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    118c:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    118e:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1190:	57 c0       	rjmp	.+174    	; 0x1240 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1192:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1194:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1196:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1198:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    119a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    119c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    119e:	af 98       	cbi	0x15, 7	; 21
			break;
    11a0:	4f c0       	rjmp	.+158    	; 0x1240 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    11a2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11a4:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11a6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11a8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    11aa:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ac:	af 98       	cbi	0x15, 7	; 21
			break;
    11ae:	48 c0       	rjmp	.+144    	; 0x1240 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    11b0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    11b2:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11b4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    11b6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11b8:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11ba:	af 98       	cbi	0x15, 7	; 21
			break;
    11bc:	41 c0       	rjmp	.+130    	; 0x1240 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    11be:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11c0:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11c2:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11c4:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11c6:	af 98       	cbi	0x15, 7	; 21
			break;
    11c8:	3b c0       	rjmp	.+118    	; 0x1240 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    11ca:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11cc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11ce:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11d0:	aa 98       	cbi	0x15, 2	; 21
			break;
    11d2:	36 c0       	rjmp	.+108    	; 0x1240 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    11d4:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    11d6:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11d8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11da:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11dc:	af 98       	cbi	0x15, 7	; 21
			break;
    11de:	30 c0       	rjmp	.+96     	; 0x1240 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    11e0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    11e2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    11e4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11e6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11e8:	af 98       	cbi	0x15, 7	; 21
			break;
    11ea:	2a c0       	rjmp	.+84     	; 0x1240 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    11ec:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    11ee:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    11f0:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    11f2:	af 98       	cbi	0x15, 7	; 21
			break;
    11f4:	25 c0       	rjmp	.+74     	; 0x1240 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    11f6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    11f8:	af 98       	cbi	0x15, 7	; 21
			break;
    11fa:	22 c0       	rjmp	.+68     	; 0x1240 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    11fc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    11fe:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1200:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    1202:	af 98       	cbi	0x15, 7	; 21
			break;
    1204:	1d c0       	rjmp	.+58     	; 0x1240 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    1206:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1208:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    120a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    120c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    120e:	af 98       	cbi	0x15, 7	; 21
			break;
    1210:	17 c0       	rjmp	.+46     	; 0x1240 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    1212:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    1214:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1216:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1218:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    121a:	af 98       	cbi	0x15, 7	; 21
			break;
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    121e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1220:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1222:	aa 98       	cbi	0x15, 2	; 21
			break;
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    1226:	af 98       	cbi	0x15, 7	; 21
			break;
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    122a:	aa 98       	cbi	0x15, 2	; 21
			break;
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    122e:	de 98       	cbi	0x1b, 6	; 27
			break;
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1232:	df 98       	cbi	0x1b, 7	; 27
			break;
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    1236:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    123a:	ad 98       	cbi	0x15, 5	; 21
			break;
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    123e:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1240:	88 81       	ld	r24, Y
    1242:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <displaying_value>
	}
	
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <on_display>:
void on_display(disp_drv *DispD)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	ec 01       	movw	r28, r24
	off_all_displays();
    1252:	0e 94 47 08 	call	0x108e	; 0x108e <off_all_displays>
	display_set_value(DispD);
    1256:	ce 01       	movw	r24, r28
    1258:	0e 94 85 08 	call	0x110a	; 0x110a <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	cd 3c       	cpi	r28, 0xCD	; 205
    1260:	d8 07       	cpc	r29, r24
    1262:	29 f4       	brne	.+10     	; 0x126e <on_display+0x22>
	{
		LED_ON_DISP1;
    1264:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <DispD1+0x1>
    126c:	19 c0       	rjmp	.+50     	; 0x12a0 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    126e:	85 e0       	ldi	r24, 0x05	; 5
    1270:	c9 3d       	cpi	r28, 0xD9	; 217
    1272:	d8 07       	cpc	r29, r24
    1274:	29 f4       	brne	.+10     	; 0x1280 <on_display+0x34>
	{
		LED_ON_DISP2;
    1276:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <DispD2+0x1>
    127e:	10 c0       	rjmp	.+32     	; 0x12a0 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1280:	85 e0       	ldi	r24, 0x05	; 5
    1282:	cb 3c       	cpi	r28, 0xCB	; 203
    1284:	d8 07       	cpc	r29, r24
    1286:	29 f4       	brne	.+10     	; 0x1292 <on_display+0x46>
	{
		LED_ON_DISP3;
    1288:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <DispD3+0x1>
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1292:	c7 5d       	subi	r28, 0xD7	; 215
    1294:	d5 40       	sbci	r29, 0x05	; 5
    1296:	21 f4       	brne	.+8      	; 0x12a0 <on_display+0x54>
	{
		LED_ON_DISP4;
    1298:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <DispD4+0x1>
	}
	#endif
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    12b2:	c0 81       	ld	r28, Z
    12b4:	d1 81       	ldd	r29, Z+1	; 0x01
    12b6:	21 96       	adiw	r28, 0x01	; 1
    12b8:	d1 83       	std	Z+1, r29	; 0x01
    12ba:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    12bc:	9e 01       	movw	r18, r28
    12be:	ad ec       	ldi	r26, 0xCD	; 205
    12c0:	bc ec       	ldi	r27, 0xCC	; 204
    12c2:	0e 94 12 20 	call	0x4024	; 0x4024 <__umulhisi3>
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	9c 01       	movw	r18, r24
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	c8 17       	cp	r28, r24
    12ea:	d9 07       	cpc	r29, r25
    12ec:	01 f5       	brne	.+64     	; 0x132e <display_process+0x88>
    12ee:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    12f0:	10 91 75 03 	lds	r17, 0x0375	; 0x800375 <iteration>
    12f4:	14 30       	cpi	r17, 0x04	; 4
    12f6:	58 f4       	brcc	.+22     	; 0x130e <display_process+0x68>
			on_display(disp_tab[iteration]);
    12f8:	e1 2f       	mov	r30, r17
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	e1 53       	subi	r30, 0x31	; 49
    1302:	fa 4f       	sbci	r31, 0xFA	; 250
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	0e 94 26 09 	call	0x124c	; 0x124c <on_display>
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <display_process+0x6c>
		else
			off_all_displays();
    130e:	0e 94 47 08 	call	0x108e	; 0x108e <off_all_displays>
		iteration++;
    1312:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1314:	15 30       	cpi	r17, 0x05	; 5
    1316:	19 f0       	breq	.+6      	; 0x131e <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    1318:	10 93 75 03 	sts	0x0375, r17	; 0x800375 <iteration>
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    131e:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1322:	c0 39       	cpi	r28, 0x90	; 144
    1324:	d1 40       	sbci	r29, 0x01	; 1
    1326:	19 f4       	brne	.+6      	; 0x132e <display_process+0x88>
    1328:	f7 01       	movw	r30, r14
    132a:	11 82       	std	Z+1, r1	; 0x01
    132c:	10 82       	st	Z, r1
	}
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	08 95       	ret

0000133a <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    133a:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    133c:	64 36       	cpi	r22, 0x64	; 100
    133e:	f8 f4       	brcc	.+62     	; 0x137e <disp_set_number+0x44>
	else if (number == 0)
    1340:	61 11       	cpse	r22, r1
    1342:	08 c0       	rjmp	.+16     	; 0x1354 <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    1344:	a0 81       	ld	r26, Z
    1346:	b1 81       	ldd	r27, Z+1	; 0x01
    1348:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    134a:	02 80       	ldd	r0, Z+2	; 0x02
    134c:	f3 81       	ldd	r31, Z+3	; 0x03
    134e:	e0 2d       	mov	r30, r0
    1350:	10 82       	st	Z, r1
    1352:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    1354:	a0 81       	ld	r26, Z
    1356:	b1 81       	ldd	r27, Z+1	; 0x01
    1358:	9d ec       	ldi	r25, 0xCD	; 205
    135a:	69 9f       	mul	r22, r25
    135c:	91 2d       	mov	r25, r1
    135e:	11 24       	eor	r1, r1
    1360:	96 95       	lsr	r25
    1362:	96 95       	lsr	r25
    1364:	96 95       	lsr	r25
    1366:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    1368:	02 80       	ldd	r0, Z+2	; 0x02
    136a:	f3 81       	ldd	r31, Z+3	; 0x03
    136c:	e0 2d       	mov	r30, r0
    136e:	89 2f       	mov	r24, r25
    1370:	88 0f       	add	r24, r24
    1372:	98 2f       	mov	r25, r24
    1374:	99 0f       	add	r25, r25
    1376:	99 0f       	add	r25, r25
    1378:	89 0f       	add	r24, r25
    137a:	68 1b       	sub	r22, r24
    137c:	60 83       	st	Z, r22
    137e:	08 95       	ret

00001380 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1380:	fc 01       	movw	r30, r24
    1382:	60 83       	st	Z, r22
    1384:	08 95       	ret

00001386 <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	39 f0       	breq	.+14     	; 0x1398 <dip_set_value+0x12>
    138a:	18 f0       	brcs	.+6      	; 0x1392 <dip_set_value+0xc>
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	39 f0       	breq	.+14     	; 0x139e <dip_set_value+0x18>
    1390:	08 95       	ret
    1392:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <motor_disp_value>
    1396:	08 95       	ret
    1398:	60 93 90 03 	sts	0x0390, r22	; 0x800390 <servo_disp_value>
    139c:	08 95       	ret
    139e:	60 93 90 03 	sts	0x0390, r22	; 0x800390 <servo_disp_value>
    13a2:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <motor_disp_value>
    13a6:	08 95       	ret

000013a8 <disp_get_state>:
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <disp_get_state+0xa>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	29 f0       	breq	.+10     	; 0x13ba <disp_get_state+0x12>
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <disp_get_state+0x1a>
    13b2:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	08 95       	ret
    13ba:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	08 95       	ret
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	08 95       	ret

000013c8 <disp_disable_voltage>:
    13c8:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    13cc:	86 30       	cpi	r24, 0x06	; 6
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <disp_disable_voltage+0x10>
    13d0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <disp1_last_state>
    13d4:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
    13d8:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    13dc:	86 30       	cpi	r24, 0x06	; 6
    13de:	21 f4       	brne	.+8      	; 0x13e8 <disp_disable_voltage+0x20>
    13e0:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <disp2_last_state>
    13e4:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
    13e8:	08 95       	ret

000013ea <disp_set_state>:
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	a1 f0       	breq	.+40     	; 0x1416 <disp_set_state+0x2c>
    13ee:	18 f0       	brcs	.+6      	; 0x13f6 <disp_set_state+0xc>
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	09 f1       	breq	.+66     	; 0x1436 <disp_set_state+0x4c>
    13f4:	08 95       	ret
    13f6:	66 30       	cpi	r22, 0x06	; 6
    13f8:	21 f4       	brne	.+8      	; 0x1402 <disp_set_state+0x18>
    13fa:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    13fe:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <disp1_last_state>
    1402:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    1406:	86 30       	cpi	r24, 0x06	; 6
    1408:	19 f4       	brne	.+6      	; 0x1410 <disp_set_state+0x26>
    140a:	60 93 db 05 	sts	0x05DB, r22	; 0x8005db <disp1_last_state>
    140e:	08 95       	ret
    1410:	60 93 ca 05 	sts	0x05CA, r22	; 0x8005ca <segment1+0x4>
    1414:	08 95       	ret
    1416:	66 30       	cpi	r22, 0x06	; 6
    1418:	21 f4       	brne	.+8      	; 0x1422 <disp_set_state+0x38>
    141a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    141e:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <disp2_last_state>
    1422:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    1426:	86 30       	cpi	r24, 0x06	; 6
    1428:	19 f4       	brne	.+6      	; 0x1430 <disp_set_state+0x46>
    142a:	60 93 dc 05 	sts	0x05DC, r22	; 0x8005dc <disp2_last_state>
    142e:	08 95       	ret
    1430:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <segment2+0x4>
    1434:	08 95       	ret
    1436:	66 30       	cpi	r22, 0x06	; 6
    1438:	41 f4       	brne	.+16     	; 0x144a <disp_set_state+0x60>
    143a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    143e:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <disp1_last_state>
    1442:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    1446:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <disp2_last_state>
    144a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    144e:	86 30       	cpi	r24, 0x06	; 6
    1450:	29 f4       	brne	.+10     	; 0x145c <disp_set_state+0x72>
    1452:	60 93 dc 05 	sts	0x05DC, r22	; 0x8005dc <disp2_last_state>
    1456:	60 93 db 05 	sts	0x05DB, r22	; 0x8005db <disp1_last_state>
    145a:	08 95       	ret
    145c:	60 93 ca 05 	sts	0x05CA, r22	; 0x8005ca <segment1+0x4>
    1460:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <segment2+0x4>
    1464:	08 95       	ret

00001466 <display_set_error>:
    1466:	95 e0       	ldi	r25, 0x05	; 5
    1468:	90 93 ca 05 	sts	0x05CA, r25	; 0x8005ca <segment1+0x4>
    146c:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <segment2+0x4>
    1470:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <error_reason>
    1474:	08 95       	ret

00001476 <disp_off_segments>:

void disp_off_segments(void)
{
	disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    1476:	68 ef       	ldi	r22, 0xF8	; 248
    1478:	8d ec       	ldi	r24, 0xCD	; 205
    147a:	95 e0       	ldi	r25, 0x05	; 5
    147c:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
	disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    1480:	68 ef       	ldi	r22, 0xF8	; 248
    1482:	89 ed       	ldi	r24, 0xD9	; 217
    1484:	95 e0       	ldi	r25, 0x05	; 5
    1486:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
	disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    148a:	68 ef       	ldi	r22, 0xF8	; 248
    148c:	8b ec       	ldi	r24, 0xCB	; 203
    148e:	95 e0       	ldi	r25, 0x05	; 5
    1490:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
	disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1494:	68 ef       	ldi	r22, 0xF8	; 248
    1496:	87 ed       	ldi	r24, 0xD7	; 215
    1498:	95 e0       	ldi	r25, 0x05	; 5
    149a:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
    149e:	08 95       	ret

000014a0 <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    14a0:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
    14a4:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
    14a8:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
    14ac:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
    14b0:	40 91 7a 03 	lds	r20, 0x037A	; 0x80037a <timer_disp_process.1979>
    14b4:	50 91 7b 03 	lds	r21, 0x037B	; 0x80037b <timer_disp_process.1979+0x1>
    14b8:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <timer_disp_process.1979+0x2>
    14bc:	70 91 7d 03 	lds	r23, 0x037D	; 0x80037d <timer_disp_process.1979+0x3>
    14c0:	48 17       	cp	r20, r24
    14c2:	59 07       	cpc	r21, r25
    14c4:	6a 07       	cpc	r22, r26
    14c6:	7b 07       	cpc	r23, r27
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <disp_process+0x2c>
    14ca:	26 c1       	rjmp	.+588    	; 0x1718 <disp_process+0x278>
	{
        
        switch(segment1.state)
    14cc:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <disp_process+0x36>
    14d4:	59 c0       	rjmp	.+178    	; 0x1588 <disp_process+0xe8>
    14d6:	30 f4       	brcc	.+12     	; 0x14e4 <disp_process+0x44>
    14d8:	88 23       	and	r24, r24
    14da:	09 f4       	brne	.+2      	; 0x14de <disp_process+0x3e>
    14dc:	87 c0       	rjmp	.+270    	; 0x15ec <disp_process+0x14c>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	39 f1       	breq	.+78     	; 0x1530 <disp_process+0x90>
    14e2:	8e c0       	rjmp	.+284    	; 0x1600 <disp_process+0x160>
    14e4:	85 30       	cpi	r24, 0x05	; 5
    14e6:	09 f4       	brne	.+2      	; 0x14ea <disp_process+0x4a>
    14e8:	74 c0       	rjmp	.+232    	; 0x15d2 <disp_process+0x132>
    14ea:	48 f1       	brcs	.+82     	; 0x153e <disp_process+0x9e>
    14ec:	86 30       	cpi	r24, 0x06	; 6
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <disp_process+0x52>
    14f0:	87 c0       	rjmp	.+270    	; 0x1600 <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    14f2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	48 ec       	ldi	r20, 0xC8	; 200
    14fc:	52 e4       	ldi	r21, 0x42	; 66
    14fe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    1502:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__fixsfsi>
    1506:	70 93 8a 03 	sts	0x038A, r23	; 0x80038a <voltage+0x1>
    150a:	60 93 89 03 	sts	0x0389, r22	; 0x800389 <voltage>
            disp_set_number(&segment1, voltage/100);
    150e:	9b 01       	movw	r18, r22
    1510:	36 95       	lsr	r19
    1512:	27 95       	ror	r18
    1514:	36 95       	lsr	r19
    1516:	27 95       	ror	r18
    1518:	ab e7       	ldi	r26, 0x7B	; 123
    151a:	b4 e1       	ldi	r27, 0x14	; 20
    151c:	0e 94 12 20 	call	0x4024	; 0x4024 <__umulhisi3>
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	68 2f       	mov	r22, r24
    1526:	86 ec       	ldi	r24, 0xC6	; 198
    1528:	95 e0       	ldi	r25, 0x05	; 5
    152a:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
            break;
    152e:	68 c0       	rjmp	.+208    	; 0x1600 <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    1530:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <motor_disp_value>
    1534:	86 ec       	ldi	r24, 0xC6	; 198
    1536:	95 e0       	ldi	r25, 0x05	; 5
    1538:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
            break;
    153c:	61 c0       	rjmp	.+194    	; 0x1600 <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    153e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	31 f0       	breq	.+12     	; 0x1552 <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
			    segment2.state = SEG_VALUE;
    154c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
                break;
    1550:	57 c0       	rjmp	.+174    	; 0x1600 <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    1552:	48 51       	subi	r20, 0x18	; 24
    1554:	5c 4f       	sbci	r21, 0xFC	; 252
    1556:	6f 4f       	sbci	r22, 0xFF	; 255
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	40 93 7a 03 	sts	0x037A, r20	; 0x80037a <timer_disp_process.1979>
    155e:	50 93 7b 03 	sts	0x037B, r21	; 0x80037b <timer_disp_process.1979+0x1>
    1562:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <timer_disp_process.1979+0x2>
    1566:	70 93 7d 03 	sts	0x037D, r23	; 0x80037d <timer_disp_process.1979+0x3>
			DispD2.value = 's';
    156a:	83 e7       	ldi	r24, 0x73	; 115
    156c:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DispD2>
			DispD1.value = 'a';
    1570:	81 e6       	ldi	r24, 0x61	; 97
    1572:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <DispD1>
			DispD3.value = 'p';
    1576:	80 e7       	ldi	r24, 0x70	; 112
    1578:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <DispD3>
			segment1.state = SEG_VALUE;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
			segment2.state = SEG_VALUE;
    1582:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
			return;
    1586:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    1588:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	31 f0       	breq	.+12     	; 0x159c <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    1596:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
                break;
    159a:	32 c0       	rjmp	.+100    	; 0x1600 <disp_process+0x160>
            }
			timer_disp_process += 1000;
    159c:	48 51       	subi	r20, 0x18	; 24
    159e:	5c 4f       	sbci	r21, 0xFC	; 252
    15a0:	6f 4f       	sbci	r22, 0xFF	; 255
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	40 93 7a 03 	sts	0x037A, r20	; 0x80037a <timer_disp_process.1979>
    15a8:	50 93 7b 03 	sts	0x037B, r21	; 0x80037b <timer_disp_process.1979+0x1>
    15ac:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <timer_disp_process.1979+0x2>
    15b0:	70 93 7d 03 	sts	0x037D, r23	; 0x80037d <timer_disp_process.1979+0x3>
			DispD2.value = 'l';
    15b4:	8c e6       	ldi	r24, 0x6C	; 108
    15b6:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DispD2>
			DispD1.value = 'o';
    15ba:	8f e6       	ldi	r24, 0x6F	; 111
    15bc:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <DispD1>
			DispD3.value = 'p';
    15c0:	80 e7       	ldi	r24, 0x70	; 112
    15c2:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <DispD3>
			segment1.state = SEG_VALUE;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <segment1+0x4>
			segment2.state = SEG_VALUE;
    15cc:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <segment2+0x4>
            break;
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    15d2:	85 e6       	ldi	r24, 0x65	; 101
    15d4:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <DispD2>
			DispD1.value = 'r';
    15d8:	82 e7       	ldi	r24, 0x72	; 114
    15da:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <DispD1>
			disp_set_number(&segment2, error_reason);
    15de:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <error_reason>
    15e2:	81 ec       	ldi	r24, 0xC1	; 193
    15e4:	95 e0       	ldi	r25, 0x05	; 5
    15e6:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
            break;
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    15ec:	68 ef       	ldi	r22, 0xF8	; 248
    15ee:	8d ec       	ldi	r24, 0xCD	; 205
    15f0:	95 e0       	ldi	r25, 0x05	; 5
    15f2:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    15f6:	68 ef       	ldi	r22, 0xF8	; 248
    15f8:	89 ed       	ldi	r24, 0xD9	; 217
    15fa:	95 e0       	ldi	r25, 0x05	; 5
    15fc:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    1600:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	19 f1       	breq	.+70     	; 0x164e <disp_process+0x1ae>
    1608:	48 f1       	brcs	.+82     	; 0x165c <disp_process+0x1bc>
    160a:	86 30       	cpi	r24, 0x06	; 6
    160c:	19 f0       	breq	.+6      	; 0x1614 <disp_process+0x174>
    160e:	8d 30       	cpi	r24, 0x0D	; 13
    1610:	81 f1       	breq	.+96     	; 0x1672 <disp_process+0x1d2>
    1612:	6f c0       	rjmp	.+222    	; 0x16f2 <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    1614:	40 91 89 03 	lds	r20, 0x0389	; 0x800389 <voltage>
    1618:	50 91 8a 03 	lds	r21, 0x038A	; 0x80038a <voltage+0x1>
    161c:	9a 01       	movw	r18, r20
    161e:	36 95       	lsr	r19
    1620:	27 95       	ror	r18
    1622:	36 95       	lsr	r19
    1624:	27 95       	ror	r18
    1626:	ab e7       	ldi	r26, 0x7B	; 123
    1628:	b4 e1       	ldi	r27, 0x14	; 20
    162a:	0e 94 12 20 	call	0x4024	; 0x4024 <__umulhisi3>
    162e:	96 95       	lsr	r25
    1630:	87 95       	ror	r24
    1632:	64 e6       	ldi	r22, 0x64	; 100
    1634:	68 9f       	mul	r22, r24
    1636:	90 01       	movw	r18, r0
    1638:	69 9f       	mul	r22, r25
    163a:	30 0d       	add	r19, r0
    163c:	11 24       	eor	r1, r1
    163e:	ba 01       	movw	r22, r20
    1640:	62 1b       	sub	r22, r18
    1642:	73 0b       	sbc	r23, r19
    1644:	81 ec       	ldi	r24, 0xC1	; 193
    1646:	95 e0       	ldi	r25, 0x05	; 5
    1648:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
            break;
    164c:	52 c0       	rjmp	.+164    	; 0x16f2 <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    164e:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <servo_disp_value>
    1652:	81 ec       	ldi	r24, 0xC1	; 193
    1654:	95 e0       	ldi	r25, 0x05	; 5
    1656:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
            break;
    165a:	4b c0       	rjmp	.+150    	; 0x16f2 <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    165c:	68 ef       	ldi	r22, 0xF8	; 248
    165e:	8b ec       	ldi	r24, 0xCB	; 203
    1660:	95 e0       	ldi	r25, 0x05	; 5
    1662:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1666:	68 ef       	ldi	r22, 0xF8	; 248
    1668:	87 ed       	ldi	r24, 0xD7	; 215
    166a:	95 e0       	ldi	r25, 0x05	; 5
    166c:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
            break;
    1670:	40 c0       	rjmp	.+128    	; 0x16f2 <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    1672:	44 ef       	ldi	r20, 0xF4	; 244
    1674:	51 e0       	ldi	r21, 0x01	; 1
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	84 e8       	ldi	r24, 0x84	; 132
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <evTime_process_period>
    1682:	89 2b       	or	r24, r25
    1684:	b1 f1       	breq	.+108    	; 0x16f2 <disp_process+0x252>
			{
				if (blink_state == 0)
    1686:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <blink_state>
    168a:	81 11       	cpse	r24, r1
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <disp_process+0x20a>
				{
					blink_state = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1694:	67 ef       	ldi	r22, 0xF7	; 247
    1696:	8b ec       	ldi	r24, 0xCB	; 203
    1698:	95 e0       	ldi	r25, 0x05	; 5
    169a:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    169e:	67 ef       	ldi	r22, 0xF7	; 247
    16a0:	87 ed       	ldi	r24, 0xD7	; 215
    16a2:	95 e0       	ldi	r25, 0x05	; 5
    16a4:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
    16a8:	24 c0       	rjmp	.+72     	; 0x16f2 <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    16aa:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <blink_state>
					if (blink_cnt == 0) 
    16ae:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <blink_cnt>
    16b2:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <blink_cnt+0x1>
    16b6:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <blink_cnt+0x2>
    16ba:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <blink_cnt+0x3>
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	a1 05       	cpc	r26, r1
    16c2:	b1 05       	cpc	r27, r1
    16c4:	29 f4       	brne	.+10     	; 0x16d0 <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
						break;
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <disp_process+0x252>
					}
					blink_cnt--;
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	a1 09       	sbc	r26, r1
    16d4:	b1 09       	sbc	r27, r1
    16d6:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <blink_cnt>
    16da:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <blink_cnt+0x1>
    16de:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <blink_cnt+0x2>
    16e2:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    16e6:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <second_disp_blink_val>
    16ea:	81 ec       	ldi	r24, 0xC1	; 193
    16ec:	95 e0       	ldi	r25, 0x05	; 5
    16ee:	0e 94 9d 09 	call	0x133a	; 0x133a <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    16f2:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <timer_disp_process.1979>
    16f6:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <timer_disp_process.1979+0x1>
    16fa:	a0 91 7c 03 	lds	r26, 0x037C	; 0x80037c <timer_disp_process.1979+0x2>
    16fe:	b0 91 7d 03 	lds	r27, 0x037D	; 0x80037d <timer_disp_process.1979+0x3>
    1702:	c2 96       	adiw	r24, 0x32	; 50
    1704:	a1 1d       	adc	r26, r1
    1706:	b1 1d       	adc	r27, r1
    1708:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <timer_disp_process.1979>
    170c:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <timer_disp_process.1979+0x1>
    1710:	a0 93 7c 03 	sts	0x037C, r26	; 0x80037c <timer_disp_process.1979+0x2>
    1714:	b0 93 7d 03 	sts	0x037D, r27	; 0x80037d <timer_disp_process.1979+0x3>
    1718:	08 95       	ret

0000171a <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    171e:	00 91 ee 05 	lds	r16, 0x05EE	; 0x8005ee <mktime+0x2>
    1722:	10 91 ef 05 	lds	r17, 0x05EF	; 0x8005ef <mktime+0x3>
    1726:	20 91 f0 05 	lds	r18, 0x05F0	; 0x8005f0 <mktime+0x4>
    172a:	30 91 f1 05 	lds	r19, 0x05F1	; 0x8005f1 <mktime+0x5>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	80 0f       	add	r24, r16
    1734:	91 1f       	adc	r25, r17
    1736:	a2 1f       	adc	r26, r18
    1738:	b3 1f       	adc	r27, r19
    173a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <animation_time>
    173e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <animation_time+0x1>
    1742:	a0 93 8e 03 	sts	0x038E, r26	; 0x80038e <animation_time+0x2>
    1746:	b0 93 8f 03 	sts	0x038F, r27	; 0x80038f <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	84 2f       	mov	r24, r20
    174e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
}
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

00001758 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1758:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	29 f0       	breq	.+10     	; 0x176a <animation+0x12>
    1760:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	09 f0       	breq	.+2      	; 0x176a <animation+0x12>
    1768:	78 c0       	rjmp	.+240    	; 0x185a <animation+0x102>
    176a:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    176e:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    1772:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    1776:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    177a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <timer_anim.1999>
    177e:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <timer_anim.1999+0x1>
    1782:	a0 91 78 03 	lds	r26, 0x0378	; 0x800378 <timer_anim.1999+0x2>
    1786:	b0 91 79 03 	lds	r27, 0x0379	; 0x800379 <timer_anim.1999+0x3>
    178a:	84 17       	cp	r24, r20
    178c:	95 07       	cpc	r25, r21
    178e:	a6 07       	cpc	r26, r22
    1790:	b7 07       	cpc	r27, r23
    1792:	08 f0       	brcs	.+2      	; 0x1796 <animation+0x3e>
    1794:	62 c0       	rjmp	.+196    	; 0x185a <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1796:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
    179a:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
    179e:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
    17a2:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
    17a6:	81 55       	subi	r24, 0x51	; 81
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	af 4f       	sbci	r26, 0xFF	; 255
    17ac:	bf 4f       	sbci	r27, 0xFF	; 255
    17ae:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <timer_anim.1999>
    17b2:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <timer_anim.1999+0x1>
    17b6:	a0 93 78 03 	sts	0x0378, r26	; 0x800378 <timer_anim.1999+0x2>
    17ba:	b0 93 79 03 	sts	0x0379, r27	; 0x800379 <timer_anim.1999+0x3>
		if (segment1.state == SEG_ANIMATION)
    17be:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <segment1+0x4>
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	61 f4       	brne	.+24     	; 0x17de <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    17c6:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <anim_iteration.2000>
    17ca:	8d ec       	ldi	r24, 0xCD	; 205
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    17d2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <anim_iteration.2000>
    17d6:	89 ed       	ldi	r24, 0xD9	; 217
    17d8:	95 e0       	ldi	r25, 0x05	; 5
    17da:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    17de:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <segment2+0x4>
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	61 f4       	brne	.+24     	; 0x17fe <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    17e6:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <anim_iteration2.2001>
    17ea:	8b ec       	ldi	r24, 0xCB	; 203
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    17ee:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    17f2:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <anim_iteration2.2001>
    17f6:	87 ed       	ldi	r24, 0xD7	; 215
    17f8:	95 e0       	ldi	r25, 0x05	; 5
    17fa:	0e 94 c0 09 	call	0x1380	; 0x1380 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    17fe:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    1802:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    1806:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    180a:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    180e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <animation_time>
    1812:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <animation_time+0x1>
    1816:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <animation_time+0x2>
    181a:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <animation_time+0x3>
    181e:	84 17       	cp	r24, r20
    1820:	95 07       	cpc	r25, r21
    1822:	a6 07       	cpc	r26, r22
    1824:	b7 07       	cpc	r27, r23
    1826:	28 f4       	brcc	.+10     	; 0x1832 <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
			LED_ACUM_OFF;
    1830:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    1832:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <anim_iteration.2000>
    1836:	9f 5f       	subi	r25, 0xFF	; 255
    1838:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <anim_iteration.2000>
		anim_iteration2--;
    183c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <anim_iteration2.2001>
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <anim_iteration2.2001>
		if (anim_iteration == 255) anim_iteration = 249;
    1846:	9f 3f       	cpi	r25, 0xFF	; 255
    1848:	19 f4       	brne	.+6      	; 0x1850 <animation+0xf8>
    184a:	99 ef       	ldi	r25, 0xF9	; 249
    184c:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <anim_iteration.2000>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    1850:	88 3f       	cpi	r24, 0xF8	; 248
    1852:	19 f4       	brne	.+6      	; 0x185a <animation+0x102>
    1854:	8e ef       	ldi	r24, 0xFE	; 254
    1856:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <anim_iteration2.2001>
    185a:	08 95       	ret

0000185c <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    185c:	e1 99       	sbic	0x1c, 1	; 28
    185e:	fe cf       	rjmp	.-4      	; 0x185c <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    1860:	9f bb       	out	0x1f, r25	; 31
    1862:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1864:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1866:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1868:	e1 9a       	sbi	0x1c, 1	; 28
    186a:	08 95       	ret

0000186c <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    186c:	e1 99       	sbic	0x1c, 1	; 28
    186e:	fe cf       	rjmp	.-4      	; 0x186c <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    1870:	9f bb       	out	0x1f, r25	; 31
    1872:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1874:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1876:	8d b3       	in	r24, 0x1d	; 29
    1878:	08 95       	ret

0000187a <set_error_state>:
#define RESISTOR 1

float errorGetMotorVal(void)
{
	return motor_error_value;
}
    187a:	cf 93       	push	r28
    187c:	c8 2f       	mov	r28, r24
    187e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    1882:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    1886:	82 60       	ori	r24, 0x02	; 2
    1888:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    188c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    1890:	8c 2f       	mov	r24, r28
    1892:	0e 94 33 0a 	call	0x1466	; 0x1466 <display_set_error>
    1896:	0e 94 b6 07 	call	0xf6c	; 0xf6c <dcmotor_set_error>
    189a:	0e 94 de 11 	call	0x23bc	; 0x23bc <servo_error>
    189e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <system_error>
    18a2:	c0 93 dd 05 	sts	0x05DD, r28	; 0x8005dd <led_blink>
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <error_init>:
    18aa:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <error_motor_state>
    18ae:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <error_motor_last_state>
    18b2:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <error_motor_status>
    18b6:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <error_servo_status>
    18ba:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <error_servo_state>
    18be:	8b ea       	ldi	r24, 0xAB	; 171
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <evTime_off>
    18c6:	8b e9       	ldi	r24, 0x9B	; 155
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <evTime_off>
    18ce:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <led_blink>
    18d2:	08 95       	ret

000018d4 <error_deinit>:
    18d4:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <error_motor_state>
    18d8:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <error_motor_last_state>
    18dc:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <error_motor_status>
    18e0:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <error_servo_status>
    18e4:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <error_servo_state>
    18e8:	8b ea       	ldi	r24, 0xAB	; 171
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <evTime_off>
    18f0:	8b e9       	ldi	r24, 0x9B	; 155
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <evTime_off>
    18f8:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <led_blink>
    18fc:	08 95       	ret

000018fe <error_event>:

void error_event(void)
{
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    1916:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    191a:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    191e:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    1922:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    1926:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <error_event_timer.2064>
    192a:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <error_event_timer.2064+0x1>
    192e:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <error_event_timer.2064+0x2>
    1932:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <error_event_timer.2064+0x3>
    1936:	84 17       	cp	r24, r20
    1938:	95 07       	cpc	r25, r21
    193a:	a6 07       	cpc	r26, r22
    193c:	b7 07       	cpc	r27, r23
    193e:	08 f0       	brcs	.+2      	; 0x1942 <error_event+0x44>
    1940:	72 c2       	rjmp	.+1252   	; 0x1e26 <error_event+0x528>
    1942:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    1946:	80 ff       	sbrs	r24, 0
    1948:	6e c2       	rjmp	.+1244   	; 0x1e26 <error_event+0x528>
	{
		error_event_timer = mktime.ms + 500;
    194a:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    194e:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    1952:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    1956:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    195a:	4c 50       	subi	r20, 0x0C	; 12
    195c:	5e 4f       	sbci	r21, 0xFE	; 254
    195e:	6f 4f       	sbci	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	40 93 97 03 	sts	0x0397, r20	; 0x800397 <error_event_timer.2064>
    1966:	50 93 98 03 	sts	0x0398, r21	; 0x800398 <error_event_timer.2064+0x1>
    196a:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <error_event_timer.2064+0x2>
    196e:	70 93 9a 03 	sts	0x039A, r23	; 0x80039a <error_event_timer.2064+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1972:	81 fd       	sbrc	r24, 1
    1974:	58 c2       	rjmp	.+1200   	; 0x1e26 <error_event+0x528>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
    1976:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <accum_get_voltage>
    197a:	4b 01       	movw	r8, r22
    197c:	5c 01       	movw	r10, r24
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    197e:	0e 94 b2 07 	call	0xf64	; 0xf64 <dcmotor_get_pwm>

#define REZYSTANCJA_WIRNIKA 3

static float count_motor_error_value(uint16_t x, float volt_accum)
{
	float volt_in_motor = volt_accum * x/100;
    1982:	bc 01       	movw	r22, r24
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 b0 19 	call	0x3360	; 0x3360 <__floatunsisf>
    198c:	6b 01       	movw	r12, r22
    198e:	7c 01       	movw	r14, r24
	float volt_in_motor_nominal = 14.2 * x/100;
	float temp = 0.011*pow(x, 1.6281) + (volt_in_motor - volt_in_motor_nominal)/REZYSTANCJA_WIRNIKA;
    1990:	25 e9       	ldi	r18, 0x95	; 149
    1992:	35 e6       	ldi	r19, 0x65	; 101
    1994:	40 ed       	ldi	r20, 0xD0	; 208
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <pow>
    199c:	2b 01       	movw	r4, r22
    199e:	3c 01       	movw	r6, r24
    19a0:	a7 01       	movw	r20, r14
    19a2:	96 01       	movw	r18, r12
    19a4:	c5 01       	movw	r24, r10
    19a6:	b4 01       	movw	r22, r8
    19a8:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	48 ec       	ldi	r20, 0xC8	; 200
    19b2:	52 e4       	ldi	r21, 0x42	; 66
    19b4:	0e 94 08 19 	call	0x3210	; 0x3210 <__divsf3>
    19b8:	4b 01       	movw	r8, r22
    19ba:	5c 01       	movw	r10, r24
    19bc:	23 e3       	ldi	r18, 0x33	; 51
    19be:	33 e3       	ldi	r19, 0x33	; 51
    19c0:	43 e6       	ldi	r20, 0x63	; 99
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
    19c8:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	48 ec       	ldi	r20, 0xC8	; 200
    19d2:	52 e4       	ldi	r21, 0x42	; 66
    19d4:	0e 94 08 19 	call	0x3210	; 0x3210 <__divsf3>
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	c5 01       	movw	r24, r10
    19de:	b4 01       	movw	r22, r8
    19e0:	0e 94 9b 18 	call	0x3136	; 0x3136 <__subsf3>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e4       	ldi	r20, 0x40	; 64
    19ea:	50 e4       	ldi	r21, 0x40	; 64
    19ec:	0e 94 08 19 	call	0x3210	; 0x3210 <__divsf3>
    19f0:	4b 01       	movw	r8, r22
    19f2:	5c 01       	movw	r10, r24
    19f4:	28 e5       	ldi	r18, 0x58	; 88
    19f6:	39 e3       	ldi	r19, 0x39	; 57
    19f8:	44 e3       	ldi	r20, 0x34	; 52
    19fa:	5c e3       	ldi	r21, 0x3C	; 60
    19fc:	c3 01       	movw	r24, r6
    19fe:	b2 01       	movw	r22, r4
    1a00:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    1a04:	9b 01       	movw	r18, r22
    1a06:	ac 01       	movw	r20, r24
    1a08:	c5 01       	movw	r24, r10
    1a0a:	b4 01       	movw	r22, r8
    1a0c:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3>
    1a10:	4b 01       	movw	r8, r22
    1a12:	5c 01       	movw	r10, r24
	#if DARK_MENU
	temp = (float)(dark_menu_get_value(MENU_ERROR_MOTOR_CALIBRATION) - 50) * x/100 + temp;
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	0e 94 49 07 	call	0xe92	; 0xe92 <dark_menu_get_value>
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		float volt = accum_get_voltage();
		motor_error_value = count_motor_error_value(dcmotor_get_pwm(), volt);
    1a1a:	68 2f       	mov	r22, r24
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	62 53       	subi	r22, 0x32	; 50
    1a20:	71 09       	sbc	r23, r1
    1a22:	07 2e       	mov	r0, r23
    1a24:	00 0c       	add	r0, r0
    1a26:	88 0b       	sbc	r24, r24
    1a28:	99 0b       	sbc	r25, r25
    1a2a:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatsisf>
    1a2e:	a7 01       	movw	r20, r14
    1a30:	96 01       	movw	r18, r12
    1a32:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	48 ec       	ldi	r20, 0xC8	; 200
    1a3c:	52 e4       	ldi	r21, 0x42	; 66
    1a3e:	0e 94 08 19 	call	0x3210	; 0x3210 <__divsf3>
    1a42:	a5 01       	movw	r20, r10
    1a44:	94 01       	movw	r18, r8
    1a46:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3>
    1a4a:	60 93 a4 03 	sts	0x03A4, r22	; 0x8003a4 <motor_error_value>
    1a4e:	70 93 a5 03 	sts	0x03A5, r23	; 0x8003a5 <motor_error_value+0x1>
    1a52:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <motor_error_value+0x2>
    1a56:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <motor_error_value+0x3>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <measure_get_filtered_value>
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1a60:	42 e0       	ldi	r20, 0x02	; 2
    1a62:	5b e2       	ldi	r21, 0x2B	; 43
    1a64:	67 e0       	ldi	r22, 0x07	; 7
    1a66:	7d e3       	ldi	r23, 0x3D	; 61
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	0e 94 ef 10 	call	0x21de	; 0x21de <measure_get_current>
		//debug_msg("MOTOR ADC: %d, current_max: %f, current: %f\n", motor_adc_filterd, motor_error_value, current);
		if (current > motor_error_value && dcmotor_is_on()) //servo_vibro_value*5
    1a6e:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <motor_error_value>
    1a72:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <motor_error_value+0x1>
    1a76:	40 91 a6 03 	lds	r20, 0x03A6	; 0x8003a6 <motor_error_value+0x2>
    1a7a:	50 91 a7 03 	lds	r21, 0x03A7	; 0x8003a7 <motor_error_value+0x3>
    1a7e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__gesf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	44 f4       	brge	.+16     	; 0x1a96 <error_event+0x198>
    1a86:	0e 94 6d 07 	call	0xeda	; 0xeda <dcmotor_is_on>
    1a8a:	89 2b       	or	r24, r25
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <error_event+0x198>
		{
			error_motor_status = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <error_motor_status>
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <error_event+0x19c>
		}
		else
		{
			error_motor_status = 0;
    1a96:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <error_motor_status>
		}
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_MOTOR) == 0)
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 49 07 	call	0xe92	; 0xe92 <dark_menu_get_value>
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	0d c1       	rjmp	.+538    	; 0x1cbe <error_event+0x3c0>
		#endif
		{
			#if CONFIG_USE_ERROR_MOTOR
			if (error_motor_status == 1)
    1aa4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <error_motor_status>
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <error_event+0x1b0>
    1aac:	a8 c0       	rjmp	.+336    	; 0x1bfe <error_event+0x300>
			{
				switch(error_motor_state)
    1aae:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <error_motor_state>
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <error_event+0x1ba>
    1ab6:	70 c0       	rjmp	.+224    	; 0x1b98 <error_event+0x29a>
    1ab8:	28 f4       	brcc	.+10     	; 0x1ac4 <error_event+0x1c6>
    1aba:	88 23       	and	r24, r24
    1abc:	51 f0       	breq	.+20     	; 0x1ad2 <error_event+0x1d4>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a9 f1       	breq	.+106    	; 0x1b2c <error_event+0x22e>
    1ac2:	fd c0       	rjmp	.+506    	; 0x1cbe <error_event+0x3c0>
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <error_event+0x1cc>
    1ac8:	7a c0       	rjmp	.+244    	; 0x1bbe <error_event+0x2c0>
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <error_event+0x1d2>
    1ace:	7b c0       	rjmp	.+246    	; 0x1bc6 <error_event+0x2c8>
    1ad0:	f6 c0       	rjmp	.+492    	; 0x1cbe <error_event+0x3c0>
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1ad8:	80 e4       	ldi	r24, 0x40	; 64
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1ae4:	0e 94 b2 07 	call	0xf64	; 0xf64 <dcmotor_get_pwm>
	return temp;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1ae8:	2e e1       	ldi	r18, 0x1E	; 30
    1aea:	ac 01       	movw	r20, r24
    1aec:	24 9f       	mul	r18, r20
    1aee:	c0 01       	movw	r24, r0
    1af0:	25 9f       	mul	r18, r21
    1af2:	90 0d       	add	r25, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	48 e8       	ldi	r20, 0x88	; 136
    1af8:	53 e1       	ldi	r21, 0x13	; 19
    1afa:	7a 01       	movw	r14, r20
    1afc:	e8 1a       	sub	r14, r24
    1afe:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1b00:	ff 92       	push	r15
    1b02:	ef 92       	push	r14
    1b04:	8b e5       	ldi	r24, 0x5B	; 91
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				switch(error_motor_state)
				{
					case ERR_M_OK:
						error_motor_state = ERR_M_WAIT;
						debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
						evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1b10:	a7 01       	movw	r20, r14
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	8b ea       	ldi	r24, 0xAB	; 171
    1b18:	93 e0       	ldi	r25, 0x03	; 3
    1b1a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
					break;
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	c9 c0       	rjmp	.+402    	; 0x1cbe <error_event+0x3c0>
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
    1b2c:	8b ea       	ldi	r24, 0xAB	; 171
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1b34:	89 2b       	or	r24, r25
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <error_event+0x23c>
    1b38:	c2 c0       	rjmp	.+388    	; 0x1cbe <error_event+0x3c0>
						{
							dcmotor_set_try();
    1b3a:	0e 94 c4 07 	call	0xf88	; 0xf88 <dcmotor_set_try>
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b3e:	0e 94 b2 07 	call	0xf64	; 0xf64 <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1b42:	2e e1       	ldi	r18, 0x1E	; 30
    1b44:	ac 01       	movw	r20, r24
    1b46:	24 9f       	mul	r18, r20
    1b48:	c0 01       	movw	r24, r0
    1b4a:	25 9f       	mul	r18, r21
    1b4c:	90 0d       	add	r25, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	48 e8       	ldi	r20, 0x88	; 136
    1b52:	53 e1       	ldi	r21, 0x13	; 19
    1b54:	7a 01       	movw	r14, r20
    1b56:	e8 1a       	sub	r14, r24
    1b58:	f9 0a       	sbc	r15, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1b5a:	ff 92       	push	r15
    1b5c:	ef 92       	push	r14
    1b5e:	8a e7       	ldi	r24, 0x7A	; 122
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
					break;
					case ERR_M_WAIT:
						if (evTime_check(&motor_timer))
						{
							dcmotor_set_try();
							evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1b6a:	a7 01       	movw	r20, r14
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	8b ea       	ldi	r24, 0xAB	; 171
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
							error_motor_state = ERR_M_AXELERATE;
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    1b7e:	8e e9       	ldi	r24, 0x9E	; 158
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	93 c0       	rjmp	.+294    	; 0x1cbe <error_event+0x3c0>
						}
					break;
					case ERR_M_AXELERATE:
						if (evTime_check(&motor_timer))
    1b98:	8b ea       	ldi	r24, 0xAB	; 171
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1ba0:	89 2b       	or	r24, r25
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <error_event+0x2a8>
    1ba4:	8c c0       	rjmp	.+280    	; 0x1cbe <error_event+0x3c0>
						{
							error_motor_state = ERR_M_ERROR;
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
							debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1bac:	8e eb       	ldi	r24, 0xBE	; 190
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	9f 93       	push	r25
    1bb2:	8f 93       	push	r24
    1bb4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	80 c0       	rjmp	.+256    	; 0x1cbe <error_event+0x3c0>
						}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	0e 94 3d 0c 	call	0x187a	; 0x187a <set_error_state>
					break;
    1bc4:	7c c0       	rjmp	.+248    	; 0x1cbe <error_event+0x3c0>
					case ERR_M_EXIT:
						if (evTime_check(&motor_timer))
    1bc6:	8b ea       	ldi	r24, 0xAB	; 171
    1bc8:	93 e0       	ldi	r25, 0x03	; 3
    1bca:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1bce:	89 2b       	or	r24, r25
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <error_event+0x2d6>
    1bd2:	75 c0       	rjmp	.+234    	; 0x1cbe <error_event+0x3c0>
						{
							evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1bd4:	40 ed       	ldi	r20, 0xD0	; 208
    1bd6:	57 e0       	ldi	r21, 0x07	; 7
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	8b ea       	ldi	r24, 0xAB	; 171
    1bde:	93 e0       	ldi	r25, 0x03	; 3
    1be0:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
							error_motor_state = error_motor_last_state;
    1be4:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <error_motor_last_state>
    1be8:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
							debug_msg("ERROR STATUS: go to last before wait\n\r");
    1bec:	8a ed       	ldi	r24, 0xDA	; 218
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	9f 93       	push	r25
    1bf2:	8f 93       	push	r24
    1bf4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	60 c0       	rjmp	.+192    	; 0x1cbe <error_event+0x3c0>
				}
			}
			else
			{
				//toDo
				switch(error_motor_state)
    1bfe:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <error_motor_state>
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	49 f1       	breq	.+82     	; 0x1c58 <error_event+0x35a>
    1c06:	18 f4       	brcc	.+6      	; 0x1c0e <error_event+0x310>
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	41 f0       	breq	.+16     	; 0x1c1c <error_event+0x31e>
    1c0c:	58 c0       	rjmp	.+176    	; 0x1cbe <error_event+0x3c0>
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <error_event+0x316>
    1c12:	41 c0       	rjmp	.+130    	; 0x1c96 <error_event+0x398>
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <error_event+0x31c>
    1c18:	42 c0       	rjmp	.+132    	; 0x1c9e <error_event+0x3a0>
    1c1a:	51 c0       	rjmp	.+162    	; 0x1cbe <error_event+0x3c0>
				{
					case ERR_M_OK:
					break;
					case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1c1c:	8b ea       	ldi	r24, 0xAB	; 171
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1c24:	89 2b       	or	r24, r25
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <error_event+0x32c>
    1c28:	4a c0       	rjmp	.+148    	; 0x1cbe <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c2a:	40 ed       	ldi	r20, 0xD0	; 208
    1c2c:	57 e0       	ldi	r21, 0x07	; 7
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	8b ea       	ldi	r24, 0xAB	; 171
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
						error_motor_state = ERR_M_EXIT;
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
						error_motor_last_state = ERR_M_WAIT;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	33 c0       	rjmp	.+102    	; 0x1cbe <error_event+0x3c0>
					}
					break;
					case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c58:	8b ea       	ldi	r24, 0xAB	; 171
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1c60:	89 2b       	or	r24, r25
    1c62:	69 f1       	breq	.+90     	; 0x1cbe <error_event+0x3c0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c64:	40 ed       	ldi	r20, 0xD0	; 208
    1c66:	57 e0       	ldi	r21, 0x07	; 7
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	8b ea       	ldi	r24, 0xAB	; 171
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
						dcmotor_set_normal_state();
    1c74:	0e 94 ce 07 	call	0xf9c	; 0xf9c <dcmotor_set_normal_state>
						error_motor_state = ERR_M_EXIT;
    1c78:	84 e0       	ldi	r24, 0x04	; 4
    1c7a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <error_motor_state>
						error_motor_last_state = ERR_M_AXELERATE;
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <error_motor_last_state>
						debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	9f 93       	push	r25
    1c8a:	8f 93       	push	r24
    1c8c:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <error_event+0x3c0>
					}
					break;
					case ERR_M_ERROR:
						set_error_state(ERR_REASON_MOTOR);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	0e 94 3d 0c 	call	0x187a	; 0x187a <set_error_state>
					break;
    1c9c:	10 c0       	rjmp	.+32     	; 0x1cbe <error_event+0x3c0>
					case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c9e:	8b ea       	ldi	r24, 0xAB	; 171
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1ca6:	89 2b       	or	r24, r25
    1ca8:	51 f0       	breq	.+20     	; 0x1cbe <error_event+0x3c0>
					{
						debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1caa:	8c e1       	ldi	r24, 0x1C	; 28
    1cac:	92 e0       	ldi	r25, 0x02	; 2
    1cae:	9f 93       	push	r25
    1cb0:	8f 93       	push	r24
    1cb2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						error_motor_state = ERR_M_OK;
    1cb6:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <error_motor_state>
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
			#endif
		} /* Disable error */
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	0e 94 49 07 	call	0xe92	; 0xe92 <dark_menu_get_value>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	af c0       	rjmp	.+350    	; 0x1e26 <error_event+0x528>
}

static uint16_t count_servo_error_value(void)
{
	#if DARK_MENU
	return 100 + (dark_menu_get_value(MENU_ERROR_SERVO_CALIBRATION) - 50);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	0e 94 49 07 	call	0xe92	; 0xe92 <dark_menu_get_value>
		#if DARK_MENU
		if (dark_menu_get_value(MENU_ERROR_SERVO) == 0)
		#endif 
		{
			#if CONFIG_USE_ERROR_SERVO
			servo_error_value = count_servo_error_value();
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	c2 96       	adiw	r24, 0x32	; 50
    1cd2:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <servo_error_value+0x1>
    1cd6:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <servo_error_value>
			if (measure_get_filtered_value(MEAS_SERVO) > servo_error_value) //servo_vibro_value*5
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <measure_get_filtered_value>
    1ce0:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <servo_error_value>
    1ce4:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <servo_error_value+0x1>
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	d8 f4       	brcc	.+54     	; 0x1d24 <error_event+0x426>
			{
				debug_msg("servo_error_value: %d\n", servo_error_value);
    1cee:	3f 93       	push	r19
    1cf0:	2f 93       	push	r18
    1cf2:	85 e3       	ldi	r24, 0x35	; 53
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	9f 93       	push	r25
    1cf8:	8f 93       	push	r24
    1cfa:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
				error_servo_status = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <error_servo_status>
				error_servo_status = 0;
			}
		
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <error_servo_state>
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	51 f1       	breq	.+84     	; 0x1d68 <error_event+0x46a>
    1d14:	a8 f0       	brcs	.+42     	; 0x1d40 <error_event+0x442>
    1d16:	82 30       	cpi	r24, 0x02	; 2
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <error_event+0x41e>
    1d1a:	4b c0       	rjmp	.+150    	; 0x1db2 <error_event+0x4b4>
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <error_event+0x424>
    1d20:	51 c0       	rjmp	.+162    	; 0x1dc4 <error_event+0x4c6>
    1d22:	81 c0       	rjmp	.+258    	; 0x1e26 <error_event+0x528>
				debug_msg("servo_error_value: %d\n", servo_error_value);
				error_servo_status = 1;
			}
			else
			{
				error_servo_status = 0;
    1d24:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <error_servo_status>
				} //switch
			}// if (error_servo_status == 1)
			else
			{
				//toDo
				switch(error_servo_state)
    1d28:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <error_servo_state>
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <error_event+0x434>
    1d30:	66 c0       	rjmp	.+204    	; 0x1dfe <error_event+0x500>
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <error_event+0x43a>
    1d36:	74 c0       	rjmp	.+232    	; 0x1e20 <error_event+0x522>
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <error_event+0x440>
    1d3c:	74 c0       	rjmp	.+232    	; 0x1e26 <error_event+0x528>
    1d3e:	46 c0       	rjmp	.+140    	; 0x1dcc <error_event+0x4ce>
			if (error_servo_status == 1)
			{
				switch(error_servo_state)
				{
					case ERR_S_OK:
						error_servo_state = ERR_S_WAIT;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1d46:	8c e4       	ldi	r24, 0x4C	; 76
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
						evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1d52:	44 ef       	ldi	r20, 0xF4	; 244
    1d54:	51 e0       	ldi	r21, 0x01	; 1
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	8b e9       	ldi	r24, 0x9B	; 155
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
					break;
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	5f c0       	rjmp	.+190    	; 0x1e26 <error_event+0x528>
					case ERR_S_WAIT:
						if (evTime_check(&servo_timer))
    1d68:	8b e9       	ldi	r24, 0x9B	; 155
    1d6a:	93 e0       	ldi	r25, 0x03	; 3
    1d6c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1d70:	89 2b       	or	r24, r25
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <error_event+0x478>
    1d74:	58 c0       	rjmp	.+176    	; 0x1e26 <error_event+0x528>
						{
							if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1d76:	0e 94 4b 12 	call	0x2496	; 0x2496 <servo_get_try_cnt>
    1d7a:	04 97       	sbiw	r24, 0x04	; 4
    1d7c:	24 f0       	brlt	.+8      	; 0x1d86 <error_event+0x488>
							{
								error_servo_state = ERR_S_ERROR;
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <error_servo_state>
								break;
    1d84:	50 c0       	rjmp	.+160    	; 0x1e26 <error_event+0x528>
							}
							evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1d86:	4c ed       	ldi	r20, 0xDC	; 220
    1d88:	55 e0       	ldi	r21, 0x05	; 5
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	8b e9       	ldi	r24, 0x9B	; 155
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
							error_servo_state = ERR_S_TRY;
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <error_servo_state>
							servo_enable_try();
    1d9c:	0e 94 3f 12 	call	0x247e	; 0x247e <servo_enable_try>
							debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1da0:	87 e6       	ldi	r24, 0x67	; 103
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	9f 93       	push	r25
    1da6:	8f 93       	push	r24
    1da8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	3a c0       	rjmp	.+116    	; 0x1e26 <error_event+0x528>
						}
					break;
					case ERR_S_TRY:
						if (evTime_check(&servo_timer))
    1db2:	8b e9       	ldi	r24, 0x9B	; 155
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1dba:	89 2b       	or	r24, r25
    1dbc:	a1 f1       	breq	.+104    	; 0x1e26 <error_event+0x528>
						{
							error_servo_state = ERR_S_OK;
    1dbe:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <error_servo_state>
    1dc2:	31 c0       	rjmp	.+98     	; 0x1e26 <error_event+0x528>
						}
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	0e 94 3d 0c 	call	0x187a	; 0x187a <set_error_state>
					break;
    1dca:	2d c0       	rjmp	.+90     	; 0x1e26 <error_event+0x528>
				switch(error_servo_state)
				{
					case ERR_S_OK:
					break;
					case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1dcc:	8b e9       	ldi	r24, 0x9B	; 155
    1dce:	93 e0       	ldi	r25, 0x03	; 3
    1dd0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1dd4:	89 2b       	or	r24, r25
    1dd6:	39 f1       	breq	.+78     	; 0x1e26 <error_event+0x528>
					{
						evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1dd8:	40 ed       	ldi	r20, 0xD0	; 208
    1dda:	57 e0       	ldi	r21, 0x07	; 7
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	8b e9       	ldi	r24, 0x9B	; 155
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
						error_servo_state = ERR_M_OK;
    1de8:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1dec:	81 e8       	ldi	r24, 0x81	; 129
    1dee:	92 e0       	ldi	r25, 0x02	; 2
    1df0:	9f 93       	push	r25
    1df2:	8f 93       	push	r24
    1df4:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <error_event+0x528>
					}
					break;
					case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1dfe:	8b e9       	ldi	r24, 0x9B	; 155
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    1e06:	89 2b       	or	r24, r25
    1e08:	71 f0       	breq	.+28     	; 0x1e26 <error_event+0x528>
					{
						error_servo_state = ERR_S_OK;
    1e0a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <error_servo_state>
						debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e0e:	81 e8       	ldi	r24, 0x81	; 129
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	9f 93       	push	r25
    1e14:	8f 93       	push	r24
    1e16:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <error_event+0x528>
					}
					break;
					break;
					case ERR_S_ERROR:
						set_error_state(ERR_REASON_SERVO);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	0e 94 3d 0c 	call	0x187a	; 0x187a <set_error_state>
				} //switch
			} //else (error_servo_status == 1)
			#endif
		} /* Disable error */
	} //error_event_timer
}
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	9f 90       	pop	r9
    1e34:	8f 90       	pop	r8
    1e36:	7f 90       	pop	r7
    1e38:	6f 90       	pop	r6
    1e3a:	5f 90       	pop	r5
    1e3c:	4f 90       	pop	r4
    1e3e:	08 95       	ret

00001e40 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1e40:	4e e5       	ldi	r20, 0x5E	; 94
    1e42:	51 e0       	ldi	r21, 0x01	; 1
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	82 e9       	ldi	r24, 0x92	; 146
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <evTime_process_period>
    1e50:	89 2b       	or	r24, r25
    1e52:	09 f1       	breq	.+66     	; 0x1e96 <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1e54:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <led_blink>
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	71 f4       	brne	.+28     	; 0x1e78 <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1e5c:	92 b3       	in	r25, 0x12	; 18
    1e5e:	80 e1       	ldi	r24, 0x10	; 16
    1e60:	89 27       	eor	r24, r25
    1e62:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e64:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    1e68:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    1e6c:	90 62       	ori	r25, 0x20	; 32
    1e6e:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    1e72:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    1e76:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	69 f4       	brne	.+26     	; 0x1e96 <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1e7c:	92 b3       	in	r25, 0x12	; 18
    1e7e:	80 e4       	ldi	r24, 0x40	; 64
    1e80:	89 27       	eor	r24, r25
    1e82:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1e84:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    1e88:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    1e8c:	90 62       	ori	r25, 0x20	; 32
    1e8e:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    1e92:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    1e96:	08 95       	ret

00001e98 <filtered_value>:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
        break;
    }
	return 0;
}
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	62 30       	cpi	r22, 0x02	; 2
    1ea0:	58 f0       	brcs	.+22     	; 0x1eb8 <filtered_value+0x20>
    1ea2:	32 96       	adiw	r30, 0x02	; 2
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	41 91       	ld	r20, Z+
    1ea8:	51 91       	ld	r21, Z+
    1eaa:	24 0f       	add	r18, r20
    1eac:	35 1f       	adc	r19, r21
    1eae:	36 95       	lsr	r19
    1eb0:	27 95       	ror	r18
    1eb2:	9f 5f       	subi	r25, 0xFF	; 255
    1eb4:	69 13       	cpse	r22, r25
    1eb6:	f7 cf       	rjmp	.-18     	; 0x1ea6 <filtered_value+0xe>
    1eb8:	c9 01       	movw	r24, r18
    1eba:	08 95       	ret

00001ebc <init_measure>:
    1ebc:	e6 ef       	ldi	r30, 0xF6	; 246
    1ebe:	f3 e0       	ldi	r31, 0x03	; 3
    1ec0:	2e e1       	ldi	r18, 0x1E	; 30
    1ec2:	34 e0       	ldi	r19, 0x04	; 4
    1ec4:	81 ef       	ldi	r24, 0xF1	; 241
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	81 93       	st	Z+, r24
    1eca:	91 93       	st	Z+, r25
    1ecc:	2e 17       	cp	r18, r30
    1ece:	3f 07       	cpc	r19, r31
    1ed0:	d9 f7       	brne	.-10     	; 0x1ec8 <init_measure+0xc>
    1ed2:	e5 ed       	ldi	r30, 0xD5	; 213
    1ed4:	f3 e0       	ldi	r31, 0x03	; 3
    1ed6:	83 ef       	ldi	r24, 0xF3	; 243
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	11 92       	st	Z+, r1
    1edc:	11 92       	st	Z+, r1
    1ede:	8e 17       	cp	r24, r30
    1ee0:	9f 07       	cpc	r25, r31
    1ee2:	d9 f7       	brne	.-10     	; 0x1eda <init_measure+0x1e>
    1ee4:	ed eb       	ldi	r30, 0xBD	; 189
    1ee6:	f3 e0       	ldi	r31, 0x03	; 3
    1ee8:	81 ed       	ldi	r24, 0xD1	; 209
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	11 92       	st	Z+, r1
    1eee:	11 92       	st	Z+, r1
    1ef0:	8e 17       	cp	r24, r30
    1ef2:	9f 07       	cpc	r25, r31
    1ef4:	d9 f7       	brne	.-10     	; 0x1eec <init_measure+0x30>
    1ef6:	08 95       	ret

00001ef8 <measure_process>:
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    1f08:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    1f0c:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    1f10:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    1f14:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <measure_timer>
    1f18:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <measure_timer+0x1>
    1f1c:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <measure_timer+0x2>
    1f20:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <measure_timer+0x3>
    1f24:	84 17       	cp	r24, r20
    1f26:	95 07       	cpc	r25, r21
    1f28:	a6 07       	cpc	r26, r22
    1f2a:	b7 07       	cpc	r27, r23
    1f2c:	08 f0       	brcs	.+2      	; 0x1f30 <measure_process+0x38>
    1f2e:	fb c0       	rjmp	.+502    	; 0x2126 <measure_process+0x22e>
    1f30:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
    1f34:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
    1f38:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
    1f3c:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
    1f40:	44 96       	adiw	r24, 0x14	; 20
    1f42:	a1 1d       	adc	r26, r1
    1f44:	b1 1d       	adc	r27, r1
    1f46:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <measure_timer>
    1f4a:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <measure_timer+0x1>
    1f4e:	a0 93 b6 03 	sts	0x03B6, r26	; 0x8003b6 <measure_timer+0x2>
    1f52:	b0 93 b7 03 	sts	0x03B7, r27	; 0x8003b7 <measure_timer+0x3>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <motor_filter_value>
    1f62:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <motor_filter_value+0x1>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 b0 19 	call	0x3360	; 0x3360 <__floatunsisf>
    1f6e:	21 e7       	ldi	r18, 0x71	; 113
    1f70:	3d e3       	ldi	r19, 0x3D	; 61
    1f72:	4a e8       	ldi	r20, 0x8A	; 138
    1f74:	5e e3       	ldi	r21, 0x3E	; 62
    1f76:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    1f7a:	6b 01       	movw	r12, r22
    1f7c:	7c 01       	movw	r14, r24
    1f7e:	be 01       	movw	r22, r28
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 b0 19 	call	0x3360	; 0x3360 <__floatunsisf>
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	c7 01       	movw	r24, r14
    1f8e:	b6 01       	movw	r22, r12
    1f90:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3>
    1f94:	0e 94 81 19 	call	0x3302	; 0x3302 <__fixunssfsi>
    1f98:	70 93 21 04 	sts	0x0421, r23	; 0x800421 <accum_adc+0x1>
    1f9c:	60 93 20 04 	sts	0x0420, r22	; 0x800420 <accum_adc>
    1fa0:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <iteration_adc_accum_table>
    1fa4:	e2 2f       	mov	r30, r18
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ea 50       	subi	r30, 0x0A	; 10
    1fae:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb0:	71 83       	std	Z+1, r23	; 0x01
    1fb2:	60 83       	st	Z, r22
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	82 0f       	add	r24, r18
    1fb8:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <iteration_adc_accum_table>
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1fc2:	80 32       	cpi	r24, 0x20	; 32
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	30 f0       	brcs	.+12     	; 0x1fd4 <measure_process+0xdc>
    1fc8:	4f 97       	sbiw	r24, 0x1f	; 31
    1fca:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <motor_adc+0x1>
    1fce:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <motor_adc>
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <measure_process+0xe4>
    1fd4:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <motor_adc+0x1>
    1fd8:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <motor_adc>
    1fdc:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <iteration_adc_motor_table>
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	eb 52       	subi	r30, 0x2B	; 43
    1fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    1fea:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <motor_adc>
    1fee:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <motor_adc+0x1>
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <adc_read>
    1ffc:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <s_o_t_adc+0x1>
    2000:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <s_o_t_adc>
    2004:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <calibration_value>
    2008:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <calibration_value+0x1>
    200c:	28 17       	cp	r18, r24
    200e:	39 07       	cpc	r19, r25
    2010:	30 f0       	brcs	.+12     	; 0x201e <measure_process+0x126>
    2012:	28 1b       	sub	r18, r24
    2014:	39 0b       	sbc	r19, r25
    2016:	30 93 bb 03 	sts	0x03BB, r19	; 0x8003bb <s_o_t_adc+0x1>
    201a:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <s_o_t_adc>
    201e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <s_o_t_iteration_adc_table>
    2022:	c0 91 ba 03 	lds	r28, 0x03BA	; 0x8003ba <s_o_t_adc>
    2026:	d0 91 bb 03 	lds	r29, 0x03BB	; 0x8003bb <s_o_t_adc+0x1>
    202a:	e8 2f       	mov	r30, r24
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	e3 54       	subi	r30, 0x43	; 67
    2034:	fc 4f       	sbci	r31, 0xFC	; 252
    2036:	c0 83       	st	Z, r28
    2038:	d1 83       	std	Z+1, r29	; 0x01
    203a:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <iteration_adc_motor_table>
    203e:	9f 5f       	subi	r25, 0xFF	; 255
    2040:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <iteration_adc_motor_table>
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <s_o_t_iteration_adc_table>
    204a:	64 e1       	ldi	r22, 0x14	; 20
    204c:	86 ef       	ldi	r24, 0xF6	; 246
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <filtered_value>
    2054:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <filtered_accum_adc_val+0x1>
    2058:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <filtered_accum_adc_val>
    205c:	6f e0       	ldi	r22, 0x0F	; 15
    205e:	85 ed       	ldi	r24, 0xD5	; 213
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <filtered_value>
    2066:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <motor_filter_value+0x1>
    206a:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <motor_filter_value>
    206e:	6a e0       	ldi	r22, 0x0A	; 10
    2070:	8d eb       	ldi	r24, 0xBD	; 189
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <filtered_value>
    2078:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <s_o_t_filter_value+0x1>
    207c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <s_o_t_filter_value>
    2080:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <debug_msg_counter>
    2084:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <debug_msg_counter+0x1>
    2088:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <debug_msg_counter+0x2>
    208c:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <debug_msg_counter+0x3>
    2090:	20 e5       	ldi	r18, 0x50	; 80
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <__udivmodsi4>
    209c:	67 2b       	or	r22, r23
    209e:	68 2b       	or	r22, r24
    20a0:	69 2b       	or	r22, r25
    20a2:	e1 f4       	brne	.+56     	; 0x20dc <measure_process+0x1e4>
    20a4:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <motor_adc+0x1>
    20a8:	8f 93       	push	r24
    20aa:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <motor_adc>
    20ae:	8f 93       	push	r24
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <accum_adc+0x1>
    20b8:	8f 93       	push	r24
    20ba:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <accum_adc>
    20be:	8f 93       	push	r24
    20c0:	8a e9       	ldi	r24, 0x9A	; 154
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	9f 93       	push	r25
    20c6:	8f 93       	push	r24
    20c8:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    20cc:	8d b7       	in	r24, 0x3d	; 61
    20ce:	9e b7       	in	r25, 0x3e	; 62
    20d0:	08 96       	adiw	r24, 0x08	; 8
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	9e bf       	out	0x3e, r25	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	8d bf       	out	0x3d, r24	; 61
    20dc:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <debug_msg_counter>
    20e0:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <debug_msg_counter+0x1>
    20e4:	a0 91 b2 03 	lds	r26, 0x03B2	; 0x8003b2 <debug_msg_counter+0x2>
    20e8:	b0 91 b3 03 	lds	r27, 0x03B3	; 0x8003b3 <debug_msg_counter+0x3>
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	a1 1d       	adc	r26, r1
    20f0:	b1 1d       	adc	r27, r1
    20f2:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <debug_msg_counter>
    20f6:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <debug_msg_counter+0x1>
    20fa:	a0 93 b2 03 	sts	0x03B2, r26	; 0x8003b2 <debug_msg_counter+0x2>
    20fe:	b0 93 b3 03 	sts	0x03B3, r27	; 0x8003b3 <debug_msg_counter+0x3>
    2102:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <iteration_adc_accum_table>
    2106:	84 31       	cpi	r24, 0x14	; 20
    2108:	11 f4       	brne	.+4      	; 0x210e <measure_process+0x216>
    210a:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <iteration_adc_accum_table>
    210e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <s_o_t_iteration_adc_table>
    2112:	8a 30       	cpi	r24, 0x0A	; 10
    2114:	11 f4       	brne	.+4      	; 0x211a <measure_process+0x222>
    2116:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <s_o_t_iteration_adc_table>
    211a:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <iteration_adc_motor_table>
    211e:	8f 30       	cpi	r24, 0x0F	; 15
    2120:	11 f4       	brne	.+4      	; 0x2126 <measure_process+0x22e>
    2122:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <iteration_adc_motor_table>
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	df 90       	pop	r13
    2130:	cf 90       	pop	r12
    2132:	08 95       	ret

00002134 <measure_get_servo_calibration>:
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	c0 90 ee 05 	lds	r12, 0x05EE	; 0x8005ee <mktime+0x2>
    2144:	d0 90 ef 05 	lds	r13, 0x05EF	; 0x8005ef <mktime+0x3>
    2148:	e0 90 f0 05 	lds	r14, 0x05F0	; 0x8005f0 <mktime+0x4>
    214c:	f0 90 f1 05 	lds	r15, 0x05F1	; 0x8005f1 <mktime+0x5>
    2150:	8c ed       	ldi	r24, 0xDC	; 220
    2152:	c8 0e       	add	r12, r24
    2154:	85 e0       	ldi	r24, 0x05	; 5
    2156:	d8 1e       	adc	r13, r24
    2158:	e1 1c       	adc	r14, r1
    215a:	f1 1c       	adc	r15, r1
    215c:	cc ee       	ldi	r28, 0xEC	; 236
    215e:	d5 e0       	ldi	r29, 0x05	; 5
    2160:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <measure_process>
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	ac 81       	ldd	r26, Y+4	; 0x04
    216a:	bd 81       	ldd	r27, Y+5	; 0x05
    216c:	c8 16       	cp	r12, r24
    216e:	d9 06       	cpc	r13, r25
    2170:	ea 06       	cpc	r14, r26
    2172:	fb 06       	cpc	r15, r27
    2174:	a8 f7       	brcc	.-22     	; 0x2160 <measure_get_servo_calibration+0x2c>
    2176:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <s_o_t_filter_value>
    217a:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <s_o_t_filter_value+0x1>
    217e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <calibration_value>
    2182:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <calibration_value+0x1>
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	8a ec       	ldi	r24, 0xCA	; 202
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

000021ac <measure_get_filtered_value>:
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	18 f4       	brcc	.+6      	; 0x21b6 <measure_get_filtered_value+0xa>
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	40 f0       	brcs	.+16     	; 0x21c4 <measure_get_filtered_value+0x18>
    21b4:	0c c0       	rjmp	.+24     	; 0x21ce <measure_get_filtered_value+0x22>
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	79 f4       	brne	.+30     	; 0x21d8 <measure_get_filtered_value+0x2c>
    21ba:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <filtered_accum_adc_val>
    21be:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <filtered_accum_adc_val+0x1>
    21c2:	08 95       	ret
    21c4:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <motor_filter_value>
    21c8:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <motor_filter_value+0x1>
    21cc:	08 95       	ret
    21ce:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <s_o_t_filter_value>
    21d2:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <s_o_t_filter_value+0x1>
    21d6:	08 95       	ret
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	08 95       	ret

000021de <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	6a 01       	movw	r12, r20
    21e8:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	18 f4       	brcc	.+6      	; 0x21f4 <measure_get_current+0x16>
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	50 f0       	brcs	.+20     	; 0x2206 <measure_get_current+0x28>
    21f2:	10 c0       	rjmp	.+32     	; 0x2214 <measure_get_current+0x36>
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	a9 f4       	brne	.+42     	; 0x2222 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    21f8:	60 91 1e 04 	lds	r22, 0x041E	; 0x80041e <filtered_accum_adc_val>
    21fc:	70 91 1f 04 	lds	r23, 0x041F	; 0x80041f <filtered_accum_adc_val+0x1>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    2206:	60 91 f3 03 	lds	r22, 0x03F3	; 0x8003f3 <motor_filter_value>
    220a:	70 91 f4 03 	lds	r23, 0x03F4	; 0x8003f4 <motor_filter_value+0x1>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2212:	0a c0       	rjmp	.+20     	; 0x2228 <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    2214:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <s_o_t_filter_value>
    2218:	70 91 d2 03 	lds	r23, 0x03D2	; 0x8003d2 <s_o_t_filter_value+0x1>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
		break;
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <measure_get_current+0x4a>
		
		default:
		adc = 0;
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    2228:	0e 94 b0 19 	call	0x3360	; 0x3360 <__floatunsisf>
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5a e3       	ldi	r21, 0x3A	; 58
    2234:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 ea       	ldi	r20, 0xA0	; 160
    223e:	50 e4       	ldi	r21, 0x40	; 64
    2240:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    2244:	a7 01       	movw	r20, r14
    2246:	96 01       	movw	r18, r12
    2248:	0e 94 08 19 	call	0x3210	; 0x3210 <__divsf3>
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	08 95       	ret

00002256 <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	59 f0       	breq	.+22     	; 0x227c <mem_save_data+0x26>
    2266:	28 f4       	brcc	.+10     	; 0x2272 <mem_save_data+0x1c>
    2268:	88 23       	and	r24, r24
    226a:	91 f0       	breq	.+36     	; 0x2290 <mem_save_data+0x3a>
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	19 f1       	breq	.+70     	; 0x22b6 <mem_save_data+0x60>
    2270:	30 c0       	rjmp	.+96     	; 0x22d2 <mem_save_data+0x7c>
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	29 f1       	breq	.+74     	; 0x22c0 <mem_save_data+0x6a>
    2276:	84 30       	cpi	r24, 0x04	; 4
    2278:	31 f0       	breq	.+12     	; 0x2286 <mem_save_data+0x30>
    227a:	2b c0       	rjmp	.+86     	; 0x22d2 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    227c:	22 e0       	ldi	r18, 0x02	; 2
    227e:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2280:	84 e0       	ldi	r24, 0x04	; 4
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	21 c0       	rjmp	.+66     	; 0x22c8 <mem_save_data+0x72>
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
		#if DARK_MENU
		len = sizeof(menuSaveParameters);
    2286:	24 e0       	ldi	r18, 0x04	; 4
    2288:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    228a:	88 e0       	ldi	r24, 0x08	; 8
    228c:	90 e0       	ldi	r25, 0x00	; 0
		#if DARK_MENU
		len = sizeof(menuSaveParameters);
		#else
		len = 0;
		#endif
        break;
    228e:	1c c0       	rjmp	.+56     	; 0x22c8 <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2290:	68 94       	set
    2292:	ee 24       	eor	r14, r14
    2294:	e1 f8       	bld	r14, 1
    2296:	f1 2c       	mov	r15, r1
    2298:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    229a:	f8 01       	movw	r30, r16
    229c:	61 91       	ld	r22, Z+
    229e:	8f 01       	movw	r16, r30
    22a0:	8c 2f       	mov	r24, r28
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 2e 0c 	call	0x185c	; 0x185c <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22a8:	cf 5f       	subi	r28, 0xFF	; 255
    22aa:	8c 2f       	mov	r24, r28
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	8e 15       	cp	r24, r14
    22b0:	9f 05       	cpc	r25, r15
    22b2:	9c f3       	brlt	.-26     	; 0x229a <mem_save_data+0x44>
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    22b6:	22 e0       	ldi	r18, 0x02	; 2
    22b8:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    22c0:	22 e0       	ldi	r18, 0x02	; 2
    22c2:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    22c4:	86 e0       	ldi	r24, 0x06	; 6
    22c6:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22c8:	c8 2f       	mov	r28, r24
    22ca:	79 01       	movw	r14, r18
    22cc:	e8 0e       	add	r14, r24
    22ce:	f9 1e       	adc	r15, r25
    22d0:	e4 cf       	rjmp	.-56     	; 0x229a <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	08 95       	ret

000022de <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	59 f0       	breq	.+22     	; 0x2304 <mem_read_data+0x26>
    22ee:	28 f4       	brcc	.+10     	; 0x22fa <mem_read_data+0x1c>
    22f0:	88 23       	and	r24, r24
    22f2:	91 f0       	breq	.+36     	; 0x2318 <mem_read_data+0x3a>
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	19 f1       	breq	.+70     	; 0x233e <mem_read_data+0x60>
    22f8:	30 c0       	rjmp	.+96     	; 0x235a <mem_read_data+0x7c>
    22fa:	83 30       	cpi	r24, 0x03	; 3
    22fc:	29 f1       	breq	.+74     	; 0x2348 <mem_read_data+0x6a>
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	31 f0       	breq	.+12     	; 0x230e <mem_read_data+0x30>
    2302:	2b c0       	rjmp	.+86     	; 0x235a <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2308:	84 e0       	ldi	r24, 0x04	; 4
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	21 c0       	rjmp	.+66     	; 0x2350 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(menuSaveParameters);
    230e:	24 e0       	ldi	r18, 0x04	; 4
    2310:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2312:	88 e0       	ldi	r24, 0x08	; 8
    2314:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(menuSaveParameters);
        break;
    2316:	1c c0       	rjmp	.+56     	; 0x2350 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2318:	68 94       	set
    231a:	ee 24       	eor	r14, r14
    231c:	e1 f8       	bld	r14, 1
    231e:	f1 2c       	mov	r15, r1
    2320:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    2322:	8c 2f       	mov	r24, r28
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_read>
    232a:	f8 01       	movw	r30, r16
    232c:	81 93       	st	Z+, r24
    232e:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2330:	cf 5f       	subi	r28, 0xFF	; 255
    2332:	8c 2f       	mov	r24, r28
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	8e 15       	cp	r24, r14
    2338:	9f 05       	cpc	r25, r15
    233a:	9c f3       	brlt	.-26     	; 0x2322 <mem_read_data+0x44>
    233c:	0e c0       	rjmp	.+28     	; 0x235a <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    233e:	22 e0       	ldi	r18, 0x02	; 2
    2340:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    2348:	22 e0       	ldi	r18, 0x02	; 2
    234a:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    234c:	86 e0       	ldi	r24, 0x06	; 6
    234e:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2350:	c8 2f       	mov	r28, r24
    2352:	79 01       	movw	r14, r18
    2354:	e8 0e       	add	r14, r24
    2356:	f9 1e       	adc	r15, r25
    2358:	e4 cf       	rjmp	.-56     	; 0x2322 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	08 95       	ret

00002366 <servo_set_pwm_val>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    2366:	81 11       	cpse	r24, r1
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <servo_set_pwm_val+0xe>
    236a:	8c e6       	ldi	r24, 0x6C	; 108
    236c:	97 e0       	ldi	r25, 0x07	; 7
    236e:	9b bd       	out	0x2b, r25	; 43
    2370:	8a bd       	out	0x2a, r24	; 42
    2372:	08 95       	ret
    2374:	82 33       	cpi	r24, 0x32	; 50
    2376:	90 f4       	brcc	.+36     	; 0x239c <servo_set_pwm_val+0x36>
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	22 27       	eor	r18, r18
    237c:	33 27       	eor	r19, r19
    237e:	28 1b       	sub	r18, r24
    2380:	39 0b       	sbc	r19, r25
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	22 0f       	add	r18, r18
    2388:	33 1f       	adc	r19, r19
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	82 0f       	add	r24, r18
    2390:	93 1f       	adc	r25, r19
    2392:	88 5f       	subi	r24, 0xF8	; 248
    2394:	98 4f       	sbci	r25, 0xF8	; 248
    2396:	9b bd       	out	0x2b, r25	; 43
    2398:	8a bd       	out	0x2a, r24	; 42
    239a:	08 95       	ret
    239c:	84 36       	cpi	r24, 0x64	; 100
    239e:	68 f4       	brcc	.+26     	; 0x23ba <servo_set_pwm_val+0x54>
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	c2 97       	sbiw	r24, 0x32	; 50
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	2a ea       	ldi	r18, 0xAA	; 170
    23ae:	35 e0       	ldi	r19, 0x05	; 5
    23b0:	a9 01       	movw	r20, r18
    23b2:	48 1b       	sub	r20, r24
    23b4:	59 0b       	sbc	r21, r25
    23b6:	5b bd       	out	0x2b, r21	; 43
    23b8:	4a bd       	out	0x2a, r20	; 42
    23ba:	08 95       	ret

000023bc <servo_error>:
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
    23c2:	96 98       	cbi	0x12, 6	; 18
    23c4:	85 e0       	ldi	r24, 0x05	; 5
    23c6:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <servoD>
    23ca:	08 95       	ret

000023cc <servo_init>:
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	2f e1       	ldi	r18, 0x1F	; 31
    23d2:	3e e4       	ldi	r19, 0x4E	; 78
    23d4:	37 bd       	out	0x27, r19	; 39
    23d6:	26 bd       	out	0x26, r18	; 38
    23d8:	81 b3       	in	r24, 0x11	; 17
    23da:	80 63       	ori	r24, 0x30	; 48
    23dc:	81 bb       	out	0x11, r24	; 17
    23de:	19 bc       	out	0x29, r1	; 41
    23e0:	18 bc       	out	0x28, r1	; 40
    23e2:	1b bc       	out	0x2b, r1	; 43
    23e4:	1a bc       	out	0x2a, r1	; 42
    23e6:	8f b5       	in	r24, 0x2f	; 47
    23e8:	82 60       	ori	r24, 0x02	; 2
    23ea:	8f bd       	out	0x2f, r24	; 47
    23ec:	8e b5       	in	r24, 0x2e	; 46
    23ee:	88 61       	ori	r24, 0x18	; 24
    23f0:	8e bd       	out	0x2e, r24	; 46
    23f2:	8f b5       	in	r24, 0x2f	; 47
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	8f bd       	out	0x2f, r24	; 47
    23f8:	8e b5       	in	r24, 0x2e	; 46
    23fa:	82 60       	ori	r24, 0x02	; 2
    23fc:	8e bd       	out	0x2e, r24	; 46
    23fe:	3b bd       	out	0x2b, r19	; 43
    2400:	2a bd       	out	0x2a, r18	; 42
    2402:	96 98       	cbi	0x12, 6	; 18
    2404:	ce ed       	ldi	r28, 0xDE	; 222
    2406:	d5 e0       	ldi	r29, 0x05	; 5
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	88 83       	st	Y, r24
    240c:	1b 82       	std	Y+3, r1	; 0x03
    240e:	82 ee       	ldi	r24, 0xE2	; 226
    2410:	95 e0       	ldi	r25, 0x05	; 5
    2412:	0e 94 7e 17 	call	0x2efc	; 0x2efc <evTime_init>
    2416:	19 86       	std	Y+9, r1	; 0x09
    2418:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <try_count>
    241c:	80 ef       	ldi	r24, 0xF0	; 240
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	9f 93       	push	r25
    2422:	8f 93       	push	r24
    2424:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <servo_is_open>:
    2432:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <servoD>
    2436:	92 50       	subi	r25, 0x02	; 2
    2438:	21 e0       	ldi	r18, 0x01	; 1
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	92 30       	cpi	r25, 0x02	; 2
    243e:	10 f0       	brcs	.+4      	; 0x2444 <servo_is_open+0x12>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	c9 01       	movw	r24, r18
    2446:	08 95       	ret

00002448 <servo_delayed_open>:
    2448:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <servoD>
    244c:	91 30       	cpi	r25, 0x01	; 1
    244e:	a1 f4       	brne	.+40     	; 0x2478 <servo_delayed_open+0x30>
    2450:	ee ed       	ldi	r30, 0xDE	; 222
    2452:	f5 e0       	ldi	r31, 0x05	; 5
    2454:	93 e0       	ldi	r25, 0x03	; 3
    2456:	90 83       	st	Z, r25
    2458:	83 83       	std	Z+3, r24	; 0x03
    245a:	1f 92       	push	r1
    245c:	8f 93       	push	r24
    245e:	8d ef       	ldi	r24, 0xFD	; 253
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	9f 93       	push	r25
    2464:	8f 93       	push	r24
    2466:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	08 95       	ret
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	08 95       	ret

0000247e <servo_enable_try>:
    247e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <servoD>
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	98 0f       	add	r25, r24
    2486:	92 30       	cpi	r25, 0x02	; 2
    2488:	28 f4       	brcc	.+10     	; 0x2494 <servo_enable_try+0x16>
    248a:	ee ed       	ldi	r30, 0xDE	; 222
    248c:	f5 e0       	ldi	r31, 0x05	; 5
    248e:	81 83       	std	Z+1, r24	; 0x01
    2490:	84 e0       	ldi	r24, 0x04	; 4
    2492:	80 83       	st	Z, r24
    2494:	08 95       	ret

00002496 <servo_get_try_cnt>:
    2496:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <servoD+0x9>
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	08 95       	ret

0000249e <servo_close>:
    249e:	0e 94 19 12 	call	0x2432	; 0x2432 <servo_is_open>
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	c1 f0       	breq	.+48     	; 0x24d6 <servo_close+0x38>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
    24ac:	ee ed       	ldi	r30, 0xDE	; 222
    24ae:	f5 e0       	ldi	r31, 0x05	; 5
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	80 83       	st	Z, r24
    24b4:	13 82       	std	Z+3, r1	; 0x03
    24b6:	1f 92       	push	r1
    24b8:	1f 92       	push	r1
    24ba:	84 e1       	ldi	r24, 0x14	; 20
    24bc:	93 e0       	ldi	r25, 0x03	; 3
    24be:	9f 93       	push	r25
    24c0:	8f 93       	push	r24
    24c2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    24c6:	96 98       	cbi	0x12, 6	; 18
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	08 95       	ret
    24d6:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <servoD>
    24da:	24 30       	cpi	r18, 0x04	; 4
    24dc:	21 f4       	brne	.+8      	; 0x24e6 <servo_close+0x48>
    24de:	0e 94 74 12 	call	0x24e8	; 0x24e8 <servo_exit_try>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	08 95       	ret

000024e8 <servo_exit_try>:
    24e8:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <servoD+0x1>
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	29 f4       	brne	.+10     	; 0x24fa <servo_exit_try+0x12>
    24f0:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <servoD>
    24f4:	0e 94 4f 12 	call	0x249e	; 0x249e <servo_close>
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <servo_exit_try+0x24>
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	71 f4       	brne	.+28     	; 0x251a <servo_exit_try+0x32>
    24fe:	ee ed       	ldi	r30, 0xDE	; 222
    2500:	f5 e0       	ldi	r31, 0x05	; 5
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	80 83       	st	Z, r24
    2506:	83 81       	ldd	r24, Z+3	; 0x03
    2508:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_open>
    250c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <try_count>
    2510:	ee ed       	ldi	r30, 0xDE	; 222
    2512:	f5 e0       	ldi	r31, 0x05	; 5
    2514:	81 85       	ldd	r24, Z+9	; 0x09
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	81 87       	std	Z+9, r24	; 0x09
    251a:	08 95       	ret

0000251c <servo_open>:
    251c:	cf 93       	push	r28
    251e:	c8 2f       	mov	r28, r24
    2520:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <servoD>
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	98 0f       	add	r25, r24
    2528:	93 30       	cpi	r25, 0x03	; 3
    252a:	c0 f4       	brcc	.+48     	; 0x255c <servo_open+0x40>
    252c:	ee ed       	ldi	r30, 0xDE	; 222
    252e:	f5 e0       	ldi	r31, 0x05	; 5
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	80 83       	st	Z, r24
    2534:	c3 83       	std	Z+3, r28	; 0x03
    2536:	8c 2f       	mov	r24, r28
    2538:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
    253c:	1f 92       	push	r1
    253e:	cf 93       	push	r28
    2540:	85 e2       	ldi	r24, 0x25	; 37
    2542:	93 e0       	ldi	r25, 0x03	; 3
    2544:	9f 93       	push	r25
    2546:	8f 93       	push	r24
    2548:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    254c:	96 9a       	sbi	0x12, 6	; 18
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	09 c0       	rjmp	.+18     	; 0x256e <servo_open+0x52>
    255c:	84 30       	cpi	r24, 0x04	; 4
    255e:	29 f4       	brne	.+10     	; 0x256a <servo_open+0x4e>
    2560:	0e 94 74 12 	call	0x24e8	; 0x24e8 <servo_exit_try>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 c0       	rjmp	.+4      	; 0x256e <servo_open+0x52>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    2578:	4b e4       	ldi	r20, 0x4B	; 75
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	82 e3       	ldi	r24, 0x32	; 50
    2582:	94 e0       	ldi	r25, 0x04	; 4
    2584:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <evTime_process_period>
    2588:	89 2b       	or	r24, r25
    258a:	09 f4       	brne	.+2      	; 0x258e <servo_process+0x1c>
    258c:	b6 c0       	rjmp	.+364    	; 0x26fa <servo_process+0x188>
	{
		switch(servoD.state)
    258e:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <servoD>
    2592:	84 30       	cpi	r24, 0x04	; 4
    2594:	a1 f0       	breq	.+40     	; 0x25be <servo_process+0x4c>
    2596:	30 f4       	brcc	.+12     	; 0x25a4 <servo_process+0x32>
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	59 f0       	breq	.+22     	; 0x25b2 <servo_process+0x40>
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	09 f4       	brne	.+2      	; 0x25a2 <servo_process+0x30>
    25a0:	61 c0       	rjmp	.+194    	; 0x2664 <servo_process+0xf2>
    25a2:	9b c0       	rjmp	.+310    	; 0x26da <servo_process+0x168>
    25a4:	85 30       	cpi	r24, 0x05	; 5
    25a6:	09 f4       	brne	.+2      	; 0x25aa <servo_process+0x38>
    25a8:	77 c0       	rjmp	.+238    	; 0x2698 <servo_process+0x126>
    25aa:	86 30       	cpi	r24, 0x06	; 6
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <servo_process+0x3e>
    25ae:	91 c0       	rjmp	.+290    	; 0x26d2 <servo_process+0x160>
    25b0:	94 c0       	rjmp	.+296    	; 0x26da <servo_process+0x168>
		{
			case SERVO_OPEN:
			servoD.value = value;
    25b2:	c0 93 e1 05 	sts	0x05E1, r28	; 0x8005e1 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    25b6:	8c 2f       	mov	r24, r28
    25b8:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
			break;
    25bc:	8e c0       	rjmp	.+284    	; 0x26da <servo_process+0x168>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    25be:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <try_count>
    25c2:	81 11       	cpse	r24, r1
    25c4:	13 c0       	rjmp	.+38     	; 0x25ec <servo_process+0x7a>
	{
		evTime_start(&timeout, 100);
    25c6:	44 e6       	ldi	r20, 0x64	; 100
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	8d e2       	ldi	r24, 0x2D	; 45
    25d0:	94 e0       	ldi	r25, 0x04	; 4
    25d2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
		try_count++;
    25d6:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <try_count>
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    25e0:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <servoD+0x3>
    25e4:	89 0f       	add	r24, r25
    25e6:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
    25ea:	28 c0       	rjmp	.+80     	; 0x263c <servo_process+0xca>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    25ec:	81 50       	subi	r24, 0x01	; 1
    25ee:	89 30       	cpi	r24, 0x09	; 9
    25f0:	c8 f4       	brcc	.+50     	; 0x2624 <servo_process+0xb2>
	{
		if (evTime_check(&timeout) == 1)
    25f2:	8d e2       	ldi	r24, 0x2D	; 45
    25f4:	94 e0       	ldi	r25, 0x04	; 4
    25f6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f9 f4       	brne	.+62     	; 0x263c <servo_process+0xca>
		{
			evTime_start(&timeout, 100);
    25fe:	44 e6       	ldi	r20, 0x64	; 100
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	8d e2       	ldi	r24, 0x2D	; 45
    2608:	94 e0       	ldi	r25, 0x04	; 4
    260a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
			try_count++;
    260e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <try_count>
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <try_count>
			servo_set_pwm_val(servoD.value + try_count);
    2618:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <servoD+0x3>
    261c:	89 0f       	add	r24, r25
    261e:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
    2622:	0c c0       	rjmp	.+24     	; 0x263c <servo_process+0xca>
		}
	}
	else
	{
		try_count = 0;
    2624:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <try_count>
		servo_set_pwm_val(servoD.value);
    2628:	ce ed       	ldi	r28, 0xDE	; 222
    262a:	d5 e0       	ldi	r29, 0x05	; 5
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	0e 94 b3 11 	call	0x2366	; 0x2366 <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	88 83       	st	Y, r24
		servoD.try_cnt++;
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    263c:	20 91 e1 05 	lds	r18, 0x05E1	; 0x8005e1 <servoD+0x3>
    2640:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <try_count>
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	82 0f       	add	r24, r18
    2648:	91 1d       	adc	r25, r1
    264a:	9f 93       	push	r25
    264c:	8f 93       	push	r24
    264e:	87 e3       	ldi	r24, 0x37	; 55
    2650:	93 e0       	ldi	r25, 0x03	; 3
    2652:	9f 93       	push	r25
    2654:	8f 93       	push	r24
    2656:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	3b c0       	rjmp	.+118    	; 0x26da <servo_process+0x168>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2664:	88 e2       	ldi	r24, 0x28	; 40
    2666:	94 e0       	ldi	r25, 0x04	; 4
    2668:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <evTime_is_stated>
    266c:	89 2b       	or	r24, r25
    266e:	59 f0       	breq	.+22     	; 0x2686 <servo_process+0x114>
	{
		if (evTime_check(&timeout) == 1)
    2670:	88 e2       	ldi	r24, 0x28	; 40
    2672:	94 e0       	ldi	r25, 0x04	; 4
    2674:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	79 f5       	brne	.+94     	; 0x26da <servo_process+0x168>
		{
			servoD.state = SERVO_OPEN;
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <servoD>
			LED_SERVO_ON;
    2682:	96 9a       	sbi	0x12, 6	; 18
    2684:	2a c0       	rjmp	.+84     	; 0x26da <servo_process+0x168>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2686:	40 ed       	ldi	r20, 0xD0	; 208
    2688:	57 e0       	ldi	r21, 0x07	; 7
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	88 e2       	ldi	r24, 0x28	; 40
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
    2696:	21 c0       	rjmp	.+66     	; 0x26da <servo_process+0x168>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    2698:	83 e2       	ldi	r24, 0x23	; 35
    269a:	94 e0       	ldi	r25, 0x04	; 4
    269c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <evTime_is_stated>
    26a0:	89 2b       	or	r24, r25
    26a2:	71 f0       	breq	.+28     	; 0x26c0 <servo_process+0x14e>
	{
		if (evTime_check(&timeout) == 1)
    26a4:	83 e2       	ldi	r24, 0x23	; 35
    26a6:	94 e0       	ldi	r25, 0x04	; 4
    26a8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	a9 f4       	brne	.+42     	; 0x26da <servo_process+0x168>
		{
			servoD.state = SERVO_ERROR;
    26b0:	86 e0       	ldi	r24, 0x06	; 6
    26b2:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    26b6:	8f e1       	ldi	r24, 0x1F	; 31
    26b8:	9e e4       	ldi	r25, 0x4E	; 78
    26ba:	9b bd       	out	0x2b, r25	; 43
    26bc:	8a bd       	out	0x2a, r24	; 42
    26be:	0d c0       	rjmp	.+26     	; 0x26da <servo_process+0x168>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    26c0:	40 ed       	ldi	r20, 0xD0	; 208
    26c2:	57 e0       	ldi	r21, 0x07	; 7
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	83 e2       	ldi	r24, 0x23	; 35
    26ca:	94 e0       	ldi	r25, 0x04	; 4
    26cc:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <servo_process+0x168>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    26d2:	8f e1       	ldi	r24, 0x1F	; 31
    26d4:	9e e4       	ldi	r25, 0x4E	; 78
    26d6:	9b bd       	out	0x2b, r25	; 43
    26d8:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    26da:	82 ee       	ldi	r24, 0xE2	; 226
    26dc:	95 e0       	ldi	r25, 0x05	; 5
    26de:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	51 f4       	brne	.+20     	; 0x26fa <servo_process+0x188>
		{
			servoD.try_cnt = 0;
    26e6:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    26ea:	85 e4       	ldi	r24, 0x45	; 69
    26ec:	93 e0       	ldi	r25, 0x03	; 3
    26ee:	9f 93       	push	r25
    26f0:	8f 93       	push	r24
    26f2:	0e 94 0a 02 	call	0x414	; 0x414 <debug_msg>
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
		}
	}
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2700:	ed e7       	ldi	r30, 0x7D	; 125
    2702:	f5 e0       	ldi	r31, 0x05	; 5
    2704:	16 86       	std	Z+14, r1	; 0x0e
    2706:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    2708:	12 86       	std	Z+10, r1	; 0x0a
    270a:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    270c:	14 86       	std	Z+12, r1	; 0x0c
    270e:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    2710:	e0 e5       	ldi	r30, 0x50	; 80
    2712:	f5 e0       	ldi	r31, 0x05	; 5
    2714:	16 86       	std	Z+14, r1	; 0x0e
    2716:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    2718:	12 86       	std	Z+10, r1	; 0x0a
    271a:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    271c:	14 86       	std	Z+12, r1	; 0x0c
    271e:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    2720:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button3+0xc>
    2724:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button3+0xb>
	
	button5.timer_callback = 0;
    2728:	ee e2       	ldi	r30, 0x2E	; 46
    272a:	f5 e0       	ldi	r31, 0x05	; 5
    272c:	16 86       	std	Z+14, r1	; 0x0e
    272e:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    2730:	14 86       	std	Z+12, r1	; 0x0c
    2732:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    2734:	12 86       	std	Z+10, r1	; 0x0a
    2736:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    2738:	ee e6       	ldi	r30, 0x6E	; 110
    273a:	f5 e0       	ldi	r31, 0x05	; 5
    273c:	16 86       	std	Z+14, r1	; 0x0e
    273e:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    2740:	14 86       	std	Z+12, r1	; 0x0c
    2742:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    2744:	12 86       	std	Z+10, r1	; 0x0a
    2746:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    2748:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <button7+0xc>
    274c:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <button7+0xb>
	
	button8.fall_callback = 0;
    2750:	eb e9       	ldi	r30, 0x9B	; 155
    2752:	f5 e0       	ldi	r31, 0x05	; 5
    2754:	14 86       	std	Z+12, r1	; 0x0c
    2756:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    2758:	16 86       	std	Z+14, r1	; 0x0e
    275a:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    275c:	12 86       	std	Z+10, r1	; 0x0a
    275e:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    2760:	e0 e1       	ldi	r30, 0x10	; 16
    2762:	f5 e0       	ldi	r31, 0x05	; 5
    2764:	14 86       	std	Z+12, r1	; 0x0c
    2766:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    2768:	16 86       	std	Z+14, r1	; 0x0e
    276a:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    276c:	12 86       	std	Z+10, r1	; 0x0a
    276e:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2770:	ef e1       	ldi	r30, 0x1F	; 31
    2772:	f5 e0       	ldi	r31, 0x05	; 5
    2774:	14 86       	std	Z+12, r1	; 0x0c
    2776:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    2778:	16 86       	std	Z+14, r1	; 0x0e
    277a:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    277c:	12 86       	std	Z+10, r1	; 0x0a
    277e:	11 86       	std	Z+9, r1	; 0x09
    2780:	08 95       	ret

00002782 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2782:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	49 f0       	breq	.+18     	; 0x279c <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    278a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    278e:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2792:	98 60       	ori	r25, 0x08	; 8
    2794:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2798:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    279c:	08 95       	ret

0000279e <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    279e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    27a2:	82 30       	cpi	r24, 0x02	; 2
    27a4:	49 f0       	breq	.+18     	; 0x27b8 <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    27a6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    27aa:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    27ae:	80 68       	ori	r24, 0x80	; 128
    27b0:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    27b4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    27b8:	08 95       	ret

000027ba <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    27ba:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    27be:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    27c2:	92 60       	ori	r25, 0x02	; 2
    27c4:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    27c8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    27cc:	08 95       	ret

000027ce <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    27ce:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    27d2:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    27d6:	99 7f       	andi	r25, 0xF9	; 249
    27d8:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    27dc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	counter_very_fast_motor_sub = 0;
    27e0:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <counter_very_fast_motor_sub>
    27e4:	08 95       	ret

000027e6 <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    27e6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    27ea:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    27ee:	80 62       	ori	r24, 0x20	; 32
    27f0:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    27f4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    27f8:	08 95       	ret

000027fa <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    27fa:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    27fe:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2802:	8f 79       	andi	r24, 0x9F	; 159
    2804:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2808:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	counter_very_fast_motor_sub = 0;
    280c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <counter_very_fast_motor_sub>
    2810:	08 95       	ret

00002812 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2812:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2816:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    281a:	90 62       	ori	r25, 0x20	; 32
    281c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2820:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    2824:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    2828:	8b 30       	cpi	r24, 0x0B	; 11
    282a:	18 f0       	brcs	.+6      	; 0x2832 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    282c:	81 50       	subi	r24, 0x01	; 1
    282e:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2832:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    2844:	08 95       	ret

00002846 <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    2846:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    284a:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    284e:	90 62       	ori	r25, 0x20	; 32
    2850:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2854:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    2858:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    285c:	83 36       	cpi	r24, 0x63	; 99
    285e:	18 f4       	brcc	.+6      	; 0x2866 <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    2860:	8f 5f       	subi	r24, 0xFF	; 255
    2862:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2866:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    2878:	08 95       	ret

0000287a <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    287a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    287e:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2882:	90 62       	ori	r25, 0x20	; 32
    2884:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2888:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	if (motor_value > 10)
    288c:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <motor_value>
    2890:	8b 30       	cpi	r24, 0x0B	; 11
    2892:	18 f0       	brcs	.+6      	; 0x289a <button_motor_sub_fall_cb+0x20>
		motor_value--;
    2894:	81 50       	subi	r24, 0x01	; 1
    2896:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    289a:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_get_state>
    28aa:	02 97       	sbiw	r24, 0x02	; 2
    28ac:	29 f4       	brne	.+10     	; 0x28b8 <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    28b6:	04 c0       	rjmp	.+8      	; 0x28c0 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
	state_measure_volt++;
    28c0:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <state_measure_volt>
	if (state_measure_volt == 2)
    28ca:	82 30       	cpi	r24, 0x02	; 2
    28cc:	19 f4       	brne	.+6      	; 0x28d4 <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28ce:	66 e0       	ldi	r22, 0x06	; 6
    28d0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    28d4:	08 95       	ret

000028d6 <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    28d6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    28da:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    28de:	90 62       	ori	r25, 0x20	; 32
    28e0:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    28e4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	if (motor_value < 99)
    28e8:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <motor_value>
    28ec:	83 36       	cpi	r24, 0x63	; 99
    28ee:	18 f4       	brcc	.+6      	; 0x28f6 <button_motor_add_fall_cb+0x20>
		motor_value++;
    28f0:	8f 5f       	subi	r24, 0xFF	; 255
    28f2:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    28f6:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_get_state>
    2906:	02 97       	sbiw	r24, 0x02	; 2
    2908:	29 f4       	brne	.+10     	; 0x2914 <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    290a:	61 e0       	ldi	r22, 0x01	; 1
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    2912:	04 c0       	rjmp	.+8      	; 0x291c <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
	state_measure_volt++;
    291c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    2920:	8f 5f       	subi	r24, 0xFF	; 255
    2922:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <state_measure_volt>
	if (state_measure_volt == 2)
    2926:	82 30       	cpi	r24, 0x02	; 2
    2928:	19 f4       	brne	.+6      	; 0x2930 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    292a:	66 e0       	ldi	r22, 0x06	; 6
    292c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    2930:	08 95       	ret

00002932 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    2932:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    2936:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    293a:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    293e:	97 7e       	andi	r25, 0xE7	; 231
    2940:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2944:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	counter_very_fast_motor_sub = 0;
    2948:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    294c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    2950:	88 23       	and	r24, r24
    2952:	19 f0       	breq	.+6      	; 0x295a <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    2954:	81 50       	subi	r24, 0x01	; 1
    2956:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_get_state>
    2960:	02 97       	sbiw	r24, 0x02	; 2
    2962:	29 f4       	brne	.+10     	; 0x296e <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	82 e0       	ldi	r24, 0x02	; 2
    2968:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    296c:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    2976:	08 95       	ret

00002978 <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    2978:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    297c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2980:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2984:	8f 77       	andi	r24, 0x7F	; 127
    2986:	9e 7f       	andi	r25, 0xFE	; 254
    2988:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    298c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	counter_very_fast_motor_sub = 0;
    2990:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    2994:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <state_measure_volt>
    2998:	88 23       	and	r24, r24
    299a:	19 f0       	breq	.+6      	; 0x29a2 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    299c:	81 50       	subi	r24, 0x01	; 1
    299e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <disp_get_state>
    29a8:	02 97       	sbiw	r24, 0x02	; 2
    29aa:	29 f4       	brne	.+10     	; 0x29b6 <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    29ac:	61 e0       	ldi	r22, 0x01	; 1
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    29b4:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
    29be:	08 95       	ret

000029c0 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    29c0:	ea ee       	ldi	r30, 0xEA	; 234
    29c2:	f5 e0       	ldi	r31, 0x05	; 5
    29c4:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <motor_value>
    29c8:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    29ca:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    29ce:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    29d0:	bf 01       	movw	r22, r30
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	0e 94 2b 11 	call	0x2256	; 0x2256 <mem_save_data>
    29d8:	08 95       	ret

000029da <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    29da:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    29de:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    29e2:	90 62       	ori	r25, 0x20	; 32
    29e4:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    29e8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	if (motor_value < 10)
    29ec:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <motor_value>
    29f0:	8a 30       	cpi	r24, 0x0A	; 10
    29f2:	38 f4       	brcc	.+14     	; 0x2a02 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    29f4:	8a e0       	ldi	r24, 0x0A	; 10
    29f6:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    29fa:	6a e0       	ldi	r22, 0x0A	; 10
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	}
	sys_save_display();
    2a02:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <sys_save_display>
	if(!dcmotor_is_on())
    2a06:	0e 94 6d 07 	call	0xeda	; 0xeda <dcmotor_is_on>
    2a0a:	89 2b       	or	r24, r25
    2a0c:	39 f4       	brne	.+14     	; 0x2a1c <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    2a0e:	0e 94 90 07 	call	0xf20	; 0xf20 <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    2a12:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    2a16:	0e 94 24 12 	call	0x2448	; 0x2448 <servo_delayed_open>
    2a1a:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    2a1c:	0e 94 78 07 	call	0xef0	; 0xef0 <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    2a20:	0e 94 4f 12 	call	0x249e	; 0x249e <servo_close>
    2a24:	08 95       	ret

00002a26 <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    2a26:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2a2a:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2a2e:	90 62       	ori	r25, 0x20	; 32
    2a30:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2a34:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
	if (servo_vibro_value < 10)
    2a38:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    2a3c:	8a 30       	cpi	r24, 0x0A	; 10
    2a3e:	38 f4       	brcc	.+14     	; 0x2a4e <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    2a40:	8a e0       	ldi	r24, 0x0A	; 10
    2a42:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    2a46:	6a e0       	ldi	r22, 0x0A	; 10
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    2a4e:	0e 94 19 12 	call	0x2432	; 0x2432 <servo_is_open>
    2a52:	89 2b       	or	r24, r25
    2a54:	19 f0       	breq	.+6      	; 0x2a5c <button_on_off_pwm+0x36>
    2a56:	0e 94 4f 12 	call	0x249e	; 0x249e <servo_close>
    2a5a:	08 95       	ret
	else servo_open(servo_vibro_value);
    2a5c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <servo_vibro_value>
    2a60:	0e 94 8e 12 	call	0x251c	; 0x251c <servo_open>
    2a64:	08 95       	ret

00002a66 <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    2a66:	8c ed       	ldi	r24, 0xDC	; 220
    2a68:	95 e1       	ldi	r25, 0x15	; 21
    2a6a:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <button4+0xa>
    2a6e:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
	disp_off_segments();
    2a7a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <disp_off_segments>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2a7e:	68 ee       	ldi	r22, 0xE8	; 232
    2a80:	75 e0       	ldi	r23, 0x05	; 5
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	0e 94 6f 11 	call	0x22de	; 0x22de <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2a88:	80 91 e9 05 	lds	r24, 0x05E9	; 0x8005e9 <mem_last_save+0x1>
    2a8c:	96 ef       	ldi	r25, 0xF6	; 246
    2a8e:	98 0f       	add	r25, r24
    2a90:	9a 35       	cpi	r25, 0x5A	; 90
    2a92:	10 f4       	brcc	.+4      	; 0x2a98 <init_system+0x32>
		servo_vibro_value = mem_last_save.second_disp_val;
    2a94:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2a98:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <mem_last_save>
    2a9c:	96 ef       	ldi	r25, 0xF6	; 246
    2a9e:	98 0f       	add	r25, r24
    2aa0:	9a 35       	cpi	r25, 0x5A	; 90
    2aa2:	10 f4       	brcc	.+4      	; 0x2aa8 <init_system+0x42>
		motor_value = mem_last_save.first_disp_val;
    2aa4:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <motor_value>
    2aa8:	08 95       	ret

00002aaa <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2aaa:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2aae:	42 e0       	ldi	r20, 0x02	; 2
    2ab0:	68 ee       	ldi	r22, 0xE8	; 232
    2ab2:	73 e0       	ldi	r23, 0x03	; 3
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 8d 0b 	call	0x171a	; 0x171a <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2abc:	0e 94 53 07 	call	0xea6	; 0xea6 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <servo_init>
	#endif
	error_init();
    2ac6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <error_init>
	init_measure();
    2aca:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <init_measure>
	init_buzzer();
    2ace:	0e 94 53 05 	call	0xaa6	; 0xaa6 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2ada:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2ade:	ed e7       	ldi	r30, 0x7D	; 125
    2ae0:	f5 e0       	ldi	r31, 0x05	; 5
    2ae2:	81 ec       	ldi	r24, 0xC1	; 193
    2ae4:	93 e1       	ldi	r25, 0x13	; 19
    2ae6:	96 87       	std	Z+14, r25	; 0x0e
    2ae8:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2aea:	8d e3       	ldi	r24, 0x3D	; 61
    2aec:	94 e1       	ldi	r25, 0x14	; 20
    2aee:	94 87       	std	Z+12, r25	; 0x0c
    2af0:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2af2:	89 e9       	ldi	r24, 0x99	; 153
    2af4:	94 e1       	ldi	r25, 0x14	; 20
    2af6:	92 87       	std	Z+10, r25	; 0x0a
    2af8:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2afa:	e0 e5       	ldi	r30, 0x50	; 80
    2afc:	f5 e0       	ldi	r31, 0x05	; 5
    2afe:	8f ec       	ldi	r24, 0xCF	; 207
    2b00:	93 e1       	ldi	r25, 0x13	; 19
    2b02:	96 87       	std	Z+14, r25	; 0x0e
    2b04:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2b06:	8b e6       	ldi	r24, 0x6B	; 107
    2b08:	94 e1       	ldi	r25, 0x14	; 20
    2b0a:	94 87       	std	Z+12, r25	; 0x0c
    2b0c:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2b0e:	8c eb       	ldi	r24, 0xBC	; 188
    2b10:	94 e1       	ldi	r25, 0x14	; 20
    2b12:	92 87       	std	Z+10, r25	; 0x0a
    2b14:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2b16:	8d ee       	ldi	r24, 0xED	; 237
    2b18:	94 e1       	ldi	r25, 0x14	; 20
    2b1a:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <button3+0xc>
    2b1e:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2b22:	ee e2       	ldi	r30, 0x2E	; 46
    2b24:	f5 e0       	ldi	r31, 0x05	; 5
    2b26:	8d ed       	ldi	r24, 0xDD	; 221
    2b28:	93 e1       	ldi	r25, 0x13	; 19
    2b2a:	96 87       	std	Z+14, r25	; 0x0e
    2b2c:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2b2e:	87 ee       	ldi	r24, 0xE7	; 231
    2b30:	93 e1       	ldi	r25, 0x13	; 19
    2b32:	92 87       	std	Z+10, r25	; 0x0a
    2b34:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2b36:	89 e0       	ldi	r24, 0x09	; 9
    2b38:	94 e1       	ldi	r25, 0x14	; 20
    2b3a:	94 87       	std	Z+12, r25	; 0x0c
    2b3c:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2b3e:	ee e6       	ldi	r30, 0x6E	; 110
    2b40:	f5 e0       	ldi	r31, 0x05	; 5
    2b42:	83 ef       	ldi	r24, 0xF3	; 243
    2b44:	93 e1       	ldi	r25, 0x13	; 19
    2b46:	96 87       	std	Z+14, r25	; 0x0e
    2b48:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2b4a:	8d ef       	ldi	r24, 0xFD	; 253
    2b4c:	93 e1       	ldi	r25, 0x13	; 19
    2b4e:	92 87       	std	Z+10, r25	; 0x0a
    2b50:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2b52:	83 e2       	ldi	r24, 0x23	; 35
    2b54:	94 e1       	ldi	r25, 0x14	; 20
    2b56:	94 87       	std	Z+12, r25	; 0x0c
    2b58:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2b5a:	83 e1       	ldi	r24, 0x13	; 19
    2b5c:	95 e1       	ldi	r25, 0x15	; 21
    2b5e:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <button7+0xc>
    2b62:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2b66:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2b70:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
    2b7a:	08 95       	ret

00002b7c <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2b7c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <state_measure_volt>
	dcmotorpwm_deinit();
    2b80:	0e 94 67 07 	call	0xece	; 0xece <dcmotorpwm_deinit>
	off_button();
    2b84:	0e 94 80 13 	call	0x2700	; 0x2700 <off_button>
	error_deinit();
    2b88:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	#if DARK_MENU
	init_menu();
    2b8c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <init_menu>
	#endif /* DARK_MENU */
	servo_close();
    2b90:	0e 94 4f 12 	call	0x249e	; 0x249e <servo_close>
	#endif /* CONFIG_DEVICE_SIEWNIK */
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2b94:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <system_events+0x1>
    2b98:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2ba4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2ba8:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2bac:	8e 7f       	andi	r24, 0xFE	; 254
    2bae:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2bb2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    2bb6:	08 95       	ret

00002bb8 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2bb8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2bbc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2bc0:	80 ff       	sbrs	r24, 0
    2bc2:	03 c0       	rjmp	.+6      	; 0x2bca <button4_toggle_system+0x12>
	{
		off_system();
    2bc4:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <off_system>
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2bca:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <on_system>
	}
	ON_BUZZ_SIGNAL;
    2bce:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2bd2:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2bd6:	90 62       	ori	r25, 0x20	; 32
    2bd8:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2bdc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
    2be0:	08 95       	ret

00002be2 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2be2:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    2be6:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    2bea:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    2bee:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    2bf2:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <disp_fast_timer.2109>
    2bf6:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <disp_fast_timer.2109+0x1>
    2bfa:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <disp_fast_timer.2109+0x2>
    2bfe:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <disp_fast_timer.2109+0x3>
    2c02:	84 17       	cp	r24, r20
    2c04:	95 07       	cpc	r25, r21
    2c06:	a6 07       	cpc	r26, r22
    2c08:	b7 07       	cpc	r27, r23
    2c0a:	08 f0       	brcs	.+2      	; 0x2c0e <disp_fast_process+0x2c>
    2c0c:	9c c0       	rjmp	.+312    	; 0x2d46 <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2c0e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2c12:	85 ff       	sbrs	r24, 5
    2c14:	1d c0       	rjmp	.+58     	; 0x2c50 <disp_fast_process+0x6e>
    2c16:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2c1a:	63 36       	cpi	r22, 0x63	; 99
    2c1c:	c8 f4       	brcc	.+50     	; 0x2c50 <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2c1e:	6f 5f       	subi	r22, 0xFF	; 255
    2c20:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <servo_vibro_value>
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2c2a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <counter_very_fast_servo_add>
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2c34:	8f 30       	cpi	r24, 0x0F	; 15
    2c36:	60 f0       	brcs	.+24     	; 0x2c50 <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2c38:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2c3c:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2c40:	8f 7d       	andi	r24, 0xDF	; 223
    2c42:	80 64       	ori	r24, 0x40	; 64
    2c44:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2c48:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
				counter_very_fast_servo_add = 0;
    2c4c:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2c50:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2c54:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2c58:	91 ff       	sbrs	r25, 1
    2c5a:	1d c0       	rjmp	.+58     	; 0x2c96 <disp_fast_process+0xb4>
    2c5c:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2c60:	66 23       	and	r22, r22
    2c62:	c9 f0       	breq	.+50     	; 0x2c96 <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2c64:	61 50       	subi	r22, 0x01	; 1
    2c66:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <servo_vibro_value>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    2c70:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <counter_very_fast_servo_sub>
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2c7a:	8f 30       	cpi	r24, 0x0F	; 15
    2c7c:	60 f0       	brcs	.+24     	; 0x2c96 <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2c7e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2c82:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2c86:	9d 7f       	andi	r25, 0xFD	; 253
    2c88:	94 60       	ori	r25, 0x04	; 4
    2c8a:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2c8e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
				counter_very_fast_servo_sub = 0;
    2c92:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2c96:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2c9a:	87 ff       	sbrs	r24, 7
    2c9c:	1d c0       	rjmp	.+58     	; 0x2cd8 <disp_fast_process+0xf6>
    2c9e:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    2ca2:	63 36       	cpi	r22, 0x63	; 99
    2ca4:	c8 f4       	brcc	.+50     	; 0x2cd8 <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2ca6:	6f 5f       	subi	r22, 0xFF	; 255
    2ca8:	60 93 ce 04 	sts	0x04CE, r22	; 0x8004ce <motor_value>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			counter_very_fast_motor_add++;
    2cb2:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <counter_very_fast_motor_add>
    2cb6:	8f 5f       	subi	r24, 0xFF	; 255
    2cb8:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2cbc:	8f 30       	cpi	r24, 0x0F	; 15
    2cbe:	60 f0       	brcs	.+24     	; 0x2cd8 <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2cc0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2cc4:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2cc8:	8f 77       	andi	r24, 0x7F	; 127
    2cca:	91 60       	ori	r25, 0x01	; 1
    2ccc:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2cd0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
				counter_very_fast_motor_add = 0;
    2cd4:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2cd8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2cdc:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2ce0:	93 ff       	sbrs	r25, 3
    2ce2:	1d c0       	rjmp	.+58     	; 0x2d1e <disp_fast_process+0x13c>
    2ce4:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    2ce8:	6b 30       	cpi	r22, 0x0B	; 11
    2cea:	c8 f0       	brcs	.+50     	; 0x2d1e <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2cec:	61 50       	subi	r22, 0x01	; 1
    2cee:	60 93 ce 04 	sts	0x04CE, r22	; 0x8004ce <motor_value>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			counter_very_fast_motor_sub++;
    2cf8:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <counter_very_fast_motor_sub>
    2cfc:	8f 5f       	subi	r24, 0xFF	; 255
    2cfe:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2d02:	8f 30       	cpi	r24, 0x0F	; 15
    2d04:	60 f0       	brcs	.+24     	; 0x2d1e <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2d06:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2d0a:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2d0e:	97 7f       	andi	r25, 0xF7	; 247
    2d10:	90 61       	ori	r25, 0x10	; 16
    2d12:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <system_events+0x1>
    2d16:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <system_events>
				counter_very_fast_motor_sub = 0;
    2d1a:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2d1e:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <disp_fast_timer.2109>
    2d22:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <disp_fast_timer.2109+0x1>
    2d26:	a0 91 3a 04 	lds	r26, 0x043A	; 0x80043a <disp_fast_timer.2109+0x2>
    2d2a:	b0 91 3b 04 	lds	r27, 0x043B	; 0x80043b <disp_fast_timer.2109+0x3>
    2d2e:	80 5b       	subi	r24, 0xB0	; 176
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	af 4f       	sbci	r26, 0xFF	; 255
    2d34:	bf 4f       	sbci	r27, 0xFF	; 255
    2d36:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <disp_fast_timer.2109>
    2d3a:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <disp_fast_timer.2109+0x1>
    2d3e:	a0 93 3a 04 	sts	0x043A, r26	; 0x80043a <disp_fast_timer.2109+0x2>
    2d42:	b0 93 3b 04 	sts	0x043B, r27	; 0x80043b <disp_fast_timer.2109+0x3>
    2d46:	08 95       	ret

00002d48 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2d48:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <mktime+0x2>
    2d4c:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <mktime+0x3>
    2d50:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <mktime+0x4>
    2d54:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <mktime+0x5>
    2d58:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <disp_very_fast_timer>
    2d5c:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <disp_very_fast_timer+0x1>
    2d60:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <disp_very_fast_timer+0x2>
    2d64:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <disp_very_fast_timer+0x3>
    2d68:	84 17       	cp	r24, r20
    2d6a:	95 07       	cpc	r25, r21
    2d6c:	a6 07       	cpc	r26, r22
    2d6e:	b7 07       	cpc	r27, r23
    2d70:	08 f0       	brcs	.+2      	; 0x2d74 <disp_very_fast_process+0x2c>
    2d72:	51 c0       	rjmp	.+162    	; 0x2e16 <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2d74:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2d78:	63 36       	cpi	r22, 0x63	; 99
    2d7a:	50 f4       	brcc	.+20     	; 0x2d90 <disp_very_fast_process+0x48>
    2d7c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2d80:	86 ff       	sbrs	r24, 6
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d84:	6f 5f       	subi	r22, 0xFF	; 255
    2d86:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <servo_vibro_value>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2d90:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <servo_vibro_value>
    2d94:	6b 30       	cpi	r22, 0x0B	; 11
    2d96:	60 f0       	brcs	.+24     	; 0x2db0 <disp_very_fast_process+0x68>
    2d98:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2d9c:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2da0:	92 ff       	sbrs	r25, 2
    2da2:	06 c0       	rjmp	.+12     	; 0x2db0 <disp_very_fast_process+0x68>
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			if (servo_vibro_value > 10)
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2da4:	61 50       	subi	r22, 0x01	; 1
    2da6:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <servo_vibro_value>
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2db0:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    2db4:	63 36       	cpi	r22, 0x63	; 99
    2db6:	60 f4       	brcc	.+24     	; 0x2dd0 <disp_very_fast_process+0x88>
    2db8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2dbc:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2dc0:	90 ff       	sbrs	r25, 0
    2dc2:	06 c0       	rjmp	.+12     	; 0x2dd0 <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2dc4:	6f 5f       	subi	r22, 0xFF	; 255
    2dc6:	60 93 ce 04 	sts	0x04CE, r22	; 0x8004ce <motor_value>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2dd0:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <motor_value>
    2dd4:	6b 30       	cpi	r22, 0x0B	; 11
    2dd6:	60 f0       	brcs	.+24     	; 0x2df0 <disp_very_fast_process+0xa8>
    2dd8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <system_events>
    2ddc:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <system_events+0x1>
    2de0:	94 ff       	sbrs	r25, 4
    2de2:	06 c0       	rjmp	.+12     	; 0x2df0 <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2de4:	61 50       	subi	r22, 0x01	; 1
    2de6:	60 93 ce 04 	sts	0x04CE, r22	; 0x8004ce <motor_value>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	0e 94 c3 09 	call	0x1386	; 0x1386 <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2df0:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <disp_very_fast_timer>
    2df4:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <disp_very_fast_timer+0x1>
    2df8:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <disp_very_fast_timer+0x2>
    2dfc:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <disp_very_fast_timer+0x3>
    2e00:	4e 96       	adiw	r24, 0x1e	; 30
    2e02:	a1 1d       	adc	r26, r1
    2e04:	b1 1d       	adc	r27, r1
    2e06:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <disp_very_fast_timer>
    2e0a:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <disp_very_fast_timer+0x1>
    2e0e:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <disp_very_fast_timer+0x2>
    2e12:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <disp_very_fast_timer+0x3>
    2e16:	08 95       	ret

00002e18 <system_error>:
}


void system_error(void)
{
	off_button();
    2e18:	0e 94 80 13 	call	0x2700	; 0x2700 <off_button>
    2e1c:	08 95       	ret

00002e1e <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2e1e:	1f 92       	push	r1
    2e20:	0f 92       	push	r0
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	0f 92       	push	r0
    2e26:	11 24       	eor	r1, r1
    2e28:	2f 93       	push	r18
    2e2a:	3f 93       	push	r19
    2e2c:	4f 93       	push	r20
    2e2e:	5f 93       	push	r21
    2e30:	6f 93       	push	r22
    2e32:	7f 93       	push	r23
    2e34:	8f 93       	push	r24
    2e36:	9f 93       	push	r25
    2e38:	af 93       	push	r26
    2e3a:	bf 93       	push	r27
    2e3c:	ef 93       	push	r30
    2e3e:	ff 93       	push	r31
    2e40:	ec ee       	ldi	r30, 0xEC	; 236
    2e42:	f5 e0       	ldi	r31, 0x05	; 5
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	c2 96       	adiw	r24, 0x32	; 50
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	80 83       	st	Z, r24
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	88 3e       	cpi	r24, 0xE8	; 232
    2e54:	93 40       	sbci	r25, 0x03	; 3
    2e56:	88 f0       	brcs	.+34     	; 0x2e7a <__vector_10+0x5c>
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	a4 81       	ldd	r26, Z+4	; 0x04
    2e5e:	b5 81       	ldd	r27, Z+5	; 0x05
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	a1 1d       	adc	r26, r1
    2e64:	b1 1d       	adc	r27, r1
    2e66:	82 83       	std	Z+2, r24	; 0x02
    2e68:	93 83       	std	Z+3, r25	; 0x03
    2e6a:	a4 83       	std	Z+4, r26	; 0x04
    2e6c:	b5 83       	std	Z+5, r27	; 0x05
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	88 5e       	subi	r24, 0xE8	; 232
    2e74:	93 40       	sbci	r25, 0x03	; 3
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
    2e7a:	85 e4       	ldi	r24, 0x45	; 69
    2e7c:	94 e0       	ldi	r25, 0x04	; 4
    2e7e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <display_process>
    2e82:	ff 91       	pop	r31
    2e84:	ef 91       	pop	r30
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	7f 91       	pop	r23
    2e90:	6f 91       	pop	r22
    2e92:	5f 91       	pop	r21
    2e94:	4f 91       	pop	r20
    2e96:	3f 91       	pop	r19
    2e98:	2f 91       	pop	r18
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <timer0_init>:
    2ea4:	93 b7       	in	r25, 0x33	; 51
    2ea6:	98 60       	ori	r25, 0x08	; 8
    2ea8:	93 bf       	out	0x33, r25	; 51
    2eaa:	6c bf       	out	0x3c, r22	; 60
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	99 f0       	breq	.+38     	; 0x2ed6 <timer0_init+0x32>
    2eb0:	28 f4       	brcc	.+10     	; 0x2ebc <timer0_init+0x18>
    2eb2:	88 23       	and	r24, r24
    2eb4:	41 f0       	breq	.+16     	; 0x2ec6 <timer0_init+0x22>
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	51 f0       	breq	.+20     	; 0x2ece <timer0_init+0x2a>
    2eba:	19 c0       	rjmp	.+50     	; 0x2eee <timer0_init+0x4a>
    2ebc:	83 30       	cpi	r24, 0x03	; 3
    2ebe:	79 f0       	breq	.+30     	; 0x2ede <timer0_init+0x3a>
    2ec0:	84 30       	cpi	r24, 0x04	; 4
    2ec2:	89 f0       	breq	.+34     	; 0x2ee6 <timer0_init+0x42>
    2ec4:	14 c0       	rjmp	.+40     	; 0x2eee <timer0_init+0x4a>
    2ec6:	83 b7       	in	r24, 0x33	; 51
    2ec8:	81 60       	ori	r24, 0x01	; 1
    2eca:	83 bf       	out	0x33, r24	; 51
    2ecc:	13 c0       	rjmp	.+38     	; 0x2ef4 <timer0_init+0x50>
    2ece:	83 b7       	in	r24, 0x33	; 51
    2ed0:	82 60       	ori	r24, 0x02	; 2
    2ed2:	83 bf       	out	0x33, r24	; 51
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <timer0_init+0x50>
    2ed6:	83 b7       	in	r24, 0x33	; 51
    2ed8:	83 60       	ori	r24, 0x03	; 3
    2eda:	83 bf       	out	0x33, r24	; 51
    2edc:	0b c0       	rjmp	.+22     	; 0x2ef4 <timer0_init+0x50>
    2ede:	83 b7       	in	r24, 0x33	; 51
    2ee0:	84 60       	ori	r24, 0x04	; 4
    2ee2:	83 bf       	out	0x33, r24	; 51
    2ee4:	07 c0       	rjmp	.+14     	; 0x2ef4 <timer0_init+0x50>
    2ee6:	83 b7       	in	r24, 0x33	; 51
    2ee8:	85 60       	ori	r24, 0x05	; 5
    2eea:	83 bf       	out	0x33, r24	; 51
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <timer0_init+0x50>
    2eee:	83 b7       	in	r24, 0x33	; 51
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	83 bf       	out	0x33, r24	; 51
    2ef4:	89 b7       	in	r24, 0x39	; 57
    2ef6:	82 60       	ori	r24, 0x02	; 2
    2ef8:	89 bf       	out	0x39, r24	; 57
    2efa:	08 95       	ret

00002efc <evTime_init>:
    2efc:	23 e0       	ldi	r18, 0x03	; 3
    2efe:	fc 01       	movw	r30, r24
    2f00:	24 83       	std	Z+4, r18	; 0x04
    2f02:	10 82       	st	Z, r1
    2f04:	11 82       	std	Z+1, r1	; 0x01
    2f06:	12 82       	std	Z+2, r1	; 0x02
    2f08:	13 82       	std	Z+3, r1	; 0x03
    2f0a:	08 95       	ret

00002f0c <evTime_start>:
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	21 e0       	ldi	r18, 0x01	; 1
    2f12:	fc 01       	movw	r30, r24
    2f14:	24 83       	std	Z+4, r18	; 0x04
    2f16:	00 91 ee 05 	lds	r16, 0x05EE	; 0x8005ee <mktime+0x2>
    2f1a:	10 91 ef 05 	lds	r17, 0x05EF	; 0x8005ef <mktime+0x3>
    2f1e:	20 91 f0 05 	lds	r18, 0x05F0	; 0x8005f0 <mktime+0x4>
    2f22:	30 91 f1 05 	lds	r19, 0x05F1	; 0x8005f1 <mktime+0x5>
    2f26:	40 0f       	add	r20, r16
    2f28:	51 1f       	adc	r21, r17
    2f2a:	62 1f       	adc	r22, r18
    2f2c:	73 1f       	adc	r23, r19
    2f2e:	40 83       	st	Z, r20
    2f30:	51 83       	std	Z+1, r21	; 0x01
    2f32:	62 83       	std	Z+2, r22	; 0x02
    2f34:	73 83       	std	Z+3, r23	; 0x03
    2f36:	1f 91       	pop	r17
    2f38:	0f 91       	pop	r16
    2f3a:	08 95       	ret

00002f3c <evTime_is_stated>:
    2f3c:	21 e0       	ldi	r18, 0x01	; 1
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	fc 01       	movw	r30, r24
    2f42:	84 81       	ldd	r24, Z+4	; 0x04
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	11 f0       	breq	.+4      	; 0x2f4c <evTime_is_stated+0x10>
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	c9 01       	movw	r24, r18
    2f4e:	08 95       	ret

00002f50 <evTime_check>:

int evTime_check(evTime * evt)
{
    2f50:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2f52:	84 81       	ldd	r24, Z+4	; 0x04
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	b1 f4       	brne	.+44     	; 0x2f84 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2f58:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <mktime+0x2>
    2f5c:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <mktime+0x3>
    2f60:	a0 91 f0 05 	lds	r26, 0x05F0	; 0x8005f0 <mktime+0x4>
    2f64:	b0 91 f1 05 	lds	r27, 0x05F1	; 0x8005f1 <mktime+0x5>
    2f68:	40 81       	ld	r20, Z
    2f6a:	51 81       	ldd	r21, Z+1	; 0x01
    2f6c:	62 81       	ldd	r22, Z+2	; 0x02
    2f6e:	73 81       	ldd	r23, Z+3	; 0x03
    2f70:	48 17       	cp	r20, r24
    2f72:	59 07       	cpc	r21, r25
    2f74:	6a 07       	cpc	r22, r26
    2f76:	7b 07       	cpc	r23, r27
    2f78:	40 f4       	brcc	.+16     	; 0x2f8a <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2f8e:	08 95       	ret

00002f90 <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2f90:	21 e0       	ldi	r18, 0x01	; 1
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	fc 01       	movw	r30, r24
    2f96:	84 81       	ldd	r24, Z+4	; 0x04
    2f98:	83 30       	cpi	r24, 0x03	; 3
    2f9a:	11 f0       	breq	.+4      	; 0x2fa0 <evTime_off+0x10>
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
}
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	08 95       	ret

00002fa4 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2fa4:	cf 92       	push	r12
    2fa6:	df 92       	push	r13
    2fa8:	ef 92       	push	r14
    2faa:	ff 92       	push	r15
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	ec 01       	movw	r28, r24
    2fb6:	6a 01       	movw	r12, r20
    2fb8:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	81 11       	cpse	r24, r1
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2fc0:	83 e0       	ldi	r24, 0x03	; 3
    2fc2:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2fc4:	18 82       	st	Y, r1
    2fc6:	19 82       	std	Y+1, r1	; 0x01
    2fc8:	1a 82       	std	Y+2, r1	; 0x02
    2fca:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2fcc:	ce 01       	movw	r24, r28
    2fce:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <evTime_check>
    2fd2:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	31 f4       	brne	.+12     	; 0x2fe4 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2fd8:	b7 01       	movw	r22, r14
    2fda:	a6 01       	movw	r20, r12
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
		return 1;
    2fe2:	0d c0       	rjmp	.+26     	; 0x2ffe <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	83 30       	cpi	r24, 0x03	; 3
    2fe8:	41 f4       	brne	.+16     	; 0x2ffa <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2fea:	b7 01       	movw	r22, r14
    2fec:	a6 01       	movw	r20, r12
    2fee:	ce 01       	movw	r24, r28
    2ff0:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <evTime_start>
	}
	return 0;
    2ff4:	00 e0       	ldi	r16, 0x00	; 0
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <evTime_process_period+0x5a>
    2ffa:	00 e0       	ldi	r16, 0x00	; 0
    2ffc:	10 e0       	ldi	r17, 0x00	; 0
}
    2ffe:	c8 01       	movw	r24, r16
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	08 95       	ret

00003012 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    3012:	1f 92       	push	r1
    3014:	0f 92       	push	r0
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	0f 92       	push	r0
    301a:	11 24       	eor	r1, r1
    301c:	2f 93       	push	r18
    301e:	3f 93       	push	r19
    3020:	4f 93       	push	r20
    3022:	5f 93       	push	r21
    3024:	8f 93       	push	r24
    3026:	9f 93       	push	r25
    3028:	ef 93       	push	r30
    302a:	ff 93       	push	r31
    302c:	2b b1       	in	r18, 0x0b	; 11
    302e:	3c b1       	in	r19, 0x0c	; 12
    3030:	28 71       	andi	r18, 0x18	; 24
    3032:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <UART_RxHead>
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	01 96       	adiw	r24, 0x01	; 1
    303a:	40 91 48 04 	lds	r20, 0x0448	; 0x800448 <UART_RxTail>
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	84 17       	cp	r24, r20
    3042:	95 07       	cpc	r25, r21
    3044:	39 f0       	breq	.+14     	; 0x3054 <__vector_13+0x42>
    3046:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <UART_RxHead>
    304a:	fc 01       	movw	r30, r24
    304c:	e4 5b       	subi	r30, 0xB4	; 180
    304e:	fb 4f       	sbci	r31, 0xFB	; 251
    3050:	30 83       	st	Z, r19
    3052:	01 c0       	rjmp	.+2      	; 0x3056 <__vector_13+0x44>
    3054:	22 e0       	ldi	r18, 0x02	; 2
    3056:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <UART_LastRxError>
    305a:	ff 91       	pop	r31
    305c:	ef 91       	pop	r30
    305e:	9f 91       	pop	r25
    3060:	8f 91       	pop	r24
    3062:	5f 91       	pop	r21
    3064:	4f 91       	pop	r20
    3066:	3f 91       	pop	r19
    3068:	2f 91       	pop	r18
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0
    3070:	1f 90       	pop	r1
    3072:	18 95       	reti

00003074 <__vector_14>:
    3074:	1f 92       	push	r1
    3076:	0f 92       	push	r0
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	0f 92       	push	r0
    307c:	11 24       	eor	r1, r1
    307e:	8f 93       	push	r24
    3080:	9f 93       	push	r25
    3082:	ef 93       	push	r30
    3084:	ff 93       	push	r31
    3086:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <UART_TxHead>
    308a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <UART_TxTail>
    308e:	98 17       	cp	r25, r24
    3090:	71 f0       	breq	.+28     	; 0x30ae <__vector_14+0x3a>
    3092:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <UART_TxTail>
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	8f 77       	andi	r24, 0x7F	; 127
    309c:	99 27       	eor	r25, r25
    309e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <UART_TxTail>
    30a2:	fc 01       	movw	r30, r24
    30a4:	e4 5b       	subi	r30, 0xB4	; 180
    30a6:	fb 4f       	sbci	r31, 0xFB	; 251
    30a8:	80 81       	ld	r24, Z
    30aa:	8c b9       	out	0x0c, r24	; 12
    30ac:	01 c0       	rjmp	.+2      	; 0x30b0 <__vector_14+0x3c>
    30ae:	55 98       	cbi	0x0a, 5	; 10
    30b0:	ff 91       	pop	r31
    30b2:	ef 91       	pop	r30
    30b4:	9f 91       	pop	r25
    30b6:	8f 91       	pop	r24
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <uart0_init>:
    30c2:	f8 94       	cli
    30c4:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <UART_TxHead>
    30c8:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <UART_TxTail>
    30cc:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <UART_RxHead>
    30d0:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <UART_RxTail>
    30d4:	78 94       	sei
    30d6:	99 23       	and	r25, r25
    30d8:	1c f4       	brge	.+6      	; 0x30e0 <uart0_init+0x1e>
    30da:	22 e0       	ldi	r18, 0x02	; 2
    30dc:	2b b9       	out	0x0b, r18	; 11
    30de:	9f 77       	andi	r25, 0x7F	; 127
    30e0:	90 bd       	out	0x20, r25	; 32
    30e2:	89 b9       	out	0x09, r24	; 9
    30e4:	88 e9       	ldi	r24, 0x98	; 152
    30e6:	8a b9       	out	0x0a, r24	; 10
    30e8:	86 e8       	ldi	r24, 0x86	; 134
    30ea:	80 bd       	out	0x20, r24	; 32
    30ec:	08 95       	ret

000030ee <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    30ee:	40 91 4b 04 	lds	r20, 0x044B	; 0x80044b <UART_TxHead>
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	4f 5f       	subi	r20, 0xFF	; 255
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	4f 77       	andi	r20, 0x7F	; 127
    30fa:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    30fc:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <UART_TxTail>
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	42 17       	cp	r20, r18
    3104:	53 07       	cpc	r21, r19
    3106:	d1 f3       	breq	.-12     	; 0x30fc <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3108:	fa 01       	movw	r30, r20
    310a:	e4 5b       	subi	r30, 0xB4	; 180
    310c:	fb 4f       	sbci	r31, 0xFB	; 251
    310e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    3110:	40 93 4b 04 	sts	0x044B, r20	; 0x80044b <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    3114:	55 9a       	sbi	0x0a, 5	; 10
    3116:	08 95       	ret

00003118 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	ec 01       	movw	r28, r24
	while (*s) {
    311e:	88 81       	ld	r24, Y
    3120:	88 23       	and	r24, r24
    3122:	31 f0       	breq	.+12     	; 0x3130 <uart0_puts+0x18>
    3124:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    3126:	0e 94 77 18 	call	0x30ee	; 0x30ee <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    312a:	89 91       	ld	r24, Y+
    312c:	81 11       	cpse	r24, r1
    312e:	fb cf       	rjmp	.-10     	; 0x3126 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	08 95       	ret

00003136 <__subsf3>:
    3136:	50 58       	subi	r21, 0x80	; 128

00003138 <__addsf3>:
    3138:	bb 27       	eor	r27, r27
    313a:	aa 27       	eor	r26, r26
    313c:	0e 94 b3 18 	call	0x3166	; 0x3166 <__addsf3x>
    3140:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_round>
    3144:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__fp_pscA>
    3148:	38 f0       	brcs	.+14     	; 0x3158 <__addsf3+0x20>
    314a:	0e 94 21 1a 	call	0x3442	; 0x3442 <__fp_pscB>
    314e:	20 f0       	brcs	.+8      	; 0x3158 <__addsf3+0x20>
    3150:	39 f4       	brne	.+14     	; 0x3160 <__addsf3+0x28>
    3152:	9f 3f       	cpi	r25, 0xFF	; 255
    3154:	19 f4       	brne	.+6      	; 0x315c <__addsf3+0x24>
    3156:	26 f4       	brtc	.+8      	; 0x3160 <__addsf3+0x28>
    3158:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>
    315c:	0e f4       	brtc	.+2      	; 0x3160 <__addsf3+0x28>
    315e:	e0 95       	com	r30
    3160:	e7 fb       	bst	r30, 7
    3162:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>

00003166 <__addsf3x>:
    3166:	e9 2f       	mov	r30, r25
    3168:	0e 94 39 1a 	call	0x3472	; 0x3472 <__fp_split3>
    316c:	58 f3       	brcs	.-42     	; 0x3144 <__addsf3+0xc>
    316e:	ba 17       	cp	r27, r26
    3170:	62 07       	cpc	r22, r18
    3172:	73 07       	cpc	r23, r19
    3174:	84 07       	cpc	r24, r20
    3176:	95 07       	cpc	r25, r21
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__addsf3x+0x1c>
    317a:	79 f4       	brne	.+30     	; 0x319a <__addsf3x+0x34>
    317c:	a6 f5       	brtc	.+104    	; 0x31e6 <__addsf3x+0x80>
    317e:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_zero>
    3182:	0e f4       	brtc	.+2      	; 0x3186 <__addsf3x+0x20>
    3184:	e0 95       	com	r30
    3186:	0b 2e       	mov	r0, r27
    3188:	ba 2f       	mov	r27, r26
    318a:	a0 2d       	mov	r26, r0
    318c:	0b 01       	movw	r0, r22
    318e:	b9 01       	movw	r22, r18
    3190:	90 01       	movw	r18, r0
    3192:	0c 01       	movw	r0, r24
    3194:	ca 01       	movw	r24, r20
    3196:	a0 01       	movw	r20, r0
    3198:	11 24       	eor	r1, r1
    319a:	ff 27       	eor	r31, r31
    319c:	59 1b       	sub	r21, r25
    319e:	99 f0       	breq	.+38     	; 0x31c6 <__addsf3x+0x60>
    31a0:	59 3f       	cpi	r21, 0xF9	; 249
    31a2:	50 f4       	brcc	.+20     	; 0x31b8 <__addsf3x+0x52>
    31a4:	50 3e       	cpi	r21, 0xE0	; 224
    31a6:	68 f1       	brcs	.+90     	; 0x3202 <__addsf3x+0x9c>
    31a8:	1a 16       	cp	r1, r26
    31aa:	f0 40       	sbci	r31, 0x00	; 0
    31ac:	a2 2f       	mov	r26, r18
    31ae:	23 2f       	mov	r18, r19
    31b0:	34 2f       	mov	r19, r20
    31b2:	44 27       	eor	r20, r20
    31b4:	58 5f       	subi	r21, 0xF8	; 248
    31b6:	f3 cf       	rjmp	.-26     	; 0x319e <__addsf3x+0x38>
    31b8:	46 95       	lsr	r20
    31ba:	37 95       	ror	r19
    31bc:	27 95       	ror	r18
    31be:	a7 95       	ror	r26
    31c0:	f0 40       	sbci	r31, 0x00	; 0
    31c2:	53 95       	inc	r21
    31c4:	c9 f7       	brne	.-14     	; 0x31b8 <__addsf3x+0x52>
    31c6:	7e f4       	brtc	.+30     	; 0x31e6 <__addsf3x+0x80>
    31c8:	1f 16       	cp	r1, r31
    31ca:	ba 0b       	sbc	r27, r26
    31cc:	62 0b       	sbc	r22, r18
    31ce:	73 0b       	sbc	r23, r19
    31d0:	84 0b       	sbc	r24, r20
    31d2:	ba f0       	brmi	.+46     	; 0x3202 <__addsf3x+0x9c>
    31d4:	91 50       	subi	r25, 0x01	; 1
    31d6:	a1 f0       	breq	.+40     	; 0x3200 <__addsf3x+0x9a>
    31d8:	ff 0f       	add	r31, r31
    31da:	bb 1f       	adc	r27, r27
    31dc:	66 1f       	adc	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	88 1f       	adc	r24, r24
    31e2:	c2 f7       	brpl	.-16     	; 0x31d4 <__addsf3x+0x6e>
    31e4:	0e c0       	rjmp	.+28     	; 0x3202 <__addsf3x+0x9c>
    31e6:	ba 0f       	add	r27, r26
    31e8:	62 1f       	adc	r22, r18
    31ea:	73 1f       	adc	r23, r19
    31ec:	84 1f       	adc	r24, r20
    31ee:	48 f4       	brcc	.+18     	; 0x3202 <__addsf3x+0x9c>
    31f0:	87 95       	ror	r24
    31f2:	77 95       	ror	r23
    31f4:	67 95       	ror	r22
    31f6:	b7 95       	ror	r27
    31f8:	f7 95       	ror	r31
    31fa:	9e 3f       	cpi	r25, 0xFE	; 254
    31fc:	08 f0       	brcs	.+2      	; 0x3200 <__addsf3x+0x9a>
    31fe:	b0 cf       	rjmp	.-160    	; 0x3160 <__addsf3+0x28>
    3200:	93 95       	inc	r25
    3202:	88 0f       	add	r24, r24
    3204:	08 f0       	brcs	.+2      	; 0x3208 <__addsf3x+0xa2>
    3206:	99 27       	eor	r25, r25
    3208:	ee 0f       	add	r30, r30
    320a:	97 95       	ror	r25
    320c:	87 95       	ror	r24
    320e:	08 95       	ret

00003210 <__divsf3>:
    3210:	0e 94 1c 19 	call	0x3238	; 0x3238 <__divsf3x>
    3214:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_round>
    3218:	0e 94 21 1a 	call	0x3442	; 0x3442 <__fp_pscB>
    321c:	58 f0       	brcs	.+22     	; 0x3234 <__divsf3+0x24>
    321e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__fp_pscA>
    3222:	40 f0       	brcs	.+16     	; 0x3234 <__divsf3+0x24>
    3224:	29 f4       	brne	.+10     	; 0x3230 <__divsf3+0x20>
    3226:	5f 3f       	cpi	r21, 0xFF	; 255
    3228:	29 f0       	breq	.+10     	; 0x3234 <__divsf3+0x24>
    322a:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    322e:	51 11       	cpse	r21, r1
    3230:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>
    3234:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>

00003238 <__divsf3x>:
    3238:	0e 94 39 1a 	call	0x3472	; 0x3472 <__fp_split3>
    323c:	68 f3       	brcs	.-38     	; 0x3218 <__divsf3+0x8>

0000323e <__divsf3_pse>:
    323e:	99 23       	and	r25, r25
    3240:	b1 f3       	breq	.-20     	; 0x322e <__divsf3+0x1e>
    3242:	55 23       	and	r21, r21
    3244:	91 f3       	breq	.-28     	; 0x322a <__divsf3+0x1a>
    3246:	95 1b       	sub	r25, r21
    3248:	55 0b       	sbc	r21, r21
    324a:	bb 27       	eor	r27, r27
    324c:	aa 27       	eor	r26, r26
    324e:	62 17       	cp	r22, r18
    3250:	73 07       	cpc	r23, r19
    3252:	84 07       	cpc	r24, r20
    3254:	38 f0       	brcs	.+14     	; 0x3264 <__divsf3_pse+0x26>
    3256:	9f 5f       	subi	r25, 0xFF	; 255
    3258:	5f 4f       	sbci	r21, 0xFF	; 255
    325a:	22 0f       	add	r18, r18
    325c:	33 1f       	adc	r19, r19
    325e:	44 1f       	adc	r20, r20
    3260:	aa 1f       	adc	r26, r26
    3262:	a9 f3       	breq	.-22     	; 0x324e <__divsf3_pse+0x10>
    3264:	35 d0       	rcall	.+106    	; 0x32d0 <__divsf3_pse+0x92>
    3266:	0e 2e       	mov	r0, r30
    3268:	3a f0       	brmi	.+14     	; 0x3278 <__divsf3_pse+0x3a>
    326a:	e0 e8       	ldi	r30, 0x80	; 128
    326c:	32 d0       	rcall	.+100    	; 0x32d2 <__divsf3_pse+0x94>
    326e:	91 50       	subi	r25, 0x01	; 1
    3270:	50 40       	sbci	r21, 0x00	; 0
    3272:	e6 95       	lsr	r30
    3274:	00 1c       	adc	r0, r0
    3276:	ca f7       	brpl	.-14     	; 0x326a <__divsf3_pse+0x2c>
    3278:	2b d0       	rcall	.+86     	; 0x32d0 <__divsf3_pse+0x92>
    327a:	fe 2f       	mov	r31, r30
    327c:	29 d0       	rcall	.+82     	; 0x32d0 <__divsf3_pse+0x92>
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	88 1f       	adc	r24, r24
    3284:	bb 1f       	adc	r27, r27
    3286:	26 17       	cp	r18, r22
    3288:	37 07       	cpc	r19, r23
    328a:	48 07       	cpc	r20, r24
    328c:	ab 07       	cpc	r26, r27
    328e:	b0 e8       	ldi	r27, 0x80	; 128
    3290:	09 f0       	breq	.+2      	; 0x3294 <__divsf3_pse+0x56>
    3292:	bb 0b       	sbc	r27, r27
    3294:	80 2d       	mov	r24, r0
    3296:	bf 01       	movw	r22, r30
    3298:	ff 27       	eor	r31, r31
    329a:	93 58       	subi	r25, 0x83	; 131
    329c:	5f 4f       	sbci	r21, 0xFF	; 255
    329e:	3a f0       	brmi	.+14     	; 0x32ae <__divsf3_pse+0x70>
    32a0:	9e 3f       	cpi	r25, 0xFE	; 254
    32a2:	51 05       	cpc	r21, r1
    32a4:	78 f0       	brcs	.+30     	; 0x32c4 <__divsf3_pse+0x86>
    32a6:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    32aa:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>
    32ae:	5f 3f       	cpi	r21, 0xFF	; 255
    32b0:	e4 f3       	brlt	.-8      	; 0x32aa <__divsf3_pse+0x6c>
    32b2:	98 3e       	cpi	r25, 0xE8	; 232
    32b4:	d4 f3       	brlt	.-12     	; 0x32aa <__divsf3_pse+0x6c>
    32b6:	86 95       	lsr	r24
    32b8:	77 95       	ror	r23
    32ba:	67 95       	ror	r22
    32bc:	b7 95       	ror	r27
    32be:	f7 95       	ror	r31
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	c9 f7       	brne	.-14     	; 0x32b6 <__divsf3_pse+0x78>
    32c4:	88 0f       	add	r24, r24
    32c6:	91 1d       	adc	r25, r1
    32c8:	96 95       	lsr	r25
    32ca:	87 95       	ror	r24
    32cc:	97 f9       	bld	r25, 7
    32ce:	08 95       	ret
    32d0:	e1 e0       	ldi	r30, 0x01	; 1
    32d2:	66 0f       	add	r22, r22
    32d4:	77 1f       	adc	r23, r23
    32d6:	88 1f       	adc	r24, r24
    32d8:	bb 1f       	adc	r27, r27
    32da:	62 17       	cp	r22, r18
    32dc:	73 07       	cpc	r23, r19
    32de:	84 07       	cpc	r24, r20
    32e0:	ba 07       	cpc	r27, r26
    32e2:	20 f0       	brcs	.+8      	; 0x32ec <__divsf3_pse+0xae>
    32e4:	62 1b       	sub	r22, r18
    32e6:	73 0b       	sbc	r23, r19
    32e8:	84 0b       	sbc	r24, r20
    32ea:	ba 0b       	sbc	r27, r26
    32ec:	ee 1f       	adc	r30, r30
    32ee:	88 f7       	brcc	.-30     	; 0x32d2 <__divsf3_pse+0x94>
    32f0:	e0 95       	com	r30
    32f2:	08 95       	ret

000032f4 <__fixsfsi>:
    32f4:	0e 94 81 19 	call	0x3302	; 0x3302 <__fixunssfsi>
    32f8:	68 94       	set
    32fa:	b1 11       	cpse	r27, r1
    32fc:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>
    3300:	08 95       	ret

00003302 <__fixunssfsi>:
    3302:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_splitA>
    3306:	88 f0       	brcs	.+34     	; 0x332a <__fixunssfsi+0x28>
    3308:	9f 57       	subi	r25, 0x7F	; 127
    330a:	98 f0       	brcs	.+38     	; 0x3332 <__fixunssfsi+0x30>
    330c:	b9 2f       	mov	r27, r25
    330e:	99 27       	eor	r25, r25
    3310:	b7 51       	subi	r27, 0x17	; 23
    3312:	b0 f0       	brcs	.+44     	; 0x3340 <__fixunssfsi+0x3e>
    3314:	e1 f0       	breq	.+56     	; 0x334e <__fixunssfsi+0x4c>
    3316:	66 0f       	add	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	88 1f       	adc	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	1a f0       	brmi	.+6      	; 0x3326 <__fixunssfsi+0x24>
    3320:	ba 95       	dec	r27
    3322:	c9 f7       	brne	.-14     	; 0x3316 <__fixunssfsi+0x14>
    3324:	14 c0       	rjmp	.+40     	; 0x334e <__fixunssfsi+0x4c>
    3326:	b1 30       	cpi	r27, 0x01	; 1
    3328:	91 f0       	breq	.+36     	; 0x334e <__fixunssfsi+0x4c>
    332a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__fp_zero>
    332e:	b1 e0       	ldi	r27, 0x01	; 1
    3330:	08 95       	ret
    3332:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_zero>
    3336:	67 2f       	mov	r22, r23
    3338:	78 2f       	mov	r23, r24
    333a:	88 27       	eor	r24, r24
    333c:	b8 5f       	subi	r27, 0xF8	; 248
    333e:	39 f0       	breq	.+14     	; 0x334e <__fixunssfsi+0x4c>
    3340:	b9 3f       	cpi	r27, 0xF9	; 249
    3342:	cc f3       	brlt	.-14     	; 0x3336 <__fixunssfsi+0x34>
    3344:	86 95       	lsr	r24
    3346:	77 95       	ror	r23
    3348:	67 95       	ror	r22
    334a:	b3 95       	inc	r27
    334c:	d9 f7       	brne	.-10     	; 0x3344 <__fixunssfsi+0x42>
    334e:	3e f4       	brtc	.+14     	; 0x335e <__fixunssfsi+0x5c>
    3350:	90 95       	com	r25
    3352:	80 95       	com	r24
    3354:	70 95       	com	r23
    3356:	61 95       	neg	r22
    3358:	7f 4f       	sbci	r23, 0xFF	; 255
    335a:	8f 4f       	sbci	r24, 0xFF	; 255
    335c:	9f 4f       	sbci	r25, 0xFF	; 255
    335e:	08 95       	ret

00003360 <__floatunsisf>:
    3360:	e8 94       	clt
    3362:	09 c0       	rjmp	.+18     	; 0x3376 <__floatsisf+0x12>

00003364 <__floatsisf>:
    3364:	97 fb       	bst	r25, 7
    3366:	3e f4       	brtc	.+14     	; 0x3376 <__floatsisf+0x12>
    3368:	90 95       	com	r25
    336a:	80 95       	com	r24
    336c:	70 95       	com	r23
    336e:	61 95       	neg	r22
    3370:	7f 4f       	sbci	r23, 0xFF	; 255
    3372:	8f 4f       	sbci	r24, 0xFF	; 255
    3374:	9f 4f       	sbci	r25, 0xFF	; 255
    3376:	99 23       	and	r25, r25
    3378:	a9 f0       	breq	.+42     	; 0x33a4 <__floatsisf+0x40>
    337a:	f9 2f       	mov	r31, r25
    337c:	96 e9       	ldi	r25, 0x96	; 150
    337e:	bb 27       	eor	r27, r27
    3380:	93 95       	inc	r25
    3382:	f6 95       	lsr	r31
    3384:	87 95       	ror	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b7 95       	ror	r27
    338c:	f1 11       	cpse	r31, r1
    338e:	f8 cf       	rjmp	.-16     	; 0x3380 <__floatsisf+0x1c>
    3390:	fa f4       	brpl	.+62     	; 0x33d0 <__floatsisf+0x6c>
    3392:	bb 0f       	add	r27, r27
    3394:	11 f4       	brne	.+4      	; 0x339a <__floatsisf+0x36>
    3396:	60 ff       	sbrs	r22, 0
    3398:	1b c0       	rjmp	.+54     	; 0x33d0 <__floatsisf+0x6c>
    339a:	6f 5f       	subi	r22, 0xFF	; 255
    339c:	7f 4f       	sbci	r23, 0xFF	; 255
    339e:	8f 4f       	sbci	r24, 0xFF	; 255
    33a0:	9f 4f       	sbci	r25, 0xFF	; 255
    33a2:	16 c0       	rjmp	.+44     	; 0x33d0 <__floatsisf+0x6c>
    33a4:	88 23       	and	r24, r24
    33a6:	11 f0       	breq	.+4      	; 0x33ac <__floatsisf+0x48>
    33a8:	96 e9       	ldi	r25, 0x96	; 150
    33aa:	11 c0       	rjmp	.+34     	; 0x33ce <__floatsisf+0x6a>
    33ac:	77 23       	and	r23, r23
    33ae:	21 f0       	breq	.+8      	; 0x33b8 <__floatsisf+0x54>
    33b0:	9e e8       	ldi	r25, 0x8E	; 142
    33b2:	87 2f       	mov	r24, r23
    33b4:	76 2f       	mov	r23, r22
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <__floatsisf+0x5e>
    33b8:	66 23       	and	r22, r22
    33ba:	71 f0       	breq	.+28     	; 0x33d8 <__floatsisf+0x74>
    33bc:	96 e8       	ldi	r25, 0x86	; 134
    33be:	86 2f       	mov	r24, r22
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	2a f0       	brmi	.+10     	; 0x33d0 <__floatsisf+0x6c>
    33c6:	9a 95       	dec	r25
    33c8:	66 0f       	add	r22, r22
    33ca:	77 1f       	adc	r23, r23
    33cc:	88 1f       	adc	r24, r24
    33ce:	da f7       	brpl	.-10     	; 0x33c6 <__floatsisf+0x62>
    33d0:	88 0f       	add	r24, r24
    33d2:	96 95       	lsr	r25
    33d4:	87 95       	ror	r24
    33d6:	97 f9       	bld	r25, 7
    33d8:	08 95       	ret

000033da <__fp_cmp>:
    33da:	99 0f       	add	r25, r25
    33dc:	00 08       	sbc	r0, r0
    33de:	55 0f       	add	r21, r21
    33e0:	aa 0b       	sbc	r26, r26
    33e2:	e0 e8       	ldi	r30, 0x80	; 128
    33e4:	fe ef       	ldi	r31, 0xFE	; 254
    33e6:	16 16       	cp	r1, r22
    33e8:	17 06       	cpc	r1, r23
    33ea:	e8 07       	cpc	r30, r24
    33ec:	f9 07       	cpc	r31, r25
    33ee:	c0 f0       	brcs	.+48     	; 0x3420 <__fp_cmp+0x46>
    33f0:	12 16       	cp	r1, r18
    33f2:	13 06       	cpc	r1, r19
    33f4:	e4 07       	cpc	r30, r20
    33f6:	f5 07       	cpc	r31, r21
    33f8:	98 f0       	brcs	.+38     	; 0x3420 <__fp_cmp+0x46>
    33fa:	62 1b       	sub	r22, r18
    33fc:	73 0b       	sbc	r23, r19
    33fe:	84 0b       	sbc	r24, r20
    3400:	95 0b       	sbc	r25, r21
    3402:	39 f4       	brne	.+14     	; 0x3412 <__fp_cmp+0x38>
    3404:	0a 26       	eor	r0, r26
    3406:	61 f0       	breq	.+24     	; 0x3420 <__fp_cmp+0x46>
    3408:	23 2b       	or	r18, r19
    340a:	24 2b       	or	r18, r20
    340c:	25 2b       	or	r18, r21
    340e:	21 f4       	brne	.+8      	; 0x3418 <__fp_cmp+0x3e>
    3410:	08 95       	ret
    3412:	0a 26       	eor	r0, r26
    3414:	09 f4       	brne	.+2      	; 0x3418 <__fp_cmp+0x3e>
    3416:	a1 40       	sbci	r26, 0x01	; 1
    3418:	a6 95       	lsr	r26
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	81 1d       	adc	r24, r1
    341e:	81 1d       	adc	r24, r1
    3420:	08 95       	ret

00003422 <__fp_inf>:
    3422:	97 f9       	bld	r25, 7
    3424:	9f 67       	ori	r25, 0x7F	; 127
    3426:	80 e8       	ldi	r24, 0x80	; 128
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	08 95       	ret

0000342e <__fp_nan>:
    342e:	9f ef       	ldi	r25, 0xFF	; 255
    3430:	80 ec       	ldi	r24, 0xC0	; 192
    3432:	08 95       	ret

00003434 <__fp_pscA>:
    3434:	00 24       	eor	r0, r0
    3436:	0a 94       	dec	r0
    3438:	16 16       	cp	r1, r22
    343a:	17 06       	cpc	r1, r23
    343c:	18 06       	cpc	r1, r24
    343e:	09 06       	cpc	r0, r25
    3440:	08 95       	ret

00003442 <__fp_pscB>:
    3442:	00 24       	eor	r0, r0
    3444:	0a 94       	dec	r0
    3446:	12 16       	cp	r1, r18
    3448:	13 06       	cpc	r1, r19
    344a:	14 06       	cpc	r1, r20
    344c:	05 06       	cpc	r0, r21
    344e:	08 95       	ret

00003450 <__fp_round>:
    3450:	09 2e       	mov	r0, r25
    3452:	03 94       	inc	r0
    3454:	00 0c       	add	r0, r0
    3456:	11 f4       	brne	.+4      	; 0x345c <__fp_round+0xc>
    3458:	88 23       	and	r24, r24
    345a:	52 f0       	brmi	.+20     	; 0x3470 <__fp_round+0x20>
    345c:	bb 0f       	add	r27, r27
    345e:	40 f4       	brcc	.+16     	; 0x3470 <__fp_round+0x20>
    3460:	bf 2b       	or	r27, r31
    3462:	11 f4       	brne	.+4      	; 0x3468 <__fp_round+0x18>
    3464:	60 ff       	sbrs	r22, 0
    3466:	04 c0       	rjmp	.+8      	; 0x3470 <__fp_round+0x20>
    3468:	6f 5f       	subi	r22, 0xFF	; 255
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	8f 4f       	sbci	r24, 0xFF	; 255
    346e:	9f 4f       	sbci	r25, 0xFF	; 255
    3470:	08 95       	ret

00003472 <__fp_split3>:
    3472:	57 fd       	sbrc	r21, 7
    3474:	90 58       	subi	r25, 0x80	; 128
    3476:	44 0f       	add	r20, r20
    3478:	55 1f       	adc	r21, r21
    347a:	59 f0       	breq	.+22     	; 0x3492 <__fp_splitA+0x10>
    347c:	5f 3f       	cpi	r21, 0xFF	; 255
    347e:	71 f0       	breq	.+28     	; 0x349c <__fp_splitA+0x1a>
    3480:	47 95       	ror	r20

00003482 <__fp_splitA>:
    3482:	88 0f       	add	r24, r24
    3484:	97 fb       	bst	r25, 7
    3486:	99 1f       	adc	r25, r25
    3488:	61 f0       	breq	.+24     	; 0x34a2 <__fp_splitA+0x20>
    348a:	9f 3f       	cpi	r25, 0xFF	; 255
    348c:	79 f0       	breq	.+30     	; 0x34ac <__fp_splitA+0x2a>
    348e:	87 95       	ror	r24
    3490:	08 95       	ret
    3492:	12 16       	cp	r1, r18
    3494:	13 06       	cpc	r1, r19
    3496:	14 06       	cpc	r1, r20
    3498:	55 1f       	adc	r21, r21
    349a:	f2 cf       	rjmp	.-28     	; 0x3480 <__fp_split3+0xe>
    349c:	46 95       	lsr	r20
    349e:	f1 df       	rcall	.-30     	; 0x3482 <__fp_splitA>
    34a0:	08 c0       	rjmp	.+16     	; 0x34b2 <__fp_splitA+0x30>
    34a2:	16 16       	cp	r1, r22
    34a4:	17 06       	cpc	r1, r23
    34a6:	18 06       	cpc	r1, r24
    34a8:	99 1f       	adc	r25, r25
    34aa:	f1 cf       	rjmp	.-30     	; 0x348e <__fp_splitA+0xc>
    34ac:	86 95       	lsr	r24
    34ae:	71 05       	cpc	r23, r1
    34b0:	61 05       	cpc	r22, r1
    34b2:	08 94       	sec
    34b4:	08 95       	ret

000034b6 <__fp_zero>:
    34b6:	e8 94       	clt

000034b8 <__fp_szero>:
    34b8:	bb 27       	eor	r27, r27
    34ba:	66 27       	eor	r22, r22
    34bc:	77 27       	eor	r23, r23
    34be:	cb 01       	movw	r24, r22
    34c0:	97 f9       	bld	r25, 7
    34c2:	08 95       	ret

000034c4 <__gesf2>:
    34c4:	0e 94 ed 19 	call	0x33da	; 0x33da <__fp_cmp>
    34c8:	08 f4       	brcc	.+2      	; 0x34cc <__gesf2+0x8>
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	08 95       	ret

000034ce <__mulsf3>:
    34ce:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3x>
    34d2:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_round>
    34d6:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__fp_pscA>
    34da:	38 f0       	brcs	.+14     	; 0x34ea <__mulsf3+0x1c>
    34dc:	0e 94 21 1a 	call	0x3442	; 0x3442 <__fp_pscB>
    34e0:	20 f0       	brcs	.+8      	; 0x34ea <__mulsf3+0x1c>
    34e2:	95 23       	and	r25, r21
    34e4:	11 f0       	breq	.+4      	; 0x34ea <__mulsf3+0x1c>
    34e6:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    34ea:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>
    34ee:	11 24       	eor	r1, r1
    34f0:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>

000034f4 <__mulsf3x>:
    34f4:	0e 94 39 1a 	call	0x3472	; 0x3472 <__fp_split3>
    34f8:	70 f3       	brcs	.-36     	; 0x34d6 <__mulsf3+0x8>

000034fa <__mulsf3_pse>:
    34fa:	95 9f       	mul	r25, r21
    34fc:	c1 f3       	breq	.-16     	; 0x34ee <__mulsf3+0x20>
    34fe:	95 0f       	add	r25, r21
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	55 1f       	adc	r21, r21
    3504:	62 9f       	mul	r22, r18
    3506:	f0 01       	movw	r30, r0
    3508:	72 9f       	mul	r23, r18
    350a:	bb 27       	eor	r27, r27
    350c:	f0 0d       	add	r31, r0
    350e:	b1 1d       	adc	r27, r1
    3510:	63 9f       	mul	r22, r19
    3512:	aa 27       	eor	r26, r26
    3514:	f0 0d       	add	r31, r0
    3516:	b1 1d       	adc	r27, r1
    3518:	aa 1f       	adc	r26, r26
    351a:	64 9f       	mul	r22, r20
    351c:	66 27       	eor	r22, r22
    351e:	b0 0d       	add	r27, r0
    3520:	a1 1d       	adc	r26, r1
    3522:	66 1f       	adc	r22, r22
    3524:	82 9f       	mul	r24, r18
    3526:	22 27       	eor	r18, r18
    3528:	b0 0d       	add	r27, r0
    352a:	a1 1d       	adc	r26, r1
    352c:	62 1f       	adc	r22, r18
    352e:	73 9f       	mul	r23, r19
    3530:	b0 0d       	add	r27, r0
    3532:	a1 1d       	adc	r26, r1
    3534:	62 1f       	adc	r22, r18
    3536:	83 9f       	mul	r24, r19
    3538:	a0 0d       	add	r26, r0
    353a:	61 1d       	adc	r22, r1
    353c:	22 1f       	adc	r18, r18
    353e:	74 9f       	mul	r23, r20
    3540:	33 27       	eor	r19, r19
    3542:	a0 0d       	add	r26, r0
    3544:	61 1d       	adc	r22, r1
    3546:	23 1f       	adc	r18, r19
    3548:	84 9f       	mul	r24, r20
    354a:	60 0d       	add	r22, r0
    354c:	21 1d       	adc	r18, r1
    354e:	82 2f       	mov	r24, r18
    3550:	76 2f       	mov	r23, r22
    3552:	6a 2f       	mov	r22, r26
    3554:	11 24       	eor	r1, r1
    3556:	9f 57       	subi	r25, 0x7F	; 127
    3558:	50 40       	sbci	r21, 0x00	; 0
    355a:	9a f0       	brmi	.+38     	; 0x3582 <__mulsf3_pse+0x88>
    355c:	f1 f0       	breq	.+60     	; 0x359a <__mulsf3_pse+0xa0>
    355e:	88 23       	and	r24, r24
    3560:	4a f0       	brmi	.+18     	; 0x3574 <__mulsf3_pse+0x7a>
    3562:	ee 0f       	add	r30, r30
    3564:	ff 1f       	adc	r31, r31
    3566:	bb 1f       	adc	r27, r27
    3568:	66 1f       	adc	r22, r22
    356a:	77 1f       	adc	r23, r23
    356c:	88 1f       	adc	r24, r24
    356e:	91 50       	subi	r25, 0x01	; 1
    3570:	50 40       	sbci	r21, 0x00	; 0
    3572:	a9 f7       	brne	.-22     	; 0x355e <__mulsf3_pse+0x64>
    3574:	9e 3f       	cpi	r25, 0xFE	; 254
    3576:	51 05       	cpc	r21, r1
    3578:	80 f0       	brcs	.+32     	; 0x359a <__mulsf3_pse+0xa0>
    357a:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    357e:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>
    3582:	5f 3f       	cpi	r21, 0xFF	; 255
    3584:	e4 f3       	brlt	.-8      	; 0x357e <__mulsf3_pse+0x84>
    3586:	98 3e       	cpi	r25, 0xE8	; 232
    3588:	d4 f3       	brlt	.-12     	; 0x357e <__mulsf3_pse+0x84>
    358a:	86 95       	lsr	r24
    358c:	77 95       	ror	r23
    358e:	67 95       	ror	r22
    3590:	b7 95       	ror	r27
    3592:	f7 95       	ror	r31
    3594:	e7 95       	ror	r30
    3596:	9f 5f       	subi	r25, 0xFF	; 255
    3598:	c1 f7       	brne	.-16     	; 0x358a <__mulsf3_pse+0x90>
    359a:	fe 2b       	or	r31, r30
    359c:	88 0f       	add	r24, r24
    359e:	91 1d       	adc	r25, r1
    35a0:	96 95       	lsr	r25
    35a2:	87 95       	ror	r24
    35a4:	97 f9       	bld	r25, 7
    35a6:	08 95       	ret

000035a8 <pow>:
    35a8:	fa 01       	movw	r30, r20
    35aa:	ee 0f       	add	r30, r30
    35ac:	ff 1f       	adc	r31, r31
    35ae:	30 96       	adiw	r30, 0x00	; 0
    35b0:	21 05       	cpc	r18, r1
    35b2:	31 05       	cpc	r19, r1
    35b4:	a1 f1       	breq	.+104    	; 0x361e <pow+0x76>
    35b6:	61 15       	cp	r22, r1
    35b8:	71 05       	cpc	r23, r1
    35ba:	61 f4       	brne	.+24     	; 0x35d4 <pow+0x2c>
    35bc:	80 38       	cpi	r24, 0x80	; 128
    35be:	bf e3       	ldi	r27, 0x3F	; 63
    35c0:	9b 07       	cpc	r25, r27
    35c2:	49 f1       	breq	.+82     	; 0x3616 <pow+0x6e>
    35c4:	68 94       	set
    35c6:	90 38       	cpi	r25, 0x80	; 128
    35c8:	81 05       	cpc	r24, r1
    35ca:	61 f0       	breq	.+24     	; 0x35e4 <pow+0x3c>
    35cc:	80 38       	cpi	r24, 0x80	; 128
    35ce:	bf ef       	ldi	r27, 0xFF	; 255
    35d0:	9b 07       	cpc	r25, r27
    35d2:	41 f0       	breq	.+16     	; 0x35e4 <pow+0x3c>
    35d4:	99 23       	and	r25, r25
    35d6:	4a f5       	brpl	.+82     	; 0x362a <pow+0x82>
    35d8:	ff 3f       	cpi	r31, 0xFF	; 255
    35da:	e1 05       	cpc	r30, r1
    35dc:	31 05       	cpc	r19, r1
    35de:	21 05       	cpc	r18, r1
    35e0:	19 f1       	breq	.+70     	; 0x3628 <pow+0x80>
    35e2:	e8 94       	clt
    35e4:	08 94       	sec
    35e6:	e7 95       	ror	r30
    35e8:	d9 01       	movw	r26, r18
    35ea:	aa 23       	and	r26, r26
    35ec:	29 f4       	brne	.+10     	; 0x35f8 <pow+0x50>
    35ee:	ab 2f       	mov	r26, r27
    35f0:	be 2f       	mov	r27, r30
    35f2:	f8 5f       	subi	r31, 0xF8	; 248
    35f4:	d0 f3       	brcs	.-12     	; 0x35ea <pow+0x42>
    35f6:	10 c0       	rjmp	.+32     	; 0x3618 <pow+0x70>
    35f8:	ff 5f       	subi	r31, 0xFF	; 255
    35fa:	70 f4       	brcc	.+28     	; 0x3618 <pow+0x70>
    35fc:	a6 95       	lsr	r26
    35fe:	e0 f7       	brcc	.-8      	; 0x35f8 <pow+0x50>
    3600:	f7 39       	cpi	r31, 0x97	; 151
    3602:	50 f0       	brcs	.+20     	; 0x3618 <pow+0x70>
    3604:	19 f0       	breq	.+6      	; 0x360c <pow+0x64>
    3606:	ff 3a       	cpi	r31, 0xAF	; 175
    3608:	38 f4       	brcc	.+14     	; 0x3618 <pow+0x70>
    360a:	9f 77       	andi	r25, 0x7F	; 127
    360c:	9f 93       	push	r25
    360e:	0d d0       	rcall	.+26     	; 0x362a <pow+0x82>
    3610:	0f 90       	pop	r0
    3612:	07 fc       	sbrc	r0, 7
    3614:	90 58       	subi	r25, 0x80	; 128
    3616:	08 95       	ret
    3618:	46 f0       	brts	.+16     	; 0x362a <pow+0x82>
    361a:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	80 e8       	ldi	r24, 0x80	; 128
    3624:	9f e3       	ldi	r25, 0x3F	; 63
    3626:	08 95       	ret
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	9f 77       	andi	r25, 0x7F	; 127
    362c:	5f 93       	push	r21
    362e:	4f 93       	push	r20
    3630:	3f 93       	push	r19
    3632:	2f 93       	push	r18
    3634:	0e 94 cf 1b 	call	0x379e	; 0x379e <log>
    3638:	2f 91       	pop	r18
    363a:	3f 91       	pop	r19
    363c:	4f 91       	pop	r20
    363e:	5f 91       	pop	r21
    3640:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__mulsf3>
    3644:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <exp>
    3648:	29 f4       	brne	.+10     	; 0x3654 <pow+0xac>
    364a:	16 f0       	brts	.+4      	; 0x3650 <pow+0xa8>
    364c:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    3650:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_zero>
    3654:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>

00003658 <exp>:
    3658:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_splitA>
    365c:	a8 f3       	brcs	.-22     	; 0x3648 <pow+0xa0>
    365e:	96 38       	cpi	r25, 0x86	; 134
    3660:	a0 f7       	brcc	.-24     	; 0x364a <pow+0xa2>
    3662:	07 f8       	bld	r0, 7
    3664:	0f 92       	push	r0
    3666:	e8 94       	clt
    3668:	2b e3       	ldi	r18, 0x3B	; 59
    366a:	3a ea       	ldi	r19, 0xAA	; 170
    366c:	48 eb       	ldi	r20, 0xB8	; 184
    366e:	5f e7       	ldi	r21, 0x7F	; 127
    3670:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__mulsf3_pse>
    3674:	0f 92       	push	r0
    3676:	0f 92       	push	r0
    3678:	0f 92       	push	r0
    367a:	4d b7       	in	r20, 0x3d	; 61
    367c:	5e b7       	in	r21, 0x3e	; 62
    367e:	0f 92       	push	r0
    3680:	0e 94 17 1c 	call	0x382e	; 0x382e <modf>
    3684:	e2 e5       	ldi	r30, 0x52	; 82
    3686:	f2 e0       	ldi	r31, 0x02	; 2
    3688:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_powser>
    368c:	4f 91       	pop	r20
    368e:	5f 91       	pop	r21
    3690:	ef 91       	pop	r30
    3692:	ff 91       	pop	r31
    3694:	e5 95       	asr	r30
    3696:	ee 1f       	adc	r30, r30
    3698:	ff 1f       	adc	r31, r31
    369a:	49 f0       	breq	.+18     	; 0x36ae <exp+0x56>
    369c:	fe 57       	subi	r31, 0x7E	; 126
    369e:	e0 68       	ori	r30, 0x80	; 128
    36a0:	44 27       	eor	r20, r20
    36a2:	ee 0f       	add	r30, r30
    36a4:	44 1f       	adc	r20, r20
    36a6:	fa 95       	dec	r31
    36a8:	e1 f7       	brne	.-8      	; 0x36a2 <exp+0x4a>
    36aa:	41 95       	neg	r20
    36ac:	55 0b       	sbc	r21, r21
    36ae:	0e 94 91 1b 	call	0x3722	; 0x3722 <ldexp>
    36b2:	0f 90       	pop	r0
    36b4:	07 fe       	sbrs	r0, 7
    36b6:	0c 94 85 1b 	jmp	0x370a	; 0x370a <inverse>
    36ba:	08 95       	ret

000036bc <__fp_powser>:
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	1f 93       	push	r17
    36c2:	0f 93       	push	r16
    36c4:	ff 92       	push	r15
    36c6:	ef 92       	push	r14
    36c8:	df 92       	push	r13
    36ca:	7b 01       	movw	r14, r22
    36cc:	8c 01       	movw	r16, r24
    36ce:	68 94       	set
    36d0:	06 c0       	rjmp	.+12     	; 0x36de <__fp_powser+0x22>
    36d2:	da 2e       	mov	r13, r26
    36d4:	ef 01       	movw	r28, r30
    36d6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3x>
    36da:	fe 01       	movw	r30, r28
    36dc:	e8 94       	clt
    36de:	a5 91       	lpm	r26, Z+
    36e0:	25 91       	lpm	r18, Z+
    36e2:	35 91       	lpm	r19, Z+
    36e4:	45 91       	lpm	r20, Z+
    36e6:	55 91       	lpm	r21, Z+
    36e8:	a6 f3       	brts	.-24     	; 0x36d2 <__fp_powser+0x16>
    36ea:	ef 01       	movw	r28, r30
    36ec:	0e 94 b3 18 	call	0x3166	; 0x3166 <__addsf3x>
    36f0:	fe 01       	movw	r30, r28
    36f2:	97 01       	movw	r18, r14
    36f4:	a8 01       	movw	r20, r16
    36f6:	da 94       	dec	r13
    36f8:	69 f7       	brne	.-38     	; 0x36d4 <__fp_powser+0x18>
    36fa:	df 90       	pop	r13
    36fc:	ef 90       	pop	r14
    36fe:	ff 90       	pop	r15
    3700:	0f 91       	pop	r16
    3702:	1f 91       	pop	r17
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	08 95       	ret

0000370a <inverse>:
    370a:	9b 01       	movw	r18, r22
    370c:	ac 01       	movw	r20, r24
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	80 e8       	ldi	r24, 0x80	; 128
    3714:	9f e3       	ldi	r25, 0x3F	; 63
    3716:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__divsf3>
    371a:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>
    371e:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__fp_mpack>

00003722 <ldexp>:
    3722:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_splitA>
    3726:	d8 f3       	brcs	.-10     	; 0x371e <inverse+0x14>
    3728:	99 23       	and	r25, r25
    372a:	c9 f3       	breq	.-14     	; 0x371e <inverse+0x14>
    372c:	94 0f       	add	r25, r20
    372e:	51 1d       	adc	r21, r1
    3730:	a3 f3       	brvs	.-24     	; 0x371a <inverse+0x10>
    3732:	91 50       	subi	r25, 0x01	; 1
    3734:	50 40       	sbci	r21, 0x00	; 0
    3736:	94 f0       	brlt	.+36     	; 0x375c <ldexp+0x3a>
    3738:	59 f0       	breq	.+22     	; 0x3750 <ldexp+0x2e>
    373a:	88 23       	and	r24, r24
    373c:	32 f0       	brmi	.+12     	; 0x374a <ldexp+0x28>
    373e:	66 0f       	add	r22, r22
    3740:	77 1f       	adc	r23, r23
    3742:	88 1f       	adc	r24, r24
    3744:	91 50       	subi	r25, 0x01	; 1
    3746:	50 40       	sbci	r21, 0x00	; 0
    3748:	c1 f7       	brne	.-16     	; 0x373a <ldexp+0x18>
    374a:	9e 3f       	cpi	r25, 0xFE	; 254
    374c:	51 05       	cpc	r21, r1
    374e:	2c f7       	brge	.-54     	; 0x371a <inverse+0x10>
    3750:	88 0f       	add	r24, r24
    3752:	91 1d       	adc	r25, r1
    3754:	96 95       	lsr	r25
    3756:	87 95       	ror	r24
    3758:	97 f9       	bld	r25, 7
    375a:	08 95       	ret
    375c:	5f 3f       	cpi	r21, 0xFF	; 255
    375e:	ac f0       	brlt	.+42     	; 0x378a <ldexp+0x68>
    3760:	98 3e       	cpi	r25, 0xE8	; 232
    3762:	9c f0       	brlt	.+38     	; 0x378a <ldexp+0x68>
    3764:	bb 27       	eor	r27, r27
    3766:	86 95       	lsr	r24
    3768:	77 95       	ror	r23
    376a:	67 95       	ror	r22
    376c:	b7 95       	ror	r27
    376e:	08 f4       	brcc	.+2      	; 0x3772 <ldexp+0x50>
    3770:	b1 60       	ori	r27, 0x01	; 1
    3772:	93 95       	inc	r25
    3774:	c1 f7       	brne	.-16     	; 0x3766 <ldexp+0x44>
    3776:	bb 0f       	add	r27, r27
    3778:	58 f7       	brcc	.-42     	; 0x3750 <ldexp+0x2e>
    377a:	11 f4       	brne	.+4      	; 0x3780 <ldexp+0x5e>
    377c:	60 ff       	sbrs	r22, 0
    377e:	e8 cf       	rjmp	.-48     	; 0x3750 <ldexp+0x2e>
    3780:	6f 5f       	subi	r22, 0xFF	; 255
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	e3 cf       	rjmp	.-58     	; 0x3750 <ldexp+0x2e>
    378a:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__fp_szero>
    378e:	16 f0       	brts	.+4      	; 0x3794 <ldexp+0x72>
    3790:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__fp_mpack>
    3794:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__fp_nan>
    3798:	68 94       	set
    379a:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__fp_inf>

0000379e <log>:
    379e:	0e 94 41 1a 	call	0x3482	; 0x3482 <__fp_splitA>
    37a2:	a8 f3       	brcs	.-22     	; 0x378e <ldexp+0x6c>
    37a4:	99 23       	and	r25, r25
    37a6:	c1 f3       	breq	.-16     	; 0x3798 <ldexp+0x76>
    37a8:	ae f3       	brts	.-22     	; 0x3794 <ldexp+0x72>
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	1f 93       	push	r17
    37b0:	0f 93       	push	r16
    37b2:	ff 92       	push	r15
    37b4:	c9 2f       	mov	r28, r25
    37b6:	dd 27       	eor	r29, r29
    37b8:	88 23       	and	r24, r24
    37ba:	2a f0       	brmi	.+10     	; 0x37c6 <log+0x28>
    37bc:	21 97       	sbiw	r28, 0x01	; 1
    37be:	66 0f       	add	r22, r22
    37c0:	77 1f       	adc	r23, r23
    37c2:	88 1f       	adc	r24, r24
    37c4:	da f7       	brpl	.-10     	; 0x37bc <log+0x1e>
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e8       	ldi	r20, 0x80	; 128
    37cc:	5f eb       	ldi	r21, 0xBF	; 191
    37ce:	9f e3       	ldi	r25, 0x3F	; 63
    37d0:	88 39       	cpi	r24, 0x98	; 152
    37d2:	20 f0       	brcs	.+8      	; 0x37dc <log+0x3e>
    37d4:	80 3e       	cpi	r24, 0xE0	; 224
    37d6:	38 f0       	brcs	.+14     	; 0x37e6 <log+0x48>
    37d8:	21 96       	adiw	r28, 0x01	; 1
    37da:	8f 77       	andi	r24, 0x7F	; 127
    37dc:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3>
    37e0:	ea e7       	ldi	r30, 0x7A	; 122
    37e2:	f2 e0       	ldi	r31, 0x02	; 2
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <log+0x50>
    37e6:	0e 94 9c 18 	call	0x3138	; 0x3138 <__addsf3>
    37ea:	e7 ea       	ldi	r30, 0xA7	; 167
    37ec:	f2 e0       	ldi	r31, 0x02	; 2
    37ee:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_powser>
    37f2:	8b 01       	movw	r16, r22
    37f4:	be 01       	movw	r22, r28
    37f6:	ec 01       	movw	r28, r24
    37f8:	fb 2e       	mov	r15, r27
    37fa:	6f 57       	subi	r22, 0x7F	; 127
    37fc:	71 09       	sbc	r23, r1
    37fe:	75 95       	asr	r23
    3800:	77 1f       	adc	r23, r23
    3802:	88 0b       	sbc	r24, r24
    3804:	99 0b       	sbc	r25, r25
    3806:	0e 94 b2 19 	call	0x3364	; 0x3364 <__floatsisf>
    380a:	28 e1       	ldi	r18, 0x18	; 24
    380c:	32 e7       	ldi	r19, 0x72	; 114
    380e:	41 e3       	ldi	r20, 0x31	; 49
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3x>
    3816:	af 2d       	mov	r26, r15
    3818:	98 01       	movw	r18, r16
    381a:	ae 01       	movw	r20, r28
    381c:	ff 90       	pop	r15
    381e:	0f 91       	pop	r16
    3820:	1f 91       	pop	r17
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	0e 94 b3 18 	call	0x3166	; 0x3166 <__addsf3x>
    382a:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_round>

0000382e <modf>:
    382e:	fa 01       	movw	r30, r20
    3830:	dc 01       	movw	r26, r24
    3832:	aa 0f       	add	r26, r26
    3834:	bb 1f       	adc	r27, r27
    3836:	9b 01       	movw	r18, r22
    3838:	ac 01       	movw	r20, r24
    383a:	bf 57       	subi	r27, 0x7F	; 127
    383c:	28 f4       	brcc	.+10     	; 0x3848 <modf+0x1a>
    383e:	22 27       	eor	r18, r18
    3840:	33 27       	eor	r19, r19
    3842:	44 27       	eor	r20, r20
    3844:	50 78       	andi	r21, 0x80	; 128
    3846:	20 c0       	rjmp	.+64     	; 0x3888 <modf+0x5a>
    3848:	b7 51       	subi	r27, 0x17	; 23
    384a:	90 f4       	brcc	.+36     	; 0x3870 <modf+0x42>
    384c:	ab 2f       	mov	r26, r27
    384e:	00 24       	eor	r0, r0
    3850:	46 95       	lsr	r20
    3852:	37 95       	ror	r19
    3854:	27 95       	ror	r18
    3856:	01 1c       	adc	r0, r1
    3858:	a3 95       	inc	r26
    385a:	d2 f3       	brmi	.-12     	; 0x3850 <modf+0x22>
    385c:	00 20       	and	r0, r0
    385e:	71 f0       	breq	.+28     	; 0x387c <modf+0x4e>
    3860:	22 0f       	add	r18, r18
    3862:	33 1f       	adc	r19, r19
    3864:	44 1f       	adc	r20, r20
    3866:	b3 95       	inc	r27
    3868:	da f3       	brmi	.-10     	; 0x3860 <modf+0x32>
    386a:	0e d0       	rcall	.+28     	; 0x3888 <modf+0x5a>
    386c:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__subsf3>
    3870:	61 30       	cpi	r22, 0x01	; 1
    3872:	71 05       	cpc	r23, r1
    3874:	a0 e8       	ldi	r26, 0x80	; 128
    3876:	8a 07       	cpc	r24, r26
    3878:	b9 46       	sbci	r27, 0x69	; 105
    387a:	30 f4       	brcc	.+12     	; 0x3888 <modf+0x5a>
    387c:	9b 01       	movw	r18, r22
    387e:	ac 01       	movw	r20, r24
    3880:	66 27       	eor	r22, r22
    3882:	77 27       	eor	r23, r23
    3884:	88 27       	eor	r24, r24
    3886:	90 78       	andi	r25, 0x80	; 128
    3888:	30 96       	adiw	r30, 0x00	; 0
    388a:	21 f0       	breq	.+8      	; 0x3894 <modf+0x66>
    388c:	20 83       	st	Z, r18
    388e:	31 83       	std	Z+1, r19	; 0x01
    3890:	42 83       	std	Z+2, r20	; 0x02
    3892:	53 83       	std	Z+3, r21	; 0x03
    3894:	08 95       	ret

00003896 <__fp_mpack>:
    3896:	9f 3f       	cpi	r25, 0xFF	; 255
    3898:	31 f0       	breq	.+12     	; 0x38a6 <__fp_mpack_finite+0xc>

0000389a <__fp_mpack_finite>:
    389a:	91 50       	subi	r25, 0x01	; 1
    389c:	20 f4       	brcc	.+8      	; 0x38a6 <__fp_mpack_finite+0xc>
    389e:	87 95       	ror	r24
    38a0:	77 95       	ror	r23
    38a2:	67 95       	ror	r22
    38a4:	b7 95       	ror	r27
    38a6:	88 0f       	add	r24, r24
    38a8:	91 1d       	adc	r25, r1
    38aa:	96 95       	lsr	r25
    38ac:	87 95       	ror	r24
    38ae:	97 f9       	bld	r25, 7
    38b0:	08 95       	ret

000038b2 <vfprintf>:
    38b2:	a0 e1       	ldi	r26, 0x10	; 16
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	ef e5       	ldi	r30, 0x5F	; 95
    38b8:	fc e1       	ldi	r31, 0x1C	; 28
    38ba:	0c 94 21 20 	jmp	0x4042	; 0x4042 <__prologue_saves__>
    38be:	7c 01       	movw	r14, r24
    38c0:	1b 01       	movw	r2, r22
    38c2:	6a 01       	movw	r12, r20
    38c4:	fc 01       	movw	r30, r24
    38c6:	17 82       	std	Z+7, r1	; 0x07
    38c8:	16 82       	std	Z+6, r1	; 0x06
    38ca:	83 81       	ldd	r24, Z+3	; 0x03
    38cc:	81 ff       	sbrs	r24, 1
    38ce:	44 c3       	rjmp	.+1672   	; 0x3f58 <vfprintf+0x6a6>
    38d0:	9e 01       	movw	r18, r28
    38d2:	2f 5f       	subi	r18, 0xFF	; 255
    38d4:	3f 4f       	sbci	r19, 0xFF	; 255
    38d6:	39 01       	movw	r6, r18
    38d8:	f7 01       	movw	r30, r14
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	f1 01       	movw	r30, r2
    38de:	93 fd       	sbrc	r25, 3
    38e0:	85 91       	lpm	r24, Z+
    38e2:	93 ff       	sbrs	r25, 3
    38e4:	81 91       	ld	r24, Z+
    38e6:	1f 01       	movw	r2, r30
    38e8:	88 23       	and	r24, r24
    38ea:	09 f4       	brne	.+2      	; 0x38ee <vfprintf+0x3c>
    38ec:	31 c3       	rjmp	.+1634   	; 0x3f50 <vfprintf+0x69e>
    38ee:	85 32       	cpi	r24, 0x25	; 37
    38f0:	39 f4       	brne	.+14     	; 0x3900 <vfprintf+0x4e>
    38f2:	93 fd       	sbrc	r25, 3
    38f4:	85 91       	lpm	r24, Z+
    38f6:	93 ff       	sbrs	r25, 3
    38f8:	81 91       	ld	r24, Z+
    38fa:	1f 01       	movw	r2, r30
    38fc:	85 32       	cpi	r24, 0x25	; 37
    38fe:	39 f4       	brne	.+14     	; 0x390e <vfprintf+0x5c>
    3900:	b7 01       	movw	r22, r14
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3908:	56 01       	movw	r10, r12
    390a:	65 01       	movw	r12, r10
    390c:	e5 cf       	rjmp	.-54     	; 0x38d8 <vfprintf+0x26>
    390e:	10 e0       	ldi	r17, 0x00	; 0
    3910:	51 2c       	mov	r5, r1
    3912:	91 2c       	mov	r9, r1
    3914:	ff e1       	ldi	r31, 0x1F	; 31
    3916:	f9 15       	cp	r31, r9
    3918:	d8 f0       	brcs	.+54     	; 0x3950 <vfprintf+0x9e>
    391a:	8b 32       	cpi	r24, 0x2B	; 43
    391c:	79 f0       	breq	.+30     	; 0x393c <vfprintf+0x8a>
    391e:	38 f4       	brcc	.+14     	; 0x392e <vfprintf+0x7c>
    3920:	80 32       	cpi	r24, 0x20	; 32
    3922:	79 f0       	breq	.+30     	; 0x3942 <vfprintf+0x90>
    3924:	83 32       	cpi	r24, 0x23	; 35
    3926:	a1 f4       	brne	.+40     	; 0x3950 <vfprintf+0x9e>
    3928:	f9 2d       	mov	r31, r9
    392a:	f0 61       	ori	r31, 0x10	; 16
    392c:	2e c0       	rjmp	.+92     	; 0x398a <vfprintf+0xd8>
    392e:	8d 32       	cpi	r24, 0x2D	; 45
    3930:	61 f0       	breq	.+24     	; 0x394a <vfprintf+0x98>
    3932:	80 33       	cpi	r24, 0x30	; 48
    3934:	69 f4       	brne	.+26     	; 0x3950 <vfprintf+0x9e>
    3936:	29 2d       	mov	r18, r9
    3938:	21 60       	ori	r18, 0x01	; 1
    393a:	2d c0       	rjmp	.+90     	; 0x3996 <vfprintf+0xe4>
    393c:	39 2d       	mov	r19, r9
    393e:	32 60       	ori	r19, 0x02	; 2
    3940:	93 2e       	mov	r9, r19
    3942:	89 2d       	mov	r24, r9
    3944:	84 60       	ori	r24, 0x04	; 4
    3946:	98 2e       	mov	r9, r24
    3948:	2a c0       	rjmp	.+84     	; 0x399e <vfprintf+0xec>
    394a:	e9 2d       	mov	r30, r9
    394c:	e8 60       	ori	r30, 0x08	; 8
    394e:	15 c0       	rjmp	.+42     	; 0x397a <vfprintf+0xc8>
    3950:	97 fc       	sbrc	r9, 7
    3952:	2d c0       	rjmp	.+90     	; 0x39ae <vfprintf+0xfc>
    3954:	20 ed       	ldi	r18, 0xD0	; 208
    3956:	28 0f       	add	r18, r24
    3958:	2a 30       	cpi	r18, 0x0A	; 10
    395a:	88 f4       	brcc	.+34     	; 0x397e <vfprintf+0xcc>
    395c:	96 fe       	sbrs	r9, 6
    395e:	06 c0       	rjmp	.+12     	; 0x396c <vfprintf+0xba>
    3960:	3a e0       	ldi	r19, 0x0A	; 10
    3962:	13 9f       	mul	r17, r19
    3964:	20 0d       	add	r18, r0
    3966:	11 24       	eor	r1, r1
    3968:	12 2f       	mov	r17, r18
    396a:	19 c0       	rjmp	.+50     	; 0x399e <vfprintf+0xec>
    396c:	8a e0       	ldi	r24, 0x0A	; 10
    396e:	58 9e       	mul	r5, r24
    3970:	20 0d       	add	r18, r0
    3972:	11 24       	eor	r1, r1
    3974:	52 2e       	mov	r5, r18
    3976:	e9 2d       	mov	r30, r9
    3978:	e0 62       	ori	r30, 0x20	; 32
    397a:	9e 2e       	mov	r9, r30
    397c:	10 c0       	rjmp	.+32     	; 0x399e <vfprintf+0xec>
    397e:	8e 32       	cpi	r24, 0x2E	; 46
    3980:	31 f4       	brne	.+12     	; 0x398e <vfprintf+0xdc>
    3982:	96 fc       	sbrc	r9, 6
    3984:	e5 c2       	rjmp	.+1482   	; 0x3f50 <vfprintf+0x69e>
    3986:	f9 2d       	mov	r31, r9
    3988:	f0 64       	ori	r31, 0x40	; 64
    398a:	9f 2e       	mov	r9, r31
    398c:	08 c0       	rjmp	.+16     	; 0x399e <vfprintf+0xec>
    398e:	8c 36       	cpi	r24, 0x6C	; 108
    3990:	21 f4       	brne	.+8      	; 0x399a <vfprintf+0xe8>
    3992:	29 2d       	mov	r18, r9
    3994:	20 68       	ori	r18, 0x80	; 128
    3996:	92 2e       	mov	r9, r18
    3998:	02 c0       	rjmp	.+4      	; 0x399e <vfprintf+0xec>
    399a:	88 36       	cpi	r24, 0x68	; 104
    399c:	41 f4       	brne	.+16     	; 0x39ae <vfprintf+0xfc>
    399e:	f1 01       	movw	r30, r2
    39a0:	93 fd       	sbrc	r25, 3
    39a2:	85 91       	lpm	r24, Z+
    39a4:	93 ff       	sbrs	r25, 3
    39a6:	81 91       	ld	r24, Z+
    39a8:	1f 01       	movw	r2, r30
    39aa:	81 11       	cpse	r24, r1
    39ac:	b3 cf       	rjmp	.-154    	; 0x3914 <vfprintf+0x62>
    39ae:	9b eb       	ldi	r25, 0xBB	; 187
    39b0:	98 0f       	add	r25, r24
    39b2:	93 30       	cpi	r25, 0x03	; 3
    39b4:	20 f4       	brcc	.+8      	; 0x39be <vfprintf+0x10c>
    39b6:	99 2d       	mov	r25, r9
    39b8:	90 61       	ori	r25, 0x10	; 16
    39ba:	80 5e       	subi	r24, 0xE0	; 224
    39bc:	07 c0       	rjmp	.+14     	; 0x39cc <vfprintf+0x11a>
    39be:	9b e9       	ldi	r25, 0x9B	; 155
    39c0:	98 0f       	add	r25, r24
    39c2:	93 30       	cpi	r25, 0x03	; 3
    39c4:	08 f0       	brcs	.+2      	; 0x39c8 <vfprintf+0x116>
    39c6:	66 c1       	rjmp	.+716    	; 0x3c94 <vfprintf+0x3e2>
    39c8:	99 2d       	mov	r25, r9
    39ca:	9f 7e       	andi	r25, 0xEF	; 239
    39cc:	96 ff       	sbrs	r25, 6
    39ce:	16 e0       	ldi	r17, 0x06	; 6
    39d0:	9f 73       	andi	r25, 0x3F	; 63
    39d2:	99 2e       	mov	r9, r25
    39d4:	85 36       	cpi	r24, 0x65	; 101
    39d6:	19 f4       	brne	.+6      	; 0x39de <vfprintf+0x12c>
    39d8:	90 64       	ori	r25, 0x40	; 64
    39da:	99 2e       	mov	r9, r25
    39dc:	08 c0       	rjmp	.+16     	; 0x39ee <vfprintf+0x13c>
    39de:	86 36       	cpi	r24, 0x66	; 102
    39e0:	21 f4       	brne	.+8      	; 0x39ea <vfprintf+0x138>
    39e2:	39 2f       	mov	r19, r25
    39e4:	30 68       	ori	r19, 0x80	; 128
    39e6:	93 2e       	mov	r9, r19
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <vfprintf+0x13c>
    39ea:	11 11       	cpse	r17, r1
    39ec:	11 50       	subi	r17, 0x01	; 1
    39ee:	97 fe       	sbrs	r9, 7
    39f0:	07 c0       	rjmp	.+14     	; 0x3a00 <vfprintf+0x14e>
    39f2:	1c 33       	cpi	r17, 0x3C	; 60
    39f4:	50 f4       	brcc	.+20     	; 0x3a0a <vfprintf+0x158>
    39f6:	44 24       	eor	r4, r4
    39f8:	43 94       	inc	r4
    39fa:	41 0e       	add	r4, r17
    39fc:	27 e0       	ldi	r18, 0x07	; 7
    39fe:	0b c0       	rjmp	.+22     	; 0x3a16 <vfprintf+0x164>
    3a00:	18 30       	cpi	r17, 0x08	; 8
    3a02:	38 f0       	brcs	.+14     	; 0x3a12 <vfprintf+0x160>
    3a04:	27 e0       	ldi	r18, 0x07	; 7
    3a06:	17 e0       	ldi	r17, 0x07	; 7
    3a08:	05 c0       	rjmp	.+10     	; 0x3a14 <vfprintf+0x162>
    3a0a:	27 e0       	ldi	r18, 0x07	; 7
    3a0c:	9c e3       	ldi	r25, 0x3C	; 60
    3a0e:	49 2e       	mov	r4, r25
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <vfprintf+0x164>
    3a12:	21 2f       	mov	r18, r17
    3a14:	41 2c       	mov	r4, r1
    3a16:	56 01       	movw	r10, r12
    3a18:	84 e0       	ldi	r24, 0x04	; 4
    3a1a:	a8 0e       	add	r10, r24
    3a1c:	b1 1c       	adc	r11, r1
    3a1e:	f6 01       	movw	r30, r12
    3a20:	60 81       	ld	r22, Z
    3a22:	71 81       	ldd	r23, Z+1	; 0x01
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	04 2d       	mov	r16, r4
    3a2a:	a3 01       	movw	r20, r6
    3a2c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__ftoa_engine>
    3a30:	6c 01       	movw	r12, r24
    3a32:	f9 81       	ldd	r31, Y+1	; 0x01
    3a34:	fc 87       	std	Y+12, r31	; 0x0c
    3a36:	f0 ff       	sbrs	r31, 0
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <vfprintf+0x18c>
    3a3a:	f3 ff       	sbrs	r31, 3
    3a3c:	06 c0       	rjmp	.+12     	; 0x3a4a <vfprintf+0x198>
    3a3e:	91 fc       	sbrc	r9, 1
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <vfprintf+0x19c>
    3a42:	92 fe       	sbrs	r9, 2
    3a44:	06 c0       	rjmp	.+12     	; 0x3a52 <vfprintf+0x1a0>
    3a46:	00 e2       	ldi	r16, 0x20	; 32
    3a48:	05 c0       	rjmp	.+10     	; 0x3a54 <vfprintf+0x1a2>
    3a4a:	0d e2       	ldi	r16, 0x2D	; 45
    3a4c:	03 c0       	rjmp	.+6      	; 0x3a54 <vfprintf+0x1a2>
    3a4e:	0b e2       	ldi	r16, 0x2B	; 43
    3a50:	01 c0       	rjmp	.+2      	; 0x3a54 <vfprintf+0x1a2>
    3a52:	00 e0       	ldi	r16, 0x00	; 0
    3a54:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a56:	8c 70       	andi	r24, 0x0C	; 12
    3a58:	19 f0       	breq	.+6      	; 0x3a60 <vfprintf+0x1ae>
    3a5a:	01 11       	cpse	r16, r1
    3a5c:	5a c2       	rjmp	.+1204   	; 0x3f12 <vfprintf+0x660>
    3a5e:	9b c2       	rjmp	.+1334   	; 0x3f96 <vfprintf+0x6e4>
    3a60:	97 fe       	sbrs	r9, 7
    3a62:	10 c0       	rjmp	.+32     	; 0x3a84 <vfprintf+0x1d2>
    3a64:	4c 0c       	add	r4, r12
    3a66:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a68:	f4 ff       	sbrs	r31, 4
    3a6a:	04 c0       	rjmp	.+8      	; 0x3a74 <vfprintf+0x1c2>
    3a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6e:	81 33       	cpi	r24, 0x31	; 49
    3a70:	09 f4       	brne	.+2      	; 0x3a74 <vfprintf+0x1c2>
    3a72:	4a 94       	dec	r4
    3a74:	14 14       	cp	r1, r4
    3a76:	74 f5       	brge	.+92     	; 0x3ad4 <vfprintf+0x222>
    3a78:	28 e0       	ldi	r18, 0x08	; 8
    3a7a:	24 15       	cp	r18, r4
    3a7c:	78 f5       	brcc	.+94     	; 0x3adc <vfprintf+0x22a>
    3a7e:	88 e0       	ldi	r24, 0x08	; 8
    3a80:	48 2e       	mov	r4, r24
    3a82:	2c c0       	rjmp	.+88     	; 0x3adc <vfprintf+0x22a>
    3a84:	96 fc       	sbrc	r9, 6
    3a86:	2a c0       	rjmp	.+84     	; 0x3adc <vfprintf+0x22a>
    3a88:	81 2f       	mov	r24, r17
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	8c 15       	cp	r24, r12
    3a8e:	9d 05       	cpc	r25, r13
    3a90:	9c f0       	brlt	.+38     	; 0x3ab8 <vfprintf+0x206>
    3a92:	3c ef       	ldi	r19, 0xFC	; 252
    3a94:	c3 16       	cp	r12, r19
    3a96:	3f ef       	ldi	r19, 0xFF	; 255
    3a98:	d3 06       	cpc	r13, r19
    3a9a:	74 f0       	brlt	.+28     	; 0x3ab8 <vfprintf+0x206>
    3a9c:	89 2d       	mov	r24, r9
    3a9e:	80 68       	ori	r24, 0x80	; 128
    3aa0:	98 2e       	mov	r9, r24
    3aa2:	0a c0       	rjmp	.+20     	; 0x3ab8 <vfprintf+0x206>
    3aa4:	e2 e0       	ldi	r30, 0x02	; 2
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	ec 0f       	add	r30, r28
    3aaa:	fd 1f       	adc	r31, r29
    3aac:	e1 0f       	add	r30, r17
    3aae:	f1 1d       	adc	r31, r1
    3ab0:	80 81       	ld	r24, Z
    3ab2:	80 33       	cpi	r24, 0x30	; 48
    3ab4:	19 f4       	brne	.+6      	; 0x3abc <vfprintf+0x20a>
    3ab6:	11 50       	subi	r17, 0x01	; 1
    3ab8:	11 11       	cpse	r17, r1
    3aba:	f4 cf       	rjmp	.-24     	; 0x3aa4 <vfprintf+0x1f2>
    3abc:	97 fe       	sbrs	r9, 7
    3abe:	0e c0       	rjmp	.+28     	; 0x3adc <vfprintf+0x22a>
    3ac0:	44 24       	eor	r4, r4
    3ac2:	43 94       	inc	r4
    3ac4:	41 0e       	add	r4, r17
    3ac6:	81 2f       	mov	r24, r17
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	c8 16       	cp	r12, r24
    3acc:	d9 06       	cpc	r13, r25
    3ace:	2c f4       	brge	.+10     	; 0x3ada <vfprintf+0x228>
    3ad0:	1c 19       	sub	r17, r12
    3ad2:	04 c0       	rjmp	.+8      	; 0x3adc <vfprintf+0x22a>
    3ad4:	44 24       	eor	r4, r4
    3ad6:	43 94       	inc	r4
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <vfprintf+0x22a>
    3ada:	10 e0       	ldi	r17, 0x00	; 0
    3adc:	97 fe       	sbrs	r9, 7
    3ade:	06 c0       	rjmp	.+12     	; 0x3aec <vfprintf+0x23a>
    3ae0:	1c 14       	cp	r1, r12
    3ae2:	1d 04       	cpc	r1, r13
    3ae4:	34 f4       	brge	.+12     	; 0x3af2 <vfprintf+0x240>
    3ae6:	c6 01       	movw	r24, r12
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	05 c0       	rjmp	.+10     	; 0x3af6 <vfprintf+0x244>
    3aec:	85 e0       	ldi	r24, 0x05	; 5
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <vfprintf+0x244>
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	01 11       	cpse	r16, r1
    3af8:	01 96       	adiw	r24, 0x01	; 1
    3afa:	11 23       	and	r17, r17
    3afc:	31 f0       	breq	.+12     	; 0x3b0a <vfprintf+0x258>
    3afe:	21 2f       	mov	r18, r17
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	2f 5f       	subi	r18, 0xFF	; 255
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	82 0f       	add	r24, r18
    3b08:	93 1f       	adc	r25, r19
    3b0a:	25 2d       	mov	r18, r5
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	82 17       	cp	r24, r18
    3b10:	93 07       	cpc	r25, r19
    3b12:	14 f4       	brge	.+4      	; 0x3b18 <vfprintf+0x266>
    3b14:	58 1a       	sub	r5, r24
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <vfprintf+0x268>
    3b18:	51 2c       	mov	r5, r1
    3b1a:	89 2d       	mov	r24, r9
    3b1c:	89 70       	andi	r24, 0x09	; 9
    3b1e:	49 f4       	brne	.+18     	; 0x3b32 <vfprintf+0x280>
    3b20:	55 20       	and	r5, r5
    3b22:	39 f0       	breq	.+14     	; 0x3b32 <vfprintf+0x280>
    3b24:	b7 01       	movw	r22, r14
    3b26:	80 e2       	ldi	r24, 0x20	; 32
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3b2e:	5a 94       	dec	r5
    3b30:	f7 cf       	rjmp	.-18     	; 0x3b20 <vfprintf+0x26e>
    3b32:	00 23       	and	r16, r16
    3b34:	29 f0       	breq	.+10     	; 0x3b40 <vfprintf+0x28e>
    3b36:	b7 01       	movw	r22, r14
    3b38:	80 2f       	mov	r24, r16
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3b40:	93 fc       	sbrc	r9, 3
    3b42:	09 c0       	rjmp	.+18     	; 0x3b56 <vfprintf+0x2a4>
    3b44:	55 20       	and	r5, r5
    3b46:	39 f0       	breq	.+14     	; 0x3b56 <vfprintf+0x2a4>
    3b48:	b7 01       	movw	r22, r14
    3b4a:	80 e3       	ldi	r24, 0x30	; 48
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3b52:	5a 94       	dec	r5
    3b54:	f7 cf       	rjmp	.-18     	; 0x3b44 <vfprintf+0x292>
    3b56:	97 fe       	sbrs	r9, 7
    3b58:	4c c0       	rjmp	.+152    	; 0x3bf2 <vfprintf+0x340>
    3b5a:	46 01       	movw	r8, r12
    3b5c:	d7 fe       	sbrs	r13, 7
    3b5e:	02 c0       	rjmp	.+4      	; 0x3b64 <vfprintf+0x2b2>
    3b60:	81 2c       	mov	r8, r1
    3b62:	91 2c       	mov	r9, r1
    3b64:	c6 01       	movw	r24, r12
    3b66:	88 19       	sub	r24, r8
    3b68:	99 09       	sbc	r25, r9
    3b6a:	f3 01       	movw	r30, r6
    3b6c:	e8 0f       	add	r30, r24
    3b6e:	f9 1f       	adc	r31, r25
    3b70:	fe 87       	std	Y+14, r31	; 0x0e
    3b72:	ed 87       	std	Y+13, r30	; 0x0d
    3b74:	96 01       	movw	r18, r12
    3b76:	24 19       	sub	r18, r4
    3b78:	31 09       	sbc	r19, r1
    3b7a:	38 8b       	std	Y+16, r19	; 0x10
    3b7c:	2f 87       	std	Y+15, r18	; 0x0f
    3b7e:	01 2f       	mov	r16, r17
    3b80:	10 e0       	ldi	r17, 0x00	; 0
    3b82:	11 95       	neg	r17
    3b84:	01 95       	neg	r16
    3b86:	11 09       	sbc	r17, r1
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	83 16       	cp	r8, r19
    3b8c:	93 06       	cpc	r9, r19
    3b8e:	29 f4       	brne	.+10     	; 0x3b9a <vfprintf+0x2e8>
    3b90:	b7 01       	movw	r22, r14
    3b92:	8e e2       	ldi	r24, 0x2E	; 46
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3b9a:	c8 14       	cp	r12, r8
    3b9c:	d9 04       	cpc	r13, r9
    3b9e:	4c f0       	brlt	.+18     	; 0x3bb2 <vfprintf+0x300>
    3ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba2:	98 89       	ldd	r25, Y+16	; 0x10
    3ba4:	88 15       	cp	r24, r8
    3ba6:	99 05       	cpc	r25, r9
    3ba8:	24 f4       	brge	.+8      	; 0x3bb2 <vfprintf+0x300>
    3baa:	ed 85       	ldd	r30, Y+13	; 0x0d
    3bac:	fe 85       	ldd	r31, Y+14	; 0x0e
    3bae:	81 81       	ldd	r24, Z+1	; 0x01
    3bb0:	01 c0       	rjmp	.+2      	; 0x3bb4 <vfprintf+0x302>
    3bb2:	80 e3       	ldi	r24, 0x30	; 48
    3bb4:	f1 e0       	ldi	r31, 0x01	; 1
    3bb6:	8f 1a       	sub	r8, r31
    3bb8:	91 08       	sbc	r9, r1
    3bba:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bbc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bbe:	2f 5f       	subi	r18, 0xFF	; 255
    3bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc2:	3e 87       	std	Y+14, r19	; 0x0e
    3bc4:	2d 87       	std	Y+13, r18	; 0x0d
    3bc6:	80 16       	cp	r8, r16
    3bc8:	91 06       	cpc	r9, r17
    3bca:	2c f0       	brlt	.+10     	; 0x3bd6 <vfprintf+0x324>
    3bcc:	b7 01       	movw	r22, r14
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3bd4:	d9 cf       	rjmp	.-78     	; 0x3b88 <vfprintf+0x2d6>
    3bd6:	c8 14       	cp	r12, r8
    3bd8:	d9 04       	cpc	r13, r9
    3bda:	41 f4       	brne	.+16     	; 0x3bec <vfprintf+0x33a>
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	96 33       	cpi	r25, 0x36	; 54
    3be0:	20 f4       	brcc	.+8      	; 0x3bea <vfprintf+0x338>
    3be2:	95 33       	cpi	r25, 0x35	; 53
    3be4:	19 f4       	brne	.+6      	; 0x3bec <vfprintf+0x33a>
    3be6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3be8:	34 ff       	sbrs	r19, 4
    3bea:	81 e3       	ldi	r24, 0x31	; 49
    3bec:	b7 01       	movw	r22, r14
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	4e c0       	rjmp	.+156    	; 0x3c8e <vfprintf+0x3dc>
    3bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf4:	81 33       	cpi	r24, 0x31	; 49
    3bf6:	19 f0       	breq	.+6      	; 0x3bfe <vfprintf+0x34c>
    3bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bfa:	9f 7e       	andi	r25, 0xEF	; 239
    3bfc:	9c 87       	std	Y+12, r25	; 0x0c
    3bfe:	b7 01       	movw	r22, r14
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c06:	11 11       	cpse	r17, r1
    3c08:	05 c0       	rjmp	.+10     	; 0x3c14 <vfprintf+0x362>
    3c0a:	94 fc       	sbrc	r9, 4
    3c0c:	18 c0       	rjmp	.+48     	; 0x3c3e <vfprintf+0x38c>
    3c0e:	85 e6       	ldi	r24, 0x65	; 101
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	17 c0       	rjmp	.+46     	; 0x3c42 <vfprintf+0x390>
    3c14:	b7 01       	movw	r22, r14
    3c16:	8e e2       	ldi	r24, 0x2E	; 46
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c1e:	1e 5f       	subi	r17, 0xFE	; 254
    3c20:	82 e0       	ldi	r24, 0x02	; 2
    3c22:	01 e0       	ldi	r16, 0x01	; 1
    3c24:	08 0f       	add	r16, r24
    3c26:	f3 01       	movw	r30, r6
    3c28:	e8 0f       	add	r30, r24
    3c2a:	f1 1d       	adc	r31, r1
    3c2c:	80 81       	ld	r24, Z
    3c2e:	b7 01       	movw	r22, r14
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c36:	80 2f       	mov	r24, r16
    3c38:	01 13       	cpse	r16, r17
    3c3a:	f3 cf       	rjmp	.-26     	; 0x3c22 <vfprintf+0x370>
    3c3c:	e6 cf       	rjmp	.-52     	; 0x3c0a <vfprintf+0x358>
    3c3e:	85 e4       	ldi	r24, 0x45	; 69
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	b7 01       	movw	r22, r14
    3c44:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c48:	d7 fc       	sbrc	r13, 7
    3c4a:	06 c0       	rjmp	.+12     	; 0x3c58 <vfprintf+0x3a6>
    3c4c:	c1 14       	cp	r12, r1
    3c4e:	d1 04       	cpc	r13, r1
    3c50:	41 f4       	brne	.+16     	; 0x3c62 <vfprintf+0x3b0>
    3c52:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c54:	e4 ff       	sbrs	r30, 4
    3c56:	05 c0       	rjmp	.+10     	; 0x3c62 <vfprintf+0x3b0>
    3c58:	d1 94       	neg	r13
    3c5a:	c1 94       	neg	r12
    3c5c:	d1 08       	sbc	r13, r1
    3c5e:	8d e2       	ldi	r24, 0x2D	; 45
    3c60:	01 c0       	rjmp	.+2      	; 0x3c64 <vfprintf+0x3b2>
    3c62:	8b e2       	ldi	r24, 0x2B	; 43
    3c64:	b7 01       	movw	r22, r14
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c6c:	80 e3       	ldi	r24, 0x30	; 48
    3c6e:	2a e0       	ldi	r18, 0x0A	; 10
    3c70:	c2 16       	cp	r12, r18
    3c72:	d1 04       	cpc	r13, r1
    3c74:	2c f0       	brlt	.+10     	; 0x3c80 <vfprintf+0x3ce>
    3c76:	8f 5f       	subi	r24, 0xFF	; 255
    3c78:	fa e0       	ldi	r31, 0x0A	; 10
    3c7a:	cf 1a       	sub	r12, r31
    3c7c:	d1 08       	sbc	r13, r1
    3c7e:	f7 cf       	rjmp	.-18     	; 0x3c6e <vfprintf+0x3bc>
    3c80:	b7 01       	movw	r22, r14
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c88:	b7 01       	movw	r22, r14
    3c8a:	c6 01       	movw	r24, r12
    3c8c:	c0 96       	adiw	r24, 0x30	; 48
    3c8e:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3c92:	54 c1       	rjmp	.+680    	; 0x3f3c <vfprintf+0x68a>
    3c94:	83 36       	cpi	r24, 0x63	; 99
    3c96:	31 f0       	breq	.+12     	; 0x3ca4 <vfprintf+0x3f2>
    3c98:	83 37       	cpi	r24, 0x73	; 115
    3c9a:	79 f0       	breq	.+30     	; 0x3cba <vfprintf+0x408>
    3c9c:	83 35       	cpi	r24, 0x53	; 83
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <vfprintf+0x3f0>
    3ca0:	56 c0       	rjmp	.+172    	; 0x3d4e <vfprintf+0x49c>
    3ca2:	20 c0       	rjmp	.+64     	; 0x3ce4 <vfprintf+0x432>
    3ca4:	56 01       	movw	r10, r12
    3ca6:	32 e0       	ldi	r19, 0x02	; 2
    3ca8:	a3 0e       	add	r10, r19
    3caa:	b1 1c       	adc	r11, r1
    3cac:	f6 01       	movw	r30, r12
    3cae:	80 81       	ld	r24, Z
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	01 e0       	ldi	r16, 0x01	; 1
    3cb4:	10 e0       	ldi	r17, 0x00	; 0
    3cb6:	63 01       	movw	r12, r6
    3cb8:	12 c0       	rjmp	.+36     	; 0x3cde <vfprintf+0x42c>
    3cba:	56 01       	movw	r10, r12
    3cbc:	f2 e0       	ldi	r31, 0x02	; 2
    3cbe:	af 0e       	add	r10, r31
    3cc0:	b1 1c       	adc	r11, r1
    3cc2:	f6 01       	movw	r30, r12
    3cc4:	c0 80       	ld	r12, Z
    3cc6:	d1 80       	ldd	r13, Z+1	; 0x01
    3cc8:	96 fe       	sbrs	r9, 6
    3cca:	03 c0       	rjmp	.+6      	; 0x3cd2 <vfprintf+0x420>
    3ccc:	61 2f       	mov	r22, r17
    3cce:	70 e0       	ldi	r23, 0x00	; 0
    3cd0:	02 c0       	rjmp	.+4      	; 0x3cd6 <vfprintf+0x424>
    3cd2:	6f ef       	ldi	r22, 0xFF	; 255
    3cd4:	7f ef       	ldi	r23, 0xFF	; 255
    3cd6:	c6 01       	movw	r24, r12
    3cd8:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <strnlen>
    3cdc:	8c 01       	movw	r16, r24
    3cde:	f9 2d       	mov	r31, r9
    3ce0:	ff 77       	andi	r31, 0x7F	; 127
    3ce2:	14 c0       	rjmp	.+40     	; 0x3d0c <vfprintf+0x45a>
    3ce4:	56 01       	movw	r10, r12
    3ce6:	22 e0       	ldi	r18, 0x02	; 2
    3ce8:	a2 0e       	add	r10, r18
    3cea:	b1 1c       	adc	r11, r1
    3cec:	f6 01       	movw	r30, r12
    3cee:	c0 80       	ld	r12, Z
    3cf0:	d1 80       	ldd	r13, Z+1	; 0x01
    3cf2:	96 fe       	sbrs	r9, 6
    3cf4:	03 c0       	rjmp	.+6      	; 0x3cfc <vfprintf+0x44a>
    3cf6:	61 2f       	mov	r22, r17
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	02 c0       	rjmp	.+4      	; 0x3d00 <vfprintf+0x44e>
    3cfc:	6f ef       	ldi	r22, 0xFF	; 255
    3cfe:	7f ef       	ldi	r23, 0xFF	; 255
    3d00:	c6 01       	movw	r24, r12
    3d02:	0e 94 44 21 	call	0x4288	; 0x4288 <strnlen_P>
    3d06:	8c 01       	movw	r16, r24
    3d08:	f9 2d       	mov	r31, r9
    3d0a:	f0 68       	ori	r31, 0x80	; 128
    3d0c:	9f 2e       	mov	r9, r31
    3d0e:	f3 fd       	sbrc	r31, 3
    3d10:	1a c0       	rjmp	.+52     	; 0x3d46 <vfprintf+0x494>
    3d12:	85 2d       	mov	r24, r5
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	08 17       	cp	r16, r24
    3d18:	19 07       	cpc	r17, r25
    3d1a:	a8 f4       	brcc	.+42     	; 0x3d46 <vfprintf+0x494>
    3d1c:	b7 01       	movw	r22, r14
    3d1e:	80 e2       	ldi	r24, 0x20	; 32
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3d26:	5a 94       	dec	r5
    3d28:	f4 cf       	rjmp	.-24     	; 0x3d12 <vfprintf+0x460>
    3d2a:	f6 01       	movw	r30, r12
    3d2c:	97 fc       	sbrc	r9, 7
    3d2e:	85 91       	lpm	r24, Z+
    3d30:	97 fe       	sbrs	r9, 7
    3d32:	81 91       	ld	r24, Z+
    3d34:	6f 01       	movw	r12, r30
    3d36:	b7 01       	movw	r22, r14
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3d3e:	51 10       	cpse	r5, r1
    3d40:	5a 94       	dec	r5
    3d42:	01 50       	subi	r16, 0x01	; 1
    3d44:	11 09       	sbc	r17, r1
    3d46:	01 15       	cp	r16, r1
    3d48:	11 05       	cpc	r17, r1
    3d4a:	79 f7       	brne	.-34     	; 0x3d2a <vfprintf+0x478>
    3d4c:	f7 c0       	rjmp	.+494    	; 0x3f3c <vfprintf+0x68a>
    3d4e:	84 36       	cpi	r24, 0x64	; 100
    3d50:	11 f0       	breq	.+4      	; 0x3d56 <vfprintf+0x4a4>
    3d52:	89 36       	cpi	r24, 0x69	; 105
    3d54:	61 f5       	brne	.+88     	; 0x3dae <vfprintf+0x4fc>
    3d56:	56 01       	movw	r10, r12
    3d58:	97 fe       	sbrs	r9, 7
    3d5a:	09 c0       	rjmp	.+18     	; 0x3d6e <vfprintf+0x4bc>
    3d5c:	24 e0       	ldi	r18, 0x04	; 4
    3d5e:	a2 0e       	add	r10, r18
    3d60:	b1 1c       	adc	r11, r1
    3d62:	f6 01       	movw	r30, r12
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	0a c0       	rjmp	.+20     	; 0x3d82 <vfprintf+0x4d0>
    3d6e:	f2 e0       	ldi	r31, 0x02	; 2
    3d70:	af 0e       	add	r10, r31
    3d72:	b1 1c       	adc	r11, r1
    3d74:	f6 01       	movw	r30, r12
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	07 2e       	mov	r0, r23
    3d7c:	00 0c       	add	r0, r0
    3d7e:	88 0b       	sbc	r24, r24
    3d80:	99 0b       	sbc	r25, r25
    3d82:	f9 2d       	mov	r31, r9
    3d84:	ff 76       	andi	r31, 0x6F	; 111
    3d86:	9f 2e       	mov	r9, r31
    3d88:	97 ff       	sbrs	r25, 7
    3d8a:	09 c0       	rjmp	.+18     	; 0x3d9e <vfprintf+0x4ec>
    3d8c:	90 95       	com	r25
    3d8e:	80 95       	com	r24
    3d90:	70 95       	com	r23
    3d92:	61 95       	neg	r22
    3d94:	7f 4f       	sbci	r23, 0xFF	; 255
    3d96:	8f 4f       	sbci	r24, 0xFF	; 255
    3d98:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9a:	f0 68       	ori	r31, 0x80	; 128
    3d9c:	9f 2e       	mov	r9, r31
    3d9e:	2a e0       	ldi	r18, 0x0A	; 10
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	a3 01       	movw	r20, r6
    3da4:	0e 94 bf 21 	call	0x437e	; 0x437e <__ultoa_invert>
    3da8:	c8 2e       	mov	r12, r24
    3daa:	c6 18       	sub	r12, r6
    3dac:	3f c0       	rjmp	.+126    	; 0x3e2c <vfprintf+0x57a>
    3dae:	09 2d       	mov	r16, r9
    3db0:	85 37       	cpi	r24, 0x75	; 117
    3db2:	21 f4       	brne	.+8      	; 0x3dbc <vfprintf+0x50a>
    3db4:	0f 7e       	andi	r16, 0xEF	; 239
    3db6:	2a e0       	ldi	r18, 0x0A	; 10
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	1d c0       	rjmp	.+58     	; 0x3df6 <vfprintf+0x544>
    3dbc:	09 7f       	andi	r16, 0xF9	; 249
    3dbe:	8f 36       	cpi	r24, 0x6F	; 111
    3dc0:	91 f0       	breq	.+36     	; 0x3de6 <vfprintf+0x534>
    3dc2:	18 f4       	brcc	.+6      	; 0x3dca <vfprintf+0x518>
    3dc4:	88 35       	cpi	r24, 0x58	; 88
    3dc6:	59 f0       	breq	.+22     	; 0x3dde <vfprintf+0x52c>
    3dc8:	c3 c0       	rjmp	.+390    	; 0x3f50 <vfprintf+0x69e>
    3dca:	80 37       	cpi	r24, 0x70	; 112
    3dcc:	19 f0       	breq	.+6      	; 0x3dd4 <vfprintf+0x522>
    3dce:	88 37       	cpi	r24, 0x78	; 120
    3dd0:	11 f0       	breq	.+4      	; 0x3dd6 <vfprintf+0x524>
    3dd2:	be c0       	rjmp	.+380    	; 0x3f50 <vfprintf+0x69e>
    3dd4:	00 61       	ori	r16, 0x10	; 16
    3dd6:	04 ff       	sbrs	r16, 4
    3dd8:	09 c0       	rjmp	.+18     	; 0x3dec <vfprintf+0x53a>
    3dda:	04 60       	ori	r16, 0x04	; 4
    3ddc:	07 c0       	rjmp	.+14     	; 0x3dec <vfprintf+0x53a>
    3dde:	94 fe       	sbrs	r9, 4
    3de0:	08 c0       	rjmp	.+16     	; 0x3df2 <vfprintf+0x540>
    3de2:	06 60       	ori	r16, 0x06	; 6
    3de4:	06 c0       	rjmp	.+12     	; 0x3df2 <vfprintf+0x540>
    3de6:	28 e0       	ldi	r18, 0x08	; 8
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	05 c0       	rjmp	.+10     	; 0x3df6 <vfprintf+0x544>
    3dec:	20 e1       	ldi	r18, 0x10	; 16
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <vfprintf+0x544>
    3df2:	20 e1       	ldi	r18, 0x10	; 16
    3df4:	32 e0       	ldi	r19, 0x02	; 2
    3df6:	56 01       	movw	r10, r12
    3df8:	07 ff       	sbrs	r16, 7
    3dfa:	09 c0       	rjmp	.+18     	; 0x3e0e <vfprintf+0x55c>
    3dfc:	84 e0       	ldi	r24, 0x04	; 4
    3dfe:	a8 0e       	add	r10, r24
    3e00:	b1 1c       	adc	r11, r1
    3e02:	f6 01       	movw	r30, r12
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	08 c0       	rjmp	.+16     	; 0x3e1e <vfprintf+0x56c>
    3e0e:	f2 e0       	ldi	r31, 0x02	; 2
    3e10:	af 0e       	add	r10, r31
    3e12:	b1 1c       	adc	r11, r1
    3e14:	f6 01       	movw	r30, r12
    3e16:	60 81       	ld	r22, Z
    3e18:	71 81       	ldd	r23, Z+1	; 0x01
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a3 01       	movw	r20, r6
    3e20:	0e 94 bf 21 	call	0x437e	; 0x437e <__ultoa_invert>
    3e24:	c8 2e       	mov	r12, r24
    3e26:	c6 18       	sub	r12, r6
    3e28:	0f 77       	andi	r16, 0x7F	; 127
    3e2a:	90 2e       	mov	r9, r16
    3e2c:	96 fe       	sbrs	r9, 6
    3e2e:	0b c0       	rjmp	.+22     	; 0x3e46 <vfprintf+0x594>
    3e30:	09 2d       	mov	r16, r9
    3e32:	0e 7f       	andi	r16, 0xFE	; 254
    3e34:	c1 16       	cp	r12, r17
    3e36:	50 f4       	brcc	.+20     	; 0x3e4c <vfprintf+0x59a>
    3e38:	94 fe       	sbrs	r9, 4
    3e3a:	0a c0       	rjmp	.+20     	; 0x3e50 <vfprintf+0x59e>
    3e3c:	92 fc       	sbrc	r9, 2
    3e3e:	08 c0       	rjmp	.+16     	; 0x3e50 <vfprintf+0x59e>
    3e40:	09 2d       	mov	r16, r9
    3e42:	0e 7e       	andi	r16, 0xEE	; 238
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <vfprintf+0x59e>
    3e46:	dc 2c       	mov	r13, r12
    3e48:	09 2d       	mov	r16, r9
    3e4a:	03 c0       	rjmp	.+6      	; 0x3e52 <vfprintf+0x5a0>
    3e4c:	dc 2c       	mov	r13, r12
    3e4e:	01 c0       	rjmp	.+2      	; 0x3e52 <vfprintf+0x5a0>
    3e50:	d1 2e       	mov	r13, r17
    3e52:	04 ff       	sbrs	r16, 4
    3e54:	0d c0       	rjmp	.+26     	; 0x3e70 <vfprintf+0x5be>
    3e56:	fe 01       	movw	r30, r28
    3e58:	ec 0d       	add	r30, r12
    3e5a:	f1 1d       	adc	r31, r1
    3e5c:	80 81       	ld	r24, Z
    3e5e:	80 33       	cpi	r24, 0x30	; 48
    3e60:	11 f4       	brne	.+4      	; 0x3e66 <vfprintf+0x5b4>
    3e62:	09 7e       	andi	r16, 0xE9	; 233
    3e64:	09 c0       	rjmp	.+18     	; 0x3e78 <vfprintf+0x5c6>
    3e66:	02 ff       	sbrs	r16, 2
    3e68:	06 c0       	rjmp	.+12     	; 0x3e76 <vfprintf+0x5c4>
    3e6a:	d3 94       	inc	r13
    3e6c:	d3 94       	inc	r13
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <vfprintf+0x5c6>
    3e70:	80 2f       	mov	r24, r16
    3e72:	86 78       	andi	r24, 0x86	; 134
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <vfprintf+0x5c6>
    3e76:	d3 94       	inc	r13
    3e78:	03 fd       	sbrc	r16, 3
    3e7a:	11 c0       	rjmp	.+34     	; 0x3e9e <vfprintf+0x5ec>
    3e7c:	00 ff       	sbrs	r16, 0
    3e7e:	06 c0       	rjmp	.+12     	; 0x3e8c <vfprintf+0x5da>
    3e80:	1c 2d       	mov	r17, r12
    3e82:	d5 14       	cp	r13, r5
    3e84:	80 f4       	brcc	.+32     	; 0x3ea6 <vfprintf+0x5f4>
    3e86:	15 0d       	add	r17, r5
    3e88:	1d 19       	sub	r17, r13
    3e8a:	0d c0       	rjmp	.+26     	; 0x3ea6 <vfprintf+0x5f4>
    3e8c:	d5 14       	cp	r13, r5
    3e8e:	58 f4       	brcc	.+22     	; 0x3ea6 <vfprintf+0x5f4>
    3e90:	b7 01       	movw	r22, r14
    3e92:	80 e2       	ldi	r24, 0x20	; 32
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3e9a:	d3 94       	inc	r13
    3e9c:	f7 cf       	rjmp	.-18     	; 0x3e8c <vfprintf+0x5da>
    3e9e:	d5 14       	cp	r13, r5
    3ea0:	10 f4       	brcc	.+4      	; 0x3ea6 <vfprintf+0x5f4>
    3ea2:	5d 18       	sub	r5, r13
    3ea4:	01 c0       	rjmp	.+2      	; 0x3ea8 <vfprintf+0x5f6>
    3ea6:	51 2c       	mov	r5, r1
    3ea8:	04 ff       	sbrs	r16, 4
    3eaa:	10 c0       	rjmp	.+32     	; 0x3ecc <vfprintf+0x61a>
    3eac:	b7 01       	movw	r22, r14
    3eae:	80 e3       	ldi	r24, 0x30	; 48
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3eb6:	02 ff       	sbrs	r16, 2
    3eb8:	17 c0       	rjmp	.+46     	; 0x3ee8 <vfprintf+0x636>
    3eba:	01 fd       	sbrc	r16, 1
    3ebc:	03 c0       	rjmp	.+6      	; 0x3ec4 <vfprintf+0x612>
    3ebe:	88 e7       	ldi	r24, 0x78	; 120
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <vfprintf+0x616>
    3ec4:	88 e5       	ldi	r24, 0x58	; 88
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	b7 01       	movw	r22, r14
    3eca:	0c c0       	rjmp	.+24     	; 0x3ee4 <vfprintf+0x632>
    3ecc:	80 2f       	mov	r24, r16
    3ece:	86 78       	andi	r24, 0x86	; 134
    3ed0:	59 f0       	breq	.+22     	; 0x3ee8 <vfprintf+0x636>
    3ed2:	01 ff       	sbrs	r16, 1
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <vfprintf+0x628>
    3ed6:	8b e2       	ldi	r24, 0x2B	; 43
    3ed8:	01 c0       	rjmp	.+2      	; 0x3edc <vfprintf+0x62a>
    3eda:	80 e2       	ldi	r24, 0x20	; 32
    3edc:	07 fd       	sbrc	r16, 7
    3ede:	8d e2       	ldi	r24, 0x2D	; 45
    3ee0:	b7 01       	movw	r22, r14
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3ee8:	c1 16       	cp	r12, r17
    3eea:	38 f4       	brcc	.+14     	; 0x3efa <vfprintf+0x648>
    3eec:	b7 01       	movw	r22, r14
    3eee:	80 e3       	ldi	r24, 0x30	; 48
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3ef6:	11 50       	subi	r17, 0x01	; 1
    3ef8:	f7 cf       	rjmp	.-18     	; 0x3ee8 <vfprintf+0x636>
    3efa:	ca 94       	dec	r12
    3efc:	f3 01       	movw	r30, r6
    3efe:	ec 0d       	add	r30, r12
    3f00:	f1 1d       	adc	r31, r1
    3f02:	80 81       	ld	r24, Z
    3f04:	b7 01       	movw	r22, r14
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3f0c:	c1 10       	cpse	r12, r1
    3f0e:	f5 cf       	rjmp	.-22     	; 0x3efa <vfprintf+0x648>
    3f10:	15 c0       	rjmp	.+42     	; 0x3f3c <vfprintf+0x68a>
    3f12:	f4 e0       	ldi	r31, 0x04	; 4
    3f14:	f5 15       	cp	r31, r5
    3f16:	60 f5       	brcc	.+88     	; 0x3f70 <vfprintf+0x6be>
    3f18:	84 e0       	ldi	r24, 0x04	; 4
    3f1a:	58 1a       	sub	r5, r24
    3f1c:	93 fe       	sbrs	r9, 3
    3f1e:	1f c0       	rjmp	.+62     	; 0x3f5e <vfprintf+0x6ac>
    3f20:	01 11       	cpse	r16, r1
    3f22:	27 c0       	rjmp	.+78     	; 0x3f72 <vfprintf+0x6c0>
    3f24:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f26:	23 ff       	sbrs	r18, 3
    3f28:	2a c0       	rjmp	.+84     	; 0x3f7e <vfprintf+0x6cc>
    3f2a:	04 ed       	ldi	r16, 0xD4	; 212
    3f2c:	12 e0       	ldi	r17, 0x02	; 2
    3f2e:	39 2d       	mov	r19, r9
    3f30:	30 71       	andi	r19, 0x10	; 16
    3f32:	93 2e       	mov	r9, r19
    3f34:	f8 01       	movw	r30, r16
    3f36:	84 91       	lpm	r24, Z
    3f38:	81 11       	cpse	r24, r1
    3f3a:	24 c0       	rjmp	.+72     	; 0x3f84 <vfprintf+0x6d2>
    3f3c:	55 20       	and	r5, r5
    3f3e:	09 f4       	brne	.+2      	; 0x3f42 <vfprintf+0x690>
    3f40:	e4 cc       	rjmp	.-1592   	; 0x390a <vfprintf+0x58>
    3f42:	b7 01       	movw	r22, r14
    3f44:	80 e2       	ldi	r24, 0x20	; 32
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3f4c:	5a 94       	dec	r5
    3f4e:	f6 cf       	rjmp	.-20     	; 0x3f3c <vfprintf+0x68a>
    3f50:	f7 01       	movw	r30, r14
    3f52:	86 81       	ldd	r24, Z+6	; 0x06
    3f54:	97 81       	ldd	r25, Z+7	; 0x07
    3f56:	26 c0       	rjmp	.+76     	; 0x3fa4 <vfprintf+0x6f2>
    3f58:	8f ef       	ldi	r24, 0xFF	; 255
    3f5a:	9f ef       	ldi	r25, 0xFF	; 255
    3f5c:	23 c0       	rjmp	.+70     	; 0x3fa4 <vfprintf+0x6f2>
    3f5e:	b7 01       	movw	r22, r14
    3f60:	80 e2       	ldi	r24, 0x20	; 32
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3f68:	5a 94       	dec	r5
    3f6a:	51 10       	cpse	r5, r1
    3f6c:	f8 cf       	rjmp	.-16     	; 0x3f5e <vfprintf+0x6ac>
    3f6e:	d8 cf       	rjmp	.-80     	; 0x3f20 <vfprintf+0x66e>
    3f70:	51 2c       	mov	r5, r1
    3f72:	b7 01       	movw	r22, r14
    3f74:	80 2f       	mov	r24, r16
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3f7c:	d3 cf       	rjmp	.-90     	; 0x3f24 <vfprintf+0x672>
    3f7e:	08 ed       	ldi	r16, 0xD8	; 216
    3f80:	12 e0       	ldi	r17, 0x02	; 2
    3f82:	d5 cf       	rjmp	.-86     	; 0x3f2e <vfprintf+0x67c>
    3f84:	91 10       	cpse	r9, r1
    3f86:	80 52       	subi	r24, 0x20	; 32
    3f88:	b7 01       	movw	r22, r14
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 67 21 	call	0x42ce	; 0x42ce <fputc>
    3f90:	0f 5f       	subi	r16, 0xFF	; 255
    3f92:	1f 4f       	sbci	r17, 0xFF	; 255
    3f94:	cf cf       	rjmp	.-98     	; 0x3f34 <vfprintf+0x682>
    3f96:	23 e0       	ldi	r18, 0x03	; 3
    3f98:	25 15       	cp	r18, r5
    3f9a:	10 f4       	brcc	.+4      	; 0x3fa0 <vfprintf+0x6ee>
    3f9c:	83 e0       	ldi	r24, 0x03	; 3
    3f9e:	bd cf       	rjmp	.-134    	; 0x3f1a <vfprintf+0x668>
    3fa0:	51 2c       	mov	r5, r1
    3fa2:	c0 cf       	rjmp	.-128    	; 0x3f24 <vfprintf+0x672>
    3fa4:	60 96       	adiw	r28, 0x10	; 16
    3fa6:	e2 e1       	ldi	r30, 0x12	; 18
    3fa8:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__epilogue_restores__>

00003fac <__divmodhi4>:
    3fac:	97 fb       	bst	r25, 7
    3fae:	07 2e       	mov	r0, r23
    3fb0:	16 f4       	brtc	.+4      	; 0x3fb6 <__divmodhi4+0xa>
    3fb2:	00 94       	com	r0
    3fb4:	07 d0       	rcall	.+14     	; 0x3fc4 <__divmodhi4_neg1>
    3fb6:	77 fd       	sbrc	r23, 7
    3fb8:	09 d0       	rcall	.+18     	; 0x3fcc <__divmodhi4_neg2>
    3fba:	0e 94 58 20 	call	0x40b0	; 0x40b0 <__udivmodhi4>
    3fbe:	07 fc       	sbrc	r0, 7
    3fc0:	05 d0       	rcall	.+10     	; 0x3fcc <__divmodhi4_neg2>
    3fc2:	3e f4       	brtc	.+14     	; 0x3fd2 <__divmodhi4_exit>

00003fc4 <__divmodhi4_neg1>:
    3fc4:	90 95       	com	r25
    3fc6:	81 95       	neg	r24
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fca:	08 95       	ret

00003fcc <__divmodhi4_neg2>:
    3fcc:	70 95       	com	r23
    3fce:	61 95       	neg	r22
    3fd0:	7f 4f       	sbci	r23, 0xFF	; 255

00003fd2 <__divmodhi4_exit>:
    3fd2:	08 95       	ret

00003fd4 <__udivmodsi4>:
    3fd4:	a1 e2       	ldi	r26, 0x21	; 33
    3fd6:	1a 2e       	mov	r1, r26
    3fd8:	aa 1b       	sub	r26, r26
    3fda:	bb 1b       	sub	r27, r27
    3fdc:	fd 01       	movw	r30, r26
    3fde:	0d c0       	rjmp	.+26     	; 0x3ffa <__udivmodsi4_ep>

00003fe0 <__udivmodsi4_loop>:
    3fe0:	aa 1f       	adc	r26, r26
    3fe2:	bb 1f       	adc	r27, r27
    3fe4:	ee 1f       	adc	r30, r30
    3fe6:	ff 1f       	adc	r31, r31
    3fe8:	a2 17       	cp	r26, r18
    3fea:	b3 07       	cpc	r27, r19
    3fec:	e4 07       	cpc	r30, r20
    3fee:	f5 07       	cpc	r31, r21
    3ff0:	20 f0       	brcs	.+8      	; 0x3ffa <__udivmodsi4_ep>
    3ff2:	a2 1b       	sub	r26, r18
    3ff4:	b3 0b       	sbc	r27, r19
    3ff6:	e4 0b       	sbc	r30, r20
    3ff8:	f5 0b       	sbc	r31, r21

00003ffa <__udivmodsi4_ep>:
    3ffa:	66 1f       	adc	r22, r22
    3ffc:	77 1f       	adc	r23, r23
    3ffe:	88 1f       	adc	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	1a 94       	dec	r1
    4004:	69 f7       	brne	.-38     	; 0x3fe0 <__udivmodsi4_loop>
    4006:	60 95       	com	r22
    4008:	70 95       	com	r23
    400a:	80 95       	com	r24
    400c:	90 95       	com	r25
    400e:	9b 01       	movw	r18, r22
    4010:	ac 01       	movw	r20, r24
    4012:	bd 01       	movw	r22, r26
    4014:	cf 01       	movw	r24, r30
    4016:	08 95       	ret

00004018 <__tablejump2__>:
    4018:	ee 0f       	add	r30, r30
    401a:	ff 1f       	adc	r31, r31
    401c:	05 90       	lpm	r0, Z+
    401e:	f4 91       	lpm	r31, Z
    4020:	e0 2d       	mov	r30, r0
    4022:	09 94       	ijmp

00004024 <__umulhisi3>:
    4024:	a2 9f       	mul	r26, r18
    4026:	b0 01       	movw	r22, r0
    4028:	b3 9f       	mul	r27, r19
    402a:	c0 01       	movw	r24, r0
    402c:	a3 9f       	mul	r26, r19
    402e:	70 0d       	add	r23, r0
    4030:	81 1d       	adc	r24, r1
    4032:	11 24       	eor	r1, r1
    4034:	91 1d       	adc	r25, r1
    4036:	b2 9f       	mul	r27, r18
    4038:	70 0d       	add	r23, r0
    403a:	81 1d       	adc	r24, r1
    403c:	11 24       	eor	r1, r1
    403e:	91 1d       	adc	r25, r1
    4040:	08 95       	ret

00004042 <__prologue_saves__>:
    4042:	2f 92       	push	r2
    4044:	3f 92       	push	r3
    4046:	4f 92       	push	r4
    4048:	5f 92       	push	r5
    404a:	6f 92       	push	r6
    404c:	7f 92       	push	r7
    404e:	8f 92       	push	r8
    4050:	9f 92       	push	r9
    4052:	af 92       	push	r10
    4054:	bf 92       	push	r11
    4056:	cf 92       	push	r12
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	ca 1b       	sub	r28, r26
    406c:	db 0b       	sbc	r29, r27
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	09 94       	ijmp

0000407a <__epilogue_restores__>:
    407a:	2a 88       	ldd	r2, Y+18	; 0x12
    407c:	39 88       	ldd	r3, Y+17	; 0x11
    407e:	48 88       	ldd	r4, Y+16	; 0x10
    4080:	5f 84       	ldd	r5, Y+15	; 0x0f
    4082:	6e 84       	ldd	r6, Y+14	; 0x0e
    4084:	7d 84       	ldd	r7, Y+13	; 0x0d
    4086:	8c 84       	ldd	r8, Y+12	; 0x0c
    4088:	9b 84       	ldd	r9, Y+11	; 0x0b
    408a:	aa 84       	ldd	r10, Y+10	; 0x0a
    408c:	b9 84       	ldd	r11, Y+9	; 0x09
    408e:	c8 84       	ldd	r12, Y+8	; 0x08
    4090:	df 80       	ldd	r13, Y+7	; 0x07
    4092:	ee 80       	ldd	r14, Y+6	; 0x06
    4094:	fd 80       	ldd	r15, Y+5	; 0x05
    4096:	0c 81       	ldd	r16, Y+4	; 0x04
    4098:	1b 81       	ldd	r17, Y+3	; 0x03
    409a:	aa 81       	ldd	r26, Y+2	; 0x02
    409c:	b9 81       	ldd	r27, Y+1	; 0x01
    409e:	ce 0f       	add	r28, r30
    40a0:	d1 1d       	adc	r29, r1
    40a2:	0f b6       	in	r0, 0x3f	; 63
    40a4:	f8 94       	cli
    40a6:	de bf       	out	0x3e, r29	; 62
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	cd bf       	out	0x3d, r28	; 61
    40ac:	ed 01       	movw	r28, r26
    40ae:	08 95       	ret

000040b0 <__udivmodhi4>:
    40b0:	aa 1b       	sub	r26, r26
    40b2:	bb 1b       	sub	r27, r27
    40b4:	51 e1       	ldi	r21, 0x11	; 17
    40b6:	07 c0       	rjmp	.+14     	; 0x40c6 <__udivmodhi4_ep>

000040b8 <__udivmodhi4_loop>:
    40b8:	aa 1f       	adc	r26, r26
    40ba:	bb 1f       	adc	r27, r27
    40bc:	a6 17       	cp	r26, r22
    40be:	b7 07       	cpc	r27, r23
    40c0:	10 f0       	brcs	.+4      	; 0x40c6 <__udivmodhi4_ep>
    40c2:	a6 1b       	sub	r26, r22
    40c4:	b7 0b       	sbc	r27, r23

000040c6 <__udivmodhi4_ep>:
    40c6:	88 1f       	adc	r24, r24
    40c8:	99 1f       	adc	r25, r25
    40ca:	5a 95       	dec	r21
    40cc:	a9 f7       	brne	.-22     	; 0x40b8 <__udivmodhi4_loop>
    40ce:	80 95       	com	r24
    40d0:	90 95       	com	r25
    40d2:	bc 01       	movw	r22, r24
    40d4:	cd 01       	movw	r24, r26
    40d6:	08 95       	ret

000040d8 <__ftoa_engine>:
    40d8:	28 30       	cpi	r18, 0x08	; 8
    40da:	08 f0       	brcs	.+2      	; 0x40de <__ftoa_engine+0x6>
    40dc:	27 e0       	ldi	r18, 0x07	; 7
    40de:	33 27       	eor	r19, r19
    40e0:	da 01       	movw	r26, r20
    40e2:	99 0f       	add	r25, r25
    40e4:	31 1d       	adc	r19, r1
    40e6:	87 fd       	sbrc	r24, 7
    40e8:	91 60       	ori	r25, 0x01	; 1
    40ea:	00 96       	adiw	r24, 0x00	; 0
    40ec:	61 05       	cpc	r22, r1
    40ee:	71 05       	cpc	r23, r1
    40f0:	39 f4       	brne	.+14     	; 0x4100 <__ftoa_engine+0x28>
    40f2:	32 60       	ori	r19, 0x02	; 2
    40f4:	2e 5f       	subi	r18, 0xFE	; 254
    40f6:	3d 93       	st	X+, r19
    40f8:	30 e3       	ldi	r19, 0x30	; 48
    40fa:	2a 95       	dec	r18
    40fc:	e1 f7       	brne	.-8      	; 0x40f6 <__ftoa_engine+0x1e>
    40fe:	08 95       	ret
    4100:	9f 3f       	cpi	r25, 0xFF	; 255
    4102:	30 f0       	brcs	.+12     	; 0x4110 <__ftoa_engine+0x38>
    4104:	80 38       	cpi	r24, 0x80	; 128
    4106:	71 05       	cpc	r23, r1
    4108:	61 05       	cpc	r22, r1
    410a:	09 f0       	breq	.+2      	; 0x410e <__ftoa_engine+0x36>
    410c:	3c 5f       	subi	r19, 0xFC	; 252
    410e:	3c 5f       	subi	r19, 0xFC	; 252
    4110:	3d 93       	st	X+, r19
    4112:	91 30       	cpi	r25, 0x01	; 1
    4114:	08 f0       	brcs	.+2      	; 0x4118 <__ftoa_engine+0x40>
    4116:	80 68       	ori	r24, 0x80	; 128
    4118:	91 1d       	adc	r25, r1
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	1f 93       	push	r17
    4120:	0f 93       	push	r16
    4122:	ff 92       	push	r15
    4124:	ef 92       	push	r14
    4126:	19 2f       	mov	r17, r25
    4128:	98 7f       	andi	r25, 0xF8	; 248
    412a:	96 95       	lsr	r25
    412c:	e9 2f       	mov	r30, r25
    412e:	96 95       	lsr	r25
    4130:	96 95       	lsr	r25
    4132:	e9 0f       	add	r30, r25
    4134:	ff 27       	eor	r31, r31
    4136:	ea 5c       	subi	r30, 0xCA	; 202
    4138:	fc 4f       	sbci	r31, 0xFC	; 252
    413a:	99 27       	eor	r25, r25
    413c:	33 27       	eor	r19, r19
    413e:	ee 24       	eor	r14, r14
    4140:	ff 24       	eor	r15, r15
    4142:	a7 01       	movw	r20, r14
    4144:	e7 01       	movw	r28, r14
    4146:	05 90       	lpm	r0, Z+
    4148:	08 94       	sec
    414a:	07 94       	ror	r0
    414c:	28 f4       	brcc	.+10     	; 0x4158 <__ftoa_engine+0x80>
    414e:	36 0f       	add	r19, r22
    4150:	e7 1e       	adc	r14, r23
    4152:	f8 1e       	adc	r15, r24
    4154:	49 1f       	adc	r20, r25
    4156:	51 1d       	adc	r21, r1
    4158:	66 0f       	add	r22, r22
    415a:	77 1f       	adc	r23, r23
    415c:	88 1f       	adc	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	06 94       	lsr	r0
    4162:	a1 f7       	brne	.-24     	; 0x414c <__ftoa_engine+0x74>
    4164:	05 90       	lpm	r0, Z+
    4166:	07 94       	ror	r0
    4168:	28 f4       	brcc	.+10     	; 0x4174 <__ftoa_engine+0x9c>
    416a:	e7 0e       	add	r14, r23
    416c:	f8 1e       	adc	r15, r24
    416e:	49 1f       	adc	r20, r25
    4170:	56 1f       	adc	r21, r22
    4172:	c1 1d       	adc	r28, r1
    4174:	77 0f       	add	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	99 1f       	adc	r25, r25
    417a:	66 1f       	adc	r22, r22
    417c:	06 94       	lsr	r0
    417e:	a1 f7       	brne	.-24     	; 0x4168 <__ftoa_engine+0x90>
    4180:	05 90       	lpm	r0, Z+
    4182:	07 94       	ror	r0
    4184:	28 f4       	brcc	.+10     	; 0x4190 <__ftoa_engine+0xb8>
    4186:	f8 0e       	add	r15, r24
    4188:	49 1f       	adc	r20, r25
    418a:	56 1f       	adc	r21, r22
    418c:	c7 1f       	adc	r28, r23
    418e:	d1 1d       	adc	r29, r1
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	66 1f       	adc	r22, r22
    4196:	77 1f       	adc	r23, r23
    4198:	06 94       	lsr	r0
    419a:	a1 f7       	brne	.-24     	; 0x4184 <__ftoa_engine+0xac>
    419c:	05 90       	lpm	r0, Z+
    419e:	07 94       	ror	r0
    41a0:	20 f4       	brcc	.+8      	; 0x41aa <__ftoa_engine+0xd2>
    41a2:	49 0f       	add	r20, r25
    41a4:	56 1f       	adc	r21, r22
    41a6:	c7 1f       	adc	r28, r23
    41a8:	d8 1f       	adc	r29, r24
    41aa:	99 0f       	add	r25, r25
    41ac:	66 1f       	adc	r22, r22
    41ae:	77 1f       	adc	r23, r23
    41b0:	88 1f       	adc	r24, r24
    41b2:	06 94       	lsr	r0
    41b4:	a9 f7       	brne	.-22     	; 0x41a0 <__ftoa_engine+0xc8>
    41b6:	84 91       	lpm	r24, Z
    41b8:	10 95       	com	r17
    41ba:	17 70       	andi	r17, 0x07	; 7
    41bc:	41 f0       	breq	.+16     	; 0x41ce <__ftoa_engine+0xf6>
    41be:	d6 95       	lsr	r29
    41c0:	c7 95       	ror	r28
    41c2:	57 95       	ror	r21
    41c4:	47 95       	ror	r20
    41c6:	f7 94       	ror	r15
    41c8:	e7 94       	ror	r14
    41ca:	1a 95       	dec	r17
    41cc:	c1 f7       	brne	.-16     	; 0x41be <__ftoa_engine+0xe6>
    41ce:	ec ed       	ldi	r30, 0xDC	; 220
    41d0:	f2 e0       	ldi	r31, 0x02	; 2
    41d2:	68 94       	set
    41d4:	15 90       	lpm	r1, Z+
    41d6:	15 91       	lpm	r17, Z+
    41d8:	35 91       	lpm	r19, Z+
    41da:	65 91       	lpm	r22, Z+
    41dc:	95 91       	lpm	r25, Z+
    41de:	05 90       	lpm	r0, Z+
    41e0:	7f e2       	ldi	r23, 0x2F	; 47
    41e2:	73 95       	inc	r23
    41e4:	e1 18       	sub	r14, r1
    41e6:	f1 0a       	sbc	r15, r17
    41e8:	43 0b       	sbc	r20, r19
    41ea:	56 0b       	sbc	r21, r22
    41ec:	c9 0b       	sbc	r28, r25
    41ee:	d0 09       	sbc	r29, r0
    41f0:	c0 f7       	brcc	.-16     	; 0x41e2 <__ftoa_engine+0x10a>
    41f2:	e1 0c       	add	r14, r1
    41f4:	f1 1e       	adc	r15, r17
    41f6:	43 1f       	adc	r20, r19
    41f8:	56 1f       	adc	r21, r22
    41fa:	c9 1f       	adc	r28, r25
    41fc:	d0 1d       	adc	r29, r0
    41fe:	7e f4       	brtc	.+30     	; 0x421e <__ftoa_engine+0x146>
    4200:	70 33       	cpi	r23, 0x30	; 48
    4202:	11 f4       	brne	.+4      	; 0x4208 <__ftoa_engine+0x130>
    4204:	8a 95       	dec	r24
    4206:	e6 cf       	rjmp	.-52     	; 0x41d4 <__ftoa_engine+0xfc>
    4208:	e8 94       	clt
    420a:	01 50       	subi	r16, 0x01	; 1
    420c:	30 f0       	brcs	.+12     	; 0x421a <__ftoa_engine+0x142>
    420e:	08 0f       	add	r16, r24
    4210:	0a f4       	brpl	.+2      	; 0x4214 <__ftoa_engine+0x13c>
    4212:	00 27       	eor	r16, r16
    4214:	02 17       	cp	r16, r18
    4216:	08 f4       	brcc	.+2      	; 0x421a <__ftoa_engine+0x142>
    4218:	20 2f       	mov	r18, r16
    421a:	23 95       	inc	r18
    421c:	02 2f       	mov	r16, r18
    421e:	7a 33       	cpi	r23, 0x3A	; 58
    4220:	28 f0       	brcs	.+10     	; 0x422c <__ftoa_engine+0x154>
    4222:	79 e3       	ldi	r23, 0x39	; 57
    4224:	7d 93       	st	X+, r23
    4226:	2a 95       	dec	r18
    4228:	e9 f7       	brne	.-6      	; 0x4224 <__ftoa_engine+0x14c>
    422a:	10 c0       	rjmp	.+32     	; 0x424c <__ftoa_engine+0x174>
    422c:	7d 93       	st	X+, r23
    422e:	2a 95       	dec	r18
    4230:	89 f6       	brne	.-94     	; 0x41d4 <__ftoa_engine+0xfc>
    4232:	06 94       	lsr	r0
    4234:	97 95       	ror	r25
    4236:	67 95       	ror	r22
    4238:	37 95       	ror	r19
    423a:	17 95       	ror	r17
    423c:	17 94       	ror	r1
    423e:	e1 18       	sub	r14, r1
    4240:	f1 0a       	sbc	r15, r17
    4242:	43 0b       	sbc	r20, r19
    4244:	56 0b       	sbc	r21, r22
    4246:	c9 0b       	sbc	r28, r25
    4248:	d0 09       	sbc	r29, r0
    424a:	98 f0       	brcs	.+38     	; 0x4272 <__ftoa_engine+0x19a>
    424c:	23 95       	inc	r18
    424e:	7e 91       	ld	r23, -X
    4250:	73 95       	inc	r23
    4252:	7a 33       	cpi	r23, 0x3A	; 58
    4254:	08 f0       	brcs	.+2      	; 0x4258 <__ftoa_engine+0x180>
    4256:	70 e3       	ldi	r23, 0x30	; 48
    4258:	7c 93       	st	X, r23
    425a:	20 13       	cpse	r18, r16
    425c:	b8 f7       	brcc	.-18     	; 0x424c <__ftoa_engine+0x174>
    425e:	7e 91       	ld	r23, -X
    4260:	70 61       	ori	r23, 0x10	; 16
    4262:	7d 93       	st	X+, r23
    4264:	30 f0       	brcs	.+12     	; 0x4272 <__ftoa_engine+0x19a>
    4266:	83 95       	inc	r24
    4268:	71 e3       	ldi	r23, 0x31	; 49
    426a:	7d 93       	st	X+, r23
    426c:	70 e3       	ldi	r23, 0x30	; 48
    426e:	2a 95       	dec	r18
    4270:	e1 f7       	brne	.-8      	; 0x426a <__ftoa_engine+0x192>
    4272:	11 24       	eor	r1, r1
    4274:	ef 90       	pop	r14
    4276:	ff 90       	pop	r15
    4278:	0f 91       	pop	r16
    427a:	1f 91       	pop	r17
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	99 27       	eor	r25, r25
    4282:	87 fd       	sbrc	r24, 7
    4284:	90 95       	com	r25
    4286:	08 95       	ret

00004288 <strnlen_P>:
    4288:	fc 01       	movw	r30, r24
    428a:	05 90       	lpm	r0, Z+
    428c:	61 50       	subi	r22, 0x01	; 1
    428e:	70 40       	sbci	r23, 0x00	; 0
    4290:	01 10       	cpse	r0, r1
    4292:	d8 f7       	brcc	.-10     	; 0x428a <strnlen_P+0x2>
    4294:	80 95       	com	r24
    4296:	90 95       	com	r25
    4298:	8e 0f       	add	r24, r30
    429a:	9f 1f       	adc	r25, r31
    429c:	08 95       	ret

0000429e <memcmp>:
    429e:	fb 01       	movw	r30, r22
    42a0:	dc 01       	movw	r26, r24
    42a2:	04 c0       	rjmp	.+8      	; 0x42ac <memcmp+0xe>
    42a4:	8d 91       	ld	r24, X+
    42a6:	01 90       	ld	r0, Z+
    42a8:	80 19       	sub	r24, r0
    42aa:	21 f4       	brne	.+8      	; 0x42b4 <memcmp+0x16>
    42ac:	41 50       	subi	r20, 0x01	; 1
    42ae:	50 40       	sbci	r21, 0x00	; 0
    42b0:	c8 f7       	brcc	.-14     	; 0x42a4 <memcmp+0x6>
    42b2:	88 1b       	sub	r24, r24
    42b4:	99 0b       	sbc	r25, r25
    42b6:	08 95       	ret

000042b8 <strnlen>:
    42b8:	fc 01       	movw	r30, r24
    42ba:	61 50       	subi	r22, 0x01	; 1
    42bc:	70 40       	sbci	r23, 0x00	; 0
    42be:	01 90       	ld	r0, Z+
    42c0:	01 10       	cpse	r0, r1
    42c2:	d8 f7       	brcc	.-10     	; 0x42ba <strnlen+0x2>
    42c4:	80 95       	com	r24
    42c6:	90 95       	com	r25
    42c8:	8e 0f       	add	r24, r30
    42ca:	9f 1f       	adc	r25, r31
    42cc:	08 95       	ret

000042ce <fputc>:
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	fb 01       	movw	r30, r22
    42d8:	23 81       	ldd	r18, Z+3	; 0x03
    42da:	21 fd       	sbrc	r18, 1
    42dc:	03 c0       	rjmp	.+6      	; 0x42e4 <fputc+0x16>
    42de:	8f ef       	ldi	r24, 0xFF	; 255
    42e0:	9f ef       	ldi	r25, 0xFF	; 255
    42e2:	2c c0       	rjmp	.+88     	; 0x433c <fputc+0x6e>
    42e4:	22 ff       	sbrs	r18, 2
    42e6:	16 c0       	rjmp	.+44     	; 0x4314 <fputc+0x46>
    42e8:	46 81       	ldd	r20, Z+6	; 0x06
    42ea:	57 81       	ldd	r21, Z+7	; 0x07
    42ec:	24 81       	ldd	r18, Z+4	; 0x04
    42ee:	35 81       	ldd	r19, Z+5	; 0x05
    42f0:	42 17       	cp	r20, r18
    42f2:	53 07       	cpc	r21, r19
    42f4:	44 f4       	brge	.+16     	; 0x4306 <fputc+0x38>
    42f6:	a0 81       	ld	r26, Z
    42f8:	b1 81       	ldd	r27, Z+1	; 0x01
    42fa:	9d 01       	movw	r18, r26
    42fc:	2f 5f       	subi	r18, 0xFF	; 255
    42fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4300:	31 83       	std	Z+1, r19	; 0x01
    4302:	20 83       	st	Z, r18
    4304:	8c 93       	st	X, r24
    4306:	26 81       	ldd	r18, Z+6	; 0x06
    4308:	37 81       	ldd	r19, Z+7	; 0x07
    430a:	2f 5f       	subi	r18, 0xFF	; 255
    430c:	3f 4f       	sbci	r19, 0xFF	; 255
    430e:	37 83       	std	Z+7, r19	; 0x07
    4310:	26 83       	std	Z+6, r18	; 0x06
    4312:	14 c0       	rjmp	.+40     	; 0x433c <fputc+0x6e>
    4314:	8b 01       	movw	r16, r22
    4316:	ec 01       	movw	r28, r24
    4318:	fb 01       	movw	r30, r22
    431a:	00 84       	ldd	r0, Z+8	; 0x08
    431c:	f1 85       	ldd	r31, Z+9	; 0x09
    431e:	e0 2d       	mov	r30, r0
    4320:	09 95       	icall
    4322:	89 2b       	or	r24, r25
    4324:	e1 f6       	brne	.-72     	; 0x42de <fputc+0x10>
    4326:	d8 01       	movw	r26, r16
    4328:	16 96       	adiw	r26, 0x06	; 6
    432a:	8d 91       	ld	r24, X+
    432c:	9c 91       	ld	r25, X
    432e:	17 97       	sbiw	r26, 0x07	; 7
    4330:	01 96       	adiw	r24, 0x01	; 1
    4332:	17 96       	adiw	r26, 0x07	; 7
    4334:	9c 93       	st	X, r25
    4336:	8e 93       	st	-X, r24
    4338:	16 97       	sbiw	r26, 0x06	; 6
    433a:	ce 01       	movw	r24, r28
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	1f 91       	pop	r17
    4342:	0f 91       	pop	r16
    4344:	08 95       	ret

00004346 <vsprintf>:
    4346:	ae e0       	ldi	r26, 0x0E	; 14
    4348:	b0 e0       	ldi	r27, 0x00	; 0
    434a:	e9 ea       	ldi	r30, 0xA9	; 169
    434c:	f1 e2       	ldi	r31, 0x21	; 33
    434e:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__prologue_saves__+0x1c>
    4352:	8c 01       	movw	r16, r24
    4354:	86 e0       	ldi	r24, 0x06	; 6
    4356:	8c 83       	std	Y+4, r24	; 0x04
    4358:	1a 83       	std	Y+2, r17	; 0x02
    435a:	09 83       	std	Y+1, r16	; 0x01
    435c:	8f ef       	ldi	r24, 0xFF	; 255
    435e:	9f e7       	ldi	r25, 0x7F	; 127
    4360:	9e 83       	std	Y+6, r25	; 0x06
    4362:	8d 83       	std	Y+5, r24	; 0x05
    4364:	ce 01       	movw	r24, r28
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <vfprintf>
    436c:	ef 81       	ldd	r30, Y+7	; 0x07
    436e:	f8 85       	ldd	r31, Y+8	; 0x08
    4370:	e0 0f       	add	r30, r16
    4372:	f1 1f       	adc	r31, r17
    4374:	10 82       	st	Z, r1
    4376:	2e 96       	adiw	r28, 0x0e	; 14
    4378:	e4 e0       	ldi	r30, 0x04	; 4
    437a:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <__epilogue_restores__+0x1c>

0000437e <__ultoa_invert>:
    437e:	fa 01       	movw	r30, r20
    4380:	aa 27       	eor	r26, r26
    4382:	28 30       	cpi	r18, 0x08	; 8
    4384:	51 f1       	breq	.+84     	; 0x43da <__ultoa_invert+0x5c>
    4386:	20 31       	cpi	r18, 0x10	; 16
    4388:	81 f1       	breq	.+96     	; 0x43ea <__ultoa_invert+0x6c>
    438a:	e8 94       	clt
    438c:	6f 93       	push	r22
    438e:	6e 7f       	andi	r22, 0xFE	; 254
    4390:	6e 5f       	subi	r22, 0xFE	; 254
    4392:	7f 4f       	sbci	r23, 0xFF	; 255
    4394:	8f 4f       	sbci	r24, 0xFF	; 255
    4396:	9f 4f       	sbci	r25, 0xFF	; 255
    4398:	af 4f       	sbci	r26, 0xFF	; 255
    439a:	b1 e0       	ldi	r27, 0x01	; 1
    439c:	3e d0       	rcall	.+124    	; 0x441a <__ultoa_invert+0x9c>
    439e:	b4 e0       	ldi	r27, 0x04	; 4
    43a0:	3c d0       	rcall	.+120    	; 0x441a <__ultoa_invert+0x9c>
    43a2:	67 0f       	add	r22, r23
    43a4:	78 1f       	adc	r23, r24
    43a6:	89 1f       	adc	r24, r25
    43a8:	9a 1f       	adc	r25, r26
    43aa:	a1 1d       	adc	r26, r1
    43ac:	68 0f       	add	r22, r24
    43ae:	79 1f       	adc	r23, r25
    43b0:	8a 1f       	adc	r24, r26
    43b2:	91 1d       	adc	r25, r1
    43b4:	a1 1d       	adc	r26, r1
    43b6:	6a 0f       	add	r22, r26
    43b8:	71 1d       	adc	r23, r1
    43ba:	81 1d       	adc	r24, r1
    43bc:	91 1d       	adc	r25, r1
    43be:	a1 1d       	adc	r26, r1
    43c0:	20 d0       	rcall	.+64     	; 0x4402 <__ultoa_invert+0x84>
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <__ultoa_invert+0x48>
    43c4:	68 94       	set
    43c6:	3f 91       	pop	r19
    43c8:	2a e0       	ldi	r18, 0x0A	; 10
    43ca:	26 9f       	mul	r18, r22
    43cc:	11 24       	eor	r1, r1
    43ce:	30 19       	sub	r19, r0
    43d0:	30 5d       	subi	r19, 0xD0	; 208
    43d2:	31 93       	st	Z+, r19
    43d4:	de f6       	brtc	.-74     	; 0x438c <__ultoa_invert+0xe>
    43d6:	cf 01       	movw	r24, r30
    43d8:	08 95       	ret
    43da:	46 2f       	mov	r20, r22
    43dc:	47 70       	andi	r20, 0x07	; 7
    43de:	40 5d       	subi	r20, 0xD0	; 208
    43e0:	41 93       	st	Z+, r20
    43e2:	b3 e0       	ldi	r27, 0x03	; 3
    43e4:	0f d0       	rcall	.+30     	; 0x4404 <__ultoa_invert+0x86>
    43e6:	c9 f7       	brne	.-14     	; 0x43da <__ultoa_invert+0x5c>
    43e8:	f6 cf       	rjmp	.-20     	; 0x43d6 <__ultoa_invert+0x58>
    43ea:	46 2f       	mov	r20, r22
    43ec:	4f 70       	andi	r20, 0x0F	; 15
    43ee:	40 5d       	subi	r20, 0xD0	; 208
    43f0:	4a 33       	cpi	r20, 0x3A	; 58
    43f2:	18 f0       	brcs	.+6      	; 0x43fa <__ultoa_invert+0x7c>
    43f4:	49 5d       	subi	r20, 0xD9	; 217
    43f6:	31 fd       	sbrc	r19, 1
    43f8:	40 52       	subi	r20, 0x20	; 32
    43fa:	41 93       	st	Z+, r20
    43fc:	02 d0       	rcall	.+4      	; 0x4402 <__ultoa_invert+0x84>
    43fe:	a9 f7       	brne	.-22     	; 0x43ea <__ultoa_invert+0x6c>
    4400:	ea cf       	rjmp	.-44     	; 0x43d6 <__ultoa_invert+0x58>
    4402:	b4 e0       	ldi	r27, 0x04	; 4
    4404:	a6 95       	lsr	r26
    4406:	97 95       	ror	r25
    4408:	87 95       	ror	r24
    440a:	77 95       	ror	r23
    440c:	67 95       	ror	r22
    440e:	ba 95       	dec	r27
    4410:	c9 f7       	brne	.-14     	; 0x4404 <__ultoa_invert+0x86>
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	61 05       	cpc	r22, r1
    4416:	71 05       	cpc	r23, r1
    4418:	08 95       	ret
    441a:	9b 01       	movw	r18, r22
    441c:	ac 01       	movw	r20, r24
    441e:	0a 2e       	mov	r0, r26
    4420:	06 94       	lsr	r0
    4422:	57 95       	ror	r21
    4424:	47 95       	ror	r20
    4426:	37 95       	ror	r19
    4428:	27 95       	ror	r18
    442a:	ba 95       	dec	r27
    442c:	c9 f7       	brne	.-14     	; 0x4420 <__ultoa_invert+0xa2>
    442e:	62 0f       	add	r22, r18
    4430:	73 1f       	adc	r23, r19
    4432:	84 1f       	adc	r24, r20
    4434:	95 1f       	adc	r25, r21
    4436:	a0 1d       	adc	r26, r0
    4438:	08 95       	ret

0000443a <_exit>:
    443a:	f8 94       	cli

0000443c <__stop_program>:
    443c:	ff cf       	rjmp	.-2      	; 0x443c <__stop_program>
