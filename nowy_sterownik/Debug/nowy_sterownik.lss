
nowy_sterownik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000026a  00800060  00004064  000040f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000288  008002ca  008002ca  00004362  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005422  00000000  00000000  000049cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eb8  00000000  00000000  00009dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b56  00000000  00000000  0000bca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db0  00000000  00000000  0000f7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001971  00000000  00000000  000105ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027bd  00000000  00000000  00011f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  000146da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__ctors_end>
       4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       8:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
       c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      10:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      14:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      18:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      1c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      20:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      28:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__vector_10>
      2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      30:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      34:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_13>
      38:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_14>
      3c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      40:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      44:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      48:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      4c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      50:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__bad_interrupt>
      54:	10 08       	sbc	r1, r0
      56:	17 08       	sbc	r1, r7
      58:	1a 08       	sbc	r1, r10
      5a:	20 08       	sbc	r2, r0
      5c:	26 08       	sbc	r2, r6
      5e:	2b 08       	sbc	r2, r11
      60:	31 08       	sbc	r3, r1
      62:	38 08       	sbc	r3, r8
      64:	3c 08       	sbc	r3, r12
      66:	44 08       	sbc	r4, r4
      68:	93 08       	sbc	r9, r3
      6a:	93 08       	sbc	r9, r3
      6c:	93 08       	sbc	r9, r3
      6e:	93 08       	sbc	r9, r3
      70:	93 08       	sbc	r9, r3
      72:	93 08       	sbc	r9, r3
      74:	93 08       	sbc	r9, r3
      76:	93 08       	sbc	r9, r3
      78:	93 08       	sbc	r9, r3
      7a:	93 08       	sbc	r9, r3
      7c:	93 08       	sbc	r9, r3
      7e:	93 08       	sbc	r9, r3
      80:	93 08       	sbc	r9, r3
      82:	93 08       	sbc	r9, r3
      84:	93 08       	sbc	r9, r3
      86:	93 08       	sbc	r9, r3
      88:	93 08       	sbc	r9, r3
      8a:	93 08       	sbc	r9, r3
      8c:	93 08       	sbc	r9, r3
      8e:	93 08       	sbc	r9, r3
      90:	93 08       	sbc	r9, r3
      92:	93 08       	sbc	r9, r3
      94:	93 08       	sbc	r9, r3
      96:	93 08       	sbc	r9, r3
      98:	93 08       	sbc	r9, r3
      9a:	93 08       	sbc	r9, r3
      9c:	93 08       	sbc	r9, r3
      9e:	93 08       	sbc	r9, r3
      a0:	93 08       	sbc	r9, r3
      a2:	93 08       	sbc	r9, r3
      a4:	93 08       	sbc	r9, r3
      a6:	93 08       	sbc	r9, r3
      a8:	93 08       	sbc	r9, r3
      aa:	93 08       	sbc	r9, r3
      ac:	93 08       	sbc	r9, r3
      ae:	93 08       	sbc	r9, r3
      b0:	93 08       	sbc	r9, r3
      b2:	93 08       	sbc	r9, r3
      b4:	93 08       	sbc	r9, r3
      b6:	93 08       	sbc	r9, r3
      b8:	93 08       	sbc	r9, r3
      ba:	93 08       	sbc	r9, r3
      bc:	93 08       	sbc	r9, r3
      be:	93 08       	sbc	r9, r3
      c0:	93 08       	sbc	r9, r3
      c2:	93 08       	sbc	r9, r3
      c4:	93 08       	sbc	r9, r3
      c6:	93 08       	sbc	r9, r3
      c8:	93 08       	sbc	r9, r3
      ca:	93 08       	sbc	r9, r3
      cc:	93 08       	sbc	r9, r3
      ce:	93 08       	sbc	r9, r3
      d0:	93 08       	sbc	r9, r3
      d2:	93 08       	sbc	r9, r3
      d4:	93 08       	sbc	r9, r3
      d6:	93 08       	sbc	r9, r3
      d8:	93 08       	sbc	r9, r3
      da:	93 08       	sbc	r9, r3
      dc:	93 08       	sbc	r9, r3
      de:	93 08       	sbc	r9, r3
      e0:	93 08       	sbc	r9, r3
      e2:	93 08       	sbc	r9, r3
      e4:	93 08       	sbc	r9, r3
      e6:	93 08       	sbc	r9, r3
      e8:	93 08       	sbc	r9, r3
      ea:	93 08       	sbc	r9, r3
      ec:	93 08       	sbc	r9, r3
      ee:	93 08       	sbc	r9, r3
      f0:	93 08       	sbc	r9, r3
      f2:	93 08       	sbc	r9, r3
      f4:	93 08       	sbc	r9, r3
      f6:	93 08       	sbc	r9, r3
      f8:	93 08       	sbc	r9, r3
      fa:	93 08       	sbc	r9, r3
      fc:	93 08       	sbc	r9, r3
      fe:	93 08       	sbc	r9, r3
     100:	93 08       	sbc	r9, r3
     102:	93 08       	sbc	r9, r3
     104:	93 08       	sbc	r9, r3
     106:	93 08       	sbc	r9, r3
     108:	93 08       	sbc	r9, r3
     10a:	93 08       	sbc	r9, r3
     10c:	93 08       	sbc	r9, r3
     10e:	93 08       	sbc	r9, r3
     110:	93 08       	sbc	r9, r3
     112:	93 08       	sbc	r9, r3
     114:	93 08       	sbc	r9, r3
     116:	4b 08       	sbc	r4, r11
     118:	52 08       	sbc	r5, r2
     11a:	58 08       	sbc	r5, r8
     11c:	5d 08       	sbc	r5, r13
     11e:	63 08       	sbc	r6, r3
     120:	69 08       	sbc	r6, r9
     122:	93 08       	sbc	r9, r3
     124:	93 08       	sbc	r9, r3
     126:	93 08       	sbc	r9, r3
     128:	93 08       	sbc	r9, r3
     12a:	93 08       	sbc	r9, r3
     12c:	82 08       	sbc	r8, r2
     12e:	93 08       	sbc	r9, r3
     130:	93 08       	sbc	r9, r3
     132:	71 08       	sbc	r7, r1
     134:	76 08       	sbc	r7, r6
     136:	93 08       	sbc	r9, r3
     138:	6e 08       	sbc	r6, r14
     13a:	7c 08       	sbc	r7, r12
     13c:	93 08       	sbc	r9, r3
     13e:	93 08       	sbc	r9, r3
     140:	93 08       	sbc	r9, r3
     142:	93 08       	sbc	r9, r3
     144:	93 08       	sbc	r9, r3
     146:	93 08       	sbc	r9, r3
     148:	93 08       	sbc	r9, r3
     14a:	93 08       	sbc	r9, r3
     14c:	93 08       	sbc	r9, r3
     14e:	93 08       	sbc	r9, r3
     150:	93 08       	sbc	r9, r3
     152:	93 08       	sbc	r9, r3
     154:	93 08       	sbc	r9, r3
     156:	93 08       	sbc	r9, r3
     158:	93 08       	sbc	r9, r3
     15a:	93 08       	sbc	r9, r3
     15c:	93 08       	sbc	r9, r3
     15e:	93 08       	sbc	r9, r3
     160:	93 08       	sbc	r9, r3
     162:	93 08       	sbc	r9, r3
     164:	93 08       	sbc	r9, r3
     166:	93 08       	sbc	r9, r3
     168:	93 08       	sbc	r9, r3
     16a:	93 08       	sbc	r9, r3
     16c:	93 08       	sbc	r9, r3
     16e:	93 08       	sbc	r9, r3
     170:	93 08       	sbc	r9, r3
     172:	93 08       	sbc	r9, r3
     174:	93 08       	sbc	r9, r3
     176:	93 08       	sbc	r9, r3
     178:	93 08       	sbc	r9, r3
     17a:	93 08       	sbc	r9, r3
     17c:	93 08       	sbc	r9, r3
     17e:	93 08       	sbc	r9, r3
     180:	93 08       	sbc	r9, r3
     182:	93 08       	sbc	r9, r3
     184:	93 08       	sbc	r9, r3
     186:	93 08       	sbc	r9, r3
     188:	93 08       	sbc	r9, r3
     18a:	93 08       	sbc	r9, r3
     18c:	93 08       	sbc	r9, r3
     18e:	93 08       	sbc	r9, r3
     190:	93 08       	sbc	r9, r3
     192:	93 08       	sbc	r9, r3
     194:	93 08       	sbc	r9, r3
     196:	93 08       	sbc	r9, r3
     198:	93 08       	sbc	r9, r3
     19a:	93 08       	sbc	r9, r3
     19c:	93 08       	sbc	r9, r3
     19e:	93 08       	sbc	r9, r3
     1a0:	93 08       	sbc	r9, r3
     1a2:	93 08       	sbc	r9, r3
     1a4:	93 08       	sbc	r9, r3
     1a6:	93 08       	sbc	r9, r3
     1a8:	93 08       	sbc	r9, r3
     1aa:	93 08       	sbc	r9, r3
     1ac:	93 08       	sbc	r9, r3
     1ae:	93 08       	sbc	r9, r3
     1b0:	93 08       	sbc	r9, r3
     1b2:	93 08       	sbc	r9, r3
     1b4:	93 08       	sbc	r9, r3
     1b6:	93 08       	sbc	r9, r3
     1b8:	93 08       	sbc	r9, r3
     1ba:	93 08       	sbc	r9, r3
     1bc:	93 08       	sbc	r9, r3
     1be:	93 08       	sbc	r9, r3
     1c0:	93 08       	sbc	r9, r3
     1c2:	93 08       	sbc	r9, r3
     1c4:	93 08       	sbc	r9, r3
     1c6:	93 08       	sbc	r9, r3
     1c8:	93 08       	sbc	r9, r3
     1ca:	93 08       	sbc	r9, r3
     1cc:	93 08       	sbc	r9, r3
     1ce:	93 08       	sbc	r9, r3
     1d0:	93 08       	sbc	r9, r3
     1d2:	93 08       	sbc	r9, r3
     1d4:	93 08       	sbc	r9, r3
     1d6:	93 08       	sbc	r9, r3
     1d8:	93 08       	sbc	r9, r3
     1da:	93 08       	sbc	r9, r3
     1dc:	93 08       	sbc	r9, r3
     1de:	93 08       	sbc	r9, r3
     1e0:	93 08       	sbc	r9, r3
     1e2:	93 08       	sbc	r9, r3
     1e4:	93 08       	sbc	r9, r3
     1e6:	93 08       	sbc	r9, r3
     1e8:	93 08       	sbc	r9, r3
     1ea:	93 08       	sbc	r9, r3
     1ec:	93 08       	sbc	r9, r3
     1ee:	93 08       	sbc	r9, r3
     1f0:	93 08       	sbc	r9, r3
     1f2:	93 08       	sbc	r9, r3
     1f4:	93 08       	sbc	r9, r3
     1f6:	93 08       	sbc	r9, r3
     1f8:	93 08       	sbc	r9, r3
     1fa:	93 08       	sbc	r9, r3
     1fc:	93 08       	sbc	r9, r3
     1fe:	93 08       	sbc	r9, r3
     200:	93 08       	sbc	r9, r3
     202:	93 08       	sbc	r9, r3
     204:	93 08       	sbc	r9, r3
     206:	93 08       	sbc	r9, r3
     208:	93 08       	sbc	r9, r3
     20a:	93 08       	sbc	r9, r3
     20c:	93 08       	sbc	r9, r3
     20e:	93 08       	sbc	r9, r3
     210:	93 08       	sbc	r9, r3
     212:	93 08       	sbc	r9, r3
     214:	93 08       	sbc	r9, r3
     216:	93 08       	sbc	r9, r3
     218:	93 08       	sbc	r9, r3
     21a:	93 08       	sbc	r9, r3
     21c:	93 08       	sbc	r9, r3
     21e:	93 08       	sbc	r9, r3
     220:	93 08       	sbc	r9, r3
     222:	93 08       	sbc	r9, r3
     224:	93 08       	sbc	r9, r3
     226:	93 08       	sbc	r9, r3
     228:	93 08       	sbc	r9, r3
     22a:	93 08       	sbc	r9, r3
     22c:	93 08       	sbc	r9, r3
     22e:	93 08       	sbc	r9, r3
     230:	93 08       	sbc	r9, r3
     232:	93 08       	sbc	r9, r3
     234:	93 08       	sbc	r9, r3
     236:	93 08       	sbc	r9, r3
     238:	93 08       	sbc	r9, r3
     23a:	93 08       	sbc	r9, r3
     23c:	93 08       	sbc	r9, r3
     23e:	93 08       	sbc	r9, r3
     240:	93 08       	sbc	r9, r3
     242:	93 08       	sbc	r9, r3
     244:	86 08       	sbc	r8, r6
     246:	92 08       	sbc	r9, r2
     248:	90 08       	sbc	r9, r0
     24a:	8e 08       	sbc	r8, r14
     24c:	8c 08       	sbc	r8, r12
     24e:	8a 08       	sbc	r8, r10
     250:	88 08       	sbc	r8, r8

00000252 <__trampolines_end>:
     252:	6e 61       	ori	r22, 0x1E	; 30
     254:	6e 00       	.word	0x006e	; ????

00000256 <__c.2332>:
     256:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     266:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     276:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     286:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     296:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     306:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     316:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     326:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     336:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     346:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000354 <__ctors_end>:
     354:	11 24       	eor	r1, r1
     356:	1f be       	out	0x3f, r1	; 63
     358:	cf e5       	ldi	r28, 0x5F	; 95
     35a:	d8 e0       	ldi	r29, 0x08	; 8
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	cd bf       	out	0x3d, r28	; 61

00000360 <__do_copy_data>:
     360:	12 e0       	ldi	r17, 0x02	; 2
     362:	a0 e6       	ldi	r26, 0x60	; 96
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e4 e6       	ldi	r30, 0x64	; 100
     368:	f0 e4       	ldi	r31, 0x40	; 64
     36a:	02 c0       	rjmp	.+4      	; 0x370 <__do_copy_data+0x10>
     36c:	05 90       	lpm	r0, Z+
     36e:	0d 92       	st	X+, r0
     370:	aa 3c       	cpi	r26, 0xCA	; 202
     372:	b1 07       	cpc	r27, r17
     374:	d9 f7       	brne	.-10     	; 0x36c <__do_copy_data+0xc>

00000376 <__do_clear_bss>:
     376:	25 e0       	ldi	r18, 0x05	; 5
     378:	aa ec       	ldi	r26, 0xCA	; 202
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	01 c0       	rjmp	.+2      	; 0x380 <.do_clear_bss_start>

0000037e <.do_clear_bss_loop>:
     37e:	1d 92       	st	X+, r1

00000380 <.do_clear_bss_start>:
     380:	a2 35       	cpi	r26, 0x52	; 82
     382:	b2 07       	cpc	r27, r18
     384:	e1 f7       	brne	.-8      	; 0x37e <.do_clear_bss_loop>
     386:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
     38a:	0c 94 30 20 	jmp	0x4060	; 0x4060 <_exit>

0000038e <__bad_interrupt>:
     38e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000392 <debug_msg>:

#if L_DEBUG
#include <stdio.h>
char debug_buff[64];
void debug_msg( const char* format, ... )
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	ae 01       	movw	r20, r28
     39c:	4b 5f       	subi	r20, 0xFB	; 251
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	fa 01       	movw	r30, r20
     3a2:	61 91       	ld	r22, Z+
     3a4:	71 91       	ld	r23, Z+
     3a6:	af 01       	movw	r20, r30
	va_list arglist;
	va_start( arglist, format );
	vsprintf(debug_buff, format, arglist );
     3a8:	89 e3       	ldi	r24, 0x39	; 57
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <vsprintf>
	va_end( arglist );
	#if USE_USART
	uart_puts(debug_buff);
     3b0:	89 e3       	ldi	r24, 0x39	; 57
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	0e 94 53 18 	call	0x30a6	; 0x30a6 <uart0_puts>
	#endif
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <init_pin>:
uint8_t motor_value;
uint8_t servo_vibro_value;

void init_pin(void)
{
	SET_PIN(LED_MOTOR_DDR, LED_MOTOR_PIN);
     3be:	8c 9a       	sbi	0x11, 4	; 17
	SET_PIN(LED_SERVO_DDR, LED_SERVO_PIN);
     3c0:	8e 9a       	sbi	0x11, 6	; 17
	SET_PIN(LED_ACUM_DDR, LED_ACUM_PIN);
     3c2:	bd 9a       	sbi	0x17, 5	; 23
	//UART_TX_PIN
	DDRD |= (1<<1);
     3c4:	89 9a       	sbi	0x11, 1	; 17
     3c6:	08 95       	ret

000003c8 <init_driver>:
}

void init_driver(void)
{
	#if CONFIG_DEVICE_SIEWNIK
	init_menu();
     3c8:	0e 94 85 06 	call	0xd0a	; 0xd0a <init_menu>
	#endif
	timer0_init(TIM0_PRESCALER, TIM0_ARR);
     3cc:	62 e3       	ldi	r22, 0x32	; 50
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <timer0_init>
	init_display_drv();
     3d4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <init_display_drv>
	init_buttons();
     3d8:	0e 94 89 04 	call	0x912	; 0x912 <init_buttons>
	#if USE_USART
	uart_init(UART_BAUD_SELECT(57600, F_CPU));
     3dc:	88 e0       	ldi	r24, 0x08	; 8
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 28 18 	call	0x3050	; 0x3050 <uart0_init>
	#endif
	init_system();
     3e4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <init_system>
	init_measure();
     3e8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <init_measure>
	CLEAR_PIN(SFIOR, PUD);
     3ec:	80 b7       	in	r24, 0x30	; 48
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	80 bf       	out	0x30, r24	; 48
     3f2:	08 95       	ret

000003f4 <main>:
}

int main(void)
{
	init_pin();
     3f4:	0e 94 df 01 	call	0x3be	; 0x3be <init_pin>
	sei();
     3f8:	78 94       	sei
	init_driver();
     3fa:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_driver>
	debug_msg("/-----------START SYSTEM------------/\n");
     3fe:	87 e7       	ldi	r24, 0x77	; 119
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		disp_process();
     40e:	0e 94 ae 09 	call	0x135c	; 0x135c <disp_process>
		animation();
     412:	0e 94 0a 0b 	call	0x1614	; 0x1614 <animation>
		process_button();
     416:	0e 94 df 03 	call	0x7be	; 0x7be <process_button>
		disp_fast_process();
     41a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <disp_fast_process>
		disp_very_fast_process();
     41e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <disp_very_fast_process>
		dcmotor_process(motor_value);
     422:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <motor_value>
     426:	0e 94 4b 07 	call	0xe96	; 0xe96 <dcmotor_process>
		#if CONFIG_DEVICE_SIEWNIK
		servo_process(servo_vibro_value);
     42a:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
     42e:	0e 94 84 12 	call	0x2508	; 0x2508 <servo_process>
		menu_process();
     432:	0e 94 1a 06 	call	0xc34	; 0xc34 <menu_process>
		#endif
		#if CONFIG_DEVICE_SOLARKA
		vibro_process();
		#endif
		error_event();
     436:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <error_event>
		error_led_blink();
     43a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <error_led_blink>
		measure_process();
     43e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <measure_process>
		accumulator_process();
     442:	0e 94 44 02 	call	0x488	; 0x488 <accumulator_process>
		accum_led_process();
     446:	0e 94 8d 02 	call	0x51a	; 0x51a <accum_led_process>
		buzzer_process();
     44a:	0e 94 a0 04 	call	0x940	; 0x940 <buzzer_process>
     44e:	df cf       	rjmp	.-66     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000450 <accum_get_voltage>:
float accum_get_voltage(void)
{
	#if CONFIG_DEVICE_SOLARKA
    voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024 + 0.7;
	#else
	voltage = measure_get_filtered_value(MEAS_ACCUM)*5*5.7/1024;
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	0e 94 88 10 	call	0x2110	; 0x2110 <measure_get_filtered_value>
	#endif
    return voltage;
     456:	bc 01       	movw	r22, r24
     458:	66 0f       	add	r22, r22
     45a:	77 1f       	adc	r23, r23
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	86 0f       	add	r24, r22
     462:	97 1f       	adc	r25, r23
     464:	bc 01       	movw	r22, r24
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
     46e:	26 e6       	ldi	r18, 0x66	; 102
     470:	36 e6       	ldi	r19, 0x66	; 102
     472:	46 eb       	ldi	r20, 0xB6	; 182
     474:	50 e4       	ldi	r21, 0x40	; 64
     476:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e8       	ldi	r20, 0x80	; 128
     480:	5a e3       	ldi	r21, 0x3A	; 58
     482:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
}
     486:	08 95       	ret

00000488 <accumulator_process>:
void accumulator_process(void)
{
	
	static timer_t accumulator_timer;
	
	if(accumulator_timer < mktime.ms)
     488:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
     48c:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
     490:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
     494:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
     498:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <accumulator_timer.1914>
     49c:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <accumulator_timer.1914+0x1>
     4a0:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <accumulator_timer.1914+0x2>
     4a4:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <accumulator_timer.1914+0x3>
     4a8:	84 17       	cp	r24, r20
     4aa:	95 07       	cpc	r25, r21
     4ac:	a6 07       	cpc	r26, r22
     4ae:	b7 07       	cpc	r27, r23
     4b0:	98 f5       	brcc	.+102    	; 0x518 <accumulator_process+0x90>
	{
		filtered_accum_adc_val = measure_get_filtered_value(MEAS_ACCUM);
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	0e 94 88 10 	call	0x2110	; 0x2110 <measure_get_filtered_value>
		if (filtered_accum_adc_val > ACCUMULATOR_HIGH_VOLTAGE)
     4b8:	89 35       	cpi	r24, 0x59	; 89
     4ba:	22 e0       	ldi	r18, 0x02	; 2
     4bc:	92 07       	cpc	r25, r18
     4be:	18 f0       	brcs	.+6      	; 0x4c6 <accumulator_process+0x3e>
		{
			accumulator_state = ACCUM_HIGH_VOLTAGE;
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_LOW_VOLTAGE)
     4c6:	8b 38       	cpi	r24, 0x8B	; 139
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	92 07       	cpc	r25, r18
     4cc:	18 f4       	brcc	.+6      	; 0x4d4 <accumulator_process+0x4c>
		{
			accumulator_state =  ACCUM_LOW_VOLTAGE;
     4ce:	22 e0       	ldi	r18, 0x02	; 2
     4d0:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_VERY_LOW_VOLTAGE)
     4d4:	8e 35       	cpi	r24, 0x5E	; 94
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	92 07       	cpc	r25, r18
     4da:	18 f4       	brcc	.+6      	; 0x4e2 <accumulator_process+0x5a>
		{   
			accumulator_state = ACCUM_VERY_LOW_VOLTAGE;
     4dc:	23 e0       	ldi	r18, 0x03	; 3
     4de:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <accumulator_state>
		}
		
		if (filtered_accum_adc_val < ACCUMULATOR_HIGH_VOLTAGE && filtered_accum_adc_val > ACCUMULATOR_LOW_VOLTAGE)
     4e2:	8c 58       	subi	r24, 0x8C	; 140
     4e4:	91 40       	sbci	r25, 0x01	; 1
     4e6:	8c 3c       	cpi	r24, 0xCC	; 204
     4e8:	91 05       	cpc	r25, r1
     4ea:	10 f4       	brcc	.+4      	; 0x4f0 <accumulator_process+0x68>
		{
			accumulator_state = ACCUM_NORMAL_VOLTAGE;
     4ec:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <accumulator_state>
		}
		accumulator_timer = mktime.ms + 100;
     4f0:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
     4f4:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
     4f8:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
     4fc:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
     500:	8c 59       	subi	r24, 0x9C	; 156
     502:	9f 4f       	sbci	r25, 0xFF	; 255
     504:	af 4f       	sbci	r26, 0xFF	; 255
     506:	bf 4f       	sbci	r27, 0xFF	; 255
     508:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <accumulator_timer.1914>
     50c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <accumulator_timer.1914+0x1>
     510:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <accumulator_timer.1914+0x2>
     514:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <accumulator_timer.1914+0x3>
     518:	08 95       	ret

0000051a <accum_led_process>:

void accum_led_process(void)
{
    static timer_t process_timer;
    static uint8_t state_led;
    if(process_timer < mktime.ms)
     51a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
     51e:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
     522:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
     526:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
     52a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     52e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     532:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     536:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     53a:	84 17       	cp	r24, r20
     53c:	95 07       	cpc	r25, r21
     53e:	a6 07       	cpc	r26, r22
     540:	b7 07       	cpc	r27, r23
     542:	08 f0       	brcs	.+2      	; 0x546 <accum_led_process+0x2c>
     544:	86 c0       	rjmp	.+268    	; 0x652 <accum_led_process+0x138>
	{
        switch (accumulator_state)
     546:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <accumulator_state>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	e9 f0       	breq	.+58     	; 0x588 <accum_led_process+0x6e>
     54e:	30 f0       	brcs	.+12     	; 0x55c <accum_led_process+0x42>
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	99 f1       	breq	.+102    	; 0x5ba <accum_led_process+0xa0>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	09 f4       	brne	.+2      	; 0x55a <accum_led_process+0x40>
     558:	67 c0       	rjmp	.+206    	; 0x628 <accum_led_process+0x10e>
     55a:	08 95       	ret
        {
        case ACCUM_NORMAL_VOLTAGE:
            LED_ACUM_OFF;
     55c:	c5 98       	cbi	0x18, 5	; 24
            process_timer +=200;
     55e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     562:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     566:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     56a:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     56e:	88 53       	subi	r24, 0x38	; 56
     570:	9f 4f       	sbci	r25, 0xFF	; 255
     572:	af 4f       	sbci	r26, 0xFF	; 255
     574:	bf 4f       	sbci	r27, 0xFF	; 255
     576:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <process_timer.1918>
     57a:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <process_timer.1918+0x1>
     57e:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <process_timer.1918+0x2>
     582:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <process_timer.1918+0x3>
            break;
     586:	08 95       	ret

        case ACCUM_HIGH_VOLTAGE:
            LED_ACUM_TOGGLE;
     588:	98 b3       	in	r25, 0x18	; 24
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	89 27       	eor	r24, r25
     58e:	88 bb       	out	0x18, r24	; 24
		    process_timer += 250;
     590:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     594:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     598:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     59c:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     5a0:	86 50       	subi	r24, 0x06	; 6
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	af 4f       	sbci	r26, 0xFF	; 255
     5a6:	bf 4f       	sbci	r27, 0xFF	; 255
     5a8:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <process_timer.1918>
     5ac:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <process_timer.1918+0x1>
     5b0:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <process_timer.1918+0x2>
     5b4:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <process_timer.1918+0x3>
            break;
     5b8:	08 95       	ret
        
        case ACCUM_LOW_VOLTAGE:
            if (state_led == 0)
     5ba:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__data_end>
     5be:	81 11       	cpse	r24, r1
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <accum_led_process+0xda>
            {
                state_led = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__data_end>
                LED_ACUM_ON;
     5c8:	c5 9a       	sbi	0x18, 5	; 24
                process_timer += 500;
     5ca:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     5ce:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     5d2:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     5d6:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     5da:	8c 50       	subi	r24, 0x0C	; 12
     5dc:	9e 4f       	sbci	r25, 0xFE	; 254
     5de:	af 4f       	sbci	r26, 0xFF	; 255
     5e0:	bf 4f       	sbci	r27, 0xFF	; 255
     5e2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <process_timer.1918>
     5e6:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <process_timer.1918+0x1>
     5ea:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <process_timer.1918+0x2>
     5ee:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <process_timer.1918+0x3>
     5f2:	08 95       	ret
            }
            else if (state_led == 1)
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	69 f5       	brne	.+90     	; 0x652 <accum_led_process+0x138>
            {
                state_led = 0;
     5f8:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <__data_end>
                LED_ACUM_OFF;
     5fc:	c5 98       	cbi	0x18, 5	; 24
                process_timer += 1500;
     5fe:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     602:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     606:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     60a:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     60e:	84 52       	subi	r24, 0x24	; 36
     610:	9a 4f       	sbci	r25, 0xFA	; 250
     612:	af 4f       	sbci	r26, 0xFF	; 255
     614:	bf 4f       	sbci	r27, 0xFF	; 255
     616:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <process_timer.1918>
     61a:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <process_timer.1918+0x1>
     61e:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <process_timer.1918+0x2>
     622:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <process_timer.1918+0x3>
     626:	08 95       	ret
            }
            break;

            case ACCUM_VERY_LOW_VOLTAGE:
                LED_ACUM_ON;
     628:	c5 9a       	sbi	0x18, 5	; 24
		        process_timer +=1000;
     62a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <process_timer.1918>
     62e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <process_timer.1918+0x1>
     632:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <process_timer.1918+0x2>
     636:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <process_timer.1918+0x3>
     63a:	88 51       	subi	r24, 0x18	; 24
     63c:	9c 4f       	sbci	r25, 0xFC	; 252
     63e:	af 4f       	sbci	r26, 0xFF	; 255
     640:	bf 4f       	sbci	r27, 0xFF	; 255
     642:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <process_timer.1918>
     646:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <process_timer.1918+0x1>
     64a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <process_timer.1918+0x2>
     64e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <process_timer.1918+0x3>
     652:	08 95       	ret

00000654 <adc_setchannel>:
/*
 * set an adc channel
 */
void adc_setchannel(uint8_t channel)
{
	ADCSRA &= ~(1 << ADEN);
     654:	37 98       	cbi	0x06, 7	; 6
	ADMUX = (ADMUX & 0xf8) | (channel & 0x07); //set channel
     656:	97 b1       	in	r25, 0x07	; 7
     658:	98 7f       	andi	r25, 0xF8	; 248
     65a:	87 70       	andi	r24, 0x07	; 7
     65c:	89 2b       	or	r24, r25
     65e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
     660:	37 9a       	sbi	0x06, 7	; 6
     662:	08 95       	ret

00000664 <adc_readsel>:
/*
 * read from selected adc channel
 */
uint16_t adc_readsel(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
     664:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & _BV(ADSC)); 
     666:	36 99       	sbic	0x06, 6	; 6
     668:	fe cf       	rjmp	.-4      	; 0x666 <adc_readsel+0x2>
	//while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	uint16_t adc = ADC;
     66a:	84 b1       	in	r24, 0x04	; 4
     66c:	95 b1       	in	r25, 0x05	; 5
	//ADCSRA |= (1 << ADIF); // Clear ADIF by writing one to it
	return(adc);
}
     66e:	08 95       	ret

00000670 <adc_read>:
/*
 * read from adc channel
 */
uint16_t adc_read(uint8_t channel)
{
	adc_setchannel(channel);
     670:	0e 94 2a 03 	call	0x654	; 0x654 <adc_setchannel>
	return adc_readsel();
     674:	0e 94 32 03 	call	0x664	; 0x664 <adc_readsel>
}
     678:	08 95       	ret

0000067a <read_button>:
		return 0;
}

extern uint8_t test_button;
void test_fnc(void * pv)
{
     67a:	dc 01       	movw	r26, r24
     67c:	16 96       	adiw	r26, 0x06	; 6
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	17 97       	sbiw	r26, 0x07	; 7
     684:	20 81       	ld	r18, Z
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	18 96       	adiw	r26, 0x08	; 8
     68c:	0c 90       	ld	r0, X
     68e:	02 c0       	rjmp	.+4      	; 0x694 <read_button+0x1a>
     690:	f5 95       	asr	r31
     692:	e7 95       	ror	r30
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <read_button+0x16>
     698:	cf 01       	movw	r24, r30
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	08 95       	ret

0000069e <init_but_struct>:
}

void init_but_struct(void)
{
	
	button1.state = 0;
     69e:	e6 ee       	ldi	r30, 0xE6	; 230
     6a0:	f4 e0       	ldi	r31, 0x04	; 4
     6a2:	14 82       	std	Z+4, r1	; 0x04
	button1.value = 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	85 83       	std	Z+5, r24	; 0x05
	button1.fall_callback = 0;
     6a8:	14 86       	std	Z+12, r1	; 0x0c
     6aa:	13 86       	std	Z+11, r1	; 0x0b
	button1.rise_callback = 0;
     6ac:	12 86       	std	Z+10, r1	; 0x0a
     6ae:	11 86       	std	Z+9, r1	; 0x09
	button1.timer_callback = 0;//test_fnc;
     6b0:	16 86       	std	Z+14, r1	; 0x0e
     6b2:	15 86       	std	Z+13, r1	; 0x0d
	button1.port = &BUT1_RPORT;
     6b4:	26 e3       	ldi	r18, 0x36	; 54
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	37 83       	std	Z+7, r19	; 0x07
     6ba:	26 83       	std	Z+6, r18	; 0x06
	button1.pin = BUT1_PIN;
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	90 87       	std	Z+8, r25	; 0x08
	
	button2.state = 0;
     6c0:	e9 eb       	ldi	r30, 0xB9	; 185
     6c2:	f4 e0       	ldi	r31, 0x04	; 4
     6c4:	14 82       	std	Z+4, r1	; 0x04
	button2.value = 1;
     6c6:	85 83       	std	Z+5, r24	; 0x05
	button2.fall_callback = 0;
     6c8:	14 86       	std	Z+12, r1	; 0x0c
     6ca:	13 86       	std	Z+11, r1	; 0x0b
	button2.rise_callback = 0;
     6cc:	12 86       	std	Z+10, r1	; 0x0a
     6ce:	11 86       	std	Z+9, r1	; 0x09
	button2.timer_callback = 0;
     6d0:	16 86       	std	Z+14, r1	; 0x0e
     6d2:	15 86       	std	Z+13, r1	; 0x0d
	button2.port = &BUT2_RPORT;
     6d4:	37 83       	std	Z+7, r19	; 0x07
     6d6:	26 83       	std	Z+6, r18	; 0x06
	button2.pin = BUT2_PIN;
     6d8:	80 87       	std	Z+8, r24	; 0x08
	
	button3.state = 0;
     6da:	e8 ec       	ldi	r30, 0xC8	; 200
     6dc:	f4 e0       	ldi	r31, 0x04	; 4
     6de:	14 82       	std	Z+4, r1	; 0x04
	button3.value = 1;
     6e0:	85 83       	std	Z+5, r24	; 0x05
	button3.fall_callback = 0;
     6e2:	14 86       	std	Z+12, r1	; 0x0c
     6e4:	13 86       	std	Z+11, r1	; 0x0b
	button3.rise_callback = 0;
     6e6:	12 86       	std	Z+10, r1	; 0x0a
     6e8:	11 86       	std	Z+9, r1	; 0x09
	button3.timer_callback = 0;
     6ea:	16 86       	std	Z+14, r1	; 0x0e
     6ec:	15 86       	std	Z+13, r1	; 0x0d
	button3.port = &BUT3_RPORT;
     6ee:	37 83       	std	Z+7, r19	; 0x07
     6f0:	26 83       	std	Z+6, r18	; 0x06
	button3.pin = BUT3_PIN;
     6f2:	96 e0       	ldi	r25, 0x06	; 6
     6f4:	90 87       	std	Z+8, r25	; 0x08
	
	button4.state = 0;
     6f6:	e6 ea       	ldi	r30, 0xA6	; 166
     6f8:	f4 e0       	ldi	r31, 0x04	; 4
     6fa:	14 82       	std	Z+4, r1	; 0x04
	button4.value = 1;
     6fc:	85 83       	std	Z+5, r24	; 0x05
	button4.fall_callback = 0;
     6fe:	14 86       	std	Z+12, r1	; 0x0c
     700:	13 86       	std	Z+11, r1	; 0x0b
	button4.rise_callback = 0;
     702:	12 86       	std	Z+10, r1	; 0x0a
     704:	11 86       	std	Z+9, r1	; 0x09
	button4.timer_callback = 0;
     706:	16 86       	std	Z+14, r1	; 0x0e
     708:	15 86       	std	Z+13, r1	; 0x0d
	button4.port = &BUT4_RPORT;
     70a:	40 e3       	ldi	r20, 0x30	; 48
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	57 83       	std	Z+7, r21	; 0x07
     710:	46 83       	std	Z+6, r20	; 0x06
	button4.pin = BUT4_PIN;
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	90 87       	std	Z+8, r25	; 0x08
	
	button5.state = 0;
     716:	e7 e9       	ldi	r30, 0x97	; 151
     718:	f4 e0       	ldi	r31, 0x04	; 4
     71a:	14 82       	std	Z+4, r1	; 0x04
	button5.value = 1;
     71c:	85 83       	std	Z+5, r24	; 0x05
	button5.fall_callback = 0;
     71e:	14 86       	std	Z+12, r1	; 0x0c
     720:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
     722:	12 86       	std	Z+10, r1	; 0x0a
     724:	11 86       	std	Z+9, r1	; 0x09
	button5.timer_callback = 0;
     726:	16 86       	std	Z+14, r1	; 0x0e
     728:	15 86       	std	Z+13, r1	; 0x0d
	button5.port = &BUT5_RPORT;
     72a:	37 83       	std	Z+7, r19	; 0x07
     72c:	26 83       	std	Z+6, r18	; 0x06
	button5.pin = BUT5_PIN;
     72e:	90 87       	std	Z+8, r25	; 0x08
	
	button6.state = 0;
     730:	e7 ed       	ldi	r30, 0xD7	; 215
     732:	f4 e0       	ldi	r31, 0x04	; 4
     734:	14 82       	std	Z+4, r1	; 0x04
	button6.value = 1;
     736:	85 83       	std	Z+5, r24	; 0x05
	button6.fall_callback = 0;
     738:	14 86       	std	Z+12, r1	; 0x0c
     73a:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
     73c:	12 86       	std	Z+10, r1	; 0x0a
     73e:	11 86       	std	Z+9, r1	; 0x09
	button6.timer_callback = 0;
     740:	16 86       	std	Z+14, r1	; 0x0e
     742:	15 86       	std	Z+13, r1	; 0x0d
	button6.port = &BUT6_RPORT;
     744:	69 e3       	ldi	r22, 0x39	; 57
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	77 83       	std	Z+7, r23	; 0x07
     74a:	66 83       	std	Z+6, r22	; 0x06
	button6.pin = BUT6_PIN;
     74c:	a4 e0       	ldi	r26, 0x04	; 4
     74e:	a0 87       	std	Z+8, r26	; 0x08
	
	button7.state = 0;
     750:	e5 ef       	ldi	r30, 0xF5	; 245
     752:	f4 e0       	ldi	r31, 0x04	; 4
     754:	14 82       	std	Z+4, r1	; 0x04
	button7.value = 1;
     756:	85 83       	std	Z+5, r24	; 0x05
	button7.fall_callback = 0;
     758:	14 86       	std	Z+12, r1	; 0x0c
     75a:	13 86       	std	Z+11, r1	; 0x0b
	button7.rise_callback = 0;
     75c:	12 86       	std	Z+10, r1	; 0x0a
     75e:	11 86       	std	Z+9, r1	; 0x09
	button7.timer_callback = 0;
     760:	16 86       	std	Z+14, r1	; 0x0e
     762:	15 86       	std	Z+13, r1	; 0x0d
	button7.port = &BUT7_RPORT;
     764:	43 e3       	ldi	r20, 0x33	; 51
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	57 83       	std	Z+7, r21	; 0x07
     76a:	46 83       	std	Z+6, r20	; 0x06
	button7.pin = BUT7_PIN;
     76c:	80 87       	std	Z+8, r24	; 0x08
	
	button8.state = 0;
     76e:	e4 e0       	ldi	r30, 0x04	; 4
     770:	f5 e0       	ldi	r31, 0x05	; 5
     772:	14 82       	std	Z+4, r1	; 0x04
	button8.value = 1;
     774:	85 83       	std	Z+5, r24	; 0x05
	button8.fall_callback = 0;
     776:	14 86       	std	Z+12, r1	; 0x0c
     778:	13 86       	std	Z+11, r1	; 0x0b
	button8.rise_callback = 0;
     77a:	12 86       	std	Z+10, r1	; 0x0a
     77c:	11 86       	std	Z+9, r1	; 0x09
	button8.timer_callback = 0;
     77e:	16 86       	std	Z+14, r1	; 0x0e
     780:	15 86       	std	Z+13, r1	; 0x0d
	button8.port = &BUT8_RPORT;
     782:	37 83       	std	Z+7, r19	; 0x07
     784:	26 83       	std	Z+6, r18	; 0x06
	button8.pin = BUT8_PIN;
     786:	a0 87       	std	Z+8, r26	; 0x08
	
	button9.state = 0;
     788:	e9 e7       	ldi	r30, 0x79	; 121
     78a:	f4 e0       	ldi	r31, 0x04	; 4
     78c:	14 82       	std	Z+4, r1	; 0x04
	button9.value = 1;
     78e:	85 83       	std	Z+5, r24	; 0x05
	button9.fall_callback = 0;
     790:	14 86       	std	Z+12, r1	; 0x0c
     792:	13 86       	std	Z+11, r1	; 0x0b
	button9.rise_callback = 0;
     794:	12 86       	std	Z+10, r1	; 0x0a
     796:	11 86       	std	Z+9, r1	; 0x09
	button9.timer_callback = 0;
     798:	16 86       	std	Z+14, r1	; 0x0e
     79a:	15 86       	std	Z+13, r1	; 0x0d
	button9.port = &BUT9_RPORT;
     79c:	77 83       	std	Z+7, r23	; 0x07
     79e:	66 83       	std	Z+6, r22	; 0x06
	button9.pin = BUT9_PIN;
     7a0:	90 87       	std	Z+8, r25	; 0x08
	
	button10.state = 0;
     7a2:	e8 e8       	ldi	r30, 0x88	; 136
     7a4:	f4 e0       	ldi	r31, 0x04	; 4
     7a6:	14 82       	std	Z+4, r1	; 0x04
	button10.value = 1;
     7a8:	85 83       	std	Z+5, r24	; 0x05
	button10.fall_callback = 0;
     7aa:	14 86       	std	Z+12, r1	; 0x0c
     7ac:	13 86       	std	Z+11, r1	; 0x0b
	button10.rise_callback = 0;
     7ae:	12 86       	std	Z+10, r1	; 0x0a
     7b0:	11 86       	std	Z+9, r1	; 0x09
	button10.timer_callback = 0;
     7b2:	16 86       	std	Z+14, r1	; 0x0e
     7b4:	15 86       	std	Z+13, r1	; 0x0d
	button10.port = &BUT10_RPORT;
     7b6:	57 83       	std	Z+7, r21	; 0x07
     7b8:	46 83       	std	Z+6, r20	; 0x06
	button10.pin = BUT10_PIN;
     7ba:	10 86       	std	Z+8, r1	; 0x08
     7bc:	08 95       	ret

000007be <process_button>:
}

void process_button(void)
{
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
     7cc:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
     7d0:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
     7d4:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
     7d8:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
     7dc:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <timer_button>
     7e0:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <timer_button+0x1>
     7e4:	a0 91 b7 04 	lds	r26, 0x04B7	; 0x8004b7 <timer_button+0x2>
     7e8:	b0 91 b8 04 	lds	r27, 0x04B8	; 0x8004b8 <timer_button+0x3>
     7ec:	84 17       	cp	r24, r20
     7ee:	95 07       	cpc	r25, r21
     7f0:	a6 07       	cpc	r26, r22
     7f2:	b7 07       	cpc	r27, r23
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <process_button+0x3a>
     7f6:	85 c0       	rjmp	.+266    	; 0x902 <__stack+0xa3>
	{
		timer_button = mktime.ms + 20;
     7f8:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
     7fc:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
     800:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
     804:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
     808:	44 96       	adiw	r24, 0x14	; 20
     80a:	a1 1d       	adc	r26, r1
     80c:	b1 1d       	adc	r27, r1
     80e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <timer_button>
     812:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <timer_button+0x1>
     816:	a0 93 b7 04 	sts	0x04B7, r26	; 0x8004b7 <timer_button+0x2>
     81a:	b0 93 b8 04 	sts	0x04B8, r27	; 0x8004b8 <timer_button+0x3>
     81e:	c0 e6       	ldi	r28, 0x60	; 96
     820:	d0 e0       	ldi	r29, 0x00	; 0
     822:	0f 2e       	mov	r0, r31
     824:	f4 e7       	ldi	r31, 0x74	; 116
     826:	ef 2e       	mov	r14, r31
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
				{
					if (but_tab[i]->timer_callback != 0)
					but_tab[i]->timer_callback(&button1);
					but_tab[i]->tim_cnt = 0;
					but_tab[i]->state = 1;
     82e:	dd 24       	eor	r13, r13
     830:	d3 94       	inc	r13
     832:	8e 01       	movw	r16, r28
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
		{
			red_val = read_button(but_tab[i]);
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	0e 94 3d 03 	call	0x67a	; 0x67a <read_button>
			if(red_val != but_tab[i]->value)
     83c:	e8 81       	ld	r30, Y
     83e:	f9 81       	ldd	r31, Y+1	; 0x01
     840:	95 81       	ldd	r25, Z+5	; 0x05
     842:	89 17       	cp	r24, r25
     844:	e1 f0       	breq	.+56     	; 0x87e <__stack+0x1f>
			{
				but_tab[i]->value = red_val;
     846:	85 83       	std	Z+5, r24	; 0x05
				if (red_val == 1 && but_tab[i]->rise_callback != 0)
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
     84c:	88 81       	ld	r24, Y
     84e:	99 81       	ldd	r25, Y+1	; 0x01
     850:	dc 01       	movw	r26, r24
     852:	19 96       	adiw	r26, 0x09	; 9
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	1a 97       	sbiw	r26, 0x0a	; 10
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	41 c0       	rjmp	.+130    	; 0x8e2 <__stack+0x83>
				but_tab[i]->rise_callback(but_tab[i]);
     860:	09 95       	icall
     862:	3f c0       	rjmp	.+126    	; 0x8e2 <__stack+0x83>
				else if(red_val == 0 && but_tab[i]->fall_callback != 0)
     864:	81 11       	cpse	r24, r1
     866:	3d c0       	rjmp	.+122    	; 0x8e2 <__stack+0x83>
     868:	88 81       	ld	r24, Y
     86a:	99 81       	ldd	r25, Y+1	; 0x01
     86c:	dc 01       	movw	r26, r24
     86e:	1b 96       	adiw	r26, 0x0b	; 11
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	1c 97       	sbiw	r26, 0x0c	; 12
     876:	30 97       	sbiw	r30, 0x00	; 0
     878:	21 f0       	breq	.+8      	; 0x882 <__stack+0x23>
				but_tab[i]->fall_callback(but_tab[i]);
     87a:	09 95       	icall
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
			}
			//timer
			if (red_val == 0)
     87e:	81 11       	cpse	r24, r1
     880:	30 c0       	rjmp	.+96     	; 0x8e2 <__stack+0x83>
			{
				but_tab[i]->tim_cnt++;
     882:	d8 01       	movw	r26, r16
     884:	ed 91       	ld	r30, X+
     886:	fc 91       	ld	r31, X
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	a2 81       	ldd	r26, Z+2	; 0x02
     88e:	b3 81       	ldd	r27, Z+3	; 0x03
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	a1 1d       	adc	r26, r1
     894:	b1 1d       	adc	r27, r1
     896:	80 83       	st	Z, r24
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	a2 83       	std	Z+2, r26	; 0x02
     89c:	b3 83       	std	Z+3, r27	; 0x03
				if (but_tab[i]->tim_cnt >=TIMER_CNT_TIMEOUT && but_tab[i]->state != 1)
     89e:	d8 01       	movw	r26, r16
     8a0:	ed 91       	ld	r30, X+
     8a2:	fc 91       	ld	r31, X
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	a2 81       	ldd	r26, Z+2	; 0x02
     8aa:	b3 81       	ldd	r27, Z+3	; 0x03
     8ac:	88 97       	sbiw	r24, 0x28	; 40
     8ae:	a1 05       	cpc	r26, r1
     8b0:	b1 05       	cpc	r27, r1
     8b2:	10 f1       	brcs	.+68     	; 0x8f8 <__stack+0x99>
     8b4:	84 81       	ldd	r24, Z+4	; 0x04
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__stack+0x99>
				{
					if (but_tab[i]->timer_callback != 0)
     8ba:	05 84       	ldd	r0, Z+13	; 0x0d
     8bc:	f6 85       	ldd	r31, Z+14	; 0x0e
     8be:	e0 2d       	mov	r30, r0
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	19 f0       	breq	.+6      	; 0x8ca <__stack+0x6b>
					but_tab[i]->timer_callback(&button1);
     8c4:	86 ee       	ldi	r24, 0xE6	; 230
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	09 95       	icall
					but_tab[i]->tim_cnt = 0;
     8ca:	d8 01       	movw	r26, r16
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	10 82       	st	Z, r1
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	12 82       	std	Z+2, r1	; 0x02
     8d8:	13 82       	std	Z+3, r1	; 0x03
					but_tab[i]->state = 1;
     8da:	ed 91       	ld	r30, X+
     8dc:	fc 91       	ld	r31, X
     8de:	d4 82       	std	Z+4, r13	; 0x04
     8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <__stack+0x99>
				}
			}
			else
			{
				but_tab[i]->tim_cnt = 0;
     8e2:	d8 01       	movw	r26, r16
     8e4:	ed 91       	ld	r30, X+
     8e6:	fc 91       	ld	r31, X
     8e8:	11 97       	sbiw	r26, 0x01	; 1
     8ea:	10 82       	st	Z, r1
     8ec:	11 82       	std	Z+1, r1	; 0x01
     8ee:	12 82       	std	Z+2, r1	; 0x02
     8f0:	13 82       	std	Z+3, r1	; 0x03
				but_tab[i]->state = 0;
     8f2:	ed 91       	ld	r30, X+
     8f4:	fc 91       	ld	r31, X
     8f6:	14 82       	std	Z+4, r1	; 0x04
     8f8:	22 96       	adiw	r28, 0x02	; 2
	uint8_t red_val = 0;
	if (timer_button < mktime.ms)
	{
		timer_button = mktime.ms + 20;
		//process
		for (uint8_t i=0; i<BUTTON_CNT; i++)
     8fa:	ce 15       	cp	r28, r14
     8fc:	df 05       	cpc	r29, r15
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0xa3>
     900:	98 cf       	rjmp	.-208    	; 0x832 <process_button+0x74>
				but_tab[i]->tim_cnt = 0;
				but_tab[i]->state = 0;
			}
		} // end for
	}// end if
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	08 95       	ret

00000912 <init_buttons>:

void init_buttons(void)
{
	init_but_struct();
     912:	0e 94 4f 03 	call	0x69e	; 0x69e <init_but_struct>
	//button1
	CLEAR_PIN(BUT1_DDR, BUT1_PIN);
     916:	ba 98       	cbi	0x17, 2	; 23
	SET_PIN(BUT1_PORT, BUT1_PIN);
     918:	c2 9a       	sbi	0x18, 2	; 24
	
	CLEAR_PIN(BUT2_DDR, BUT2_PIN);
     91a:	b9 98       	cbi	0x17, 1	; 23
	SET_PIN(BUT2_PORT, BUT2_PIN);
     91c:	c1 9a       	sbi	0x18, 1	; 24
	
	CLEAR_PIN(BUT3_DDR, BUT3_PIN);
     91e:	be 98       	cbi	0x17, 6	; 23
	SET_PIN(BUT3_PORT, BUT3_PIN);
     920:	c6 9a       	sbi	0x18, 6	; 24
	
	CLEAR_PIN(BUT4_DDR, BUT4_PIN);
     922:	8b 98       	cbi	0x11, 3	; 17
	SET_PIN(BUT4_PORT, BUT4_PIN);
     924:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_PIN(BUT5_DDR, BUT5_PIN);
     926:	bb 98       	cbi	0x17, 3	; 23
	SET_PIN(BUT5_PORT, BUT5_PIN);
     928:	c3 9a       	sbi	0x18, 3	; 24
	
	CLEAR_PIN(BUT6_DDR, BUT6_PIN);
     92a:	d4 98       	cbi	0x1a, 4	; 26
	SET_PIN(BUT6_PORT, BUT6_PIN);
     92c:	dc 9a       	sbi	0x1b, 4	; 27
	
	CLEAR_PIN(BUT7_DDR, BUT7_PIN);
     92e:	a1 98       	cbi	0x14, 1	; 20
	SET_PIN(BUT7_PORT, BUT7_PIN);
     930:	a9 9a       	sbi	0x15, 1	; 21
	
	CLEAR_PIN(BUT8_DDR, BUT8_PIN);
     932:	bc 98       	cbi	0x17, 4	; 23
	SET_PIN(BUT8_PORT, BUT8_PIN);
     934:	c4 9a       	sbi	0x18, 4	; 24
	
	CLEAR_PIN(BUT9_DDR, BUT9_PIN);
     936:	d3 98       	cbi	0x1a, 3	; 26
	SET_PIN(BUT9_PORT, BUT9_PIN);
     938:	db 9a       	sbi	0x1b, 3	; 27
	
	CLEAR_PIN(BUT10_DDR, BUT10_PIN);
     93a:	a0 98       	cbi	0x14, 0	; 20
	SET_PIN(BUT10_PORT, BUT10_PIN);
     93c:	a8 9a       	sbi	0x15, 0	; 21
     93e:	08 95       	ret

00000940 <buzzer_process>:
timer_t buzzer_timer = 0;
timer_t buzzer_state = 0;

void buzzer_process(void)
{
	if (buzzer_timer < mktime.ms)
     940:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
     944:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
     948:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
     94c:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
     950:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buzzer_timer>
     954:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <buzzer_timer+0x1>
     958:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <buzzer_timer+0x2>
     95c:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <buzzer_timer+0x3>
     960:	84 17       	cp	r24, r20
     962:	95 07       	cpc	r25, r21
     964:	a6 07       	cpc	r26, r22
     966:	b7 07       	cpc	r27, r23
     968:	08 f0       	brcs	.+2      	; 0x96c <buzzer_process+0x2c>
     96a:	59 c0       	rjmp	.+178    	; 0xa1e <buzzer_process+0xde>
	{
		if (system_events&(1<<EV_ON_BUZZER) && buzzer_state==0)
     96c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
     970:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
     974:	95 ff       	sbrs	r25, 5
     976:	37 c0       	rjmp	.+110    	; 0x9e6 <buzzer_process+0xa6>
     978:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <buzzer_state>
     97c:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <buzzer_state+0x1>
     980:	a0 91 d6 02 	lds	r26, 0x02D6	; 0x8002d6 <buzzer_state+0x2>
     984:	b0 91 d7 02 	lds	r27, 0x02D7	; 0x8002d7 <buzzer_state+0x3>
     988:	89 2b       	or	r24, r25
     98a:	8a 2b       	or	r24, r26
     98c:	8b 2b       	or	r24, r27
     98e:	59 f5       	brne	.+86     	; 0x9e6 <buzzer_process+0xa6>
		{
			ON_BUZZER;
     990:	c0 9a       	sbi	0x18, 0	; 24
			CLEAR_PIN(system_events, EV_ON_BUZZER);
     992:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
     996:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
     99a:	9f 7d       	andi	r25, 0xDF	; 223
     99c:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
     9a0:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
			buzzer_state = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <buzzer_state>
     9b0:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <buzzer_state+0x1>
     9b4:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <buzzer_state+0x2>
     9b8:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <buzzer_state+0x3>
			buzzer_timer += 100;
     9bc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buzzer_timer>
     9c0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <buzzer_timer+0x1>
     9c4:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <buzzer_timer+0x2>
     9c8:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <buzzer_timer+0x3>
     9cc:	8c 59       	subi	r24, 0x9C	; 156
     9ce:	9f 4f       	sbci	r25, 0xFF	; 255
     9d0:	af 4f       	sbci	r26, 0xFF	; 255
     9d2:	bf 4f       	sbci	r27, 0xFF	; 255
     9d4:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <buzzer_timer>
     9d8:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <buzzer_timer+0x1>
     9dc:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <buzzer_timer+0x2>
     9e0:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <buzzer_timer+0x3>
     9e4:	08 95       	ret
		}
		else
		{
			OFF_BUZZER;
     9e6:	c0 98       	cbi	0x18, 0	; 24
			buzzer_state = 0;
     9e8:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <buzzer_state>
     9ec:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <buzzer_state+0x1>
     9f0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <buzzer_state+0x2>
     9f4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <buzzer_state+0x3>
			buzzer_timer += 50;
     9f8:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buzzer_timer>
     9fc:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <buzzer_timer+0x1>
     a00:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <buzzer_timer+0x2>
     a04:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <buzzer_timer+0x3>
     a08:	c2 96       	adiw	r24, 0x32	; 50
     a0a:	a1 1d       	adc	r26, r1
     a0c:	b1 1d       	adc	r27, r1
     a0e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <buzzer_timer>
     a12:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <buzzer_timer+0x1>
     a16:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <buzzer_timer+0x2>
     a1a:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <buzzer_timer+0x3>
     a1e:	08 95       	ret

00000a20 <init_buzzer>:
	}
}

void init_buzzer(void)
{
	SET_PIN(BUZZER_DDR1, BUZZER_PIN1);
     a20:	b8 9a       	sbi	0x17, 0	; 23
	//SET_PIN(BUZZER_DDR2, BUZZER_PIN2);
	OFF_BUZZER;
     a22:	c0 98       	cbi	0x18, 0	; 24
     a24:	08 95       	ret

00000a26 <button_1_menu>:
	}
}

void button_1_menu(void *pv)
{
	if (last_button == 10 && state_menu == 0) last_button = 8;
     a26:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <last_button>
     a2a:	8a 30       	cpi	r24, 0x0A	; 10
     a2c:	41 f4       	brne	.+16     	; 0xa3e <button_1_menu+0x18>
     a2e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a32:	81 11       	cpse	r24, r1
     a34:	0b c0       	rjmp	.+22     	; 0xa4c <button_1_menu+0x26>
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <last_button>
     a3c:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     a3e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a42:	81 11       	cpse	r24, r1
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <button_1_menu+0x26>
     a46:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
     a4a:	08 95       	ret
	
	if (state_menu == 1 && menu_param.motor_add > 1)
     a4c:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	39 f4       	brne	.+14     	; 0xa62 <button_1_menu+0x3c>
     a54:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <menu_param>
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	18 f0       	brcs	.+6      	; 0xa62 <button_1_menu+0x3c>
	{
		menu_param.motor_add--;
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <menu_param>
     a62:	08 95       	ret

00000a64 <button_2_menu>:
	}
}
void button_2_menu(void *pv)
{
	if (last_button == 0 && state_menu == 0) last_button = 9;
     a64:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <last_button>
     a68:	81 11       	cpse	r24, r1
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <button_2_menu+0x18>
     a6c:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a70:	81 11       	cpse	r24, r1
     a72:	0b c0       	rjmp	.+22     	; 0xa8a <button_2_menu+0x26>
     a74:	89 e0       	ldi	r24, 0x09	; 9
     a76:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <last_button>
     a7a:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     a7c:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a80:	81 11       	cpse	r24, r1
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <button_2_menu+0x26>
     a84:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
     a88:	08 95       	ret
	
	if (state_menu == 1 && menu_param.motor_add < 99)
     a8a:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <button_2_menu+0x3c>
     a92:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <menu_param>
     a96:	83 36       	cpi	r24, 0x63	; 99
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <button_2_menu+0x3c>
	{
		menu_param.motor_add++;
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <menu_param>
     aa0:	08 95       	ret

00000aa2 <button_5_menu>:
	}
}

void button_5_menu(void *pv)
{
	if (state_menu == 1 && menu_param.servo_add > 1)
     aa2:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	41 f4       	brne	.+16     	; 0xaba <button_5_menu+0x18>
     aaa:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <menu_param+0x1>
     aae:	92 30       	cpi	r25, 0x02	; 2
     ab0:	10 f1       	brcs	.+68     	; 0xaf6 <button_5_menu+0x54>
	{
		menu_param.servo_add--;
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <menu_param+0x1>
     ab8:	1e c0       	rjmp	.+60     	; 0xaf6 <button_5_menu+0x54>
	}
	
	if (last_button == 7 && state_menu == 0)
     aba:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <last_button>
     abe:	97 30       	cpi	r25, 0x07	; 7
     ac0:	a9 f4       	brne	.+42     	; 0xaec <button_5_menu+0x4a>
     ac2:	81 11       	cpse	r24, r1
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <button_5_menu+0x5c>
	{ 
		state_menu = 1;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <state_menu>
		last_button = 0;
     acc:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
		if (menu_param.disable_error == 1) LED_SERVO_OFF;
     ad0:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <menu_param+0x2>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	11 f4       	brne	.+4      	; 0xadc <button_5_menu+0x3a>
     ad8:	96 98       	cbi	0x12, 6	; 18
     ada:	01 c0       	rjmp	.+2      	; 0xade <button_5_menu+0x3c>
		else LED_SERVO_ON;
     adc:	96 9a       	sbi	0x12, 6	; 18
		LED_MOTOR_ON;
     ade:	94 9a       	sbi	0x12, 4	; 18
		segment1.state = SEG_MENU;
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
		segment2.state = SEG_MENU;
     ae6:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
     aea:	08 95       	ret
	}
	else if(state_menu == 0) last_button = 0;
     aec:	81 11       	cpse	r24, r1
     aee:	07 c0       	rjmp	.+14     	; 0xafe <button_5_menu+0x5c>
     af0:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
}
     af4:	08 95       	ret
	if (state_menu == 1 && menu_param.servo_add > 1)
	{
		menu_param.servo_add--;
	}
	
	if (last_button == 7 && state_menu == 0)
     af6:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <last_button>
     afa:	97 30       	cpi	r25, 0x07	; 7
     afc:	b9 f7       	brne	.-18     	; 0xaec <button_5_menu+0x4a>
     afe:	08 95       	ret

00000b00 <button_6_menu>:
	}
	else if(state_menu == 0) last_button = 0;
}
void button_6_menu(void *pv)
{
	if (last_button == 8 && state_menu == 0) last_button = 6;
     b00:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <last_button>
     b04:	88 30       	cpi	r24, 0x08	; 8
     b06:	41 f4       	brne	.+16     	; 0xb18 <button_6_menu+0x18>
     b08:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b0c:	81 11       	cpse	r24, r1
     b0e:	0b c0       	rjmp	.+22     	; 0xb26 <button_6_menu+0x26>
     b10:	86 e0       	ldi	r24, 0x06	; 6
     b12:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <last_button>
     b16:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     b18:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b1c:	81 11       	cpse	r24, r1
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <button_6_menu+0x26>
     b20:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
     b24:	08 95       	ret
	if (state_menu == 1 && menu_param.servo_add < 99)
     b26:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	39 f4       	brne	.+14     	; 0xb3c <button_6_menu+0x3c>
     b2e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menu_param+0x1>
     b32:	83 36       	cpi	r24, 0x63	; 99
     b34:	18 f4       	brcc	.+6      	; 0xb3c <button_6_menu+0x3c>
	{
		menu_param.servo_add++;
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menu_param+0x1>
     b3c:	08 95       	ret

00000b3e <button_7_menu>:
	}
}
void button_7_menu(void *pv)
{
	if (last_button == 6 && state_menu == 0) last_button = 7;
     b3e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <last_button>
     b42:	86 30       	cpi	r24, 0x06	; 6
     b44:	41 f4       	brne	.+16     	; 0xb56 <button_7_menu+0x18>
     b46:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b4a:	81 11       	cpse	r24, r1
     b4c:	0b c0       	rjmp	.+22     	; 0xb64 <button_7_menu+0x26>
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <last_button>
     b54:	08 95       	ret
	else if(state_menu == 0) last_button = 0;
     b56:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b5a:	81 11       	cpse	r24, r1
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <button_7_menu+0x26>
     b5e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
     b62:	08 95       	ret
	
	if (state_menu == 1 && menu_param.disable_error == 0)
     b64:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	71 f4       	brne	.+28     	; 0xb88 <button_7_menu+0x4a>
     b6c:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <menu_param+0x2>
     b70:	81 11       	cpse	r24, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <button_7_menu+0x40>
	{
		menu_param.disable_error = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <menu_param+0x2>
		LED_SERVO_OFF;
     b7a:	96 98       	cbi	0x12, 6	; 18
     b7c:	08 95       	ret
	}
	else if (state_menu == 1 && menu_param.disable_error == 1)
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	19 f4       	brne	.+6      	; 0xb88 <button_7_menu+0x4a>
	{
		menu_param.disable_error = 0;
     b82:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <menu_param+0x2>
		LED_SERVO_ON;
     b86:	96 9a       	sbi	0x12, 6	; 18
     b88:	08 95       	ret

00000b8a <button_8_menu>:
	}
}
void button_8_menu(void *pv)
{
     b8a:	08 95       	ret

00000b8c <button_9_menu>:
	
}
void button_9_menu(void *pv)
{
     b8c:	08 95       	ret

00000b8e <button_10_menu>:
	
}
void button_10_menu(void *pv)
{
     b8e:	08 95       	ret

00000b90 <button_3_menu>:
	{
		menu_param.motor_add++;
	}
}
void button_3_menu(void *pv)
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
	if (last_button == 9 && state_menu == 0) last_button = 10;
     b94:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <last_button>
     b98:	89 30       	cpi	r24, 0x09	; 9
     b9a:	41 f4       	brne	.+16     	; 0xbac <button_3_menu+0x1c>
     b9c:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     ba0:	81 11       	cpse	r24, r1
     ba2:	0b c0       	rjmp	.+22     	; 0xbba <button_3_menu+0x2a>
     ba4:	8a e0       	ldi	r24, 0x0A	; 10
     ba6:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <last_button>
     baa:	2b c0       	rjmp	.+86     	; 0xc02 <button_3_menu+0x72>
	else if(state_menu == 0) last_button = 0;
     bac:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     bb0:	81 11       	cpse	r24, r1
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <button_3_menu+0x2a>
     bb4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <last_button>
     bb8:	24 c0       	rjmp	.+72     	; 0xc02 <button_3_menu+0x72>
	
	if (state_menu == 1 && menu_param.motor_add <= 99 && menu_param.servo_add <= 99)
     bba:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	01 f5       	brne	.+64     	; 0xc02 <button_3_menu+0x72>
     bc2:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <menu_param>
     bc6:	84 36       	cpi	r24, 0x64	; 100
     bc8:	e0 f4       	brcc	.+56     	; 0xc02 <button_3_menu+0x72>
     bca:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menu_param+0x1>
     bce:	84 36       	cpi	r24, 0x64	; 100
     bd0:	c0 f4       	brcc	.+48     	; 0xc02 <button_3_menu+0x72>
static void save_parametrs(void)
{
	uint8_t* pnt = (uint8_t*) &menu_param;
	for (uint8_t byte_n=MENU_ADDR; byte_n<MENU_ADDR+sizeof(menu_t);byte_n++)
	{
		EEPROM_write(byte_n,*pnt);
     bd2:	c3 e1       	ldi	r28, 0x13	; 19
     bd4:	d5 e0       	ldi	r29, 0x05	; 5
     bd6:	68 81       	ld	r22, Y
     bd8:	8c e0       	ldi	r24, 0x0C	; 12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <EEPROM_write>
     be0:	69 81       	ldd	r22, Y+1	; 0x01
     be2:	8d e0       	ldi	r24, 0x0D	; 13
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <EEPROM_write>
     bea:	6a 81       	ldd	r22, Y+2	; 0x02
     bec:	8e e0       	ldi	r24, 0x0E	; 14
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <EEPROM_write>
	else if(state_menu == 0) last_button = 0;
	
	if (state_menu == 1 && menu_param.motor_add <= 99 && menu_param.servo_add <= 99)
	{
		save_parametrs();
		segment1.state = SEG_MENU_SAVE; 
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
		segment2.state = SEG_MENU_SAVE;
     bfa:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
		LED_MOTOR_OFF;
     bfe:	94 98       	cbi	0x12, 4	; 18
		LED_SERVO_OFF;
     c00:	96 98       	cbi	0x12, 6	; 18
	}
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <read_menu_parametrs>:
		pnt++;
	}
}

void read_menu_parametrs(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
	uint8_t* pnt = (uint8_t*) &menu_param;
	for (uint8_t byte_n=MENU_ADDR; byte_n<MENU_ADDR+sizeof(menu_t);byte_n++)
	{
		*pnt = EEPROM_read(byte_n);
     c0c:	8c e0       	ldi	r24, 0x0C	; 12
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 94 0b 	call	0x1728	; 0x1728 <EEPROM_read>
     c14:	c3 e1       	ldi	r28, 0x13	; 19
     c16:	d5 e0       	ldi	r29, 0x05	; 5
     c18:	88 83       	st	Y, r24
     c1a:	8d e0       	ldi	r24, 0x0D	; 13
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 94 0b 	call	0x1728	; 0x1728 <EEPROM_read>
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	8e e0       	ldi	r24, 0x0E	; 14
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 94 0b 	call	0x1728	; 0x1728 <EEPROM_read>
     c2c:	8a 83       	std	Y+2, r24	; 0x02
		pnt++;
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <menu_process>:
}

void menu_process(void)
{
	static timer_t menu_timer;
	if (menu_timer < mktime.ms && state_menu == 1)
     c34:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
     c38:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
     c3c:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
     c40:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
     c44:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <menu_timer.1995>
     c48:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <menu_timer.1995+0x1>
     c4c:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <menu_timer.1995+0x2>
     c50:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <menu_timer.1995+0x3>
     c54:	84 17       	cp	r24, r20
     c56:	95 07       	cpc	r25, r21
     c58:	a6 07       	cpc	r26, r22
     c5a:	b7 07       	cpc	r27, r23
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <menu_process+0x2c>
     c5e:	54 c0       	rjmp	.+168    	; 0xd08 <menu_process+0xd4>
     c60:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <state_menu>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <menu_process+0x36>
     c68:	4f c0       	rjmp	.+158    	; 0xd08 <menu_process+0xd4>
	{
		if (segment1.state == SEG_MENU)
     c6a:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
     c6e:	87 30       	cpi	r24, 0x07	; 7
     c70:	31 f4       	brne	.+12     	; 0xc7e <menu_process+0x4a>
			disp_set_number(&segment1, menu_param.motor_add);
     c72:	60 91 13 05 	lds	r22, 0x0513	; 0x800513 <menu_param>
     c76:	86 e2       	ldi	r24, 0x26	; 38
     c78:	95 e0       	ldi	r25, 0x05	; 5
     c7a:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
		if (segment2.state == SEG_MENU)
     c7e:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
     c82:	87 30       	cpi	r24, 0x07	; 7
     c84:	31 f4       	brne	.+12     	; 0xc92 <menu_process+0x5e>
			disp_set_number(&segment2, menu_param.servo_add);
     c86:	60 91 14 05 	lds	r22, 0x0514	; 0x800514 <menu_param+0x1>
     c8a:	81 e2       	ldi	r24, 0x21	; 33
     c8c:	95 e0       	ldi	r25, 0x05	; 5
     c8e:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
			
		if (segment1.state == SEG_MENU_SAVE && segment2.state == SEG_MENU_SAVE)
     c92:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
     c96:	88 30       	cpi	r24, 0x08	; 8
     c98:	49 f5       	brne	.+82     	; 0xcec <menu_process+0xb8>
     c9a:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
     c9e:	88 30       	cpi	r24, 0x08	; 8
     ca0:	29 f5       	brne	.+74     	; 0xcec <menu_process+0xb8>
		{
			menu_timer = 1000 + mktime.ms;
     ca2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
     ca6:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
     caa:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
     cae:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
     cb2:	88 51       	subi	r24, 0x18	; 24
     cb4:	9c 4f       	sbci	r25, 0xFC	; 252
     cb6:	af 4f       	sbci	r26, 0xFF	; 255
     cb8:	bf 4f       	sbci	r27, 0xFF	; 255
     cba:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <menu_timer.1995>
     cbe:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <menu_timer.1995+0x1>
     cc2:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <menu_timer.1995+0x2>
     cc6:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <menu_timer.1995+0x3>
			DispD2.value = 's';
     cca:	83 e7       	ldi	r24, 0x73	; 115
     ccc:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <DispD2>
			DispD1.value = 'a';
     cd0:	81 e6       	ldi	r24, 0x61	; 97
     cd2:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <DispD1>
			DispD3.value = 'p';
     cd6:	80 e7       	ldi	r24, 0x70	; 112
     cd8:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <DispD3>
			DispD4.value = 0;
     cdc:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <DispD4>
			segment1.state = SEG_MENU_OFF;
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
			segment2.state = SEG_MENU_OFF;
     ce6:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
			
			return;
     cea:	08 95       	ret
		}
		
		if (segment1.state == SEG_MENU_OFF && segment2.state == SEG_MENU_OFF)
     cec:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
     cf0:	8a 30       	cpi	r24, 0x0A	; 10
     cf2:	51 f4       	brne	.+20     	; 0xd08 <menu_process+0xd4>
     cf4:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
     cf8:	8a 30       	cpi	r24, 0x0A	; 10
     cfa:	31 f4       	brne	.+12     	; 0xd08 <menu_process+0xd4>
		{
			segment1.state = SEG_OFF;
     cfc:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <segment1+0x4>
			segment2.state = SEG_OFF;
     d00:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <segment2+0x4>
			state_menu = 0;
     d04:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <state_menu>
     d08:	08 95       	ret

00000d0a <init_menu>:
	}
}

void init_menu(void)
{
	button1.fall_callback = button_1_menu;
     d0a:	83 e1       	ldi	r24, 0x13	; 19
     d0c:	95 e0       	ldi	r25, 0x05	; 5
     d0e:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <button1+0xc>
     d12:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <button1+0xb>
	button2.fall_callback = button_2_menu;
     d16:	82 e3       	ldi	r24, 0x32	; 50
     d18:	95 e0       	ldi	r25, 0x05	; 5
     d1a:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <button2+0xc>
     d1e:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <button2+0xb>
	button3.fall_callback = button_3_menu;
     d22:	88 ec       	ldi	r24, 0xC8	; 200
     d24:	95 e0       	ldi	r25, 0x05	; 5
     d26:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <button3+0xc>
     d2a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <button3+0xb>
	button5.fall_callback = button_5_menu;
     d2e:	81 e5       	ldi	r24, 0x51	; 81
     d30:	95 e0       	ldi	r25, 0x05	; 5
     d32:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <button5+0xc>
     d36:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <button5+0xb>
	button6.fall_callback = button_6_menu;
     d3a:	80 e8       	ldi	r24, 0x80	; 128
     d3c:	95 e0       	ldi	r25, 0x05	; 5
     d3e:	90 93 e3 04 	sts	0x04E3, r25	; 0x8004e3 <button6+0xc>
     d42:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <button6+0xb>
	button7.fall_callback = button_7_menu;
     d46:	8f e9       	ldi	r24, 0x9F	; 159
     d48:	95 e0       	ldi	r25, 0x05	; 5
     d4a:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <button7+0xc>
     d4e:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <button7+0xb>
	button8.fall_callback = button_8_menu;
     d52:	85 ec       	ldi	r24, 0xC5	; 197
     d54:	95 e0       	ldi	r25, 0x05	; 5
     d56:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <button8+0xc>
     d5a:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <button8+0xb>
	button9.fall_callback = button_9_menu;
     d5e:	86 ec       	ldi	r24, 0xC6	; 198
     d60:	95 e0       	ldi	r25, 0x05	; 5
     d62:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <button9+0xc>
     d66:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <button9+0xb>
	button10.fall_callback = button_10_menu;
     d6a:	87 ec       	ldi	r24, 0xC7	; 199
     d6c:	95 e0       	ldi	r25, 0x05	; 5
     d6e:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <button10+0xc>
     d72:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <button10+0xb>
	read_menu_parametrs();
     d76:	0e 94 04 06 	call	0xc08	; 0xc08 <read_menu_parametrs>
	if (menu_param.motor_add > 99) menu_param.motor_add = 0;
     d7a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <menu_param>
     d7e:	84 36       	cpi	r24, 0x64	; 100
     d80:	10 f0       	brcs	.+4      	; 0xd86 <init_menu+0x7c>
     d82:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <menu_param>
	if (menu_param.servo_add > 99) menu_param.servo_add = 0;
     d86:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menu_param+0x1>
     d8a:	84 36       	cpi	r24, 0x64	; 100
     d8c:	10 f0       	brcs	.+4      	; 0xd92 <init_menu+0x88>
     d8e:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <menu_param+0x1>
	if (menu_param.disable_error > 1) menu_param.disable_error = 0;
     d92:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <menu_param+0x2>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	10 f0       	brcs	.+4      	; 0xd9e <init_menu+0x94>
     d9a:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <menu_param+0x2>
     d9e:	08 95       	ret

00000da0 <dcmotorpwm_init>:
	}
	else
	{
		return 0;
	}
}
     da0:	8e e9       	ldi	r24, 0x9E	; 158
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     dac:	8b e1       	ldi	r24, 0x1B	; 27
     dae:	95 e0       	ldi	r25, 0x05	; 5
     db0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <evTime_init>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <motorD>
     dba:	94 98       	cbi	0x12, 4	; 18
     dbc:	15 bc       	out	0x25, r1	; 37
     dbe:	8f 9a       	sbi	0x11, 7	; 17
     dc0:	97 9a       	sbi	0x12, 7	; 18
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	08 95       	ret

00000dc8 <dcmotorpwm_deinit>:
     dc8:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <motorD>
     dcc:	15 bc       	out	0x25, r1	; 37
     dce:	97 9a       	sbi	0x12, 7	; 18
     dd0:	94 98       	cbi	0x12, 4	; 18
     dd2:	08 95       	ret

00000dd4 <dcmotor_is_on>:
     dd4:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <motorD>
     dd8:	92 50       	subi	r25, 0x02	; 2
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	93 30       	cpi	r25, 0x03	; 3
     de0:	10 f0       	brcs	.+4      	; 0xde6 <dcmotor_is_on+0x12>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	c9 01       	movw	r24, r18
     de8:	08 95       	ret

00000dea <dcmotorpwm_stop>:
     dea:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <dcmotor_is_on>
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	99 f0       	breq	.+38     	; 0xe18 <dcmotorpwm_stop+0x2e>
     df2:	8c ea       	ldi	r24, 0xAC	; 172
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
     dfe:	15 bc       	out	0x25, r1	; 37
     e00:	97 9a       	sbi	0x12, 7	; 18
     e02:	94 98       	cbi	0x12, 4	; 18
     e04:	e7 e1       	ldi	r30, 0x17	; 23
     e06:	f5 e0       	ldi	r31, 0x05	; 5
     e08:	80 81       	ld	r24, Z
     e0a:	81 83       	std	Z+1, r24	; 0x01
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 83       	st	Z, r24
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	08 95       	ret

00000e1a <dcmotorpwm_start>:
     e1a:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <motorD>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	d9 f4       	brne	.+54     	; 0xe58 <dcmotorpwm_start+0x3e>
     e22:	94 9a       	sbi	0x12, 4	; 18
     e24:	85 b5       	in	r24, 0x25	; 37
     e26:	80 63       	ori	r24, 0x30	; 48
     e28:	85 bd       	out	0x25, r24	; 37
     e2a:	85 b5       	in	r24, 0x25	; 37
     e2c:	80 64       	ori	r24, 0x40	; 64
     e2e:	85 bd       	out	0x25, r24	; 37
     e30:	85 b5       	in	r24, 0x25	; 37
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	85 bd       	out	0x25, r24	; 37
     e36:	e7 e1       	ldi	r30, 0x17	; 23
     e38:	f5 e0       	ldi	r31, 0x05	; 5
     e3a:	80 81       	ld	r24, Z
     e3c:	81 83       	std	Z+1, r24	; 0x01
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	80 83       	st	Z, r24
     e42:	48 ee       	ldi	r20, 0xE8	; 232
     e44:	53 e0       	ldi	r21, 0x03	; 3
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	8b e1       	ldi	r24, 0x1B	; 27
     e4c:	95 e0       	ldi	r25, 0x05	; 5
     e4e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	08 95       	ret
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	08 95       	ret

00000e5e <dcmotor_get_pwm>:

int dcmotor_get_pwm(void)
{
	return motorD.pwm_value;
     e5e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <motorD+0x3>
}
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 95       	ret

00000e66 <dcmotor_set_error>:

void dcmotor_set_error(void)
{
	debug_msg("dcmotor error\n");
     e66:	8a eb       	ldi	r24, 0xBA	; 186
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9f 93       	push	r25
     e6c:	8f 93       	push	r24
     e6e:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
	dcmotorpwm_stop();
     e72:	0e 94 f5 06 	call	0xdea	; 0xdea <dcmotorpwm_stop>
	motorD.state = MOTOR_ERROR;
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <motorD>
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	08 95       	ret

00000e82 <dcmotor_set_try>:

int dcmotor_set_try(void)
{
	if (dcmotor_is_on())
     e82:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <dcmotor_is_on>
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	29 f0       	breq	.+10     	; 0xe94 <dcmotor_set_try+0x12>
	{
		motorD.state = MOTOR_TRY;
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <motorD>
		return 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
     e94:	08 95       	ret

00000e96 <dcmotor_process>:

void dcmotor_process(uint8_t value)
{
     e96:	cf 93       	push	r28
     e98:	c8 2f       	mov	r28, r24
	static evTime dcmotor_timer;
	if (evTime_process_period(&dcmotor_timer, 150))
     e9a:	46 e9       	ldi	r20, 0x96	; 150
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	81 ee       	ldi	r24, 0xE1	; 225
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <evTime_process_period>
     eaa:	89 2b       	or	r24, r25
     eac:	09 f4       	brne	.+2      	; 0xeb0 <dcmotor_process+0x1a>
     eae:	58 c0       	rjmp	.+176    	; 0xf60 <dcmotor_process+0xca>
	{
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
     eb0:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <motorD>
     eb4:	93 30       	cpi	r25, 0x03	; 3
     eb6:	e9 f0       	breq	.+58     	; 0xef2 <dcmotor_process+0x5c>
     eb8:	28 f4       	brcc	.+10     	; 0xec4 <dcmotor_process+0x2e>
     eba:	91 30       	cpi	r25, 0x01	; 1
     ebc:	b9 f0       	breq	.+46     	; 0xeec <dcmotor_process+0x56>
     ebe:	92 30       	cpi	r25, 0x02	; 2
     ec0:	41 f0       	breq	.+16     	; 0xed2 <dcmotor_process+0x3c>
     ec2:	4e c0       	rjmp	.+156    	; 0xf60 <dcmotor_process+0xca>
     ec4:	94 30       	cpi	r25, 0x04	; 4
     ec6:	09 f4       	brne	.+2      	; 0xeca <dcmotor_process+0x34>
     ec8:	48 c0       	rjmp	.+144    	; 0xf5a <dcmotor_process+0xc4>
     eca:	95 30       	cpi	r25, 0x05	; 5
     ecc:	09 f4       	brne	.+2      	; 0xed0 <dcmotor_process+0x3a>
     ece:	42 c0       	rjmp	.+132    	; 0xf54 <dcmotor_process+0xbe>
     ed0:	47 c0       	rjmp	.+142    	; 0xf60 <dcmotor_process+0xca>
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
     ed2:	c0 93 1a 05 	sts	0x051A, r28	; 0x80051a <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     ed6:	2b ee       	ldi	r18, 0xEB	; 235
     ed8:	c2 9f       	mul	r28, r18
     eda:	c0 01       	movw	r24, r0
     edc:	11 24       	eor	r1, r1
     ede:	63 e6       	ldi	r22, 0x63	; 99
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__divmodhi4>
     ee6:	6c 5e       	subi	r22, 0xEC	; 236
		//debug_msg("Process %d\n", motorD.state);
		switch(motorD.state)
		{
			case MOTOR_ON:
			motorD.pwm_value = value;
			OCR2 = count_pwm(value);
     ee8:	63 bd       	out	0x23, r22	; 35
			break;
     eea:	3a c0       	rjmp	.+116    	; 0xf60 <dcmotor_process+0xca>

			case MOTOR_OFF:
			motorD.pwm_value = 0;
     eec:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <motorD+0x3>
			break;
     ef0:	37 c0       	rjmp	.+110    	; 0xf60 <dcmotor_process+0xca>

			case MOTOR_TRY:
				if (value <= 50)
     ef2:	c3 33       	cpi	r28, 0x33	; 51
     ef4:	78 f4       	brcc	.+30     	; 0xf14 <dcmotor_process+0x7e>
				{
					motorD.pwm_value = value + 20;
     ef6:	84 e1       	ldi	r24, 0x14	; 20
     ef8:	8c 0f       	add	r24, r28
     efa:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     efe:	2b ee       	ldi	r18, 0xEB	; 235
     f00:	82 9f       	mul	r24, r18
     f02:	c0 01       	movw	r24, r0
     f04:	11 24       	eor	r1, r1
     f06:	63 e6       	ldi	r22, 0x63	; 99
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__divmodhi4>
     f0e:	6c 5e       	subi	r22, 0xEC	; 236

			case MOTOR_TRY:
				if (value <= 50)
				{
					motorD.pwm_value = value + 20;
					OCR2 = count_pwm(motorD.pwm_value);
     f10:	63 bd       	out	0x23, r22	; 35
     f12:	26 c0       	rjmp	.+76     	; 0xf60 <dcmotor_process+0xca>
				}
				else if ((value > 50) && (value <= 70))
     f14:	8d ec       	ldi	r24, 0xCD	; 205
     f16:	8c 0f       	add	r24, r28
     f18:	84 31       	cpi	r24, 0x14	; 20
     f1a:	78 f4       	brcc	.+30     	; 0xf3a <dcmotor_process+0xa4>
				{
					motorD.pwm_value = value + 15;
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	8c 0f       	add	r24, r28
     f20:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f24:	2b ee       	ldi	r18, 0xEB	; 235
     f26:	82 9f       	mul	r24, r18
     f28:	c0 01       	movw	r24, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	63 e6       	ldi	r22, 0x63	; 99
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__divmodhi4>
     f34:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else if ((value > 50) && (value <= 70))
				{
					motorD.pwm_value = value + 15;
					OCR2 = count_pwm(motorD.pwm_value);
     f36:	63 bd       	out	0x23, r22	; 35
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <dcmotor_process+0xca>
				}
				else
				{
					motorD.pwm_value = value;
     f3a:	c0 93 1a 05 	sts	0x051A, r28	; 0x80051a <motorD+0x3>
	}
}

static uint8_t count_pwm(int pwm)
{
	return DCMOTORPWM_MINVEL + (255 - DCMOTORPWM_MINVEL)*pwm/99;
     f3e:	2b ee       	ldi	r18, 0xEB	; 235
     f40:	c2 9f       	mul	r28, r18
     f42:	c0 01       	movw	r24, r0
     f44:	11 24       	eor	r1, r1
     f46:	63 e6       	ldi	r22, 0x63	; 99
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__divmodhi4>
     f4e:	6c 5e       	subi	r22, 0xEC	; 236
					OCR2 = count_pwm(motorD.pwm_value);
				}
				else
				{
					motorD.pwm_value = value;
					OCR2 = count_pwm(motorD.pwm_value);
     f50:	63 bd       	out	0x23, r22	; 35
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <dcmotor_process+0xca>
				}
			break;

			case MOTOR_ERROR:
			TCCR2 = 0;
     f54:	15 bc       	out	0x25, r1	; 37
			#if CONFIG_DEVICE_SOLARKA
			CLEAR_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
			#else
			SET_PIN(DCMOTORPWM_PORT, DCMOTORPWM_PIN1);
     f56:	97 9a       	sbi	0x12, 7	; 18
			#endif
			break;
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <dcmotor_process+0xca>

			case MOTOR_AXELERATE:
			motorD.state = MOTOR_ON; //!!
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <motorD>
		
	}
	#if !TEST_APP
	
	#endif
}
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <clear_display>:

static char displaying_value = 255;

static void clear_display(void)
{
	LED_OFF_A;
     f64:	ae 9a       	sbi	0x15, 6	; 21
	LED_OFF_B;
     f66:	ad 9a       	sbi	0x15, 5	; 21
	LED_OFF_C;
     f68:	dd 9a       	sbi	0x1b, 5	; 27
	LED_OFF_D;
     f6a:	df 9a       	sbi	0x1b, 7	; 27
	LED_OFF_E;
     f6c:	de 9a       	sbi	0x1b, 6	; 27
	LED_OFF_F;
     f6e:	aa 9a       	sbi	0x15, 2	; 21
	LED_OFF_G;
     f70:	af 9a       	sbi	0x15, 7	; 21
     f72:	08 95       	ret

00000f74 <off_all_displays>:
}

void off_all_displays(void)
{
	#ifdef LED_DISP1
	LED_OFF_DISP1;
     f74:	92 9a       	sbi	0x12, 2	; 18
	DispD1.status = 0;
     f76:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <DispD1+0x1>
	#endif
	#ifdef LED_DISP2
	LED_OFF_DISP2;
     f7a:	c7 9a       	sbi	0x18, 7	; 24
	DispD2.status = 0;
     f7c:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <DispD2+0x1>
	#endif
	#ifdef LED_DISP3
	LED_OFF_DISP3;
     f80:	ac 9a       	sbi	0x15, 4	; 21
	DispD3.status = 0;
     f82:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <DispD3+0x1>
	#endif
	#ifdef LED_DISP4
	LED_OFF_DISP4;
     f86:	ab 9a       	sbi	0x15, 3	; 21
	DispD4.status = 0;
     f88:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <DispD4+0x1>
     f8c:	08 95       	ret

00000f8e <init_display_drv>:
}

void init_display_drv(void)
{
	// DDR Config
	SET_PIN(LED_DDR_A, LED_PIN_A);
     f8e:	a6 9a       	sbi	0x14, 6	; 20
	SET_PIN(LED_DDR_B, LED_PIN_B);
     f90:	a5 9a       	sbi	0x14, 5	; 20
	SET_PIN(LED_DDR_C, LED_PIN_C);
     f92:	d5 9a       	sbi	0x1a, 5	; 26
	SET_PIN(LED_DDR_D, LED_PIN_D);
     f94:	d7 9a       	sbi	0x1a, 7	; 26
	SET_PIN(LED_DDR_E, LED_PIN_E);
     f96:	d6 9a       	sbi	0x1a, 6	; 26
	SET_PIN(LED_DDR_F, LED_PIN_F);
     f98:	a2 9a       	sbi	0x14, 2	; 20
	SET_PIN(LED_DDR_G, LED_PIN_G);
     f9a:	a7 9a       	sbi	0x14, 7	; 20
	
#ifdef LED_DISP1
	SET_PIN(LED_DDR_DISP1, LED_PIN_DISP1);
     f9c:	8a 9a       	sbi	0x11, 2	; 17
	disp_tab[0] = &DispD1;
     f9e:	ef e2       	ldi	r30, 0x2F	; 47
     fa0:	f5 e0       	ldi	r31, 0x05	; 5
     fa2:	8d e2       	ldi	r24, 0x2D	; 45
     fa4:	95 e0       	ldi	r25, 0x05	; 5
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
#endif

#ifdef LED_DISP2
	SET_PIN(LED_DDR_DISP2, LED_PIN_DISP2);
     faa:	bf 9a       	sbi	0x17, 7	; 23
	disp_tab[1] = &DispD2;
     fac:	29 e3       	ldi	r18, 0x39	; 57
     fae:	35 e0       	ldi	r19, 0x05	; 5
     fb0:	33 83       	std	Z+3, r19	; 0x03
     fb2:	22 83       	std	Z+2, r18	; 0x02
	segment1.display[0] = &DispD2;
     fb4:	a6 e2       	ldi	r26, 0x26	; 38
     fb6:	b5 e0       	ldi	r27, 0x05	; 5
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	3c 93       	st	X, r19
     fbc:	2e 93       	st	-X, r18
	segment1.display[1] = &DispD1;
     fbe:	13 96       	adiw	r26, 0x03	; 3
     fc0:	9c 93       	st	X, r25
     fc2:	8e 93       	st	-X, r24
     fc4:	12 97       	sbiw	r26, 0x02	; 2
#endif

#ifdef LED_DISP3
	SET_PIN(LED_DDR_DISP3, LED_PIN_DISP3);
     fc6:	a4 9a       	sbi	0x14, 4	; 20
	disp_tab[2] = &DispD3;
     fc8:	2b e2       	ldi	r18, 0x2B	; 43
     fca:	35 e0       	ldi	r19, 0x05	; 5
     fcc:	35 83       	std	Z+5, r19	; 0x05
     fce:	24 83       	std	Z+4, r18	; 0x04
#endif

#ifdef LED_DISP4
	SET_PIN(LED_DDR_DISP4, LED_PIN_DISP4);
     fd0:	a3 9a       	sbi	0x14, 3	; 20
	disp_tab[3] = &DispD4;
     fd2:	87 e3       	ldi	r24, 0x37	; 55
     fd4:	95 e0       	ldi	r25, 0x05	; 5
     fd6:	97 83       	std	Z+7, r25	; 0x07
     fd8:	86 83       	std	Z+6, r24	; 0x06
	segment2.display[0] = &DispD3;
     fda:	e1 e2       	ldi	r30, 0x21	; 33
     fdc:	f5 e0       	ldi	r31, 0x05	; 5
     fde:	31 83       	std	Z+1, r19	; 0x01
     fe0:	20 83       	st	Z, r18
	segment2.display[1] = &DispD4;
     fe2:	93 83       	std	Z+3, r25	; 0x03
     fe4:	82 83       	std	Z+2, r24	; 0x02
#endif
	off_all_displays();
     fe6:	0e 94 ba 07 	call	0xf74	; 0xf74 <off_all_displays>
	clear_display();
     fea:	0e 94 b2 07 	call	0xf64	; 0xf64 <clear_display>
     fee:	08 95       	ret

00000ff0 <display_set_value>:
}

void display_set_value(disp_drv * DispD)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
	if (DispD->value != displaying_value)
     ff4:	fc 01       	movw	r30, r24
     ff6:	30 81       	ld	r19, Z
     ff8:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <displaying_value>
     ffc:	32 17       	cp	r19, r18
     ffe:	09 f4       	brne	.+2      	; 0x1002 <display_set_value+0x12>
    1000:	95 c0       	rjmp	.+298    	; 0x112c <display_set_value+0x13c>
    1002:	ec 01       	movw	r28, r24
	{
		//if (DispD == &DispD2) TOGGLE_PIN(LED1_PORT, LED1_PIN);
		clear_display();
    1004:	0e 94 b2 07 	call	0xf64	; 0xf64 <clear_display>
		switch(DispD->value)
    1008:	e8 81       	ld	r30, Y
    100a:	8e 2f       	mov	r24, r30
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	91 05       	cpc	r25, r1
    1012:	08 f0       	brcs	.+2      	; 0x1016 <display_set_value+0x26>
    1014:	88 c0       	rjmp	.+272    	; 0x1126 <display_set_value+0x136>
    1016:	fc 01       	movw	r30, r24
    1018:	e6 5d       	subi	r30, 0xD6	; 214
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__tablejump2__>
		{
			case 0:
			LED_ON_A;
    1020:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1022:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1024:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1026:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1028:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    102a:	aa 98       	cbi	0x15, 2	; 21
			break;
    102c:	7c c0       	rjmp	.+248    	; 0x1126 <display_set_value+0x136>
			case 1:
			LED_ON_B;
    102e:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1030:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1032:	79 c0       	rjmp	.+242    	; 0x1126 <display_set_value+0x136>
			case 2:
			LED_ON_A;
    1034:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1036:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1038:	af 98       	cbi	0x15, 7	; 21
			LED_ON_E;
    103a:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_D;
    103c:	df 98       	cbi	0x1b, 7	; 27
			break;
    103e:	73 c0       	rjmp	.+230    	; 0x1126 <display_set_value+0x136>
			case 3:
			LED_ON_A;
    1040:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1042:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_G;
    1044:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1046:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    1048:	df 98       	cbi	0x1b, 7	; 27
			break;
    104a:	6d c0       	rjmp	.+218    	; 0x1126 <display_set_value+0x136>
			case 4:
			LED_ON_F;
    104c:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    104e:	af 98       	cbi	0x15, 7	; 21
			LED_ON_B;
    1050:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1052:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1054:	68 c0       	rjmp	.+208    	; 0x1126 <display_set_value+0x136>
			case 5:
			LED_ON_A;
    1056:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1058:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    105a:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    105c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    105e:	df 98       	cbi	0x1b, 7	; 27
			break;
    1060:	62 c0       	rjmp	.+196    	; 0x1126 <display_set_value+0x136>
			case 6:
			LED_ON_A;
    1062:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_F;
    1064:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1066:	af 98       	cbi	0x15, 7	; 21
			LED_ON_C;
    1068:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    106a:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    106c:	de 98       	cbi	0x1b, 6	; 27
			break;
    106e:	5b c0       	rjmp	.+182    	; 0x1126 <display_set_value+0x136>
			case 7:
			LED_ON_A;
    1070:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1072:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    1074:	dd 98       	cbi	0x1b, 5	; 27
			break;
    1076:	57 c0       	rjmp	.+174    	; 0x1126 <display_set_value+0x136>
			case 8:
			LED_ON_A;
    1078:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    107a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    107c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    107e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1080:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1082:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1084:	af 98       	cbi	0x15, 7	; 21
			break;
    1086:	4f c0       	rjmp	.+158    	; 0x1126 <display_set_value+0x136>
			case 9:
			LED_ON_A;
    1088:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    108a:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    108c:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    108e:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    1090:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1092:	af 98       	cbi	0x15, 7	; 21
			break;
    1094:	48 c0       	rjmp	.+144    	; 0x1126 <display_set_value+0x136>
			case 'a':
			LED_ON_A;
    1096:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    1098:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    109a:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_E;
    109c:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    109e:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10a0:	af 98       	cbi	0x15, 7	; 21
			break;
    10a2:	41 c0       	rjmp	.+130    	; 0x1126 <display_set_value+0x136>
			case 'b':
			LED_ON_C;
    10a4:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10a6:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10a8:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10aa:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10ac:	af 98       	cbi	0x15, 7	; 21
			break;
    10ae:	3b c0       	rjmp	.+118    	; 0x1126 <display_set_value+0x136>
			case 'c':
			LED_ON_A;
    10b0:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    10b2:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10b4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10b6:	aa 98       	cbi	0x15, 2	; 21
			break;
    10b8:	36 c0       	rjmp	.+108    	; 0x1126 <display_set_value+0x136>
			case 'd':
			LED_ON_B;
    10ba:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_C;
    10bc:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10be:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10c0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    10c2:	af 98       	cbi	0x15, 7	; 21
			break;
    10c4:	30 c0       	rjmp	.+96     	; 0x1126 <display_set_value+0x136>
			case 'e':
			LED_ON_A;
    10c6:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_D;
    10c8:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10ca:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10cc:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10ce:	af 98       	cbi	0x15, 7	; 21
			break;
    10d0:	2a c0       	rjmp	.+84     	; 0x1126 <display_set_value+0x136>
			case 'f':
			LED_ON_A;
    10d2:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_E;
    10d4:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10d6:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10d8:	af 98       	cbi	0x15, 7	; 21
			break;
    10da:	25 c0       	rjmp	.+74     	; 0x1126 <display_set_value+0x136>
			case 'r':
			LED_ON_E;
    10dc:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    10de:	af 98       	cbi	0x15, 7	; 21
			break;
    10e0:	22 c0       	rjmp	.+68     	; 0x1126 <display_set_value+0x136>
			case 'o':
			LED_ON_C;
    10e2:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10e4:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    10e6:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_G;
    10e8:	af 98       	cbi	0x15, 7	; 21
			break;
    10ea:	1d c0       	rjmp	.+58     	; 0x1126 <display_set_value+0x136>
			case 'p':
			LED_ON_A;
    10ec:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_B;
    10ee:	ad 98       	cbi	0x15, 5	; 21
			LED_ON_E;
    10f0:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    10f2:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    10f4:	af 98       	cbi	0x15, 7	; 21
			break;
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <display_set_value+0x136>
			case 's':
			LED_ON_A;
    10f8:	ae 98       	cbi	0x15, 6	; 21
			LED_ON_C;
    10fa:	dd 98       	cbi	0x1b, 5	; 27
			LED_ON_D;
    10fc:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_F;
    10fe:	aa 98       	cbi	0x15, 2	; 21
			LED_ON_G;
    1100:	af 98       	cbi	0x15, 7	; 21
			break;
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <display_set_value+0x136>
			case 'l':
			LED_ON_D;
    1104:	df 98       	cbi	0x1b, 7	; 27
			LED_ON_E;
    1106:	de 98       	cbi	0x1b, 6	; 27
			LED_ON_F;
    1108:	aa 98       	cbi	0x15, 2	; 21
			break;
    110a:	0d c0       	rjmp	.+26     	; 0x1126 <display_set_value+0x136>
			case DISP_OFF:
			break;		
			case SYMBOL_DISP_OFF:
			LED_ON_G;
    110c:	af 98       	cbi	0x15, 7	; 21
			break;
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <display_set_value+0x136>
			case 254:
			LED_ON_F;
    1110:	aa 98       	cbi	0x15, 2	; 21
			break;
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <display_set_value+0x136>
			case 253:
			LED_ON_E;
    1114:	de 98       	cbi	0x1b, 6	; 27
			break;
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <display_set_value+0x136>
			case 252:
			LED_ON_D;
    1118:	df 98       	cbi	0x1b, 7	; 27
			break;
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <display_set_value+0x136>
			case 251:
			LED_ON_C;
    111c:	dd 98       	cbi	0x1b, 5	; 27
			break;
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <display_set_value+0x136>
			case 250:
			LED_ON_B;
    1120:	ad 98       	cbi	0x15, 5	; 21
			break;
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <display_set_value+0x136>
			case 249:
			LED_ON_A;
    1124:	ae 98       	cbi	0x15, 6	; 21
			break;
		}
		displaying_value = DispD->value;
    1126:	88 81       	ld	r24, Y
    1128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <displaying_value>
	}
	
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <on_display>:
void on_display(disp_drv *DispD)
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ec 01       	movw	r28, r24
	off_all_displays();
    1138:	0e 94 ba 07 	call	0xf74	; 0xf74 <off_all_displays>
	display_set_value(DispD);
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 f8 07 	call	0xff0	; 0xff0 <display_set_value>
	#ifdef LED_DISP1
	if(DispD == &DispD1)
    1142:	85 e0       	ldi	r24, 0x05	; 5
    1144:	cd 32       	cpi	r28, 0x2D	; 45
    1146:	d8 07       	cpc	r29, r24
    1148:	29 f4       	brne	.+10     	; 0x1154 <on_display+0x22>
	{
		LED_ON_DISP1;
    114a:	92 98       	cbi	0x12, 2	; 18
		DispD1.status = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <DispD1+0x1>
    1152:	19 c0       	rjmp	.+50     	; 0x1186 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP2
	else if(DispD == &DispD2)
    1154:	85 e0       	ldi	r24, 0x05	; 5
    1156:	c9 33       	cpi	r28, 0x39	; 57
    1158:	d8 07       	cpc	r29, r24
    115a:	29 f4       	brne	.+10     	; 0x1166 <on_display+0x34>
	{
		LED_ON_DISP2;
    115c:	c7 98       	cbi	0x18, 7	; 24
		DispD2.status = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <DispD2+0x1>
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP3
	else if(DispD == &DispD3)
    1166:	85 e0       	ldi	r24, 0x05	; 5
    1168:	cb 32       	cpi	r28, 0x2B	; 43
    116a:	d8 07       	cpc	r29, r24
    116c:	29 f4       	brne	.+10     	; 0x1178 <on_display+0x46>
	{
		LED_ON_DISP3;
    116e:	ac 98       	cbi	0x15, 4	; 21
		DispD3.status = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <DispD3+0x1>
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <on_display+0x54>
	}
	#endif
	#ifdef LED_DISP4
	else if(DispD == &DispD4)
    1178:	c7 53       	subi	r28, 0x37	; 55
    117a:	d5 40       	sbci	r29, 0x05	; 5
    117c:	21 f4       	brne	.+8      	; 0x1186 <on_display+0x54>
	{
		LED_ON_DISP4;
    117e:	ab 98       	cbi	0x15, 3	; 21
		DispD4.status = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <DispD4+0x1>
	}
	#endif
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <display_process>:
static uint8_t iteration = 0;
static uint8_t light = DISP_LIGHT;
void display_process(uint16_t *counter)
{
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	fc 01       	movw	r30, r24
	*counter = *counter + 1;
    1198:	c0 81       	ld	r28, Z
    119a:	d1 81       	ldd	r29, Z+1	; 0x01
    119c:	21 96       	adiw	r28, 0x01	; 1
    119e:	d1 83       	std	Z+1, r29	; 0x01
    11a0:	c0 83       	st	Z, r28
	uint16_t cnt = *counter;
	if (cnt % (COUNTER_MAX/LED_DISP_CNT) == 0)
    11a2:	9e 01       	movw	r18, r28
    11a4:	ad ec       	ldi	r26, 0xCD	; 205
    11a6:	bc ec       	ldi	r27, 0xCC	; 204
    11a8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__umulhisi3>
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	96 95       	lsr	r25
    11b2:	87 95       	ror	r24
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	9c 01       	movw	r18, r24
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	c8 17       	cp	r28, r24
    11d0:	d9 07       	cpc	r29, r25
    11d2:	01 f5       	brne	.+64     	; 0x1214 <display_process+0x88>
    11d4:	7f 01       	movw	r14, r30
	{
		if (iteration<LED_DISP_CNT)
    11d6:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <iteration>
    11da:	14 30       	cpi	r17, 0x04	; 4
    11dc:	58 f4       	brcc	.+22     	; 0x11f4 <display_process+0x68>
			on_display(disp_tab[iteration]);
    11de:	e1 2f       	mov	r30, r17
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	e1 5d       	subi	r30, 0xD1	; 209
    11e8:	fa 4f       	sbci	r31, 0xFA	; 250
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	0e 94 99 08 	call	0x1132	; 0x1132 <on_display>
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <display_process+0x6c>
		else
			off_all_displays();
    11f4:	0e 94 ba 07 	call	0xf74	; 0xf74 <off_all_displays>
		iteration++;
    11f8:	1f 5f       	subi	r17, 0xFF	; 255
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    11fa:	15 30       	cpi	r17, 0x05	; 5
    11fc:	19 f0       	breq	.+6      	; 0x1204 <display_process+0x78>
	{
		if (iteration<LED_DISP_CNT)
			on_display(disp_tab[iteration]);
		else
			off_all_displays();
		iteration++;
    11fe:	10 93 e6 02 	sts	0x02E6, r17	; 0x8002e6 <iteration>
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <display_process+0x7c>
		if (iteration==LED_DISP_CNT + light) iteration = 0;
    1204:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <iteration>
		if (cnt == 10*COUNTER_MAX) *counter = 0; 	
    1208:	c0 39       	cpi	r28, 0x90	; 144
    120a:	d1 40       	sbci	r29, 0x01	; 1
    120c:	19 f4       	brne	.+6      	; 0x1214 <display_process+0x88>
    120e:	f7 01       	movw	r30, r14
    1210:	11 82       	std	Z+1, r1	; 0x01
    1212:	10 82       	st	Z, r1
	}
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	08 95       	ret

00001220 <disp_set_number>:

void disp_set_number(disp_segment_t *segment ,uint8_t number)
{
    1220:	fc 01       	movw	r30, r24
	if (number >= 100) return;
    1222:	64 36       	cpi	r22, 0x64	; 100
    1224:	f8 f4       	brcc	.+62     	; 0x1264 <disp_set_number+0x44>
	else if (number == 0)
    1226:	61 11       	cpse	r22, r1
    1228:	08 c0       	rjmp	.+16     	; 0x123a <disp_set_number+0x1a>
	{
		segment->display[0]->value = 0;
    122a:	a0 81       	ld	r26, Z
    122c:	b1 81       	ldd	r27, Z+1	; 0x01
    122e:	1c 92       	st	X, r1
		segment->display[1]->value = 0;
    1230:	02 80       	ldd	r0, Z+2	; 0x02
    1232:	f3 81       	ldd	r31, Z+3	; 0x03
    1234:	e0 2d       	mov	r30, r0
    1236:	10 82       	st	Z, r1
    1238:	08 95       	ret
		
	}
	else
	{
		segment->display[0]->value = number/10;
    123a:	a0 81       	ld	r26, Z
    123c:	b1 81       	ldd	r27, Z+1	; 0x01
    123e:	9d ec       	ldi	r25, 0xCD	; 205
    1240:	69 9f       	mul	r22, r25
    1242:	91 2d       	mov	r25, r1
    1244:	11 24       	eor	r1, r1
    1246:	96 95       	lsr	r25
    1248:	96 95       	lsr	r25
    124a:	96 95       	lsr	r25
    124c:	9c 93       	st	X, r25
		segment->display[1]->value = number%10;
    124e:	02 80       	ldd	r0, Z+2	; 0x02
    1250:	f3 81       	ldd	r31, Z+3	; 0x03
    1252:	e0 2d       	mov	r30, r0
    1254:	89 2f       	mov	r24, r25
    1256:	88 0f       	add	r24, r24
    1258:	98 2f       	mov	r25, r24
    125a:	99 0f       	add	r25, r25
    125c:	99 0f       	add	r25, r25
    125e:	89 0f       	add	r24, r25
    1260:	68 1b       	sub	r22, r24
    1262:	60 83       	st	Z, r22
    1264:	08 95       	ret

00001266 <disp_set_symb>:
	}
	
}
void disp_set_symb(disp_drv *DispD, char symbol)
{
	DispD->value = symbol;
    1266:	fc 01       	movw	r30, r24
    1268:	60 83       	st	Z, r22
    126a:	08 95       	ret

0000126c <dip_set_value>:
	blink_cnt = blink_count;
	disp_set_state(type, SEG_BLINK);
	second_disp_blink_val = blink_val;
	//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
	if (blink_state == 0) disp_set_number(&segment2, second_disp_blink_val);
}
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	39 f0       	breq	.+14     	; 0x127e <dip_set_value+0x12>
    1270:	18 f0       	brcs	.+6      	; 0x1278 <dip_set_value+0xc>
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	39 f0       	breq	.+14     	; 0x1284 <dip_set_value+0x18>
    1276:	08 95       	ret
    1278:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <motor_disp_value>
    127c:	08 95       	ret
    127e:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <servo_disp_value>
    1282:	08 95       	ret
    1284:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <servo_disp_value>
    1288:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <motor_disp_value>
    128c:	08 95       	ret

0000128e <disp_get_state>:
    128e:	88 23       	and	r24, r24
    1290:	19 f0       	breq	.+6      	; 0x1298 <disp_get_state+0xa>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	29 f0       	breq	.+10     	; 0x12a0 <disp_get_state+0x12>
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <disp_get_state+0x1a>
    1298:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	08 95       	ret
    12a0:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	08 95       	ret

000012ae <disp_disable_voltage>:
    12ae:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    12b2:	86 30       	cpi	r24, 0x06	; 6
    12b4:	21 f4       	brne	.+8      	; 0x12be <disp_disable_voltage+0x10>
    12b6:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <disp1_last_state>
    12ba:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
    12be:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    12c2:	86 30       	cpi	r24, 0x06	; 6
    12c4:	21 f4       	brne	.+8      	; 0x12ce <disp_disable_voltage+0x20>
    12c6:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <disp2_last_state>
    12ca:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
    12ce:	08 95       	ret

000012d0 <disp_set_state>:
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <disp_set_state+0x2c>
    12d4:	18 f0       	brcs	.+6      	; 0x12dc <disp_set_state+0xc>
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	09 f1       	breq	.+66     	; 0x131c <disp_set_state+0x4c>
    12da:	08 95       	ret
    12dc:	66 30       	cpi	r22, 0x06	; 6
    12de:	21 f4       	brne	.+8      	; 0x12e8 <disp_set_state+0x18>
    12e0:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    12e4:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <disp1_last_state>
    12e8:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    12ec:	86 30       	cpi	r24, 0x06	; 6
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <disp_set_state+0x26>
    12f0:	60 93 3b 05 	sts	0x053B, r22	; 0x80053b <disp1_last_state>
    12f4:	08 95       	ret
    12f6:	60 93 2a 05 	sts	0x052A, r22	; 0x80052a <segment1+0x4>
    12fa:	08 95       	ret
    12fc:	66 30       	cpi	r22, 0x06	; 6
    12fe:	21 f4       	brne	.+8      	; 0x1308 <disp_set_state+0x38>
    1300:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    1304:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <disp2_last_state>
    1308:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    130c:	86 30       	cpi	r24, 0x06	; 6
    130e:	19 f4       	brne	.+6      	; 0x1316 <disp_set_state+0x46>
    1310:	60 93 3c 05 	sts	0x053C, r22	; 0x80053c <disp2_last_state>
    1314:	08 95       	ret
    1316:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <segment2+0x4>
    131a:	08 95       	ret
    131c:	66 30       	cpi	r22, 0x06	; 6
    131e:	41 f4       	brne	.+16     	; 0x1330 <disp_set_state+0x60>
    1320:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    1324:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <disp1_last_state>
    1328:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    132c:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <disp2_last_state>
    1330:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    1334:	86 30       	cpi	r24, 0x06	; 6
    1336:	29 f4       	brne	.+10     	; 0x1342 <disp_set_state+0x72>
    1338:	60 93 3c 05 	sts	0x053C, r22	; 0x80053c <disp2_last_state>
    133c:	60 93 3b 05 	sts	0x053B, r22	; 0x80053b <disp1_last_state>
    1340:	08 95       	ret
    1342:	60 93 2a 05 	sts	0x052A, r22	; 0x80052a <segment1+0x4>
    1346:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <segment2+0x4>
    134a:	08 95       	ret

0000134c <display_set_error>:
    134c:	95 e0       	ldi	r25, 0x05	; 5
    134e:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <segment1+0x4>
    1352:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <segment2+0x4>
    1356:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <error_reason>
    135a:	08 95       	ret

0000135c <disp_process>:


void disp_process(void)
{
	static uint32_t timer_disp_process = 0;
	if (timer_disp_process < mktime.ms)
    135c:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
    1360:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
    1364:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
    1368:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
    136c:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <timer_disp_process.1974>
    1370:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <timer_disp_process.1974+0x1>
    1374:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <timer_disp_process.1974+0x2>
    1378:	70 91 ee 02 	lds	r23, 0x02EE	; 0x8002ee <timer_disp_process.1974+0x3>
    137c:	48 17       	cp	r20, r24
    137e:	59 07       	cpc	r21, r25
    1380:	6a 07       	cpc	r22, r26
    1382:	7b 07       	cpc	r23, r27
    1384:	08 f0       	brcs	.+2      	; 0x1388 <disp_process+0x2c>
    1386:	26 c1       	rjmp	.+588    	; 0x15d4 <disp_process+0x278>
	{
        
        switch(segment1.state)
    1388:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	09 f4       	brne	.+2      	; 0x1392 <disp_process+0x36>
    1390:	59 c0       	rjmp	.+178    	; 0x1444 <disp_process+0xe8>
    1392:	30 f4       	brcc	.+12     	; 0x13a0 <disp_process+0x44>
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <disp_process+0x3e>
    1398:	87 c0       	rjmp	.+270    	; 0x14a8 <disp_process+0x14c>
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	39 f1       	breq	.+78     	; 0x13ec <disp_process+0x90>
    139e:	8e c0       	rjmp	.+284    	; 0x14bc <disp_process+0x160>
    13a0:	85 30       	cpi	r24, 0x05	; 5
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <disp_process+0x4a>
    13a4:	74 c0       	rjmp	.+232    	; 0x148e <disp_process+0x132>
    13a6:	48 f1       	brcs	.+82     	; 0x13fa <disp_process+0x9e>
    13a8:	86 30       	cpi	r24, 0x06	; 6
    13aa:	09 f0       	breq	.+2      	; 0x13ae <disp_process+0x52>
    13ac:	87 c0       	rjmp	.+270    	; 0x14bc <disp_process+0x160>
        {
            case SEG_VOLTAGE:
			voltage = (int)((float)accum_get_voltage()*(float)100);
    13ae:	0e 94 28 02 	call	0x450	; 0x450 <accum_get_voltage>
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	48 ec       	ldi	r20, 0xC8	; 200
    13b8:	52 e4       	ldi	r21, 0x42	; 66
    13ba:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    13be:	0e 94 46 19 	call	0x328c	; 0x328c <__fixsfsi>
    13c2:	70 93 fb 02 	sts	0x02FB, r23	; 0x8002fb <voltage+0x1>
    13c6:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <voltage>
            disp_set_number(&segment1, voltage/100);
    13ca:	9b 01       	movw	r18, r22
    13cc:	36 95       	lsr	r19
    13ce:	27 95       	ror	r18
    13d0:	36 95       	lsr	r19
    13d2:	27 95       	ror	r18
    13d4:	ab e7       	ldi	r26, 0x7B	; 123
    13d6:	b4 e1       	ldi	r27, 0x14	; 20
    13d8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__umulhisi3>
    13dc:	96 95       	lsr	r25
    13de:	87 95       	ror	r24
    13e0:	68 2f       	mov	r22, r24
    13e2:	86 e2       	ldi	r24, 0x26	; 38
    13e4:	95 e0       	ldi	r25, 0x05	; 5
    13e6:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
            break;
    13ea:	68 c0       	rjmp	.+208    	; 0x14bc <disp_process+0x160>
            case SEG_VALUE:
            disp_set_number(&segment1, motor_disp_value);
    13ec:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <motor_disp_value>
    13f0:	86 e2       	ldi	r24, 0x26	; 38
    13f2:	95 e0       	ldi	r25, 0x05	; 5
    13f4:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
            break;
    13f8:	61 c0       	rjmp	.+194    	; 0x14bc <disp_process+0x160>
            case SEG_SAVE:
            if (segment2.state != SEG_SAVE)
    13fa:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	31 f0       	breq	.+12     	; 0x140e <disp_process+0xb2>
            {
                segment1.state = SEG_VALUE;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
			    segment2.state = SEG_VALUE;
    1408:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
                break;
    140c:	57 c0       	rjmp	.+174    	; 0x14bc <disp_process+0x160>
            }
        	timer_disp_process += 1000;
    140e:	48 51       	subi	r20, 0x18	; 24
    1410:	5c 4f       	sbci	r21, 0xFC	; 252
    1412:	6f 4f       	sbci	r22, 0xFF	; 255
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	40 93 eb 02 	sts	0x02EB, r20	; 0x8002eb <timer_disp_process.1974>
    141a:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <timer_disp_process.1974+0x1>
    141e:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <timer_disp_process.1974+0x2>
    1422:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <timer_disp_process.1974+0x3>
			DispD2.value = 's';
    1426:	83 e7       	ldi	r24, 0x73	; 115
    1428:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <DispD2>
			DispD1.value = 'a';
    142c:	81 e6       	ldi	r24, 0x61	; 97
    142e:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <DispD1>
			DispD3.value = 'p';
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <DispD3>
			segment1.state = SEG_VALUE;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
			segment2.state = SEG_VALUE;
    143e:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
			return;
    1442:	08 95       	ret
			
            break;
            case SEG_LOAD:
            if (segment2.state != SEG_LOAD)
    1444:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	31 f0       	breq	.+12     	; 0x1458 <disp_process+0xfc>
            {
                segment1.state = SEG_VALUE;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
        	    segment2.state = SEG_VALUE;
    1452:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
                break;
    1456:	32 c0       	rjmp	.+100    	; 0x14bc <disp_process+0x160>
            }
			timer_disp_process += 1000;
    1458:	48 51       	subi	r20, 0x18	; 24
    145a:	5c 4f       	sbci	r21, 0xFC	; 252
    145c:	6f 4f       	sbci	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	40 93 eb 02 	sts	0x02EB, r20	; 0x8002eb <timer_disp_process.1974>
    1464:	50 93 ec 02 	sts	0x02EC, r21	; 0x8002ec <timer_disp_process.1974+0x1>
    1468:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <timer_disp_process.1974+0x2>
    146c:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <timer_disp_process.1974+0x3>
			DispD2.value = 'l';
    1470:	8c e6       	ldi	r24, 0x6C	; 108
    1472:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <DispD2>
			DispD1.value = 'o';
    1476:	8f e6       	ldi	r24, 0x6F	; 111
    1478:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <DispD1>
			DispD3.value = 'p';
    147c:	80 e7       	ldi	r24, 0x70	; 112
    147e:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <DispD3>
			segment1.state = SEG_VALUE;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <segment1+0x4>
			segment2.state = SEG_VALUE;
    1488:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <segment2+0x4>
            break;
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <disp_process+0x160>
            case SEG_ERROR:
			DispD2.value = 'e';
    148e:	85 e6       	ldi	r24, 0x65	; 101
    1490:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <DispD2>
			DispD1.value = 'r';
    1494:	82 e7       	ldi	r24, 0x72	; 114
    1496:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <DispD1>
			disp_set_number(&segment2, error_reason);
    149a:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <error_reason>
    149e:	81 e2       	ldi	r24, 0x21	; 33
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
            break;
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <disp_process+0x160>
            case SEG_OFF:
            disp_set_symb(&DispD1, SYMBOL_DISP_OFF);
    14a8:	68 ef       	ldi	r22, 0xF8	; 248
    14aa:	8d e2       	ldi	r24, 0x2D	; 45
    14ac:	95 e0       	ldi	r25, 0x05	; 5
    14ae:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
			disp_set_symb(&DispD2, SYMBOL_DISP_OFF);
    14b2:	68 ef       	ldi	r22, 0xF8	; 248
    14b4:	89 e3       	ldi	r24, 0x39	; 57
    14b6:	95 e0       	ldi	r25, 0x05	; 5
    14b8:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
            break;
        }

        switch(segment2.state)
    14bc:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	19 f1       	breq	.+70     	; 0x150a <disp_process+0x1ae>
    14c4:	48 f1       	brcs	.+82     	; 0x1518 <disp_process+0x1bc>
    14c6:	86 30       	cpi	r24, 0x06	; 6
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <disp_process+0x174>
    14ca:	8d 30       	cpi	r24, 0x0D	; 13
    14cc:	81 f1       	breq	.+96     	; 0x152e <disp_process+0x1d2>
    14ce:	6f c0       	rjmp	.+222    	; 0x15ae <disp_process+0x252>
        {
            case SEG_VOLTAGE:
            disp_set_number(&segment2, voltage%100);
    14d0:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <voltage>
    14d4:	50 91 fb 02 	lds	r21, 0x02FB	; 0x8002fb <voltage+0x1>
    14d8:	9a 01       	movw	r18, r20
    14da:	36 95       	lsr	r19
    14dc:	27 95       	ror	r18
    14de:	36 95       	lsr	r19
    14e0:	27 95       	ror	r18
    14e2:	ab e7       	ldi	r26, 0x7B	; 123
    14e4:	b4 e1       	ldi	r27, 0x14	; 20
    14e6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <__umulhisi3>
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	64 e6       	ldi	r22, 0x64	; 100
    14f0:	68 9f       	mul	r22, r24
    14f2:	90 01       	movw	r18, r0
    14f4:	69 9f       	mul	r22, r25
    14f6:	30 0d       	add	r19, r0
    14f8:	11 24       	eor	r1, r1
    14fa:	ba 01       	movw	r22, r20
    14fc:	62 1b       	sub	r22, r18
    14fe:	73 0b       	sbc	r23, r19
    1500:	81 e2       	ldi	r24, 0x21	; 33
    1502:	95 e0       	ldi	r25, 0x05	; 5
    1504:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
            break;
    1508:	52 c0       	rjmp	.+164    	; 0x15ae <disp_process+0x252>
            case SEG_VALUE:
            disp_set_number(&segment2, servo_disp_value);
    150a:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <servo_disp_value>
    150e:	81 e2       	ldi	r24, 0x21	; 33
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
            break;
    1516:	4b c0       	rjmp	.+150    	; 0x15ae <disp_process+0x252>
            case SEG_OFF:
            disp_set_symb(&DispD3, SYMBOL_DISP_OFF);
    1518:	68 ef       	ldi	r22, 0xF8	; 248
    151a:	8b e2       	ldi	r24, 0x2B	; 43
    151c:	95 e0       	ldi	r25, 0x05	; 5
    151e:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
            disp_set_symb(&DispD4, SYMBOL_DISP_OFF);
    1522:	68 ef       	ldi	r22, 0xF8	; 248
    1524:	87 e3       	ldi	r24, 0x37	; 55
    1526:	95 e0       	ldi	r25, 0x05	; 5
    1528:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
            break;
    152c:	40 c0       	rjmp	.+128    	; 0x15ae <disp_process+0x252>
			break;

			#endif //CONFIG_DEVICE_SOLARKA
			
			case SEG_BLINK:
			if(evTime_process_period(&blink_servo_disp, 500))
    152e:	44 ef       	ldi	r20, 0xF4	; 244
    1530:	51 e0       	ldi	r21, 0x01	; 1
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	85 ef       	ldi	r24, 0xF5	; 245
    1538:	92 e0       	ldi	r25, 0x02	; 2
    153a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <evTime_process_period>
    153e:	89 2b       	or	r24, r25
    1540:	b1 f1       	breq	.+108    	; 0x15ae <disp_process+0x252>
			{
				if (blink_state == 0)
    1542:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <blink_state>
    1546:	81 11       	cpse	r24, r1
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <disp_process+0x20a>
				{
					blink_state = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <blink_state>
					disp_set_symb(&DispD3, DISP_OFF);
    1550:	67 ef       	ldi	r22, 0xF7	; 247
    1552:	8b e2       	ldi	r24, 0x2B	; 43
    1554:	95 e0       	ldi	r25, 0x05	; 5
    1556:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
					disp_set_symb(&DispD4, DISP_OFF);
    155a:	67 ef       	ldi	r22, 0xF7	; 247
    155c:	87 e3       	ldi	r24, 0x37	; 55
    155e:	95 e0       	ldi	r25, 0x05	; 5
    1560:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
    1564:	24 c0       	rjmp	.+72     	; 0x15ae <disp_process+0x252>
				}
				else
				{
					blink_state = 0;
    1566:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <blink_state>
					if (blink_cnt == 0) 
    156a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <blink_cnt>
    156e:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <blink_cnt+0x1>
    1572:	a0 91 f2 02 	lds	r26, 0x02F2	; 0x8002f2 <blink_cnt+0x2>
    1576:	b0 91 f3 02 	lds	r27, 0x02F3	; 0x8002f3 <blink_cnt+0x3>
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	a1 05       	cpc	r26, r1
    157e:	b1 05       	cpc	r27, r1
    1580:	29 f4       	brne	.+10     	; 0x158c <disp_process+0x230>
					{
						disp_set_state(DISP_SERVO, SEG_VALUE);
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
						break;
    158a:	11 c0       	rjmp	.+34     	; 0x15ae <disp_process+0x252>
					}
					blink_cnt--;
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	a1 09       	sbc	r26, r1
    1590:	b1 09       	sbc	r27, r1
    1592:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <blink_cnt>
    1596:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <blink_cnt+0x1>
    159a:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <blink_cnt+0x2>
    159e:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <blink_cnt+0x3>
					//debug_msg("BLINK: blink_count: %d blink_val: %d\n", blink_cnt, second_disp_blink_val);
					disp_set_number(&segment2, second_disp_blink_val);
    15a2:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <second_disp_blink_val>
    15a6:	81 e2       	ldi	r24, 0x21	; 33
    15a8:	95 e0       	ldi	r25, 0x05	; 5
    15aa:	0e 94 10 09 	call	0x1220	; 0x1220 <disp_set_number>
				}
			}
			break;
			
        }	
		timer_disp_process += 50;
    15ae:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timer_disp_process.1974>
    15b2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <timer_disp_process.1974+0x1>
    15b6:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <timer_disp_process.1974+0x2>
    15ba:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <timer_disp_process.1974+0x3>
    15be:	c2 96       	adiw	r24, 0x32	; 50
    15c0:	a1 1d       	adc	r26, r1
    15c2:	b1 1d       	adc	r27, r1
    15c4:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <timer_disp_process.1974>
    15c8:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <timer_disp_process.1974+0x1>
    15cc:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <timer_disp_process.1974+0x2>
    15d0:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <timer_disp_process.1974+0x3>
    15d4:	08 95       	ret

000015d6 <on_animation>:
	}
}

void on_animation(uint32_t time, _disp_type type)
{
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    animation_time = mktime.ms + time;
    15da:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <mktime+0x2>
    15de:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <mktime+0x3>
    15e2:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <mktime+0x4>
    15e6:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <mktime+0x5>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	80 0f       	add	r24, r16
    15f0:	91 1f       	adc	r25, r17
    15f2:	a2 1f       	adc	r26, r18
    15f4:	b3 1f       	adc	r27, r19
    15f6:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <animation_time>
    15fa:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <animation_time+0x1>
    15fe:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <animation_time+0x2>
    1602:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <animation_time+0x3>
	disp_set_state(type,SEG_ANIMATION);
    1606:	62 e0       	ldi	r22, 0x02	; 2
    1608:	84 2f       	mov	r24, r20
    160a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
}
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	08 95       	ret

00001614 <animation>:
void animation(void)
{
    static uint32_t timer_anim;
	static uint8_t anim_iteration = 249;
	static uint8_t anim_iteration2 = 254;
	if ((segment1.state == SEG_ANIMATION || segment2.state == SEG_ANIMATION) && timer_anim < mktime.ms)
    1614:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	29 f0       	breq	.+10     	; 0x1626 <animation+0x12>
    161c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	09 f0       	breq	.+2      	; 0x1626 <animation+0x12>
    1624:	78 c0       	rjmp	.+240    	; 0x1716 <animation+0x102>
    1626:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    162a:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    162e:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    1632:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    1636:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <timer_anim.1994>
    163a:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <timer_anim.1994+0x1>
    163e:	a0 91 e9 02 	lds	r26, 0x02E9	; 0x8002e9 <timer_anim.1994+0x2>
    1642:	b0 91 ea 02 	lds	r27, 0x02EA	; 0x8002ea <timer_anim.1994+0x3>
    1646:	84 17       	cp	r24, r20
    1648:	95 07       	cpc	r25, r21
    164a:	a6 07       	cpc	r26, r22
    164c:	b7 07       	cpc	r27, r23
    164e:	08 f0       	brcs	.+2      	; 0x1652 <animation+0x3e>
    1650:	62 c0       	rjmp	.+196    	; 0x1716 <animation+0x102>
	{
		timer_anim = mktime.ms + 175;
    1652:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
    1656:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
    165a:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
    165e:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
    1662:	81 55       	subi	r24, 0x51	; 81
    1664:	9f 4f       	sbci	r25, 0xFF	; 255
    1666:	af 4f       	sbci	r26, 0xFF	; 255
    1668:	bf 4f       	sbci	r27, 0xFF	; 255
    166a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <timer_anim.1994>
    166e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <timer_anim.1994+0x1>
    1672:	a0 93 e9 02 	sts	0x02E9, r26	; 0x8002e9 <timer_anim.1994+0x2>
    1676:	b0 93 ea 02 	sts	0x02EA, r27	; 0x8002ea <timer_anim.1994+0x3>
		if (segment1.state == SEG_ANIMATION)
    167a:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <segment1+0x4>
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	61 f4       	brne	.+24     	; 0x169a <animation+0x86>
		{
			disp_set_symb(&DispD1, anim_iteration);
    1682:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    1686:	8d e2       	ldi	r24, 0x2D	; 45
    1688:	95 e0       	ldi	r25, 0x05	; 5
    168a:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
			disp_set_symb(&DispD2, anim_iteration);
    168e:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <anim_iteration.1995>
    1692:	89 e3       	ldi	r24, 0x39	; 57
    1694:	95 e0       	ldi	r25, 0x05	; 5
    1696:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
		}
		if (segment2.state == SEG_ANIMATION)
    169a:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <segment2+0x4>
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	61 f4       	brne	.+24     	; 0x16ba <animation+0xa6>
		{
			disp_set_symb(&DispD3, anim_iteration2);
    16a2:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    16a6:	8b e2       	ldi	r24, 0x2B	; 43
    16a8:	95 e0       	ldi	r25, 0x05	; 5
    16aa:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
			disp_set_symb(&DispD4, anim_iteration2);
    16ae:	60 91 75 00 	lds	r22, 0x0075	; 0x800075 <anim_iteration2.1996>
    16b2:	87 e3       	ldi	r24, 0x37	; 55
    16b4:	95 e0       	ldi	r25, 0x05	; 5
    16b6:	0e 94 33 09 	call	0x1266	; 0x1266 <disp_set_symb>
		}
		/* Skonczyl sie czas animacji */
		if (animation_time < mktime.ms) 
    16ba:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    16be:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    16c2:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    16c6:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    16ca:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <animation_time>
    16ce:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <animation_time+0x1>
    16d2:	a0 91 ff 02 	lds	r26, 0x02FF	; 0x8002ff <animation_time+0x2>
    16d6:	b0 91 00 03 	lds	r27, 0x0300	; 0x800300 <animation_time+0x3>
    16da:	84 17       	cp	r24, r20
    16dc:	95 07       	cpc	r25, r21
    16de:	a6 07       	cpc	r26, r22
    16e0:	b7 07       	cpc	r27, r23
    16e2:	28 f4       	brcc	.+10     	; 0x16ee <animation+0xda>
	    {
			disp_set_state(DISP_ALL, SEG_VALUE);
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
			LED_ACUM_OFF;
    16ec:	c5 98       	cbi	0x18, 5	; 24
		}
		
		anim_iteration++;
    16ee:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <anim_iteration.1995>
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		anim_iteration2--;
    16f8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <anim_iteration2.1996>
    16fc:	81 50       	subi	r24, 0x01	; 1
    16fe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
		if (anim_iteration == 255) anim_iteration = 249;
    1702:	9f 3f       	cpi	r25, 0xFF	; 255
    1704:	19 f4       	brne	.+6      	; 0x170c <animation+0xf8>
    1706:	99 ef       	ldi	r25, 0xF9	; 249
    1708:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <anim_iteration.1995>
		if (anim_iteration2 == 248) anim_iteration2 = 254;
    170c:	88 3f       	cpi	r24, 0xF8	; 248
    170e:	19 f4       	brne	.+6      	; 0x1716 <animation+0x102>
    1710:	8e ef       	ldi	r24, 0xFE	; 254
    1712:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <anim_iteration2.1996>
    1716:	08 95       	ret

00001718 <EEPROM_write>:
{
	
	//cli();
	/* Wait for completion of previous write */
	
	while(EECR & (1<<EEWE));
    1718:	e1 99       	sbic	0x1c, 1	; 28
    171a:	fe cf       	rjmp	.-4      	; 0x1718 <EEPROM_write>
	
	/* Set up address and data registers */
	EEAR = ucAddress;
    171c:	9f bb       	out	0x1f, r25	; 31
    171e:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    1720:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMWE);
    1722:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEWE);
    1724:	e1 9a       	sbi	0x1c, 1	; 28
    1726:	08 95       	ret

00001728 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1728:	e1 99       	sbic	0x1c, 1	; 28
    172a:	fe cf       	rjmp	.-4      	; 0x1728 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
    172c:	9f bb       	out	0x1f, r25	; 31
    172e:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1730:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1732:	8d b3       	in	r24, 0x1d	; 29
    1734:	08 95       	ret

00001736 <set_error_state>:
#define RESISTOR 1

uint16_t errorGetMotorVal(void)
{
	return motor_error_value;
}
    1736:	cf 93       	push	r28
    1738:	c8 2f       	mov	r28, r24
    173a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    173e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    1742:	82 60       	ori	r24, 0x02	; 2
    1744:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    1748:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    174c:	8c 2f       	mov	r24, r28
    174e:	0e 94 a6 09 	call	0x134c	; 0x134c <display_set_error>
    1752:	0e 94 33 07 	call	0xe66	; 0xe66 <dcmotor_set_error>
    1756:	0e 94 a9 11 	call	0x2352	; 0x2352 <servo_error>
    175a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <system_error>
    175e:	c0 93 3d 05 	sts	0x053D, r28	; 0x80053d <led_blink>
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <error_init>:
    1766:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <error_motor_state>
    176a:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <error_motor_last_state>
    176e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <error_motor_status>
    1772:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <error_servo_status>
    1776:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <error_servo_state>
    177a:	8a e1       	ldi	r24, 0x1A	; 26
    177c:	93 e0       	ldi	r25, 0x03	; 3
    177e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <evTime_off>
    1782:	8c e0       	ldi	r24, 0x0C	; 12
    1784:	93 e0       	ldi	r25, 0x03	; 3
    1786:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <evTime_off>
    178a:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <led_blink>
    178e:	08 95       	ret

00001790 <error_deinit>:
    1790:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <error_motor_state>
    1794:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <error_motor_last_state>
    1798:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <error_motor_status>
    179c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <error_servo_status>
    17a0:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <error_servo_state>
    17a4:	8a e1       	ldi	r24, 0x1A	; 26
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <evTime_off>
    17ac:	8c e0       	ldi	r24, 0x0C	; 12
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <evTime_off>
    17b4:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <led_blink>
    17b8:	08 95       	ret

000017ba <error_event>:

void error_event(void)
{
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
	static uint32_t error_event_timer;
	if (error_event_timer < mktime.ms && system_events&(1<<EV_SYSTEM_STATE))
    17ca:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    17ce:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    17d2:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    17d6:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    17da:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <error_event_timer.1931>
    17de:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <error_event_timer.1931+0x1>
    17e2:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <error_event_timer.1931+0x2>
    17e6:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <error_event_timer.1931+0x3>
    17ea:	84 17       	cp	r24, r20
    17ec:	95 07       	cpc	r25, r21
    17ee:	a6 07       	cpc	r26, r22
    17f0:	b7 07       	cpc	r27, r23
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <error_event+0x3c>
    17f4:	5e c3       	rjmp	.+1724   	; 0x1eb2 <error_event+0x6f8>
    17f6:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    17fa:	80 ff       	sbrs	r24, 0
    17fc:	5a c3       	rjmp	.+1716   	; 0x1eb2 <error_event+0x6f8>
	{
		error_event_timer = mktime.ms + 500;
    17fe:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    1802:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    1806:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    180a:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    180e:	4c 50       	subi	r20, 0x0C	; 12
    1810:	5e 4f       	sbci	r21, 0xFE	; 254
    1812:	6f 4f       	sbci	r22, 0xFF	; 255
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <error_event_timer.1931>
    181a:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <error_event_timer.1931+0x1>
    181e:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <error_event_timer.1931+0x2>
    1822:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <error_event_timer.1931+0x3>
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
    1826:	81 fd       	sbrc	r24, 1
    1828:	44 c3       	rjmp	.+1672   	; 0x1eb2 <error_event+0x6f8>
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    182a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <dcmotor_get_pwm>
    182e:	ec 01       	movw	r28, r24


static uint16_t count_motor_error_value(uint16_t x)
{
	uint16_t error_max_voltage;
	float voltage = accum_get_voltage();
    1830:	0e 94 28 02 	call	0x450	; 0x450 <accum_get_voltage>
    1834:	6b 01       	movw	r12, r22
    1836:	7c 01       	movw	r14, r24
	if (voltage < 9) voltage = 9;
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e1       	ldi	r20, 0x10	; 16
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 cf 18 	call	0x319e	; 0x319e <__cmpsf2>
    1844:	88 23       	and	r24, r24
    1846:	44 f4       	brge	.+16     	; 0x1858 <error_event+0x9e>
    1848:	0f 2e       	mov	r0, r31
    184a:	c1 2c       	mov	r12, r1
    184c:	d1 2c       	mov	r13, r1
    184e:	f0 e1       	ldi	r31, 0x10	; 16
    1850:	ef 2e       	mov	r14, r31
    1852:	f1 e4       	ldi	r31, 0x41	; 65
    1854:	ff 2e       	mov	r15, r31
    1856:	f0 2d       	mov	r31, r0
	if (x >=10 && x < 15)
    1858:	ce 01       	movw	r24, r28
    185a:	0a 97       	sbiw	r24, 0x0a	; 10
    185c:	05 97       	sbiw	r24, 0x05	; 5
    185e:	78 f5       	brcc	.+94     	; 0x18be <error_event+0x104>
	error_max_voltage = 2*x-15 + (voltage-9)*x/6;
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e1       	ldi	r20, 0x10	; 16
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	c7 01       	movw	r24, r14
    186a:	b6 01       	movw	r22, r12
    186c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    1870:	6b 01       	movw	r12, r22
    1872:	7c 01       	movw	r14, r24
    1874:	be 01       	movw	r22, r28
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	c7 01       	movw	r24, r14
    1884:	b6 01       	movw	r22, r12
    1886:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 ec       	ldi	r20, 0xC0	; 192
    1890:	50 e4       	ldi	r21, 0x40	; 64
    1892:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    1896:	6b 01       	movw	r12, r22
    1898:	7c 01       	movw	r14, r24
    189a:	be 01       	movw	r22, r28
    189c:	66 0f       	add	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	6f 50       	subi	r22, 0x0F	; 15
    18a2:	71 09       	sbc	r23, r1
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    18ac:	9b 01       	movw	r18, r22
    18ae:	ac 01       	movw	r20, r24
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    18b8:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    18bc:	00 c1       	rjmp	.+512    	; 0x1abe <error_event+0x304>
	else if (x >=15 && x < 25)
    18be:	ce 01       	movw	r24, r28
    18c0:	0f 97       	sbiw	r24, 0x0f	; 15
    18c2:	0a 97       	sbiw	r24, 0x0a	; 10
    18c4:	78 f5       	brcc	.+94     	; 0x1924 <error_event+0x16a>
	error_max_voltage = 2*x-20 + (voltage-9)*x/6;
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e1       	ldi	r20, 0x10	; 16
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	c7 01       	movw	r24, r14
    18d0:	b6 01       	movw	r22, r12
    18d2:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    18d6:	6b 01       	movw	r12, r22
    18d8:	7c 01       	movw	r14, r24
    18da:	be 01       	movw	r22, r28
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	c7 01       	movw	r24, r14
    18ea:	b6 01       	movw	r22, r12
    18ec:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 ec       	ldi	r20, 0xC0	; 192
    18f6:	50 e4       	ldi	r21, 0x40	; 64
    18f8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    18fc:	6b 01       	movw	r12, r22
    18fe:	7c 01       	movw	r14, r24
    1900:	be 01       	movw	r22, r28
    1902:	6a 50       	subi	r22, 0x0A	; 10
    1904:	70 48       	sbci	r23, 0x80	; 128
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    191e:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    1922:	cd c0       	rjmp	.+410    	; 0x1abe <error_event+0x304>
	else if (x >=25 && x < 40)
    1924:	ce 01       	movw	r24, r28
    1926:	49 97       	sbiw	r24, 0x19	; 25
    1928:	0f 97       	sbiw	r24, 0x0f	; 15
    192a:	78 f5       	brcc	.+94     	; 0x198a <error_event+0x1d0>
	error_max_voltage = 2*x-25 + (voltage-9)*x/6;
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e1       	ldi	r20, 0x10	; 16
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    193c:	6b 01       	movw	r12, r22
    193e:	7c 01       	movw	r14, r24
    1940:	be 01       	movw	r22, r28
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c7 01       	movw	r24, r14
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 ec       	ldi	r20, 0xC0	; 192
    195c:	50 e4       	ldi	r21, 0x40	; 64
    195e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    1962:	6b 01       	movw	r12, r22
    1964:	7c 01       	movw	r14, r24
    1966:	be 01       	movw	r22, r28
    1968:	66 0f       	add	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	69 51       	subi	r22, 0x19	; 25
    196e:	71 09       	sbc	r23, r1
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    1984:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    1988:	9a c0       	rjmp	.+308    	; 0x1abe <error_event+0x304>
	else if (x >=40 && x < 50)
    198a:	ce 01       	movw	r24, r28
    198c:	88 97       	sbiw	r24, 0x28	; 40
    198e:	0a 97       	sbiw	r24, 0x0a	; 10
    1990:	78 f5       	brcc	.+94     	; 0x19f0 <error_event+0x236>
	error_max_voltage = 2*x-10 + (voltage-9)*x/6;
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e1       	ldi	r20, 0x10	; 16
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	c7 01       	movw	r24, r14
    199c:	b6 01       	movw	r22, r12
    199e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    19a2:	6b 01       	movw	r12, r22
    19a4:	7c 01       	movw	r14, r24
    19a6:	be 01       	movw	r22, r28
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	c7 01       	movw	r24, r14
    19b6:	b6 01       	movw	r22, r12
    19b8:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 ec       	ldi	r20, 0xC0	; 192
    19c2:	50 e4       	ldi	r21, 0x40	; 64
    19c4:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    19c8:	6b 01       	movw	r12, r22
    19ca:	7c 01       	movw	r14, r24
    19cc:	be 01       	movw	r22, r28
    19ce:	65 50       	subi	r22, 0x05	; 5
    19d0:	70 48       	sbci	r23, 0x80	; 128
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    19de:	9b 01       	movw	r18, r22
    19e0:	ac 01       	movw	r20, r24
    19e2:	c7 01       	movw	r24, r14
    19e4:	b6 01       	movw	r22, r12
    19e6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    19ea:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    19ee:	67 c0       	rjmp	.+206    	; 0x1abe <error_event+0x304>
	else if (x >=50 && x < 70)
    19f0:	ce 01       	movw	r24, r28
    19f2:	c2 97       	sbiw	r24, 0x32	; 50
    19f4:	44 97       	sbiw	r24, 0x14	; 20
    19f6:	78 f5       	brcc	.+94     	; 0x1a56 <error_event+0x29c>
	error_max_voltage = 2*x+10 + (voltage-9)*x/6;
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e1       	ldi	r20, 0x10	; 16
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	c7 01       	movw	r24, r14
    1a02:	b6 01       	movw	r22, r12
    1a04:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    1a08:	6b 01       	movw	r12, r22
    1a0a:	7c 01       	movw	r14, r24
    1a0c:	be 01       	movw	r22, r28
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 ec       	ldi	r20, 0xC0	; 192
    1a28:	50 e4       	ldi	r21, 0x40	; 64
    1a2a:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    1a2e:	6b 01       	movw	r12, r22
    1a30:	7c 01       	movw	r14, r24
    1a32:	be 01       	movw	r22, r28
    1a34:	6b 5f       	subi	r22, 0xFB	; 251
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    1a50:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    1a54:	34 c0       	rjmp	.+104    	; 0x1abe <error_event+0x304>
	else if (x >= 70)
    1a56:	c6 34       	cpi	r28, 0x46	; 70
    1a58:	d1 05       	cpc	r29, r1
    1a5a:	78 f1       	brcs	.+94     	; 0x1aba <error_event+0x300>
	error_max_voltage = 2*x+20 + (voltage-9)*x/6;
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e1       	ldi	r20, 0x10	; 16
    1a62:	51 e4       	ldi	r21, 0x41	; 65
    1a64:	c7 01       	movw	r24, r14
    1a66:	b6 01       	movw	r22, r12
    1a68:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__subsf3>
    1a6c:	6b 01       	movw	r12, r22
    1a6e:	7c 01       	movw	r14, r24
    1a70:	be 01       	movw	r22, r28
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b6 01       	movw	r22, r12
    1a82:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 ec       	ldi	r20, 0xC0	; 192
    1a8c:	50 e4       	ldi	r21, 0x40	; 64
    1a8e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    1a92:	6b 01       	movw	r12, r22
    1a94:	7c 01       	movw	r14, r24
    1a96:	be 01       	movw	r22, r28
    1a98:	66 5f       	subi	r22, 0xF6	; 246
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	66 0f       	add	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1aa8:	9b 01       	movw	r18, r22
    1aaa:	ac 01       	movw	r20, r24
    1aac:	c7 01       	movw	r24, r14
    1aae:	b6 01       	movw	r22, r12
    1ab0:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    1ab4:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <error_event+0x304>
	else
	error_max_voltage = 10;
    1aba:	6a e0       	ldi	r22, 0x0A	; 10
    1abc:	70 e0       	ldi	r23, 0x00	; 0
		error_event_timer = mktime.ms + 500;
		if (system_events&(1<<EV_SYSTEM_ERROR_MOTOR)) return;
		///////////////////////////////////////////////////////////////////////////////////////////
		//MOTOR
		
		motor_error_value = count_motor_error_value(dcmotor_get_pwm());
    1abe:	6c 59       	subi	r22, 0x9C	; 156
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	70 93 16 03 	sts	0x0316, r23	; 0x800316 <motor_error_value+0x1>
    1ac6:	60 93 15 03 	sts	0x0315, r22	; 0x800315 <motor_error_value>
		uint16_t motor_adc_filterd = measure_get_filtered_value(MEAS_MOTOR);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 88 10 	call	0x2110	; 0x2110 <measure_get_filtered_value>
    1ad0:	7c 01       	movw	r14, r24
		uint16_t motor_adc_no = measure_get_value(MEAS_MOTOR);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 a1 10 	call	0x2142	; 0x2142 <measure_get_value>
    1ad8:	d8 2e       	mov	r13, r24
    1ada:	c9 2e       	mov	r12, r25
		float current = measure_get_current(MEAS_MOTOR, MOTOR_RESISTOR);
    1adc:	42 e0       	ldi	r20, 0x02	; 2
    1ade:	5b e2       	ldi	r21, 0x2B	; 43
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	7d e3       	ldi	r23, 0x3D	; 61
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	0e 94 ba 10 	call	0x2174	; 0x2174 <measure_get_current>
    1aea:	c6 2f       	mov	r28, r22
    1aec:	d7 2f       	mov	r29, r23
    1aee:	18 2f       	mov	r17, r24
    1af0:	09 2f       	mov	r16, r25
		float volt = accum_get_voltage();
    1af2:	0e 94 28 02 	call	0x450	; 0x450 <accum_get_voltage>
		debug_msg("MOTOR ADC: %d, ADC_max: %d, ADC_no_filter: %d, current: %f\n", motor_adc_filterd, motor_error_value, motor_adc_no, current);
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <motor_error_value+0x1>
    1b06:	8f 93       	push	r24
    1b08:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <motor_error_value>
    1b0c:	8f 93       	push	r24
    1b0e:	ff 92       	push	r15
    1b10:	ef 92       	push	r14
    1b12:	89 ec       	ldi	r24, 0xC9	; 201
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
		if (motor_adc_filterd > motor_error_value) //servo_vibro_value*5
    1b1e:	4d b7       	in	r20, 0x3d	; 61
    1b20:	5e b7       	in	r21, 0x3e	; 62
    1b22:	44 5f       	subi	r20, 0xF4	; 244
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	5e bf       	out	0x3e, r21	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	4d bf       	out	0x3d, r20	; 61
    1b30:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <motor_error_value>
    1b34:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <motor_error_value+0x1>
    1b38:	8e 15       	cp	r24, r14
    1b3a:	9f 05       	cpc	r25, r15
    1b3c:	b0 f4       	brcc	.+44     	; 0x1b6a <error_event+0x3b0>
		{
			error_motor_status = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <error_motor_status>
			error_motor_status = 0;
		}
		#if CONFIG_USE_ERROR_MOTOR
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
    1b44:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <error_motor_state>
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <error_event+0x394>
    1b4c:	84 c0       	rjmp	.+264    	; 0x1c56 <error_event+0x49c>
    1b4e:	30 f4       	brcc	.+12     	; 0x1b5c <error_event+0x3a2>
    1b50:	88 23       	and	r24, r24
    1b52:	f1 f0       	breq	.+60     	; 0x1b90 <error_event+0x3d6>
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <error_event+0x3a0>
    1b58:	48 c0       	rjmp	.+144    	; 0x1bea <error_event+0x430>
    1b5a:	ff c0       	rjmp	.+510    	; 0x1d5a <error_event+0x5a0>
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <error_event+0x3a8>
    1b60:	8d c0       	rjmp	.+282    	; 0x1c7c <error_event+0x4c2>
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <error_event+0x3ae>
    1b66:	8e c0       	rjmp	.+284    	; 0x1c84 <error_event+0x4ca>
    1b68:	f8 c0       	rjmp	.+496    	; 0x1d5a <error_event+0x5a0>
		{
			error_motor_status = 1;
		}
		else
		{
			error_motor_status = 0;
    1b6a:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <error_motor_status>
			}
		}
		else
		{
			//toDo
			switch(error_motor_state)
    1b6e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <error_motor_state>
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <error_event+0x3be>
    1b76:	c0 c0       	rjmp	.+384    	; 0x1cf8 <error_event+0x53e>
    1b78:	20 f4       	brcc	.+8      	; 0x1b82 <error_event+0x3c8>
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <error_event+0x3c6>
    1b7e:	9e c0       	rjmp	.+316    	; 0x1cbc <error_event+0x502>
    1b80:	ec c0       	rjmp	.+472    	; 0x1d5a <error_event+0x5a0>
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <error_event+0x3ce>
    1b86:	d5 c0       	rjmp	.+426    	; 0x1d32 <error_event+0x578>
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <error_event+0x3d4>
    1b8c:	d6 c0       	rjmp	.+428    	; 0x1d3a <error_event+0x580>
    1b8e:	e5 c0       	rjmp	.+458    	; 0x1d5a <error_event+0x5a0>
		if (error_motor_status == 1)
		{
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
    1b96:	85 e0       	ldi	r24, 0x05	; 5
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9f 93       	push	r25
    1b9c:	8f 93       	push	r24
    1b9e:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1ba2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <dcmotor_get_pwm>
	return error_max_voltage;
}

static uint16_t count_motor_timeout_wait(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1ba6:	2e e1       	ldi	r18, 0x1E	; 30
    1ba8:	ac 01       	movw	r20, r24
    1baa:	24 9f       	mul	r18, r20
    1bac:	c0 01       	movw	r24, r0
    1bae:	25 9f       	mul	r18, r21
    1bb0:	90 0d       	add	r25, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	48 e8       	ldi	r20, 0x88	; 136
    1bb6:	53 e1       	ldi	r21, 0x13	; 19
    1bb8:	ea 01       	movw	r28, r20
    1bba:	c8 1b       	sub	r28, r24
    1bbc:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_wait: %d\n\r", timeout);
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	80 e2       	ldi	r24, 0x20	; 32
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9f 93       	push	r25
    1bc8:	8f 93       	push	r24
    1bca:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
			switch(error_motor_state)
			{
				case ERR_M_OK:
					error_motor_state = ERR_M_WAIT;
					debug_msg("ERROR STATUS: ERR_M_WAIT\n\r");
					evTime_start(&motor_timer, count_motor_timeout_wait(dcmotor_get_pwm()));
    1bce:	ae 01       	movw	r20, r28
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	8a e1       	ldi	r24, 0x1A	; 26
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
				break;
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	b8 c0       	rjmp	.+368    	; 0x1d5a <error_event+0x5a0>
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
    1bea:	8a e1       	ldi	r24, 0x1A	; 26
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1bf2:	89 2b       	or	r24, r25
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <error_event+0x43e>
    1bf6:	b1 c0       	rjmp	.+354    	; 0x1d5a <error_event+0x5a0>
					{
						dcmotor_set_try();
    1bf8:	0e 94 41 07 	call	0xe82	; 0xe82 <dcmotor_set_try>
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1bfc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <dcmotor_get_pwm>
	return timeout; //5000[ms] - pwm*30
}

static uint16_t count_motor_timeout_axelerate(uint16_t x)
{
	uint16_t timeout = 5000 - x*30;
    1c00:	2e e1       	ldi	r18, 0x1E	; 30
    1c02:	ac 01       	movw	r20, r24
    1c04:	24 9f       	mul	r18, r20
    1c06:	c0 01       	movw	r24, r0
    1c08:	25 9f       	mul	r18, r21
    1c0a:	90 0d       	add	r25, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	48 e8       	ldi	r20, 0x88	; 136
    1c10:	53 e1       	ldi	r21, 0x13	; 19
    1c12:	ea 01       	movw	r28, r20
    1c14:	c8 1b       	sub	r28, r24
    1c16:	d9 0b       	sbc	r29, r25
	debug_msg("count_motor_timeout_axelerate: %d\n\r", timeout);
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	8f e3       	ldi	r24, 0x3F	; 63
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	9f 93       	push	r25
    1c22:	8f 93       	push	r24
    1c24:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
				break;
				case ERR_M_WAIT:
					if (evTime_check(&motor_timer))
					{
						dcmotor_set_try();
						evTime_start(&motor_timer, count_motor_timeout_axelerate(dcmotor_get_pwm()));
    1c28:	ae 01       	movw	r20, r28
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	8a e1       	ldi	r24, 0x1A	; 26
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
						error_motor_state = ERR_M_AXELERATE;
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_AXELERATE\n\r");
    1c3c:	83 e6       	ldi	r24, 0x63	; 99
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	82 c0       	rjmp	.+260    	; 0x1d5a <error_event+0x5a0>
					}
				break;
				case ERR_M_AXELERATE:
					if (evTime_check(&motor_timer))
    1c56:	8a e1       	ldi	r24, 0x1A	; 26
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1c5e:	89 2b       	or	r24, r25
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <error_event+0x4aa>
    1c62:	7b c0       	rjmp	.+246    	; 0x1d5a <error_event+0x5a0>
					{
						error_motor_state = ERR_M_ERROR;
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
						debug_msg("ERROR STATUS: ERR_M_ERROR\n\r");
    1c6a:	83 e8       	ldi	r24, 0x83	; 131
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9f 93       	push	r25
    1c70:	8f 93       	push	r24
    1c72:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	6f c0       	rjmp	.+222    	; 0x1d5a <error_event+0x5a0>
					}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <set_error_state>
				break;
    1c82:	6b c0       	rjmp	.+214    	; 0x1d5a <error_event+0x5a0>
				case ERR_M_EXIT:
					if (evTime_check(&motor_timer))
    1c84:	8a e1       	ldi	r24, 0x1A	; 26
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1c8c:	89 2b       	or	r24, r25
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <error_event+0x4d8>
    1c90:	64 c0       	rjmp	.+200    	; 0x1d5a <error_event+0x5a0>
					{
						evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1c92:	40 ed       	ldi	r20, 0xD0	; 208
    1c94:	57 e0       	ldi	r21, 0x07	; 7
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	8a e1       	ldi	r24, 0x1A	; 26
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
						error_motor_state = error_motor_last_state;
    1ca2:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <error_motor_last_state>
    1ca6:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
						debug_msg("ERROR STATUS: go to last before wait\n\r");
    1caa:	8f e9       	ldi	r24, 0x9F	; 159
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	9f 93       	push	r25
    1cb0:	8f 93       	push	r24
    1cb2:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	4f c0       	rjmp	.+158    	; 0x1d5a <error_event+0x5a0>
			switch(error_motor_state)
			{
				case ERR_M_OK:
				break;
				case ERR_M_WAIT:
				if (evTime_check(&motor_timer))
    1cbc:	8a e1       	ldi	r24, 0x1A	; 26
    1cbe:	93 e0       	ldi	r25, 0x03	; 3
    1cc0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1cc4:	89 2b       	or	r24, r25
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <error_event+0x510>
    1cc8:	48 c0       	rjmp	.+144    	; 0x1d5a <error_event+0x5a0>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1cca:	40 ed       	ldi	r20, 0xD0	; 208
    1ccc:	57 e0       	ldi	r21, 0x07	; 7
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	8a e1       	ldi	r24, 0x1A	; 26
    1cd4:	93 e0       	ldi	r25, 0x03	; 3
    1cd6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
					error_motor_last_state = ERR_M_WAIT;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1ce6:	86 ec       	ldi	r24, 0xC6	; 198
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	31 c0       	rjmp	.+98     	; 0x1d5a <error_event+0x5a0>
				}
				break;
				case ERR_M_AXELERATE:
				if (evTime_check(&motor_timer))
    1cf8:	8a e1       	ldi	r24, 0x1A	; 26
    1cfa:	93 e0       	ldi	r25, 0x03	; 3
    1cfc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1d00:	89 2b       	or	r24, r25
    1d02:	59 f1       	breq	.+86     	; 0x1d5a <error_event+0x5a0>
				{
					evTime_start(&motor_timer, ERROR_M_TIME_EXIT);
    1d04:	40 ed       	ldi	r20, 0xD0	; 208
    1d06:	57 e0       	ldi	r21, 0x07	; 7
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	8a e1       	ldi	r24, 0x1A	; 26
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
					error_motor_state = ERR_M_EXIT;
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <error_motor_state>
					error_motor_last_state = ERR_M_AXELERATE;
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <error_motor_last_state>
					debug_msg("ERROR STATUS: ERR_M_EXIT\n\r");
    1d20:	86 ec       	ldi	r24, 0xC6	; 198
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	9f 93       	push	r25
    1d26:	8f 93       	push	r24
    1d28:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <error_event+0x5a0>
				}
				break;
				case ERR_M_ERROR:
					set_error_state(ERR_REASON_MOTOR);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	0e 94 9b 0b 	call	0x1736	; 0x1736 <set_error_state>
				break;
    1d38:	10 c0       	rjmp	.+32     	; 0x1d5a <error_event+0x5a0>
				case ERR_M_EXIT:
				if (evTime_check(&motor_timer))
    1d3a:	8a e1       	ldi	r24, 0x1A	; 26
    1d3c:	93 e0       	ldi	r25, 0x03	; 3
    1d3e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1d42:	89 2b       	or	r24, r25
    1d44:	51 f0       	breq	.+20     	; 0x1d5a <error_event+0x5a0>
				{
					debug_msg("ERROR STATUS: ERR_M_OK\n\r");
    1d46:	81 ee       	ldi	r24, 0xE1	; 225
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					error_motor_state = ERR_M_OK;
    1d52:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <error_motor_state>
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
		}
		#endif
		//////////////////////////////////////////////////////////////////////////////////////
		// SERVO
		#if CONFIG_USE_ERROR_SERVO
		servo_error_value = count_servo_error_value();
    1d5a:	84 e6       	ldi	r24, 0x64	; 100
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <servo_error_value+0x1>
    1d62:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <servo_error_value>
		if (measure_get_filtered_value(MEAS_SERVO) > servo_error_value) //servo_vibro_value*5
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 88 10 	call	0x2110	; 0x2110 <measure_get_filtered_value>
    1d6c:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <servo_error_value>
    1d70:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <servo_error_value+0x1>
    1d74:	28 17       	cp	r18, r24
    1d76:	39 07       	cpc	r19, r25
    1d78:	d8 f4       	brcc	.+54     	; 0x1db0 <error_event+0x5f6>
		{
			debug_msg("servo_error_value: %d\n", servo_error_value);
    1d7a:	3f 93       	push	r19
    1d7c:	2f 93       	push	r18
    1d7e:	8a ef       	ldi	r24, 0xFA	; 250
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	9f 93       	push	r25
    1d84:	8f 93       	push	r24
    1d86:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
			error_servo_status = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <error_servo_status>
			error_servo_status = 0;
		}
		
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <error_servo_state>
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	51 f1       	breq	.+84     	; 0x1df4 <error_event+0x63a>
    1da0:	a8 f0       	brcs	.+42     	; 0x1dcc <error_event+0x612>
    1da2:	82 30       	cpi	r24, 0x02	; 2
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <error_event+0x5ee>
    1da6:	4b c0       	rjmp	.+150    	; 0x1e3e <error_event+0x684>
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	09 f4       	brne	.+2      	; 0x1dae <error_event+0x5f4>
    1dac:	51 c0       	rjmp	.+162    	; 0x1e50 <error_event+0x696>
    1dae:	81 c0       	rjmp	.+258    	; 0x1eb2 <error_event+0x6f8>
			debug_msg("servo_error_value: %d\n", servo_error_value);
			error_servo_status = 1;
		}
		else
		{
			error_servo_status = 0;
    1db0:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <error_servo_status>
			} //switch
		}// if (error_servo_status == 1)
		else
		{
			//toDo
			switch(error_servo_state)
    1db4:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <error_servo_state>
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <error_event+0x604>
    1dbc:	66 c0       	rjmp	.+204    	; 0x1e8a <error_event+0x6d0>
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <error_event+0x60a>
    1dc2:	74 c0       	rjmp	.+232    	; 0x1eac <error_event+0x6f2>
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <error_event+0x610>
    1dc8:	74 c0       	rjmp	.+232    	; 0x1eb2 <error_event+0x6f8>
    1dca:	46 c0       	rjmp	.+140    	; 0x1e58 <error_event+0x69e>
		if (error_servo_status == 1)
		{
			switch(error_servo_state)
			{
				case ERR_S_OK:
					error_servo_state = ERR_S_WAIT;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_WAIT\n\r");
    1dd2:	81 e1       	ldi	r24, 0x11	; 17
    1dd4:	92 e0       	ldi	r25, 0x02	; 2
    1dd6:	9f 93       	push	r25
    1dd8:	8f 93       	push	r24
    1dda:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
					evTime_start(&servo_timer, SERVO_WAIT_TO_TRY);
    1dde:	44 ef       	ldi	r20, 0xF4	; 244
    1de0:	51 e0       	ldi	r21, 0x01	; 1
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	8c e0       	ldi	r24, 0x0C	; 12
    1de8:	93 e0       	ldi	r25, 0x03	; 3
    1dea:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
				break;
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	5f c0       	rjmp	.+190    	; 0x1eb2 <error_event+0x6f8>
				case ERR_S_WAIT:
					if (evTime_check(&servo_timer))
    1df4:	8c e0       	ldi	r24, 0x0C	; 12
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1dfc:	89 2b       	or	r24, r25
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <error_event+0x648>
    1e00:	58 c0       	rjmp	.+176    	; 0x1eb2 <error_event+0x6f8>
					{
						if (servo_get_try_cnt() > SERVO_TRY_CNT)
    1e02:	0e 94 16 12 	call	0x242c	; 0x242c <servo_get_try_cnt>
    1e06:	04 97       	sbiw	r24, 0x04	; 4
    1e08:	24 f0       	brlt	.+8      	; 0x1e12 <error_event+0x658>
						{
							error_servo_state = ERR_S_ERROR;
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <error_servo_state>
							break;
    1e10:	50 c0       	rjmp	.+160    	; 0x1eb2 <error_event+0x6f8>
						}
						evTime_start(&servo_timer, SERVO_WAIT_AFTER_TRY);
    1e12:	4c ed       	ldi	r20, 0xDC	; 220
    1e14:	55 e0       	ldi	r21, 0x05	; 5
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	8c e0       	ldi	r24, 0x0C	; 12
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
						error_servo_state = ERR_S_TRY;
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <error_servo_state>
						servo_enable_try();
    1e28:	0e 94 0a 12 	call	0x2414	; 0x2414 <servo_enable_try>
						debug_msg("ERROR STATUS: ERR_S_TRY\n\r");
    1e2c:	8c e2       	ldi	r24, 0x2C	; 44
    1e2e:	92 e0       	ldi	r25, 0x02	; 2
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	3a c0       	rjmp	.+116    	; 0x1eb2 <error_event+0x6f8>
					}
				break;
				case ERR_S_TRY:
					if (evTime_check(&servo_timer))
    1e3e:	8c e0       	ldi	r24, 0x0C	; 12
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1e46:	89 2b       	or	r24, r25
    1e48:	a1 f1       	breq	.+104    	; 0x1eb2 <error_event+0x6f8>
					{
						error_servo_state = ERR_S_OK;
    1e4a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <error_servo_state>
    1e4e:	31 c0       	rjmp	.+98     	; 0x1eb2 <error_event+0x6f8>
					}
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	0e 94 9b 0b 	call	0x1736	; 0x1736 <set_error_state>
				break;
    1e56:	2d c0       	rjmp	.+90     	; 0x1eb2 <error_event+0x6f8>
			switch(error_servo_state)
			{
				case ERR_S_OK:
				break;
				case ERR_S_WAIT:
				if (evTime_check(&servo_timer))
    1e58:	8c e0       	ldi	r24, 0x0C	; 12
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1e60:	89 2b       	or	r24, r25
    1e62:	39 f1       	breq	.+78     	; 0x1eb2 <error_event+0x6f8>
				{
					evTime_start(&servo_timer, ERROR_M_TIME_EXIT);
    1e64:	40 ed       	ldi	r20, 0xD0	; 208
    1e66:	57 e0       	ldi	r21, 0x07	; 7
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	8c e0       	ldi	r24, 0x0C	; 12
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
					error_servo_state = ERR_M_OK;
    1e74:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e78:	86 e4       	ldi	r24, 0x46	; 70
    1e7a:	92 e0       	ldi	r25, 0x02	; 2
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
    1e80:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <error_event+0x6f8>
				}
				break;
				case ERR_S_TRY:
				if (evTime_check(&servo_timer))
    1e8a:	8c e0       	ldi	r24, 0x0C	; 12
    1e8c:	93 e0       	ldi	r25, 0x03	; 3
    1e8e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    1e92:	89 2b       	or	r24, r25
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <error_event+0x6f8>
				{
					error_servo_state = ERR_S_OK;
    1e96:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <error_servo_state>
					debug_msg("ERROR STATUS: ERR_S_OK\n\r");
    1e9a:	86 e4       	ldi	r24, 0x46	; 70
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <error_event+0x6f8>
				}
				break;
				break;
				case ERR_S_ERROR:
					set_error_state(ERR_REASON_SERVO);
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	0e 94 9b 0b 	call	0x1736	; 0x1736 <set_error_state>
				break;
			} //switch
		} //else (error_servo_status == 1)
		#endif
	} //error_event_timer
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	08 95       	ret

00001ec4 <error_led_blink>:


void error_led_blink(void)
{
	static evTime blink_timer;
	if (evTime_process_period(&blink_timer, 350))
    1ec4:	4e e5       	ldi	r20, 0x5E	; 94
    1ec6:	51 e0       	ldi	r21, 0x01	; 1
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	0e 94 99 17 	call	0x2f32	; 0x2f32 <evTime_process_period>
    1ed4:	89 2b       	or	r24, r25
    1ed6:	09 f1       	breq	.+66     	; 0x1f1a <error_led_blink+0x56>
	{
		if (led_blink == ERR_REASON_MOTOR)
    1ed8:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <led_blink>
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	71 f4       	brne	.+28     	; 0x1efc <error_led_blink+0x38>
		{
			LED_MOTOR_TOGGLE;
    1ee0:	92 b3       	in	r25, 0x12	; 18
    1ee2:	80 e1       	ldi	r24, 0x10	; 16
    1ee4:	89 27       	eor	r24, r25
    1ee6:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1ee8:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    1eec:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    1ef0:	90 62       	ori	r25, 0x20	; 32
    1ef2:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    1ef6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    1efa:	08 95       	ret
		}
		else if (led_blink == ERR_REASON_SERVO)
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	69 f4       	brne	.+26     	; 0x1f1a <error_led_blink+0x56>
		{
			LED_SERVO_TOGGLE;
    1f00:	92 b3       	in	r25, 0x12	; 18
    1f02:	80 e4       	ldi	r24, 0x40	; 64
    1f04:	89 27       	eor	r24, r25
    1f06:	82 bb       	out	0x12, r24	; 18
			ON_BUZZ_SIGNAL;
    1f08:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    1f0c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    1f10:	90 62       	ori	r25, 0x20	; 32
    1f12:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    1f16:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    1f1a:	08 95       	ret

00001f1c <filtered_value>:
static uint8_t s_o_t_iteration_adc_table = 0;
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	20 81       	ld	r18, Z
    1f20:	31 81       	ldd	r19, Z+1	; 0x01
	for (uint8_t i = 1; i<size; i++)
    1f22:	62 30       	cpi	r22, 0x02	; 2
    1f24:	58 f0       	brcs	.+22     	; 0x1f3c <filtered_value+0x20>
    1f26:	32 96       	adiw	r30, 0x02	; 2
    1f28:	91 e0       	ldi	r25, 0x01	; 1
	{
		ret_val = (ret_val + tab[i])/2;
    1f2a:	41 91       	ld	r20, Z+
    1f2c:	51 91       	ld	r21, Z+
    1f2e:	24 0f       	add	r18, r20
    1f30:	35 1f       	adc	r19, r21
    1f32:	36 95       	lsr	r19
    1f34:	27 95       	ror	r18
static uint16_t s_o_t_adc;

static uint16_t filtered_value(uint16_t *tab, uint8_t size)
{
	uint16_t ret_val = *tab;
	for (uint8_t i = 1; i<size; i++)
    1f36:	9f 5f       	subi	r25, 0xFF	; 255
    1f38:	69 13       	cpse	r22, r25
    1f3a:	f7 cf       	rjmp	.-18     	; 0x1f2a <filtered_value+0xe>
	{
		ret_val = (ret_val + tab[i])/2;
	}
	return ret_val;
}
    1f3c:	c9 01       	movw	r24, r18
    1f3e:	08 95       	ret

00001f40 <init_measure>:

void init_measure(void)
{
    1f40:	ef e5       	ldi	r30, 0x5F	; 95
    1f42:	f3 e0       	ldi	r31, 0x03	; 3
    1f44:	27 e8       	ldi	r18, 0x87	; 135
    1f46:	33 e0       	ldi	r19, 0x03	; 3
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
    1f48:	81 ef       	ldi	r24, 0xF1	; 241
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	81 93       	st	Z+, r24
    1f4e:	91 93       	st	Z+, r25
	return ret_val;
}

void init_measure(void)
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
    1f50:	2e 17       	cp	r18, r30
    1f52:	3f 07       	cpc	r19, r31
    1f54:	d9 f7       	brne	.-10     	; 0x1f4c <init_measure+0xc>
    1f56:	ee e3       	ldi	r30, 0x3E	; 62
    1f58:	f3 e0       	ldi	r31, 0x03	; 3
    1f5a:	8c e5       	ldi	r24, 0x5C	; 92
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
    1f5e:	11 92       	st	Z+, r1
    1f60:	11 92       	st	Z+, r1
{
	for(uint8_t i = 0; i<ACCUMULATOR_SIZE_TAB; i++)
	{
		accumulator_tab[i] = ACCUMULATOR_LOW_VOLTAGE + (ACCUMULATOR_HIGH_VOLTAGE - ACCUMULATOR_LOW_VOLTAGE)/2;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
    1f62:	8e 17       	cp	r24, r30
    1f64:	9f 07       	cpc	r25, r31
    1f66:	d9 f7       	brne	.-10     	; 0x1f5e <init_measure+0x1e>
    1f68:	e6 e2       	ldi	r30, 0x26	; 38
    1f6a:	f3 e0       	ldi	r31, 0x03	; 3
    1f6c:	8a e3       	ldi	r24, 0x3A	; 58
    1f6e:	93 e0       	ldi	r25, 0x03	; 3
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
	{
		s_o_t_f_table[i] = 0;
    1f70:	11 92       	st	Z+, r1
    1f72:	11 92       	st	Z+, r1
	}
    for(uint8_t i = 0; i<FILTER_TABLE_SIZE; i++)
	{
		motor_f_table[i] = 0;
	}
    for(uint8_t i = 0; i<FILTER_TABLE_S_SIZE; i++)
    1f74:	8e 17       	cp	r24, r30
    1f76:	9f 07       	cpc	r25, r31
    1f78:	d9 f7       	brne	.-10     	; 0x1f70 <init_measure+0x30>
	{
		s_o_t_f_table[i] = 0;
	}
}
    1f7a:	08 95       	ret

00001f7c <measure_process>:
static timer_t measure_timer;
void measure_process(void)
{
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
	if (measure_timer < mktime.ms)
    1f88:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    1f8c:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    1f90:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    1f94:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    1f98:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <measure_timer>
    1f9c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <measure_timer+0x1>
    1fa0:	a0 91 21 03 	lds	r26, 0x0321	; 0x800321 <measure_timer+0x2>
    1fa4:	b0 91 22 03 	lds	r27, 0x0322	; 0x800322 <measure_timer+0x3>
    1fa8:	84 17       	cp	r24, r20
    1faa:	95 07       	cpc	r25, r21
    1fac:	a6 07       	cpc	r26, r22
    1fae:	b7 07       	cpc	r27, r23
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <measure_process+0x38>
    1fb2:	a7 c0       	rjmp	.+334    	; 0x2102 <measure_process+0x186>
	{
		measure_timer = mktime.ms + 50;
    1fb4:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
    1fb8:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
    1fbc:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
    1fc0:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
    1fc4:	c2 96       	adiw	r24, 0x32	; 50
    1fc6:	a1 1d       	adc	r26, r1
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <measure_timer>
    1fce:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <measure_timer+0x1>
    1fd2:	a0 93 21 03 	sts	0x0321, r26	; 0x800321 <measure_timer+0x2>
    1fd6:	b0 93 22 03 	sts	0x0322, r27	; 0x800322 <measure_timer+0x3>
		accum_adc = adc_read(ACCUMULATOR_ADC_CH); 
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	0e 94 38 03 	call	0x670	; 0x670 <adc_read>
    1fe0:	ec 01       	movw	r28, r24
		#if CONFIG_DEVICE_SOLARKA
		#endif
		#if CONFIG_DEVICE_SIEWNIK
		accum_adc += motor_filter_value*0.27; //motor_filter_value*0.0075*1025/5/5.7
    1fe2:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <motor_filter_value>
    1fe6:	70 91 5d 03 	lds	r23, 0x035D	; 0x80035d <motor_filter_value+0x1>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    1ff2:	21 e7       	ldi	r18, 0x71	; 113
    1ff4:	3d e3       	ldi	r19, 0x3D	; 61
    1ff6:	4a e8       	ldi	r20, 0x8A	; 138
    1ff8:	5e e3       	ldi	r21, 0x3E	; 62
    1ffa:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    1ffe:	6b 01       	movw	r12, r22
    2000:	7c 01       	movw	r14, r24
    2002:	be 01       	movw	r22, r28
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	c7 01       	movw	r24, r14
    2012:	b6 01       	movw	r22, r12
    2014:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__addsf3>
    2018:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    201c:	70 93 8a 03 	sts	0x038A, r23	; 0x80038a <accum_adc+0x1>
    2020:	60 93 89 03 	sts	0x0389, r22	; 0x800389 <accum_adc>
		#endif
		accumulator_tab[iteration_adc_accum_table] = accum_adc;
    2024:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <iteration_adc_accum_table>
    2028:	e2 2f       	mov	r30, r18
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	e1 5a       	subi	r30, 0xA1	; 161
    2032:	fc 4f       	sbci	r31, 0xFC	; 252
    2034:	71 83       	std	Z+1, r23	; 0x01
    2036:	60 83       	st	Z, r22
		
		iteration_adc_accum_table++;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	82 0f       	add	r24, r18
    203c:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <iteration_adc_accum_table>
		motor_adc = adc_read(MOTOR_ADC_CH);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	0e 94 38 03 	call	0x670	; 0x670 <adc_read>
    2046:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <motor_adc+0x1>
    204a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <motor_adc>
		motor_f_table[iteration_adc_motor_table] = motor_adc;
    204e:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <iteration_adc_motor_table>
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	e2 5c       	subi	r30, 0xC2	; 194
    205a:	fc 4f       	sbci	r31, 0xFC	; 252
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		///////////////////////////////////////////////////////////
		////////// TODO isset_timer
		s_o_t_adc = adc_read(SERVO_ADC_CH);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	0e 94 38 03 	call	0x670	; 0x670 <adc_read>
		
		#if CONFIG_DEVICE_SIEWNIK
		if (s_o_t_adc < SERVO_CALIBRATION_VALUE) s_o_t_adc = 0;
    2066:	88 35       	cpi	r24, 0x58	; 88
    2068:	22 e0       	ldi	r18, 0x02	; 2
    206a:	92 07       	cpc	r25, r18
    206c:	28 f4       	brcc	.+10     	; 0x2078 <measure_process+0xfc>
    206e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <s_o_t_adc+0x1>
    2072:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <s_o_t_adc>
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <measure_process+0x108>
		else s_o_t_adc = s_o_t_adc - SERVO_CALIBRATION_VALUE;
    2078:	88 55       	subi	r24, 0x58	; 88
    207a:	92 40       	sbci	r25, 0x02	; 2
    207c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <s_o_t_adc+0x1>
    2080:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <s_o_t_adc>
		#endif

		s_o_t_f_table[s_o_t_iteration_adc_table] = s_o_t_adc;
    2084:	c0 91 25 03 	lds	r28, 0x0325	; 0x800325 <s_o_t_iteration_adc_table>
    2088:	ec 2f       	mov	r30, r28
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	ea 5d       	subi	r30, 0xDA	; 218
    2092:	fc 4f       	sbci	r31, 0xFC	; 252
    2094:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <s_o_t_adc>
    2098:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <s_o_t_adc+0x1>
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
		iteration_adc_motor_table++;
    20a0:	d0 91 5e 03 	lds	r29, 0x035E	; 0x80035e <iteration_adc_motor_table>
    20a4:	df 5f       	subi	r29, 0xFF	; 255
    20a6:	d0 93 5e 03 	sts	0x035E, r29	; 0x80035e <iteration_adc_motor_table>
		s_o_t_iteration_adc_table++;
    20aa:	cf 5f       	subi	r28, 0xFF	; 255
    20ac:	c0 93 25 03 	sts	0x0325, r28	; 0x800325 <s_o_t_iteration_adc_table>
		filtered_accum_adc_val = filtered_value(accumulator_tab, ACCUMULATOR_SIZE_TAB);
    20b0:	64 e1       	ldi	r22, 0x14	; 20
    20b2:	8f e5       	ldi	r24, 0x5F	; 95
    20b4:	93 e0       	ldi	r25, 0x03	; 3
    20b6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <filtered_value>
    20ba:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <filtered_accum_adc_val+0x1>
    20be:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <filtered_accum_adc_val>
		motor_filter_value = filtered_value(motor_f_table, FILTER_TABLE_SIZE);
    20c2:	6f e0       	ldi	r22, 0x0F	; 15
    20c4:	8e e3       	ldi	r24, 0x3E	; 62
    20c6:	93 e0       	ldi	r25, 0x03	; 3
    20c8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <filtered_value>
    20cc:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <motor_filter_value+0x1>
    20d0:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <motor_filter_value>
		s_o_t_filter_value = filtered_value(s_o_t_f_table, FILTER_TABLE_S_SIZE);
    20d4:	6a e0       	ldi	r22, 0x0A	; 10
    20d6:	86 e2       	ldi	r24, 0x26	; 38
    20d8:	93 e0       	ldi	r25, 0x03	; 3
    20da:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <filtered_value>
    20de:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <s_o_t_filter_value+0x1>
    20e2:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <s_o_t_filter_value>
		//debug_msg("ADC: accum %d, servo %d, motor %d\n",accum_adc, s_o_t_adc, motor_adc);
		
		if (iteration_adc_accum_table == ACCUMULATOR_SIZE_TAB) iteration_adc_accum_table = 0;
    20e6:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <iteration_adc_accum_table>
    20ea:	84 31       	cpi	r24, 0x14	; 20
    20ec:	11 f4       	brne	.+4      	; 0x20f2 <measure_process+0x176>
    20ee:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <iteration_adc_accum_table>
		if (s_o_t_iteration_adc_table == FILTER_TABLE_S_SIZE) s_o_t_iteration_adc_table = 0;
    20f2:	ca 30       	cpi	r28, 0x0A	; 10
    20f4:	11 f4       	brne	.+4      	; 0x20fa <measure_process+0x17e>
    20f6:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <s_o_t_iteration_adc_table>
		if (iteration_adc_motor_table == FILTER_TABLE_SIZE) iteration_adc_motor_table = 0;
    20fa:	df 30       	cpi	r29, 0x0F	; 15
    20fc:	11 f4       	brne	.+4      	; 0x2102 <measure_process+0x186>
    20fe:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <iteration_adc_motor_table>
	}
}
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	08 95       	ret

00002110 <measure_get_filtered_value>:

uint16_t measure_get_filtered_value(_type_measure type)
{
    switch(type)
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	18 f4       	brcc	.+6      	; 0x211a <measure_get_filtered_value+0xa>
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	40 f0       	brcs	.+16     	; 0x2128 <measure_get_filtered_value+0x18>
    2118:	0c c0       	rjmp	.+24     	; 0x2132 <measure_get_filtered_value+0x22>
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	79 f4       	brne	.+30     	; 0x213c <measure_get_filtered_value+0x2c>
    {
        case MEAS_ACCUM:
        return filtered_accum_adc_val;
    211e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <filtered_accum_adc_val>
    2122:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <filtered_accum_adc_val+0x1>
    2126:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_filter_value;
    2128:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <motor_filter_value>
    212c:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <motor_filter_value+0x1>
    2130:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_filter_value;
    2132:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <s_o_t_filter_value>
    2136:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <s_o_t_filter_value+0x1>
    213a:	08 95       	ret
        break;
    }
	return 0;
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
}
    2140:	08 95       	ret

00002142 <measure_get_value>:

uint16_t measure_get_value(_type_measure type)
{
    switch(type)
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	18 f4       	brcc	.+6      	; 0x214c <measure_get_value+0xa>
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	40 f0       	brcs	.+16     	; 0x215a <measure_get_value+0x18>
    214a:	0c c0       	rjmp	.+24     	; 0x2164 <measure_get_value+0x22>
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	79 f4       	brne	.+30     	; 0x216e <measure_get_value+0x2c>
    {
        case MEAS_ACCUM:
        return accum_adc;
    2150:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <accum_adc>
    2154:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <accum_adc+0x1>
    2158:	08 95       	ret
        break;

        case MEAS_MOTOR:
        return motor_adc;
    215a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <motor_adc>
    215e:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <motor_adc+0x1>
    2162:	08 95       	ret
        break;

        case MEAS_SERVO:
		case MEAS_TEMPERATURE:
        return s_o_t_adc;
    2164:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <s_o_t_adc>
    2168:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <s_o_t_adc+0x1>
    216c:	08 95       	ret
        break;
    }
	return 0;
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
}
    2172:	08 95       	ret

00002174 <measure_get_current>:

float measure_get_current(_type_measure type, float resistor)
{
    2174:	cf 92       	push	r12
    2176:	df 92       	push	r13
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	6a 01       	movw	r12, r20
    217e:	7b 01       	movw	r14, r22
	uint32_t adc;
	switch(type)
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	18 f4       	brcc	.+6      	; 0x218a <measure_get_current+0x16>
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	50 f0       	brcs	.+20     	; 0x219c <measure_get_current+0x28>
    2188:	10 c0       	rjmp	.+32     	; 0x21aa <measure_get_current+0x36>
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	a9 f4       	brne	.+42     	; 0x21b8 <measure_get_current+0x44>
	{
		case MEAS_ACCUM:
		adc = filtered_accum_adc_val;
    218e:	60 91 87 03 	lds	r22, 0x0387	; 0x800387 <filtered_accum_adc_val>
    2192:	70 91 88 03 	lds	r23, 0x0388	; 0x800388 <filtered_accum_adc_val+0x1>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
		break;
    219a:	11 c0       	rjmp	.+34     	; 0x21be <measure_get_current+0x4a>

		case MEAS_MOTOR:
		adc = motor_filter_value;
    219c:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <motor_filter_value>
    21a0:	70 91 5d 03 	lds	r23, 0x035D	; 0x80035d <motor_filter_value+0x1>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21a8:	0a c0       	rjmp	.+20     	; 0x21be <measure_get_current+0x4a>

		case MEAS_SERVO:
		case MEAS_TEMPERATURE:
		adc = s_o_t_filter_value;
    21aa:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <s_o_t_filter_value>
    21ae:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <s_o_t_filter_value+0x1>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
		break;
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <measure_get_current+0x4a>
		
		default:
		adc = 0;
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	cb 01       	movw	r24, r22
		break;
	}
	float volt = (float) adc / (float) ADC_REFRES * 5.0 /* Volt */;
	return volt / resistor;
    21be:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <__floatunsisf>
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5a e3       	ldi	r21, 0x3A	; 58
    21ca:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 ea       	ldi	r20, 0xA0	; 160
    21d4:	50 e4       	ldi	r21, 0x40	; 64
    21d6:	0e 94 2e 1a 	call	0x345c	; 0x345c <__mulsf3>
    21da:	a7 01       	movw	r20, r14
    21dc:	96 01       	movw	r18, r12
    21de:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3>
    21e2:	ff 90       	pop	r15
    21e4:	ef 90       	pop	r14
    21e6:	df 90       	pop	r13
    21e8:	cf 90       	pop	r12
    21ea:	08 95       	ret

000021ec <mem_save_data>:
#define DEBUG_MEM (void)
#endif


void mem_save_data(_type_data param, void *data)
{
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	59 f0       	breq	.+22     	; 0x2212 <mem_save_data+0x26>
    21fc:	28 f4       	brcc	.+10     	; 0x2208 <mem_save_data+0x1c>
    21fe:	88 23       	and	r24, r24
    2200:	91 f0       	breq	.+36     	; 0x2226 <mem_save_data+0x3a>
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	19 f1       	breq	.+70     	; 0x224c <mem_save_data+0x60>
    2206:	30 c0       	rjmp	.+96     	; 0x2268 <mem_save_data+0x7c>
    2208:	83 30       	cpi	r24, 0x03	; 3
    220a:	29 f1       	breq	.+74     	; 0x2256 <mem_save_data+0x6a>
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	31 f0       	breq	.+12     	; 0x221c <mem_save_data+0x30>
    2210:	2b c0       	rjmp	.+86     	; 0x2268 <mem_save_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    2212:	22 e0       	ldi	r18, 0x02	; 2
    2214:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    2216:	84 e0       	ldi	r24, 0x04	; 4
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	21 c0       	rjmp	.+66     	; 0x225e <mem_save_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    221c:	23 e0       	ldi	r18, 0x03	; 3
    221e:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    2220:	88 e0       	ldi	r24, 0x08	; 8
    2222:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    2224:	1c c0       	rjmp	.+56     	; 0x225e <mem_save_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    2226:	68 94       	set
    2228:	ee 24       	eor	r14, r14
    222a:	e1 f8       	bld	r14, 1
    222c:	f1 2c       	mov	r15, r1
    222e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
    2230:	f8 01       	movw	r30, r16
    2232:	61 91       	ld	r22, Z+
    2234:	8f 01       	movw	r16, r30
    2236:	8c 2f       	mov	r24, r28
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <EEPROM_write>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    223e:	cf 5f       	subi	r28, 0xFF	; 255
    2240:	8c 2f       	mov	r24, r28
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	8e 15       	cp	r24, r14
    2246:	9f 05       	cpc	r25, r15
    2248:	9c f3       	brlt	.-26     	; 0x2230 <mem_save_data+0x44>
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <mem_save_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    224c:	22 e0       	ldi	r18, 0x02	; 2
    224e:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	04 c0       	rjmp	.+8      	; 0x225e <mem_save_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    2256:	22 e0       	ldi	r18, 0x02	; 2
    2258:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    225a:	86 e0       	ldi	r24, 0x06	; 6
    225c:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    225e:	c8 2f       	mov	r28, r24
    2260:	79 01       	movw	r14, r18
    2262:	e8 0e       	add	r14, r24
    2264:	f9 1e       	adc	r15, r25
    2266:	e4 cf       	rjmp	.-56     	; 0x2230 <mem_save_data+0x44>
	{
		//debug_msg("MEM: Write add: %d, data: %d\n", byte_n, *data_pnt);
		EEPROM_write(byte_n,*data_pnt);
		data_pnt++;
	}
}
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	08 95       	ret

00002274 <mem_read_data>:

void mem_read_data(_type_data param, void *data)
{
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	8b 01       	movw	r16, r22
    int offset;
    int len;
    uint8_t *data_pnt = (uint8_t*)data;
    switch(param)
    2280:	82 30       	cpi	r24, 0x02	; 2
    2282:	59 f0       	breq	.+22     	; 0x229a <mem_read_data+0x26>
    2284:	28 f4       	brcc	.+10     	; 0x2290 <mem_read_data+0x1c>
    2286:	88 23       	and	r24, r24
    2288:	91 f0       	breq	.+36     	; 0x22ae <mem_read_data+0x3a>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	19 f1       	breq	.+70     	; 0x22d4 <mem_read_data+0x60>
    228e:	30 c0       	rjmp	.+96     	; 0x22f0 <mem_read_data+0x7c>
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	29 f1       	breq	.+74     	; 0x22de <mem_read_data+0x6a>
    2294:	84 30       	cpi	r24, 0x04	; 4
    2296:	31 f0       	breq	.+12     	; 0x22a4 <mem_read_data+0x30>
    2298:	2b c0       	rjmp	.+86     	; 0x22f0 <mem_read_data+0x7c>
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
    229a:	22 e0       	ldi	r18, 0x02	; 2
    229c:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	21 c0       	rjmp	.+66     	; 0x22e6 <mem_read_data+0x72>
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
        len = sizeof(mem_calibration);
    22a4:	23 e0       	ldi	r18, 0x03	; 3
    22a6:	30 e0       	ldi	r19, 0x00	; 0
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
		break;
        case MEM_CALIBRATION:
        offset = 4*sizeof(mem_program);
    22a8:	88 e0       	ldi	r24, 0x08	; 8
    22aa:	90 e0       	ldi	r25, 0x00	; 0
        len = sizeof(mem_calibration);
        break;
    22ac:	1c c0       	rjmp	.+56     	; 0x22e6 <mem_read_data+0x72>
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22ae:	68 94       	set
    22b0:	ee 24       	eor	r14, r14
    22b2:	e1 f8       	bld	r14, 1
    22b4:	f1 2c       	mov	r15, r1
    22b6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*data_pnt = EEPROM_read(byte_n);
    22b8:	8c 2f       	mov	r24, r28
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 94 0b 	call	0x1728	; 0x1728 <EEPROM_read>
    22c0:	f8 01       	movw	r30, r16
    22c2:	81 93       	st	Z+, r24
    22c4:	8f 01       	movw	r16, r30
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22c6:	cf 5f       	subi	r28, 0xFF	; 255
    22c8:	8c 2f       	mov	r24, r28
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	8e 15       	cp	r24, r14
    22ce:	9f 05       	cpc	r25, r15
    22d0:	9c f3       	brlt	.-26     	; 0x22b8 <mem_read_data+0x44>
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <mem_read_data+0x7c>
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
        len = sizeof(mem_program);
    22d4:	22 e0       	ldi	r18, 0x02	; 2
    22d6:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_1:
        offset = 0;
        len = sizeof(mem_program);
        break;
        case MEM_PROGRAM_2:
        offset = sizeof(mem_program);
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <mem_read_data+0x72>
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
		len = sizeof(mem_program);
    22de:	22 e0       	ldi	r18, 0x02	; 2
    22e0:	30 e0       	ldi	r19, 0x00	; 0
        case MEM_PROGRAM_3:
        offset = 2*sizeof(mem_program);
        len = sizeof(mem_program);
        break;
		case MEM_LAST_DATA:
		offset = 3*sizeof(mem_program);
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	90 e0       	ldi	r25, 0x00	; 0
        default:
        return;
        break;
    }

	for (uint8_t byte_n=offset; byte_n<len + offset;byte_n++)
    22e6:	c8 2f       	mov	r28, r24
    22e8:	79 01       	movw	r14, r18
    22ea:	e8 0e       	add	r14, r24
    22ec:	f9 1e       	adc	r15, r25
    22ee:	e4 cf       	rjmp	.-56     	; 0x22b8 <mem_read_data+0x44>
	{
		*data_pnt = EEPROM_read(byte_n);
		//debug_msg("MEM: Read add: %d, data: %d\n", byte_n, *data_pnt);
		data_pnt++;
	}
}
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	08 95       	ret

000022fc <servo_set_pwm_val>:
}


void servo_try_reset_timeout(uint32_t time_ms)
{
	evTime_start(&servoD.timeout, time_ms);
    22fc:	81 11       	cpse	r24, r1
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <servo_set_pwm_val+0xe>
    2300:	8c e6       	ldi	r24, 0x6C	; 108
    2302:	97 e0       	ldi	r25, 0x07	; 7
    2304:	9b bd       	out	0x2b, r25	; 43
    2306:	8a bd       	out	0x2a, r24	; 42
    2308:	08 95       	ret
    230a:	82 33       	cpi	r24, 0x32	; 50
    230c:	90 f4       	brcc	.+36     	; 0x2332 <servo_set_pwm_val+0x36>
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	22 27       	eor	r18, r18
    2312:	33 27       	eor	r19, r19
    2314:	28 1b       	sub	r18, r24
    2316:	39 0b       	sbc	r19, r25
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	22 0f       	add	r18, r18
    231e:	33 1f       	adc	r19, r19
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	82 0f       	add	r24, r18
    2326:	93 1f       	adc	r25, r19
    2328:	88 5f       	subi	r24, 0xF8	; 248
    232a:	98 4f       	sbci	r25, 0xF8	; 248
    232c:	9b bd       	out	0x2b, r25	; 43
    232e:	8a bd       	out	0x2a, r24	; 42
    2330:	08 95       	ret
    2332:	84 36       	cpi	r24, 0x64	; 100
    2334:	68 f4       	brcc	.+26     	; 0x2350 <servo_set_pwm_val+0x54>
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	c2 97       	sbiw	r24, 0x32	; 50
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	2a ea       	ldi	r18, 0xAA	; 170
    2344:	35 e0       	ldi	r19, 0x05	; 5
    2346:	a9 01       	movw	r20, r18
    2348:	48 1b       	sub	r20, r24
    234a:	59 0b       	sbc	r21, r25
    234c:	5b bd       	out	0x2b, r21	; 43
    234e:	4a bd       	out	0x2a, r20	; 42
    2350:	08 95       	ret

00002352 <servo_error>:
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
    2358:	96 98       	cbi	0x12, 6	; 18
    235a:	85 e0       	ldi	r24, 0x05	; 5
    235c:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <servoD>
    2360:	08 95       	ret

00002362 <servo_init>:
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	2f e1       	ldi	r18, 0x1F	; 31
    2368:	3e e4       	ldi	r19, 0x4E	; 78
    236a:	37 bd       	out	0x27, r19	; 39
    236c:	26 bd       	out	0x26, r18	; 38
    236e:	81 b3       	in	r24, 0x11	; 17
    2370:	80 63       	ori	r24, 0x30	; 48
    2372:	81 bb       	out	0x11, r24	; 17
    2374:	19 bc       	out	0x29, r1	; 41
    2376:	18 bc       	out	0x28, r1	; 40
    2378:	1b bc       	out	0x2b, r1	; 43
    237a:	1a bc       	out	0x2a, r1	; 42
    237c:	8f b5       	in	r24, 0x2f	; 47
    237e:	82 60       	ori	r24, 0x02	; 2
    2380:	8f bd       	out	0x2f, r24	; 47
    2382:	8e b5       	in	r24, 0x2e	; 46
    2384:	88 61       	ori	r24, 0x18	; 24
    2386:	8e bd       	out	0x2e, r24	; 46
    2388:	8f b5       	in	r24, 0x2f	; 47
    238a:	80 68       	ori	r24, 0x80	; 128
    238c:	8f bd       	out	0x2f, r24	; 47
    238e:	8e b5       	in	r24, 0x2e	; 46
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	8e bd       	out	0x2e, r24	; 46
    2394:	3b bd       	out	0x2b, r19	; 43
    2396:	2a bd       	out	0x2a, r18	; 42
    2398:	96 98       	cbi	0x12, 6	; 18
    239a:	ce e3       	ldi	r28, 0x3E	; 62
    239c:	d5 e0       	ldi	r29, 0x05	; 5
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	88 83       	st	Y, r24
    23a2:	1b 82       	std	Y+3, r1	; 0x03
    23a4:	82 e4       	ldi	r24, 0x42	; 66
    23a6:	95 e0       	ldi	r25, 0x05	; 5
    23a8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <evTime_init>
    23ac:	19 86       	std	Y+9, r1	; 0x09
    23ae:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <try_count>
    23b2:	8f e5       	ldi	r24, 0x5F	; 95
    23b4:	92 e0       	ldi	r25, 0x02	; 2
    23b6:	9f 93       	push	r25
    23b8:	8f 93       	push	r24
    23ba:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <servo_is_open>:
    23c8:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <servoD>
    23cc:	92 50       	subi	r25, 0x02	; 2
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	92 30       	cpi	r25, 0x02	; 2
    23d4:	10 f0       	brcs	.+4      	; 0x23da <servo_is_open+0x12>
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	c9 01       	movw	r24, r18
    23dc:	08 95       	ret

000023de <servo_delayed_open>:
    23de:	90 91 3e 05 	lds	r25, 0x053E	; 0x80053e <servoD>
    23e2:	91 30       	cpi	r25, 0x01	; 1
    23e4:	a1 f4       	brne	.+40     	; 0x240e <servo_delayed_open+0x30>
    23e6:	ee e3       	ldi	r30, 0x3E	; 62
    23e8:	f5 e0       	ldi	r31, 0x05	; 5
    23ea:	93 e0       	ldi	r25, 0x03	; 3
    23ec:	90 83       	st	Z, r25
    23ee:	83 83       	std	Z+3, r24	; 0x03
    23f0:	1f 92       	push	r1
    23f2:	8f 93       	push	r24
    23f4:	8c e6       	ldi	r24, 0x6C	; 108
    23f6:	92 e0       	ldi	r25, 0x02	; 2
    23f8:	9f 93       	push	r25
    23fa:	8f 93       	push	r24
    23fc:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	08 95       	ret
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	08 95       	ret

00002414 <servo_enable_try>:
    2414:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <servoD>
    2418:	9f ef       	ldi	r25, 0xFF	; 255
    241a:	98 0f       	add	r25, r24
    241c:	92 30       	cpi	r25, 0x02	; 2
    241e:	28 f4       	brcc	.+10     	; 0x242a <servo_enable_try+0x16>
    2420:	ee e3       	ldi	r30, 0x3E	; 62
    2422:	f5 e0       	ldi	r31, 0x05	; 5
    2424:	81 83       	std	Z+1, r24	; 0x01
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	80 83       	st	Z, r24
    242a:	08 95       	ret

0000242c <servo_get_try_cnt>:
    242c:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <servoD+0x9>
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	08 95       	ret

00002434 <servo_close>:
    2434:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <servo_is_open>
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	c1 f0       	breq	.+48     	; 0x246c <servo_close+0x38>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
    2442:	ee e3       	ldi	r30, 0x3E	; 62
    2444:	f5 e0       	ldi	r31, 0x05	; 5
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 83       	st	Z, r24
    244a:	13 82       	std	Z+3, r1	; 0x03
    244c:	1f 92       	push	r1
    244e:	1f 92       	push	r1
    2450:	83 e8       	ldi	r24, 0x83	; 131
    2452:	92 e0       	ldi	r25, 0x02	; 2
    2454:	9f 93       	push	r25
    2456:	8f 93       	push	r24
    2458:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    245c:	96 98       	cbi	0x12, 6	; 18
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	08 95       	ret
    246c:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <servoD>
    2470:	24 30       	cpi	r18, 0x04	; 4
    2472:	21 f4       	brne	.+8      	; 0x247c <servo_close+0x48>
    2474:	0e 94 3f 12 	call	0x247e	; 0x247e <servo_exit_try>
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	08 95       	ret

0000247e <servo_exit_try>:
    247e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <servoD+0x1>
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	29 f4       	brne	.+10     	; 0x2490 <servo_exit_try+0x12>
    2486:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <servoD>
    248a:	0e 94 1a 12 	call	0x2434	; 0x2434 <servo_close>
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <servo_exit_try+0x24>
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	71 f4       	brne	.+28     	; 0x24b0 <servo_exit_try+0x32>
    2494:	ee e3       	ldi	r30, 0x3E	; 62
    2496:	f5 e0       	ldi	r31, 0x05	; 5
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	80 83       	st	Z, r24
    249c:	83 81       	ldd	r24, Z+3	; 0x03
    249e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <servo_open>
    24a2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <try_count>
    24a6:	ee e3       	ldi	r30, 0x3E	; 62
    24a8:	f5 e0       	ldi	r31, 0x05	; 5
    24aa:	81 85       	ldd	r24, Z+9	; 0x09
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	81 87       	std	Z+9, r24	; 0x09
    24b0:	08 95       	ret

000024b2 <servo_open>:
    24b2:	cf 93       	push	r28
    24b4:	c8 2f       	mov	r28, r24
    24b6:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <servoD>
    24ba:	9f ef       	ldi	r25, 0xFF	; 255
    24bc:	98 0f       	add	r25, r24
    24be:	93 30       	cpi	r25, 0x03	; 3
    24c0:	c0 f4       	brcc	.+48     	; 0x24f2 <servo_open+0x40>
    24c2:	ee e3       	ldi	r30, 0x3E	; 62
    24c4:	f5 e0       	ldi	r31, 0x05	; 5
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	80 83       	st	Z, r24
    24ca:	c3 83       	std	Z+3, r28	; 0x03
    24cc:	8c 2f       	mov	r24, r28
    24ce:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
    24d2:	1f 92       	push	r1
    24d4:	cf 93       	push	r28
    24d6:	84 e9       	ldi	r24, 0x94	; 148
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    24e2:	96 9a       	sbi	0x12, 6	; 18
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	09 c0       	rjmp	.+18     	; 0x2504 <servo_open+0x52>
    24f2:	84 30       	cpi	r24, 0x04	; 4
    24f4:	29 f4       	brne	.+10     	; 0x2500 <servo_open+0x4e>
    24f6:	0e 94 3f 12 	call	0x247e	; 0x247e <servo_exit_try>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <servo_open+0x52>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <servo_process>:
	try_count = 0;
	servoD.try_cnt++;
}

void servo_process(uint8_t value)
{
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	c8 2f       	mov	r28, r24
	static evTime servo_timer;
	if (evTime_process_period(&servo_timer, 75))
    250e:	4b e4       	ldi	r20, 0x4B	; 75
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	8b e9       	ldi	r24, 0x9B	; 155
    2518:	93 e0       	ldi	r25, 0x03	; 3
    251a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <evTime_process_period>
    251e:	89 2b       	or	r24, r25
    2520:	09 f4       	brne	.+2      	; 0x2524 <servo_process+0x1c>
    2522:	b6 c0       	rjmp	.+364    	; 0x2690 <servo_process+0x188>
	{
		switch(servoD.state)
    2524:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <servoD>
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	a1 f0       	breq	.+40     	; 0x2554 <servo_process+0x4c>
    252c:	30 f4       	brcc	.+12     	; 0x253a <servo_process+0x32>
    252e:	82 30       	cpi	r24, 0x02	; 2
    2530:	59 f0       	breq	.+22     	; 0x2548 <servo_process+0x40>
    2532:	83 30       	cpi	r24, 0x03	; 3
    2534:	09 f4       	brne	.+2      	; 0x2538 <servo_process+0x30>
    2536:	61 c0       	rjmp	.+194    	; 0x25fa <servo_process+0xf2>
    2538:	9b c0       	rjmp	.+310    	; 0x2670 <servo_process+0x168>
    253a:	85 30       	cpi	r24, 0x05	; 5
    253c:	09 f4       	brne	.+2      	; 0x2540 <servo_process+0x38>
    253e:	77 c0       	rjmp	.+238    	; 0x262e <servo_process+0x126>
    2540:	86 30       	cpi	r24, 0x06	; 6
    2542:	09 f4       	brne	.+2      	; 0x2546 <servo_process+0x3e>
    2544:	91 c0       	rjmp	.+290    	; 0x2668 <servo_process+0x160>
    2546:	94 c0       	rjmp	.+296    	; 0x2670 <servo_process+0x168>
		{
			case SERVO_OPEN:
			servoD.value = value;
    2548:	c0 93 41 05 	sts	0x0541, r28	; 0x800541 <servoD+0x3>
			servo_set_pwm_val((uint16_t)value);
    254c:	8c 2f       	mov	r24, r28
    254e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
			break;
    2552:	8e c0       	rjmp	.+284    	; 0x2670 <servo_process+0x168>
}

static void servo_try_process(void)
{
	static evTime timeout;
	if (try_count == 0)
    2554:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <try_count>
    2558:	81 11       	cpse	r24, r1
    255a:	13 c0       	rjmp	.+38     	; 0x2582 <servo_process+0x7a>
	{
		evTime_start(&timeout, 100);
    255c:	44 e6       	ldi	r20, 0x64	; 100
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	86 e9       	ldi	r24, 0x96	; 150
    2566:	93 e0       	ldi	r25, 0x03	; 3
    2568:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
		try_count++;
    256c:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <try_count>
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <try_count>
		servo_set_pwm_val(servoD.value + try_count);
    2576:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <servoD+0x3>
    257a:	89 0f       	add	r24, r25
    257c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
    2580:	28 c0       	rjmp	.+80     	; 0x25d2 <servo_process+0xca>
	}
	else if (try_count > 0 && try_count < TRY_OPEN_VAL)
    2582:	81 50       	subi	r24, 0x01	; 1
    2584:	89 30       	cpi	r24, 0x09	; 9
    2586:	c8 f4       	brcc	.+50     	; 0x25ba <servo_process+0xb2>
	{
		if (evTime_check(&timeout) == 1)
    2588:	86 e9       	ldi	r24, 0x96	; 150
    258a:	93 e0       	ldi	r25, 0x03	; 3
    258c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f9 f4       	brne	.+62     	; 0x25d2 <servo_process+0xca>
		{
			evTime_start(&timeout, 100);
    2594:	44 e6       	ldi	r20, 0x64	; 100
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	86 e9       	ldi	r24, 0x96	; 150
    259e:	93 e0       	ldi	r25, 0x03	; 3
    25a0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
			try_count++;
    25a4:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <try_count>
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <try_count>
			servo_set_pwm_val(servoD.value + try_count);
    25ae:	90 91 41 05 	lds	r25, 0x0541	; 0x800541 <servoD+0x3>
    25b2:	89 0f       	add	r24, r25
    25b4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
    25b8:	0c c0       	rjmp	.+24     	; 0x25d2 <servo_process+0xca>
		}
	}
	else
	{
		try_count = 0;
    25ba:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <try_count>
		servo_set_pwm_val(servoD.value);
    25be:	ce e3       	ldi	r28, 0x3E	; 62
    25c0:	d5 e0       	ldi	r29, 0x05	; 5
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <servo_set_pwm_val>
		servoD.state = servoD.last_state;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	88 83       	st	Y, r24
		servoD.try_cnt++;
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	89 87       	std	Y+9, r24	; 0x09
	}
	debug_msg("SERVO_TRY %d\n", servoD.value + try_count);
    25d2:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <servoD+0x3>
    25d6:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <try_count>
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	82 0f       	add	r24, r18
    25de:	91 1d       	adc	r25, r1
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	86 ea       	ldi	r24, 0xA6	; 166
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	9f 93       	push	r25
    25ea:	8f 93       	push	r24
    25ec:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	3b c0       	rjmp	.+118    	; 0x2670 <servo_process+0x168>
}

static void servo_delayed_open_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    25fa:	81 e9       	ldi	r24, 0x91	; 145
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	0e 94 65 17 	call	0x2eca	; 0x2eca <evTime_is_stated>
    2602:	89 2b       	or	r24, r25
    2604:	59 f0       	breq	.+22     	; 0x261c <servo_process+0x114>
	{
		if (evTime_check(&timeout) == 1)
    2606:	81 e9       	ldi	r24, 0x91	; 145
    2608:	93 e0       	ldi	r25, 0x03	; 3
    260a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	79 f5       	brne	.+94     	; 0x2670 <servo_process+0x168>
		{
			servoD.state = SERVO_OPEN;
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <servoD>
			LED_SERVO_ON;
    2618:	96 9a       	sbi	0x12, 6	; 18
    261a:	2a c0       	rjmp	.+84     	; 0x2670 <servo_process+0x168>
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    261c:	40 ed       	ldi	r20, 0xD0	; 208
    261e:	57 e0       	ldi	r21, 0x07	; 7
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	81 e9       	ldi	r24, 0x91	; 145
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
    262c:	21 c0       	rjmp	.+66     	; 0x2670 <servo_process+0x168>
}

static void servo_error_process(void)
{
	static evTime timeout;
	if (evTime_is_stated(&timeout))
    262e:	8c e8       	ldi	r24, 0x8C	; 140
    2630:	93 e0       	ldi	r25, 0x03	; 3
    2632:	0e 94 65 17 	call	0x2eca	; 0x2eca <evTime_is_stated>
    2636:	89 2b       	or	r24, r25
    2638:	71 f0       	breq	.+28     	; 0x2656 <servo_process+0x14e>
	{
		if (evTime_check(&timeout) == 1)
    263a:	8c e8       	ldi	r24, 0x8C	; 140
    263c:	93 e0       	ldi	r25, 0x03	; 3
    263e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	a9 f4       	brne	.+42     	; 0x2670 <servo_process+0x168>
		{
			servoD.state = SERVO_ERROR;
    2646:	86 e0       	ldi	r24, 0x06	; 6
    2648:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <servoD>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    264c:	8f e1       	ldi	r24, 0x1F	; 31
    264e:	9e e4       	ldi	r25, 0x4E	; 78
    2650:	9b bd       	out	0x2b, r25	; 43
    2652:	8a bd       	out	0x2a, r24	; 42
    2654:	0d c0       	rjmp	.+26     	; 0x2670 <servo_process+0x168>
			OFF_SERVO;
		}
	}
	else
	{
		evTime_start(&timeout, 2000);
    2656:	40 ed       	ldi	r20, 0xD0	; 208
    2658:	57 e0       	ldi	r21, 0x07	; 7
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	8c e8       	ldi	r24, 0x8C	; 140
    2660:	93 e0       	ldi	r25, 0x03	; 3
    2662:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <servo_process+0x168>
static uint8_t try_count = 0;

static void set_pwm(uint16_t pwm)
{
	#if !TEST_APP
	OCR1A = pwm;
    2668:	8f e1       	ldi	r24, 0x1F	; 31
    266a:	9e e4       	ldi	r25, 0x4E	; 78
    266c:	9b bd       	out	0x2b, r25	; 43
    266e:	8a bd       	out	0x2a, r24	; 42
			break;
			case SERVO_ERROR:
			OFF_SERVO;
			break;
		}
		if (evTime_check(&servoD.timeout) == 1) 
    2670:	82 e4       	ldi	r24, 0x42	; 66
    2672:	95 e0       	ldi	r25, 0x05	; 5
    2674:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	51 f4       	brne	.+20     	; 0x2690 <servo_process+0x188>
		{
			servoD.try_cnt = 0;
    267c:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <servoD+0x9>
			debug_msg("SERVO: Zero try cnt\n");
    2680:	84 eb       	ldi	r24, 0xB4	; 180
    2682:	92 e0       	ldi	r25, 0x02	; 2
    2684:	9f 93       	push	r25
    2686:	8f 93       	push	r24
    2688:	0e 94 c9 01 	call	0x392	; 0x392 <debug_msg>
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
		}
	}
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <off_button>:
}


void off_button(void)
{
	button1.timer_callback = 0;
    2696:	e6 ee       	ldi	r30, 0xE6	; 230
    2698:	f4 e0       	ldi	r31, 0x04	; 4
    269a:	16 86       	std	Z+14, r1	; 0x0e
    269c:	15 86       	std	Z+13, r1	; 0x0d
	button1.rise_callback = 0;
    269e:	12 86       	std	Z+10, r1	; 0x0a
    26a0:	11 86       	std	Z+9, r1	; 0x09
	button1.fall_callback = 0;
    26a2:	14 86       	std	Z+12, r1	; 0x0c
    26a4:	13 86       	std	Z+11, r1	; 0x0b
	
	button2.timer_callback = 0;
    26a6:	e9 eb       	ldi	r30, 0xB9	; 185
    26a8:	f4 e0       	ldi	r31, 0x04	; 4
    26aa:	16 86       	std	Z+14, r1	; 0x0e
    26ac:	15 86       	std	Z+13, r1	; 0x0d
	button2.rise_callback = 0;
    26ae:	12 86       	std	Z+10, r1	; 0x0a
    26b0:	11 86       	std	Z+9, r1	; 0x09
	button2.fall_callback = 0;
    26b2:	14 86       	std	Z+12, r1	; 0x0c
    26b4:	13 86       	std	Z+11, r1	; 0x0b
	
	button3.fall_callback = 0;
    26b6:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <button3+0xc>
    26ba:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <button3+0xb>
	
	button5.timer_callback = 0;
    26be:	e7 e9       	ldi	r30, 0x97	; 151
    26c0:	f4 e0       	ldi	r31, 0x04	; 4
    26c2:	16 86       	std	Z+14, r1	; 0x0e
    26c4:	15 86       	std	Z+13, r1	; 0x0d
	button5.fall_callback = 0;
    26c6:	14 86       	std	Z+12, r1	; 0x0c
    26c8:	13 86       	std	Z+11, r1	; 0x0b
	button5.rise_callback = 0;
    26ca:	12 86       	std	Z+10, r1	; 0x0a
    26cc:	11 86       	std	Z+9, r1	; 0x09
	
	button6.timer_callback = 0;
    26ce:	e7 ed       	ldi	r30, 0xD7	; 215
    26d0:	f4 e0       	ldi	r31, 0x04	; 4
    26d2:	16 86       	std	Z+14, r1	; 0x0e
    26d4:	15 86       	std	Z+13, r1	; 0x0d
	button6.fall_callback = 0;
    26d6:	14 86       	std	Z+12, r1	; 0x0c
    26d8:	13 86       	std	Z+11, r1	; 0x0b
	button6.rise_callback = 0;
    26da:	12 86       	std	Z+10, r1	; 0x0a
    26dc:	11 86       	std	Z+9, r1	; 0x09
	
	button7.fall_callback = 0;
    26de:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <button7+0xc>
    26e2:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <button7+0xb>
	
	button8.fall_callback = 0;
    26e6:	e4 e0       	ldi	r30, 0x04	; 4
    26e8:	f5 e0       	ldi	r31, 0x05	; 5
    26ea:	14 86       	std	Z+12, r1	; 0x0c
    26ec:	13 86       	std	Z+11, r1	; 0x0b
	button8.timer_callback = 0;
    26ee:	16 86       	std	Z+14, r1	; 0x0e
    26f0:	15 86       	std	Z+13, r1	; 0x0d
	button8.rise_callback = 0;
    26f2:	12 86       	std	Z+10, r1	; 0x0a
    26f4:	11 86       	std	Z+9, r1	; 0x09
	
	button9.fall_callback = 0;
    26f6:	e9 e7       	ldi	r30, 0x79	; 121
    26f8:	f4 e0       	ldi	r31, 0x04	; 4
    26fa:	14 86       	std	Z+12, r1	; 0x0c
    26fc:	13 86       	std	Z+11, r1	; 0x0b
	button9.timer_callback = 0;
    26fe:	16 86       	std	Z+14, r1	; 0x0e
    2700:	15 86       	std	Z+13, r1	; 0x0d
	button9.rise_callback = 0;
    2702:	12 86       	std	Z+10, r1	; 0x0a
    2704:	11 86       	std	Z+9, r1	; 0x09
	
	button10.fall_callback = 0;
    2706:	e8 e8       	ldi	r30, 0x88	; 136
    2708:	f4 e0       	ldi	r31, 0x04	; 4
    270a:	14 86       	std	Z+12, r1	; 0x0c
    270c:	13 86       	std	Z+11, r1	; 0x0b
	button10.timer_callback = 0;
    270e:	16 86       	std	Z+14, r1	; 0x0e
    2710:	15 86       	std	Z+13, r1	; 0x0d
	button10.rise_callback = 0;
    2712:	12 86       	std	Z+10, r1	; 0x0a
    2714:	11 86       	std	Z+9, r1	; 0x09
    2716:	08 95       	ret

00002718 <button_motor_sub_timer_cb>:
/////////////////////////////////////////
//MOTOR SUB

void button_motor_sub_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2718:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	49 f0       	breq	.+18     	; 0x2732 <button_motor_sub_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2720:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2724:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2728:	98 60       	ori	r25, 0x08	; 8
    272a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    272e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    2732:	08 95       	ret

00002734 <button_motor_add_timer_cb>:

/////////////////////////////////////////
//MOTOR ADD
void button_motor_add_timer_cb(void * pv)
{
	if (state_measure_volt != 2)
    2734:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	49 f0       	breq	.+18     	; 0x274e <button_motor_add_timer_cb+0x1a>
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    273c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2740:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2744:	80 68       	ori	r24, 0x80	; 128
    2746:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    274a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    274e:	08 95       	ret

00002750 <b_servo_vibro_sub_timer>:

/////////////////////////////////////////
//SERVO VIBRO SUB
void b_servo_vibro_sub_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2750:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2754:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2758:	92 60       	ori	r25, 0x02	; 2
    275a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    275e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    2762:	08 95       	ret

00002764 <b_servo_vibro_sub_rise>:
}

void b_servo_vibro_sub_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
    2764:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2768:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    276c:	99 7f       	andi	r25, 0xF9	; 249
    276e:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2772:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	counter_very_fast_motor_sub = 0;
    2776:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <counter_very_fast_motor_sub>
    277a:	08 95       	ret

0000277c <b_servo_vibro_add_timer>:

/////////////////////////////////////////
//SERVO VIBRO ADD
void b_servo_vibro_add_timer(void * pv)
{
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    277c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2780:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2784:	80 62       	ori	r24, 0x20	; 32
    2786:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    278a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    278e:	08 95       	ret

00002790 <b_servo_vibro_add_rise>:
}

void b_servo_vibro_add_rise(void * pv)
{
	CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
    2790:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2794:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2798:	8f 79       	andi	r24, 0x9F	; 159
    279a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    279e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	counter_very_fast_motor_sub = 0;
    27a2:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <counter_very_fast_motor_sub>
    27a6:	08 95       	ret

000027a8 <b_servo_vibro_sub_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
}

void b_servo_vibro_sub_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    27a8:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    27ac:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    27b0:	90 62       	ori	r25, 0x20	; 32
    27b2:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    27b6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value > 10)
    27ba:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    27be:	8b 30       	cpi	r24, 0x0B	; 11
    27c0:	18 f0       	brcs	.+6      	; 0x27c8 <b_servo_vibro_sub_fall+0x20>
	servo_vibro_value--;
    27c2:	81 50       	subi	r24, 0x01	; 1
    27c4:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    27c8:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    27da:	08 95       	ret

000027dc <b_servo_vibro_add_fall>:
	SET_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
}

void b_servo_vibro_add_fall(void * pv)
{
	ON_BUZZ_SIGNAL;
    27dc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    27e0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    27e4:	90 62       	ori	r25, 0x20	; 32
    27e6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    27ea:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
		dip_set_value(DISP_SERVO, servo_vibro_value);
		disp_set_state(DISP_ALL, SEG_VALUE);
	}
	
	#else
	if (servo_vibro_value < 99)
    27ee:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    27f2:	83 36       	cpi	r24, 0x63	; 99
    27f4:	18 f4       	brcc	.+6      	; 0x27fc <b_servo_vibro_add_fall+0x20>
	servo_vibro_value++;
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <servo_vibro_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    27fc:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    280e:	08 95       	ret

00002810 <button_motor_sub_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
}

void button_motor_sub_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2810:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2814:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2818:	90 62       	ori	r25, 0x20	; 32
    281a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    281e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	if (motor_value > 10)
    2822:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <motor_value>
    2826:	8b 30       	cpi	r24, 0x0B	; 11
    2828:	18 f0       	brcs	.+6      	; 0x2830 <button_motor_sub_fall_cb+0x20>
		motor_value--;
    282a:	81 50       	subi	r24, 0x01	; 1
    282c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    2830:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	0e 94 47 09 	call	0x128e	; 0x128e <disp_get_state>
    2840:	02 97       	sbiw	r24, 0x02	; 2
    2842:	29 f4       	brne	.+10     	; 0x284e <button_motor_sub_fall_cb+0x3e>
		disp_set_state(DISP_ALL, SEG_VALUE);
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <button_motor_sub_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
	state_measure_volt++;
    2856:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <state_measure_volt>
	if (state_measure_volt == 2)
    2860:	82 30       	cpi	r24, 0x02	; 2
    2862:	19 f4       	brne	.+6      	; 0x286a <button_motor_sub_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    2864:	66 e0       	ldi	r22, 0x06	; 6
    2866:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    286a:	08 95       	ret

0000286c <button_motor_add_fall_cb>:
		SET_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
}

void button_motor_add_fall_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    286c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2870:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2874:	90 62       	ori	r25, 0x20	; 32
    2876:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    287a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	if (motor_value < 99)
    287e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <motor_value>
    2882:	83 36       	cpi	r24, 0x63	; 99
    2884:	18 f4       	brcc	.+6      	; 0x288c <button_motor_add_fall_cb+0x20>
		motor_value++;
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <motor_value>
	dip_set_value(DISP_MOTOR, motor_value);
    288c:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	0e 94 47 09 	call	0x128e	; 0x128e <disp_get_state>
    289c:	02 97       	sbiw	r24, 0x02	; 2
    289e:	29 f4       	brne	.+10     	; 0x28aa <button_motor_add_fall_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <button_motor_add_fall_cb+0x46>
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
	state_measure_volt++;
    28b2:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <state_measure_volt>
	if (state_measure_volt == 2)
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	19 f4       	brne	.+6      	; 0x28c6 <button_motor_add_fall_cb+0x5a>
	{
		disp_set_state(DISP_ALL, SEG_VOLTAGE);
    28c0:	66 e0       	ldi	r22, 0x06	; 6
    28c2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    28c6:	08 95       	ret

000028c8 <button_motor_sub_rise_cb>:
	}
}

void button_motor_sub_rise_cb(void * pv)
{
	disp_disable_voltage();
    28c8:	0e 94 57 09 	call	0x12ae	; 0x12ae <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
    28cc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    28d0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    28d4:	97 7e       	andi	r25, 0xE7	; 231
    28d6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    28da:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	counter_very_fast_motor_sub = 0;
    28de:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    28e2:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    28e6:	88 23       	and	r24, r24
    28e8:	19 f0       	breq	.+6      	; 0x28f0 <button_motor_sub_rise_cb+0x28>
		state_measure_volt--;
    28ea:	81 50       	subi	r24, 0x01	; 1
    28ec:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	0e 94 47 09 	call	0x128e	; 0x128e <disp_get_state>
    28f6:	02 97       	sbiw	r24, 0x02	; 2
    28f8:	29 f4       	brne	.+10     	; 0x2904 <button_motor_sub_rise_cb+0x3c>
	disp_set_state(DISP_ALL, SEG_VALUE);
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    2902:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    290c:	08 95       	ret

0000290e <button_motor_add_rise_cb>:
	}
}

void button_motor_add_rise_cb(void * pv)
{
	disp_disable_voltage();
    290e:	0e 94 57 09 	call	0x12ae	; 0x12ae <disp_disable_voltage>
	CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
	CLEAR_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
    2912:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2916:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    291a:	8f 77       	andi	r24, 0x7F	; 127
    291c:	9e 7f       	andi	r25, 0xFE	; 254
    291e:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2922:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	counter_very_fast_motor_sub = 0;
    2926:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <counter_very_fast_motor_sub>
	if (state_measure_volt != 0)
    292a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <state_measure_volt>
    292e:	88 23       	and	r24, r24
    2930:	19 f0       	breq	.+6      	; 0x2938 <button_motor_add_rise_cb+0x2a>
		state_measure_volt--;
    2932:	81 50       	subi	r24, 0x01	; 1
    2934:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <state_measure_volt>
	if (disp_get_state(DISP_MOTOR) == SEG_ANIMATION)
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	0e 94 47 09 	call	0x128e	; 0x128e <disp_get_state>
    293e:	02 97       	sbiw	r24, 0x02	; 2
    2940:	29 f4       	brne	.+10     	; 0x294c <button_motor_add_rise_cb+0x3e>
	disp_set_state(DISP_ALL, SEG_VALUE);
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    294a:	08 95       	ret
	else disp_set_state(DISP_MOTOR, SEG_VALUE);
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
    2954:	08 95       	ret

00002956 <sys_save_display>:
		motor_value = mem_last_save.first_disp_val;
}

static void sys_save_display(void)
{
	mem_save_prog.first_disp_val = motor_value;
    2956:	ea e4       	ldi	r30, 0x4A	; 74
    2958:	f5 e0       	ldi	r31, 0x05	; 5
    295a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <motor_value>
    295e:	80 83       	st	Z, r24
	mem_save_prog.second_disp_val = servo_vibro_value;
    2960:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    2964:	81 83       	std	Z+1, r24	; 0x01
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
    2966:	bf 01       	movw	r22, r30
    2968:	83 e0       	ldi	r24, 0x03	; 3
    296a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <mem_save_data>
    296e:	08 95       	ret

00002970 <button_dcmotor_cb>:
}


void button_dcmotor_cb(void * pv)
{
	ON_BUZZ_SIGNAL;
    2970:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2974:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2978:	90 62       	ori	r25, 0x20	; 32
    297a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    297e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	if (motor_value < 10)
    2982:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <motor_value>
    2986:	8a 30       	cpi	r24, 0x0A	; 10
    2988:	38 f4       	brcc	.+14     	; 0x2998 <button_dcmotor_cb+0x28>
	{
		motor_value = 10;
    298a:	8a e0       	ldi	r24, 0x0A	; 10
    298c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <motor_value>
		dip_set_value(DISP_MOTOR, motor_value);
    2990:	6a e0       	ldi	r22, 0x0A	; 10
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	}
	sys_save_display();
    2998:	0e 94 ab 14 	call	0x2956	; 0x2956 <sys_save_display>
	if(!dcmotor_is_on())
    299c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <dcmotor_is_on>
    29a0:	89 2b       	or	r24, r25
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <button_dcmotor_cb+0x42>
	{ 
		dcmotorpwm_start();
    29a4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <dcmotorpwm_start>
		#if CONFIG_DEVICE_SIEWNIK
		servo_delayed_open(servo_vibro_value);
    29a8:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    29ac:	0e 94 ef 11 	call	0x23de	; 0x23de <servo_delayed_open>
    29b0:	08 95       	ret
		#endif
	}
	else 
	{
		dcmotorpwm_stop();
    29b2:	0e 94 f5 06 	call	0xdea	; 0xdea <dcmotorpwm_stop>
		#if CONFIG_DEVICE_SIEWNIK
		servo_close();
    29b6:	0e 94 1a 12 	call	0x2434	; 0x2434 <servo_close>
    29ba:	08 95       	ret

000029bc <button_on_off_pwm>:
	}
}
#if CONFIG_DEVICE_SIEWNIK
void button_on_off_pwm(void * pv)
{
	ON_BUZZ_SIGNAL;
    29bc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    29c0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    29c4:	90 62       	ori	r25, 0x20	; 32
    29c6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    29ca:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
	if (servo_vibro_value < 10)
    29ce:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    29d2:	8a 30       	cpi	r24, 0x0A	; 10
    29d4:	38 f4       	brcc	.+14     	; 0x29e4 <button_on_off_pwm+0x28>
	{
		servo_vibro_value = 10;
    29d6:	8a e0       	ldi	r24, 0x0A	; 10
    29d8:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <servo_vibro_value>
		dip_set_value(DISP_SERVO, servo_vibro_value);
    29dc:	6a e0       	ldi	r22, 0x0A	; 10
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	}
	
	if (servo_is_open()) servo_close();
    29e4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <servo_is_open>
    29e8:	89 2b       	or	r24, r25
    29ea:	19 f0       	breq	.+6      	; 0x29f2 <button_on_off_pwm+0x36>
    29ec:	0e 94 1a 12 	call	0x2434	; 0x2434 <servo_close>
    29f0:	08 95       	ret
	else servo_open(servo_vibro_value);
    29f2:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <servo_vibro_value>
    29f6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <servo_open>
    29fa:	08 95       	ret

000029fc <init_system>:
	mem_save_data(MEM_LAST_DATA, &mem_save_prog);
}

void init_system(void)
{
	button4.rise_callback = button4_toggle_system;
    29fc:	83 ea       	ldi	r24, 0xA3	; 163
    29fe:	95 e1       	ldi	r25, 0x15	; 21
    2a00:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <button4+0xa>
    2a04:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <button4+0x9>
	disp_set_state(DISP_ALL,SEG_OFF);
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
mem_program mem_last_save;
mem_program mem_save_prog;

static void sys_read_display(void)
{
	mem_read_data(MEM_LAST_DATA, &mem_last_save);
    2a10:	68 e4       	ldi	r22, 0x48	; 72
    2a12:	75 e0       	ldi	r23, 0x05	; 5
    2a14:	83 e0       	ldi	r24, 0x03	; 3
    2a16:	0e 94 3a 11 	call	0x2274	; 0x2274 <mem_read_data>
	if (mem_last_save.second_disp_val >=10 && mem_last_save.second_disp_val < 100)
    2a1a:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <mem_last_save+0x1>
    2a1e:	96 ef       	ldi	r25, 0xF6	; 246
    2a20:	98 0f       	add	r25, r24
    2a22:	9a 35       	cpi	r25, 0x5A	; 90
    2a24:	10 f4       	brcc	.+4      	; 0x2a2a <init_system+0x2e>
		servo_vibro_value = mem_last_save.second_disp_val;
    2a26:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <servo_vibro_value>
	if (mem_last_save.first_disp_val >=10 && mem_last_save.first_disp_val < 100)
    2a2a:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <mem_last_save>
    2a2e:	96 ef       	ldi	r25, 0xF6	; 246
    2a30:	98 0f       	add	r25, r24
    2a32:	9a 35       	cpi	r25, 0x5A	; 90
    2a34:	10 f4       	brcc	.+4      	; 0x2a3a <init_system+0x3e>
		motor_value = mem_last_save.first_disp_val;
    2a36:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <motor_value>
    2a3a:	08 95       	ret

00002a3c <on_system>:
}


void on_system(void)
{
	state_measure_volt = 0;
    2a3c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <state_measure_volt>
	on_animation(ANIMATION_TIME_MS, DISP_ALL);
    2a40:	42 e0       	ldi	r20, 0x02	; 2
    2a42:	68 ee       	ldi	r22, 0xE8	; 232
    2a44:	73 e0       	ldi	r23, 0x03	; 3
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <on_animation>
	
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_init();
	#endif
	dcmotorpwm_init();
    2a4e:	0e 94 d0 06 	call	0xda0	; 0xda0 <dcmotorpwm_init>
	#if CONFIG_DEVICE_SIEWNIK
	servo_init(0);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	0e 94 b1 11 	call	0x2362	; 0x2362 <servo_init>
	#endif
	error_init();
    2a58:	0e 94 b3 0b 	call	0x1766	; 0x1766 <error_init>
	init_measure();
    2a5c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <init_measure>
	init_buzzer();
    2a60:	0e 94 10 05 	call	0xa20	; 0xa20 <init_buzzer>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2a6c:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
}


static void on_button(void)
{
 	button1.timer_callback = button_motor_sub_timer_cb;
    2a70:	e6 ee       	ldi	r30, 0xE6	; 230
    2a72:	f4 e0       	ldi	r31, 0x04	; 4
    2a74:	8c e8       	ldi	r24, 0x8C	; 140
    2a76:	93 e1       	ldi	r25, 0x13	; 19
    2a78:	96 87       	std	Z+14, r25	; 0x0e
    2a7a:	85 87       	std	Z+13, r24	; 0x0d
 	button1.fall_callback = button_motor_sub_fall_cb;
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	94 e1       	ldi	r25, 0x14	; 20
    2a80:	94 87       	std	Z+12, r25	; 0x0c
    2a82:	83 87       	std	Z+11, r24	; 0x0b
 	button1.rise_callback = button_motor_sub_rise_cb;
    2a84:	84 e6       	ldi	r24, 0x64	; 100
    2a86:	94 e1       	ldi	r25, 0x14	; 20
    2a88:	92 87       	std	Z+10, r25	; 0x0a
    2a8a:	81 87       	std	Z+9, r24	; 0x09
// 	
	button2.timer_callback = button_motor_add_timer_cb;
    2a8c:	e9 eb       	ldi	r30, 0xB9	; 185
    2a8e:	f4 e0       	ldi	r31, 0x04	; 4
    2a90:	8a e9       	ldi	r24, 0x9A	; 154
    2a92:	93 e1       	ldi	r25, 0x13	; 19
    2a94:	96 87       	std	Z+14, r25	; 0x0e
    2a96:	85 87       	std	Z+13, r24	; 0x0d
	button2.fall_callback = button_motor_add_fall_cb;
    2a98:	86 e3       	ldi	r24, 0x36	; 54
    2a9a:	94 e1       	ldi	r25, 0x14	; 20
    2a9c:	94 87       	std	Z+12, r25	; 0x0c
    2a9e:	83 87       	std	Z+11, r24	; 0x0b
	button2.rise_callback = button_motor_add_rise_cb;
    2aa0:	87 e8       	ldi	r24, 0x87	; 135
    2aa2:	94 e1       	ldi	r25, 0x14	; 20
    2aa4:	92 87       	std	Z+10, r25	; 0x0a
    2aa6:	81 87       	std	Z+9, r24	; 0x09
// 	
 	button3.fall_callback = button_dcmotor_cb;
    2aa8:	88 eb       	ldi	r24, 0xB8	; 184
    2aaa:	94 e1       	ldi	r25, 0x14	; 20
    2aac:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <button3+0xc>
    2ab0:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <button3+0xb>
// 		
	button5.timer_callback = b_servo_vibro_sub_timer;
    2ab4:	e7 e9       	ldi	r30, 0x97	; 151
    2ab6:	f4 e0       	ldi	r31, 0x04	; 4
    2ab8:	88 ea       	ldi	r24, 0xA8	; 168
    2aba:	93 e1       	ldi	r25, 0x13	; 19
    2abc:	96 87       	std	Z+14, r25	; 0x0e
    2abe:	85 87       	std	Z+13, r24	; 0x0d
	button5.rise_callback = b_servo_vibro_sub_rise;
    2ac0:	82 eb       	ldi	r24, 0xB2	; 178
    2ac2:	93 e1       	ldi	r25, 0x13	; 19
    2ac4:	92 87       	std	Z+10, r25	; 0x0a
    2ac6:	81 87       	std	Z+9, r24	; 0x09
	button5.fall_callback = b_servo_vibro_sub_fall;
    2ac8:	84 ed       	ldi	r24, 0xD4	; 212
    2aca:	93 e1       	ldi	r25, 0x13	; 19
    2acc:	94 87       	std	Z+12, r25	; 0x0c
    2ace:	83 87       	std	Z+11, r24	; 0x0b
	
	button6.timer_callback = b_servo_vibro_add_timer;
    2ad0:	e7 ed       	ldi	r30, 0xD7	; 215
    2ad2:	f4 e0       	ldi	r31, 0x04	; 4
    2ad4:	8e eb       	ldi	r24, 0xBE	; 190
    2ad6:	93 e1       	ldi	r25, 0x13	; 19
    2ad8:	96 87       	std	Z+14, r25	; 0x0e
    2ada:	85 87       	std	Z+13, r24	; 0x0d
	button6.rise_callback = b_servo_vibro_add_rise;
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	93 e1       	ldi	r25, 0x13	; 19
    2ae0:	92 87       	std	Z+10, r25	; 0x0a
    2ae2:	81 87       	std	Z+9, r24	; 0x09
	button6.fall_callback = b_servo_vibro_add_fall;
    2ae4:	8e ee       	ldi	r24, 0xEE	; 238
    2ae6:	93 e1       	ldi	r25, 0x13	; 19
    2ae8:	94 87       	std	Z+12, r25	; 0x0c
    2aea:	83 87       	std	Z+11, r24	; 0x0b
// 	
	#if CONFIG_DEVICE_SIEWNIK
 	button7.fall_callback = button_on_off_pwm;
    2aec:	8e ed       	ldi	r24, 0xDE	; 222
    2aee:	94 e1       	ldi	r25, 0x14	; 20
    2af0:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <button7+0xc>
    2af4:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <button7+0xb>
	system_events = 0;
	SET_PIN(system_events, EV_SYSTEM_STATE);
	on_button();
	#if DARK_MENU
	#endif
	dip_set_value(DISP_MOTOR, motor_value);
    2af8:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
	dip_set_value(DISP_SERVO, servo_vibro_value);
    2b02:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
    2b0c:	08 95       	ret

00002b0e <off_system>:
	//debug_msg("SYS: On system\n");
}

void off_system(void)
{
	state_measure_volt = 0;
    2b0e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <state_measure_volt>
	dcmotorpwm_deinit();
    2b12:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <dcmotorpwm_deinit>
	off_button();
    2b16:	0e 94 4b 13 	call	0x2696	; 0x2696 <off_button>
	error_deinit();
    2b1a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <error_deinit>
	#if CONFIG_DEVICE_SIEWNIK
	servo_close();
    2b1e:	0e 94 1a 12 	call	0x2434	; 0x2434 <servo_close>
	#endif
	#if CONFIG_DEVICE_SOLARKA
	vibro_deInit();
	#endif
	system_events = 0;
    2b22:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <system_events+0x1>
    2b26:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <system_events>
	disp_set_state(DISP_ALL,SEG_OFF);
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <disp_set_state>
	CLEAR_PIN(system_events, EV_SYSTEM_STATE);
    2b32:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2b36:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2b3a:	8e 7f       	andi	r24, 0xFE	; 254
    2b3c:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2b40:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    2b44:	08 95       	ret

00002b46 <button4_toggle_system>:
}
#endif

void button4_toggle_system(void *pv)
{
	sys_save_display();
    2b46:	0e 94 ab 14 	call	0x2956	; 0x2956 <sys_save_display>
	if (system_events&(1<<EV_SYSTEM_STATE))
    2b4a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2b4e:	80 ff       	sbrs	r24, 0
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <button4_toggle_system+0x12>
	{
		off_system();
    2b52:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <off_system>
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <button4_toggle_system+0x16>
	}
	else
	{
		on_system();
    2b58:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <on_system>
	}
	ON_BUZZ_SIGNAL;
    2b5c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2b60:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2b64:	90 62       	ori	r25, 0x20	; 32
    2b66:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2b6a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
    2b6e:	08 95       	ret

00002b70 <disp_fast_process>:


void disp_fast_process(void)
{
	static timer_t disp_fast_timer;
	if (disp_fast_timer < mktime.ms)
    2b70:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    2b74:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    2b78:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    2b7c:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    2b80:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <disp_fast_timer.2077>
    2b84:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <disp_fast_timer.2077+0x1>
    2b88:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <disp_fast_timer.2077+0x2>
    2b8c:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <disp_fast_timer.2077+0x3>
    2b90:	84 17       	cp	r24, r20
    2b92:	95 07       	cpc	r25, r21
    2b94:	a6 07       	cpc	r26, r22
    2b96:	b7 07       	cpc	r27, r23
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <disp_fast_process+0x2c>
    2b9a:	9c c0       	rjmp	.+312    	; 0x2cd4 <disp_fast_process+0x164>
	{
		if (system_events&(1<<EV_SERVO_DISP_FAST_ADD) && servo_vibro_value < 99)
    2b9c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2ba0:	85 ff       	sbrs	r24, 5
    2ba2:	1d c0       	rjmp	.+58     	; 0x2bde <disp_fast_process+0x6e>
    2ba4:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2ba8:	63 36       	cpi	r22, 0x63	; 99
    2baa:	c8 f4       	brcc	.+50     	; 0x2bde <disp_fast_process+0x6e>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2bac:	6f 5f       	subi	r22, 0xFF	; 255
    2bae:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <servo_vibro_value>
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			#endif
			counter_very_fast_servo_add++;
    2bb8:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <counter_very_fast_servo_add>
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <counter_very_fast_servo_add>
			if (counter_very_fast_servo_add >= VERY_FAST_COUNTER_OVF)
    2bc2:	8f 30       	cpi	r24, 0x0F	; 15
    2bc4:	60 f0       	brcs	.+24     	; 0x2bde <disp_fast_process+0x6e>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_ADD);
    2bc6:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2bca:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2bce:	8f 7d       	andi	r24, 0xDF	; 223
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2bd6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
				counter_very_fast_servo_add = 0;
    2bda:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <counter_very_fast_servo_add>
			}
		}
		if (system_events&(1<<EV_SERVO_DISP_FAST_SUB) && servo_vibro_value > 0)
    2bde:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2be2:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2be6:	91 ff       	sbrs	r25, 1
    2be8:	1d c0       	rjmp	.+58     	; 0x2c24 <disp_fast_process+0xb4>
    2bea:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2bee:	66 23       	and	r22, r22
    2bf0:	c9 f0       	breq	.+50     	; 0x2c24 <disp_fast_process+0xb4>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2bf2:	61 50       	subi	r22, 0x01	; 1
    2bf4:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <servo_vibro_value>
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			#endif
			counter_very_fast_servo_sub++;
    2bfe:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <counter_very_fast_servo_sub>
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <counter_very_fast_servo_sub>
			if (counter_very_fast_servo_sub >= VERY_FAST_COUNTER_OVF)
    2c08:	8f 30       	cpi	r24, 0x0F	; 15
    2c0a:	60 f0       	brcs	.+24     	; 0x2c24 <disp_fast_process+0xb4>
			{
				SET_PIN(system_events, EV_SERVO_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_SERVO_DISP_FAST_SUB);
    2c0c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2c10:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2c14:	9d 7f       	andi	r25, 0xFD	; 253
    2c16:	94 60       	ori	r25, 0x04	; 4
    2c18:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2c1c:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
				counter_very_fast_servo_sub = 0;
    2c20:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <counter_very_fast_servo_sub>
			}
		}
		
		if (system_events&(1<<EV_MOTOR_DISP_FAST_ADD) && motor_value < 99)
    2c24:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2c28:	87 ff       	sbrs	r24, 7
    2c2a:	1d c0       	rjmp	.+58     	; 0x2c66 <disp_fast_process+0xf6>
    2c2c:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2c30:	63 36       	cpi	r22, 0x63	; 99
    2c32:	c8 f4       	brcc	.+50     	; 0x2c66 <disp_fast_process+0xf6>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, ++motor_value);
    2c34:	6f 5f       	subi	r22, 0xFF	; 255
    2c36:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <motor_value>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			counter_very_fast_motor_add++;
    2c40:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <counter_very_fast_motor_add>
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <counter_very_fast_motor_add>
			if (counter_very_fast_motor_add >= VERY_FAST_COUNTER_OVF)
    2c4a:	8f 30       	cpi	r24, 0x0F	; 15
    2c4c:	60 f0       	brcs	.+24     	; 0x2c66 <disp_fast_process+0xf6>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_ADD);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_ADD);
    2c4e:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2c52:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2c56:	8f 77       	andi	r24, 0x7F	; 127
    2c58:	91 60       	ori	r25, 0x01	; 1
    2c5a:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2c5e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
				counter_very_fast_motor_add = 0;
    2c62:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <counter_very_fast_motor_add>
			}
		}
		if (system_events&(1<<EV_MOTOR_DISP_FAST_SUB) && motor_value > 10)
    2c66:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2c6a:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2c6e:	93 ff       	sbrs	r25, 3
    2c70:	1d c0       	rjmp	.+58     	; 0x2cac <disp_fast_process+0x13c>
    2c72:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2c76:	6b 30       	cpi	r22, 0x0B	; 11
    2c78:	c8 f0       	brcs	.+50     	; 0x2cac <disp_fast_process+0x13c>
		{
			///////////////////////////////////////
			/// opoznienie eroru serwa
			dip_set_value(DISP_MOTOR, --motor_value);
    2c7a:	61 50       	subi	r22, 0x01	; 1
    2c7c:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <motor_value>
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			counter_very_fast_motor_sub++;
    2c86:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <counter_very_fast_motor_sub>
    2c8a:	8f 5f       	subi	r24, 0xFF	; 255
    2c8c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <counter_very_fast_motor_sub>
			if (counter_very_fast_motor_sub >= VERY_FAST_COUNTER_OVF)
    2c90:	8f 30       	cpi	r24, 0x0F	; 15
    2c92:	60 f0       	brcs	.+24     	; 0x2cac <disp_fast_process+0x13c>
			{
				SET_PIN(system_events, EV_MOTOR_DISP_VERY_FAST_SUB);
				CLEAR_PIN(system_events, EV_MOTOR_DISP_FAST_SUB);
    2c94:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2c98:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2c9c:	97 7f       	andi	r25, 0xF7	; 247
    2c9e:	90 61       	ori	r25, 0x10	; 16
    2ca0:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <system_events+0x1>
    2ca4:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <system_events>
				counter_very_fast_motor_sub = 0;
    2ca8:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <counter_very_fast_motor_sub>
			}
		}
		disp_fast_timer += 80;
    2cac:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <disp_fast_timer.2077>
    2cb0:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <disp_fast_timer.2077+0x1>
    2cb4:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <disp_fast_timer.2077+0x2>
    2cb8:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <disp_fast_timer.2077+0x3>
    2cbc:	80 5b       	subi	r24, 0xB0	; 176
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	af 4f       	sbci	r26, 0xFF	; 255
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <disp_fast_timer.2077>
    2cc8:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <disp_fast_timer.2077+0x1>
    2ccc:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <disp_fast_timer.2077+0x2>
    2cd0:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <disp_fast_timer.2077+0x3>
    2cd4:	08 95       	ret

00002cd6 <disp_very_fast_process>:

static timer_t disp_very_fast_timer;

void disp_very_fast_process(void)
{
	if (disp_very_fast_timer < mktime.ms)
    2cd6:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <mktime+0x2>
    2cda:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <mktime+0x3>
    2cde:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <mktime+0x4>
    2ce2:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <mktime+0x5>
    2ce6:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <disp_very_fast_timer>
    2cea:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <disp_very_fast_timer+0x1>
    2cee:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <disp_very_fast_timer+0x2>
    2cf2:	b0 91 a8 03 	lds	r27, 0x03A8	; 0x8003a8 <disp_very_fast_timer+0x3>
    2cf6:	84 17       	cp	r24, r20
    2cf8:	95 07       	cpc	r25, r21
    2cfa:	a6 07       	cpc	r26, r22
    2cfc:	b7 07       	cpc	r27, r23
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <disp_very_fast_process+0x2c>
    2d00:	51 c0       	rjmp	.+162    	; 0x2da4 <disp_very_fast_process+0xce>
	{
		if (servo_vibro_value < 99 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_ADD))
    2d02:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2d06:	63 36       	cpi	r22, 0x63	; 99
    2d08:	50 f4       	brcc	.+20     	; 0x2d1e <disp_very_fast_process+0x48>
    2d0a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2d0e:	86 ff       	sbrs	r24, 6
    2d10:	06 c0       	rjmp	.+12     	; 0x2d1e <disp_very_fast_process+0x48>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, ++servo_vibro_value);
    2d12:	6f 5f       	subi	r22, 0xFF	; 255
    2d14:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <servo_vibro_value>
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			#endif
		}
		if (servo_vibro_value > 0 && system_events&(1<<EV_SERVO_DISP_VERY_FAST_SUB))
    2d1e:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <servo_vibro_value>
    2d22:	66 23       	and	r22, r22
    2d24:	61 f0       	breq	.+24     	; 0x2d3e <disp_very_fast_process+0x68>
    2d26:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2d2a:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2d2e:	92 ff       	sbrs	r25, 2
    2d30:	06 c0       	rjmp	.+12     	; 0x2d3e <disp_very_fast_process+0x68>
				dip_set_value(DISP_SERVO, servo_vibro_value);
				disp_set_state(DISP_ALL, SEG_VALUE);
			}
			
			#else
			dip_set_value(DISP_SERVO, --servo_vibro_value);
    2d32:	61 50       	subi	r22, 0x01	; 1
    2d34:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <servo_vibro_value>
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
			#endif
		}
		
		if (motor_value < 99 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_ADD))
    2d3e:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2d42:	63 36       	cpi	r22, 0x63	; 99
    2d44:	60 f4       	brcc	.+24     	; 0x2d5e <disp_very_fast_process+0x88>
    2d46:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2d4a:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2d4e:	90 ff       	sbrs	r25, 0
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <disp_very_fast_process+0x88>
		{
			//ON_BUZZ_SIGNAL;
			dip_set_value(DISP_MOTOR,++motor_value);
    2d52:	6f 5f       	subi	r22, 0xFF	; 255
    2d54:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <motor_value>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
		}
		if (motor_value > 0 && system_events&(1<<EV_MOTOR_DISP_VERY_FAST_SUB))
    2d5e:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <motor_value>
    2d62:	6b 30       	cpi	r22, 0x0B	; 11
    2d64:	60 f0       	brcs	.+24     	; 0x2d7e <disp_very_fast_process+0xa8>
    2d66:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <system_events>
    2d6a:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <system_events+0x1>
    2d6e:	94 ff       	sbrs	r25, 4
    2d70:	06 c0       	rjmp	.+12     	; 0x2d7e <disp_very_fast_process+0xa8>
		{
			//ON_BUZZ_SIGNAL;
			if (motor_value > 10)
			dip_set_value(DISP_MOTOR,--motor_value);
    2d72:	61 50       	subi	r22, 0x01	; 1
    2d74:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <motor_value>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	0e 94 36 09 	call	0x126c	; 0x126c <dip_set_value>
		}
		disp_very_fast_timer += 30;
    2d7e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <disp_very_fast_timer>
    2d82:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <disp_very_fast_timer+0x1>
    2d86:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <disp_very_fast_timer+0x2>
    2d8a:	b0 91 a8 03 	lds	r27, 0x03A8	; 0x8003a8 <disp_very_fast_timer+0x3>
    2d8e:	4e 96       	adiw	r24, 0x1e	; 30
    2d90:	a1 1d       	adc	r26, r1
    2d92:	b1 1d       	adc	r27, r1
    2d94:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <disp_very_fast_timer>
    2d98:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <disp_very_fast_timer+0x1>
    2d9c:	a0 93 a7 03 	sts	0x03A7, r26	; 0x8003a7 <disp_very_fast_timer+0x2>
    2da0:	b0 93 a8 03 	sts	0x03A8, r27	; 0x8003a8 <disp_very_fast_timer+0x3>
    2da4:	08 95       	ret

00002da6 <system_error>:
}


void system_error(void)
{
	off_button();
    2da6:	0e 94 4b 13 	call	0x2696	; 0x2696 <off_button>
    2daa:	08 95       	ret

00002dac <__vector_10>:
	int time_to_end;
	if (evt->timer > mktime.ms)
		time_to_end = evt->timer - mktime.ms;
	else time_to_end = 0;
	return time_to_end;
}
    2dac:	1f 92       	push	r1
    2dae:	0f 92       	push	r0
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	0f 92       	push	r0
    2db4:	11 24       	eor	r1, r1
    2db6:	2f 93       	push	r18
    2db8:	3f 93       	push	r19
    2dba:	4f 93       	push	r20
    2dbc:	5f 93       	push	r21
    2dbe:	6f 93       	push	r22
    2dc0:	7f 93       	push	r23
    2dc2:	8f 93       	push	r24
    2dc4:	9f 93       	push	r25
    2dc6:	af 93       	push	r26
    2dc8:	bf 93       	push	r27
    2dca:	ef 93       	push	r30
    2dcc:	ff 93       	push	r31
    2dce:	ec e4       	ldi	r30, 0x4C	; 76
    2dd0:	f5 e0       	ldi	r31, 0x05	; 5
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	c2 96       	adiw	r24, 0x32	; 50
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	80 83       	st	Z, r24
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	88 3e       	cpi	r24, 0xE8	; 232
    2de2:	93 40       	sbci	r25, 0x03	; 3
    2de4:	88 f0       	brcs	.+34     	; 0x2e08 <__vector_10+0x5c>
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	a4 81       	ldd	r26, Z+4	; 0x04
    2dec:	b5 81       	ldd	r27, Z+5	; 0x05
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	a1 1d       	adc	r26, r1
    2df2:	b1 1d       	adc	r27, r1
    2df4:	82 83       	std	Z+2, r24	; 0x02
    2df6:	93 83       	std	Z+3, r25	; 0x03
    2df8:	a4 83       	std	Z+4, r26	; 0x04
    2dfa:	b5 83       	std	Z+5, r27	; 0x05
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	88 5e       	subi	r24, 0xE8	; 232
    2e02:	93 40       	sbci	r25, 0x03	; 3
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	8e ea       	ldi	r24, 0xAE	; 174
    2e0a:	93 e0       	ldi	r25, 0x03	; 3
    2e0c:	0e 94 c6 08 	call	0x118c	; 0x118c <display_process>
    2e10:	ff 91       	pop	r31
    2e12:	ef 91       	pop	r30
    2e14:	bf 91       	pop	r27
    2e16:	af 91       	pop	r26
    2e18:	9f 91       	pop	r25
    2e1a:	8f 91       	pop	r24
    2e1c:	7f 91       	pop	r23
    2e1e:	6f 91       	pop	r22
    2e20:	5f 91       	pop	r21
    2e22:	4f 91       	pop	r20
    2e24:	3f 91       	pop	r19
    2e26:	2f 91       	pop	r18
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <timer0_init>:
    2e32:	93 b7       	in	r25, 0x33	; 51
    2e34:	98 60       	ori	r25, 0x08	; 8
    2e36:	93 bf       	out	0x33, r25	; 51
    2e38:	6c bf       	out	0x3c, r22	; 60
    2e3a:	82 30       	cpi	r24, 0x02	; 2
    2e3c:	99 f0       	breq	.+38     	; 0x2e64 <timer0_init+0x32>
    2e3e:	28 f4       	brcc	.+10     	; 0x2e4a <timer0_init+0x18>
    2e40:	88 23       	and	r24, r24
    2e42:	41 f0       	breq	.+16     	; 0x2e54 <timer0_init+0x22>
    2e44:	81 30       	cpi	r24, 0x01	; 1
    2e46:	51 f0       	breq	.+20     	; 0x2e5c <timer0_init+0x2a>
    2e48:	19 c0       	rjmp	.+50     	; 0x2e7c <timer0_init+0x4a>
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	79 f0       	breq	.+30     	; 0x2e6c <timer0_init+0x3a>
    2e4e:	84 30       	cpi	r24, 0x04	; 4
    2e50:	89 f0       	breq	.+34     	; 0x2e74 <timer0_init+0x42>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <timer0_init+0x4a>
    2e54:	83 b7       	in	r24, 0x33	; 51
    2e56:	81 60       	ori	r24, 0x01	; 1
    2e58:	83 bf       	out	0x33, r24	; 51
    2e5a:	13 c0       	rjmp	.+38     	; 0x2e82 <timer0_init+0x50>
    2e5c:	83 b7       	in	r24, 0x33	; 51
    2e5e:	82 60       	ori	r24, 0x02	; 2
    2e60:	83 bf       	out	0x33, r24	; 51
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <timer0_init+0x50>
    2e64:	83 b7       	in	r24, 0x33	; 51
    2e66:	83 60       	ori	r24, 0x03	; 3
    2e68:	83 bf       	out	0x33, r24	; 51
    2e6a:	0b c0       	rjmp	.+22     	; 0x2e82 <timer0_init+0x50>
    2e6c:	83 b7       	in	r24, 0x33	; 51
    2e6e:	84 60       	ori	r24, 0x04	; 4
    2e70:	83 bf       	out	0x33, r24	; 51
    2e72:	07 c0       	rjmp	.+14     	; 0x2e82 <timer0_init+0x50>
    2e74:	83 b7       	in	r24, 0x33	; 51
    2e76:	85 60       	ori	r24, 0x05	; 5
    2e78:	83 bf       	out	0x33, r24	; 51
    2e7a:	03 c0       	rjmp	.+6      	; 0x2e82 <timer0_init+0x50>
    2e7c:	83 b7       	in	r24, 0x33	; 51
    2e7e:	81 60       	ori	r24, 0x01	; 1
    2e80:	83 bf       	out	0x33, r24	; 51
    2e82:	89 b7       	in	r24, 0x39	; 57
    2e84:	82 60       	ori	r24, 0x02	; 2
    2e86:	89 bf       	out	0x39, r24	; 57
    2e88:	08 95       	ret

00002e8a <evTime_init>:
    2e8a:	23 e0       	ldi	r18, 0x03	; 3
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	24 83       	std	Z+4, r18	; 0x04
    2e90:	10 82       	st	Z, r1
    2e92:	11 82       	std	Z+1, r1	; 0x01
    2e94:	12 82       	std	Z+2, r1	; 0x02
    2e96:	13 82       	std	Z+3, r1	; 0x03
    2e98:	08 95       	ret

00002e9a <evTime_start>:
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	21 e0       	ldi	r18, 0x01	; 1
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	24 83       	std	Z+4, r18	; 0x04
    2ea4:	00 91 4e 05 	lds	r16, 0x054E	; 0x80054e <mktime+0x2>
    2ea8:	10 91 4f 05 	lds	r17, 0x054F	; 0x80054f <mktime+0x3>
    2eac:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <mktime+0x4>
    2eb0:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <mktime+0x5>
    2eb4:	40 0f       	add	r20, r16
    2eb6:	51 1f       	adc	r21, r17
    2eb8:	62 1f       	adc	r22, r18
    2eba:	73 1f       	adc	r23, r19
    2ebc:	40 83       	st	Z, r20
    2ebe:	51 83       	std	Z+1, r21	; 0x01
    2ec0:	62 83       	std	Z+2, r22	; 0x02
    2ec2:	73 83       	std	Z+3, r23	; 0x03
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <evTime_is_stated>:
    2eca:	21 e0       	ldi	r18, 0x01	; 1
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	fc 01       	movw	r30, r24
    2ed0:	84 81       	ldd	r24, Z+4	; 0x04
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	11 f0       	breq	.+4      	; 0x2eda <evTime_is_stated+0x10>
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	c9 01       	movw	r24, r18
    2edc:	08 95       	ret

00002ede <evTime_check>:

int evTime_check(evTime * evt)
{
    2ede:	fc 01       	movw	r30, r24
	if (evt->time_state == TIMER_START)
    2ee0:	84 81       	ldd	r24, Z+4	; 0x04
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	b1 f4       	brne	.+44     	; 0x2f12 <evTime_check+0x34>
	{
		if (evt->timer < mktime.ms) 
    2ee6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <mktime+0x2>
    2eea:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <mktime+0x3>
    2eee:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <mktime+0x4>
    2ef2:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <mktime+0x5>
    2ef6:	40 81       	ld	r20, Z
    2ef8:	51 81       	ldd	r21, Z+1	; 0x01
    2efa:	62 81       	ldd	r22, Z+2	; 0x02
    2efc:	73 81       	ldd	r23, Z+3	; 0x03
    2efe:	48 17       	cp	r20, r24
    2f00:	59 07       	cpc	r21, r25
    2f02:	6a 07       	cpc	r22, r26
    2f04:	7b 07       	cpc	r23, r27
    2f06:	40 f4       	brcc	.+16     	; 0x2f18 <evTime_check+0x3a>
		{
			evt->time_state = TIMER_END;
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	84 83       	std	Z+4, r24	; 0x04
			return 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	08 95       	ret
		}
		else return 0;
	}
	else return -1;
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
    2f14:	9f ef       	ldi	r25, 0xFF	; 255
    2f16:	08 95       	ret
		if (evt->timer < mktime.ms) 
		{
			evt->time_state = TIMER_END;
			return 1;
		}
		else return 0;
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else return -1;
}
    2f1c:	08 95       	ret

00002f1e <evTime_off>:

int evTime_off(evTime * evt)
{
	return evt->time_state == TIMER_OFF;
    2f1e:	21 e0       	ldi	r18, 0x01	; 1
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	fc 01       	movw	r30, r24
    2f24:	84 81       	ldd	r24, Z+4	; 0x04
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	11 f0       	breq	.+4      	; 0x2f2e <evTime_off+0x10>
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
}
    2f2e:	c9 01       	movw	r24, r18
    2f30:	08 95       	ret

00002f32 <evTime_process_period>:

int evTime_process_period(evTime * timer, uint32_t period)
{
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	ec 01       	movw	r28, r24
    2f44:	6a 01       	movw	r12, r20
    2f46:	7b 01       	movw	r14, r22
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
    2f48:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <evTime_process_period+0x28>
	#endif
}

void evTime_init(evTime * evt)
{
	evt->time_state = TIMER_OFF;
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	8c 83       	std	Y+4, r24	; 0x04
	evt->timer = 0;
    2f52:	18 82       	st	Y, r1
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	1a 82       	std	Y+2, r1	; 0x02
    2f58:	1b 82       	std	Y+3, r1	; 0x03

int evTime_process_period(evTime * timer, uint32_t period)
{
	static int ret_val;
	if (timer->time_state == TIMER_NO_INIT) evTime_init(timer);
	ret_val = evTime_check(timer);
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <evTime_check>
    2f60:	8c 01       	movw	r16, r24
	if (ret_val == 1)
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	31 f4       	brne	.+12     	; 0x2f72 <evTime_process_period+0x40>
	{
		evTime_start(timer, period);
    2f66:	b7 01       	movw	r22, r14
    2f68:	a6 01       	movw	r20, r12
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
		return 1;
    2f70:	0d c0       	rjmp	.+26     	; 0x2f8c <evTime_process_period+0x5a>
	}
	else if (evTime_off(timer))
    2f72:	8c 81       	ldd	r24, Y+4	; 0x04
    2f74:	83 30       	cpi	r24, 0x03	; 3
    2f76:	41 f4       	brne	.+16     	; 0x2f88 <evTime_process_period+0x56>
	{
		evTime_start(timer, period);
    2f78:	b7 01       	movw	r22, r14
    2f7a:	a6 01       	movw	r20, r12
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <evTime_start>
	}
	return 0;
    2f82:	00 e0       	ldi	r16, 0x00	; 0
    2f84:	10 e0       	ldi	r17, 0x00	; 0
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <evTime_process_period+0x5a>
    2f88:	00 e0       	ldi	r16, 0x00	; 0
    2f8a:	10 e0       	ldi	r17, 0x00	; 0
}
    2f8c:	c8 01       	movw	r24, r16
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	08 95       	ret

00002fa0 <__vector_13>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	8f 93       	push	r24
    2fb4:	9f 93       	push	r25
    2fb6:	ef 93       	push	r30
    2fb8:	ff 93       	push	r31
    2fba:	2b b1       	in	r18, 0x0b	; 11
    2fbc:	3c b1       	in	r19, 0x0c	; 12
    2fbe:	28 71       	andi	r18, 0x18	; 24
    2fc0:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <UART_RxHead>
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	40 91 b1 03 	lds	r20, 0x03B1	; 0x8003b1 <UART_RxTail>
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	84 17       	cp	r24, r20
    2fd0:	95 07       	cpc	r25, r21
    2fd2:	39 f0       	breq	.+14     	; 0x2fe2 <__vector_13+0x42>
    2fd4:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <UART_RxHead>
    2fd8:	fc 01       	movw	r30, r24
    2fda:	eb 54       	subi	r30, 0x4B	; 75
    2fdc:	fc 4f       	sbci	r31, 0xFC	; 252
    2fde:	30 83       	st	Z, r19
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <__vector_13+0x44>
    2fe2:	22 e0       	ldi	r18, 0x02	; 2
    2fe4:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <UART_LastRxError>
    2fe8:	ff 91       	pop	r31
    2fea:	ef 91       	pop	r30
    2fec:	9f 91       	pop	r25
    2fee:	8f 91       	pop	r24
    2ff0:	5f 91       	pop	r21
    2ff2:	4f 91       	pop	r20
    2ff4:	3f 91       	pop	r19
    2ff6:	2f 91       	pop	r18
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_14>:
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	8f 93       	push	r24
    300e:	9f 93       	push	r25
    3010:	ef 93       	push	r30
    3012:	ff 93       	push	r31
    3014:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <UART_TxHead>
    3018:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <UART_TxTail>
    301c:	98 17       	cp	r25, r24
    301e:	71 f0       	breq	.+28     	; 0x303c <__vector_14+0x3a>
    3020:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <UART_TxTail>
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	8f 77       	andi	r24, 0x7F	; 127
    302a:	99 27       	eor	r25, r25
    302c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <UART_TxTail>
    3030:	fc 01       	movw	r30, r24
    3032:	eb 54       	subi	r30, 0x4B	; 75
    3034:	fc 4f       	sbci	r31, 0xFC	; 252
    3036:	80 81       	ld	r24, Z
    3038:	8c b9       	out	0x0c, r24	; 12
    303a:	01 c0       	rjmp	.+2      	; 0x303e <__vector_14+0x3c>
    303c:	55 98       	cbi	0x0a, 5	; 10
    303e:	ff 91       	pop	r31
    3040:	ef 91       	pop	r30
    3042:	9f 91       	pop	r25
    3044:	8f 91       	pop	r24
    3046:	0f 90       	pop	r0
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	0f 90       	pop	r0
    304c:	1f 90       	pop	r1
    304e:	18 95       	reti

00003050 <uart0_init>:
    3050:	f8 94       	cli
    3052:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <UART_TxHead>
    3056:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <UART_TxTail>
    305a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <UART_RxHead>
    305e:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <UART_RxTail>
    3062:	78 94       	sei
    3064:	99 23       	and	r25, r25
    3066:	1c f4       	brge	.+6      	; 0x306e <uart0_init+0x1e>
    3068:	22 e0       	ldi	r18, 0x02	; 2
    306a:	2b b9       	out	0x0b, r18	; 11
    306c:	9f 77       	andi	r25, 0x7F	; 127
    306e:	90 bd       	out	0x20, r25	; 32
    3070:	89 b9       	out	0x09, r24	; 9
    3072:	88 e9       	ldi	r24, 0x98	; 152
    3074:	8a b9       	out	0x0a, r24	; 10
    3076:	86 e8       	ldi	r24, 0x86	; 134
    3078:	80 bd       	out	0x20, r24	; 32
    307a:	08 95       	ret

0000307c <uart0_putc>:
		}
	} while (tmphead == txtail_tmp); /* wait for free space in buffer */
#else
	uint16_t tmphead;
	
	tmphead = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    307c:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <UART_TxHead>
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	4f 5f       	subi	r20, 0xFF	; 255
    3084:	5f 4f       	sbci	r21, 0xFF	; 255
    3086:	4f 77       	andi	r20, 0x7F	; 127
    3088:	55 27       	eor	r21, r21
	
	while (tmphead == UART_TxTail); /* wait for free space in buffer */
    308a:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <UART_TxTail>
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	42 17       	cp	r20, r18
    3092:	53 07       	cpc	r21, r19
    3094:	d1 f3       	breq	.-12     	; 0x308a <uart0_putc+0xe>
#endif

	UART_TxBuf[tmphead] = data;
    3096:	fa 01       	movw	r30, r20
    3098:	eb 54       	subi	r30, 0x4B	; 75
    309a:	fc 4f       	sbci	r31, 0xFC	; 252
    309c:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    309e:	40 93 b4 03 	sts	0x03B4, r20	; 0x8003b4 <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
    30a2:	55 9a       	sbi	0x0a, 5	; 10
    30a4:	08 95       	ret

000030a6 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	ec 01       	movw	r28, r24
	while (*s) {
    30ac:	88 81       	ld	r24, Y
    30ae:	88 23       	and	r24, r24
    30b0:	31 f0       	breq	.+12     	; 0x30be <uart0_puts+0x18>
    30b2:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
    30b4:	0e 94 3e 18 	call	0x307c	; 0x307c <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s)
{
	while (*s) {
    30b8:	89 91       	ld	r24, Y+
    30ba:	81 11       	cpse	r24, r1
    30bc:	fb cf       	rjmp	.-10     	; 0x30b4 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <__subsf3>:
    30c4:	50 58       	subi	r21, 0x80	; 128

000030c6 <__addsf3>:
    30c6:	bb 27       	eor	r27, r27
    30c8:	aa 27       	eor	r26, r26
    30ca:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__addsf3x>
    30ce:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__fp_round>
    30d2:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__fp_pscA>
    30d6:	38 f0       	brcs	.+14     	; 0x30e6 <__addsf3+0x20>
    30d8:	0e 94 ed 19 	call	0x33da	; 0x33da <__fp_pscB>
    30dc:	20 f0       	brcs	.+8      	; 0x30e6 <__addsf3+0x20>
    30de:	39 f4       	brne	.+14     	; 0x30ee <__addsf3+0x28>
    30e0:	9f 3f       	cpi	r25, 0xFF	; 255
    30e2:	19 f4       	brne	.+6      	; 0x30ea <__addsf3+0x24>
    30e4:	26 f4       	brtc	.+8      	; 0x30ee <__addsf3+0x28>
    30e6:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_nan>
    30ea:	0e f4       	brtc	.+2      	; 0x30ee <__addsf3+0x28>
    30ec:	e0 95       	com	r30
    30ee:	e7 fb       	bst	r30, 7
    30f0:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__fp_inf>

000030f4 <__addsf3x>:
    30f4:	e9 2f       	mov	r30, r25
    30f6:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_split3>
    30fa:	58 f3       	brcs	.-42     	; 0x30d2 <__addsf3+0xc>
    30fc:	ba 17       	cp	r27, r26
    30fe:	62 07       	cpc	r22, r18
    3100:	73 07       	cpc	r23, r19
    3102:	84 07       	cpc	r24, r20
    3104:	95 07       	cpc	r25, r21
    3106:	20 f0       	brcs	.+8      	; 0x3110 <__addsf3x+0x1c>
    3108:	79 f4       	brne	.+30     	; 0x3128 <__addsf3x+0x34>
    310a:	a6 f5       	brtc	.+104    	; 0x3174 <__addsf3x+0x80>
    310c:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_zero>
    3110:	0e f4       	brtc	.+2      	; 0x3114 <__addsf3x+0x20>
    3112:	e0 95       	com	r30
    3114:	0b 2e       	mov	r0, r27
    3116:	ba 2f       	mov	r27, r26
    3118:	a0 2d       	mov	r26, r0
    311a:	0b 01       	movw	r0, r22
    311c:	b9 01       	movw	r22, r18
    311e:	90 01       	movw	r18, r0
    3120:	0c 01       	movw	r0, r24
    3122:	ca 01       	movw	r24, r20
    3124:	a0 01       	movw	r20, r0
    3126:	11 24       	eor	r1, r1
    3128:	ff 27       	eor	r31, r31
    312a:	59 1b       	sub	r21, r25
    312c:	99 f0       	breq	.+38     	; 0x3154 <__addsf3x+0x60>
    312e:	59 3f       	cpi	r21, 0xF9	; 249
    3130:	50 f4       	brcc	.+20     	; 0x3146 <__addsf3x+0x52>
    3132:	50 3e       	cpi	r21, 0xE0	; 224
    3134:	68 f1       	brcs	.+90     	; 0x3190 <__addsf3x+0x9c>
    3136:	1a 16       	cp	r1, r26
    3138:	f0 40       	sbci	r31, 0x00	; 0
    313a:	a2 2f       	mov	r26, r18
    313c:	23 2f       	mov	r18, r19
    313e:	34 2f       	mov	r19, r20
    3140:	44 27       	eor	r20, r20
    3142:	58 5f       	subi	r21, 0xF8	; 248
    3144:	f3 cf       	rjmp	.-26     	; 0x312c <__addsf3x+0x38>
    3146:	46 95       	lsr	r20
    3148:	37 95       	ror	r19
    314a:	27 95       	ror	r18
    314c:	a7 95       	ror	r26
    314e:	f0 40       	sbci	r31, 0x00	; 0
    3150:	53 95       	inc	r21
    3152:	c9 f7       	brne	.-14     	; 0x3146 <__addsf3x+0x52>
    3154:	7e f4       	brtc	.+30     	; 0x3174 <__addsf3x+0x80>
    3156:	1f 16       	cp	r1, r31
    3158:	ba 0b       	sbc	r27, r26
    315a:	62 0b       	sbc	r22, r18
    315c:	73 0b       	sbc	r23, r19
    315e:	84 0b       	sbc	r24, r20
    3160:	ba f0       	brmi	.+46     	; 0x3190 <__addsf3x+0x9c>
    3162:	91 50       	subi	r25, 0x01	; 1
    3164:	a1 f0       	breq	.+40     	; 0x318e <__addsf3x+0x9a>
    3166:	ff 0f       	add	r31, r31
    3168:	bb 1f       	adc	r27, r27
    316a:	66 1f       	adc	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	c2 f7       	brpl	.-16     	; 0x3162 <__addsf3x+0x6e>
    3172:	0e c0       	rjmp	.+28     	; 0x3190 <__addsf3x+0x9c>
    3174:	ba 0f       	add	r27, r26
    3176:	62 1f       	adc	r22, r18
    3178:	73 1f       	adc	r23, r19
    317a:	84 1f       	adc	r24, r20
    317c:	48 f4       	brcc	.+18     	; 0x3190 <__addsf3x+0x9c>
    317e:	87 95       	ror	r24
    3180:	77 95       	ror	r23
    3182:	67 95       	ror	r22
    3184:	b7 95       	ror	r27
    3186:	f7 95       	ror	r31
    3188:	9e 3f       	cpi	r25, 0xFE	; 254
    318a:	08 f0       	brcs	.+2      	; 0x318e <__addsf3x+0x9a>
    318c:	b0 cf       	rjmp	.-160    	; 0x30ee <__addsf3+0x28>
    318e:	93 95       	inc	r25
    3190:	88 0f       	add	r24, r24
    3192:	08 f0       	brcs	.+2      	; 0x3196 <__addsf3x+0xa2>
    3194:	99 27       	eor	r25, r25
    3196:	ee 0f       	add	r30, r30
    3198:	97 95       	ror	r25
    319a:	87 95       	ror	r24
    319c:	08 95       	ret

0000319e <__cmpsf2>:
    319e:	0e 94 b9 19 	call	0x3372	; 0x3372 <__fp_cmp>
    31a2:	08 f4       	brcc	.+2      	; 0x31a6 <__cmpsf2+0x8>
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	08 95       	ret

000031a8 <__divsf3>:
    31a8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__divsf3x>
    31ac:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__fp_round>
    31b0:	0e 94 ed 19 	call	0x33da	; 0x33da <__fp_pscB>
    31b4:	58 f0       	brcs	.+22     	; 0x31cc <__divsf3+0x24>
    31b6:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__fp_pscA>
    31ba:	40 f0       	brcs	.+16     	; 0x31cc <__divsf3+0x24>
    31bc:	29 f4       	brne	.+10     	; 0x31c8 <__divsf3+0x20>
    31be:	5f 3f       	cpi	r21, 0xFF	; 255
    31c0:	29 f0       	breq	.+10     	; 0x31cc <__divsf3+0x24>
    31c2:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__fp_inf>
    31c6:	51 11       	cpse	r21, r1
    31c8:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_szero>
    31cc:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_nan>

000031d0 <__divsf3x>:
    31d0:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_split3>
    31d4:	68 f3       	brcs	.-38     	; 0x31b0 <__divsf3+0x8>

000031d6 <__divsf3_pse>:
    31d6:	99 23       	and	r25, r25
    31d8:	b1 f3       	breq	.-20     	; 0x31c6 <__divsf3+0x1e>
    31da:	55 23       	and	r21, r21
    31dc:	91 f3       	breq	.-28     	; 0x31c2 <__divsf3+0x1a>
    31de:	95 1b       	sub	r25, r21
    31e0:	55 0b       	sbc	r21, r21
    31e2:	bb 27       	eor	r27, r27
    31e4:	aa 27       	eor	r26, r26
    31e6:	62 17       	cp	r22, r18
    31e8:	73 07       	cpc	r23, r19
    31ea:	84 07       	cpc	r24, r20
    31ec:	38 f0       	brcs	.+14     	; 0x31fc <__divsf3_pse+0x26>
    31ee:	9f 5f       	subi	r25, 0xFF	; 255
    31f0:	5f 4f       	sbci	r21, 0xFF	; 255
    31f2:	22 0f       	add	r18, r18
    31f4:	33 1f       	adc	r19, r19
    31f6:	44 1f       	adc	r20, r20
    31f8:	aa 1f       	adc	r26, r26
    31fa:	a9 f3       	breq	.-22     	; 0x31e6 <__divsf3_pse+0x10>
    31fc:	35 d0       	rcall	.+106    	; 0x3268 <__divsf3_pse+0x92>
    31fe:	0e 2e       	mov	r0, r30
    3200:	3a f0       	brmi	.+14     	; 0x3210 <__divsf3_pse+0x3a>
    3202:	e0 e8       	ldi	r30, 0x80	; 128
    3204:	32 d0       	rcall	.+100    	; 0x326a <__divsf3_pse+0x94>
    3206:	91 50       	subi	r25, 0x01	; 1
    3208:	50 40       	sbci	r21, 0x00	; 0
    320a:	e6 95       	lsr	r30
    320c:	00 1c       	adc	r0, r0
    320e:	ca f7       	brpl	.-14     	; 0x3202 <__divsf3_pse+0x2c>
    3210:	2b d0       	rcall	.+86     	; 0x3268 <__divsf3_pse+0x92>
    3212:	fe 2f       	mov	r31, r30
    3214:	29 d0       	rcall	.+82     	; 0x3268 <__divsf3_pse+0x92>
    3216:	66 0f       	add	r22, r22
    3218:	77 1f       	adc	r23, r23
    321a:	88 1f       	adc	r24, r24
    321c:	bb 1f       	adc	r27, r27
    321e:	26 17       	cp	r18, r22
    3220:	37 07       	cpc	r19, r23
    3222:	48 07       	cpc	r20, r24
    3224:	ab 07       	cpc	r26, r27
    3226:	b0 e8       	ldi	r27, 0x80	; 128
    3228:	09 f0       	breq	.+2      	; 0x322c <__divsf3_pse+0x56>
    322a:	bb 0b       	sbc	r27, r27
    322c:	80 2d       	mov	r24, r0
    322e:	bf 01       	movw	r22, r30
    3230:	ff 27       	eor	r31, r31
    3232:	93 58       	subi	r25, 0x83	; 131
    3234:	5f 4f       	sbci	r21, 0xFF	; 255
    3236:	3a f0       	brmi	.+14     	; 0x3246 <__divsf3_pse+0x70>
    3238:	9e 3f       	cpi	r25, 0xFE	; 254
    323a:	51 05       	cpc	r21, r1
    323c:	78 f0       	brcs	.+30     	; 0x325c <__divsf3_pse+0x86>
    323e:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__fp_inf>
    3242:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_szero>
    3246:	5f 3f       	cpi	r21, 0xFF	; 255
    3248:	e4 f3       	brlt	.-8      	; 0x3242 <__divsf3_pse+0x6c>
    324a:	98 3e       	cpi	r25, 0xE8	; 232
    324c:	d4 f3       	brlt	.-12     	; 0x3242 <__divsf3_pse+0x6c>
    324e:	86 95       	lsr	r24
    3250:	77 95       	ror	r23
    3252:	67 95       	ror	r22
    3254:	b7 95       	ror	r27
    3256:	f7 95       	ror	r31
    3258:	9f 5f       	subi	r25, 0xFF	; 255
    325a:	c9 f7       	brne	.-14     	; 0x324e <__divsf3_pse+0x78>
    325c:	88 0f       	add	r24, r24
    325e:	91 1d       	adc	r25, r1
    3260:	96 95       	lsr	r25
    3262:	87 95       	ror	r24
    3264:	97 f9       	bld	r25, 7
    3266:	08 95       	ret
    3268:	e1 e0       	ldi	r30, 0x01	; 1
    326a:	66 0f       	add	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	88 1f       	adc	r24, r24
    3270:	bb 1f       	adc	r27, r27
    3272:	62 17       	cp	r22, r18
    3274:	73 07       	cpc	r23, r19
    3276:	84 07       	cpc	r24, r20
    3278:	ba 07       	cpc	r27, r26
    327a:	20 f0       	brcs	.+8      	; 0x3284 <__divsf3_pse+0xae>
    327c:	62 1b       	sub	r22, r18
    327e:	73 0b       	sbc	r23, r19
    3280:	84 0b       	sbc	r24, r20
    3282:	ba 0b       	sbc	r27, r26
    3284:	ee 1f       	adc	r30, r30
    3286:	88 f7       	brcc	.-30     	; 0x326a <__divsf3_pse+0x94>
    3288:	e0 95       	com	r30
    328a:	08 95       	ret

0000328c <__fixsfsi>:
    328c:	0e 94 4d 19 	call	0x329a	; 0x329a <__fixunssfsi>
    3290:	68 94       	set
    3292:	b1 11       	cpse	r27, r1
    3294:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_szero>
    3298:	08 95       	ret

0000329a <__fixunssfsi>:
    329a:	0e 94 0d 1a 	call	0x341a	; 0x341a <__fp_splitA>
    329e:	88 f0       	brcs	.+34     	; 0x32c2 <__fixunssfsi+0x28>
    32a0:	9f 57       	subi	r25, 0x7F	; 127
    32a2:	98 f0       	brcs	.+38     	; 0x32ca <__fixunssfsi+0x30>
    32a4:	b9 2f       	mov	r27, r25
    32a6:	99 27       	eor	r25, r25
    32a8:	b7 51       	subi	r27, 0x17	; 23
    32aa:	b0 f0       	brcs	.+44     	; 0x32d8 <__fixunssfsi+0x3e>
    32ac:	e1 f0       	breq	.+56     	; 0x32e6 <__fixunssfsi+0x4c>
    32ae:	66 0f       	add	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	88 1f       	adc	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	1a f0       	brmi	.+6      	; 0x32be <__fixunssfsi+0x24>
    32b8:	ba 95       	dec	r27
    32ba:	c9 f7       	brne	.-14     	; 0x32ae <__fixunssfsi+0x14>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <__fixunssfsi+0x4c>
    32be:	b1 30       	cpi	r27, 0x01	; 1
    32c0:	91 f0       	breq	.+36     	; 0x32e6 <__fixunssfsi+0x4c>
    32c2:	0e 94 27 1a 	call	0x344e	; 0x344e <__fp_zero>
    32c6:	b1 e0       	ldi	r27, 0x01	; 1
    32c8:	08 95       	ret
    32ca:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__fp_zero>
    32ce:	67 2f       	mov	r22, r23
    32d0:	78 2f       	mov	r23, r24
    32d2:	88 27       	eor	r24, r24
    32d4:	b8 5f       	subi	r27, 0xF8	; 248
    32d6:	39 f0       	breq	.+14     	; 0x32e6 <__fixunssfsi+0x4c>
    32d8:	b9 3f       	cpi	r27, 0xF9	; 249
    32da:	cc f3       	brlt	.-14     	; 0x32ce <__fixunssfsi+0x34>
    32dc:	86 95       	lsr	r24
    32de:	77 95       	ror	r23
    32e0:	67 95       	ror	r22
    32e2:	b3 95       	inc	r27
    32e4:	d9 f7       	brne	.-10     	; 0x32dc <__fixunssfsi+0x42>
    32e6:	3e f4       	brtc	.+14     	; 0x32f6 <__fixunssfsi+0x5c>
    32e8:	90 95       	com	r25
    32ea:	80 95       	com	r24
    32ec:	70 95       	com	r23
    32ee:	61 95       	neg	r22
    32f0:	7f 4f       	sbci	r23, 0xFF	; 255
    32f2:	8f 4f       	sbci	r24, 0xFF	; 255
    32f4:	9f 4f       	sbci	r25, 0xFF	; 255
    32f6:	08 95       	ret

000032f8 <__floatunsisf>:
    32f8:	e8 94       	clt
    32fa:	09 c0       	rjmp	.+18     	; 0x330e <__floatsisf+0x12>

000032fc <__floatsisf>:
    32fc:	97 fb       	bst	r25, 7
    32fe:	3e f4       	brtc	.+14     	; 0x330e <__floatsisf+0x12>
    3300:	90 95       	com	r25
    3302:	80 95       	com	r24
    3304:	70 95       	com	r23
    3306:	61 95       	neg	r22
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	8f 4f       	sbci	r24, 0xFF	; 255
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	99 23       	and	r25, r25
    3310:	a9 f0       	breq	.+42     	; 0x333c <__floatsisf+0x40>
    3312:	f9 2f       	mov	r31, r25
    3314:	96 e9       	ldi	r25, 0x96	; 150
    3316:	bb 27       	eor	r27, r27
    3318:	93 95       	inc	r25
    331a:	f6 95       	lsr	r31
    331c:	87 95       	ror	r24
    331e:	77 95       	ror	r23
    3320:	67 95       	ror	r22
    3322:	b7 95       	ror	r27
    3324:	f1 11       	cpse	r31, r1
    3326:	f8 cf       	rjmp	.-16     	; 0x3318 <__floatsisf+0x1c>
    3328:	fa f4       	brpl	.+62     	; 0x3368 <__floatsisf+0x6c>
    332a:	bb 0f       	add	r27, r27
    332c:	11 f4       	brne	.+4      	; 0x3332 <__floatsisf+0x36>
    332e:	60 ff       	sbrs	r22, 0
    3330:	1b c0       	rjmp	.+54     	; 0x3368 <__floatsisf+0x6c>
    3332:	6f 5f       	subi	r22, 0xFF	; 255
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	8f 4f       	sbci	r24, 0xFF	; 255
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	16 c0       	rjmp	.+44     	; 0x3368 <__floatsisf+0x6c>
    333c:	88 23       	and	r24, r24
    333e:	11 f0       	breq	.+4      	; 0x3344 <__floatsisf+0x48>
    3340:	96 e9       	ldi	r25, 0x96	; 150
    3342:	11 c0       	rjmp	.+34     	; 0x3366 <__floatsisf+0x6a>
    3344:	77 23       	and	r23, r23
    3346:	21 f0       	breq	.+8      	; 0x3350 <__floatsisf+0x54>
    3348:	9e e8       	ldi	r25, 0x8E	; 142
    334a:	87 2f       	mov	r24, r23
    334c:	76 2f       	mov	r23, r22
    334e:	05 c0       	rjmp	.+10     	; 0x335a <__floatsisf+0x5e>
    3350:	66 23       	and	r22, r22
    3352:	71 f0       	breq	.+28     	; 0x3370 <__floatsisf+0x74>
    3354:	96 e8       	ldi	r25, 0x86	; 134
    3356:	86 2f       	mov	r24, r22
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	2a f0       	brmi	.+10     	; 0x3368 <__floatsisf+0x6c>
    335e:	9a 95       	dec	r25
    3360:	66 0f       	add	r22, r22
    3362:	77 1f       	adc	r23, r23
    3364:	88 1f       	adc	r24, r24
    3366:	da f7       	brpl	.-10     	; 0x335e <__floatsisf+0x62>
    3368:	88 0f       	add	r24, r24
    336a:	96 95       	lsr	r25
    336c:	87 95       	ror	r24
    336e:	97 f9       	bld	r25, 7
    3370:	08 95       	ret

00003372 <__fp_cmp>:
    3372:	99 0f       	add	r25, r25
    3374:	00 08       	sbc	r0, r0
    3376:	55 0f       	add	r21, r21
    3378:	aa 0b       	sbc	r26, r26
    337a:	e0 e8       	ldi	r30, 0x80	; 128
    337c:	fe ef       	ldi	r31, 0xFE	; 254
    337e:	16 16       	cp	r1, r22
    3380:	17 06       	cpc	r1, r23
    3382:	e8 07       	cpc	r30, r24
    3384:	f9 07       	cpc	r31, r25
    3386:	c0 f0       	brcs	.+48     	; 0x33b8 <__fp_cmp+0x46>
    3388:	12 16       	cp	r1, r18
    338a:	13 06       	cpc	r1, r19
    338c:	e4 07       	cpc	r30, r20
    338e:	f5 07       	cpc	r31, r21
    3390:	98 f0       	brcs	.+38     	; 0x33b8 <__fp_cmp+0x46>
    3392:	62 1b       	sub	r22, r18
    3394:	73 0b       	sbc	r23, r19
    3396:	84 0b       	sbc	r24, r20
    3398:	95 0b       	sbc	r25, r21
    339a:	39 f4       	brne	.+14     	; 0x33aa <__fp_cmp+0x38>
    339c:	0a 26       	eor	r0, r26
    339e:	61 f0       	breq	.+24     	; 0x33b8 <__fp_cmp+0x46>
    33a0:	23 2b       	or	r18, r19
    33a2:	24 2b       	or	r18, r20
    33a4:	25 2b       	or	r18, r21
    33a6:	21 f4       	brne	.+8      	; 0x33b0 <__fp_cmp+0x3e>
    33a8:	08 95       	ret
    33aa:	0a 26       	eor	r0, r26
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <__fp_cmp+0x3e>
    33ae:	a1 40       	sbci	r26, 0x01	; 1
    33b0:	a6 95       	lsr	r26
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	81 1d       	adc	r24, r1
    33b6:	81 1d       	adc	r24, r1
    33b8:	08 95       	ret

000033ba <__fp_inf>:
    33ba:	97 f9       	bld	r25, 7
    33bc:	9f 67       	ori	r25, 0x7F	; 127
    33be:	80 e8       	ldi	r24, 0x80	; 128
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	08 95       	ret

000033c6 <__fp_nan>:
    33c6:	9f ef       	ldi	r25, 0xFF	; 255
    33c8:	80 ec       	ldi	r24, 0xC0	; 192
    33ca:	08 95       	ret

000033cc <__fp_pscA>:
    33cc:	00 24       	eor	r0, r0
    33ce:	0a 94       	dec	r0
    33d0:	16 16       	cp	r1, r22
    33d2:	17 06       	cpc	r1, r23
    33d4:	18 06       	cpc	r1, r24
    33d6:	09 06       	cpc	r0, r25
    33d8:	08 95       	ret

000033da <__fp_pscB>:
    33da:	00 24       	eor	r0, r0
    33dc:	0a 94       	dec	r0
    33de:	12 16       	cp	r1, r18
    33e0:	13 06       	cpc	r1, r19
    33e2:	14 06       	cpc	r1, r20
    33e4:	05 06       	cpc	r0, r21
    33e6:	08 95       	ret

000033e8 <__fp_round>:
    33e8:	09 2e       	mov	r0, r25
    33ea:	03 94       	inc	r0
    33ec:	00 0c       	add	r0, r0
    33ee:	11 f4       	brne	.+4      	; 0x33f4 <__fp_round+0xc>
    33f0:	88 23       	and	r24, r24
    33f2:	52 f0       	brmi	.+20     	; 0x3408 <__fp_round+0x20>
    33f4:	bb 0f       	add	r27, r27
    33f6:	40 f4       	brcc	.+16     	; 0x3408 <__fp_round+0x20>
    33f8:	bf 2b       	or	r27, r31
    33fa:	11 f4       	brne	.+4      	; 0x3400 <__fp_round+0x18>
    33fc:	60 ff       	sbrs	r22, 0
    33fe:	04 c0       	rjmp	.+8      	; 0x3408 <__fp_round+0x20>
    3400:	6f 5f       	subi	r22, 0xFF	; 255
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	8f 4f       	sbci	r24, 0xFF	; 255
    3406:	9f 4f       	sbci	r25, 0xFF	; 255
    3408:	08 95       	ret

0000340a <__fp_split3>:
    340a:	57 fd       	sbrc	r21, 7
    340c:	90 58       	subi	r25, 0x80	; 128
    340e:	44 0f       	add	r20, r20
    3410:	55 1f       	adc	r21, r21
    3412:	59 f0       	breq	.+22     	; 0x342a <__fp_splitA+0x10>
    3414:	5f 3f       	cpi	r21, 0xFF	; 255
    3416:	71 f0       	breq	.+28     	; 0x3434 <__fp_splitA+0x1a>
    3418:	47 95       	ror	r20

0000341a <__fp_splitA>:
    341a:	88 0f       	add	r24, r24
    341c:	97 fb       	bst	r25, 7
    341e:	99 1f       	adc	r25, r25
    3420:	61 f0       	breq	.+24     	; 0x343a <__fp_splitA+0x20>
    3422:	9f 3f       	cpi	r25, 0xFF	; 255
    3424:	79 f0       	breq	.+30     	; 0x3444 <__fp_splitA+0x2a>
    3426:	87 95       	ror	r24
    3428:	08 95       	ret
    342a:	12 16       	cp	r1, r18
    342c:	13 06       	cpc	r1, r19
    342e:	14 06       	cpc	r1, r20
    3430:	55 1f       	adc	r21, r21
    3432:	f2 cf       	rjmp	.-28     	; 0x3418 <__fp_split3+0xe>
    3434:	46 95       	lsr	r20
    3436:	f1 df       	rcall	.-30     	; 0x341a <__fp_splitA>
    3438:	08 c0       	rjmp	.+16     	; 0x344a <__fp_splitA+0x30>
    343a:	16 16       	cp	r1, r22
    343c:	17 06       	cpc	r1, r23
    343e:	18 06       	cpc	r1, r24
    3440:	99 1f       	adc	r25, r25
    3442:	f1 cf       	rjmp	.-30     	; 0x3426 <__fp_splitA+0xc>
    3444:	86 95       	lsr	r24
    3446:	71 05       	cpc	r23, r1
    3448:	61 05       	cpc	r22, r1
    344a:	08 94       	sec
    344c:	08 95       	ret

0000344e <__fp_zero>:
    344e:	e8 94       	clt

00003450 <__fp_szero>:
    3450:	bb 27       	eor	r27, r27
    3452:	66 27       	eor	r22, r22
    3454:	77 27       	eor	r23, r23
    3456:	cb 01       	movw	r24, r22
    3458:	97 f9       	bld	r25, 7
    345a:	08 95       	ret

0000345c <__mulsf3>:
    345c:	0e 94 41 1a 	call	0x3482	; 0x3482 <__mulsf3x>
    3460:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__fp_round>
    3464:	0e 94 e6 19 	call	0x33cc	; 0x33cc <__fp_pscA>
    3468:	38 f0       	brcs	.+14     	; 0x3478 <__mulsf3+0x1c>
    346a:	0e 94 ed 19 	call	0x33da	; 0x33da <__fp_pscB>
    346e:	20 f0       	brcs	.+8      	; 0x3478 <__mulsf3+0x1c>
    3470:	95 23       	and	r25, r21
    3472:	11 f0       	breq	.+4      	; 0x3478 <__mulsf3+0x1c>
    3474:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__fp_inf>
    3478:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_nan>
    347c:	11 24       	eor	r1, r1
    347e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_szero>

00003482 <__mulsf3x>:
    3482:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_split3>
    3486:	70 f3       	brcs	.-36     	; 0x3464 <__mulsf3+0x8>

00003488 <__mulsf3_pse>:
    3488:	95 9f       	mul	r25, r21
    348a:	c1 f3       	breq	.-16     	; 0x347c <__mulsf3+0x20>
    348c:	95 0f       	add	r25, r21
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	55 1f       	adc	r21, r21
    3492:	62 9f       	mul	r22, r18
    3494:	f0 01       	movw	r30, r0
    3496:	72 9f       	mul	r23, r18
    3498:	bb 27       	eor	r27, r27
    349a:	f0 0d       	add	r31, r0
    349c:	b1 1d       	adc	r27, r1
    349e:	63 9f       	mul	r22, r19
    34a0:	aa 27       	eor	r26, r26
    34a2:	f0 0d       	add	r31, r0
    34a4:	b1 1d       	adc	r27, r1
    34a6:	aa 1f       	adc	r26, r26
    34a8:	64 9f       	mul	r22, r20
    34aa:	66 27       	eor	r22, r22
    34ac:	b0 0d       	add	r27, r0
    34ae:	a1 1d       	adc	r26, r1
    34b0:	66 1f       	adc	r22, r22
    34b2:	82 9f       	mul	r24, r18
    34b4:	22 27       	eor	r18, r18
    34b6:	b0 0d       	add	r27, r0
    34b8:	a1 1d       	adc	r26, r1
    34ba:	62 1f       	adc	r22, r18
    34bc:	73 9f       	mul	r23, r19
    34be:	b0 0d       	add	r27, r0
    34c0:	a1 1d       	adc	r26, r1
    34c2:	62 1f       	adc	r22, r18
    34c4:	83 9f       	mul	r24, r19
    34c6:	a0 0d       	add	r26, r0
    34c8:	61 1d       	adc	r22, r1
    34ca:	22 1f       	adc	r18, r18
    34cc:	74 9f       	mul	r23, r20
    34ce:	33 27       	eor	r19, r19
    34d0:	a0 0d       	add	r26, r0
    34d2:	61 1d       	adc	r22, r1
    34d4:	23 1f       	adc	r18, r19
    34d6:	84 9f       	mul	r24, r20
    34d8:	60 0d       	add	r22, r0
    34da:	21 1d       	adc	r18, r1
    34dc:	82 2f       	mov	r24, r18
    34de:	76 2f       	mov	r23, r22
    34e0:	6a 2f       	mov	r22, r26
    34e2:	11 24       	eor	r1, r1
    34e4:	9f 57       	subi	r25, 0x7F	; 127
    34e6:	50 40       	sbci	r21, 0x00	; 0
    34e8:	9a f0       	brmi	.+38     	; 0x3510 <__mulsf3_pse+0x88>
    34ea:	f1 f0       	breq	.+60     	; 0x3528 <__mulsf3_pse+0xa0>
    34ec:	88 23       	and	r24, r24
    34ee:	4a f0       	brmi	.+18     	; 0x3502 <__mulsf3_pse+0x7a>
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	bb 1f       	adc	r27, r27
    34f6:	66 1f       	adc	r22, r22
    34f8:	77 1f       	adc	r23, r23
    34fa:	88 1f       	adc	r24, r24
    34fc:	91 50       	subi	r25, 0x01	; 1
    34fe:	50 40       	sbci	r21, 0x00	; 0
    3500:	a9 f7       	brne	.-22     	; 0x34ec <__mulsf3_pse+0x64>
    3502:	9e 3f       	cpi	r25, 0xFE	; 254
    3504:	51 05       	cpc	r21, r1
    3506:	80 f0       	brcs	.+32     	; 0x3528 <__mulsf3_pse+0xa0>
    3508:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__fp_inf>
    350c:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__fp_szero>
    3510:	5f 3f       	cpi	r21, 0xFF	; 255
    3512:	e4 f3       	brlt	.-8      	; 0x350c <__mulsf3_pse+0x84>
    3514:	98 3e       	cpi	r25, 0xE8	; 232
    3516:	d4 f3       	brlt	.-12     	; 0x350c <__mulsf3_pse+0x84>
    3518:	86 95       	lsr	r24
    351a:	77 95       	ror	r23
    351c:	67 95       	ror	r22
    351e:	b7 95       	ror	r27
    3520:	f7 95       	ror	r31
    3522:	e7 95       	ror	r30
    3524:	9f 5f       	subi	r25, 0xFF	; 255
    3526:	c1 f7       	brne	.-16     	; 0x3518 <__mulsf3_pse+0x90>
    3528:	fe 2b       	or	r31, r30
    352a:	88 0f       	add	r24, r24
    352c:	91 1d       	adc	r25, r1
    352e:	96 95       	lsr	r25
    3530:	87 95       	ror	r24
    3532:	97 f9       	bld	r25, 7
    3534:	08 95       	ret

00003536 <vfprintf>:
    3536:	a0 e1       	ldi	r26, 0x10	; 16
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	e1 ea       	ldi	r30, 0xA1	; 161
    353c:	fa e1       	ldi	r31, 0x1A	; 26
    353e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__>
    3542:	7c 01       	movw	r14, r24
    3544:	1b 01       	movw	r2, r22
    3546:	6a 01       	movw	r12, r20
    3548:	fc 01       	movw	r30, r24
    354a:	17 82       	std	Z+7, r1	; 0x07
    354c:	16 82       	std	Z+6, r1	; 0x06
    354e:	83 81       	ldd	r24, Z+3	; 0x03
    3550:	81 ff       	sbrs	r24, 1
    3552:	44 c3       	rjmp	.+1672   	; 0x3bdc <vfprintf+0x6a6>
    3554:	9e 01       	movw	r18, r28
    3556:	2f 5f       	subi	r18, 0xFF	; 255
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	39 01       	movw	r6, r18
    355c:	f7 01       	movw	r30, r14
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	f1 01       	movw	r30, r2
    3562:	93 fd       	sbrc	r25, 3
    3564:	85 91       	lpm	r24, Z+
    3566:	93 ff       	sbrs	r25, 3
    3568:	81 91       	ld	r24, Z+
    356a:	1f 01       	movw	r2, r30
    356c:	88 23       	and	r24, r24
    356e:	09 f4       	brne	.+2      	; 0x3572 <vfprintf+0x3c>
    3570:	31 c3       	rjmp	.+1634   	; 0x3bd4 <vfprintf+0x69e>
    3572:	85 32       	cpi	r24, 0x25	; 37
    3574:	39 f4       	brne	.+14     	; 0x3584 <vfprintf+0x4e>
    3576:	93 fd       	sbrc	r25, 3
    3578:	85 91       	lpm	r24, Z+
    357a:	93 ff       	sbrs	r25, 3
    357c:	81 91       	ld	r24, Z+
    357e:	1f 01       	movw	r2, r30
    3580:	85 32       	cpi	r24, 0x25	; 37
    3582:	39 f4       	brne	.+14     	; 0x3592 <vfprintf+0x5c>
    3584:	b7 01       	movw	r22, r14
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    358c:	56 01       	movw	r10, r12
    358e:	65 01       	movw	r12, r10
    3590:	e5 cf       	rjmp	.-54     	; 0x355c <vfprintf+0x26>
    3592:	10 e0       	ldi	r17, 0x00	; 0
    3594:	51 2c       	mov	r5, r1
    3596:	91 2c       	mov	r9, r1
    3598:	ff e1       	ldi	r31, 0x1F	; 31
    359a:	f9 15       	cp	r31, r9
    359c:	d8 f0       	brcs	.+54     	; 0x35d4 <vfprintf+0x9e>
    359e:	8b 32       	cpi	r24, 0x2B	; 43
    35a0:	79 f0       	breq	.+30     	; 0x35c0 <vfprintf+0x8a>
    35a2:	38 f4       	brcc	.+14     	; 0x35b2 <vfprintf+0x7c>
    35a4:	80 32       	cpi	r24, 0x20	; 32
    35a6:	79 f0       	breq	.+30     	; 0x35c6 <vfprintf+0x90>
    35a8:	83 32       	cpi	r24, 0x23	; 35
    35aa:	a1 f4       	brne	.+40     	; 0x35d4 <vfprintf+0x9e>
    35ac:	f9 2d       	mov	r31, r9
    35ae:	f0 61       	ori	r31, 0x10	; 16
    35b0:	2e c0       	rjmp	.+92     	; 0x360e <vfprintf+0xd8>
    35b2:	8d 32       	cpi	r24, 0x2D	; 45
    35b4:	61 f0       	breq	.+24     	; 0x35ce <vfprintf+0x98>
    35b6:	80 33       	cpi	r24, 0x30	; 48
    35b8:	69 f4       	brne	.+26     	; 0x35d4 <vfprintf+0x9e>
    35ba:	29 2d       	mov	r18, r9
    35bc:	21 60       	ori	r18, 0x01	; 1
    35be:	2d c0       	rjmp	.+90     	; 0x361a <vfprintf+0xe4>
    35c0:	39 2d       	mov	r19, r9
    35c2:	32 60       	ori	r19, 0x02	; 2
    35c4:	93 2e       	mov	r9, r19
    35c6:	89 2d       	mov	r24, r9
    35c8:	84 60       	ori	r24, 0x04	; 4
    35ca:	98 2e       	mov	r9, r24
    35cc:	2a c0       	rjmp	.+84     	; 0x3622 <vfprintf+0xec>
    35ce:	e9 2d       	mov	r30, r9
    35d0:	e8 60       	ori	r30, 0x08	; 8
    35d2:	15 c0       	rjmp	.+42     	; 0x35fe <vfprintf+0xc8>
    35d4:	97 fc       	sbrc	r9, 7
    35d6:	2d c0       	rjmp	.+90     	; 0x3632 <vfprintf+0xfc>
    35d8:	20 ed       	ldi	r18, 0xD0	; 208
    35da:	28 0f       	add	r18, r24
    35dc:	2a 30       	cpi	r18, 0x0A	; 10
    35de:	88 f4       	brcc	.+34     	; 0x3602 <vfprintf+0xcc>
    35e0:	96 fe       	sbrs	r9, 6
    35e2:	06 c0       	rjmp	.+12     	; 0x35f0 <vfprintf+0xba>
    35e4:	3a e0       	ldi	r19, 0x0A	; 10
    35e6:	13 9f       	mul	r17, r19
    35e8:	20 0d       	add	r18, r0
    35ea:	11 24       	eor	r1, r1
    35ec:	12 2f       	mov	r17, r18
    35ee:	19 c0       	rjmp	.+50     	; 0x3622 <vfprintf+0xec>
    35f0:	8a e0       	ldi	r24, 0x0A	; 10
    35f2:	58 9e       	mul	r5, r24
    35f4:	20 0d       	add	r18, r0
    35f6:	11 24       	eor	r1, r1
    35f8:	52 2e       	mov	r5, r18
    35fa:	e9 2d       	mov	r30, r9
    35fc:	e0 62       	ori	r30, 0x20	; 32
    35fe:	9e 2e       	mov	r9, r30
    3600:	10 c0       	rjmp	.+32     	; 0x3622 <vfprintf+0xec>
    3602:	8e 32       	cpi	r24, 0x2E	; 46
    3604:	31 f4       	brne	.+12     	; 0x3612 <vfprintf+0xdc>
    3606:	96 fc       	sbrc	r9, 6
    3608:	e5 c2       	rjmp	.+1482   	; 0x3bd4 <vfprintf+0x69e>
    360a:	f9 2d       	mov	r31, r9
    360c:	f0 64       	ori	r31, 0x40	; 64
    360e:	9f 2e       	mov	r9, r31
    3610:	08 c0       	rjmp	.+16     	; 0x3622 <vfprintf+0xec>
    3612:	8c 36       	cpi	r24, 0x6C	; 108
    3614:	21 f4       	brne	.+8      	; 0x361e <vfprintf+0xe8>
    3616:	29 2d       	mov	r18, r9
    3618:	20 68       	ori	r18, 0x80	; 128
    361a:	92 2e       	mov	r9, r18
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfprintf+0xec>
    361e:	88 36       	cpi	r24, 0x68	; 104
    3620:	41 f4       	brne	.+16     	; 0x3632 <vfprintf+0xfc>
    3622:	f1 01       	movw	r30, r2
    3624:	93 fd       	sbrc	r25, 3
    3626:	85 91       	lpm	r24, Z+
    3628:	93 ff       	sbrs	r25, 3
    362a:	81 91       	ld	r24, Z+
    362c:	1f 01       	movw	r2, r30
    362e:	81 11       	cpse	r24, r1
    3630:	b3 cf       	rjmp	.-154    	; 0x3598 <vfprintf+0x62>
    3632:	9b eb       	ldi	r25, 0xBB	; 187
    3634:	98 0f       	add	r25, r24
    3636:	93 30       	cpi	r25, 0x03	; 3
    3638:	20 f4       	brcc	.+8      	; 0x3642 <vfprintf+0x10c>
    363a:	99 2d       	mov	r25, r9
    363c:	90 61       	ori	r25, 0x10	; 16
    363e:	80 5e       	subi	r24, 0xE0	; 224
    3640:	07 c0       	rjmp	.+14     	; 0x3650 <vfprintf+0x11a>
    3642:	9b e9       	ldi	r25, 0x9B	; 155
    3644:	98 0f       	add	r25, r24
    3646:	93 30       	cpi	r25, 0x03	; 3
    3648:	08 f0       	brcs	.+2      	; 0x364c <vfprintf+0x116>
    364a:	66 c1       	rjmp	.+716    	; 0x3918 <vfprintf+0x3e2>
    364c:	99 2d       	mov	r25, r9
    364e:	9f 7e       	andi	r25, 0xEF	; 239
    3650:	96 ff       	sbrs	r25, 6
    3652:	16 e0       	ldi	r17, 0x06	; 6
    3654:	9f 73       	andi	r25, 0x3F	; 63
    3656:	99 2e       	mov	r9, r25
    3658:	85 36       	cpi	r24, 0x65	; 101
    365a:	19 f4       	brne	.+6      	; 0x3662 <vfprintf+0x12c>
    365c:	90 64       	ori	r25, 0x40	; 64
    365e:	99 2e       	mov	r9, r25
    3660:	08 c0       	rjmp	.+16     	; 0x3672 <vfprintf+0x13c>
    3662:	86 36       	cpi	r24, 0x66	; 102
    3664:	21 f4       	brne	.+8      	; 0x366e <vfprintf+0x138>
    3666:	39 2f       	mov	r19, r25
    3668:	30 68       	ori	r19, 0x80	; 128
    366a:	93 2e       	mov	r9, r19
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <vfprintf+0x13c>
    366e:	11 11       	cpse	r17, r1
    3670:	11 50       	subi	r17, 0x01	; 1
    3672:	97 fe       	sbrs	r9, 7
    3674:	07 c0       	rjmp	.+14     	; 0x3684 <vfprintf+0x14e>
    3676:	1c 33       	cpi	r17, 0x3C	; 60
    3678:	50 f4       	brcc	.+20     	; 0x368e <vfprintf+0x158>
    367a:	44 24       	eor	r4, r4
    367c:	43 94       	inc	r4
    367e:	41 0e       	add	r4, r17
    3680:	27 e0       	ldi	r18, 0x07	; 7
    3682:	0b c0       	rjmp	.+22     	; 0x369a <vfprintf+0x164>
    3684:	18 30       	cpi	r17, 0x08	; 8
    3686:	38 f0       	brcs	.+14     	; 0x3696 <vfprintf+0x160>
    3688:	27 e0       	ldi	r18, 0x07	; 7
    368a:	17 e0       	ldi	r17, 0x07	; 7
    368c:	05 c0       	rjmp	.+10     	; 0x3698 <vfprintf+0x162>
    368e:	27 e0       	ldi	r18, 0x07	; 7
    3690:	9c e3       	ldi	r25, 0x3C	; 60
    3692:	49 2e       	mov	r4, r25
    3694:	02 c0       	rjmp	.+4      	; 0x369a <vfprintf+0x164>
    3696:	21 2f       	mov	r18, r17
    3698:	41 2c       	mov	r4, r1
    369a:	56 01       	movw	r10, r12
    369c:	84 e0       	ldi	r24, 0x04	; 4
    369e:	a8 0e       	add	r10, r24
    36a0:	b1 1c       	adc	r11, r1
    36a2:	f6 01       	movw	r30, r12
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	04 2d       	mov	r16, r4
    36ae:	a3 01       	movw	r20, r6
    36b0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__ftoa_engine>
    36b4:	6c 01       	movw	r12, r24
    36b6:	f9 81       	ldd	r31, Y+1	; 0x01
    36b8:	fc 87       	std	Y+12, r31	; 0x0c
    36ba:	f0 ff       	sbrs	r31, 0
    36bc:	02 c0       	rjmp	.+4      	; 0x36c2 <vfprintf+0x18c>
    36be:	f3 ff       	sbrs	r31, 3
    36c0:	06 c0       	rjmp	.+12     	; 0x36ce <vfprintf+0x198>
    36c2:	91 fc       	sbrc	r9, 1
    36c4:	06 c0       	rjmp	.+12     	; 0x36d2 <vfprintf+0x19c>
    36c6:	92 fe       	sbrs	r9, 2
    36c8:	06 c0       	rjmp	.+12     	; 0x36d6 <vfprintf+0x1a0>
    36ca:	00 e2       	ldi	r16, 0x20	; 32
    36cc:	05 c0       	rjmp	.+10     	; 0x36d8 <vfprintf+0x1a2>
    36ce:	0d e2       	ldi	r16, 0x2D	; 45
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <vfprintf+0x1a2>
    36d2:	0b e2       	ldi	r16, 0x2B	; 43
    36d4:	01 c0       	rjmp	.+2      	; 0x36d8 <vfprintf+0x1a2>
    36d6:	00 e0       	ldi	r16, 0x00	; 0
    36d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    36da:	8c 70       	andi	r24, 0x0C	; 12
    36dc:	19 f0       	breq	.+6      	; 0x36e4 <vfprintf+0x1ae>
    36de:	01 11       	cpse	r16, r1
    36e0:	5a c2       	rjmp	.+1204   	; 0x3b96 <vfprintf+0x660>
    36e2:	9b c2       	rjmp	.+1334   	; 0x3c1a <vfprintf+0x6e4>
    36e4:	97 fe       	sbrs	r9, 7
    36e6:	10 c0       	rjmp	.+32     	; 0x3708 <vfprintf+0x1d2>
    36e8:	4c 0c       	add	r4, r12
    36ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    36ec:	f4 ff       	sbrs	r31, 4
    36ee:	04 c0       	rjmp	.+8      	; 0x36f8 <vfprintf+0x1c2>
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	81 33       	cpi	r24, 0x31	; 49
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <vfprintf+0x1c2>
    36f6:	4a 94       	dec	r4
    36f8:	14 14       	cp	r1, r4
    36fa:	74 f5       	brge	.+92     	; 0x3758 <vfprintf+0x222>
    36fc:	28 e0       	ldi	r18, 0x08	; 8
    36fe:	24 15       	cp	r18, r4
    3700:	78 f5       	brcc	.+94     	; 0x3760 <vfprintf+0x22a>
    3702:	88 e0       	ldi	r24, 0x08	; 8
    3704:	48 2e       	mov	r4, r24
    3706:	2c c0       	rjmp	.+88     	; 0x3760 <vfprintf+0x22a>
    3708:	96 fc       	sbrc	r9, 6
    370a:	2a c0       	rjmp	.+84     	; 0x3760 <vfprintf+0x22a>
    370c:	81 2f       	mov	r24, r17
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	8c 15       	cp	r24, r12
    3712:	9d 05       	cpc	r25, r13
    3714:	9c f0       	brlt	.+38     	; 0x373c <vfprintf+0x206>
    3716:	3c ef       	ldi	r19, 0xFC	; 252
    3718:	c3 16       	cp	r12, r19
    371a:	3f ef       	ldi	r19, 0xFF	; 255
    371c:	d3 06       	cpc	r13, r19
    371e:	74 f0       	brlt	.+28     	; 0x373c <vfprintf+0x206>
    3720:	89 2d       	mov	r24, r9
    3722:	80 68       	ori	r24, 0x80	; 128
    3724:	98 2e       	mov	r9, r24
    3726:	0a c0       	rjmp	.+20     	; 0x373c <vfprintf+0x206>
    3728:	e2 e0       	ldi	r30, 0x02	; 2
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	ec 0f       	add	r30, r28
    372e:	fd 1f       	adc	r31, r29
    3730:	e1 0f       	add	r30, r17
    3732:	f1 1d       	adc	r31, r1
    3734:	80 81       	ld	r24, Z
    3736:	80 33       	cpi	r24, 0x30	; 48
    3738:	19 f4       	brne	.+6      	; 0x3740 <vfprintf+0x20a>
    373a:	11 50       	subi	r17, 0x01	; 1
    373c:	11 11       	cpse	r17, r1
    373e:	f4 cf       	rjmp	.-24     	; 0x3728 <vfprintf+0x1f2>
    3740:	97 fe       	sbrs	r9, 7
    3742:	0e c0       	rjmp	.+28     	; 0x3760 <vfprintf+0x22a>
    3744:	44 24       	eor	r4, r4
    3746:	43 94       	inc	r4
    3748:	41 0e       	add	r4, r17
    374a:	81 2f       	mov	r24, r17
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	c8 16       	cp	r12, r24
    3750:	d9 06       	cpc	r13, r25
    3752:	2c f4       	brge	.+10     	; 0x375e <vfprintf+0x228>
    3754:	1c 19       	sub	r17, r12
    3756:	04 c0       	rjmp	.+8      	; 0x3760 <vfprintf+0x22a>
    3758:	44 24       	eor	r4, r4
    375a:	43 94       	inc	r4
    375c:	01 c0       	rjmp	.+2      	; 0x3760 <vfprintf+0x22a>
    375e:	10 e0       	ldi	r17, 0x00	; 0
    3760:	97 fe       	sbrs	r9, 7
    3762:	06 c0       	rjmp	.+12     	; 0x3770 <vfprintf+0x23a>
    3764:	1c 14       	cp	r1, r12
    3766:	1d 04       	cpc	r1, r13
    3768:	34 f4       	brge	.+12     	; 0x3776 <vfprintf+0x240>
    376a:	c6 01       	movw	r24, r12
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	05 c0       	rjmp	.+10     	; 0x377a <vfprintf+0x244>
    3770:	85 e0       	ldi	r24, 0x05	; 5
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	02 c0       	rjmp	.+4      	; 0x377a <vfprintf+0x244>
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	01 11       	cpse	r16, r1
    377c:	01 96       	adiw	r24, 0x01	; 1
    377e:	11 23       	and	r17, r17
    3780:	31 f0       	breq	.+12     	; 0x378e <vfprintf+0x258>
    3782:	21 2f       	mov	r18, r17
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	2f 5f       	subi	r18, 0xFF	; 255
    3788:	3f 4f       	sbci	r19, 0xFF	; 255
    378a:	82 0f       	add	r24, r18
    378c:	93 1f       	adc	r25, r19
    378e:	25 2d       	mov	r18, r5
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	82 17       	cp	r24, r18
    3794:	93 07       	cpc	r25, r19
    3796:	14 f4       	brge	.+4      	; 0x379c <vfprintf+0x266>
    3798:	58 1a       	sub	r5, r24
    379a:	01 c0       	rjmp	.+2      	; 0x379e <vfprintf+0x268>
    379c:	51 2c       	mov	r5, r1
    379e:	89 2d       	mov	r24, r9
    37a0:	89 70       	andi	r24, 0x09	; 9
    37a2:	49 f4       	brne	.+18     	; 0x37b6 <vfprintf+0x280>
    37a4:	55 20       	and	r5, r5
    37a6:	39 f0       	breq	.+14     	; 0x37b6 <vfprintf+0x280>
    37a8:	b7 01       	movw	r22, r14
    37aa:	80 e2       	ldi	r24, 0x20	; 32
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    37b2:	5a 94       	dec	r5
    37b4:	f7 cf       	rjmp	.-18     	; 0x37a4 <vfprintf+0x26e>
    37b6:	00 23       	and	r16, r16
    37b8:	29 f0       	breq	.+10     	; 0x37c4 <vfprintf+0x28e>
    37ba:	b7 01       	movw	r22, r14
    37bc:	80 2f       	mov	r24, r16
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    37c4:	93 fc       	sbrc	r9, 3
    37c6:	09 c0       	rjmp	.+18     	; 0x37da <vfprintf+0x2a4>
    37c8:	55 20       	and	r5, r5
    37ca:	39 f0       	breq	.+14     	; 0x37da <vfprintf+0x2a4>
    37cc:	b7 01       	movw	r22, r14
    37ce:	80 e3       	ldi	r24, 0x30	; 48
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    37d6:	5a 94       	dec	r5
    37d8:	f7 cf       	rjmp	.-18     	; 0x37c8 <vfprintf+0x292>
    37da:	97 fe       	sbrs	r9, 7
    37dc:	4c c0       	rjmp	.+152    	; 0x3876 <vfprintf+0x340>
    37de:	46 01       	movw	r8, r12
    37e0:	d7 fe       	sbrs	r13, 7
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <vfprintf+0x2b2>
    37e4:	81 2c       	mov	r8, r1
    37e6:	91 2c       	mov	r9, r1
    37e8:	c6 01       	movw	r24, r12
    37ea:	88 19       	sub	r24, r8
    37ec:	99 09       	sbc	r25, r9
    37ee:	f3 01       	movw	r30, r6
    37f0:	e8 0f       	add	r30, r24
    37f2:	f9 1f       	adc	r31, r25
    37f4:	fe 87       	std	Y+14, r31	; 0x0e
    37f6:	ed 87       	std	Y+13, r30	; 0x0d
    37f8:	96 01       	movw	r18, r12
    37fa:	24 19       	sub	r18, r4
    37fc:	31 09       	sbc	r19, r1
    37fe:	38 8b       	std	Y+16, r19	; 0x10
    3800:	2f 87       	std	Y+15, r18	; 0x0f
    3802:	01 2f       	mov	r16, r17
    3804:	10 e0       	ldi	r17, 0x00	; 0
    3806:	11 95       	neg	r17
    3808:	01 95       	neg	r16
    380a:	11 09       	sbc	r17, r1
    380c:	3f ef       	ldi	r19, 0xFF	; 255
    380e:	83 16       	cp	r8, r19
    3810:	93 06       	cpc	r9, r19
    3812:	29 f4       	brne	.+10     	; 0x381e <vfprintf+0x2e8>
    3814:	b7 01       	movw	r22, r14
    3816:	8e e2       	ldi	r24, 0x2E	; 46
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    381e:	c8 14       	cp	r12, r8
    3820:	d9 04       	cpc	r13, r9
    3822:	4c f0       	brlt	.+18     	; 0x3836 <vfprintf+0x300>
    3824:	8f 85       	ldd	r24, Y+15	; 0x0f
    3826:	98 89       	ldd	r25, Y+16	; 0x10
    3828:	88 15       	cp	r24, r8
    382a:	99 05       	cpc	r25, r9
    382c:	24 f4       	brge	.+8      	; 0x3836 <vfprintf+0x300>
    382e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3830:	fe 85       	ldd	r31, Y+14	; 0x0e
    3832:	81 81       	ldd	r24, Z+1	; 0x01
    3834:	01 c0       	rjmp	.+2      	; 0x3838 <vfprintf+0x302>
    3836:	80 e3       	ldi	r24, 0x30	; 48
    3838:	f1 e0       	ldi	r31, 0x01	; 1
    383a:	8f 1a       	sub	r8, r31
    383c:	91 08       	sbc	r9, r1
    383e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3840:	3e 85       	ldd	r19, Y+14	; 0x0e
    3842:	2f 5f       	subi	r18, 0xFF	; 255
    3844:	3f 4f       	sbci	r19, 0xFF	; 255
    3846:	3e 87       	std	Y+14, r19	; 0x0e
    3848:	2d 87       	std	Y+13, r18	; 0x0d
    384a:	80 16       	cp	r8, r16
    384c:	91 06       	cpc	r9, r17
    384e:	2c f0       	brlt	.+10     	; 0x385a <vfprintf+0x324>
    3850:	b7 01       	movw	r22, r14
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3858:	d9 cf       	rjmp	.-78     	; 0x380c <vfprintf+0x2d6>
    385a:	c8 14       	cp	r12, r8
    385c:	d9 04       	cpc	r13, r9
    385e:	41 f4       	brne	.+16     	; 0x3870 <vfprintf+0x33a>
    3860:	9a 81       	ldd	r25, Y+2	; 0x02
    3862:	96 33       	cpi	r25, 0x36	; 54
    3864:	20 f4       	brcc	.+8      	; 0x386e <vfprintf+0x338>
    3866:	95 33       	cpi	r25, 0x35	; 53
    3868:	19 f4       	brne	.+6      	; 0x3870 <vfprintf+0x33a>
    386a:	3c 85       	ldd	r19, Y+12	; 0x0c
    386c:	34 ff       	sbrs	r19, 4
    386e:	81 e3       	ldi	r24, 0x31	; 49
    3870:	b7 01       	movw	r22, r14
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	4e c0       	rjmp	.+156    	; 0x3912 <vfprintf+0x3dc>
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	81 33       	cpi	r24, 0x31	; 49
    387a:	19 f0       	breq	.+6      	; 0x3882 <vfprintf+0x34c>
    387c:	9c 85       	ldd	r25, Y+12	; 0x0c
    387e:	9f 7e       	andi	r25, 0xEF	; 239
    3880:	9c 87       	std	Y+12, r25	; 0x0c
    3882:	b7 01       	movw	r22, r14
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    388a:	11 11       	cpse	r17, r1
    388c:	05 c0       	rjmp	.+10     	; 0x3898 <vfprintf+0x362>
    388e:	94 fc       	sbrc	r9, 4
    3890:	18 c0       	rjmp	.+48     	; 0x38c2 <vfprintf+0x38c>
    3892:	85 e6       	ldi	r24, 0x65	; 101
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	17 c0       	rjmp	.+46     	; 0x38c6 <vfprintf+0x390>
    3898:	b7 01       	movw	r22, r14
    389a:	8e e2       	ldi	r24, 0x2E	; 46
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    38a2:	1e 5f       	subi	r17, 0xFE	; 254
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	01 e0       	ldi	r16, 0x01	; 1
    38a8:	08 0f       	add	r16, r24
    38aa:	f3 01       	movw	r30, r6
    38ac:	e8 0f       	add	r30, r24
    38ae:	f1 1d       	adc	r31, r1
    38b0:	80 81       	ld	r24, Z
    38b2:	b7 01       	movw	r22, r14
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    38ba:	80 2f       	mov	r24, r16
    38bc:	01 13       	cpse	r16, r17
    38be:	f3 cf       	rjmp	.-26     	; 0x38a6 <vfprintf+0x370>
    38c0:	e6 cf       	rjmp	.-52     	; 0x388e <vfprintf+0x358>
    38c2:	85 e4       	ldi	r24, 0x45	; 69
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	b7 01       	movw	r22, r14
    38c8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    38cc:	d7 fc       	sbrc	r13, 7
    38ce:	06 c0       	rjmp	.+12     	; 0x38dc <vfprintf+0x3a6>
    38d0:	c1 14       	cp	r12, r1
    38d2:	d1 04       	cpc	r13, r1
    38d4:	41 f4       	brne	.+16     	; 0x38e6 <vfprintf+0x3b0>
    38d6:	ec 85       	ldd	r30, Y+12	; 0x0c
    38d8:	e4 ff       	sbrs	r30, 4
    38da:	05 c0       	rjmp	.+10     	; 0x38e6 <vfprintf+0x3b0>
    38dc:	d1 94       	neg	r13
    38de:	c1 94       	neg	r12
    38e0:	d1 08       	sbc	r13, r1
    38e2:	8d e2       	ldi	r24, 0x2D	; 45
    38e4:	01 c0       	rjmp	.+2      	; 0x38e8 <vfprintf+0x3b2>
    38e6:	8b e2       	ldi	r24, 0x2B	; 43
    38e8:	b7 01       	movw	r22, r14
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    38f0:	80 e3       	ldi	r24, 0x30	; 48
    38f2:	2a e0       	ldi	r18, 0x0A	; 10
    38f4:	c2 16       	cp	r12, r18
    38f6:	d1 04       	cpc	r13, r1
    38f8:	2c f0       	brlt	.+10     	; 0x3904 <vfprintf+0x3ce>
    38fa:	8f 5f       	subi	r24, 0xFF	; 255
    38fc:	fa e0       	ldi	r31, 0x0A	; 10
    38fe:	cf 1a       	sub	r12, r31
    3900:	d1 08       	sbc	r13, r1
    3902:	f7 cf       	rjmp	.-18     	; 0x38f2 <vfprintf+0x3bc>
    3904:	b7 01       	movw	r22, r14
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    390c:	b7 01       	movw	r22, r14
    390e:	c6 01       	movw	r24, r12
    3910:	c0 96       	adiw	r24, 0x30	; 48
    3912:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3916:	54 c1       	rjmp	.+680    	; 0x3bc0 <vfprintf+0x68a>
    3918:	83 36       	cpi	r24, 0x63	; 99
    391a:	31 f0       	breq	.+12     	; 0x3928 <vfprintf+0x3f2>
    391c:	83 37       	cpi	r24, 0x73	; 115
    391e:	79 f0       	breq	.+30     	; 0x393e <vfprintf+0x408>
    3920:	83 35       	cpi	r24, 0x53	; 83
    3922:	09 f0       	breq	.+2      	; 0x3926 <vfprintf+0x3f0>
    3924:	56 c0       	rjmp	.+172    	; 0x39d2 <vfprintf+0x49c>
    3926:	20 c0       	rjmp	.+64     	; 0x3968 <vfprintf+0x432>
    3928:	56 01       	movw	r10, r12
    392a:	32 e0       	ldi	r19, 0x02	; 2
    392c:	a3 0e       	add	r10, r19
    392e:	b1 1c       	adc	r11, r1
    3930:	f6 01       	movw	r30, r12
    3932:	80 81       	ld	r24, Z
    3934:	89 83       	std	Y+1, r24	; 0x01
    3936:	01 e0       	ldi	r16, 0x01	; 1
    3938:	10 e0       	ldi	r17, 0x00	; 0
    393a:	63 01       	movw	r12, r6
    393c:	12 c0       	rjmp	.+36     	; 0x3962 <vfprintf+0x42c>
    393e:	56 01       	movw	r10, r12
    3940:	f2 e0       	ldi	r31, 0x02	; 2
    3942:	af 0e       	add	r10, r31
    3944:	b1 1c       	adc	r11, r1
    3946:	f6 01       	movw	r30, r12
    3948:	c0 80       	ld	r12, Z
    394a:	d1 80       	ldd	r13, Z+1	; 0x01
    394c:	96 fe       	sbrs	r9, 6
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <vfprintf+0x420>
    3950:	61 2f       	mov	r22, r17
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	02 c0       	rjmp	.+4      	; 0x395a <vfprintf+0x424>
    3956:	6f ef       	ldi	r22, 0xFF	; 255
    3958:	7f ef       	ldi	r23, 0xFF	; 255
    395a:	c6 01       	movw	r24, r12
    395c:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <strnlen>
    3960:	8c 01       	movw	r16, r24
    3962:	f9 2d       	mov	r31, r9
    3964:	ff 77       	andi	r31, 0x7F	; 127
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <vfprintf+0x45a>
    3968:	56 01       	movw	r10, r12
    396a:	22 e0       	ldi	r18, 0x02	; 2
    396c:	a2 0e       	add	r10, r18
    396e:	b1 1c       	adc	r11, r1
    3970:	f6 01       	movw	r30, r12
    3972:	c0 80       	ld	r12, Z
    3974:	d1 80       	ldd	r13, Z+1	; 0x01
    3976:	96 fe       	sbrs	r9, 6
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <vfprintf+0x44a>
    397a:	61 2f       	mov	r22, r17
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <vfprintf+0x44e>
    3980:	6f ef       	ldi	r22, 0xFF	; 255
    3982:	7f ef       	ldi	r23, 0xFF	; 255
    3984:	c6 01       	movw	r24, r12
    3986:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <strnlen_P>
    398a:	8c 01       	movw	r16, r24
    398c:	f9 2d       	mov	r31, r9
    398e:	f0 68       	ori	r31, 0x80	; 128
    3990:	9f 2e       	mov	r9, r31
    3992:	f3 fd       	sbrc	r31, 3
    3994:	1a c0       	rjmp	.+52     	; 0x39ca <vfprintf+0x494>
    3996:	85 2d       	mov	r24, r5
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	08 17       	cp	r16, r24
    399c:	19 07       	cpc	r17, r25
    399e:	a8 f4       	brcc	.+42     	; 0x39ca <vfprintf+0x494>
    39a0:	b7 01       	movw	r22, r14
    39a2:	80 e2       	ldi	r24, 0x20	; 32
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    39aa:	5a 94       	dec	r5
    39ac:	f4 cf       	rjmp	.-24     	; 0x3996 <vfprintf+0x460>
    39ae:	f6 01       	movw	r30, r12
    39b0:	97 fc       	sbrc	r9, 7
    39b2:	85 91       	lpm	r24, Z+
    39b4:	97 fe       	sbrs	r9, 7
    39b6:	81 91       	ld	r24, Z+
    39b8:	6f 01       	movw	r12, r30
    39ba:	b7 01       	movw	r22, r14
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    39c2:	51 10       	cpse	r5, r1
    39c4:	5a 94       	dec	r5
    39c6:	01 50       	subi	r16, 0x01	; 1
    39c8:	11 09       	sbc	r17, r1
    39ca:	01 15       	cp	r16, r1
    39cc:	11 05       	cpc	r17, r1
    39ce:	79 f7       	brne	.-34     	; 0x39ae <vfprintf+0x478>
    39d0:	f7 c0       	rjmp	.+494    	; 0x3bc0 <vfprintf+0x68a>
    39d2:	84 36       	cpi	r24, 0x64	; 100
    39d4:	11 f0       	breq	.+4      	; 0x39da <vfprintf+0x4a4>
    39d6:	89 36       	cpi	r24, 0x69	; 105
    39d8:	61 f5       	brne	.+88     	; 0x3a32 <vfprintf+0x4fc>
    39da:	56 01       	movw	r10, r12
    39dc:	97 fe       	sbrs	r9, 7
    39de:	09 c0       	rjmp	.+18     	; 0x39f2 <vfprintf+0x4bc>
    39e0:	24 e0       	ldi	r18, 0x04	; 4
    39e2:	a2 0e       	add	r10, r18
    39e4:	b1 1c       	adc	r11, r1
    39e6:	f6 01       	movw	r30, r12
    39e8:	60 81       	ld	r22, Z
    39ea:	71 81       	ldd	r23, Z+1	; 0x01
    39ec:	82 81       	ldd	r24, Z+2	; 0x02
    39ee:	93 81       	ldd	r25, Z+3	; 0x03
    39f0:	0a c0       	rjmp	.+20     	; 0x3a06 <vfprintf+0x4d0>
    39f2:	f2 e0       	ldi	r31, 0x02	; 2
    39f4:	af 0e       	add	r10, r31
    39f6:	b1 1c       	adc	r11, r1
    39f8:	f6 01       	movw	r30, r12
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	07 2e       	mov	r0, r23
    3a00:	00 0c       	add	r0, r0
    3a02:	88 0b       	sbc	r24, r24
    3a04:	99 0b       	sbc	r25, r25
    3a06:	f9 2d       	mov	r31, r9
    3a08:	ff 76       	andi	r31, 0x6F	; 111
    3a0a:	9f 2e       	mov	r9, r31
    3a0c:	97 ff       	sbrs	r25, 7
    3a0e:	09 c0       	rjmp	.+18     	; 0x3a22 <vfprintf+0x4ec>
    3a10:	90 95       	com	r25
    3a12:	80 95       	com	r24
    3a14:	70 95       	com	r23
    3a16:	61 95       	neg	r22
    3a18:	7f 4f       	sbci	r23, 0xFF	; 255
    3a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1e:	f0 68       	ori	r31, 0x80	; 128
    3a20:	9f 2e       	mov	r9, r31
    3a22:	2a e0       	ldi	r18, 0x0A	; 10
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	a3 01       	movw	r20, r6
    3a28:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__ultoa_invert>
    3a2c:	c8 2e       	mov	r12, r24
    3a2e:	c6 18       	sub	r12, r6
    3a30:	3f c0       	rjmp	.+126    	; 0x3ab0 <vfprintf+0x57a>
    3a32:	09 2d       	mov	r16, r9
    3a34:	85 37       	cpi	r24, 0x75	; 117
    3a36:	21 f4       	brne	.+8      	; 0x3a40 <vfprintf+0x50a>
    3a38:	0f 7e       	andi	r16, 0xEF	; 239
    3a3a:	2a e0       	ldi	r18, 0x0A	; 10
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	1d c0       	rjmp	.+58     	; 0x3a7a <vfprintf+0x544>
    3a40:	09 7f       	andi	r16, 0xF9	; 249
    3a42:	8f 36       	cpi	r24, 0x6F	; 111
    3a44:	91 f0       	breq	.+36     	; 0x3a6a <vfprintf+0x534>
    3a46:	18 f4       	brcc	.+6      	; 0x3a4e <vfprintf+0x518>
    3a48:	88 35       	cpi	r24, 0x58	; 88
    3a4a:	59 f0       	breq	.+22     	; 0x3a62 <vfprintf+0x52c>
    3a4c:	c3 c0       	rjmp	.+390    	; 0x3bd4 <vfprintf+0x69e>
    3a4e:	80 37       	cpi	r24, 0x70	; 112
    3a50:	19 f0       	breq	.+6      	; 0x3a58 <vfprintf+0x522>
    3a52:	88 37       	cpi	r24, 0x78	; 120
    3a54:	11 f0       	breq	.+4      	; 0x3a5a <vfprintf+0x524>
    3a56:	be c0       	rjmp	.+380    	; 0x3bd4 <vfprintf+0x69e>
    3a58:	00 61       	ori	r16, 0x10	; 16
    3a5a:	04 ff       	sbrs	r16, 4
    3a5c:	09 c0       	rjmp	.+18     	; 0x3a70 <vfprintf+0x53a>
    3a5e:	04 60       	ori	r16, 0x04	; 4
    3a60:	07 c0       	rjmp	.+14     	; 0x3a70 <vfprintf+0x53a>
    3a62:	94 fe       	sbrs	r9, 4
    3a64:	08 c0       	rjmp	.+16     	; 0x3a76 <vfprintf+0x540>
    3a66:	06 60       	ori	r16, 0x06	; 6
    3a68:	06 c0       	rjmp	.+12     	; 0x3a76 <vfprintf+0x540>
    3a6a:	28 e0       	ldi	r18, 0x08	; 8
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	05 c0       	rjmp	.+10     	; 0x3a7a <vfprintf+0x544>
    3a70:	20 e1       	ldi	r18, 0x10	; 16
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	02 c0       	rjmp	.+4      	; 0x3a7a <vfprintf+0x544>
    3a76:	20 e1       	ldi	r18, 0x10	; 16
    3a78:	32 e0       	ldi	r19, 0x02	; 2
    3a7a:	56 01       	movw	r10, r12
    3a7c:	07 ff       	sbrs	r16, 7
    3a7e:	09 c0       	rjmp	.+18     	; 0x3a92 <vfprintf+0x55c>
    3a80:	84 e0       	ldi	r24, 0x04	; 4
    3a82:	a8 0e       	add	r10, r24
    3a84:	b1 1c       	adc	r11, r1
    3a86:	f6 01       	movw	r30, r12
    3a88:	60 81       	ld	r22, Z
    3a8a:	71 81       	ldd	r23, Z+1	; 0x01
    3a8c:	82 81       	ldd	r24, Z+2	; 0x02
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <vfprintf+0x56c>
    3a92:	f2 e0       	ldi	r31, 0x02	; 2
    3a94:	af 0e       	add	r10, r31
    3a96:	b1 1c       	adc	r11, r1
    3a98:	f6 01       	movw	r30, r12
    3a9a:	60 81       	ld	r22, Z
    3a9c:	71 81       	ldd	r23, Z+1	; 0x01
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a3 01       	movw	r20, r6
    3aa4:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <__ultoa_invert>
    3aa8:	c8 2e       	mov	r12, r24
    3aaa:	c6 18       	sub	r12, r6
    3aac:	0f 77       	andi	r16, 0x7F	; 127
    3aae:	90 2e       	mov	r9, r16
    3ab0:	96 fe       	sbrs	r9, 6
    3ab2:	0b c0       	rjmp	.+22     	; 0x3aca <vfprintf+0x594>
    3ab4:	09 2d       	mov	r16, r9
    3ab6:	0e 7f       	andi	r16, 0xFE	; 254
    3ab8:	c1 16       	cp	r12, r17
    3aba:	50 f4       	brcc	.+20     	; 0x3ad0 <vfprintf+0x59a>
    3abc:	94 fe       	sbrs	r9, 4
    3abe:	0a c0       	rjmp	.+20     	; 0x3ad4 <vfprintf+0x59e>
    3ac0:	92 fc       	sbrc	r9, 2
    3ac2:	08 c0       	rjmp	.+16     	; 0x3ad4 <vfprintf+0x59e>
    3ac4:	09 2d       	mov	r16, r9
    3ac6:	0e 7e       	andi	r16, 0xEE	; 238
    3ac8:	05 c0       	rjmp	.+10     	; 0x3ad4 <vfprintf+0x59e>
    3aca:	dc 2c       	mov	r13, r12
    3acc:	09 2d       	mov	r16, r9
    3ace:	03 c0       	rjmp	.+6      	; 0x3ad6 <vfprintf+0x5a0>
    3ad0:	dc 2c       	mov	r13, r12
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <vfprintf+0x5a0>
    3ad4:	d1 2e       	mov	r13, r17
    3ad6:	04 ff       	sbrs	r16, 4
    3ad8:	0d c0       	rjmp	.+26     	; 0x3af4 <vfprintf+0x5be>
    3ada:	fe 01       	movw	r30, r28
    3adc:	ec 0d       	add	r30, r12
    3ade:	f1 1d       	adc	r31, r1
    3ae0:	80 81       	ld	r24, Z
    3ae2:	80 33       	cpi	r24, 0x30	; 48
    3ae4:	11 f4       	brne	.+4      	; 0x3aea <vfprintf+0x5b4>
    3ae6:	09 7e       	andi	r16, 0xE9	; 233
    3ae8:	09 c0       	rjmp	.+18     	; 0x3afc <vfprintf+0x5c6>
    3aea:	02 ff       	sbrs	r16, 2
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <vfprintf+0x5c4>
    3aee:	d3 94       	inc	r13
    3af0:	d3 94       	inc	r13
    3af2:	04 c0       	rjmp	.+8      	; 0x3afc <vfprintf+0x5c6>
    3af4:	80 2f       	mov	r24, r16
    3af6:	86 78       	andi	r24, 0x86	; 134
    3af8:	09 f0       	breq	.+2      	; 0x3afc <vfprintf+0x5c6>
    3afa:	d3 94       	inc	r13
    3afc:	03 fd       	sbrc	r16, 3
    3afe:	11 c0       	rjmp	.+34     	; 0x3b22 <vfprintf+0x5ec>
    3b00:	00 ff       	sbrs	r16, 0
    3b02:	06 c0       	rjmp	.+12     	; 0x3b10 <vfprintf+0x5da>
    3b04:	1c 2d       	mov	r17, r12
    3b06:	d5 14       	cp	r13, r5
    3b08:	80 f4       	brcc	.+32     	; 0x3b2a <vfprintf+0x5f4>
    3b0a:	15 0d       	add	r17, r5
    3b0c:	1d 19       	sub	r17, r13
    3b0e:	0d c0       	rjmp	.+26     	; 0x3b2a <vfprintf+0x5f4>
    3b10:	d5 14       	cp	r13, r5
    3b12:	58 f4       	brcc	.+22     	; 0x3b2a <vfprintf+0x5f4>
    3b14:	b7 01       	movw	r22, r14
    3b16:	80 e2       	ldi	r24, 0x20	; 32
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3b1e:	d3 94       	inc	r13
    3b20:	f7 cf       	rjmp	.-18     	; 0x3b10 <vfprintf+0x5da>
    3b22:	d5 14       	cp	r13, r5
    3b24:	10 f4       	brcc	.+4      	; 0x3b2a <vfprintf+0x5f4>
    3b26:	5d 18       	sub	r5, r13
    3b28:	01 c0       	rjmp	.+2      	; 0x3b2c <vfprintf+0x5f6>
    3b2a:	51 2c       	mov	r5, r1
    3b2c:	04 ff       	sbrs	r16, 4
    3b2e:	10 c0       	rjmp	.+32     	; 0x3b50 <vfprintf+0x61a>
    3b30:	b7 01       	movw	r22, r14
    3b32:	80 e3       	ldi	r24, 0x30	; 48
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3b3a:	02 ff       	sbrs	r16, 2
    3b3c:	17 c0       	rjmp	.+46     	; 0x3b6c <vfprintf+0x636>
    3b3e:	01 fd       	sbrc	r16, 1
    3b40:	03 c0       	rjmp	.+6      	; 0x3b48 <vfprintf+0x612>
    3b42:	88 e7       	ldi	r24, 0x78	; 120
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <vfprintf+0x616>
    3b48:	88 e5       	ldi	r24, 0x58	; 88
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	b7 01       	movw	r22, r14
    3b4e:	0c c0       	rjmp	.+24     	; 0x3b68 <vfprintf+0x632>
    3b50:	80 2f       	mov	r24, r16
    3b52:	86 78       	andi	r24, 0x86	; 134
    3b54:	59 f0       	breq	.+22     	; 0x3b6c <vfprintf+0x636>
    3b56:	01 ff       	sbrs	r16, 1
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <vfprintf+0x628>
    3b5a:	8b e2       	ldi	r24, 0x2B	; 43
    3b5c:	01 c0       	rjmp	.+2      	; 0x3b60 <vfprintf+0x62a>
    3b5e:	80 e2       	ldi	r24, 0x20	; 32
    3b60:	07 fd       	sbrc	r16, 7
    3b62:	8d e2       	ldi	r24, 0x2D	; 45
    3b64:	b7 01       	movw	r22, r14
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3b6c:	c1 16       	cp	r12, r17
    3b6e:	38 f4       	brcc	.+14     	; 0x3b7e <vfprintf+0x648>
    3b70:	b7 01       	movw	r22, r14
    3b72:	80 e3       	ldi	r24, 0x30	; 48
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3b7a:	11 50       	subi	r17, 0x01	; 1
    3b7c:	f7 cf       	rjmp	.-18     	; 0x3b6c <vfprintf+0x636>
    3b7e:	ca 94       	dec	r12
    3b80:	f3 01       	movw	r30, r6
    3b82:	ec 0d       	add	r30, r12
    3b84:	f1 1d       	adc	r31, r1
    3b86:	80 81       	ld	r24, Z
    3b88:	b7 01       	movw	r22, r14
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3b90:	c1 10       	cpse	r12, r1
    3b92:	f5 cf       	rjmp	.-22     	; 0x3b7e <vfprintf+0x648>
    3b94:	15 c0       	rjmp	.+42     	; 0x3bc0 <vfprintf+0x68a>
    3b96:	f4 e0       	ldi	r31, 0x04	; 4
    3b98:	f5 15       	cp	r31, r5
    3b9a:	60 f5       	brcc	.+88     	; 0x3bf4 <vfprintf+0x6be>
    3b9c:	84 e0       	ldi	r24, 0x04	; 4
    3b9e:	58 1a       	sub	r5, r24
    3ba0:	93 fe       	sbrs	r9, 3
    3ba2:	1f c0       	rjmp	.+62     	; 0x3be2 <vfprintf+0x6ac>
    3ba4:	01 11       	cpse	r16, r1
    3ba6:	27 c0       	rjmp	.+78     	; 0x3bf6 <vfprintf+0x6c0>
    3ba8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3baa:	23 ff       	sbrs	r18, 3
    3bac:	2a c0       	rjmp	.+84     	; 0x3c02 <vfprintf+0x6cc>
    3bae:	02 e5       	ldi	r16, 0x52	; 82
    3bb0:	12 e0       	ldi	r17, 0x02	; 2
    3bb2:	39 2d       	mov	r19, r9
    3bb4:	30 71       	andi	r19, 0x10	; 16
    3bb6:	93 2e       	mov	r9, r19
    3bb8:	f8 01       	movw	r30, r16
    3bba:	84 91       	lpm	r24, Z
    3bbc:	81 11       	cpse	r24, r1
    3bbe:	24 c0       	rjmp	.+72     	; 0x3c08 <vfprintf+0x6d2>
    3bc0:	55 20       	and	r5, r5
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <vfprintf+0x690>
    3bc4:	e4 cc       	rjmp	.-1592   	; 0x358e <vfprintf+0x58>
    3bc6:	b7 01       	movw	r22, r14
    3bc8:	80 e2       	ldi	r24, 0x20	; 32
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3bd0:	5a 94       	dec	r5
    3bd2:	f6 cf       	rjmp	.-20     	; 0x3bc0 <vfprintf+0x68a>
    3bd4:	f7 01       	movw	r30, r14
    3bd6:	86 81       	ldd	r24, Z+6	; 0x06
    3bd8:	97 81       	ldd	r25, Z+7	; 0x07
    3bda:	26 c0       	rjmp	.+76     	; 0x3c28 <vfprintf+0x6f2>
    3bdc:	8f ef       	ldi	r24, 0xFF	; 255
    3bde:	9f ef       	ldi	r25, 0xFF	; 255
    3be0:	23 c0       	rjmp	.+70     	; 0x3c28 <vfprintf+0x6f2>
    3be2:	b7 01       	movw	r22, r14
    3be4:	80 e2       	ldi	r24, 0x20	; 32
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3bec:	5a 94       	dec	r5
    3bee:	51 10       	cpse	r5, r1
    3bf0:	f8 cf       	rjmp	.-16     	; 0x3be2 <vfprintf+0x6ac>
    3bf2:	d8 cf       	rjmp	.-80     	; 0x3ba4 <vfprintf+0x66e>
    3bf4:	51 2c       	mov	r5, r1
    3bf6:	b7 01       	movw	r22, r14
    3bf8:	80 2f       	mov	r24, r16
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3c00:	d3 cf       	rjmp	.-90     	; 0x3ba8 <vfprintf+0x672>
    3c02:	06 e5       	ldi	r16, 0x56	; 86
    3c04:	12 e0       	ldi	r17, 0x02	; 2
    3c06:	d5 cf       	rjmp	.-86     	; 0x3bb2 <vfprintf+0x67c>
    3c08:	91 10       	cpse	r9, r1
    3c0a:	80 52       	subi	r24, 0x20	; 32
    3c0c:	b7 01       	movw	r22, r14
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <fputc>
    3c14:	0f 5f       	subi	r16, 0xFF	; 255
    3c16:	1f 4f       	sbci	r17, 0xFF	; 255
    3c18:	cf cf       	rjmp	.-98     	; 0x3bb8 <vfprintf+0x682>
    3c1a:	23 e0       	ldi	r18, 0x03	; 3
    3c1c:	25 15       	cp	r18, r5
    3c1e:	10 f4       	brcc	.+4      	; 0x3c24 <vfprintf+0x6ee>
    3c20:	83 e0       	ldi	r24, 0x03	; 3
    3c22:	bd cf       	rjmp	.-134    	; 0x3b9e <vfprintf+0x668>
    3c24:	51 2c       	mov	r5, r1
    3c26:	c0 cf       	rjmp	.-128    	; 0x3ba8 <vfprintf+0x672>
    3c28:	60 96       	adiw	r28, 0x10	; 16
    3c2a:	e2 e1       	ldi	r30, 0x12	; 18
    3c2c:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__>

00003c30 <__divmodhi4>:
    3c30:	97 fb       	bst	r25, 7
    3c32:	07 2e       	mov	r0, r23
    3c34:	16 f4       	brtc	.+4      	; 0x3c3a <__divmodhi4+0xa>
    3c36:	00 94       	com	r0
    3c38:	07 d0       	rcall	.+14     	; 0x3c48 <__divmodhi4_neg1>
    3c3a:	77 fd       	sbrc	r23, 7
    3c3c:	09 d0       	rcall	.+18     	; 0x3c50 <__divmodhi4_neg2>
    3c3e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodhi4>
    3c42:	07 fc       	sbrc	r0, 7
    3c44:	05 d0       	rcall	.+10     	; 0x3c50 <__divmodhi4_neg2>
    3c46:	3e f4       	brtc	.+14     	; 0x3c56 <__divmodhi4_exit>

00003c48 <__divmodhi4_neg1>:
    3c48:	90 95       	com	r25
    3c4a:	81 95       	neg	r24
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	08 95       	ret

00003c50 <__divmodhi4_neg2>:
    3c50:	70 95       	com	r23
    3c52:	61 95       	neg	r22
    3c54:	7f 4f       	sbci	r23, 0xFF	; 255

00003c56 <__divmodhi4_exit>:
    3c56:	08 95       	ret

00003c58 <__tablejump2__>:
    3c58:	ee 0f       	add	r30, r30
    3c5a:	ff 1f       	adc	r31, r31
    3c5c:	05 90       	lpm	r0, Z+
    3c5e:	f4 91       	lpm	r31, Z
    3c60:	e0 2d       	mov	r30, r0
    3c62:	09 94       	ijmp

00003c64 <__umulhisi3>:
    3c64:	a2 9f       	mul	r26, r18
    3c66:	b0 01       	movw	r22, r0
    3c68:	b3 9f       	mul	r27, r19
    3c6a:	c0 01       	movw	r24, r0
    3c6c:	a3 9f       	mul	r26, r19
    3c6e:	70 0d       	add	r23, r0
    3c70:	81 1d       	adc	r24, r1
    3c72:	11 24       	eor	r1, r1
    3c74:	91 1d       	adc	r25, r1
    3c76:	b2 9f       	mul	r27, r18
    3c78:	70 0d       	add	r23, r0
    3c7a:	81 1d       	adc	r24, r1
    3c7c:	11 24       	eor	r1, r1
    3c7e:	91 1d       	adc	r25, r1
    3c80:	08 95       	ret

00003c82 <__prologue_saves__>:
    3c82:	2f 92       	push	r2
    3c84:	3f 92       	push	r3
    3c86:	4f 92       	push	r4
    3c88:	5f 92       	push	r5
    3c8a:	6f 92       	push	r6
    3c8c:	7f 92       	push	r7
    3c8e:	8f 92       	push	r8
    3c90:	9f 92       	push	r9
    3c92:	af 92       	push	r10
    3c94:	bf 92       	push	r11
    3c96:	cf 92       	push	r12
    3c98:	df 92       	push	r13
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
    3caa:	ca 1b       	sub	r28, r26
    3cac:	db 0b       	sbc	r29, r27
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	09 94       	ijmp

00003cba <__epilogue_restores__>:
    3cba:	2a 88       	ldd	r2, Y+18	; 0x12
    3cbc:	39 88       	ldd	r3, Y+17	; 0x11
    3cbe:	48 88       	ldd	r4, Y+16	; 0x10
    3cc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cca:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ccc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cce:	c8 84       	ldd	r12, Y+8	; 0x08
    3cd0:	df 80       	ldd	r13, Y+7	; 0x07
    3cd2:	ee 80       	ldd	r14, Y+6	; 0x06
    3cd4:	fd 80       	ldd	r15, Y+5	; 0x05
    3cd6:	0c 81       	ldd	r16, Y+4	; 0x04
    3cd8:	1b 81       	ldd	r17, Y+3	; 0x03
    3cda:	aa 81       	ldd	r26, Y+2	; 0x02
    3cdc:	b9 81       	ldd	r27, Y+1	; 0x01
    3cde:	ce 0f       	add	r28, r30
    3ce0:	d1 1d       	adc	r29, r1
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	ed 01       	movw	r28, r26
    3cee:	08 95       	ret

00003cf0 <__udivmodhi4>:
    3cf0:	aa 1b       	sub	r26, r26
    3cf2:	bb 1b       	sub	r27, r27
    3cf4:	51 e1       	ldi	r21, 0x11	; 17
    3cf6:	07 c0       	rjmp	.+14     	; 0x3d06 <__udivmodhi4_ep>

00003cf8 <__udivmodhi4_loop>:
    3cf8:	aa 1f       	adc	r26, r26
    3cfa:	bb 1f       	adc	r27, r27
    3cfc:	a6 17       	cp	r26, r22
    3cfe:	b7 07       	cpc	r27, r23
    3d00:	10 f0       	brcs	.+4      	; 0x3d06 <__udivmodhi4_ep>
    3d02:	a6 1b       	sub	r26, r22
    3d04:	b7 0b       	sbc	r27, r23

00003d06 <__udivmodhi4_ep>:
    3d06:	88 1f       	adc	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	5a 95       	dec	r21
    3d0c:	a9 f7       	brne	.-22     	; 0x3cf8 <__udivmodhi4_loop>
    3d0e:	80 95       	com	r24
    3d10:	90 95       	com	r25
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	08 95       	ret

00003d18 <__ftoa_engine>:
    3d18:	28 30       	cpi	r18, 0x08	; 8
    3d1a:	08 f0       	brcs	.+2      	; 0x3d1e <__ftoa_engine+0x6>
    3d1c:	27 e0       	ldi	r18, 0x07	; 7
    3d1e:	33 27       	eor	r19, r19
    3d20:	da 01       	movw	r26, r20
    3d22:	99 0f       	add	r25, r25
    3d24:	31 1d       	adc	r19, r1
    3d26:	87 fd       	sbrc	r24, 7
    3d28:	91 60       	ori	r25, 0x01	; 1
    3d2a:	00 96       	adiw	r24, 0x00	; 0
    3d2c:	61 05       	cpc	r22, r1
    3d2e:	71 05       	cpc	r23, r1
    3d30:	39 f4       	brne	.+14     	; 0x3d40 <__ftoa_engine+0x28>
    3d32:	32 60       	ori	r19, 0x02	; 2
    3d34:	2e 5f       	subi	r18, 0xFE	; 254
    3d36:	3d 93       	st	X+, r19
    3d38:	30 e3       	ldi	r19, 0x30	; 48
    3d3a:	2a 95       	dec	r18
    3d3c:	e1 f7       	brne	.-8      	; 0x3d36 <__ftoa_engine+0x1e>
    3d3e:	08 95       	ret
    3d40:	9f 3f       	cpi	r25, 0xFF	; 255
    3d42:	30 f0       	brcs	.+12     	; 0x3d50 <__ftoa_engine+0x38>
    3d44:	80 38       	cpi	r24, 0x80	; 128
    3d46:	71 05       	cpc	r23, r1
    3d48:	61 05       	cpc	r22, r1
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <__ftoa_engine+0x36>
    3d4c:	3c 5f       	subi	r19, 0xFC	; 252
    3d4e:	3c 5f       	subi	r19, 0xFC	; 252
    3d50:	3d 93       	st	X+, r19
    3d52:	91 30       	cpi	r25, 0x01	; 1
    3d54:	08 f0       	brcs	.+2      	; 0x3d58 <__ftoa_engine+0x40>
    3d56:	80 68       	ori	r24, 0x80	; 128
    3d58:	91 1d       	adc	r25, r1
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	1f 93       	push	r17
    3d60:	0f 93       	push	r16
    3d62:	ff 92       	push	r15
    3d64:	ef 92       	push	r14
    3d66:	19 2f       	mov	r17, r25
    3d68:	98 7f       	andi	r25, 0xF8	; 248
    3d6a:	96 95       	lsr	r25
    3d6c:	e9 2f       	mov	r30, r25
    3d6e:	96 95       	lsr	r25
    3d70:	96 95       	lsr	r25
    3d72:	e9 0f       	add	r30, r25
    3d74:	ff 27       	eor	r31, r31
    3d76:	ec 54       	subi	r30, 0x4C	; 76
    3d78:	fd 4f       	sbci	r31, 0xFD	; 253
    3d7a:	99 27       	eor	r25, r25
    3d7c:	33 27       	eor	r19, r19
    3d7e:	ee 24       	eor	r14, r14
    3d80:	ff 24       	eor	r15, r15
    3d82:	a7 01       	movw	r20, r14
    3d84:	e7 01       	movw	r28, r14
    3d86:	05 90       	lpm	r0, Z+
    3d88:	08 94       	sec
    3d8a:	07 94       	ror	r0
    3d8c:	28 f4       	brcc	.+10     	; 0x3d98 <__ftoa_engine+0x80>
    3d8e:	36 0f       	add	r19, r22
    3d90:	e7 1e       	adc	r14, r23
    3d92:	f8 1e       	adc	r15, r24
    3d94:	49 1f       	adc	r20, r25
    3d96:	51 1d       	adc	r21, r1
    3d98:	66 0f       	add	r22, r22
    3d9a:	77 1f       	adc	r23, r23
    3d9c:	88 1f       	adc	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	06 94       	lsr	r0
    3da2:	a1 f7       	brne	.-24     	; 0x3d8c <__ftoa_engine+0x74>
    3da4:	05 90       	lpm	r0, Z+
    3da6:	07 94       	ror	r0
    3da8:	28 f4       	brcc	.+10     	; 0x3db4 <__ftoa_engine+0x9c>
    3daa:	e7 0e       	add	r14, r23
    3dac:	f8 1e       	adc	r15, r24
    3dae:	49 1f       	adc	r20, r25
    3db0:	56 1f       	adc	r21, r22
    3db2:	c1 1d       	adc	r28, r1
    3db4:	77 0f       	add	r23, r23
    3db6:	88 1f       	adc	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	66 1f       	adc	r22, r22
    3dbc:	06 94       	lsr	r0
    3dbe:	a1 f7       	brne	.-24     	; 0x3da8 <__ftoa_engine+0x90>
    3dc0:	05 90       	lpm	r0, Z+
    3dc2:	07 94       	ror	r0
    3dc4:	28 f4       	brcc	.+10     	; 0x3dd0 <__ftoa_engine+0xb8>
    3dc6:	f8 0e       	add	r15, r24
    3dc8:	49 1f       	adc	r20, r25
    3dca:	56 1f       	adc	r21, r22
    3dcc:	c7 1f       	adc	r28, r23
    3dce:	d1 1d       	adc	r29, r1
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	66 1f       	adc	r22, r22
    3dd6:	77 1f       	adc	r23, r23
    3dd8:	06 94       	lsr	r0
    3dda:	a1 f7       	brne	.-24     	; 0x3dc4 <__ftoa_engine+0xac>
    3ddc:	05 90       	lpm	r0, Z+
    3dde:	07 94       	ror	r0
    3de0:	20 f4       	brcc	.+8      	; 0x3dea <__ftoa_engine+0xd2>
    3de2:	49 0f       	add	r20, r25
    3de4:	56 1f       	adc	r21, r22
    3de6:	c7 1f       	adc	r28, r23
    3de8:	d8 1f       	adc	r29, r24
    3dea:	99 0f       	add	r25, r25
    3dec:	66 1f       	adc	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	06 94       	lsr	r0
    3df4:	a9 f7       	brne	.-22     	; 0x3de0 <__ftoa_engine+0xc8>
    3df6:	84 91       	lpm	r24, Z
    3df8:	10 95       	com	r17
    3dfa:	17 70       	andi	r17, 0x07	; 7
    3dfc:	41 f0       	breq	.+16     	; 0x3e0e <__ftoa_engine+0xf6>
    3dfe:	d6 95       	lsr	r29
    3e00:	c7 95       	ror	r28
    3e02:	57 95       	ror	r21
    3e04:	47 95       	ror	r20
    3e06:	f7 94       	ror	r15
    3e08:	e7 94       	ror	r14
    3e0a:	1a 95       	dec	r17
    3e0c:	c1 f7       	brne	.-16     	; 0x3dfe <__ftoa_engine+0xe6>
    3e0e:	ea e5       	ldi	r30, 0x5A	; 90
    3e10:	f2 e0       	ldi	r31, 0x02	; 2
    3e12:	68 94       	set
    3e14:	15 90       	lpm	r1, Z+
    3e16:	15 91       	lpm	r17, Z+
    3e18:	35 91       	lpm	r19, Z+
    3e1a:	65 91       	lpm	r22, Z+
    3e1c:	95 91       	lpm	r25, Z+
    3e1e:	05 90       	lpm	r0, Z+
    3e20:	7f e2       	ldi	r23, 0x2F	; 47
    3e22:	73 95       	inc	r23
    3e24:	e1 18       	sub	r14, r1
    3e26:	f1 0a       	sbc	r15, r17
    3e28:	43 0b       	sbc	r20, r19
    3e2a:	56 0b       	sbc	r21, r22
    3e2c:	c9 0b       	sbc	r28, r25
    3e2e:	d0 09       	sbc	r29, r0
    3e30:	c0 f7       	brcc	.-16     	; 0x3e22 <__ftoa_engine+0x10a>
    3e32:	e1 0c       	add	r14, r1
    3e34:	f1 1e       	adc	r15, r17
    3e36:	43 1f       	adc	r20, r19
    3e38:	56 1f       	adc	r21, r22
    3e3a:	c9 1f       	adc	r28, r25
    3e3c:	d0 1d       	adc	r29, r0
    3e3e:	7e f4       	brtc	.+30     	; 0x3e5e <__ftoa_engine+0x146>
    3e40:	70 33       	cpi	r23, 0x30	; 48
    3e42:	11 f4       	brne	.+4      	; 0x3e48 <__ftoa_engine+0x130>
    3e44:	8a 95       	dec	r24
    3e46:	e6 cf       	rjmp	.-52     	; 0x3e14 <__ftoa_engine+0xfc>
    3e48:	e8 94       	clt
    3e4a:	01 50       	subi	r16, 0x01	; 1
    3e4c:	30 f0       	brcs	.+12     	; 0x3e5a <__ftoa_engine+0x142>
    3e4e:	08 0f       	add	r16, r24
    3e50:	0a f4       	brpl	.+2      	; 0x3e54 <__ftoa_engine+0x13c>
    3e52:	00 27       	eor	r16, r16
    3e54:	02 17       	cp	r16, r18
    3e56:	08 f4       	brcc	.+2      	; 0x3e5a <__ftoa_engine+0x142>
    3e58:	20 2f       	mov	r18, r16
    3e5a:	23 95       	inc	r18
    3e5c:	02 2f       	mov	r16, r18
    3e5e:	7a 33       	cpi	r23, 0x3A	; 58
    3e60:	28 f0       	brcs	.+10     	; 0x3e6c <__ftoa_engine+0x154>
    3e62:	79 e3       	ldi	r23, 0x39	; 57
    3e64:	7d 93       	st	X+, r23
    3e66:	2a 95       	dec	r18
    3e68:	e9 f7       	brne	.-6      	; 0x3e64 <__ftoa_engine+0x14c>
    3e6a:	10 c0       	rjmp	.+32     	; 0x3e8c <__ftoa_engine+0x174>
    3e6c:	7d 93       	st	X+, r23
    3e6e:	2a 95       	dec	r18
    3e70:	89 f6       	brne	.-94     	; 0x3e14 <__ftoa_engine+0xfc>
    3e72:	06 94       	lsr	r0
    3e74:	97 95       	ror	r25
    3e76:	67 95       	ror	r22
    3e78:	37 95       	ror	r19
    3e7a:	17 95       	ror	r17
    3e7c:	17 94       	ror	r1
    3e7e:	e1 18       	sub	r14, r1
    3e80:	f1 0a       	sbc	r15, r17
    3e82:	43 0b       	sbc	r20, r19
    3e84:	56 0b       	sbc	r21, r22
    3e86:	c9 0b       	sbc	r28, r25
    3e88:	d0 09       	sbc	r29, r0
    3e8a:	98 f0       	brcs	.+38     	; 0x3eb2 <__ftoa_engine+0x19a>
    3e8c:	23 95       	inc	r18
    3e8e:	7e 91       	ld	r23, -X
    3e90:	73 95       	inc	r23
    3e92:	7a 33       	cpi	r23, 0x3A	; 58
    3e94:	08 f0       	brcs	.+2      	; 0x3e98 <__ftoa_engine+0x180>
    3e96:	70 e3       	ldi	r23, 0x30	; 48
    3e98:	7c 93       	st	X, r23
    3e9a:	20 13       	cpse	r18, r16
    3e9c:	b8 f7       	brcc	.-18     	; 0x3e8c <__ftoa_engine+0x174>
    3e9e:	7e 91       	ld	r23, -X
    3ea0:	70 61       	ori	r23, 0x10	; 16
    3ea2:	7d 93       	st	X+, r23
    3ea4:	30 f0       	brcs	.+12     	; 0x3eb2 <__ftoa_engine+0x19a>
    3ea6:	83 95       	inc	r24
    3ea8:	71 e3       	ldi	r23, 0x31	; 49
    3eaa:	7d 93       	st	X+, r23
    3eac:	70 e3       	ldi	r23, 0x30	; 48
    3eae:	2a 95       	dec	r18
    3eb0:	e1 f7       	brne	.-8      	; 0x3eaa <__ftoa_engine+0x192>
    3eb2:	11 24       	eor	r1, r1
    3eb4:	ef 90       	pop	r14
    3eb6:	ff 90       	pop	r15
    3eb8:	0f 91       	pop	r16
    3eba:	1f 91       	pop	r17
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	99 27       	eor	r25, r25
    3ec2:	87 fd       	sbrc	r24, 7
    3ec4:	90 95       	com	r25
    3ec6:	08 95       	ret

00003ec8 <strnlen_P>:
    3ec8:	fc 01       	movw	r30, r24
    3eca:	05 90       	lpm	r0, Z+
    3ecc:	61 50       	subi	r22, 0x01	; 1
    3ece:	70 40       	sbci	r23, 0x00	; 0
    3ed0:	01 10       	cpse	r0, r1
    3ed2:	d8 f7       	brcc	.-10     	; 0x3eca <strnlen_P+0x2>
    3ed4:	80 95       	com	r24
    3ed6:	90 95       	com	r25
    3ed8:	8e 0f       	add	r24, r30
    3eda:	9f 1f       	adc	r25, r31
    3edc:	08 95       	ret

00003ede <strnlen>:
    3ede:	fc 01       	movw	r30, r24
    3ee0:	61 50       	subi	r22, 0x01	; 1
    3ee2:	70 40       	sbci	r23, 0x00	; 0
    3ee4:	01 90       	ld	r0, Z+
    3ee6:	01 10       	cpse	r0, r1
    3ee8:	d8 f7       	brcc	.-10     	; 0x3ee0 <strnlen+0x2>
    3eea:	80 95       	com	r24
    3eec:	90 95       	com	r25
    3eee:	8e 0f       	add	r24, r30
    3ef0:	9f 1f       	adc	r25, r31
    3ef2:	08 95       	ret

00003ef4 <fputc>:
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	fb 01       	movw	r30, r22
    3efe:	23 81       	ldd	r18, Z+3	; 0x03
    3f00:	21 fd       	sbrc	r18, 1
    3f02:	03 c0       	rjmp	.+6      	; 0x3f0a <fputc+0x16>
    3f04:	8f ef       	ldi	r24, 0xFF	; 255
    3f06:	9f ef       	ldi	r25, 0xFF	; 255
    3f08:	2c c0       	rjmp	.+88     	; 0x3f62 <fputc+0x6e>
    3f0a:	22 ff       	sbrs	r18, 2
    3f0c:	16 c0       	rjmp	.+44     	; 0x3f3a <fputc+0x46>
    3f0e:	46 81       	ldd	r20, Z+6	; 0x06
    3f10:	57 81       	ldd	r21, Z+7	; 0x07
    3f12:	24 81       	ldd	r18, Z+4	; 0x04
    3f14:	35 81       	ldd	r19, Z+5	; 0x05
    3f16:	42 17       	cp	r20, r18
    3f18:	53 07       	cpc	r21, r19
    3f1a:	44 f4       	brge	.+16     	; 0x3f2c <fputc+0x38>
    3f1c:	a0 81       	ld	r26, Z
    3f1e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f20:	9d 01       	movw	r18, r26
    3f22:	2f 5f       	subi	r18, 0xFF	; 255
    3f24:	3f 4f       	sbci	r19, 0xFF	; 255
    3f26:	31 83       	std	Z+1, r19	; 0x01
    3f28:	20 83       	st	Z, r18
    3f2a:	8c 93       	st	X, r24
    3f2c:	26 81       	ldd	r18, Z+6	; 0x06
    3f2e:	37 81       	ldd	r19, Z+7	; 0x07
    3f30:	2f 5f       	subi	r18, 0xFF	; 255
    3f32:	3f 4f       	sbci	r19, 0xFF	; 255
    3f34:	37 83       	std	Z+7, r19	; 0x07
    3f36:	26 83       	std	Z+6, r18	; 0x06
    3f38:	14 c0       	rjmp	.+40     	; 0x3f62 <fputc+0x6e>
    3f3a:	8b 01       	movw	r16, r22
    3f3c:	ec 01       	movw	r28, r24
    3f3e:	fb 01       	movw	r30, r22
    3f40:	00 84       	ldd	r0, Z+8	; 0x08
    3f42:	f1 85       	ldd	r31, Z+9	; 0x09
    3f44:	e0 2d       	mov	r30, r0
    3f46:	09 95       	icall
    3f48:	89 2b       	or	r24, r25
    3f4a:	e1 f6       	brne	.-72     	; 0x3f04 <fputc+0x10>
    3f4c:	d8 01       	movw	r26, r16
    3f4e:	16 96       	adiw	r26, 0x06	; 6
    3f50:	8d 91       	ld	r24, X+
    3f52:	9c 91       	ld	r25, X
    3f54:	17 97       	sbiw	r26, 0x07	; 7
    3f56:	01 96       	adiw	r24, 0x01	; 1
    3f58:	17 96       	adiw	r26, 0x07	; 7
    3f5a:	9c 93       	st	X, r25
    3f5c:	8e 93       	st	-X, r24
    3f5e:	16 97       	sbiw	r26, 0x06	; 6
    3f60:	ce 01       	movw	r24, r28
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	08 95       	ret

00003f6c <vsprintf>:
    3f6c:	ae e0       	ldi	r26, 0x0E	; 14
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	ec eb       	ldi	r30, 0xBC	; 188
    3f72:	ff e1       	ldi	r31, 0x1F	; 31
    3f74:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <__prologue_saves__+0x1c>
    3f78:	8c 01       	movw	r16, r24
    3f7a:	86 e0       	ldi	r24, 0x06	; 6
    3f7c:	8c 83       	std	Y+4, r24	; 0x04
    3f7e:	1a 83       	std	Y+2, r17	; 0x02
    3f80:	09 83       	std	Y+1, r16	; 0x01
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	9f e7       	ldi	r25, 0x7F	; 127
    3f86:	9e 83       	std	Y+6, r25	; 0x06
    3f88:	8d 83       	std	Y+5, r24	; 0x05
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	01 96       	adiw	r24, 0x01	; 1
    3f8e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <vfprintf>
    3f92:	ef 81       	ldd	r30, Y+7	; 0x07
    3f94:	f8 85       	ldd	r31, Y+8	; 0x08
    3f96:	e0 0f       	add	r30, r16
    3f98:	f1 1f       	adc	r31, r17
    3f9a:	10 82       	st	Z, r1
    3f9c:	2e 96       	adiw	r28, 0x0e	; 14
    3f9e:	e4 e0       	ldi	r30, 0x04	; 4
    3fa0:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__epilogue_restores__+0x1c>

00003fa4 <__ultoa_invert>:
    3fa4:	fa 01       	movw	r30, r20
    3fa6:	aa 27       	eor	r26, r26
    3fa8:	28 30       	cpi	r18, 0x08	; 8
    3faa:	51 f1       	breq	.+84     	; 0x4000 <__ultoa_invert+0x5c>
    3fac:	20 31       	cpi	r18, 0x10	; 16
    3fae:	81 f1       	breq	.+96     	; 0x4010 <__ultoa_invert+0x6c>
    3fb0:	e8 94       	clt
    3fb2:	6f 93       	push	r22
    3fb4:	6e 7f       	andi	r22, 0xFE	; 254
    3fb6:	6e 5f       	subi	r22, 0xFE	; 254
    3fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fba:	8f 4f       	sbci	r24, 0xFF	; 255
    3fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbe:	af 4f       	sbci	r26, 0xFF	; 255
    3fc0:	b1 e0       	ldi	r27, 0x01	; 1
    3fc2:	3e d0       	rcall	.+124    	; 0x4040 <__ultoa_invert+0x9c>
    3fc4:	b4 e0       	ldi	r27, 0x04	; 4
    3fc6:	3c d0       	rcall	.+120    	; 0x4040 <__ultoa_invert+0x9c>
    3fc8:	67 0f       	add	r22, r23
    3fca:	78 1f       	adc	r23, r24
    3fcc:	89 1f       	adc	r24, r25
    3fce:	9a 1f       	adc	r25, r26
    3fd0:	a1 1d       	adc	r26, r1
    3fd2:	68 0f       	add	r22, r24
    3fd4:	79 1f       	adc	r23, r25
    3fd6:	8a 1f       	adc	r24, r26
    3fd8:	91 1d       	adc	r25, r1
    3fda:	a1 1d       	adc	r26, r1
    3fdc:	6a 0f       	add	r22, r26
    3fde:	71 1d       	adc	r23, r1
    3fe0:	81 1d       	adc	r24, r1
    3fe2:	91 1d       	adc	r25, r1
    3fe4:	a1 1d       	adc	r26, r1
    3fe6:	20 d0       	rcall	.+64     	; 0x4028 <__ultoa_invert+0x84>
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <__ultoa_invert+0x48>
    3fea:	68 94       	set
    3fec:	3f 91       	pop	r19
    3fee:	2a e0       	ldi	r18, 0x0A	; 10
    3ff0:	26 9f       	mul	r18, r22
    3ff2:	11 24       	eor	r1, r1
    3ff4:	30 19       	sub	r19, r0
    3ff6:	30 5d       	subi	r19, 0xD0	; 208
    3ff8:	31 93       	st	Z+, r19
    3ffa:	de f6       	brtc	.-74     	; 0x3fb2 <__ultoa_invert+0xe>
    3ffc:	cf 01       	movw	r24, r30
    3ffe:	08 95       	ret
    4000:	46 2f       	mov	r20, r22
    4002:	47 70       	andi	r20, 0x07	; 7
    4004:	40 5d       	subi	r20, 0xD0	; 208
    4006:	41 93       	st	Z+, r20
    4008:	b3 e0       	ldi	r27, 0x03	; 3
    400a:	0f d0       	rcall	.+30     	; 0x402a <__ultoa_invert+0x86>
    400c:	c9 f7       	brne	.-14     	; 0x4000 <__ultoa_invert+0x5c>
    400e:	f6 cf       	rjmp	.-20     	; 0x3ffc <__ultoa_invert+0x58>
    4010:	46 2f       	mov	r20, r22
    4012:	4f 70       	andi	r20, 0x0F	; 15
    4014:	40 5d       	subi	r20, 0xD0	; 208
    4016:	4a 33       	cpi	r20, 0x3A	; 58
    4018:	18 f0       	brcs	.+6      	; 0x4020 <__ultoa_invert+0x7c>
    401a:	49 5d       	subi	r20, 0xD9	; 217
    401c:	31 fd       	sbrc	r19, 1
    401e:	40 52       	subi	r20, 0x20	; 32
    4020:	41 93       	st	Z+, r20
    4022:	02 d0       	rcall	.+4      	; 0x4028 <__ultoa_invert+0x84>
    4024:	a9 f7       	brne	.-22     	; 0x4010 <__ultoa_invert+0x6c>
    4026:	ea cf       	rjmp	.-44     	; 0x3ffc <__ultoa_invert+0x58>
    4028:	b4 e0       	ldi	r27, 0x04	; 4
    402a:	a6 95       	lsr	r26
    402c:	97 95       	ror	r25
    402e:	87 95       	ror	r24
    4030:	77 95       	ror	r23
    4032:	67 95       	ror	r22
    4034:	ba 95       	dec	r27
    4036:	c9 f7       	brne	.-14     	; 0x402a <__ultoa_invert+0x86>
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	61 05       	cpc	r22, r1
    403c:	71 05       	cpc	r23, r1
    403e:	08 95       	ret
    4040:	9b 01       	movw	r18, r22
    4042:	ac 01       	movw	r20, r24
    4044:	0a 2e       	mov	r0, r26
    4046:	06 94       	lsr	r0
    4048:	57 95       	ror	r21
    404a:	47 95       	ror	r20
    404c:	37 95       	ror	r19
    404e:	27 95       	ror	r18
    4050:	ba 95       	dec	r27
    4052:	c9 f7       	brne	.-14     	; 0x4046 <__ultoa_invert+0xa2>
    4054:	62 0f       	add	r22, r18
    4056:	73 1f       	adc	r23, r19
    4058:	84 1f       	adc	r24, r20
    405a:	95 1f       	adc	r25, r21
    405c:	a0 1d       	adc	r26, r0
    405e:	08 95       	ret

00004060 <_exit>:
    4060:	f8 94       	cli

00004062 <__stop_program>:
    4062:	ff cf       	rjmp	.-2      	; 0x4062 <__stop_program>
